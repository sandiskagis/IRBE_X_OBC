
IRBE-X_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012508  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  080125c8  080125c8  000225c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012da0  08012da0  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  08012da0  08012da0  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012da0  08012da0  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012da0  08012da0  00022da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012da4  08012da4  00022da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08012da8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002574  200001f8  08012f9c  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000276c  08012f9c  0003276c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9b6  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003868  00000000  00000000  0004abd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0004e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  0004fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001566a  00000000  00000000  00051108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8bc  00000000  00000000  00066772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078693  00000000  00000000  0008502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae0  00000000  00000000  000fd714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f8 	.word	0x200001f8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080125ac 	.word	0x080125ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001fc 	.word	0x200001fc
 8000100:	080125ac 	.word	0x080125ac

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fdcf 	bl	8001fdc <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd1f 	bl	8001e8c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fdc1 	bl	8001fdc <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdb7 	bl	8001fdc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd47 	bl	8001f10 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd3d 	bl	8001f10 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fb55 	bl	8000b5c <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fae1 	bl	8000a84 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb47 	bl	8000b5c <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb3d 	bl	8000b5c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 faed 	bl	8000ad0 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fae3 	bl	8000ad0 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fadd>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	46c6      	mov	lr, r8
 800051c:	0243      	lsls	r3, r0, #9
 800051e:	0a5b      	lsrs	r3, r3, #9
 8000520:	024e      	lsls	r6, r1, #9
 8000522:	0045      	lsls	r5, r0, #1
 8000524:	004f      	lsls	r7, r1, #1
 8000526:	00da      	lsls	r2, r3, #3
 8000528:	0fc4      	lsrs	r4, r0, #31
 800052a:	469c      	mov	ip, r3
 800052c:	0a70      	lsrs	r0, r6, #9
 800052e:	4690      	mov	r8, r2
 8000530:	b500      	push	{lr}
 8000532:	0e2d      	lsrs	r5, r5, #24
 8000534:	0e3f      	lsrs	r7, r7, #24
 8000536:	0fc9      	lsrs	r1, r1, #31
 8000538:	09b6      	lsrs	r6, r6, #6
 800053a:	428c      	cmp	r4, r1
 800053c:	d04b      	beq.n	80005d6 <__aeabi_fadd+0xbe>
 800053e:	1bea      	subs	r2, r5, r7
 8000540:	2a00      	cmp	r2, #0
 8000542:	dd36      	ble.n	80005b2 <__aeabi_fadd+0x9a>
 8000544:	2f00      	cmp	r7, #0
 8000546:	d061      	beq.n	800060c <__aeabi_fadd+0xf4>
 8000548:	2dff      	cmp	r5, #255	; 0xff
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0x36>
 800054c:	e0ad      	b.n	80006aa <__aeabi_fadd+0x192>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	04db      	lsls	r3, r3, #19
 8000552:	431e      	orrs	r6, r3
 8000554:	2a1b      	cmp	r2, #27
 8000556:	dc00      	bgt.n	800055a <__aeabi_fadd+0x42>
 8000558:	e0d3      	b.n	8000702 <__aeabi_fadd+0x1ea>
 800055a:	2001      	movs	r0, #1
 800055c:	4643      	mov	r3, r8
 800055e:	1a18      	subs	r0, r3, r0
 8000560:	0143      	lsls	r3, r0, #5
 8000562:	d400      	bmi.n	8000566 <__aeabi_fadd+0x4e>
 8000564:	e08c      	b.n	8000680 <__aeabi_fadd+0x168>
 8000566:	0180      	lsls	r0, r0, #6
 8000568:	0987      	lsrs	r7, r0, #6
 800056a:	0038      	movs	r0, r7
 800056c:	f002 fd12 	bl	8002f94 <__clzsi2>
 8000570:	3805      	subs	r0, #5
 8000572:	4087      	lsls	r7, r0
 8000574:	4285      	cmp	r5, r0
 8000576:	dc00      	bgt.n	800057a <__aeabi_fadd+0x62>
 8000578:	e0b6      	b.n	80006e8 <__aeabi_fadd+0x1d0>
 800057a:	1a2d      	subs	r5, r5, r0
 800057c:	48b3      	ldr	r0, [pc, #716]	; (800084c <__aeabi_fadd+0x334>)
 800057e:	4038      	ands	r0, r7
 8000580:	0743      	lsls	r3, r0, #29
 8000582:	d004      	beq.n	800058e <__aeabi_fadd+0x76>
 8000584:	230f      	movs	r3, #15
 8000586:	4003      	ands	r3, r0
 8000588:	2b04      	cmp	r3, #4
 800058a:	d000      	beq.n	800058e <__aeabi_fadd+0x76>
 800058c:	3004      	adds	r0, #4
 800058e:	0143      	lsls	r3, r0, #5
 8000590:	d400      	bmi.n	8000594 <__aeabi_fadd+0x7c>
 8000592:	e078      	b.n	8000686 <__aeabi_fadd+0x16e>
 8000594:	1c6a      	adds	r2, r5, #1
 8000596:	2dfe      	cmp	r5, #254	; 0xfe
 8000598:	d065      	beq.n	8000666 <__aeabi_fadd+0x14e>
 800059a:	0180      	lsls	r0, r0, #6
 800059c:	0a43      	lsrs	r3, r0, #9
 800059e:	469c      	mov	ip, r3
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	4663      	mov	r3, ip
 80005a4:	05d0      	lsls	r0, r2, #23
 80005a6:	4318      	orrs	r0, r3
 80005a8:	07e4      	lsls	r4, r4, #31
 80005aa:	4320      	orrs	r0, r4
 80005ac:	bc80      	pop	{r7}
 80005ae:	46b8      	mov	r8, r7
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d035      	beq.n	8000622 <__aeabi_fadd+0x10a>
 80005b6:	1b7a      	subs	r2, r7, r5
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_fadd+0xa6>
 80005bc:	e0af      	b.n	800071e <__aeabi_fadd+0x206>
 80005be:	4643      	mov	r3, r8
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0xae>
 80005c4:	e0a7      	b.n	8000716 <__aeabi_fadd+0x1fe>
 80005c6:	1e53      	subs	r3, r2, #1
 80005c8:	2a01      	cmp	r2, #1
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0xb6>
 80005cc:	e12f      	b.n	800082e <__aeabi_fadd+0x316>
 80005ce:	2aff      	cmp	r2, #255	; 0xff
 80005d0:	d069      	beq.n	80006a6 <__aeabi_fadd+0x18e>
 80005d2:	001a      	movs	r2, r3
 80005d4:	e0aa      	b.n	800072c <__aeabi_fadd+0x214>
 80005d6:	1be9      	subs	r1, r5, r7
 80005d8:	2900      	cmp	r1, #0
 80005da:	dd70      	ble.n	80006be <__aeabi_fadd+0x1a6>
 80005dc:	2f00      	cmp	r7, #0
 80005de:	d037      	beq.n	8000650 <__aeabi_fadd+0x138>
 80005e0:	2dff      	cmp	r5, #255	; 0xff
 80005e2:	d062      	beq.n	80006aa <__aeabi_fadd+0x192>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	04db      	lsls	r3, r3, #19
 80005e8:	431e      	orrs	r6, r3
 80005ea:	291b      	cmp	r1, #27
 80005ec:	dc00      	bgt.n	80005f0 <__aeabi_fadd+0xd8>
 80005ee:	e0b0      	b.n	8000752 <__aeabi_fadd+0x23a>
 80005f0:	2001      	movs	r0, #1
 80005f2:	4440      	add	r0, r8
 80005f4:	0143      	lsls	r3, r0, #5
 80005f6:	d543      	bpl.n	8000680 <__aeabi_fadd+0x168>
 80005f8:	3501      	adds	r5, #1
 80005fa:	2dff      	cmp	r5, #255	; 0xff
 80005fc:	d033      	beq.n	8000666 <__aeabi_fadd+0x14e>
 80005fe:	2301      	movs	r3, #1
 8000600:	4a93      	ldr	r2, [pc, #588]	; (8000850 <__aeabi_fadd+0x338>)
 8000602:	4003      	ands	r3, r0
 8000604:	0840      	lsrs	r0, r0, #1
 8000606:	4010      	ands	r0, r2
 8000608:	4318      	orrs	r0, r3
 800060a:	e7b9      	b.n	8000580 <__aeabi_fadd+0x68>
 800060c:	2e00      	cmp	r6, #0
 800060e:	d100      	bne.n	8000612 <__aeabi_fadd+0xfa>
 8000610:	e083      	b.n	800071a <__aeabi_fadd+0x202>
 8000612:	1e51      	subs	r1, r2, #1
 8000614:	2a01      	cmp	r2, #1
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x102>
 8000618:	e0d8      	b.n	80007cc <__aeabi_fadd+0x2b4>
 800061a:	2aff      	cmp	r2, #255	; 0xff
 800061c:	d045      	beq.n	80006aa <__aeabi_fadd+0x192>
 800061e:	000a      	movs	r2, r1
 8000620:	e798      	b.n	8000554 <__aeabi_fadd+0x3c>
 8000622:	27fe      	movs	r7, #254	; 0xfe
 8000624:	1c6a      	adds	r2, r5, #1
 8000626:	4217      	tst	r7, r2
 8000628:	d000      	beq.n	800062c <__aeabi_fadd+0x114>
 800062a:	e086      	b.n	800073a <__aeabi_fadd+0x222>
 800062c:	2d00      	cmp	r5, #0
 800062e:	d000      	beq.n	8000632 <__aeabi_fadd+0x11a>
 8000630:	e0b7      	b.n	80007a2 <__aeabi_fadd+0x28a>
 8000632:	4643      	mov	r3, r8
 8000634:	2b00      	cmp	r3, #0
 8000636:	d100      	bne.n	800063a <__aeabi_fadd+0x122>
 8000638:	e0f3      	b.n	8000822 <__aeabi_fadd+0x30a>
 800063a:	2200      	movs	r2, #0
 800063c:	2e00      	cmp	r6, #0
 800063e:	d0b0      	beq.n	80005a2 <__aeabi_fadd+0x8a>
 8000640:	1b98      	subs	r0, r3, r6
 8000642:	0143      	lsls	r3, r0, #5
 8000644:	d400      	bmi.n	8000648 <__aeabi_fadd+0x130>
 8000646:	e0fa      	b.n	800083e <__aeabi_fadd+0x326>
 8000648:	4643      	mov	r3, r8
 800064a:	000c      	movs	r4, r1
 800064c:	1af0      	subs	r0, r6, r3
 800064e:	e797      	b.n	8000580 <__aeabi_fadd+0x68>
 8000650:	2e00      	cmp	r6, #0
 8000652:	d100      	bne.n	8000656 <__aeabi_fadd+0x13e>
 8000654:	e0c8      	b.n	80007e8 <__aeabi_fadd+0x2d0>
 8000656:	1e4a      	subs	r2, r1, #1
 8000658:	2901      	cmp	r1, #1
 800065a:	d100      	bne.n	800065e <__aeabi_fadd+0x146>
 800065c:	e0ae      	b.n	80007bc <__aeabi_fadd+0x2a4>
 800065e:	29ff      	cmp	r1, #255	; 0xff
 8000660:	d023      	beq.n	80006aa <__aeabi_fadd+0x192>
 8000662:	0011      	movs	r1, r2
 8000664:	e7c1      	b.n	80005ea <__aeabi_fadd+0xd2>
 8000666:	2300      	movs	r3, #0
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	469c      	mov	ip, r3
 800066c:	e799      	b.n	80005a2 <__aeabi_fadd+0x8a>
 800066e:	21fe      	movs	r1, #254	; 0xfe
 8000670:	1c6a      	adds	r2, r5, #1
 8000672:	4211      	tst	r1, r2
 8000674:	d077      	beq.n	8000766 <__aeabi_fadd+0x24e>
 8000676:	2aff      	cmp	r2, #255	; 0xff
 8000678:	d0f5      	beq.n	8000666 <__aeabi_fadd+0x14e>
 800067a:	0015      	movs	r5, r2
 800067c:	4446      	add	r6, r8
 800067e:	0870      	lsrs	r0, r6, #1
 8000680:	0743      	lsls	r3, r0, #29
 8000682:	d000      	beq.n	8000686 <__aeabi_fadd+0x16e>
 8000684:	e77e      	b.n	8000584 <__aeabi_fadd+0x6c>
 8000686:	08c3      	lsrs	r3, r0, #3
 8000688:	2dff      	cmp	r5, #255	; 0xff
 800068a:	d00e      	beq.n	80006aa <__aeabi_fadd+0x192>
 800068c:	025b      	lsls	r3, r3, #9
 800068e:	0a5b      	lsrs	r3, r3, #9
 8000690:	469c      	mov	ip, r3
 8000692:	b2ea      	uxtb	r2, r5
 8000694:	e785      	b.n	80005a2 <__aeabi_fadd+0x8a>
 8000696:	2e00      	cmp	r6, #0
 8000698:	d007      	beq.n	80006aa <__aeabi_fadd+0x192>
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	03d2      	lsls	r2, r2, #15
 800069e:	4213      	tst	r3, r2
 80006a0:	d003      	beq.n	80006aa <__aeabi_fadd+0x192>
 80006a2:	4210      	tst	r0, r2
 80006a4:	d101      	bne.n	80006aa <__aeabi_fadd+0x192>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0003      	movs	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0db      	beq.n	8000666 <__aeabi_fadd+0x14e>
 80006ae:	2080      	movs	r0, #128	; 0x80
 80006b0:	03c0      	lsls	r0, r0, #15
 80006b2:	4318      	orrs	r0, r3
 80006b4:	0240      	lsls	r0, r0, #9
 80006b6:	0a43      	lsrs	r3, r0, #9
 80006b8:	469c      	mov	ip, r3
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	e771      	b.n	80005a2 <__aeabi_fadd+0x8a>
 80006be:	2900      	cmp	r1, #0
 80006c0:	d0d5      	beq.n	800066e <__aeabi_fadd+0x156>
 80006c2:	1b7a      	subs	r2, r7, r5
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d160      	bne.n	800078a <__aeabi_fadd+0x272>
 80006c8:	4643      	mov	r3, r8
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d024      	beq.n	8000718 <__aeabi_fadd+0x200>
 80006ce:	1e53      	subs	r3, r2, #1
 80006d0:	2a01      	cmp	r2, #1
 80006d2:	d073      	beq.n	80007bc <__aeabi_fadd+0x2a4>
 80006d4:	2aff      	cmp	r2, #255	; 0xff
 80006d6:	d0e7      	beq.n	80006a8 <__aeabi_fadd+0x190>
 80006d8:	001a      	movs	r2, r3
 80006da:	2a1b      	cmp	r2, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0x1c8>
 80006de:	e085      	b.n	80007ec <__aeabi_fadd+0x2d4>
 80006e0:	2001      	movs	r0, #1
 80006e2:	003d      	movs	r5, r7
 80006e4:	1980      	adds	r0, r0, r6
 80006e6:	e785      	b.n	80005f4 <__aeabi_fadd+0xdc>
 80006e8:	2320      	movs	r3, #32
 80006ea:	003a      	movs	r2, r7
 80006ec:	1b45      	subs	r5, r0, r5
 80006ee:	0038      	movs	r0, r7
 80006f0:	3501      	adds	r5, #1
 80006f2:	40ea      	lsrs	r2, r5
 80006f4:	1b5d      	subs	r5, r3, r5
 80006f6:	40a8      	lsls	r0, r5
 80006f8:	1e43      	subs	r3, r0, #1
 80006fa:	4198      	sbcs	r0, r3
 80006fc:	2500      	movs	r5, #0
 80006fe:	4310      	orrs	r0, r2
 8000700:	e73e      	b.n	8000580 <__aeabi_fadd+0x68>
 8000702:	2320      	movs	r3, #32
 8000704:	0030      	movs	r0, r6
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	0031      	movs	r1, r6
 800070a:	4098      	lsls	r0, r3
 800070c:	40d1      	lsrs	r1, r2
 800070e:	1e43      	subs	r3, r0, #1
 8000710:	4198      	sbcs	r0, r3
 8000712:	4308      	orrs	r0, r1
 8000714:	e722      	b.n	800055c <__aeabi_fadd+0x44>
 8000716:	000c      	movs	r4, r1
 8000718:	0003      	movs	r3, r0
 800071a:	0015      	movs	r5, r2
 800071c:	e7b4      	b.n	8000688 <__aeabi_fadd+0x170>
 800071e:	2fff      	cmp	r7, #255	; 0xff
 8000720:	d0c1      	beq.n	80006a6 <__aeabi_fadd+0x18e>
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	4640      	mov	r0, r8
 8000726:	04db      	lsls	r3, r3, #19
 8000728:	4318      	orrs	r0, r3
 800072a:	4680      	mov	r8, r0
 800072c:	2a1b      	cmp	r2, #27
 800072e:	dd51      	ble.n	80007d4 <__aeabi_fadd+0x2bc>
 8000730:	2001      	movs	r0, #1
 8000732:	000c      	movs	r4, r1
 8000734:	003d      	movs	r5, r7
 8000736:	1a30      	subs	r0, r6, r0
 8000738:	e712      	b.n	8000560 <__aeabi_fadd+0x48>
 800073a:	4643      	mov	r3, r8
 800073c:	1b9f      	subs	r7, r3, r6
 800073e:	017b      	lsls	r3, r7, #5
 8000740:	d42b      	bmi.n	800079a <__aeabi_fadd+0x282>
 8000742:	2f00      	cmp	r7, #0
 8000744:	d000      	beq.n	8000748 <__aeabi_fadd+0x230>
 8000746:	e710      	b.n	800056a <__aeabi_fadd+0x52>
 8000748:	2300      	movs	r3, #0
 800074a:	2400      	movs	r4, #0
 800074c:	2200      	movs	r2, #0
 800074e:	469c      	mov	ip, r3
 8000750:	e727      	b.n	80005a2 <__aeabi_fadd+0x8a>
 8000752:	2320      	movs	r3, #32
 8000754:	0032      	movs	r2, r6
 8000756:	0030      	movs	r0, r6
 8000758:	40ca      	lsrs	r2, r1
 800075a:	1a59      	subs	r1, r3, r1
 800075c:	4088      	lsls	r0, r1
 800075e:	1e43      	subs	r3, r0, #1
 8000760:	4198      	sbcs	r0, r3
 8000762:	4310      	orrs	r0, r2
 8000764:	e745      	b.n	80005f2 <__aeabi_fadd+0xda>
 8000766:	2d00      	cmp	r5, #0
 8000768:	d14a      	bne.n	8000800 <__aeabi_fadd+0x2e8>
 800076a:	4643      	mov	r3, r8
 800076c:	2b00      	cmp	r3, #0
 800076e:	d063      	beq.n	8000838 <__aeabi_fadd+0x320>
 8000770:	2200      	movs	r2, #0
 8000772:	2e00      	cmp	r6, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x260>
 8000776:	e714      	b.n	80005a2 <__aeabi_fadd+0x8a>
 8000778:	0030      	movs	r0, r6
 800077a:	4440      	add	r0, r8
 800077c:	0143      	lsls	r3, r0, #5
 800077e:	d400      	bmi.n	8000782 <__aeabi_fadd+0x26a>
 8000780:	e77e      	b.n	8000680 <__aeabi_fadd+0x168>
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <__aeabi_fadd+0x334>)
 8000784:	3501      	adds	r5, #1
 8000786:	4018      	ands	r0, r3
 8000788:	e77a      	b.n	8000680 <__aeabi_fadd+0x168>
 800078a:	2fff      	cmp	r7, #255	; 0xff
 800078c:	d08c      	beq.n	80006a8 <__aeabi_fadd+0x190>
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	4641      	mov	r1, r8
 8000792:	04db      	lsls	r3, r3, #19
 8000794:	4319      	orrs	r1, r3
 8000796:	4688      	mov	r8, r1
 8000798:	e79f      	b.n	80006da <__aeabi_fadd+0x1c2>
 800079a:	4643      	mov	r3, r8
 800079c:	000c      	movs	r4, r1
 800079e:	1af7      	subs	r7, r6, r3
 80007a0:	e6e3      	b.n	800056a <__aeabi_fadd+0x52>
 80007a2:	4642      	mov	r2, r8
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_fadd+0x292>
 80007a8:	e775      	b.n	8000696 <__aeabi_fadd+0x17e>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x298>
 80007ae:	e77a      	b.n	80006a6 <__aeabi_fadd+0x18e>
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	03db      	lsls	r3, r3, #15
 80007b4:	2400      	movs	r4, #0
 80007b6:	469c      	mov	ip, r3
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	e6f2      	b.n	80005a2 <__aeabi_fadd+0x8a>
 80007bc:	0030      	movs	r0, r6
 80007be:	4440      	add	r0, r8
 80007c0:	2501      	movs	r5, #1
 80007c2:	0143      	lsls	r3, r0, #5
 80007c4:	d400      	bmi.n	80007c8 <__aeabi_fadd+0x2b0>
 80007c6:	e75b      	b.n	8000680 <__aeabi_fadd+0x168>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e718      	b.n	80005fe <__aeabi_fadd+0xe6>
 80007cc:	4643      	mov	r3, r8
 80007ce:	2501      	movs	r5, #1
 80007d0:	1b98      	subs	r0, r3, r6
 80007d2:	e6c5      	b.n	8000560 <__aeabi_fadd+0x48>
 80007d4:	2320      	movs	r3, #32
 80007d6:	4644      	mov	r4, r8
 80007d8:	4640      	mov	r0, r8
 80007da:	40d4      	lsrs	r4, r2
 80007dc:	1a9a      	subs	r2, r3, r2
 80007de:	4090      	lsls	r0, r2
 80007e0:	1e43      	subs	r3, r0, #1
 80007e2:	4198      	sbcs	r0, r3
 80007e4:	4320      	orrs	r0, r4
 80007e6:	e7a4      	b.n	8000732 <__aeabi_fadd+0x21a>
 80007e8:	000d      	movs	r5, r1
 80007ea:	e74d      	b.n	8000688 <__aeabi_fadd+0x170>
 80007ec:	2320      	movs	r3, #32
 80007ee:	4641      	mov	r1, r8
 80007f0:	4640      	mov	r0, r8
 80007f2:	40d1      	lsrs	r1, r2
 80007f4:	1a9a      	subs	r2, r3, r2
 80007f6:	4090      	lsls	r0, r2
 80007f8:	1e43      	subs	r3, r0, #1
 80007fa:	4198      	sbcs	r0, r3
 80007fc:	4308      	orrs	r0, r1
 80007fe:	e770      	b.n	80006e2 <__aeabi_fadd+0x1ca>
 8000800:	4642      	mov	r2, r8
 8000802:	2a00      	cmp	r2, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x2f0>
 8000806:	e74f      	b.n	80006a8 <__aeabi_fadd+0x190>
 8000808:	2e00      	cmp	r6, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x2f6>
 800080c:	e74d      	b.n	80006aa <__aeabi_fadd+0x192>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	03d2      	lsls	r2, r2, #15
 8000812:	4213      	tst	r3, r2
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x300>
 8000816:	e748      	b.n	80006aa <__aeabi_fadd+0x192>
 8000818:	4210      	tst	r0, r2
 800081a:	d000      	beq.n	800081e <__aeabi_fadd+0x306>
 800081c:	e745      	b.n	80006aa <__aeabi_fadd+0x192>
 800081e:	0003      	movs	r3, r0
 8000820:	e743      	b.n	80006aa <__aeabi_fadd+0x192>
 8000822:	2e00      	cmp	r6, #0
 8000824:	d090      	beq.n	8000748 <__aeabi_fadd+0x230>
 8000826:	000c      	movs	r4, r1
 8000828:	4684      	mov	ip, r0
 800082a:	2200      	movs	r2, #0
 800082c:	e6b9      	b.n	80005a2 <__aeabi_fadd+0x8a>
 800082e:	4643      	mov	r3, r8
 8000830:	000c      	movs	r4, r1
 8000832:	1af0      	subs	r0, r6, r3
 8000834:	3501      	adds	r5, #1
 8000836:	e693      	b.n	8000560 <__aeabi_fadd+0x48>
 8000838:	4684      	mov	ip, r0
 800083a:	2200      	movs	r2, #0
 800083c:	e6b1      	b.n	80005a2 <__aeabi_fadd+0x8a>
 800083e:	2800      	cmp	r0, #0
 8000840:	d000      	beq.n	8000844 <__aeabi_fadd+0x32c>
 8000842:	e71d      	b.n	8000680 <__aeabi_fadd+0x168>
 8000844:	2300      	movs	r3, #0
 8000846:	2400      	movs	r4, #0
 8000848:	469c      	mov	ip, r3
 800084a:	e6aa      	b.n	80005a2 <__aeabi_fadd+0x8a>
 800084c:	fbffffff 	.word	0xfbffffff
 8000850:	7dffffff 	.word	0x7dffffff

08000854 <__aeabi_fdiv>:
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	464f      	mov	r7, r9
 8000858:	4646      	mov	r6, r8
 800085a:	46d6      	mov	lr, sl
 800085c:	0245      	lsls	r5, r0, #9
 800085e:	b5c0      	push	{r6, r7, lr}
 8000860:	0047      	lsls	r7, r0, #1
 8000862:	1c0c      	adds	r4, r1, #0
 8000864:	0a6d      	lsrs	r5, r5, #9
 8000866:	0e3f      	lsrs	r7, r7, #24
 8000868:	0fc6      	lsrs	r6, r0, #31
 800086a:	2f00      	cmp	r7, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fdiv+0x1c>
 800086e:	e070      	b.n	8000952 <__aeabi_fdiv+0xfe>
 8000870:	2fff      	cmp	r7, #255	; 0xff
 8000872:	d100      	bne.n	8000876 <__aeabi_fdiv+0x22>
 8000874:	e075      	b.n	8000962 <__aeabi_fdiv+0x10e>
 8000876:	00eb      	lsls	r3, r5, #3
 8000878:	2580      	movs	r5, #128	; 0x80
 800087a:	04ed      	lsls	r5, r5, #19
 800087c:	431d      	orrs	r5, r3
 800087e:	2300      	movs	r3, #0
 8000880:	4699      	mov	r9, r3
 8000882:	469a      	mov	sl, r3
 8000884:	3f7f      	subs	r7, #127	; 0x7f
 8000886:	0260      	lsls	r0, r4, #9
 8000888:	0a43      	lsrs	r3, r0, #9
 800088a:	4698      	mov	r8, r3
 800088c:	0063      	lsls	r3, r4, #1
 800088e:	0e1b      	lsrs	r3, r3, #24
 8000890:	0fe4      	lsrs	r4, r4, #31
 8000892:	2b00      	cmp	r3, #0
 8000894:	d04e      	beq.n	8000934 <__aeabi_fdiv+0xe0>
 8000896:	2bff      	cmp	r3, #255	; 0xff
 8000898:	d046      	beq.n	8000928 <__aeabi_fdiv+0xd4>
 800089a:	4642      	mov	r2, r8
 800089c:	00d0      	lsls	r0, r2, #3
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	4302      	orrs	r2, r0
 80008a4:	4690      	mov	r8, r2
 80008a6:	2200      	movs	r2, #0
 80008a8:	3b7f      	subs	r3, #127	; 0x7f
 80008aa:	0031      	movs	r1, r6
 80008ac:	1aff      	subs	r7, r7, r3
 80008ae:	464b      	mov	r3, r9
 80008b0:	4061      	eors	r1, r4
 80008b2:	b2c9      	uxtb	r1, r1
 80008b4:	4313      	orrs	r3, r2
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d900      	bls.n	80008bc <__aeabi_fdiv+0x68>
 80008ba:	e0b5      	b.n	8000a28 <__aeabi_fdiv+0x1d4>
 80008bc:	486e      	ldr	r0, [pc, #440]	; (8000a78 <__aeabi_fdiv+0x224>)
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	58c3      	ldr	r3, [r0, r3]
 80008c2:	469f      	mov	pc, r3
 80008c4:	2300      	movs	r3, #0
 80008c6:	4698      	mov	r8, r3
 80008c8:	0026      	movs	r6, r4
 80008ca:	4645      	mov	r5, r8
 80008cc:	4692      	mov	sl, r2
 80008ce:	4653      	mov	r3, sl
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fdiv+0x82>
 80008d4:	e089      	b.n	80009ea <__aeabi_fdiv+0x196>
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d100      	bne.n	80008dc <__aeabi_fdiv+0x88>
 80008da:	e09e      	b.n	8000a1a <__aeabi_fdiv+0x1c6>
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d018      	beq.n	8000912 <__aeabi_fdiv+0xbe>
 80008e0:	003b      	movs	r3, r7
 80008e2:	337f      	adds	r3, #127	; 0x7f
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	dd69      	ble.n	80009bc <__aeabi_fdiv+0x168>
 80008e8:	076a      	lsls	r2, r5, #29
 80008ea:	d004      	beq.n	80008f6 <__aeabi_fdiv+0xa2>
 80008ec:	220f      	movs	r2, #15
 80008ee:	402a      	ands	r2, r5
 80008f0:	2a04      	cmp	r2, #4
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fdiv+0xa2>
 80008f4:	3504      	adds	r5, #4
 80008f6:	012a      	lsls	r2, r5, #4
 80008f8:	d503      	bpl.n	8000902 <__aeabi_fdiv+0xae>
 80008fa:	4b60      	ldr	r3, [pc, #384]	; (8000a7c <__aeabi_fdiv+0x228>)
 80008fc:	401d      	ands	r5, r3
 80008fe:	003b      	movs	r3, r7
 8000900:	3380      	adds	r3, #128	; 0x80
 8000902:	2bfe      	cmp	r3, #254	; 0xfe
 8000904:	dd00      	ble.n	8000908 <__aeabi_fdiv+0xb4>
 8000906:	e070      	b.n	80009ea <__aeabi_fdiv+0x196>
 8000908:	01ad      	lsls	r5, r5, #6
 800090a:	0a6d      	lsrs	r5, r5, #9
 800090c:	b2d8      	uxtb	r0, r3
 800090e:	e002      	b.n	8000916 <__aeabi_fdiv+0xc2>
 8000910:	000e      	movs	r6, r1
 8000912:	2000      	movs	r0, #0
 8000914:	2500      	movs	r5, #0
 8000916:	05c0      	lsls	r0, r0, #23
 8000918:	4328      	orrs	r0, r5
 800091a:	07f6      	lsls	r6, r6, #31
 800091c:	4330      	orrs	r0, r6
 800091e:	bce0      	pop	{r5, r6, r7}
 8000920:	46ba      	mov	sl, r7
 8000922:	46b1      	mov	r9, r6
 8000924:	46a8      	mov	r8, r5
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	4643      	mov	r3, r8
 800092a:	2b00      	cmp	r3, #0
 800092c:	d13f      	bne.n	80009ae <__aeabi_fdiv+0x15a>
 800092e:	2202      	movs	r2, #2
 8000930:	3fff      	subs	r7, #255	; 0xff
 8000932:	e003      	b.n	800093c <__aeabi_fdiv+0xe8>
 8000934:	4643      	mov	r3, r8
 8000936:	2b00      	cmp	r3, #0
 8000938:	d12d      	bne.n	8000996 <__aeabi_fdiv+0x142>
 800093a:	2201      	movs	r2, #1
 800093c:	0031      	movs	r1, r6
 800093e:	464b      	mov	r3, r9
 8000940:	4061      	eors	r1, r4
 8000942:	b2c9      	uxtb	r1, r1
 8000944:	4313      	orrs	r3, r2
 8000946:	2b0f      	cmp	r3, #15
 8000948:	d834      	bhi.n	80009b4 <__aeabi_fdiv+0x160>
 800094a:	484d      	ldr	r0, [pc, #308]	; (8000a80 <__aeabi_fdiv+0x22c>)
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	58c3      	ldr	r3, [r0, r3]
 8000950:	469f      	mov	pc, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d113      	bne.n	800097e <__aeabi_fdiv+0x12a>
 8000956:	2304      	movs	r3, #4
 8000958:	4699      	mov	r9, r3
 800095a:	3b03      	subs	r3, #3
 800095c:	2700      	movs	r7, #0
 800095e:	469a      	mov	sl, r3
 8000960:	e791      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000962:	2d00      	cmp	r5, #0
 8000964:	d105      	bne.n	8000972 <__aeabi_fdiv+0x11e>
 8000966:	2308      	movs	r3, #8
 8000968:	4699      	mov	r9, r3
 800096a:	3b06      	subs	r3, #6
 800096c:	27ff      	movs	r7, #255	; 0xff
 800096e:	469a      	mov	sl, r3
 8000970:	e789      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000972:	230c      	movs	r3, #12
 8000974:	4699      	mov	r9, r3
 8000976:	3b09      	subs	r3, #9
 8000978:	27ff      	movs	r7, #255	; 0xff
 800097a:	469a      	mov	sl, r3
 800097c:	e783      	b.n	8000886 <__aeabi_fdiv+0x32>
 800097e:	0028      	movs	r0, r5
 8000980:	f002 fb08 	bl	8002f94 <__clzsi2>
 8000984:	2776      	movs	r7, #118	; 0x76
 8000986:	1f43      	subs	r3, r0, #5
 8000988:	409d      	lsls	r5, r3
 800098a:	2300      	movs	r3, #0
 800098c:	427f      	negs	r7, r7
 800098e:	4699      	mov	r9, r3
 8000990:	469a      	mov	sl, r3
 8000992:	1a3f      	subs	r7, r7, r0
 8000994:	e777      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000996:	4640      	mov	r0, r8
 8000998:	f002 fafc 	bl	8002f94 <__clzsi2>
 800099c:	4642      	mov	r2, r8
 800099e:	1f43      	subs	r3, r0, #5
 80009a0:	409a      	lsls	r2, r3
 80009a2:	2376      	movs	r3, #118	; 0x76
 80009a4:	425b      	negs	r3, r3
 80009a6:	4690      	mov	r8, r2
 80009a8:	1a1b      	subs	r3, r3, r0
 80009aa:	2200      	movs	r2, #0
 80009ac:	e77d      	b.n	80008aa <__aeabi_fdiv+0x56>
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	2203      	movs	r2, #3
 80009b2:	e77a      	b.n	80008aa <__aeabi_fdiv+0x56>
 80009b4:	000e      	movs	r6, r1
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	2500      	movs	r5, #0
 80009ba:	e7ac      	b.n	8000916 <__aeabi_fdiv+0xc2>
 80009bc:	2001      	movs	r0, #1
 80009be:	1ac0      	subs	r0, r0, r3
 80009c0:	281b      	cmp	r0, #27
 80009c2:	dca6      	bgt.n	8000912 <__aeabi_fdiv+0xbe>
 80009c4:	379e      	adds	r7, #158	; 0x9e
 80009c6:	002a      	movs	r2, r5
 80009c8:	40bd      	lsls	r5, r7
 80009ca:	40c2      	lsrs	r2, r0
 80009cc:	1e6b      	subs	r3, r5, #1
 80009ce:	419d      	sbcs	r5, r3
 80009d0:	4315      	orrs	r5, r2
 80009d2:	076b      	lsls	r3, r5, #29
 80009d4:	d004      	beq.n	80009e0 <__aeabi_fdiv+0x18c>
 80009d6:	230f      	movs	r3, #15
 80009d8:	402b      	ands	r3, r5
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fdiv+0x18c>
 80009de:	3504      	adds	r5, #4
 80009e0:	016b      	lsls	r3, r5, #5
 80009e2:	d544      	bpl.n	8000a6e <__aeabi_fdiv+0x21a>
 80009e4:	2001      	movs	r0, #1
 80009e6:	2500      	movs	r5, #0
 80009e8:	e795      	b.n	8000916 <__aeabi_fdiv+0xc2>
 80009ea:	20ff      	movs	r0, #255	; 0xff
 80009ec:	2500      	movs	r5, #0
 80009ee:	e792      	b.n	8000916 <__aeabi_fdiv+0xc2>
 80009f0:	2580      	movs	r5, #128	; 0x80
 80009f2:	2600      	movs	r6, #0
 80009f4:	20ff      	movs	r0, #255	; 0xff
 80009f6:	03ed      	lsls	r5, r5, #15
 80009f8:	e78d      	b.n	8000916 <__aeabi_fdiv+0xc2>
 80009fa:	2300      	movs	r3, #0
 80009fc:	4698      	mov	r8, r3
 80009fe:	2080      	movs	r0, #128	; 0x80
 8000a00:	03c0      	lsls	r0, r0, #15
 8000a02:	4205      	tst	r5, r0
 8000a04:	d009      	beq.n	8000a1a <__aeabi_fdiv+0x1c6>
 8000a06:	4643      	mov	r3, r8
 8000a08:	4203      	tst	r3, r0
 8000a0a:	d106      	bne.n	8000a1a <__aeabi_fdiv+0x1c6>
 8000a0c:	4645      	mov	r5, r8
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	026d      	lsls	r5, r5, #9
 8000a12:	0026      	movs	r6, r4
 8000a14:	20ff      	movs	r0, #255	; 0xff
 8000a16:	0a6d      	lsrs	r5, r5, #9
 8000a18:	e77d      	b.n	8000916 <__aeabi_fdiv+0xc2>
 8000a1a:	2080      	movs	r0, #128	; 0x80
 8000a1c:	03c0      	lsls	r0, r0, #15
 8000a1e:	4305      	orrs	r5, r0
 8000a20:	026d      	lsls	r5, r5, #9
 8000a22:	20ff      	movs	r0, #255	; 0xff
 8000a24:	0a6d      	lsrs	r5, r5, #9
 8000a26:	e776      	b.n	8000916 <__aeabi_fdiv+0xc2>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	016b      	lsls	r3, r5, #5
 8000a2c:	0150      	lsls	r0, r2, #5
 8000a2e:	4283      	cmp	r3, r0
 8000a30:	d219      	bcs.n	8000a66 <__aeabi_fdiv+0x212>
 8000a32:	221b      	movs	r2, #27
 8000a34:	2500      	movs	r5, #0
 8000a36:	3f01      	subs	r7, #1
 8000a38:	2601      	movs	r6, #1
 8000a3a:	001c      	movs	r4, r3
 8000a3c:	006d      	lsls	r5, r5, #1
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	db01      	blt.n	8000a48 <__aeabi_fdiv+0x1f4>
 8000a44:	4298      	cmp	r0, r3
 8000a46:	d801      	bhi.n	8000a4c <__aeabi_fdiv+0x1f8>
 8000a48:	1a1b      	subs	r3, r3, r0
 8000a4a:	4335      	orrs	r5, r6
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d1f3      	bne.n	8000a3a <__aeabi_fdiv+0x1e6>
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	4193      	sbcs	r3, r2
 8000a56:	431d      	orrs	r5, r3
 8000a58:	003b      	movs	r3, r7
 8000a5a:	337f      	adds	r3, #127	; 0x7f
 8000a5c:	000e      	movs	r6, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_fdiv+0x210>
 8000a62:	e741      	b.n	80008e8 <__aeabi_fdiv+0x94>
 8000a64:	e7aa      	b.n	80009bc <__aeabi_fdiv+0x168>
 8000a66:	221a      	movs	r2, #26
 8000a68:	2501      	movs	r5, #1
 8000a6a:	1a1b      	subs	r3, r3, r0
 8000a6c:	e7e4      	b.n	8000a38 <__aeabi_fdiv+0x1e4>
 8000a6e:	01ad      	lsls	r5, r5, #6
 8000a70:	2000      	movs	r0, #0
 8000a72:	0a6d      	lsrs	r5, r5, #9
 8000a74:	e74f      	b.n	8000916 <__aeabi_fdiv+0xc2>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	080126ec 	.word	0x080126ec
 8000a7c:	f7ffffff 	.word	0xf7ffffff
 8000a80:	0801272c 	.word	0x0801272c

08000a84 <__eqsf2>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	0042      	lsls	r2, r0, #1
 8000a88:	0245      	lsls	r5, r0, #9
 8000a8a:	024e      	lsls	r6, r1, #9
 8000a8c:	004c      	lsls	r4, r1, #1
 8000a8e:	0fc3      	lsrs	r3, r0, #31
 8000a90:	0a6d      	lsrs	r5, r5, #9
 8000a92:	2001      	movs	r0, #1
 8000a94:	0e12      	lsrs	r2, r2, #24
 8000a96:	0a76      	lsrs	r6, r6, #9
 8000a98:	0e24      	lsrs	r4, r4, #24
 8000a9a:	0fc9      	lsrs	r1, r1, #31
 8000a9c:	2aff      	cmp	r2, #255	; 0xff
 8000a9e:	d006      	beq.n	8000aae <__eqsf2+0x2a>
 8000aa0:	2cff      	cmp	r4, #255	; 0xff
 8000aa2:	d003      	beq.n	8000aac <__eqsf2+0x28>
 8000aa4:	42a2      	cmp	r2, r4
 8000aa6:	d101      	bne.n	8000aac <__eqsf2+0x28>
 8000aa8:	42b5      	cmp	r5, r6
 8000aaa:	d006      	beq.n	8000aba <__eqsf2+0x36>
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d1fc      	bne.n	8000aac <__eqsf2+0x28>
 8000ab2:	2cff      	cmp	r4, #255	; 0xff
 8000ab4:	d1fa      	bne.n	8000aac <__eqsf2+0x28>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d1f8      	bne.n	8000aac <__eqsf2+0x28>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d006      	beq.n	8000acc <__eqsf2+0x48>
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	d1f3      	bne.n	8000aac <__eqsf2+0x28>
 8000ac4:	0028      	movs	r0, r5
 8000ac6:	1e43      	subs	r3, r0, #1
 8000ac8:	4198      	sbcs	r0, r3
 8000aca:	e7ef      	b.n	8000aac <__eqsf2+0x28>
 8000acc:	2000      	movs	r0, #0
 8000ace:	e7ed      	b.n	8000aac <__eqsf2+0x28>

08000ad0 <__gesf2>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	0245      	lsls	r5, r0, #9
 8000ad6:	024e      	lsls	r6, r1, #9
 8000ad8:	004c      	lsls	r4, r1, #1
 8000ada:	0fc3      	lsrs	r3, r0, #31
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	0e12      	lsrs	r2, r2, #24
 8000ae0:	0a76      	lsrs	r6, r6, #9
 8000ae2:	0e24      	lsrs	r4, r4, #24
 8000ae4:	0fc8      	lsrs	r0, r1, #31
 8000ae6:	2aff      	cmp	r2, #255	; 0xff
 8000ae8:	d01b      	beq.n	8000b22 <__gesf2+0x52>
 8000aea:	2cff      	cmp	r4, #255	; 0xff
 8000aec:	d00e      	beq.n	8000b0c <__gesf2+0x3c>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d11b      	bne.n	8000b2a <__gesf2+0x5a>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d101      	bne.n	8000afa <__gesf2+0x2a>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d01c      	beq.n	8000b34 <__gesf2+0x64>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d00c      	beq.n	8000b18 <__gesf2+0x48>
 8000afe:	4283      	cmp	r3, r0
 8000b00:	d01c      	beq.n	8000b3c <__gesf2+0x6c>
 8000b02:	2102      	movs	r1, #2
 8000b04:	1e58      	subs	r0, r3, #1
 8000b06:	4008      	ands	r0, r1
 8000b08:	3801      	subs	r0, #1
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d122      	bne.n	8000b56 <__gesf2+0x86>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d1f4      	bne.n	8000afe <__gesf2+0x2e>
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d1f2      	bne.n	8000afe <__gesf2+0x2e>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d1f6      	bne.n	8000b0a <__gesf2+0x3a>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	4240      	negs	r0, r0
 8000b20:	e7f3      	b.n	8000b0a <__gesf2+0x3a>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d117      	bne.n	8000b56 <__gesf2+0x86>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d0f0      	beq.n	8000b0c <__gesf2+0x3c>
 8000b2a:	2c00      	cmp	r4, #0
 8000b2c:	d1e7      	bne.n	8000afe <__gesf2+0x2e>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d1e5      	bne.n	8000afe <__gesf2+0x2e>
 8000b32:	e7e6      	b.n	8000b02 <__gesf2+0x32>
 8000b34:	2000      	movs	r0, #0
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d0e7      	beq.n	8000b0a <__gesf2+0x3a>
 8000b3a:	e7e2      	b.n	8000b02 <__gesf2+0x32>
 8000b3c:	42a2      	cmp	r2, r4
 8000b3e:	dc05      	bgt.n	8000b4c <__gesf2+0x7c>
 8000b40:	dbea      	blt.n	8000b18 <__gesf2+0x48>
 8000b42:	42b5      	cmp	r5, r6
 8000b44:	d802      	bhi.n	8000b4c <__gesf2+0x7c>
 8000b46:	d3e7      	bcc.n	8000b18 <__gesf2+0x48>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7de      	b.n	8000b0a <__gesf2+0x3a>
 8000b4c:	4243      	negs	r3, r0
 8000b4e:	4158      	adcs	r0, r3
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	3801      	subs	r0, #1
 8000b54:	e7d9      	b.n	8000b0a <__gesf2+0x3a>
 8000b56:	2002      	movs	r0, #2
 8000b58:	4240      	negs	r0, r0
 8000b5a:	e7d6      	b.n	8000b0a <__gesf2+0x3a>

08000b5c <__lesf2>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	0042      	lsls	r2, r0, #1
 8000b60:	0245      	lsls	r5, r0, #9
 8000b62:	024e      	lsls	r6, r1, #9
 8000b64:	004c      	lsls	r4, r1, #1
 8000b66:	0fc3      	lsrs	r3, r0, #31
 8000b68:	0a6d      	lsrs	r5, r5, #9
 8000b6a:	0e12      	lsrs	r2, r2, #24
 8000b6c:	0a76      	lsrs	r6, r6, #9
 8000b6e:	0e24      	lsrs	r4, r4, #24
 8000b70:	0fc8      	lsrs	r0, r1, #31
 8000b72:	2aff      	cmp	r2, #255	; 0xff
 8000b74:	d00b      	beq.n	8000b8e <__lesf2+0x32>
 8000b76:	2cff      	cmp	r4, #255	; 0xff
 8000b78:	d00d      	beq.n	8000b96 <__lesf2+0x3a>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d11f      	bne.n	8000bbe <__lesf2+0x62>
 8000b7e:	2c00      	cmp	r4, #0
 8000b80:	d116      	bne.n	8000bb0 <__lesf2+0x54>
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d114      	bne.n	8000bb0 <__lesf2+0x54>
 8000b86:	2000      	movs	r0, #0
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d010      	beq.n	8000bae <__lesf2+0x52>
 8000b8c:	e009      	b.n	8000ba2 <__lesf2+0x46>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d10c      	bne.n	8000bac <__lesf2+0x50>
 8000b92:	2cff      	cmp	r4, #255	; 0xff
 8000b94:	d113      	bne.n	8000bbe <__lesf2+0x62>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d108      	bne.n	8000bac <__lesf2+0x50>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d008      	beq.n	8000bb0 <__lesf2+0x54>
 8000b9e:	4283      	cmp	r3, r0
 8000ba0:	d012      	beq.n	8000bc8 <__lesf2+0x6c>
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	1e58      	subs	r0, r3, #1
 8000ba6:	4008      	ands	r0, r1
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e000      	b.n	8000bae <__lesf2+0x52>
 8000bac:	2002      	movs	r0, #2
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d1f4      	bne.n	8000b9e <__lesf2+0x42>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d1fa      	bne.n	8000bae <__lesf2+0x52>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	4240      	negs	r0, r0
 8000bbc:	e7f7      	b.n	8000bae <__lesf2+0x52>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d1ed      	bne.n	8000b9e <__lesf2+0x42>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d1eb      	bne.n	8000b9e <__lesf2+0x42>
 8000bc6:	e7ec      	b.n	8000ba2 <__lesf2+0x46>
 8000bc8:	42a2      	cmp	r2, r4
 8000bca:	dc05      	bgt.n	8000bd8 <__lesf2+0x7c>
 8000bcc:	dbf2      	blt.n	8000bb4 <__lesf2+0x58>
 8000bce:	42b5      	cmp	r5, r6
 8000bd0:	d802      	bhi.n	8000bd8 <__lesf2+0x7c>
 8000bd2:	d3ef      	bcc.n	8000bb4 <__lesf2+0x58>
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e7ea      	b.n	8000bae <__lesf2+0x52>
 8000bd8:	4243      	negs	r3, r0
 8000bda:	4158      	adcs	r0, r3
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	3801      	subs	r0, #1
 8000be0:	e7e5      	b.n	8000bae <__lesf2+0x52>
 8000be2:	46c0      	nop			; (mov r8, r8)

08000be4 <__aeabi_fmul>:
 8000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be6:	464f      	mov	r7, r9
 8000be8:	4646      	mov	r6, r8
 8000bea:	46d6      	mov	lr, sl
 8000bec:	0244      	lsls	r4, r0, #9
 8000bee:	0045      	lsls	r5, r0, #1
 8000bf0:	b5c0      	push	{r6, r7, lr}
 8000bf2:	0a64      	lsrs	r4, r4, #9
 8000bf4:	1c0f      	adds	r7, r1, #0
 8000bf6:	0e2d      	lsrs	r5, r5, #24
 8000bf8:	0fc6      	lsrs	r6, r0, #31
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fmul+0x1c>
 8000bfe:	e08d      	b.n	8000d1c <__aeabi_fmul+0x138>
 8000c00:	2dff      	cmp	r5, #255	; 0xff
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fmul+0x22>
 8000c04:	e092      	b.n	8000d2c <__aeabi_fmul+0x148>
 8000c06:	2300      	movs	r3, #0
 8000c08:	2080      	movs	r0, #128	; 0x80
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	00e4      	lsls	r4, r4, #3
 8000c10:	04c0      	lsls	r0, r0, #19
 8000c12:	4304      	orrs	r4, r0
 8000c14:	3d7f      	subs	r5, #127	; 0x7f
 8000c16:	0278      	lsls	r0, r7, #9
 8000c18:	0a43      	lsrs	r3, r0, #9
 8000c1a:	4698      	mov	r8, r3
 8000c1c:	007b      	lsls	r3, r7, #1
 8000c1e:	0e1b      	lsrs	r3, r3, #24
 8000c20:	0fff      	lsrs	r7, r7, #31
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fmul+0x44>
 8000c26:	e070      	b.n	8000d0a <__aeabi_fmul+0x126>
 8000c28:	2bff      	cmp	r3, #255	; 0xff
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fmul+0x4a>
 8000c2c:	e086      	b.n	8000d3c <__aeabi_fmul+0x158>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	00d0      	lsls	r0, r2, #3
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	3b7f      	subs	r3, #127	; 0x7f
 8000c36:	18ed      	adds	r5, r5, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	4302      	orrs	r2, r0
 8000c3e:	4690      	mov	r8, r2
 8000c40:	469c      	mov	ip, r3
 8000c42:	0031      	movs	r1, r6
 8000c44:	464b      	mov	r3, r9
 8000c46:	4079      	eors	r1, r7
 8000c48:	1c68      	adds	r0, r5, #1
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	d81c      	bhi.n	8000c88 <__aeabi_fmul+0xa4>
 8000c4e:	4a76      	ldr	r2, [pc, #472]	; (8000e28 <__aeabi_fmul+0x244>)
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	58d3      	ldr	r3, [r2, r3]
 8000c54:	469f      	mov	pc, r3
 8000c56:	0039      	movs	r1, r7
 8000c58:	4644      	mov	r4, r8
 8000c5a:	46e2      	mov	sl, ip
 8000c5c:	4653      	mov	r3, sl
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d00f      	beq.n	8000c82 <__aeabi_fmul+0x9e>
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fmul+0x84>
 8000c66:	e0d7      	b.n	8000e18 <__aeabi_fmul+0x234>
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d137      	bne.n	8000cdc <__aeabi_fmul+0xf8>
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	2400      	movs	r4, #0
 8000c70:	05c0      	lsls	r0, r0, #23
 8000c72:	4320      	orrs	r0, r4
 8000c74:	07c9      	lsls	r1, r1, #31
 8000c76:	4308      	orrs	r0, r1
 8000c78:	bce0      	pop	{r5, r6, r7}
 8000c7a:	46ba      	mov	sl, r7
 8000c7c:	46b1      	mov	r9, r6
 8000c7e:	46a8      	mov	r8, r5
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c82:	20ff      	movs	r0, #255	; 0xff
 8000c84:	2400      	movs	r4, #0
 8000c86:	e7f3      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000c88:	0c26      	lsrs	r6, r4, #16
 8000c8a:	0424      	lsls	r4, r4, #16
 8000c8c:	0c22      	lsrs	r2, r4, #16
 8000c8e:	4644      	mov	r4, r8
 8000c90:	0424      	lsls	r4, r4, #16
 8000c92:	0c24      	lsrs	r4, r4, #16
 8000c94:	4643      	mov	r3, r8
 8000c96:	0027      	movs	r7, r4
 8000c98:	0c1b      	lsrs	r3, r3, #16
 8000c9a:	4357      	muls	r7, r2
 8000c9c:	4374      	muls	r4, r6
 8000c9e:	435a      	muls	r2, r3
 8000ca0:	435e      	muls	r6, r3
 8000ca2:	1912      	adds	r2, r2, r4
 8000ca4:	0c3b      	lsrs	r3, r7, #16
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	d903      	bls.n	8000cb4 <__aeabi_fmul+0xd0>
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0252      	lsls	r2, r2, #9
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	4466      	add	r6, ip
 8000cb4:	043f      	lsls	r7, r7, #16
 8000cb6:	041a      	lsls	r2, r3, #16
 8000cb8:	0c3f      	lsrs	r7, r7, #16
 8000cba:	19d2      	adds	r2, r2, r7
 8000cbc:	0194      	lsls	r4, r2, #6
 8000cbe:	1e67      	subs	r7, r4, #1
 8000cc0:	41bc      	sbcs	r4, r7
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	0e92      	lsrs	r2, r2, #26
 8000cc6:	199b      	adds	r3, r3, r6
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	019b      	lsls	r3, r3, #6
 8000ccc:	431c      	orrs	r4, r3
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	d400      	bmi.n	8000cd4 <__aeabi_fmul+0xf0>
 8000cd2:	e09b      	b.n	8000e0c <__aeabi_fmul+0x228>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	0862      	lsrs	r2, r4, #1
 8000cd8:	401c      	ands	r4, r3
 8000cda:	4314      	orrs	r4, r2
 8000cdc:	0002      	movs	r2, r0
 8000cde:	327f      	adds	r2, #127	; 0x7f
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	dd64      	ble.n	8000dae <__aeabi_fmul+0x1ca>
 8000ce4:	0763      	lsls	r3, r4, #29
 8000ce6:	d004      	beq.n	8000cf2 <__aeabi_fmul+0x10e>
 8000ce8:	230f      	movs	r3, #15
 8000cea:	4023      	ands	r3, r4
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fmul+0x10e>
 8000cf0:	3404      	adds	r4, #4
 8000cf2:	0123      	lsls	r3, r4, #4
 8000cf4:	d503      	bpl.n	8000cfe <__aeabi_fmul+0x11a>
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <__aeabi_fmul+0x248>)
 8000cfa:	3280      	adds	r2, #128	; 0x80
 8000cfc:	401c      	ands	r4, r3
 8000cfe:	2afe      	cmp	r2, #254	; 0xfe
 8000d00:	dcbf      	bgt.n	8000c82 <__aeabi_fmul+0x9e>
 8000d02:	01a4      	lsls	r4, r4, #6
 8000d04:	0a64      	lsrs	r4, r4, #9
 8000d06:	b2d0      	uxtb	r0, r2
 8000d08:	e7b2      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d13d      	bne.n	8000d8c <__aeabi_fmul+0x1a8>
 8000d10:	464a      	mov	r2, r9
 8000d12:	3301      	adds	r3, #1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	4691      	mov	r9, r2
 8000d18:	469c      	mov	ip, r3
 8000d1a:	e792      	b.n	8000c42 <__aeabi_fmul+0x5e>
 8000d1c:	2c00      	cmp	r4, #0
 8000d1e:	d129      	bne.n	8000d74 <__aeabi_fmul+0x190>
 8000d20:	2304      	movs	r3, #4
 8000d22:	4699      	mov	r9, r3
 8000d24:	3b03      	subs	r3, #3
 8000d26:	2500      	movs	r5, #0
 8000d28:	469a      	mov	sl, r3
 8000d2a:	e774      	b.n	8000c16 <__aeabi_fmul+0x32>
 8000d2c:	2c00      	cmp	r4, #0
 8000d2e:	d11b      	bne.n	8000d68 <__aeabi_fmul+0x184>
 8000d30:	2308      	movs	r3, #8
 8000d32:	4699      	mov	r9, r3
 8000d34:	3b06      	subs	r3, #6
 8000d36:	25ff      	movs	r5, #255	; 0xff
 8000d38:	469a      	mov	sl, r3
 8000d3a:	e76c      	b.n	8000c16 <__aeabi_fmul+0x32>
 8000d3c:	4643      	mov	r3, r8
 8000d3e:	35ff      	adds	r5, #255	; 0xff
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10b      	bne.n	8000d5c <__aeabi_fmul+0x178>
 8000d44:	2302      	movs	r3, #2
 8000d46:	464a      	mov	r2, r9
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	469c      	mov	ip, r3
 8000d4e:	e778      	b.n	8000c42 <__aeabi_fmul+0x5e>
 8000d50:	4653      	mov	r3, sl
 8000d52:	0031      	movs	r1, r6
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fmul+0x176>
 8000d58:	e783      	b.n	8000c62 <__aeabi_fmul+0x7e>
 8000d5a:	e792      	b.n	8000c82 <__aeabi_fmul+0x9e>
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	464a      	mov	r2, r9
 8000d60:	431a      	orrs	r2, r3
 8000d62:	4691      	mov	r9, r2
 8000d64:	469c      	mov	ip, r3
 8000d66:	e76c      	b.n	8000c42 <__aeabi_fmul+0x5e>
 8000d68:	230c      	movs	r3, #12
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	3b09      	subs	r3, #9
 8000d6e:	25ff      	movs	r5, #255	; 0xff
 8000d70:	469a      	mov	sl, r3
 8000d72:	e750      	b.n	8000c16 <__aeabi_fmul+0x32>
 8000d74:	0020      	movs	r0, r4
 8000d76:	f002 f90d 	bl	8002f94 <__clzsi2>
 8000d7a:	2576      	movs	r5, #118	; 0x76
 8000d7c:	1f43      	subs	r3, r0, #5
 8000d7e:	409c      	lsls	r4, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	426d      	negs	r5, r5
 8000d84:	4699      	mov	r9, r3
 8000d86:	469a      	mov	sl, r3
 8000d88:	1a2d      	subs	r5, r5, r0
 8000d8a:	e744      	b.n	8000c16 <__aeabi_fmul+0x32>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	f002 f901 	bl	8002f94 <__clzsi2>
 8000d92:	4642      	mov	r2, r8
 8000d94:	1f43      	subs	r3, r0, #5
 8000d96:	409a      	lsls	r2, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	1a2d      	subs	r5, r5, r0
 8000d9c:	4690      	mov	r8, r2
 8000d9e:	469c      	mov	ip, r3
 8000da0:	3d76      	subs	r5, #118	; 0x76
 8000da2:	e74e      	b.n	8000c42 <__aeabi_fmul+0x5e>
 8000da4:	2480      	movs	r4, #128	; 0x80
 8000da6:	2100      	movs	r1, #0
 8000da8:	20ff      	movs	r0, #255	; 0xff
 8000daa:	03e4      	lsls	r4, r4, #15
 8000dac:	e760      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000dae:	2301      	movs	r3, #1
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	2b1b      	cmp	r3, #27
 8000db4:	dd00      	ble.n	8000db8 <__aeabi_fmul+0x1d4>
 8000db6:	e759      	b.n	8000c6c <__aeabi_fmul+0x88>
 8000db8:	0022      	movs	r2, r4
 8000dba:	309e      	adds	r0, #158	; 0x9e
 8000dbc:	40da      	lsrs	r2, r3
 8000dbe:	4084      	lsls	r4, r0
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	1e62      	subs	r2, r4, #1
 8000dc4:	4194      	sbcs	r4, r2
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	0763      	lsls	r3, r4, #29
 8000dca:	d004      	beq.n	8000dd6 <__aeabi_fmul+0x1f2>
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fmul+0x1f2>
 8000dd4:	3404      	adds	r4, #4
 8000dd6:	0163      	lsls	r3, r4, #5
 8000dd8:	d51a      	bpl.n	8000e10 <__aeabi_fmul+0x22c>
 8000dda:	2001      	movs	r0, #1
 8000ddc:	2400      	movs	r4, #0
 8000dde:	e747      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000de0:	2080      	movs	r0, #128	; 0x80
 8000de2:	03c0      	lsls	r0, r0, #15
 8000de4:	4204      	tst	r4, r0
 8000de6:	d009      	beq.n	8000dfc <__aeabi_fmul+0x218>
 8000de8:	4643      	mov	r3, r8
 8000dea:	4203      	tst	r3, r0
 8000dec:	d106      	bne.n	8000dfc <__aeabi_fmul+0x218>
 8000dee:	4644      	mov	r4, r8
 8000df0:	4304      	orrs	r4, r0
 8000df2:	0264      	lsls	r4, r4, #9
 8000df4:	0039      	movs	r1, r7
 8000df6:	20ff      	movs	r0, #255	; 0xff
 8000df8:	0a64      	lsrs	r4, r4, #9
 8000dfa:	e739      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000dfc:	2080      	movs	r0, #128	; 0x80
 8000dfe:	03c0      	lsls	r0, r0, #15
 8000e00:	4304      	orrs	r4, r0
 8000e02:	0264      	lsls	r4, r4, #9
 8000e04:	0031      	movs	r1, r6
 8000e06:	20ff      	movs	r0, #255	; 0xff
 8000e08:	0a64      	lsrs	r4, r4, #9
 8000e0a:	e731      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	e765      	b.n	8000cdc <__aeabi_fmul+0xf8>
 8000e10:	01a4      	lsls	r4, r4, #6
 8000e12:	2000      	movs	r0, #0
 8000e14:	0a64      	lsrs	r4, r4, #9
 8000e16:	e72b      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000e18:	2080      	movs	r0, #128	; 0x80
 8000e1a:	03c0      	lsls	r0, r0, #15
 8000e1c:	4304      	orrs	r4, r0
 8000e1e:	0264      	lsls	r4, r4, #9
 8000e20:	20ff      	movs	r0, #255	; 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e724      	b.n	8000c70 <__aeabi_fmul+0x8c>
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	0801276c 	.word	0x0801276c
 8000e2c:	f7ffffff 	.word	0xf7ffffff

08000e30 <__aeabi_fsub>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	46ce      	mov	lr, r9
 8000e34:	4647      	mov	r7, r8
 8000e36:	0243      	lsls	r3, r0, #9
 8000e38:	0a5b      	lsrs	r3, r3, #9
 8000e3a:	024e      	lsls	r6, r1, #9
 8000e3c:	00da      	lsls	r2, r3, #3
 8000e3e:	4694      	mov	ip, r2
 8000e40:	0a72      	lsrs	r2, r6, #9
 8000e42:	4691      	mov	r9, r2
 8000e44:	0045      	lsls	r5, r0, #1
 8000e46:	004a      	lsls	r2, r1, #1
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	0e2d      	lsrs	r5, r5, #24
 8000e4c:	001f      	movs	r7, r3
 8000e4e:	0fc4      	lsrs	r4, r0, #31
 8000e50:	0e12      	lsrs	r2, r2, #24
 8000e52:	0fc9      	lsrs	r1, r1, #31
 8000e54:	09b6      	lsrs	r6, r6, #6
 8000e56:	2aff      	cmp	r2, #255	; 0xff
 8000e58:	d05b      	beq.n	8000f12 <__aeabi_fsub+0xe2>
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	4041      	eors	r1, r0
 8000e5e:	428c      	cmp	r4, r1
 8000e60:	d039      	beq.n	8000ed6 <__aeabi_fsub+0xa6>
 8000e62:	1aa8      	subs	r0, r5, r2
 8000e64:	2800      	cmp	r0, #0
 8000e66:	dd5a      	ble.n	8000f1e <__aeabi_fsub+0xee>
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	d06a      	beq.n	8000f42 <__aeabi_fsub+0x112>
 8000e6c:	2dff      	cmp	r5, #255	; 0xff
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_fsub+0x42>
 8000e70:	e0d9      	b.n	8001026 <__aeabi_fsub+0x1f6>
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	04d2      	lsls	r2, r2, #19
 8000e76:	4316      	orrs	r6, r2
 8000e78:	281b      	cmp	r0, #27
 8000e7a:	dc00      	bgt.n	8000e7e <__aeabi_fsub+0x4e>
 8000e7c:	e0e9      	b.n	8001052 <__aeabi_fsub+0x222>
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4663      	mov	r3, ip
 8000e82:	1a18      	subs	r0, r3, r0
 8000e84:	0143      	lsls	r3, r0, #5
 8000e86:	d400      	bmi.n	8000e8a <__aeabi_fsub+0x5a>
 8000e88:	e0b4      	b.n	8000ff4 <__aeabi_fsub+0x1c4>
 8000e8a:	0180      	lsls	r0, r0, #6
 8000e8c:	0987      	lsrs	r7, r0, #6
 8000e8e:	0038      	movs	r0, r7
 8000e90:	f002 f880 	bl	8002f94 <__clzsi2>
 8000e94:	3805      	subs	r0, #5
 8000e96:	4087      	lsls	r7, r0
 8000e98:	4285      	cmp	r5, r0
 8000e9a:	dc00      	bgt.n	8000e9e <__aeabi_fsub+0x6e>
 8000e9c:	e0cc      	b.n	8001038 <__aeabi_fsub+0x208>
 8000e9e:	1a2d      	subs	r5, r5, r0
 8000ea0:	48b5      	ldr	r0, [pc, #724]	; (8001178 <__aeabi_fsub+0x348>)
 8000ea2:	4038      	ands	r0, r7
 8000ea4:	0743      	lsls	r3, r0, #29
 8000ea6:	d004      	beq.n	8000eb2 <__aeabi_fsub+0x82>
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	4003      	ands	r3, r0
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fsub+0x82>
 8000eb0:	3004      	adds	r0, #4
 8000eb2:	0143      	lsls	r3, r0, #5
 8000eb4:	d400      	bmi.n	8000eb8 <__aeabi_fsub+0x88>
 8000eb6:	e0a0      	b.n	8000ffa <__aeabi_fsub+0x1ca>
 8000eb8:	1c6a      	adds	r2, r5, #1
 8000eba:	2dfe      	cmp	r5, #254	; 0xfe
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fsub+0x90>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fsub+0x1ac>
 8000ec0:	0180      	lsls	r0, r0, #6
 8000ec2:	0a47      	lsrs	r7, r0, #9
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	05d0      	lsls	r0, r2, #23
 8000ec8:	4338      	orrs	r0, r7
 8000eca:	07e4      	lsls	r4, r4, #31
 8000ecc:	4320      	orrs	r0, r4
 8000ece:	bcc0      	pop	{r6, r7}
 8000ed0:	46b9      	mov	r9, r7
 8000ed2:	46b0      	mov	r8, r6
 8000ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed6:	1aa8      	subs	r0, r5, r2
 8000ed8:	4680      	mov	r8, r0
 8000eda:	2800      	cmp	r0, #0
 8000edc:	dd45      	ble.n	8000f6a <__aeabi_fsub+0x13a>
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d070      	beq.n	8000fc4 <__aeabi_fsub+0x194>
 8000ee2:	2dff      	cmp	r5, #255	; 0xff
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fsub+0xb8>
 8000ee6:	e09e      	b.n	8001026 <__aeabi_fsub+0x1f6>
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	04db      	lsls	r3, r3, #19
 8000eec:	431e      	orrs	r6, r3
 8000eee:	4643      	mov	r3, r8
 8000ef0:	2b1b      	cmp	r3, #27
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_fsub+0xc6>
 8000ef4:	e0d2      	b.n	800109c <__aeabi_fsub+0x26c>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4460      	add	r0, ip
 8000efa:	0143      	lsls	r3, r0, #5
 8000efc:	d57a      	bpl.n	8000ff4 <__aeabi_fsub+0x1c4>
 8000efe:	3501      	adds	r5, #1
 8000f00:	2dff      	cmp	r5, #255	; 0xff
 8000f02:	d06b      	beq.n	8000fdc <__aeabi_fsub+0x1ac>
 8000f04:	2301      	movs	r3, #1
 8000f06:	4a9d      	ldr	r2, [pc, #628]	; (800117c <__aeabi_fsub+0x34c>)
 8000f08:	4003      	ands	r3, r0
 8000f0a:	0840      	lsrs	r0, r0, #1
 8000f0c:	4010      	ands	r0, r2
 8000f0e:	4318      	orrs	r0, r3
 8000f10:	e7c8      	b.n	8000ea4 <__aeabi_fsub+0x74>
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	d020      	beq.n	8000f58 <__aeabi_fsub+0x128>
 8000f16:	428c      	cmp	r4, r1
 8000f18:	d023      	beq.n	8000f62 <__aeabi_fsub+0x132>
 8000f1a:	0028      	movs	r0, r5
 8000f1c:	38ff      	subs	r0, #255	; 0xff
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d039      	beq.n	8000f96 <__aeabi_fsub+0x166>
 8000f22:	1b57      	subs	r7, r2, r5
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0xfa>
 8000f28:	e09d      	b.n	8001066 <__aeabi_fsub+0x236>
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x102>
 8000f30:	e0db      	b.n	80010ea <__aeabi_fsub+0x2ba>
 8000f32:	1e7b      	subs	r3, r7, #1
 8000f34:	2f01      	cmp	r7, #1
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x10a>
 8000f38:	e10d      	b.n	8001156 <__aeabi_fsub+0x326>
 8000f3a:	2fff      	cmp	r7, #255	; 0xff
 8000f3c:	d071      	beq.n	8001022 <__aeabi_fsub+0x1f2>
 8000f3e:	001f      	movs	r7, r3
 8000f40:	e098      	b.n	8001074 <__aeabi_fsub+0x244>
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x118>
 8000f46:	e0a7      	b.n	8001098 <__aeabi_fsub+0x268>
 8000f48:	1e42      	subs	r2, r0, #1
 8000f4a:	2801      	cmp	r0, #1
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_fsub+0x120>
 8000f4e:	e0e6      	b.n	800111e <__aeabi_fsub+0x2ee>
 8000f50:	28ff      	cmp	r0, #255	; 0xff
 8000f52:	d068      	beq.n	8001026 <__aeabi_fsub+0x1f6>
 8000f54:	0010      	movs	r0, r2
 8000f56:	e78f      	b.n	8000e78 <__aeabi_fsub+0x48>
 8000f58:	2001      	movs	r0, #1
 8000f5a:	4041      	eors	r1, r0
 8000f5c:	42a1      	cmp	r1, r4
 8000f5e:	d000      	beq.n	8000f62 <__aeabi_fsub+0x132>
 8000f60:	e77f      	b.n	8000e62 <__aeabi_fsub+0x32>
 8000f62:	20ff      	movs	r0, #255	; 0xff
 8000f64:	4240      	negs	r0, r0
 8000f66:	4680      	mov	r8, r0
 8000f68:	44a8      	add	r8, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d038      	beq.n	8000fe2 <__aeabi_fsub+0x1b2>
 8000f70:	1b51      	subs	r1, r2, r5
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d100      	bne.n	8000f78 <__aeabi_fsub+0x148>
 8000f76:	e0ae      	b.n	80010d6 <__aeabi_fsub+0x2a6>
 8000f78:	2aff      	cmp	r2, #255	; 0xff
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x14e>
 8000f7c:	e0df      	b.n	800113e <__aeabi_fsub+0x30e>
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	4660      	mov	r0, ip
 8000f82:	04db      	lsls	r3, r3, #19
 8000f84:	4318      	orrs	r0, r3
 8000f86:	4684      	mov	ip, r0
 8000f88:	291b      	cmp	r1, #27
 8000f8a:	dc00      	bgt.n	8000f8e <__aeabi_fsub+0x15e>
 8000f8c:	e0d9      	b.n	8001142 <__aeabi_fsub+0x312>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	0015      	movs	r5, r2
 8000f92:	1980      	adds	r0, r0, r6
 8000f94:	e7b1      	b.n	8000efa <__aeabi_fsub+0xca>
 8000f96:	20fe      	movs	r0, #254	; 0xfe
 8000f98:	1c6a      	adds	r2, r5, #1
 8000f9a:	4210      	tst	r0, r2
 8000f9c:	d171      	bne.n	8001082 <__aeabi_fsub+0x252>
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_fsub+0x174>
 8000fa2:	e0a6      	b.n	80010f2 <__aeabi_fsub+0x2c2>
 8000fa4:	4663      	mov	r3, ip
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x17c>
 8000faa:	e0d9      	b.n	8001160 <__aeabi_fsub+0x330>
 8000fac:	2200      	movs	r2, #0
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x184>
 8000fb2:	e788      	b.n	8000ec6 <__aeabi_fsub+0x96>
 8000fb4:	1b98      	subs	r0, r3, r6
 8000fb6:	0143      	lsls	r3, r0, #5
 8000fb8:	d400      	bmi.n	8000fbc <__aeabi_fsub+0x18c>
 8000fba:	e0e1      	b.n	8001180 <__aeabi_fsub+0x350>
 8000fbc:	4663      	mov	r3, ip
 8000fbe:	000c      	movs	r4, r1
 8000fc0:	1af0      	subs	r0, r6, r3
 8000fc2:	e76f      	b.n	8000ea4 <__aeabi_fsub+0x74>
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_fsub+0x19a>
 8000fc8:	e0b7      	b.n	800113a <__aeabi_fsub+0x30a>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	3a01      	subs	r2, #1
 8000fce:	2801      	cmp	r0, #1
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fsub+0x1a4>
 8000fd2:	e09c      	b.n	800110e <__aeabi_fsub+0x2de>
 8000fd4:	28ff      	cmp	r0, #255	; 0xff
 8000fd6:	d026      	beq.n	8001026 <__aeabi_fsub+0x1f6>
 8000fd8:	4690      	mov	r8, r2
 8000fda:	e788      	b.n	8000eee <__aeabi_fsub+0xbe>
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	2700      	movs	r7, #0
 8000fe0:	e771      	b.n	8000ec6 <__aeabi_fsub+0x96>
 8000fe2:	20fe      	movs	r0, #254	; 0xfe
 8000fe4:	1c6a      	adds	r2, r5, #1
 8000fe6:	4210      	tst	r0, r2
 8000fe8:	d064      	beq.n	80010b4 <__aeabi_fsub+0x284>
 8000fea:	2aff      	cmp	r2, #255	; 0xff
 8000fec:	d0f6      	beq.n	8000fdc <__aeabi_fsub+0x1ac>
 8000fee:	0015      	movs	r5, r2
 8000ff0:	4466      	add	r6, ip
 8000ff2:	0870      	lsrs	r0, r6, #1
 8000ff4:	0743      	lsls	r3, r0, #29
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_fsub+0x1ca>
 8000ff8:	e756      	b.n	8000ea8 <__aeabi_fsub+0x78>
 8000ffa:	08c3      	lsrs	r3, r0, #3
 8000ffc:	2dff      	cmp	r5, #255	; 0xff
 8000ffe:	d012      	beq.n	8001026 <__aeabi_fsub+0x1f6>
 8001000:	025b      	lsls	r3, r3, #9
 8001002:	0a5f      	lsrs	r7, r3, #9
 8001004:	b2ea      	uxtb	r2, r5
 8001006:	e75e      	b.n	8000ec6 <__aeabi_fsub+0x96>
 8001008:	4662      	mov	r2, ip
 800100a:	2a00      	cmp	r2, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x1e0>
 800100e:	e096      	b.n	800113e <__aeabi_fsub+0x30e>
 8001010:	2e00      	cmp	r6, #0
 8001012:	d008      	beq.n	8001026 <__aeabi_fsub+0x1f6>
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	03d2      	lsls	r2, r2, #15
 8001018:	4213      	tst	r3, r2
 800101a:	d004      	beq.n	8001026 <__aeabi_fsub+0x1f6>
 800101c:	4648      	mov	r0, r9
 800101e:	4210      	tst	r0, r2
 8001020:	d101      	bne.n	8001026 <__aeabi_fsub+0x1f6>
 8001022:	000c      	movs	r4, r1
 8001024:	464b      	mov	r3, r9
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0d8      	beq.n	8000fdc <__aeabi_fsub+0x1ac>
 800102a:	2780      	movs	r7, #128	; 0x80
 800102c:	03ff      	lsls	r7, r7, #15
 800102e:	431f      	orrs	r7, r3
 8001030:	027f      	lsls	r7, r7, #9
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	0a7f      	lsrs	r7, r7, #9
 8001036:	e746      	b.n	8000ec6 <__aeabi_fsub+0x96>
 8001038:	2320      	movs	r3, #32
 800103a:	003a      	movs	r2, r7
 800103c:	1b45      	subs	r5, r0, r5
 800103e:	0038      	movs	r0, r7
 8001040:	3501      	adds	r5, #1
 8001042:	40ea      	lsrs	r2, r5
 8001044:	1b5d      	subs	r5, r3, r5
 8001046:	40a8      	lsls	r0, r5
 8001048:	1e43      	subs	r3, r0, #1
 800104a:	4198      	sbcs	r0, r3
 800104c:	2500      	movs	r5, #0
 800104e:	4310      	orrs	r0, r2
 8001050:	e728      	b.n	8000ea4 <__aeabi_fsub+0x74>
 8001052:	2320      	movs	r3, #32
 8001054:	1a1b      	subs	r3, r3, r0
 8001056:	0032      	movs	r2, r6
 8001058:	409e      	lsls	r6, r3
 800105a:	40c2      	lsrs	r2, r0
 800105c:	0030      	movs	r0, r6
 800105e:	1e43      	subs	r3, r0, #1
 8001060:	4198      	sbcs	r0, r3
 8001062:	4310      	orrs	r0, r2
 8001064:	e70c      	b.n	8000e80 <__aeabi_fsub+0x50>
 8001066:	2aff      	cmp	r2, #255	; 0xff
 8001068:	d0db      	beq.n	8001022 <__aeabi_fsub+0x1f2>
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	4660      	mov	r0, ip
 800106e:	04db      	lsls	r3, r3, #19
 8001070:	4318      	orrs	r0, r3
 8001072:	4684      	mov	ip, r0
 8001074:	2f1b      	cmp	r7, #27
 8001076:	dd56      	ble.n	8001126 <__aeabi_fsub+0x2f6>
 8001078:	2001      	movs	r0, #1
 800107a:	000c      	movs	r4, r1
 800107c:	0015      	movs	r5, r2
 800107e:	1a30      	subs	r0, r6, r0
 8001080:	e700      	b.n	8000e84 <__aeabi_fsub+0x54>
 8001082:	4663      	mov	r3, ip
 8001084:	1b9f      	subs	r7, r3, r6
 8001086:	017b      	lsls	r3, r7, #5
 8001088:	d43d      	bmi.n	8001106 <__aeabi_fsub+0x2d6>
 800108a:	2f00      	cmp	r7, #0
 800108c:	d000      	beq.n	8001090 <__aeabi_fsub+0x260>
 800108e:	e6fe      	b.n	8000e8e <__aeabi_fsub+0x5e>
 8001090:	2400      	movs	r4, #0
 8001092:	2200      	movs	r2, #0
 8001094:	2700      	movs	r7, #0
 8001096:	e716      	b.n	8000ec6 <__aeabi_fsub+0x96>
 8001098:	0005      	movs	r5, r0
 800109a:	e7af      	b.n	8000ffc <__aeabi_fsub+0x1cc>
 800109c:	0032      	movs	r2, r6
 800109e:	4643      	mov	r3, r8
 80010a0:	4641      	mov	r1, r8
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	2320      	movs	r3, #32
 80010a6:	1a5b      	subs	r3, r3, r1
 80010a8:	409e      	lsls	r6, r3
 80010aa:	0030      	movs	r0, r6
 80010ac:	1e43      	subs	r3, r0, #1
 80010ae:	4198      	sbcs	r0, r3
 80010b0:	4310      	orrs	r0, r2
 80010b2:	e721      	b.n	8000ef8 <__aeabi_fsub+0xc8>
 80010b4:	2d00      	cmp	r5, #0
 80010b6:	d1a7      	bne.n	8001008 <__aeabi_fsub+0x1d8>
 80010b8:	4663      	mov	r3, ip
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d059      	beq.n	8001172 <__aeabi_fsub+0x342>
 80010be:	2200      	movs	r2, #0
 80010c0:	2e00      	cmp	r6, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x296>
 80010c4:	e6ff      	b.n	8000ec6 <__aeabi_fsub+0x96>
 80010c6:	0030      	movs	r0, r6
 80010c8:	4460      	add	r0, ip
 80010ca:	0143      	lsls	r3, r0, #5
 80010cc:	d592      	bpl.n	8000ff4 <__aeabi_fsub+0x1c4>
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <__aeabi_fsub+0x348>)
 80010d0:	3501      	adds	r5, #1
 80010d2:	4018      	ands	r0, r3
 80010d4:	e78e      	b.n	8000ff4 <__aeabi_fsub+0x1c4>
 80010d6:	4663      	mov	r3, ip
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d047      	beq.n	800116c <__aeabi_fsub+0x33c>
 80010dc:	1e4b      	subs	r3, r1, #1
 80010de:	2901      	cmp	r1, #1
 80010e0:	d015      	beq.n	800110e <__aeabi_fsub+0x2de>
 80010e2:	29ff      	cmp	r1, #255	; 0xff
 80010e4:	d02b      	beq.n	800113e <__aeabi_fsub+0x30e>
 80010e6:	0019      	movs	r1, r3
 80010e8:	e74e      	b.n	8000f88 <__aeabi_fsub+0x158>
 80010ea:	000c      	movs	r4, r1
 80010ec:	464b      	mov	r3, r9
 80010ee:	003d      	movs	r5, r7
 80010f0:	e784      	b.n	8000ffc <__aeabi_fsub+0x1cc>
 80010f2:	4662      	mov	r2, ip
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d18b      	bne.n	8001010 <__aeabi_fsub+0x1e0>
 80010f8:	2e00      	cmp	r6, #0
 80010fa:	d192      	bne.n	8001022 <__aeabi_fsub+0x1f2>
 80010fc:	2780      	movs	r7, #128	; 0x80
 80010fe:	2400      	movs	r4, #0
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	03ff      	lsls	r7, r7, #15
 8001104:	e6df      	b.n	8000ec6 <__aeabi_fsub+0x96>
 8001106:	4663      	mov	r3, ip
 8001108:	000c      	movs	r4, r1
 800110a:	1af7      	subs	r7, r6, r3
 800110c:	e6bf      	b.n	8000e8e <__aeabi_fsub+0x5e>
 800110e:	0030      	movs	r0, r6
 8001110:	4460      	add	r0, ip
 8001112:	2501      	movs	r5, #1
 8001114:	0143      	lsls	r3, r0, #5
 8001116:	d400      	bmi.n	800111a <__aeabi_fsub+0x2ea>
 8001118:	e76c      	b.n	8000ff4 <__aeabi_fsub+0x1c4>
 800111a:	2502      	movs	r5, #2
 800111c:	e6f2      	b.n	8000f04 <__aeabi_fsub+0xd4>
 800111e:	4663      	mov	r3, ip
 8001120:	2501      	movs	r5, #1
 8001122:	1b98      	subs	r0, r3, r6
 8001124:	e6ae      	b.n	8000e84 <__aeabi_fsub+0x54>
 8001126:	2320      	movs	r3, #32
 8001128:	4664      	mov	r4, ip
 800112a:	4660      	mov	r0, ip
 800112c:	40fc      	lsrs	r4, r7
 800112e:	1bdf      	subs	r7, r3, r7
 8001130:	40b8      	lsls	r0, r7
 8001132:	1e43      	subs	r3, r0, #1
 8001134:	4198      	sbcs	r0, r3
 8001136:	4320      	orrs	r0, r4
 8001138:	e79f      	b.n	800107a <__aeabi_fsub+0x24a>
 800113a:	0005      	movs	r5, r0
 800113c:	e75e      	b.n	8000ffc <__aeabi_fsub+0x1cc>
 800113e:	464b      	mov	r3, r9
 8001140:	e771      	b.n	8001026 <__aeabi_fsub+0x1f6>
 8001142:	2320      	movs	r3, #32
 8001144:	4665      	mov	r5, ip
 8001146:	4660      	mov	r0, ip
 8001148:	40cd      	lsrs	r5, r1
 800114a:	1a59      	subs	r1, r3, r1
 800114c:	4088      	lsls	r0, r1
 800114e:	1e43      	subs	r3, r0, #1
 8001150:	4198      	sbcs	r0, r3
 8001152:	4328      	orrs	r0, r5
 8001154:	e71c      	b.n	8000f90 <__aeabi_fsub+0x160>
 8001156:	4663      	mov	r3, ip
 8001158:	000c      	movs	r4, r1
 800115a:	2501      	movs	r5, #1
 800115c:	1af0      	subs	r0, r6, r3
 800115e:	e691      	b.n	8000e84 <__aeabi_fsub+0x54>
 8001160:	2e00      	cmp	r6, #0
 8001162:	d095      	beq.n	8001090 <__aeabi_fsub+0x260>
 8001164:	000c      	movs	r4, r1
 8001166:	464f      	mov	r7, r9
 8001168:	2200      	movs	r2, #0
 800116a:	e6ac      	b.n	8000ec6 <__aeabi_fsub+0x96>
 800116c:	464b      	mov	r3, r9
 800116e:	000d      	movs	r5, r1
 8001170:	e744      	b.n	8000ffc <__aeabi_fsub+0x1cc>
 8001172:	464f      	mov	r7, r9
 8001174:	2200      	movs	r2, #0
 8001176:	e6a6      	b.n	8000ec6 <__aeabi_fsub+0x96>
 8001178:	fbffffff 	.word	0xfbffffff
 800117c:	7dffffff 	.word	0x7dffffff
 8001180:	2800      	cmp	r0, #0
 8001182:	d000      	beq.n	8001186 <__aeabi_fsub+0x356>
 8001184:	e736      	b.n	8000ff4 <__aeabi_fsub+0x1c4>
 8001186:	2400      	movs	r4, #0
 8001188:	2700      	movs	r7, #0
 800118a:	e69c      	b.n	8000ec6 <__aeabi_fsub+0x96>

0800118c <__aeabi_i2f>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	2800      	cmp	r0, #0
 8001190:	d013      	beq.n	80011ba <__aeabi_i2f+0x2e>
 8001192:	17c3      	asrs	r3, r0, #31
 8001194:	18c6      	adds	r6, r0, r3
 8001196:	405e      	eors	r6, r3
 8001198:	0fc4      	lsrs	r4, r0, #31
 800119a:	0030      	movs	r0, r6
 800119c:	f001 fefa 	bl	8002f94 <__clzsi2>
 80011a0:	239e      	movs	r3, #158	; 0x9e
 80011a2:	0005      	movs	r5, r0
 80011a4:	1a1b      	subs	r3, r3, r0
 80011a6:	2b96      	cmp	r3, #150	; 0x96
 80011a8:	dc0f      	bgt.n	80011ca <__aeabi_i2f+0x3e>
 80011aa:	2808      	cmp	r0, #8
 80011ac:	dd01      	ble.n	80011b2 <__aeabi_i2f+0x26>
 80011ae:	3d08      	subs	r5, #8
 80011b0:	40ae      	lsls	r6, r5
 80011b2:	0276      	lsls	r6, r6, #9
 80011b4:	0a76      	lsrs	r6, r6, #9
 80011b6:	b2d8      	uxtb	r0, r3
 80011b8:	e002      	b.n	80011c0 <__aeabi_i2f+0x34>
 80011ba:	2400      	movs	r4, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	2600      	movs	r6, #0
 80011c0:	05c0      	lsls	r0, r0, #23
 80011c2:	4330      	orrs	r0, r6
 80011c4:	07e4      	lsls	r4, r4, #31
 80011c6:	4320      	orrs	r0, r4
 80011c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ca:	2b99      	cmp	r3, #153	; 0x99
 80011cc:	dd0c      	ble.n	80011e8 <__aeabi_i2f+0x5c>
 80011ce:	2205      	movs	r2, #5
 80011d0:	0031      	movs	r1, r6
 80011d2:	1a12      	subs	r2, r2, r0
 80011d4:	40d1      	lsrs	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	0001      	movs	r1, r0
 80011da:	0030      	movs	r0, r6
 80011dc:	311b      	adds	r1, #27
 80011de:	4088      	lsls	r0, r1
 80011e0:	1e41      	subs	r1, r0, #1
 80011e2:	4188      	sbcs	r0, r1
 80011e4:	4302      	orrs	r2, r0
 80011e6:	0016      	movs	r6, r2
 80011e8:	2d05      	cmp	r5, #5
 80011ea:	dc12      	bgt.n	8001212 <__aeabi_i2f+0x86>
 80011ec:	0031      	movs	r1, r6
 80011ee:	4f0d      	ldr	r7, [pc, #52]	; (8001224 <__aeabi_i2f+0x98>)
 80011f0:	4039      	ands	r1, r7
 80011f2:	0772      	lsls	r2, r6, #29
 80011f4:	d009      	beq.n	800120a <__aeabi_i2f+0x7e>
 80011f6:	200f      	movs	r0, #15
 80011f8:	4030      	ands	r0, r6
 80011fa:	2804      	cmp	r0, #4
 80011fc:	d005      	beq.n	800120a <__aeabi_i2f+0x7e>
 80011fe:	3104      	adds	r1, #4
 8001200:	014a      	lsls	r2, r1, #5
 8001202:	d502      	bpl.n	800120a <__aeabi_i2f+0x7e>
 8001204:	239f      	movs	r3, #159	; 0x9f
 8001206:	4039      	ands	r1, r7
 8001208:	1b5b      	subs	r3, r3, r5
 800120a:	0189      	lsls	r1, r1, #6
 800120c:	0a4e      	lsrs	r6, r1, #9
 800120e:	b2d8      	uxtb	r0, r3
 8001210:	e7d6      	b.n	80011c0 <__aeabi_i2f+0x34>
 8001212:	1f6a      	subs	r2, r5, #5
 8001214:	4096      	lsls	r6, r2
 8001216:	0031      	movs	r1, r6
 8001218:	4f02      	ldr	r7, [pc, #8]	; (8001224 <__aeabi_i2f+0x98>)
 800121a:	4039      	ands	r1, r7
 800121c:	0772      	lsls	r2, r6, #29
 800121e:	d0f4      	beq.n	800120a <__aeabi_i2f+0x7e>
 8001220:	e7e9      	b.n	80011f6 <__aeabi_i2f+0x6a>
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	fbffffff 	.word	0xfbffffff

08001228 <__aeabi_dadd>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	464f      	mov	r7, r9
 800122c:	4646      	mov	r6, r8
 800122e:	46d6      	mov	lr, sl
 8001230:	000d      	movs	r5, r1
 8001232:	0004      	movs	r4, r0
 8001234:	b5c0      	push	{r6, r7, lr}
 8001236:	001f      	movs	r7, r3
 8001238:	0011      	movs	r1, r2
 800123a:	0328      	lsls	r0, r5, #12
 800123c:	0f62      	lsrs	r2, r4, #29
 800123e:	0a40      	lsrs	r0, r0, #9
 8001240:	4310      	orrs	r0, r2
 8001242:	007a      	lsls	r2, r7, #1
 8001244:	0d52      	lsrs	r2, r2, #21
 8001246:	00e3      	lsls	r3, r4, #3
 8001248:	033c      	lsls	r4, r7, #12
 800124a:	4691      	mov	r9, r2
 800124c:	0a64      	lsrs	r4, r4, #9
 800124e:	0ffa      	lsrs	r2, r7, #31
 8001250:	0f4f      	lsrs	r7, r1, #29
 8001252:	006e      	lsls	r6, r5, #1
 8001254:	4327      	orrs	r7, r4
 8001256:	4692      	mov	sl, r2
 8001258:	46b8      	mov	r8, r7
 800125a:	0d76      	lsrs	r6, r6, #21
 800125c:	0fed      	lsrs	r5, r5, #31
 800125e:	00c9      	lsls	r1, r1, #3
 8001260:	4295      	cmp	r5, r2
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x3e>
 8001264:	e099      	b.n	800139a <__aeabi_dadd+0x172>
 8001266:	464c      	mov	r4, r9
 8001268:	1b34      	subs	r4, r6, r4
 800126a:	46a4      	mov	ip, r4
 800126c:	2c00      	cmp	r4, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_dadd+0x4a>
 8001270:	e07c      	b.n	800136c <__aeabi_dadd+0x144>
 8001272:	464a      	mov	r2, r9
 8001274:	2a00      	cmp	r2, #0
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x52>
 8001278:	e0b8      	b.n	80013ec <__aeabi_dadd+0x1c4>
 800127a:	4ac5      	ldr	r2, [pc, #788]	; (8001590 <__aeabi_dadd+0x368>)
 800127c:	4296      	cmp	r6, r2
 800127e:	d100      	bne.n	8001282 <__aeabi_dadd+0x5a>
 8001280:	e11c      	b.n	80014bc <__aeabi_dadd+0x294>
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	003c      	movs	r4, r7
 8001286:	0412      	lsls	r2, r2, #16
 8001288:	4314      	orrs	r4, r2
 800128a:	46a0      	mov	r8, r4
 800128c:	4662      	mov	r2, ip
 800128e:	2a38      	cmp	r2, #56	; 0x38
 8001290:	dd00      	ble.n	8001294 <__aeabi_dadd+0x6c>
 8001292:	e161      	b.n	8001558 <__aeabi_dadd+0x330>
 8001294:	2a1f      	cmp	r2, #31
 8001296:	dd00      	ble.n	800129a <__aeabi_dadd+0x72>
 8001298:	e1cc      	b.n	8001634 <__aeabi_dadd+0x40c>
 800129a:	4664      	mov	r4, ip
 800129c:	2220      	movs	r2, #32
 800129e:	1b12      	subs	r2, r2, r4
 80012a0:	4644      	mov	r4, r8
 80012a2:	4094      	lsls	r4, r2
 80012a4:	000f      	movs	r7, r1
 80012a6:	46a1      	mov	r9, r4
 80012a8:	4664      	mov	r4, ip
 80012aa:	4091      	lsls	r1, r2
 80012ac:	40e7      	lsrs	r7, r4
 80012ae:	464c      	mov	r4, r9
 80012b0:	1e4a      	subs	r2, r1, #1
 80012b2:	4191      	sbcs	r1, r2
 80012b4:	433c      	orrs	r4, r7
 80012b6:	4642      	mov	r2, r8
 80012b8:	4321      	orrs	r1, r4
 80012ba:	4664      	mov	r4, ip
 80012bc:	40e2      	lsrs	r2, r4
 80012be:	1a80      	subs	r0, r0, r2
 80012c0:	1a5c      	subs	r4, r3, r1
 80012c2:	42a3      	cmp	r3, r4
 80012c4:	419b      	sbcs	r3, r3
 80012c6:	425f      	negs	r7, r3
 80012c8:	1bc7      	subs	r7, r0, r7
 80012ca:	023b      	lsls	r3, r7, #8
 80012cc:	d400      	bmi.n	80012d0 <__aeabi_dadd+0xa8>
 80012ce:	e0d0      	b.n	8001472 <__aeabi_dadd+0x24a>
 80012d0:	027f      	lsls	r7, r7, #9
 80012d2:	0a7f      	lsrs	r7, r7, #9
 80012d4:	2f00      	cmp	r7, #0
 80012d6:	d100      	bne.n	80012da <__aeabi_dadd+0xb2>
 80012d8:	e0ff      	b.n	80014da <__aeabi_dadd+0x2b2>
 80012da:	0038      	movs	r0, r7
 80012dc:	f001 fe5a 	bl	8002f94 <__clzsi2>
 80012e0:	0001      	movs	r1, r0
 80012e2:	3908      	subs	r1, #8
 80012e4:	2320      	movs	r3, #32
 80012e6:	0022      	movs	r2, r4
 80012e8:	1a5b      	subs	r3, r3, r1
 80012ea:	408f      	lsls	r7, r1
 80012ec:	40da      	lsrs	r2, r3
 80012ee:	408c      	lsls	r4, r1
 80012f0:	4317      	orrs	r7, r2
 80012f2:	42b1      	cmp	r1, r6
 80012f4:	da00      	bge.n	80012f8 <__aeabi_dadd+0xd0>
 80012f6:	e0ff      	b.n	80014f8 <__aeabi_dadd+0x2d0>
 80012f8:	1b89      	subs	r1, r1, r6
 80012fa:	1c4b      	adds	r3, r1, #1
 80012fc:	2b1f      	cmp	r3, #31
 80012fe:	dd00      	ble.n	8001302 <__aeabi_dadd+0xda>
 8001300:	e0a8      	b.n	8001454 <__aeabi_dadd+0x22c>
 8001302:	2220      	movs	r2, #32
 8001304:	0039      	movs	r1, r7
 8001306:	1ad2      	subs	r2, r2, r3
 8001308:	0020      	movs	r0, r4
 800130a:	4094      	lsls	r4, r2
 800130c:	4091      	lsls	r1, r2
 800130e:	40d8      	lsrs	r0, r3
 8001310:	1e62      	subs	r2, r4, #1
 8001312:	4194      	sbcs	r4, r2
 8001314:	40df      	lsrs	r7, r3
 8001316:	2600      	movs	r6, #0
 8001318:	4301      	orrs	r1, r0
 800131a:	430c      	orrs	r4, r1
 800131c:	0763      	lsls	r3, r4, #29
 800131e:	d009      	beq.n	8001334 <__aeabi_dadd+0x10c>
 8001320:	230f      	movs	r3, #15
 8001322:	4023      	ands	r3, r4
 8001324:	2b04      	cmp	r3, #4
 8001326:	d005      	beq.n	8001334 <__aeabi_dadd+0x10c>
 8001328:	1d23      	adds	r3, r4, #4
 800132a:	42a3      	cmp	r3, r4
 800132c:	41a4      	sbcs	r4, r4
 800132e:	4264      	negs	r4, r4
 8001330:	193f      	adds	r7, r7, r4
 8001332:	001c      	movs	r4, r3
 8001334:	023b      	lsls	r3, r7, #8
 8001336:	d400      	bmi.n	800133a <__aeabi_dadd+0x112>
 8001338:	e09e      	b.n	8001478 <__aeabi_dadd+0x250>
 800133a:	4b95      	ldr	r3, [pc, #596]	; (8001590 <__aeabi_dadd+0x368>)
 800133c:	3601      	adds	r6, #1
 800133e:	429e      	cmp	r6, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dadd+0x11c>
 8001342:	e0b7      	b.n	80014b4 <__aeabi_dadd+0x28c>
 8001344:	4a93      	ldr	r2, [pc, #588]	; (8001594 <__aeabi_dadd+0x36c>)
 8001346:	08e4      	lsrs	r4, r4, #3
 8001348:	4017      	ands	r7, r2
 800134a:	077b      	lsls	r3, r7, #29
 800134c:	0571      	lsls	r1, r6, #21
 800134e:	027f      	lsls	r7, r7, #9
 8001350:	4323      	orrs	r3, r4
 8001352:	0b3f      	lsrs	r7, r7, #12
 8001354:	0d4a      	lsrs	r2, r1, #21
 8001356:	0512      	lsls	r2, r2, #20
 8001358:	433a      	orrs	r2, r7
 800135a:	07ed      	lsls	r5, r5, #31
 800135c:	432a      	orrs	r2, r5
 800135e:	0018      	movs	r0, r3
 8001360:	0011      	movs	r1, r2
 8001362:	bce0      	pop	{r5, r6, r7}
 8001364:	46ba      	mov	sl, r7
 8001366:	46b1      	mov	r9, r6
 8001368:	46a8      	mov	r8, r5
 800136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136c:	2c00      	cmp	r4, #0
 800136e:	d04b      	beq.n	8001408 <__aeabi_dadd+0x1e0>
 8001370:	464c      	mov	r4, r9
 8001372:	1ba4      	subs	r4, r4, r6
 8001374:	46a4      	mov	ip, r4
 8001376:	2e00      	cmp	r6, #0
 8001378:	d000      	beq.n	800137c <__aeabi_dadd+0x154>
 800137a:	e123      	b.n	80015c4 <__aeabi_dadd+0x39c>
 800137c:	0004      	movs	r4, r0
 800137e:	431c      	orrs	r4, r3
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x15c>
 8001382:	e1af      	b.n	80016e4 <__aeabi_dadd+0x4bc>
 8001384:	4662      	mov	r2, ip
 8001386:	1e54      	subs	r4, r2, #1
 8001388:	2a01      	cmp	r2, #1
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x166>
 800138c:	e215      	b.n	80017ba <__aeabi_dadd+0x592>
 800138e:	4d80      	ldr	r5, [pc, #512]	; (8001590 <__aeabi_dadd+0x368>)
 8001390:	45ac      	cmp	ip, r5
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0x16e>
 8001394:	e1c8      	b.n	8001728 <__aeabi_dadd+0x500>
 8001396:	46a4      	mov	ip, r4
 8001398:	e11b      	b.n	80015d2 <__aeabi_dadd+0x3aa>
 800139a:	464a      	mov	r2, r9
 800139c:	1ab2      	subs	r2, r6, r2
 800139e:	4694      	mov	ip, r2
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	dc00      	bgt.n	80013a6 <__aeabi_dadd+0x17e>
 80013a4:	e0ac      	b.n	8001500 <__aeabi_dadd+0x2d8>
 80013a6:	464a      	mov	r2, r9
 80013a8:	2a00      	cmp	r2, #0
 80013aa:	d043      	beq.n	8001434 <__aeabi_dadd+0x20c>
 80013ac:	4a78      	ldr	r2, [pc, #480]	; (8001590 <__aeabi_dadd+0x368>)
 80013ae:	4296      	cmp	r6, r2
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x18c>
 80013b2:	e1af      	b.n	8001714 <__aeabi_dadd+0x4ec>
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	003c      	movs	r4, r7
 80013b8:	0412      	lsls	r2, r2, #16
 80013ba:	4314      	orrs	r4, r2
 80013bc:	46a0      	mov	r8, r4
 80013be:	4662      	mov	r2, ip
 80013c0:	2a38      	cmp	r2, #56	; 0x38
 80013c2:	dc67      	bgt.n	8001494 <__aeabi_dadd+0x26c>
 80013c4:	2a1f      	cmp	r2, #31
 80013c6:	dc00      	bgt.n	80013ca <__aeabi_dadd+0x1a2>
 80013c8:	e15f      	b.n	800168a <__aeabi_dadd+0x462>
 80013ca:	4647      	mov	r7, r8
 80013cc:	3a20      	subs	r2, #32
 80013ce:	40d7      	lsrs	r7, r2
 80013d0:	4662      	mov	r2, ip
 80013d2:	2a20      	cmp	r2, #32
 80013d4:	d005      	beq.n	80013e2 <__aeabi_dadd+0x1ba>
 80013d6:	4664      	mov	r4, ip
 80013d8:	2240      	movs	r2, #64	; 0x40
 80013da:	1b12      	subs	r2, r2, r4
 80013dc:	4644      	mov	r4, r8
 80013de:	4094      	lsls	r4, r2
 80013e0:	4321      	orrs	r1, r4
 80013e2:	1e4a      	subs	r2, r1, #1
 80013e4:	4191      	sbcs	r1, r2
 80013e6:	000c      	movs	r4, r1
 80013e8:	433c      	orrs	r4, r7
 80013ea:	e057      	b.n	800149c <__aeabi_dadd+0x274>
 80013ec:	003a      	movs	r2, r7
 80013ee:	430a      	orrs	r2, r1
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x1cc>
 80013f2:	e105      	b.n	8001600 <__aeabi_dadd+0x3d8>
 80013f4:	0022      	movs	r2, r4
 80013f6:	3a01      	subs	r2, #1
 80013f8:	2c01      	cmp	r4, #1
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x1d6>
 80013fc:	e182      	b.n	8001704 <__aeabi_dadd+0x4dc>
 80013fe:	4c64      	ldr	r4, [pc, #400]	; (8001590 <__aeabi_dadd+0x368>)
 8001400:	45a4      	cmp	ip, r4
 8001402:	d05b      	beq.n	80014bc <__aeabi_dadd+0x294>
 8001404:	4694      	mov	ip, r2
 8001406:	e741      	b.n	800128c <__aeabi_dadd+0x64>
 8001408:	4c63      	ldr	r4, [pc, #396]	; (8001598 <__aeabi_dadd+0x370>)
 800140a:	1c77      	adds	r7, r6, #1
 800140c:	4227      	tst	r7, r4
 800140e:	d000      	beq.n	8001412 <__aeabi_dadd+0x1ea>
 8001410:	e0c4      	b.n	800159c <__aeabi_dadd+0x374>
 8001412:	0004      	movs	r4, r0
 8001414:	431c      	orrs	r4, r3
 8001416:	2e00      	cmp	r6, #0
 8001418:	d000      	beq.n	800141c <__aeabi_dadd+0x1f4>
 800141a:	e169      	b.n	80016f0 <__aeabi_dadd+0x4c8>
 800141c:	2c00      	cmp	r4, #0
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x1fa>
 8001420:	e1bf      	b.n	80017a2 <__aeabi_dadd+0x57a>
 8001422:	4644      	mov	r4, r8
 8001424:	430c      	orrs	r4, r1
 8001426:	d000      	beq.n	800142a <__aeabi_dadd+0x202>
 8001428:	e1d0      	b.n	80017cc <__aeabi_dadd+0x5a4>
 800142a:	0742      	lsls	r2, r0, #29
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	4313      	orrs	r3, r2
 8001430:	08c0      	lsrs	r0, r0, #3
 8001432:	e029      	b.n	8001488 <__aeabi_dadd+0x260>
 8001434:	003a      	movs	r2, r7
 8001436:	430a      	orrs	r2, r1
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x214>
 800143a:	e170      	b.n	800171e <__aeabi_dadd+0x4f6>
 800143c:	4662      	mov	r2, ip
 800143e:	4664      	mov	r4, ip
 8001440:	3a01      	subs	r2, #1
 8001442:	2c01      	cmp	r4, #1
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0x220>
 8001446:	e0e0      	b.n	800160a <__aeabi_dadd+0x3e2>
 8001448:	4c51      	ldr	r4, [pc, #324]	; (8001590 <__aeabi_dadd+0x368>)
 800144a:	45a4      	cmp	ip, r4
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x228>
 800144e:	e161      	b.n	8001714 <__aeabi_dadd+0x4ec>
 8001450:	4694      	mov	ip, r2
 8001452:	e7b4      	b.n	80013be <__aeabi_dadd+0x196>
 8001454:	003a      	movs	r2, r7
 8001456:	391f      	subs	r1, #31
 8001458:	40ca      	lsrs	r2, r1
 800145a:	0011      	movs	r1, r2
 800145c:	2b20      	cmp	r3, #32
 800145e:	d003      	beq.n	8001468 <__aeabi_dadd+0x240>
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	409f      	lsls	r7, r3
 8001466:	433c      	orrs	r4, r7
 8001468:	1e63      	subs	r3, r4, #1
 800146a:	419c      	sbcs	r4, r3
 800146c:	2700      	movs	r7, #0
 800146e:	2600      	movs	r6, #0
 8001470:	430c      	orrs	r4, r1
 8001472:	0763      	lsls	r3, r4, #29
 8001474:	d000      	beq.n	8001478 <__aeabi_dadd+0x250>
 8001476:	e753      	b.n	8001320 <__aeabi_dadd+0xf8>
 8001478:	46b4      	mov	ip, r6
 800147a:	08e4      	lsrs	r4, r4, #3
 800147c:	077b      	lsls	r3, r7, #29
 800147e:	4323      	orrs	r3, r4
 8001480:	08f8      	lsrs	r0, r7, #3
 8001482:	4a43      	ldr	r2, [pc, #268]	; (8001590 <__aeabi_dadd+0x368>)
 8001484:	4594      	cmp	ip, r2
 8001486:	d01d      	beq.n	80014c4 <__aeabi_dadd+0x29c>
 8001488:	4662      	mov	r2, ip
 800148a:	0307      	lsls	r7, r0, #12
 800148c:	0552      	lsls	r2, r2, #21
 800148e:	0b3f      	lsrs	r7, r7, #12
 8001490:	0d52      	lsrs	r2, r2, #21
 8001492:	e760      	b.n	8001356 <__aeabi_dadd+0x12e>
 8001494:	4644      	mov	r4, r8
 8001496:	430c      	orrs	r4, r1
 8001498:	1e62      	subs	r2, r4, #1
 800149a:	4194      	sbcs	r4, r2
 800149c:	18e4      	adds	r4, r4, r3
 800149e:	429c      	cmp	r4, r3
 80014a0:	419b      	sbcs	r3, r3
 80014a2:	425f      	negs	r7, r3
 80014a4:	183f      	adds	r7, r7, r0
 80014a6:	023b      	lsls	r3, r7, #8
 80014a8:	d5e3      	bpl.n	8001472 <__aeabi_dadd+0x24a>
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <__aeabi_dadd+0x368>)
 80014ac:	3601      	adds	r6, #1
 80014ae:	429e      	cmp	r6, r3
 80014b0:	d000      	beq.n	80014b4 <__aeabi_dadd+0x28c>
 80014b2:	e0b5      	b.n	8001620 <__aeabi_dadd+0x3f8>
 80014b4:	0032      	movs	r2, r6
 80014b6:	2700      	movs	r7, #0
 80014b8:	2300      	movs	r3, #0
 80014ba:	e74c      	b.n	8001356 <__aeabi_dadd+0x12e>
 80014bc:	0742      	lsls	r2, r0, #29
 80014be:	08db      	lsrs	r3, r3, #3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	08c0      	lsrs	r0, r0, #3
 80014c4:	001a      	movs	r2, r3
 80014c6:	4302      	orrs	r2, r0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x2a4>
 80014ca:	e1e1      	b.n	8001890 <__aeabi_dadd+0x668>
 80014cc:	2780      	movs	r7, #128	; 0x80
 80014ce:	033f      	lsls	r7, r7, #12
 80014d0:	4307      	orrs	r7, r0
 80014d2:	033f      	lsls	r7, r7, #12
 80014d4:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <__aeabi_dadd+0x368>)
 80014d6:	0b3f      	lsrs	r7, r7, #12
 80014d8:	e73d      	b.n	8001356 <__aeabi_dadd+0x12e>
 80014da:	0020      	movs	r0, r4
 80014dc:	f001 fd5a 	bl	8002f94 <__clzsi2>
 80014e0:	0001      	movs	r1, r0
 80014e2:	3118      	adds	r1, #24
 80014e4:	291f      	cmp	r1, #31
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_dadd+0x2c2>
 80014e8:	e6fc      	b.n	80012e4 <__aeabi_dadd+0xbc>
 80014ea:	3808      	subs	r0, #8
 80014ec:	4084      	lsls	r4, r0
 80014ee:	0027      	movs	r7, r4
 80014f0:	2400      	movs	r4, #0
 80014f2:	42b1      	cmp	r1, r6
 80014f4:	db00      	blt.n	80014f8 <__aeabi_dadd+0x2d0>
 80014f6:	e6ff      	b.n	80012f8 <__aeabi_dadd+0xd0>
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <__aeabi_dadd+0x36c>)
 80014fa:	1a76      	subs	r6, r6, r1
 80014fc:	4017      	ands	r7, r2
 80014fe:	e70d      	b.n	800131c <__aeabi_dadd+0xf4>
 8001500:	2a00      	cmp	r2, #0
 8001502:	d02f      	beq.n	8001564 <__aeabi_dadd+0x33c>
 8001504:	464a      	mov	r2, r9
 8001506:	1b92      	subs	r2, r2, r6
 8001508:	4694      	mov	ip, r2
 800150a:	2e00      	cmp	r6, #0
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x2e8>
 800150e:	e0ad      	b.n	800166c <__aeabi_dadd+0x444>
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <__aeabi_dadd+0x368>)
 8001512:	4591      	cmp	r9, r2
 8001514:	d100      	bne.n	8001518 <__aeabi_dadd+0x2f0>
 8001516:	e10f      	b.n	8001738 <__aeabi_dadd+0x510>
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	0412      	lsls	r2, r2, #16
 800151c:	4310      	orrs	r0, r2
 800151e:	4662      	mov	r2, ip
 8001520:	2a38      	cmp	r2, #56	; 0x38
 8001522:	dd00      	ble.n	8001526 <__aeabi_dadd+0x2fe>
 8001524:	e10f      	b.n	8001746 <__aeabi_dadd+0x51e>
 8001526:	2a1f      	cmp	r2, #31
 8001528:	dd00      	ble.n	800152c <__aeabi_dadd+0x304>
 800152a:	e180      	b.n	800182e <__aeabi_dadd+0x606>
 800152c:	4664      	mov	r4, ip
 800152e:	2220      	movs	r2, #32
 8001530:	001e      	movs	r6, r3
 8001532:	1b12      	subs	r2, r2, r4
 8001534:	4667      	mov	r7, ip
 8001536:	0004      	movs	r4, r0
 8001538:	4093      	lsls	r3, r2
 800153a:	4094      	lsls	r4, r2
 800153c:	40fe      	lsrs	r6, r7
 800153e:	1e5a      	subs	r2, r3, #1
 8001540:	4193      	sbcs	r3, r2
 8001542:	40f8      	lsrs	r0, r7
 8001544:	4334      	orrs	r4, r6
 8001546:	431c      	orrs	r4, r3
 8001548:	4480      	add	r8, r0
 800154a:	1864      	adds	r4, r4, r1
 800154c:	428c      	cmp	r4, r1
 800154e:	41bf      	sbcs	r7, r7
 8001550:	427f      	negs	r7, r7
 8001552:	464e      	mov	r6, r9
 8001554:	4447      	add	r7, r8
 8001556:	e7a6      	b.n	80014a6 <__aeabi_dadd+0x27e>
 8001558:	4642      	mov	r2, r8
 800155a:	430a      	orrs	r2, r1
 800155c:	0011      	movs	r1, r2
 800155e:	1e4a      	subs	r2, r1, #1
 8001560:	4191      	sbcs	r1, r2
 8001562:	e6ad      	b.n	80012c0 <__aeabi_dadd+0x98>
 8001564:	4c0c      	ldr	r4, [pc, #48]	; (8001598 <__aeabi_dadd+0x370>)
 8001566:	1c72      	adds	r2, r6, #1
 8001568:	4222      	tst	r2, r4
 800156a:	d000      	beq.n	800156e <__aeabi_dadd+0x346>
 800156c:	e0a1      	b.n	80016b2 <__aeabi_dadd+0x48a>
 800156e:	0002      	movs	r2, r0
 8001570:	431a      	orrs	r2, r3
 8001572:	2e00      	cmp	r6, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_dadd+0x350>
 8001576:	e0fa      	b.n	800176e <__aeabi_dadd+0x546>
 8001578:	2a00      	cmp	r2, #0
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x356>
 800157c:	e145      	b.n	800180a <__aeabi_dadd+0x5e2>
 800157e:	003a      	movs	r2, r7
 8001580:	430a      	orrs	r2, r1
 8001582:	d000      	beq.n	8001586 <__aeabi_dadd+0x35e>
 8001584:	e146      	b.n	8001814 <__aeabi_dadd+0x5ec>
 8001586:	0742      	lsls	r2, r0, #29
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	4313      	orrs	r3, r2
 800158c:	08c0      	lsrs	r0, r0, #3
 800158e:	e77b      	b.n	8001488 <__aeabi_dadd+0x260>
 8001590:	000007ff 	.word	0x000007ff
 8001594:	ff7fffff 	.word	0xff7fffff
 8001598:	000007fe 	.word	0x000007fe
 800159c:	4647      	mov	r7, r8
 800159e:	1a5c      	subs	r4, r3, r1
 80015a0:	1bc2      	subs	r2, r0, r7
 80015a2:	42a3      	cmp	r3, r4
 80015a4:	41bf      	sbcs	r7, r7
 80015a6:	427f      	negs	r7, r7
 80015a8:	46b9      	mov	r9, r7
 80015aa:	0017      	movs	r7, r2
 80015ac:	464a      	mov	r2, r9
 80015ae:	1abf      	subs	r7, r7, r2
 80015b0:	023a      	lsls	r2, r7, #8
 80015b2:	d500      	bpl.n	80015b6 <__aeabi_dadd+0x38e>
 80015b4:	e08d      	b.n	80016d2 <__aeabi_dadd+0x4aa>
 80015b6:	0023      	movs	r3, r4
 80015b8:	433b      	orrs	r3, r7
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x396>
 80015bc:	e68a      	b.n	80012d4 <__aeabi_dadd+0xac>
 80015be:	2000      	movs	r0, #0
 80015c0:	2500      	movs	r5, #0
 80015c2:	e761      	b.n	8001488 <__aeabi_dadd+0x260>
 80015c4:	4cb4      	ldr	r4, [pc, #720]	; (8001898 <__aeabi_dadd+0x670>)
 80015c6:	45a1      	cmp	r9, r4
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x3a4>
 80015ca:	e0ad      	b.n	8001728 <__aeabi_dadd+0x500>
 80015cc:	2480      	movs	r4, #128	; 0x80
 80015ce:	0424      	lsls	r4, r4, #16
 80015d0:	4320      	orrs	r0, r4
 80015d2:	4664      	mov	r4, ip
 80015d4:	2c38      	cmp	r4, #56	; 0x38
 80015d6:	dc3d      	bgt.n	8001654 <__aeabi_dadd+0x42c>
 80015d8:	4662      	mov	r2, ip
 80015da:	2c1f      	cmp	r4, #31
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_dadd+0x3b8>
 80015de:	e0b7      	b.n	8001750 <__aeabi_dadd+0x528>
 80015e0:	2520      	movs	r5, #32
 80015e2:	001e      	movs	r6, r3
 80015e4:	1b2d      	subs	r5, r5, r4
 80015e6:	0004      	movs	r4, r0
 80015e8:	40ab      	lsls	r3, r5
 80015ea:	40ac      	lsls	r4, r5
 80015ec:	40d6      	lsrs	r6, r2
 80015ee:	40d0      	lsrs	r0, r2
 80015f0:	4642      	mov	r2, r8
 80015f2:	1e5d      	subs	r5, r3, #1
 80015f4:	41ab      	sbcs	r3, r5
 80015f6:	4334      	orrs	r4, r6
 80015f8:	1a12      	subs	r2, r2, r0
 80015fa:	4690      	mov	r8, r2
 80015fc:	4323      	orrs	r3, r4
 80015fe:	e02c      	b.n	800165a <__aeabi_dadd+0x432>
 8001600:	0742      	lsls	r2, r0, #29
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	4313      	orrs	r3, r2
 8001606:	08c0      	lsrs	r0, r0, #3
 8001608:	e73b      	b.n	8001482 <__aeabi_dadd+0x25a>
 800160a:	185c      	adds	r4, r3, r1
 800160c:	429c      	cmp	r4, r3
 800160e:	419b      	sbcs	r3, r3
 8001610:	4440      	add	r0, r8
 8001612:	425b      	negs	r3, r3
 8001614:	18c7      	adds	r7, r0, r3
 8001616:	2601      	movs	r6, #1
 8001618:	023b      	lsls	r3, r7, #8
 800161a:	d400      	bmi.n	800161e <__aeabi_dadd+0x3f6>
 800161c:	e729      	b.n	8001472 <__aeabi_dadd+0x24a>
 800161e:	2602      	movs	r6, #2
 8001620:	4a9e      	ldr	r2, [pc, #632]	; (800189c <__aeabi_dadd+0x674>)
 8001622:	0863      	lsrs	r3, r4, #1
 8001624:	4017      	ands	r7, r2
 8001626:	2201      	movs	r2, #1
 8001628:	4014      	ands	r4, r2
 800162a:	431c      	orrs	r4, r3
 800162c:	07fb      	lsls	r3, r7, #31
 800162e:	431c      	orrs	r4, r3
 8001630:	087f      	lsrs	r7, r7, #1
 8001632:	e673      	b.n	800131c <__aeabi_dadd+0xf4>
 8001634:	4644      	mov	r4, r8
 8001636:	3a20      	subs	r2, #32
 8001638:	40d4      	lsrs	r4, r2
 800163a:	4662      	mov	r2, ip
 800163c:	2a20      	cmp	r2, #32
 800163e:	d005      	beq.n	800164c <__aeabi_dadd+0x424>
 8001640:	4667      	mov	r7, ip
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	1bd2      	subs	r2, r2, r7
 8001646:	4647      	mov	r7, r8
 8001648:	4097      	lsls	r7, r2
 800164a:	4339      	orrs	r1, r7
 800164c:	1e4a      	subs	r2, r1, #1
 800164e:	4191      	sbcs	r1, r2
 8001650:	4321      	orrs	r1, r4
 8001652:	e635      	b.n	80012c0 <__aeabi_dadd+0x98>
 8001654:	4303      	orrs	r3, r0
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	4183      	sbcs	r3, r0
 800165a:	1acc      	subs	r4, r1, r3
 800165c:	42a1      	cmp	r1, r4
 800165e:	41bf      	sbcs	r7, r7
 8001660:	4643      	mov	r3, r8
 8001662:	427f      	negs	r7, r7
 8001664:	4655      	mov	r5, sl
 8001666:	464e      	mov	r6, r9
 8001668:	1bdf      	subs	r7, r3, r7
 800166a:	e62e      	b.n	80012ca <__aeabi_dadd+0xa2>
 800166c:	0002      	movs	r2, r0
 800166e:	431a      	orrs	r2, r3
 8001670:	d100      	bne.n	8001674 <__aeabi_dadd+0x44c>
 8001672:	e0bd      	b.n	80017f0 <__aeabi_dadd+0x5c8>
 8001674:	4662      	mov	r2, ip
 8001676:	4664      	mov	r4, ip
 8001678:	3a01      	subs	r2, #1
 800167a:	2c01      	cmp	r4, #1
 800167c:	d100      	bne.n	8001680 <__aeabi_dadd+0x458>
 800167e:	e0e5      	b.n	800184c <__aeabi_dadd+0x624>
 8001680:	4c85      	ldr	r4, [pc, #532]	; (8001898 <__aeabi_dadd+0x670>)
 8001682:	45a4      	cmp	ip, r4
 8001684:	d058      	beq.n	8001738 <__aeabi_dadd+0x510>
 8001686:	4694      	mov	ip, r2
 8001688:	e749      	b.n	800151e <__aeabi_dadd+0x2f6>
 800168a:	4664      	mov	r4, ip
 800168c:	2220      	movs	r2, #32
 800168e:	1b12      	subs	r2, r2, r4
 8001690:	4644      	mov	r4, r8
 8001692:	4094      	lsls	r4, r2
 8001694:	000f      	movs	r7, r1
 8001696:	46a1      	mov	r9, r4
 8001698:	4664      	mov	r4, ip
 800169a:	4091      	lsls	r1, r2
 800169c:	40e7      	lsrs	r7, r4
 800169e:	464c      	mov	r4, r9
 80016a0:	1e4a      	subs	r2, r1, #1
 80016a2:	4191      	sbcs	r1, r2
 80016a4:	433c      	orrs	r4, r7
 80016a6:	4642      	mov	r2, r8
 80016a8:	430c      	orrs	r4, r1
 80016aa:	4661      	mov	r1, ip
 80016ac:	40ca      	lsrs	r2, r1
 80016ae:	1880      	adds	r0, r0, r2
 80016b0:	e6f4      	b.n	800149c <__aeabi_dadd+0x274>
 80016b2:	4c79      	ldr	r4, [pc, #484]	; (8001898 <__aeabi_dadd+0x670>)
 80016b4:	42a2      	cmp	r2, r4
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x492>
 80016b8:	e6fd      	b.n	80014b6 <__aeabi_dadd+0x28e>
 80016ba:	1859      	adds	r1, r3, r1
 80016bc:	4299      	cmp	r1, r3
 80016be:	419b      	sbcs	r3, r3
 80016c0:	4440      	add	r0, r8
 80016c2:	425f      	negs	r7, r3
 80016c4:	19c7      	adds	r7, r0, r7
 80016c6:	07fc      	lsls	r4, r7, #31
 80016c8:	0849      	lsrs	r1, r1, #1
 80016ca:	0016      	movs	r6, r2
 80016cc:	430c      	orrs	r4, r1
 80016ce:	087f      	lsrs	r7, r7, #1
 80016d0:	e6cf      	b.n	8001472 <__aeabi_dadd+0x24a>
 80016d2:	1acc      	subs	r4, r1, r3
 80016d4:	42a1      	cmp	r1, r4
 80016d6:	41bf      	sbcs	r7, r7
 80016d8:	4643      	mov	r3, r8
 80016da:	427f      	negs	r7, r7
 80016dc:	1a18      	subs	r0, r3, r0
 80016de:	4655      	mov	r5, sl
 80016e0:	1bc7      	subs	r7, r0, r7
 80016e2:	e5f7      	b.n	80012d4 <__aeabi_dadd+0xac>
 80016e4:	08c9      	lsrs	r1, r1, #3
 80016e6:	077b      	lsls	r3, r7, #29
 80016e8:	4655      	mov	r5, sl
 80016ea:	430b      	orrs	r3, r1
 80016ec:	08f8      	lsrs	r0, r7, #3
 80016ee:	e6c8      	b.n	8001482 <__aeabi_dadd+0x25a>
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dadd+0x4ce>
 80016f4:	e081      	b.n	80017fa <__aeabi_dadd+0x5d2>
 80016f6:	4643      	mov	r3, r8
 80016f8:	430b      	orrs	r3, r1
 80016fa:	d115      	bne.n	8001728 <__aeabi_dadd+0x500>
 80016fc:	2080      	movs	r0, #128	; 0x80
 80016fe:	2500      	movs	r5, #0
 8001700:	0300      	lsls	r0, r0, #12
 8001702:	e6e3      	b.n	80014cc <__aeabi_dadd+0x2a4>
 8001704:	1a5c      	subs	r4, r3, r1
 8001706:	42a3      	cmp	r3, r4
 8001708:	419b      	sbcs	r3, r3
 800170a:	1bc7      	subs	r7, r0, r7
 800170c:	425b      	negs	r3, r3
 800170e:	2601      	movs	r6, #1
 8001710:	1aff      	subs	r7, r7, r3
 8001712:	e5da      	b.n	80012ca <__aeabi_dadd+0xa2>
 8001714:	0742      	lsls	r2, r0, #29
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	4313      	orrs	r3, r2
 800171a:	08c0      	lsrs	r0, r0, #3
 800171c:	e6d2      	b.n	80014c4 <__aeabi_dadd+0x29c>
 800171e:	0742      	lsls	r2, r0, #29
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	4313      	orrs	r3, r2
 8001724:	08c0      	lsrs	r0, r0, #3
 8001726:	e6ac      	b.n	8001482 <__aeabi_dadd+0x25a>
 8001728:	4643      	mov	r3, r8
 800172a:	4642      	mov	r2, r8
 800172c:	08c9      	lsrs	r1, r1, #3
 800172e:	075b      	lsls	r3, r3, #29
 8001730:	4655      	mov	r5, sl
 8001732:	430b      	orrs	r3, r1
 8001734:	08d0      	lsrs	r0, r2, #3
 8001736:	e6c5      	b.n	80014c4 <__aeabi_dadd+0x29c>
 8001738:	4643      	mov	r3, r8
 800173a:	4642      	mov	r2, r8
 800173c:	075b      	lsls	r3, r3, #29
 800173e:	08c9      	lsrs	r1, r1, #3
 8001740:	430b      	orrs	r3, r1
 8001742:	08d0      	lsrs	r0, r2, #3
 8001744:	e6be      	b.n	80014c4 <__aeabi_dadd+0x29c>
 8001746:	4303      	orrs	r3, r0
 8001748:	001c      	movs	r4, r3
 800174a:	1e63      	subs	r3, r4, #1
 800174c:	419c      	sbcs	r4, r3
 800174e:	e6fc      	b.n	800154a <__aeabi_dadd+0x322>
 8001750:	0002      	movs	r2, r0
 8001752:	3c20      	subs	r4, #32
 8001754:	40e2      	lsrs	r2, r4
 8001756:	0014      	movs	r4, r2
 8001758:	4662      	mov	r2, ip
 800175a:	2a20      	cmp	r2, #32
 800175c:	d003      	beq.n	8001766 <__aeabi_dadd+0x53e>
 800175e:	2540      	movs	r5, #64	; 0x40
 8001760:	1aad      	subs	r5, r5, r2
 8001762:	40a8      	lsls	r0, r5
 8001764:	4303      	orrs	r3, r0
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	4183      	sbcs	r3, r0
 800176a:	4323      	orrs	r3, r4
 800176c:	e775      	b.n	800165a <__aeabi_dadd+0x432>
 800176e:	2a00      	cmp	r2, #0
 8001770:	d0e2      	beq.n	8001738 <__aeabi_dadd+0x510>
 8001772:	003a      	movs	r2, r7
 8001774:	430a      	orrs	r2, r1
 8001776:	d0cd      	beq.n	8001714 <__aeabi_dadd+0x4ec>
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	4313      	orrs	r3, r2
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	08c0      	lsrs	r0, r0, #3
 8001782:	0312      	lsls	r2, r2, #12
 8001784:	4210      	tst	r0, r2
 8001786:	d006      	beq.n	8001796 <__aeabi_dadd+0x56e>
 8001788:	08fc      	lsrs	r4, r7, #3
 800178a:	4214      	tst	r4, r2
 800178c:	d103      	bne.n	8001796 <__aeabi_dadd+0x56e>
 800178e:	0020      	movs	r0, r4
 8001790:	08cb      	lsrs	r3, r1, #3
 8001792:	077a      	lsls	r2, r7, #29
 8001794:	4313      	orrs	r3, r2
 8001796:	0f5a      	lsrs	r2, r3, #29
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	0752      	lsls	r2, r2, #29
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	4313      	orrs	r3, r2
 80017a0:	e690      	b.n	80014c4 <__aeabi_dadd+0x29c>
 80017a2:	4643      	mov	r3, r8
 80017a4:	430b      	orrs	r3, r1
 80017a6:	d100      	bne.n	80017aa <__aeabi_dadd+0x582>
 80017a8:	e709      	b.n	80015be <__aeabi_dadd+0x396>
 80017aa:	4643      	mov	r3, r8
 80017ac:	4642      	mov	r2, r8
 80017ae:	08c9      	lsrs	r1, r1, #3
 80017b0:	075b      	lsls	r3, r3, #29
 80017b2:	4655      	mov	r5, sl
 80017b4:	430b      	orrs	r3, r1
 80017b6:	08d0      	lsrs	r0, r2, #3
 80017b8:	e666      	b.n	8001488 <__aeabi_dadd+0x260>
 80017ba:	1acc      	subs	r4, r1, r3
 80017bc:	42a1      	cmp	r1, r4
 80017be:	4189      	sbcs	r1, r1
 80017c0:	1a3f      	subs	r7, r7, r0
 80017c2:	4249      	negs	r1, r1
 80017c4:	4655      	mov	r5, sl
 80017c6:	2601      	movs	r6, #1
 80017c8:	1a7f      	subs	r7, r7, r1
 80017ca:	e57e      	b.n	80012ca <__aeabi_dadd+0xa2>
 80017cc:	4642      	mov	r2, r8
 80017ce:	1a5c      	subs	r4, r3, r1
 80017d0:	1a87      	subs	r7, r0, r2
 80017d2:	42a3      	cmp	r3, r4
 80017d4:	4192      	sbcs	r2, r2
 80017d6:	4252      	negs	r2, r2
 80017d8:	1abf      	subs	r7, r7, r2
 80017da:	023a      	lsls	r2, r7, #8
 80017dc:	d53d      	bpl.n	800185a <__aeabi_dadd+0x632>
 80017de:	1acc      	subs	r4, r1, r3
 80017e0:	42a1      	cmp	r1, r4
 80017e2:	4189      	sbcs	r1, r1
 80017e4:	4643      	mov	r3, r8
 80017e6:	4249      	negs	r1, r1
 80017e8:	1a1f      	subs	r7, r3, r0
 80017ea:	4655      	mov	r5, sl
 80017ec:	1a7f      	subs	r7, r7, r1
 80017ee:	e595      	b.n	800131c <__aeabi_dadd+0xf4>
 80017f0:	077b      	lsls	r3, r7, #29
 80017f2:	08c9      	lsrs	r1, r1, #3
 80017f4:	430b      	orrs	r3, r1
 80017f6:	08f8      	lsrs	r0, r7, #3
 80017f8:	e643      	b.n	8001482 <__aeabi_dadd+0x25a>
 80017fa:	4644      	mov	r4, r8
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	430c      	orrs	r4, r1
 8001800:	d130      	bne.n	8001864 <__aeabi_dadd+0x63c>
 8001802:	0742      	lsls	r2, r0, #29
 8001804:	4313      	orrs	r3, r2
 8001806:	08c0      	lsrs	r0, r0, #3
 8001808:	e65c      	b.n	80014c4 <__aeabi_dadd+0x29c>
 800180a:	077b      	lsls	r3, r7, #29
 800180c:	08c9      	lsrs	r1, r1, #3
 800180e:	430b      	orrs	r3, r1
 8001810:	08f8      	lsrs	r0, r7, #3
 8001812:	e639      	b.n	8001488 <__aeabi_dadd+0x260>
 8001814:	185c      	adds	r4, r3, r1
 8001816:	429c      	cmp	r4, r3
 8001818:	419b      	sbcs	r3, r3
 800181a:	4440      	add	r0, r8
 800181c:	425b      	negs	r3, r3
 800181e:	18c7      	adds	r7, r0, r3
 8001820:	023b      	lsls	r3, r7, #8
 8001822:	d400      	bmi.n	8001826 <__aeabi_dadd+0x5fe>
 8001824:	e625      	b.n	8001472 <__aeabi_dadd+0x24a>
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <__aeabi_dadd+0x674>)
 8001828:	2601      	movs	r6, #1
 800182a:	401f      	ands	r7, r3
 800182c:	e621      	b.n	8001472 <__aeabi_dadd+0x24a>
 800182e:	0004      	movs	r4, r0
 8001830:	3a20      	subs	r2, #32
 8001832:	40d4      	lsrs	r4, r2
 8001834:	4662      	mov	r2, ip
 8001836:	2a20      	cmp	r2, #32
 8001838:	d004      	beq.n	8001844 <__aeabi_dadd+0x61c>
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	4666      	mov	r6, ip
 800183e:	1b92      	subs	r2, r2, r6
 8001840:	4090      	lsls	r0, r2
 8001842:	4303      	orrs	r3, r0
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	4193      	sbcs	r3, r2
 8001848:	431c      	orrs	r4, r3
 800184a:	e67e      	b.n	800154a <__aeabi_dadd+0x322>
 800184c:	185c      	adds	r4, r3, r1
 800184e:	428c      	cmp	r4, r1
 8001850:	4189      	sbcs	r1, r1
 8001852:	4440      	add	r0, r8
 8001854:	4249      	negs	r1, r1
 8001856:	1847      	adds	r7, r0, r1
 8001858:	e6dd      	b.n	8001616 <__aeabi_dadd+0x3ee>
 800185a:	0023      	movs	r3, r4
 800185c:	433b      	orrs	r3, r7
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x63a>
 8001860:	e6ad      	b.n	80015be <__aeabi_dadd+0x396>
 8001862:	e606      	b.n	8001472 <__aeabi_dadd+0x24a>
 8001864:	0744      	lsls	r4, r0, #29
 8001866:	4323      	orrs	r3, r4
 8001868:	2480      	movs	r4, #128	; 0x80
 800186a:	08c0      	lsrs	r0, r0, #3
 800186c:	0324      	lsls	r4, r4, #12
 800186e:	4220      	tst	r0, r4
 8001870:	d008      	beq.n	8001884 <__aeabi_dadd+0x65c>
 8001872:	4642      	mov	r2, r8
 8001874:	08d6      	lsrs	r6, r2, #3
 8001876:	4226      	tst	r6, r4
 8001878:	d104      	bne.n	8001884 <__aeabi_dadd+0x65c>
 800187a:	4655      	mov	r5, sl
 800187c:	0030      	movs	r0, r6
 800187e:	08cb      	lsrs	r3, r1, #3
 8001880:	0751      	lsls	r1, r2, #29
 8001882:	430b      	orrs	r3, r1
 8001884:	0f5a      	lsrs	r2, r3, #29
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	0752      	lsls	r2, r2, #29
 800188c:	4313      	orrs	r3, r2
 800188e:	e619      	b.n	80014c4 <__aeabi_dadd+0x29c>
 8001890:	2300      	movs	r3, #0
 8001892:	4a01      	ldr	r2, [pc, #4]	; (8001898 <__aeabi_dadd+0x670>)
 8001894:	001f      	movs	r7, r3
 8001896:	e55e      	b.n	8001356 <__aeabi_dadd+0x12e>
 8001898:	000007ff 	.word	0x000007ff
 800189c:	ff7fffff 	.word	0xff7fffff

080018a0 <__aeabi_ddiv>:
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	4657      	mov	r7, sl
 80018a4:	464e      	mov	r6, r9
 80018a6:	4645      	mov	r5, r8
 80018a8:	46de      	mov	lr, fp
 80018aa:	b5e0      	push	{r5, r6, r7, lr}
 80018ac:	4681      	mov	r9, r0
 80018ae:	0005      	movs	r5, r0
 80018b0:	030c      	lsls	r4, r1, #12
 80018b2:	0048      	lsls	r0, r1, #1
 80018b4:	4692      	mov	sl, r2
 80018b6:	001f      	movs	r7, r3
 80018b8:	b085      	sub	sp, #20
 80018ba:	0b24      	lsrs	r4, r4, #12
 80018bc:	0d40      	lsrs	r0, r0, #21
 80018be:	0fce      	lsrs	r6, r1, #31
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d100      	bne.n	80018c6 <__aeabi_ddiv+0x26>
 80018c4:	e156      	b.n	8001b74 <__aeabi_ddiv+0x2d4>
 80018c6:	4bd4      	ldr	r3, [pc, #848]	; (8001c18 <__aeabi_ddiv+0x378>)
 80018c8:	4298      	cmp	r0, r3
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2e>
 80018cc:	e172      	b.n	8001bb4 <__aeabi_ddiv+0x314>
 80018ce:	0f6b      	lsrs	r3, r5, #29
 80018d0:	00e4      	lsls	r4, r4, #3
 80018d2:	431c      	orrs	r4, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	041b      	lsls	r3, r3, #16
 80018d8:	4323      	orrs	r3, r4
 80018da:	4698      	mov	r8, r3
 80018dc:	4bcf      	ldr	r3, [pc, #828]	; (8001c1c <__aeabi_ddiv+0x37c>)
 80018de:	00ed      	lsls	r5, r5, #3
 80018e0:	469b      	mov	fp, r3
 80018e2:	2300      	movs	r3, #0
 80018e4:	4699      	mov	r9, r3
 80018e6:	4483      	add	fp, r0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	033c      	lsls	r4, r7, #12
 80018ec:	007b      	lsls	r3, r7, #1
 80018ee:	4650      	mov	r0, sl
 80018f0:	0b24      	lsrs	r4, r4, #12
 80018f2:	0d5b      	lsrs	r3, r3, #21
 80018f4:	0fff      	lsrs	r7, r7, #31
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d100      	bne.n	80018fc <__aeabi_ddiv+0x5c>
 80018fa:	e11f      	b.n	8001b3c <__aeabi_ddiv+0x29c>
 80018fc:	4ac6      	ldr	r2, [pc, #792]	; (8001c18 <__aeabi_ddiv+0x378>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x64>
 8001902:	e162      	b.n	8001bca <__aeabi_ddiv+0x32a>
 8001904:	49c5      	ldr	r1, [pc, #788]	; (8001c1c <__aeabi_ddiv+0x37c>)
 8001906:	0f42      	lsrs	r2, r0, #29
 8001908:	468c      	mov	ip, r1
 800190a:	00e4      	lsls	r4, r4, #3
 800190c:	4659      	mov	r1, fp
 800190e:	4314      	orrs	r4, r2
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	4463      	add	r3, ip
 8001914:	0412      	lsls	r2, r2, #16
 8001916:	1acb      	subs	r3, r1, r3
 8001918:	4314      	orrs	r4, r2
 800191a:	469b      	mov	fp, r3
 800191c:	00c2      	lsls	r2, r0, #3
 800191e:	2000      	movs	r0, #0
 8001920:	0033      	movs	r3, r6
 8001922:	407b      	eors	r3, r7
 8001924:	469a      	mov	sl, r3
 8001926:	464b      	mov	r3, r9
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d827      	bhi.n	800197c <__aeabi_ddiv+0xdc>
 800192c:	49bc      	ldr	r1, [pc, #752]	; (8001c20 <__aeabi_ddiv+0x380>)
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	58cb      	ldr	r3, [r1, r3]
 8001932:	469f      	mov	pc, r3
 8001934:	46b2      	mov	sl, r6
 8001936:	9b00      	ldr	r3, [sp, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d016      	beq.n	800196a <__aeabi_ddiv+0xca>
 800193c:	2b03      	cmp	r3, #3
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0xa2>
 8001940:	e28e      	b.n	8001e60 <__aeabi_ddiv+0x5c0>
 8001942:	2b01      	cmp	r3, #1
 8001944:	d000      	beq.n	8001948 <__aeabi_ddiv+0xa8>
 8001946:	e0d9      	b.n	8001afc <__aeabi_ddiv+0x25c>
 8001948:	2300      	movs	r3, #0
 800194a:	2400      	movs	r4, #0
 800194c:	2500      	movs	r5, #0
 800194e:	4652      	mov	r2, sl
 8001950:	051b      	lsls	r3, r3, #20
 8001952:	4323      	orrs	r3, r4
 8001954:	07d2      	lsls	r2, r2, #31
 8001956:	4313      	orrs	r3, r2
 8001958:	0028      	movs	r0, r5
 800195a:	0019      	movs	r1, r3
 800195c:	b005      	add	sp, #20
 800195e:	bcf0      	pop	{r4, r5, r6, r7}
 8001960:	46bb      	mov	fp, r7
 8001962:	46b2      	mov	sl, r6
 8001964:	46a9      	mov	r9, r5
 8001966:	46a0      	mov	r8, r4
 8001968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196a:	2400      	movs	r4, #0
 800196c:	2500      	movs	r5, #0
 800196e:	4baa      	ldr	r3, [pc, #680]	; (8001c18 <__aeabi_ddiv+0x378>)
 8001970:	e7ed      	b.n	800194e <__aeabi_ddiv+0xae>
 8001972:	46ba      	mov	sl, r7
 8001974:	46a0      	mov	r8, r4
 8001976:	0015      	movs	r5, r2
 8001978:	9000      	str	r0, [sp, #0]
 800197a:	e7dc      	b.n	8001936 <__aeabi_ddiv+0x96>
 800197c:	4544      	cmp	r4, r8
 800197e:	d200      	bcs.n	8001982 <__aeabi_ddiv+0xe2>
 8001980:	e1c7      	b.n	8001d12 <__aeabi_ddiv+0x472>
 8001982:	d100      	bne.n	8001986 <__aeabi_ddiv+0xe6>
 8001984:	e1c2      	b.n	8001d0c <__aeabi_ddiv+0x46c>
 8001986:	2301      	movs	r3, #1
 8001988:	425b      	negs	r3, r3
 800198a:	469c      	mov	ip, r3
 800198c:	002e      	movs	r6, r5
 800198e:	4640      	mov	r0, r8
 8001990:	2500      	movs	r5, #0
 8001992:	44e3      	add	fp, ip
 8001994:	0223      	lsls	r3, r4, #8
 8001996:	0e14      	lsrs	r4, r2, #24
 8001998:	431c      	orrs	r4, r3
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	4699      	mov	r9, r3
 800199e:	0423      	lsls	r3, r4, #16
 80019a0:	0c1f      	lsrs	r7, r3, #16
 80019a2:	0212      	lsls	r2, r2, #8
 80019a4:	4649      	mov	r1, r9
 80019a6:	9200      	str	r2, [sp, #0]
 80019a8:	9701      	str	r7, [sp, #4]
 80019aa:	f7fe fc4d 	bl	8000248 <__aeabi_uidivmod>
 80019ae:	0002      	movs	r2, r0
 80019b0:	437a      	muls	r2, r7
 80019b2:	040b      	lsls	r3, r1, #16
 80019b4:	0c31      	lsrs	r1, r6, #16
 80019b6:	4680      	mov	r8, r0
 80019b8:	4319      	orrs	r1, r3
 80019ba:	428a      	cmp	r2, r1
 80019bc:	d907      	bls.n	80019ce <__aeabi_ddiv+0x12e>
 80019be:	2301      	movs	r3, #1
 80019c0:	425b      	negs	r3, r3
 80019c2:	469c      	mov	ip, r3
 80019c4:	1909      	adds	r1, r1, r4
 80019c6:	44e0      	add	r8, ip
 80019c8:	428c      	cmp	r4, r1
 80019ca:	d800      	bhi.n	80019ce <__aeabi_ddiv+0x12e>
 80019cc:	e207      	b.n	8001dde <__aeabi_ddiv+0x53e>
 80019ce:	1a88      	subs	r0, r1, r2
 80019d0:	4649      	mov	r1, r9
 80019d2:	f7fe fc39 	bl	8000248 <__aeabi_uidivmod>
 80019d6:	0409      	lsls	r1, r1, #16
 80019d8:	468c      	mov	ip, r1
 80019da:	0431      	lsls	r1, r6, #16
 80019dc:	4666      	mov	r6, ip
 80019de:	9a01      	ldr	r2, [sp, #4]
 80019e0:	0c09      	lsrs	r1, r1, #16
 80019e2:	4342      	muls	r2, r0
 80019e4:	0003      	movs	r3, r0
 80019e6:	4331      	orrs	r1, r6
 80019e8:	428a      	cmp	r2, r1
 80019ea:	d904      	bls.n	80019f6 <__aeabi_ddiv+0x156>
 80019ec:	1909      	adds	r1, r1, r4
 80019ee:	3b01      	subs	r3, #1
 80019f0:	428c      	cmp	r4, r1
 80019f2:	d800      	bhi.n	80019f6 <__aeabi_ddiv+0x156>
 80019f4:	e1ed      	b.n	8001dd2 <__aeabi_ddiv+0x532>
 80019f6:	1a88      	subs	r0, r1, r2
 80019f8:	4642      	mov	r2, r8
 80019fa:	0412      	lsls	r2, r2, #16
 80019fc:	431a      	orrs	r2, r3
 80019fe:	4690      	mov	r8, r2
 8001a00:	4641      	mov	r1, r8
 8001a02:	9b00      	ldr	r3, [sp, #0]
 8001a04:	040e      	lsls	r6, r1, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	001f      	movs	r7, r3
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	9b00      	ldr	r3, [sp, #0]
 8001a0e:	0c36      	lsrs	r6, r6, #16
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	0c19      	lsrs	r1, r3, #16
 8001a14:	000b      	movs	r3, r1
 8001a16:	4373      	muls	r3, r6
 8001a18:	0c12      	lsrs	r2, r2, #16
 8001a1a:	437e      	muls	r6, r7
 8001a1c:	9103      	str	r1, [sp, #12]
 8001a1e:	4351      	muls	r1, r2
 8001a20:	437a      	muls	r2, r7
 8001a22:	0c1f      	lsrs	r7, r3, #16
 8001a24:	46bc      	mov	ip, r7
 8001a26:	1876      	adds	r6, r6, r1
 8001a28:	4466      	add	r6, ip
 8001a2a:	42b1      	cmp	r1, r6
 8001a2c:	d903      	bls.n	8001a36 <__aeabi_ddiv+0x196>
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	0249      	lsls	r1, r1, #9
 8001a32:	468c      	mov	ip, r1
 8001a34:	4462      	add	r2, ip
 8001a36:	0c31      	lsrs	r1, r6, #16
 8001a38:	188a      	adds	r2, r1, r2
 8001a3a:	0431      	lsls	r1, r6, #16
 8001a3c:	041e      	lsls	r6, r3, #16
 8001a3e:	0c36      	lsrs	r6, r6, #16
 8001a40:	198e      	adds	r6, r1, r6
 8001a42:	4290      	cmp	r0, r2
 8001a44:	d302      	bcc.n	8001a4c <__aeabi_ddiv+0x1ac>
 8001a46:	d112      	bne.n	8001a6e <__aeabi_ddiv+0x1ce>
 8001a48:	42b5      	cmp	r5, r6
 8001a4a:	d210      	bcs.n	8001a6e <__aeabi_ddiv+0x1ce>
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	1e59      	subs	r1, r3, #1
 8001a50:	9b00      	ldr	r3, [sp, #0]
 8001a52:	469c      	mov	ip, r3
 8001a54:	4465      	add	r5, ip
 8001a56:	001f      	movs	r7, r3
 8001a58:	429d      	cmp	r5, r3
 8001a5a:	419b      	sbcs	r3, r3
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	191b      	adds	r3, r3, r4
 8001a60:	18c0      	adds	r0, r0, r3
 8001a62:	4284      	cmp	r4, r0
 8001a64:	d200      	bcs.n	8001a68 <__aeabi_ddiv+0x1c8>
 8001a66:	e1a0      	b.n	8001daa <__aeabi_ddiv+0x50a>
 8001a68:	d100      	bne.n	8001a6c <__aeabi_ddiv+0x1cc>
 8001a6a:	e19b      	b.n	8001da4 <__aeabi_ddiv+0x504>
 8001a6c:	4688      	mov	r8, r1
 8001a6e:	1bae      	subs	r6, r5, r6
 8001a70:	42b5      	cmp	r5, r6
 8001a72:	41ad      	sbcs	r5, r5
 8001a74:	1a80      	subs	r0, r0, r2
 8001a76:	426d      	negs	r5, r5
 8001a78:	1b40      	subs	r0, r0, r5
 8001a7a:	4284      	cmp	r4, r0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_ddiv+0x1e0>
 8001a7e:	e1d5      	b.n	8001e2c <__aeabi_ddiv+0x58c>
 8001a80:	4649      	mov	r1, r9
 8001a82:	f7fe fbe1 	bl	8000248 <__aeabi_uidivmod>
 8001a86:	9a01      	ldr	r2, [sp, #4]
 8001a88:	040b      	lsls	r3, r1, #16
 8001a8a:	4342      	muls	r2, r0
 8001a8c:	0c31      	lsrs	r1, r6, #16
 8001a8e:	0005      	movs	r5, r0
 8001a90:	4319      	orrs	r1, r3
 8001a92:	428a      	cmp	r2, r1
 8001a94:	d900      	bls.n	8001a98 <__aeabi_ddiv+0x1f8>
 8001a96:	e16c      	b.n	8001d72 <__aeabi_ddiv+0x4d2>
 8001a98:	1a88      	subs	r0, r1, r2
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	f7fe fbd4 	bl	8000248 <__aeabi_uidivmod>
 8001aa0:	9a01      	ldr	r2, [sp, #4]
 8001aa2:	0436      	lsls	r6, r6, #16
 8001aa4:	4342      	muls	r2, r0
 8001aa6:	0409      	lsls	r1, r1, #16
 8001aa8:	0c36      	lsrs	r6, r6, #16
 8001aaa:	0003      	movs	r3, r0
 8001aac:	430e      	orrs	r6, r1
 8001aae:	42b2      	cmp	r2, r6
 8001ab0:	d900      	bls.n	8001ab4 <__aeabi_ddiv+0x214>
 8001ab2:	e153      	b.n	8001d5c <__aeabi_ddiv+0x4bc>
 8001ab4:	9803      	ldr	r0, [sp, #12]
 8001ab6:	1ab6      	subs	r6, r6, r2
 8001ab8:	0002      	movs	r2, r0
 8001aba:	042d      	lsls	r5, r5, #16
 8001abc:	431d      	orrs	r5, r3
 8001abe:	9f02      	ldr	r7, [sp, #8]
 8001ac0:	042b      	lsls	r3, r5, #16
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	435a      	muls	r2, r3
 8001ac6:	437b      	muls	r3, r7
 8001ac8:	469c      	mov	ip, r3
 8001aca:	0c29      	lsrs	r1, r5, #16
 8001acc:	4348      	muls	r0, r1
 8001ace:	0c13      	lsrs	r3, r2, #16
 8001ad0:	4484      	add	ip, r0
 8001ad2:	4463      	add	r3, ip
 8001ad4:	4379      	muls	r1, r7
 8001ad6:	4298      	cmp	r0, r3
 8001ad8:	d903      	bls.n	8001ae2 <__aeabi_ddiv+0x242>
 8001ada:	2080      	movs	r0, #128	; 0x80
 8001adc:	0240      	lsls	r0, r0, #9
 8001ade:	4684      	mov	ip, r0
 8001ae0:	4461      	add	r1, ip
 8001ae2:	0c18      	lsrs	r0, r3, #16
 8001ae4:	0412      	lsls	r2, r2, #16
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	0c12      	lsrs	r2, r2, #16
 8001aea:	1841      	adds	r1, r0, r1
 8001aec:	189b      	adds	r3, r3, r2
 8001aee:	428e      	cmp	r6, r1
 8001af0:	d200      	bcs.n	8001af4 <__aeabi_ddiv+0x254>
 8001af2:	e0ff      	b.n	8001cf4 <__aeabi_ddiv+0x454>
 8001af4:	d100      	bne.n	8001af8 <__aeabi_ddiv+0x258>
 8001af6:	e0fa      	b.n	8001cee <__aeabi_ddiv+0x44e>
 8001af8:	2301      	movs	r3, #1
 8001afa:	431d      	orrs	r5, r3
 8001afc:	4a49      	ldr	r2, [pc, #292]	; (8001c24 <__aeabi_ddiv+0x384>)
 8001afe:	445a      	add	r2, fp
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_ddiv+0x266>
 8001b04:	e0aa      	b.n	8001c5c <__aeabi_ddiv+0x3bc>
 8001b06:	076b      	lsls	r3, r5, #29
 8001b08:	d000      	beq.n	8001b0c <__aeabi_ddiv+0x26c>
 8001b0a:	e13d      	b.n	8001d88 <__aeabi_ddiv+0x4e8>
 8001b0c:	08ed      	lsrs	r5, r5, #3
 8001b0e:	4643      	mov	r3, r8
 8001b10:	01db      	lsls	r3, r3, #7
 8001b12:	d506      	bpl.n	8001b22 <__aeabi_ddiv+0x282>
 8001b14:	4642      	mov	r2, r8
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <__aeabi_ddiv+0x388>)
 8001b18:	401a      	ands	r2, r3
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	00d2      	lsls	r2, r2, #3
 8001b20:	445a      	add	r2, fp
 8001b22:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <__aeabi_ddiv+0x38c>)
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_ddiv+0x28a>
 8001b28:	e71f      	b.n	800196a <__aeabi_ddiv+0xca>
 8001b2a:	4643      	mov	r3, r8
 8001b2c:	075b      	lsls	r3, r3, #29
 8001b2e:	431d      	orrs	r5, r3
 8001b30:	4643      	mov	r3, r8
 8001b32:	0552      	lsls	r2, r2, #21
 8001b34:	025c      	lsls	r4, r3, #9
 8001b36:	0b24      	lsrs	r4, r4, #12
 8001b38:	0d53      	lsrs	r3, r2, #21
 8001b3a:	e708      	b.n	800194e <__aeabi_ddiv+0xae>
 8001b3c:	4652      	mov	r2, sl
 8001b3e:	4322      	orrs	r2, r4
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x2a4>
 8001b42:	e07b      	b.n	8001c3c <__aeabi_ddiv+0x39c>
 8001b44:	2c00      	cmp	r4, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x2aa>
 8001b48:	e0fa      	b.n	8001d40 <__aeabi_ddiv+0x4a0>
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	f001 fa22 	bl	8002f94 <__clzsi2>
 8001b50:	0002      	movs	r2, r0
 8001b52:	3a0b      	subs	r2, #11
 8001b54:	231d      	movs	r3, #29
 8001b56:	0001      	movs	r1, r0
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	4652      	mov	r2, sl
 8001b5c:	3908      	subs	r1, #8
 8001b5e:	40da      	lsrs	r2, r3
 8001b60:	408c      	lsls	r4, r1
 8001b62:	4314      	orrs	r4, r2
 8001b64:	4652      	mov	r2, sl
 8001b66:	408a      	lsls	r2, r1
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <__aeabi_ddiv+0x390>)
 8001b6a:	4458      	add	r0, fp
 8001b6c:	469b      	mov	fp, r3
 8001b6e:	4483      	add	fp, r0
 8001b70:	2000      	movs	r0, #0
 8001b72:	e6d5      	b.n	8001920 <__aeabi_ddiv+0x80>
 8001b74:	464b      	mov	r3, r9
 8001b76:	4323      	orrs	r3, r4
 8001b78:	4698      	mov	r8, r3
 8001b7a:	d044      	beq.n	8001c06 <__aeabi_ddiv+0x366>
 8001b7c:	2c00      	cmp	r4, #0
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0x2e2>
 8001b80:	e0ce      	b.n	8001d20 <__aeabi_ddiv+0x480>
 8001b82:	0020      	movs	r0, r4
 8001b84:	f001 fa06 	bl	8002f94 <__clzsi2>
 8001b88:	0001      	movs	r1, r0
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	390b      	subs	r1, #11
 8001b8e:	231d      	movs	r3, #29
 8001b90:	1a5b      	subs	r3, r3, r1
 8001b92:	4649      	mov	r1, r9
 8001b94:	0010      	movs	r0, r2
 8001b96:	40d9      	lsrs	r1, r3
 8001b98:	3808      	subs	r0, #8
 8001b9a:	4084      	lsls	r4, r0
 8001b9c:	000b      	movs	r3, r1
 8001b9e:	464d      	mov	r5, r9
 8001ba0:	4323      	orrs	r3, r4
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	4085      	lsls	r5, r0
 8001ba6:	4823      	ldr	r0, [pc, #140]	; (8001c34 <__aeabi_ddiv+0x394>)
 8001ba8:	1a83      	subs	r3, r0, r2
 8001baa:	469b      	mov	fp, r3
 8001bac:	2300      	movs	r3, #0
 8001bae:	4699      	mov	r9, r3
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	e69a      	b.n	80018ea <__aeabi_ddiv+0x4a>
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	4698      	mov	r8, r3
 8001bba:	d11d      	bne.n	8001bf8 <__aeabi_ddiv+0x358>
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	4699      	mov	r9, r3
 8001bc0:	3b06      	subs	r3, #6
 8001bc2:	2500      	movs	r5, #0
 8001bc4:	4683      	mov	fp, r0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	e68f      	b.n	80018ea <__aeabi_ddiv+0x4a>
 8001bca:	4652      	mov	r2, sl
 8001bcc:	4322      	orrs	r2, r4
 8001bce:	d109      	bne.n	8001be4 <__aeabi_ddiv+0x344>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	4649      	mov	r1, r9
 8001bd4:	4319      	orrs	r1, r3
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <__aeabi_ddiv+0x398>)
 8001bd8:	4689      	mov	r9, r1
 8001bda:	469c      	mov	ip, r3
 8001bdc:	2400      	movs	r4, #0
 8001bde:	2002      	movs	r0, #2
 8001be0:	44e3      	add	fp, ip
 8001be2:	e69d      	b.n	8001920 <__aeabi_ddiv+0x80>
 8001be4:	2303      	movs	r3, #3
 8001be6:	464a      	mov	r2, r9
 8001be8:	431a      	orrs	r2, r3
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <__aeabi_ddiv+0x398>)
 8001bec:	4691      	mov	r9, r2
 8001bee:	469c      	mov	ip, r3
 8001bf0:	4652      	mov	r2, sl
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	44e3      	add	fp, ip
 8001bf6:	e693      	b.n	8001920 <__aeabi_ddiv+0x80>
 8001bf8:	230c      	movs	r3, #12
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	3b09      	subs	r3, #9
 8001bfe:	46a0      	mov	r8, r4
 8001c00:	4683      	mov	fp, r0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	e671      	b.n	80018ea <__aeabi_ddiv+0x4a>
 8001c06:	2304      	movs	r3, #4
 8001c08:	4699      	mov	r9, r3
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	469b      	mov	fp, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	2500      	movs	r5, #0
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	e669      	b.n	80018ea <__aeabi_ddiv+0x4a>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	fffffc01 	.word	0xfffffc01
 8001c20:	080127ac 	.word	0x080127ac
 8001c24:	000003ff 	.word	0x000003ff
 8001c28:	feffffff 	.word	0xfeffffff
 8001c2c:	000007fe 	.word	0x000007fe
 8001c30:	000003f3 	.word	0x000003f3
 8001c34:	fffffc0d 	.word	0xfffffc0d
 8001c38:	fffff801 	.word	0xfffff801
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	2301      	movs	r3, #1
 8001c40:	4319      	orrs	r1, r3
 8001c42:	4689      	mov	r9, r1
 8001c44:	2400      	movs	r4, #0
 8001c46:	2001      	movs	r0, #1
 8001c48:	e66a      	b.n	8001920 <__aeabi_ddiv+0x80>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2480      	movs	r4, #128	; 0x80
 8001c4e:	469a      	mov	sl, r3
 8001c50:	2500      	movs	r5, #0
 8001c52:	4b8a      	ldr	r3, [pc, #552]	; (8001e7c <__aeabi_ddiv+0x5dc>)
 8001c54:	0324      	lsls	r4, r4, #12
 8001c56:	e67a      	b.n	800194e <__aeabi_ddiv+0xae>
 8001c58:	2501      	movs	r5, #1
 8001c5a:	426d      	negs	r5, r5
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	2b38      	cmp	r3, #56	; 0x38
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_ddiv+0x3c6>
 8001c64:	e670      	b.n	8001948 <__aeabi_ddiv+0xa8>
 8001c66:	2b1f      	cmp	r3, #31
 8001c68:	dc00      	bgt.n	8001c6c <__aeabi_ddiv+0x3cc>
 8001c6a:	e0bf      	b.n	8001dec <__aeabi_ddiv+0x54c>
 8001c6c:	211f      	movs	r1, #31
 8001c6e:	4249      	negs	r1, r1
 8001c70:	1a8a      	subs	r2, r1, r2
 8001c72:	4641      	mov	r1, r8
 8001c74:	40d1      	lsrs	r1, r2
 8001c76:	000a      	movs	r2, r1
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d004      	beq.n	8001c86 <__aeabi_ddiv+0x3e6>
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <__aeabi_ddiv+0x5e0>)
 8001c80:	445b      	add	r3, fp
 8001c82:	4099      	lsls	r1, r3
 8001c84:	430d      	orrs	r5, r1
 8001c86:	1e6b      	subs	r3, r5, #1
 8001c88:	419d      	sbcs	r5, r3
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	432a      	orrs	r2, r5
 8001c8e:	001d      	movs	r5, r3
 8001c90:	2400      	movs	r4, #0
 8001c92:	4015      	ands	r5, r2
 8001c94:	4213      	tst	r3, r2
 8001c96:	d100      	bne.n	8001c9a <__aeabi_ddiv+0x3fa>
 8001c98:	e0d4      	b.n	8001e44 <__aeabi_ddiv+0x5a4>
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4011      	ands	r1, r2
 8001ca0:	2904      	cmp	r1, #4
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_ddiv+0x406>
 8001ca4:	e0cb      	b.n	8001e3e <__aeabi_ddiv+0x59e>
 8001ca6:	1d11      	adds	r1, r2, #4
 8001ca8:	4291      	cmp	r1, r2
 8001caa:	4192      	sbcs	r2, r2
 8001cac:	4252      	negs	r2, r2
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	000a      	movs	r2, r1
 8001cb2:	0219      	lsls	r1, r3, #8
 8001cb4:	d400      	bmi.n	8001cb8 <__aeabi_ddiv+0x418>
 8001cb6:	e0c2      	b.n	8001e3e <__aeabi_ddiv+0x59e>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	2400      	movs	r4, #0
 8001cbc:	2500      	movs	r5, #0
 8001cbe:	e646      	b.n	800194e <__aeabi_ddiv+0xae>
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	031b      	lsls	r3, r3, #12
 8001cc6:	4219      	tst	r1, r3
 8001cc8:	d008      	beq.n	8001cdc <__aeabi_ddiv+0x43c>
 8001cca:	421c      	tst	r4, r3
 8001ccc:	d106      	bne.n	8001cdc <__aeabi_ddiv+0x43c>
 8001cce:	431c      	orrs	r4, r3
 8001cd0:	0324      	lsls	r4, r4, #12
 8001cd2:	46ba      	mov	sl, r7
 8001cd4:	0015      	movs	r5, r2
 8001cd6:	4b69      	ldr	r3, [pc, #420]	; (8001e7c <__aeabi_ddiv+0x5dc>)
 8001cd8:	0b24      	lsrs	r4, r4, #12
 8001cda:	e638      	b.n	800194e <__aeabi_ddiv+0xae>
 8001cdc:	2480      	movs	r4, #128	; 0x80
 8001cde:	4643      	mov	r3, r8
 8001ce0:	0324      	lsls	r4, r4, #12
 8001ce2:	431c      	orrs	r4, r3
 8001ce4:	0324      	lsls	r4, r4, #12
 8001ce6:	46b2      	mov	sl, r6
 8001ce8:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <__aeabi_ddiv+0x5dc>)
 8001cea:	0b24      	lsrs	r4, r4, #12
 8001cec:	e62f      	b.n	800194e <__aeabi_ddiv+0xae>
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_ddiv+0x454>
 8001cf2:	e703      	b.n	8001afc <__aeabi_ddiv+0x25c>
 8001cf4:	19a6      	adds	r6, r4, r6
 8001cf6:	1e68      	subs	r0, r5, #1
 8001cf8:	42a6      	cmp	r6, r4
 8001cfa:	d200      	bcs.n	8001cfe <__aeabi_ddiv+0x45e>
 8001cfc:	e08d      	b.n	8001e1a <__aeabi_ddiv+0x57a>
 8001cfe:	428e      	cmp	r6, r1
 8001d00:	d200      	bcs.n	8001d04 <__aeabi_ddiv+0x464>
 8001d02:	e0a3      	b.n	8001e4c <__aeabi_ddiv+0x5ac>
 8001d04:	d100      	bne.n	8001d08 <__aeabi_ddiv+0x468>
 8001d06:	e0b3      	b.n	8001e70 <__aeabi_ddiv+0x5d0>
 8001d08:	0005      	movs	r5, r0
 8001d0a:	e6f5      	b.n	8001af8 <__aeabi_ddiv+0x258>
 8001d0c:	42aa      	cmp	r2, r5
 8001d0e:	d900      	bls.n	8001d12 <__aeabi_ddiv+0x472>
 8001d10:	e639      	b.n	8001986 <__aeabi_ddiv+0xe6>
 8001d12:	4643      	mov	r3, r8
 8001d14:	07de      	lsls	r6, r3, #31
 8001d16:	0858      	lsrs	r0, r3, #1
 8001d18:	086b      	lsrs	r3, r5, #1
 8001d1a:	431e      	orrs	r6, r3
 8001d1c:	07ed      	lsls	r5, r5, #31
 8001d1e:	e639      	b.n	8001994 <__aeabi_ddiv+0xf4>
 8001d20:	4648      	mov	r0, r9
 8001d22:	f001 f937 	bl	8002f94 <__clzsi2>
 8001d26:	0001      	movs	r1, r0
 8001d28:	0002      	movs	r2, r0
 8001d2a:	3115      	adds	r1, #21
 8001d2c:	3220      	adds	r2, #32
 8001d2e:	291c      	cmp	r1, #28
 8001d30:	dc00      	bgt.n	8001d34 <__aeabi_ddiv+0x494>
 8001d32:	e72c      	b.n	8001b8e <__aeabi_ddiv+0x2ee>
 8001d34:	464b      	mov	r3, r9
 8001d36:	3808      	subs	r0, #8
 8001d38:	4083      	lsls	r3, r0
 8001d3a:	2500      	movs	r5, #0
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	e732      	b.n	8001ba6 <__aeabi_ddiv+0x306>
 8001d40:	f001 f928 	bl	8002f94 <__clzsi2>
 8001d44:	0003      	movs	r3, r0
 8001d46:	001a      	movs	r2, r3
 8001d48:	3215      	adds	r2, #21
 8001d4a:	3020      	adds	r0, #32
 8001d4c:	2a1c      	cmp	r2, #28
 8001d4e:	dc00      	bgt.n	8001d52 <__aeabi_ddiv+0x4b2>
 8001d50:	e700      	b.n	8001b54 <__aeabi_ddiv+0x2b4>
 8001d52:	4654      	mov	r4, sl
 8001d54:	3b08      	subs	r3, #8
 8001d56:	2200      	movs	r2, #0
 8001d58:	409c      	lsls	r4, r3
 8001d5a:	e705      	b.n	8001b68 <__aeabi_ddiv+0x2c8>
 8001d5c:	1936      	adds	r6, r6, r4
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	42b4      	cmp	r4, r6
 8001d62:	d900      	bls.n	8001d66 <__aeabi_ddiv+0x4c6>
 8001d64:	e6a6      	b.n	8001ab4 <__aeabi_ddiv+0x214>
 8001d66:	42b2      	cmp	r2, r6
 8001d68:	d800      	bhi.n	8001d6c <__aeabi_ddiv+0x4cc>
 8001d6a:	e6a3      	b.n	8001ab4 <__aeabi_ddiv+0x214>
 8001d6c:	1e83      	subs	r3, r0, #2
 8001d6e:	1936      	adds	r6, r6, r4
 8001d70:	e6a0      	b.n	8001ab4 <__aeabi_ddiv+0x214>
 8001d72:	1909      	adds	r1, r1, r4
 8001d74:	3d01      	subs	r5, #1
 8001d76:	428c      	cmp	r4, r1
 8001d78:	d900      	bls.n	8001d7c <__aeabi_ddiv+0x4dc>
 8001d7a:	e68d      	b.n	8001a98 <__aeabi_ddiv+0x1f8>
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	d800      	bhi.n	8001d82 <__aeabi_ddiv+0x4e2>
 8001d80:	e68a      	b.n	8001a98 <__aeabi_ddiv+0x1f8>
 8001d82:	1e85      	subs	r5, r0, #2
 8001d84:	1909      	adds	r1, r1, r4
 8001d86:	e687      	b.n	8001a98 <__aeabi_ddiv+0x1f8>
 8001d88:	230f      	movs	r3, #15
 8001d8a:	402b      	ands	r3, r5
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_ddiv+0x4f2>
 8001d90:	e6bc      	b.n	8001b0c <__aeabi_ddiv+0x26c>
 8001d92:	2305      	movs	r3, #5
 8001d94:	425b      	negs	r3, r3
 8001d96:	42ab      	cmp	r3, r5
 8001d98:	419b      	sbcs	r3, r3
 8001d9a:	3504      	adds	r5, #4
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	08ed      	lsrs	r5, r5, #3
 8001da0:	4498      	add	r8, r3
 8001da2:	e6b4      	b.n	8001b0e <__aeabi_ddiv+0x26e>
 8001da4:	42af      	cmp	r7, r5
 8001da6:	d900      	bls.n	8001daa <__aeabi_ddiv+0x50a>
 8001da8:	e660      	b.n	8001a6c <__aeabi_ddiv+0x1cc>
 8001daa:	4282      	cmp	r2, r0
 8001dac:	d804      	bhi.n	8001db8 <__aeabi_ddiv+0x518>
 8001dae:	d000      	beq.n	8001db2 <__aeabi_ddiv+0x512>
 8001db0:	e65c      	b.n	8001a6c <__aeabi_ddiv+0x1cc>
 8001db2:	42ae      	cmp	r6, r5
 8001db4:	d800      	bhi.n	8001db8 <__aeabi_ddiv+0x518>
 8001db6:	e659      	b.n	8001a6c <__aeabi_ddiv+0x1cc>
 8001db8:	2302      	movs	r3, #2
 8001dba:	425b      	negs	r3, r3
 8001dbc:	469c      	mov	ip, r3
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	44e0      	add	r8, ip
 8001dc2:	469c      	mov	ip, r3
 8001dc4:	4465      	add	r5, ip
 8001dc6:	429d      	cmp	r5, r3
 8001dc8:	419b      	sbcs	r3, r3
 8001dca:	425b      	negs	r3, r3
 8001dcc:	191b      	adds	r3, r3, r4
 8001dce:	18c0      	adds	r0, r0, r3
 8001dd0:	e64d      	b.n	8001a6e <__aeabi_ddiv+0x1ce>
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d800      	bhi.n	8001dd8 <__aeabi_ddiv+0x538>
 8001dd6:	e60e      	b.n	80019f6 <__aeabi_ddiv+0x156>
 8001dd8:	1e83      	subs	r3, r0, #2
 8001dda:	1909      	adds	r1, r1, r4
 8001ddc:	e60b      	b.n	80019f6 <__aeabi_ddiv+0x156>
 8001dde:	428a      	cmp	r2, r1
 8001de0:	d800      	bhi.n	8001de4 <__aeabi_ddiv+0x544>
 8001de2:	e5f4      	b.n	80019ce <__aeabi_ddiv+0x12e>
 8001de4:	1e83      	subs	r3, r0, #2
 8001de6:	4698      	mov	r8, r3
 8001de8:	1909      	adds	r1, r1, r4
 8001dea:	e5f0      	b.n	80019ce <__aeabi_ddiv+0x12e>
 8001dec:	4925      	ldr	r1, [pc, #148]	; (8001e84 <__aeabi_ddiv+0x5e4>)
 8001dee:	0028      	movs	r0, r5
 8001df0:	4459      	add	r1, fp
 8001df2:	408d      	lsls	r5, r1
 8001df4:	4642      	mov	r2, r8
 8001df6:	408a      	lsls	r2, r1
 8001df8:	1e69      	subs	r1, r5, #1
 8001dfa:	418d      	sbcs	r5, r1
 8001dfc:	4641      	mov	r1, r8
 8001dfe:	40d8      	lsrs	r0, r3
 8001e00:	40d9      	lsrs	r1, r3
 8001e02:	4302      	orrs	r2, r0
 8001e04:	432a      	orrs	r2, r5
 8001e06:	000b      	movs	r3, r1
 8001e08:	0751      	lsls	r1, r2, #29
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_ddiv+0x56e>
 8001e0c:	e751      	b.n	8001cb2 <__aeabi_ddiv+0x412>
 8001e0e:	210f      	movs	r1, #15
 8001e10:	4011      	ands	r1, r2
 8001e12:	2904      	cmp	r1, #4
 8001e14:	d000      	beq.n	8001e18 <__aeabi_ddiv+0x578>
 8001e16:	e746      	b.n	8001ca6 <__aeabi_ddiv+0x406>
 8001e18:	e74b      	b.n	8001cb2 <__aeabi_ddiv+0x412>
 8001e1a:	0005      	movs	r5, r0
 8001e1c:	428e      	cmp	r6, r1
 8001e1e:	d000      	beq.n	8001e22 <__aeabi_ddiv+0x582>
 8001e20:	e66a      	b.n	8001af8 <__aeabi_ddiv+0x258>
 8001e22:	9a00      	ldr	r2, [sp, #0]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d000      	beq.n	8001e2a <__aeabi_ddiv+0x58a>
 8001e28:	e666      	b.n	8001af8 <__aeabi_ddiv+0x258>
 8001e2a:	e667      	b.n	8001afc <__aeabi_ddiv+0x25c>
 8001e2c:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <__aeabi_ddiv+0x5e8>)
 8001e2e:	445a      	add	r2, fp
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	dc00      	bgt.n	8001e36 <__aeabi_ddiv+0x596>
 8001e34:	e710      	b.n	8001c58 <__aeabi_ddiv+0x3b8>
 8001e36:	2301      	movs	r3, #1
 8001e38:	2500      	movs	r5, #0
 8001e3a:	4498      	add	r8, r3
 8001e3c:	e667      	b.n	8001b0e <__aeabi_ddiv+0x26e>
 8001e3e:	075d      	lsls	r5, r3, #29
 8001e40:	025b      	lsls	r3, r3, #9
 8001e42:	0b1c      	lsrs	r4, r3, #12
 8001e44:	08d2      	lsrs	r2, r2, #3
 8001e46:	2300      	movs	r3, #0
 8001e48:	4315      	orrs	r5, r2
 8001e4a:	e580      	b.n	800194e <__aeabi_ddiv+0xae>
 8001e4c:	9800      	ldr	r0, [sp, #0]
 8001e4e:	3d02      	subs	r5, #2
 8001e50:	0042      	lsls	r2, r0, #1
 8001e52:	4282      	cmp	r2, r0
 8001e54:	41bf      	sbcs	r7, r7
 8001e56:	427f      	negs	r7, r7
 8001e58:	193c      	adds	r4, r7, r4
 8001e5a:	1936      	adds	r6, r6, r4
 8001e5c:	9200      	str	r2, [sp, #0]
 8001e5e:	e7dd      	b.n	8001e1c <__aeabi_ddiv+0x57c>
 8001e60:	2480      	movs	r4, #128	; 0x80
 8001e62:	4643      	mov	r3, r8
 8001e64:	0324      	lsls	r4, r4, #12
 8001e66:	431c      	orrs	r4, r3
 8001e68:	0324      	lsls	r4, r4, #12
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__aeabi_ddiv+0x5dc>)
 8001e6c:	0b24      	lsrs	r4, r4, #12
 8001e6e:	e56e      	b.n	800194e <__aeabi_ddiv+0xae>
 8001e70:	9a00      	ldr	r2, [sp, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3ea      	bcc.n	8001e4c <__aeabi_ddiv+0x5ac>
 8001e76:	0005      	movs	r5, r0
 8001e78:	e7d3      	b.n	8001e22 <__aeabi_ddiv+0x582>
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	000007ff 	.word	0x000007ff
 8001e80:	0000043e 	.word	0x0000043e
 8001e84:	0000041e 	.word	0x0000041e
 8001e88:	000003ff 	.word	0x000003ff

08001e8c <__eqdf2>:
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	464e      	mov	r6, r9
 8001e90:	4645      	mov	r5, r8
 8001e92:	46de      	mov	lr, fp
 8001e94:	4657      	mov	r7, sl
 8001e96:	4690      	mov	r8, r2
 8001e98:	b5e0      	push	{r5, r6, r7, lr}
 8001e9a:	0017      	movs	r7, r2
 8001e9c:	031a      	lsls	r2, r3, #12
 8001e9e:	0b12      	lsrs	r2, r2, #12
 8001ea0:	0005      	movs	r5, r0
 8001ea2:	4684      	mov	ip, r0
 8001ea4:	4819      	ldr	r0, [pc, #100]	; (8001f0c <__eqdf2+0x80>)
 8001ea6:	030e      	lsls	r6, r1, #12
 8001ea8:	004c      	lsls	r4, r1, #1
 8001eaa:	4691      	mov	r9, r2
 8001eac:	005a      	lsls	r2, r3, #1
 8001eae:	0fdb      	lsrs	r3, r3, #31
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	0b36      	lsrs	r6, r6, #12
 8001eb4:	0d64      	lsrs	r4, r4, #21
 8001eb6:	0fc9      	lsrs	r1, r1, #31
 8001eb8:	0d52      	lsrs	r2, r2, #21
 8001eba:	4284      	cmp	r4, r0
 8001ebc:	d019      	beq.n	8001ef2 <__eqdf2+0x66>
 8001ebe:	4282      	cmp	r2, r0
 8001ec0:	d010      	beq.n	8001ee4 <__eqdf2+0x58>
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	4294      	cmp	r4, r2
 8001ec6:	d10e      	bne.n	8001ee6 <__eqdf2+0x5a>
 8001ec8:	454e      	cmp	r6, r9
 8001eca:	d10c      	bne.n	8001ee6 <__eqdf2+0x5a>
 8001ecc:	2001      	movs	r0, #1
 8001ece:	45c4      	cmp	ip, r8
 8001ed0:	d109      	bne.n	8001ee6 <__eqdf2+0x5a>
 8001ed2:	4559      	cmp	r1, fp
 8001ed4:	d017      	beq.n	8001f06 <__eqdf2+0x7a>
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d105      	bne.n	8001ee6 <__eqdf2+0x5a>
 8001eda:	0030      	movs	r0, r6
 8001edc:	4328      	orrs	r0, r5
 8001ede:	1e43      	subs	r3, r0, #1
 8001ee0:	4198      	sbcs	r0, r3
 8001ee2:	e000      	b.n	8001ee6 <__eqdf2+0x5a>
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ee8:	46bb      	mov	fp, r7
 8001eea:	46b2      	mov	sl, r6
 8001eec:	46a9      	mov	r9, r5
 8001eee:	46a0      	mov	r8, r4
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	0033      	movs	r3, r6
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	432b      	orrs	r3, r5
 8001ef8:	d1f5      	bne.n	8001ee6 <__eqdf2+0x5a>
 8001efa:	42a2      	cmp	r2, r4
 8001efc:	d1f3      	bne.n	8001ee6 <__eqdf2+0x5a>
 8001efe:	464b      	mov	r3, r9
 8001f00:	433b      	orrs	r3, r7
 8001f02:	d1f0      	bne.n	8001ee6 <__eqdf2+0x5a>
 8001f04:	e7e2      	b.n	8001ecc <__eqdf2+0x40>
 8001f06:	2000      	movs	r0, #0
 8001f08:	e7ed      	b.n	8001ee6 <__eqdf2+0x5a>
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__gedf2>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4647      	mov	r7, r8
 8001f14:	46ce      	mov	lr, r9
 8001f16:	0004      	movs	r4, r0
 8001f18:	0018      	movs	r0, r3
 8001f1a:	0016      	movs	r6, r2
 8001f1c:	031b      	lsls	r3, r3, #12
 8001f1e:	0b1b      	lsrs	r3, r3, #12
 8001f20:	4d2d      	ldr	r5, [pc, #180]	; (8001fd8 <__gedf2+0xc8>)
 8001f22:	004a      	lsls	r2, r1, #1
 8001f24:	4699      	mov	r9, r3
 8001f26:	b580      	push	{r7, lr}
 8001f28:	0043      	lsls	r3, r0, #1
 8001f2a:	030f      	lsls	r7, r1, #12
 8001f2c:	46a4      	mov	ip, r4
 8001f2e:	46b0      	mov	r8, r6
 8001f30:	0b3f      	lsrs	r7, r7, #12
 8001f32:	0d52      	lsrs	r2, r2, #21
 8001f34:	0fc9      	lsrs	r1, r1, #31
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	0fc0      	lsrs	r0, r0, #31
 8001f3a:	42aa      	cmp	r2, r5
 8001f3c:	d021      	beq.n	8001f82 <__gedf2+0x72>
 8001f3e:	42ab      	cmp	r3, r5
 8001f40:	d013      	beq.n	8001f6a <__gedf2+0x5a>
 8001f42:	2a00      	cmp	r2, #0
 8001f44:	d122      	bne.n	8001f8c <__gedf2+0x7c>
 8001f46:	433c      	orrs	r4, r7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <__gedf2+0x42>
 8001f4c:	464d      	mov	r5, r9
 8001f4e:	432e      	orrs	r6, r5
 8001f50:	d022      	beq.n	8001f98 <__gedf2+0x88>
 8001f52:	2c00      	cmp	r4, #0
 8001f54:	d010      	beq.n	8001f78 <__gedf2+0x68>
 8001f56:	4281      	cmp	r1, r0
 8001f58:	d022      	beq.n	8001fa0 <__gedf2+0x90>
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	3901      	subs	r1, #1
 8001f5e:	4008      	ands	r0, r1
 8001f60:	3801      	subs	r0, #1
 8001f62:	bcc0      	pop	{r6, r7}
 8001f64:	46b9      	mov	r9, r7
 8001f66:	46b0      	mov	r8, r6
 8001f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6a:	464d      	mov	r5, r9
 8001f6c:	432e      	orrs	r6, r5
 8001f6e:	d129      	bne.n	8001fc4 <__gedf2+0xb4>
 8001f70:	2a00      	cmp	r2, #0
 8001f72:	d1f0      	bne.n	8001f56 <__gedf2+0x46>
 8001f74:	433c      	orrs	r4, r7
 8001f76:	d1ee      	bne.n	8001f56 <__gedf2+0x46>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d1f2      	bne.n	8001f62 <__gedf2+0x52>
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	4240      	negs	r0, r0
 8001f80:	e7ef      	b.n	8001f62 <__gedf2+0x52>
 8001f82:	003d      	movs	r5, r7
 8001f84:	4325      	orrs	r5, r4
 8001f86:	d11d      	bne.n	8001fc4 <__gedf2+0xb4>
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d0ee      	beq.n	8001f6a <__gedf2+0x5a>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e2      	bne.n	8001f56 <__gedf2+0x46>
 8001f90:	464c      	mov	r4, r9
 8001f92:	4326      	orrs	r6, r4
 8001f94:	d1df      	bne.n	8001f56 <__gedf2+0x46>
 8001f96:	e7e0      	b.n	8001f5a <__gedf2+0x4a>
 8001f98:	2000      	movs	r0, #0
 8001f9a:	2c00      	cmp	r4, #0
 8001f9c:	d0e1      	beq.n	8001f62 <__gedf2+0x52>
 8001f9e:	e7dc      	b.n	8001f5a <__gedf2+0x4a>
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dc0a      	bgt.n	8001fba <__gedf2+0xaa>
 8001fa4:	dbe8      	blt.n	8001f78 <__gedf2+0x68>
 8001fa6:	454f      	cmp	r7, r9
 8001fa8:	d8d7      	bhi.n	8001f5a <__gedf2+0x4a>
 8001faa:	d00e      	beq.n	8001fca <__gedf2+0xba>
 8001fac:	2000      	movs	r0, #0
 8001fae:	454f      	cmp	r7, r9
 8001fb0:	d2d7      	bcs.n	8001f62 <__gedf2+0x52>
 8001fb2:	2900      	cmp	r1, #0
 8001fb4:	d0e2      	beq.n	8001f7c <__gedf2+0x6c>
 8001fb6:	0008      	movs	r0, r1
 8001fb8:	e7d3      	b.n	8001f62 <__gedf2+0x52>
 8001fba:	4243      	negs	r3, r0
 8001fbc:	4158      	adcs	r0, r3
 8001fbe:	0040      	lsls	r0, r0, #1
 8001fc0:	3801      	subs	r0, #1
 8001fc2:	e7ce      	b.n	8001f62 <__gedf2+0x52>
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	4240      	negs	r0, r0
 8001fc8:	e7cb      	b.n	8001f62 <__gedf2+0x52>
 8001fca:	45c4      	cmp	ip, r8
 8001fcc:	d8c5      	bhi.n	8001f5a <__gedf2+0x4a>
 8001fce:	2000      	movs	r0, #0
 8001fd0:	45c4      	cmp	ip, r8
 8001fd2:	d2c6      	bcs.n	8001f62 <__gedf2+0x52>
 8001fd4:	e7ed      	b.n	8001fb2 <__gedf2+0xa2>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	000007ff 	.word	0x000007ff

08001fdc <__ledf2>:
 8001fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fde:	4647      	mov	r7, r8
 8001fe0:	46ce      	mov	lr, r9
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	0016      	movs	r6, r2
 8001fe8:	031b      	lsls	r3, r3, #12
 8001fea:	0b1b      	lsrs	r3, r3, #12
 8001fec:	4d2c      	ldr	r5, [pc, #176]	; (80020a0 <__ledf2+0xc4>)
 8001fee:	004a      	lsls	r2, r1, #1
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	0043      	lsls	r3, r0, #1
 8001ff6:	030f      	lsls	r7, r1, #12
 8001ff8:	46a4      	mov	ip, r4
 8001ffa:	46b0      	mov	r8, r6
 8001ffc:	0b3f      	lsrs	r7, r7, #12
 8001ffe:	0d52      	lsrs	r2, r2, #21
 8002000:	0fc9      	lsrs	r1, r1, #31
 8002002:	0d5b      	lsrs	r3, r3, #21
 8002004:	0fc0      	lsrs	r0, r0, #31
 8002006:	42aa      	cmp	r2, r5
 8002008:	d00d      	beq.n	8002026 <__ledf2+0x4a>
 800200a:	42ab      	cmp	r3, r5
 800200c:	d010      	beq.n	8002030 <__ledf2+0x54>
 800200e:	2a00      	cmp	r2, #0
 8002010:	d127      	bne.n	8002062 <__ledf2+0x86>
 8002012:	433c      	orrs	r4, r7
 8002014:	2b00      	cmp	r3, #0
 8002016:	d111      	bne.n	800203c <__ledf2+0x60>
 8002018:	464d      	mov	r5, r9
 800201a:	432e      	orrs	r6, r5
 800201c:	d10e      	bne.n	800203c <__ledf2+0x60>
 800201e:	2000      	movs	r0, #0
 8002020:	2c00      	cmp	r4, #0
 8002022:	d015      	beq.n	8002050 <__ledf2+0x74>
 8002024:	e00e      	b.n	8002044 <__ledf2+0x68>
 8002026:	003d      	movs	r5, r7
 8002028:	4325      	orrs	r5, r4
 800202a:	d110      	bne.n	800204e <__ledf2+0x72>
 800202c:	4293      	cmp	r3, r2
 800202e:	d118      	bne.n	8002062 <__ledf2+0x86>
 8002030:	464d      	mov	r5, r9
 8002032:	432e      	orrs	r6, r5
 8002034:	d10b      	bne.n	800204e <__ledf2+0x72>
 8002036:	2a00      	cmp	r2, #0
 8002038:	d102      	bne.n	8002040 <__ledf2+0x64>
 800203a:	433c      	orrs	r4, r7
 800203c:	2c00      	cmp	r4, #0
 800203e:	d00b      	beq.n	8002058 <__ledf2+0x7c>
 8002040:	4281      	cmp	r1, r0
 8002042:	d014      	beq.n	800206e <__ledf2+0x92>
 8002044:	2002      	movs	r0, #2
 8002046:	3901      	subs	r1, #1
 8002048:	4008      	ands	r0, r1
 800204a:	3801      	subs	r0, #1
 800204c:	e000      	b.n	8002050 <__ledf2+0x74>
 800204e:	2002      	movs	r0, #2
 8002050:	bcc0      	pop	{r6, r7}
 8002052:	46b9      	mov	r9, r7
 8002054:	46b0      	mov	r8, r6
 8002056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002058:	2800      	cmp	r0, #0
 800205a:	d1f9      	bne.n	8002050 <__ledf2+0x74>
 800205c:	2001      	movs	r0, #1
 800205e:	4240      	negs	r0, r0
 8002060:	e7f6      	b.n	8002050 <__ledf2+0x74>
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ec      	bne.n	8002040 <__ledf2+0x64>
 8002066:	464c      	mov	r4, r9
 8002068:	4326      	orrs	r6, r4
 800206a:	d1e9      	bne.n	8002040 <__ledf2+0x64>
 800206c:	e7ea      	b.n	8002044 <__ledf2+0x68>
 800206e:	429a      	cmp	r2, r3
 8002070:	dd04      	ble.n	800207c <__ledf2+0xa0>
 8002072:	4243      	negs	r3, r0
 8002074:	4158      	adcs	r0, r3
 8002076:	0040      	lsls	r0, r0, #1
 8002078:	3801      	subs	r0, #1
 800207a:	e7e9      	b.n	8002050 <__ledf2+0x74>
 800207c:	429a      	cmp	r2, r3
 800207e:	dbeb      	blt.n	8002058 <__ledf2+0x7c>
 8002080:	454f      	cmp	r7, r9
 8002082:	d8df      	bhi.n	8002044 <__ledf2+0x68>
 8002084:	d006      	beq.n	8002094 <__ledf2+0xb8>
 8002086:	2000      	movs	r0, #0
 8002088:	454f      	cmp	r7, r9
 800208a:	d2e1      	bcs.n	8002050 <__ledf2+0x74>
 800208c:	2900      	cmp	r1, #0
 800208e:	d0e5      	beq.n	800205c <__ledf2+0x80>
 8002090:	0008      	movs	r0, r1
 8002092:	e7dd      	b.n	8002050 <__ledf2+0x74>
 8002094:	45c4      	cmp	ip, r8
 8002096:	d8d5      	bhi.n	8002044 <__ledf2+0x68>
 8002098:	2000      	movs	r0, #0
 800209a:	45c4      	cmp	ip, r8
 800209c:	d2d8      	bcs.n	8002050 <__ledf2+0x74>
 800209e:	e7f5      	b.n	800208c <__ledf2+0xb0>
 80020a0:	000007ff 	.word	0x000007ff

080020a4 <__aeabi_dmul>:
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	4657      	mov	r7, sl
 80020a8:	464e      	mov	r6, r9
 80020aa:	4645      	mov	r5, r8
 80020ac:	46de      	mov	lr, fp
 80020ae:	b5e0      	push	{r5, r6, r7, lr}
 80020b0:	4698      	mov	r8, r3
 80020b2:	030c      	lsls	r4, r1, #12
 80020b4:	004b      	lsls	r3, r1, #1
 80020b6:	0006      	movs	r6, r0
 80020b8:	4692      	mov	sl, r2
 80020ba:	b087      	sub	sp, #28
 80020bc:	0b24      	lsrs	r4, r4, #12
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	0fcf      	lsrs	r7, r1, #31
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dmul+0x24>
 80020c6:	e15c      	b.n	8002382 <__aeabi_dmul+0x2de>
 80020c8:	4ad9      	ldr	r2, [pc, #868]	; (8002430 <__aeabi_dmul+0x38c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dmul+0x2c>
 80020ce:	e175      	b.n	80023bc <__aeabi_dmul+0x318>
 80020d0:	0f42      	lsrs	r2, r0, #29
 80020d2:	00e4      	lsls	r4, r4, #3
 80020d4:	4314      	orrs	r4, r2
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	0412      	lsls	r2, r2, #16
 80020da:	4314      	orrs	r4, r2
 80020dc:	4ad5      	ldr	r2, [pc, #852]	; (8002434 <__aeabi_dmul+0x390>)
 80020de:	00c5      	lsls	r5, r0, #3
 80020e0:	4694      	mov	ip, r2
 80020e2:	4463      	add	r3, ip
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2300      	movs	r3, #0
 80020e8:	4699      	mov	r9, r3
 80020ea:	469b      	mov	fp, r3
 80020ec:	4643      	mov	r3, r8
 80020ee:	4642      	mov	r2, r8
 80020f0:	031e      	lsls	r6, r3, #12
 80020f2:	0fd2      	lsrs	r2, r2, #31
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4650      	mov	r0, sl
 80020f8:	4690      	mov	r8, r2
 80020fa:	0b36      	lsrs	r6, r6, #12
 80020fc:	0d5b      	lsrs	r3, r3, #21
 80020fe:	d100      	bne.n	8002102 <__aeabi_dmul+0x5e>
 8002100:	e120      	b.n	8002344 <__aeabi_dmul+0x2a0>
 8002102:	4acb      	ldr	r2, [pc, #812]	; (8002430 <__aeabi_dmul+0x38c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d100      	bne.n	800210a <__aeabi_dmul+0x66>
 8002108:	e162      	b.n	80023d0 <__aeabi_dmul+0x32c>
 800210a:	49ca      	ldr	r1, [pc, #808]	; (8002434 <__aeabi_dmul+0x390>)
 800210c:	0f42      	lsrs	r2, r0, #29
 800210e:	468c      	mov	ip, r1
 8002110:	9900      	ldr	r1, [sp, #0]
 8002112:	4463      	add	r3, ip
 8002114:	00f6      	lsls	r6, r6, #3
 8002116:	468c      	mov	ip, r1
 8002118:	4316      	orrs	r6, r2
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	449c      	add	ip, r3
 800211e:	0412      	lsls	r2, r2, #16
 8002120:	4663      	mov	r3, ip
 8002122:	4316      	orrs	r6, r2
 8002124:	00c2      	lsls	r2, r0, #3
 8002126:	2000      	movs	r0, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	9900      	ldr	r1, [sp, #0]
 800212c:	4643      	mov	r3, r8
 800212e:	3101      	adds	r1, #1
 8002130:	468c      	mov	ip, r1
 8002132:	4649      	mov	r1, r9
 8002134:	407b      	eors	r3, r7
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	290f      	cmp	r1, #15
 800213a:	d826      	bhi.n	800218a <__aeabi_dmul+0xe6>
 800213c:	4bbe      	ldr	r3, [pc, #760]	; (8002438 <__aeabi_dmul+0x394>)
 800213e:	0089      	lsls	r1, r1, #2
 8002140:	5859      	ldr	r1, [r3, r1]
 8002142:	468f      	mov	pc, r1
 8002144:	4643      	mov	r3, r8
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	0034      	movs	r4, r6
 800214a:	0015      	movs	r5, r2
 800214c:	4683      	mov	fp, r0
 800214e:	465b      	mov	r3, fp
 8002150:	2b02      	cmp	r3, #2
 8002152:	d016      	beq.n	8002182 <__aeabi_dmul+0xde>
 8002154:	2b03      	cmp	r3, #3
 8002156:	d100      	bne.n	800215a <__aeabi_dmul+0xb6>
 8002158:	e203      	b.n	8002562 <__aeabi_dmul+0x4be>
 800215a:	2b01      	cmp	r3, #1
 800215c:	d000      	beq.n	8002160 <__aeabi_dmul+0xbc>
 800215e:	e0cd      	b.n	80022fc <__aeabi_dmul+0x258>
 8002160:	2200      	movs	r2, #0
 8002162:	2400      	movs	r4, #0
 8002164:	2500      	movs	r5, #0
 8002166:	9b01      	ldr	r3, [sp, #4]
 8002168:	0512      	lsls	r2, r2, #20
 800216a:	4322      	orrs	r2, r4
 800216c:	07db      	lsls	r3, r3, #31
 800216e:	431a      	orrs	r2, r3
 8002170:	0028      	movs	r0, r5
 8002172:	0011      	movs	r1, r2
 8002174:	b007      	add	sp, #28
 8002176:	bcf0      	pop	{r4, r5, r6, r7}
 8002178:	46bb      	mov	fp, r7
 800217a:	46b2      	mov	sl, r6
 800217c:	46a9      	mov	r9, r5
 800217e:	46a0      	mov	r8, r4
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002182:	2400      	movs	r4, #0
 8002184:	2500      	movs	r5, #0
 8002186:	4aaa      	ldr	r2, [pc, #680]	; (8002430 <__aeabi_dmul+0x38c>)
 8002188:	e7ed      	b.n	8002166 <__aeabi_dmul+0xc2>
 800218a:	0c28      	lsrs	r0, r5, #16
 800218c:	042d      	lsls	r5, r5, #16
 800218e:	0c2d      	lsrs	r5, r5, #16
 8002190:	002b      	movs	r3, r5
 8002192:	0c11      	lsrs	r1, r2, #16
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	0c12      	lsrs	r2, r2, #16
 8002198:	4353      	muls	r3, r2
 800219a:	4698      	mov	r8, r3
 800219c:	0013      	movs	r3, r2
 800219e:	002f      	movs	r7, r5
 80021a0:	4343      	muls	r3, r0
 80021a2:	4699      	mov	r9, r3
 80021a4:	434f      	muls	r7, r1
 80021a6:	444f      	add	r7, r9
 80021a8:	46bb      	mov	fp, r7
 80021aa:	4647      	mov	r7, r8
 80021ac:	000b      	movs	r3, r1
 80021ae:	0c3f      	lsrs	r7, r7, #16
 80021b0:	46ba      	mov	sl, r7
 80021b2:	4343      	muls	r3, r0
 80021b4:	44da      	add	sl, fp
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	45d1      	cmp	r9, sl
 80021ba:	d904      	bls.n	80021c6 <__aeabi_dmul+0x122>
 80021bc:	2780      	movs	r7, #128	; 0x80
 80021be:	027f      	lsls	r7, r7, #9
 80021c0:	46b9      	mov	r9, r7
 80021c2:	444b      	add	r3, r9
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	4653      	mov	r3, sl
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	469b      	mov	fp, r3
 80021cc:	4653      	mov	r3, sl
 80021ce:	041f      	lsls	r7, r3, #16
 80021d0:	4643      	mov	r3, r8
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	4698      	mov	r8, r3
 80021d8:	003b      	movs	r3, r7
 80021da:	4443      	add	r3, r8
 80021dc:	9304      	str	r3, [sp, #16]
 80021de:	0c33      	lsrs	r3, r6, #16
 80021e0:	0436      	lsls	r6, r6, #16
 80021e2:	0c36      	lsrs	r6, r6, #16
 80021e4:	4698      	mov	r8, r3
 80021e6:	0033      	movs	r3, r6
 80021e8:	4343      	muls	r3, r0
 80021ea:	4699      	mov	r9, r3
 80021ec:	4643      	mov	r3, r8
 80021ee:	4343      	muls	r3, r0
 80021f0:	002f      	movs	r7, r5
 80021f2:	469a      	mov	sl, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	4377      	muls	r7, r6
 80021f8:	435d      	muls	r5, r3
 80021fa:	0c38      	lsrs	r0, r7, #16
 80021fc:	444d      	add	r5, r9
 80021fe:	1945      	adds	r5, r0, r5
 8002200:	45a9      	cmp	r9, r5
 8002202:	d903      	bls.n	800220c <__aeabi_dmul+0x168>
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	4699      	mov	r9, r3
 800220a:	44ca      	add	sl, r9
 800220c:	043f      	lsls	r7, r7, #16
 800220e:	0c28      	lsrs	r0, r5, #16
 8002210:	0c3f      	lsrs	r7, r7, #16
 8002212:	042d      	lsls	r5, r5, #16
 8002214:	19ed      	adds	r5, r5, r7
 8002216:	0c27      	lsrs	r7, r4, #16
 8002218:	0424      	lsls	r4, r4, #16
 800221a:	0c24      	lsrs	r4, r4, #16
 800221c:	0003      	movs	r3, r0
 800221e:	0020      	movs	r0, r4
 8002220:	4350      	muls	r0, r2
 8002222:	437a      	muls	r2, r7
 8002224:	4691      	mov	r9, r2
 8002226:	003a      	movs	r2, r7
 8002228:	4453      	add	r3, sl
 800222a:	9305      	str	r3, [sp, #20]
 800222c:	0c03      	lsrs	r3, r0, #16
 800222e:	469a      	mov	sl, r3
 8002230:	434a      	muls	r2, r1
 8002232:	4361      	muls	r1, r4
 8002234:	4449      	add	r1, r9
 8002236:	4451      	add	r1, sl
 8002238:	44ab      	add	fp, r5
 800223a:	4589      	cmp	r9, r1
 800223c:	d903      	bls.n	8002246 <__aeabi_dmul+0x1a2>
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	025b      	lsls	r3, r3, #9
 8002242:	4699      	mov	r9, r3
 8002244:	444a      	add	r2, r9
 8002246:	0400      	lsls	r0, r0, #16
 8002248:	0c0b      	lsrs	r3, r1, #16
 800224a:	0c00      	lsrs	r0, r0, #16
 800224c:	0409      	lsls	r1, r1, #16
 800224e:	1809      	adds	r1, r1, r0
 8002250:	0020      	movs	r0, r4
 8002252:	4699      	mov	r9, r3
 8002254:	4643      	mov	r3, r8
 8002256:	4370      	muls	r0, r6
 8002258:	435c      	muls	r4, r3
 800225a:	437e      	muls	r6, r7
 800225c:	435f      	muls	r7, r3
 800225e:	0c03      	lsrs	r3, r0, #16
 8002260:	4698      	mov	r8, r3
 8002262:	19a4      	adds	r4, r4, r6
 8002264:	4444      	add	r4, r8
 8002266:	444a      	add	r2, r9
 8002268:	9703      	str	r7, [sp, #12]
 800226a:	42a6      	cmp	r6, r4
 800226c:	d904      	bls.n	8002278 <__aeabi_dmul+0x1d4>
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	4698      	mov	r8, r3
 8002274:	4447      	add	r7, r8
 8002276:	9703      	str	r7, [sp, #12]
 8002278:	0423      	lsls	r3, r4, #16
 800227a:	9e02      	ldr	r6, [sp, #8]
 800227c:	469a      	mov	sl, r3
 800227e:	9b05      	ldr	r3, [sp, #20]
 8002280:	445e      	add	r6, fp
 8002282:	4698      	mov	r8, r3
 8002284:	42ae      	cmp	r6, r5
 8002286:	41ad      	sbcs	r5, r5
 8002288:	1876      	adds	r6, r6, r1
 800228a:	428e      	cmp	r6, r1
 800228c:	4189      	sbcs	r1, r1
 800228e:	0400      	lsls	r0, r0, #16
 8002290:	0c00      	lsrs	r0, r0, #16
 8002292:	4450      	add	r0, sl
 8002294:	4440      	add	r0, r8
 8002296:	426d      	negs	r5, r5
 8002298:	1947      	adds	r7, r0, r5
 800229a:	46b8      	mov	r8, r7
 800229c:	4693      	mov	fp, r2
 800229e:	4249      	negs	r1, r1
 80022a0:	4689      	mov	r9, r1
 80022a2:	44c3      	add	fp, r8
 80022a4:	44d9      	add	r9, fp
 80022a6:	4298      	cmp	r0, r3
 80022a8:	4180      	sbcs	r0, r0
 80022aa:	45a8      	cmp	r8, r5
 80022ac:	41ad      	sbcs	r5, r5
 80022ae:	4593      	cmp	fp, r2
 80022b0:	4192      	sbcs	r2, r2
 80022b2:	4589      	cmp	r9, r1
 80022b4:	4189      	sbcs	r1, r1
 80022b6:	426d      	negs	r5, r5
 80022b8:	4240      	negs	r0, r0
 80022ba:	4328      	orrs	r0, r5
 80022bc:	0c24      	lsrs	r4, r4, #16
 80022be:	4252      	negs	r2, r2
 80022c0:	4249      	negs	r1, r1
 80022c2:	430a      	orrs	r2, r1
 80022c4:	9b03      	ldr	r3, [sp, #12]
 80022c6:	1900      	adds	r0, r0, r4
 80022c8:	1880      	adds	r0, r0, r2
 80022ca:	18c7      	adds	r7, r0, r3
 80022cc:	464b      	mov	r3, r9
 80022ce:	0ddc      	lsrs	r4, r3, #23
 80022d0:	9b04      	ldr	r3, [sp, #16]
 80022d2:	0275      	lsls	r5, r6, #9
 80022d4:	431d      	orrs	r5, r3
 80022d6:	1e6a      	subs	r2, r5, #1
 80022d8:	4195      	sbcs	r5, r2
 80022da:	464b      	mov	r3, r9
 80022dc:	0df6      	lsrs	r6, r6, #23
 80022de:	027f      	lsls	r7, r7, #9
 80022e0:	4335      	orrs	r5, r6
 80022e2:	025a      	lsls	r2, r3, #9
 80022e4:	433c      	orrs	r4, r7
 80022e6:	4315      	orrs	r5, r2
 80022e8:	01fb      	lsls	r3, r7, #7
 80022ea:	d400      	bmi.n	80022ee <__aeabi_dmul+0x24a>
 80022ec:	e11c      	b.n	8002528 <__aeabi_dmul+0x484>
 80022ee:	2101      	movs	r1, #1
 80022f0:	086a      	lsrs	r2, r5, #1
 80022f2:	400d      	ands	r5, r1
 80022f4:	4315      	orrs	r5, r2
 80022f6:	07e2      	lsls	r2, r4, #31
 80022f8:	4315      	orrs	r5, r2
 80022fa:	0864      	lsrs	r4, r4, #1
 80022fc:	494f      	ldr	r1, [pc, #316]	; (800243c <__aeabi_dmul+0x398>)
 80022fe:	4461      	add	r1, ip
 8002300:	2900      	cmp	r1, #0
 8002302:	dc00      	bgt.n	8002306 <__aeabi_dmul+0x262>
 8002304:	e0b0      	b.n	8002468 <__aeabi_dmul+0x3c4>
 8002306:	076b      	lsls	r3, r5, #29
 8002308:	d009      	beq.n	800231e <__aeabi_dmul+0x27a>
 800230a:	220f      	movs	r2, #15
 800230c:	402a      	ands	r2, r5
 800230e:	2a04      	cmp	r2, #4
 8002310:	d005      	beq.n	800231e <__aeabi_dmul+0x27a>
 8002312:	1d2a      	adds	r2, r5, #4
 8002314:	42aa      	cmp	r2, r5
 8002316:	41ad      	sbcs	r5, r5
 8002318:	426d      	negs	r5, r5
 800231a:	1964      	adds	r4, r4, r5
 800231c:	0015      	movs	r5, r2
 800231e:	01e3      	lsls	r3, r4, #7
 8002320:	d504      	bpl.n	800232c <__aeabi_dmul+0x288>
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <__aeabi_dmul+0x39c>)
 8002326:	00c9      	lsls	r1, r1, #3
 8002328:	4014      	ands	r4, r2
 800232a:	4461      	add	r1, ip
 800232c:	4a45      	ldr	r2, [pc, #276]	; (8002444 <__aeabi_dmul+0x3a0>)
 800232e:	4291      	cmp	r1, r2
 8002330:	dd00      	ble.n	8002334 <__aeabi_dmul+0x290>
 8002332:	e726      	b.n	8002182 <__aeabi_dmul+0xde>
 8002334:	0762      	lsls	r2, r4, #29
 8002336:	08ed      	lsrs	r5, r5, #3
 8002338:	0264      	lsls	r4, r4, #9
 800233a:	0549      	lsls	r1, r1, #21
 800233c:	4315      	orrs	r5, r2
 800233e:	0b24      	lsrs	r4, r4, #12
 8002340:	0d4a      	lsrs	r2, r1, #21
 8002342:	e710      	b.n	8002166 <__aeabi_dmul+0xc2>
 8002344:	4652      	mov	r2, sl
 8002346:	4332      	orrs	r2, r6
 8002348:	d100      	bne.n	800234c <__aeabi_dmul+0x2a8>
 800234a:	e07f      	b.n	800244c <__aeabi_dmul+0x3a8>
 800234c:	2e00      	cmp	r6, #0
 800234e:	d100      	bne.n	8002352 <__aeabi_dmul+0x2ae>
 8002350:	e0dc      	b.n	800250c <__aeabi_dmul+0x468>
 8002352:	0030      	movs	r0, r6
 8002354:	f000 fe1e 	bl	8002f94 <__clzsi2>
 8002358:	0002      	movs	r2, r0
 800235a:	3a0b      	subs	r2, #11
 800235c:	231d      	movs	r3, #29
 800235e:	0001      	movs	r1, r0
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	4652      	mov	r2, sl
 8002364:	3908      	subs	r1, #8
 8002366:	40da      	lsrs	r2, r3
 8002368:	408e      	lsls	r6, r1
 800236a:	4316      	orrs	r6, r2
 800236c:	4652      	mov	r2, sl
 800236e:	408a      	lsls	r2, r1
 8002370:	9b00      	ldr	r3, [sp, #0]
 8002372:	4935      	ldr	r1, [pc, #212]	; (8002448 <__aeabi_dmul+0x3a4>)
 8002374:	1a18      	subs	r0, r3, r0
 8002376:	0003      	movs	r3, r0
 8002378:	468c      	mov	ip, r1
 800237a:	4463      	add	r3, ip
 800237c:	2000      	movs	r0, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	e6d3      	b.n	800212a <__aeabi_dmul+0x86>
 8002382:	0025      	movs	r5, r4
 8002384:	4305      	orrs	r5, r0
 8002386:	d04a      	beq.n	800241e <__aeabi_dmul+0x37a>
 8002388:	2c00      	cmp	r4, #0
 800238a:	d100      	bne.n	800238e <__aeabi_dmul+0x2ea>
 800238c:	e0b0      	b.n	80024f0 <__aeabi_dmul+0x44c>
 800238e:	0020      	movs	r0, r4
 8002390:	f000 fe00 	bl	8002f94 <__clzsi2>
 8002394:	0001      	movs	r1, r0
 8002396:	0002      	movs	r2, r0
 8002398:	390b      	subs	r1, #11
 800239a:	231d      	movs	r3, #29
 800239c:	0010      	movs	r0, r2
 800239e:	1a5b      	subs	r3, r3, r1
 80023a0:	0031      	movs	r1, r6
 80023a2:	0035      	movs	r5, r6
 80023a4:	3808      	subs	r0, #8
 80023a6:	4084      	lsls	r4, r0
 80023a8:	40d9      	lsrs	r1, r3
 80023aa:	4085      	lsls	r5, r0
 80023ac:	430c      	orrs	r4, r1
 80023ae:	4826      	ldr	r0, [pc, #152]	; (8002448 <__aeabi_dmul+0x3a4>)
 80023b0:	1a83      	subs	r3, r0, r2
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2300      	movs	r3, #0
 80023b6:	4699      	mov	r9, r3
 80023b8:	469b      	mov	fp, r3
 80023ba:	e697      	b.n	80020ec <__aeabi_dmul+0x48>
 80023bc:	0005      	movs	r5, r0
 80023be:	4325      	orrs	r5, r4
 80023c0:	d126      	bne.n	8002410 <__aeabi_dmul+0x36c>
 80023c2:	2208      	movs	r2, #8
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2302      	movs	r3, #2
 80023c8:	2400      	movs	r4, #0
 80023ca:	4691      	mov	r9, r2
 80023cc:	469b      	mov	fp, r3
 80023ce:	e68d      	b.n	80020ec <__aeabi_dmul+0x48>
 80023d0:	4652      	mov	r2, sl
 80023d2:	9b00      	ldr	r3, [sp, #0]
 80023d4:	4332      	orrs	r2, r6
 80023d6:	d110      	bne.n	80023fa <__aeabi_dmul+0x356>
 80023d8:	4915      	ldr	r1, [pc, #84]	; (8002430 <__aeabi_dmul+0x38c>)
 80023da:	2600      	movs	r6, #0
 80023dc:	468c      	mov	ip, r1
 80023de:	4463      	add	r3, ip
 80023e0:	4649      	mov	r1, r9
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2302      	movs	r3, #2
 80023e6:	4319      	orrs	r1, r3
 80023e8:	4689      	mov	r9, r1
 80023ea:	2002      	movs	r0, #2
 80023ec:	e69d      	b.n	800212a <__aeabi_dmul+0x86>
 80023ee:	465b      	mov	r3, fp
 80023f0:	9701      	str	r7, [sp, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d000      	beq.n	80023f8 <__aeabi_dmul+0x354>
 80023f6:	e6ad      	b.n	8002154 <__aeabi_dmul+0xb0>
 80023f8:	e6c3      	b.n	8002182 <__aeabi_dmul+0xde>
 80023fa:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <__aeabi_dmul+0x38c>)
 80023fc:	2003      	movs	r0, #3
 80023fe:	4694      	mov	ip, r2
 8002400:	4463      	add	r3, ip
 8002402:	464a      	mov	r2, r9
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2303      	movs	r3, #3
 8002408:	431a      	orrs	r2, r3
 800240a:	4691      	mov	r9, r2
 800240c:	4652      	mov	r2, sl
 800240e:	e68c      	b.n	800212a <__aeabi_dmul+0x86>
 8002410:	220c      	movs	r2, #12
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2303      	movs	r3, #3
 8002416:	0005      	movs	r5, r0
 8002418:	4691      	mov	r9, r2
 800241a:	469b      	mov	fp, r3
 800241c:	e666      	b.n	80020ec <__aeabi_dmul+0x48>
 800241e:	2304      	movs	r3, #4
 8002420:	4699      	mov	r9, r3
 8002422:	2300      	movs	r3, #0
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	2400      	movs	r4, #0
 800242a:	469b      	mov	fp, r3
 800242c:	e65e      	b.n	80020ec <__aeabi_dmul+0x48>
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	000007ff 	.word	0x000007ff
 8002434:	fffffc01 	.word	0xfffffc01
 8002438:	080127ec 	.word	0x080127ec
 800243c:	000003ff 	.word	0x000003ff
 8002440:	feffffff 	.word	0xfeffffff
 8002444:	000007fe 	.word	0x000007fe
 8002448:	fffffc0d 	.word	0xfffffc0d
 800244c:	4649      	mov	r1, r9
 800244e:	2301      	movs	r3, #1
 8002450:	4319      	orrs	r1, r3
 8002452:	4689      	mov	r9, r1
 8002454:	2600      	movs	r6, #0
 8002456:	2001      	movs	r0, #1
 8002458:	e667      	b.n	800212a <__aeabi_dmul+0x86>
 800245a:	2300      	movs	r3, #0
 800245c:	2480      	movs	r4, #128	; 0x80
 800245e:	2500      	movs	r5, #0
 8002460:	4a43      	ldr	r2, [pc, #268]	; (8002570 <__aeabi_dmul+0x4cc>)
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	0324      	lsls	r4, r4, #12
 8002466:	e67e      	b.n	8002166 <__aeabi_dmul+0xc2>
 8002468:	2001      	movs	r0, #1
 800246a:	1a40      	subs	r0, r0, r1
 800246c:	2838      	cmp	r0, #56	; 0x38
 800246e:	dd00      	ble.n	8002472 <__aeabi_dmul+0x3ce>
 8002470:	e676      	b.n	8002160 <__aeabi_dmul+0xbc>
 8002472:	281f      	cmp	r0, #31
 8002474:	dd5b      	ble.n	800252e <__aeabi_dmul+0x48a>
 8002476:	221f      	movs	r2, #31
 8002478:	0023      	movs	r3, r4
 800247a:	4252      	negs	r2, r2
 800247c:	1a51      	subs	r1, r2, r1
 800247e:	40cb      	lsrs	r3, r1
 8002480:	0019      	movs	r1, r3
 8002482:	2820      	cmp	r0, #32
 8002484:	d003      	beq.n	800248e <__aeabi_dmul+0x3ea>
 8002486:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <__aeabi_dmul+0x4d0>)
 8002488:	4462      	add	r2, ip
 800248a:	4094      	lsls	r4, r2
 800248c:	4325      	orrs	r5, r4
 800248e:	1e6a      	subs	r2, r5, #1
 8002490:	4195      	sbcs	r5, r2
 8002492:	002a      	movs	r2, r5
 8002494:	430a      	orrs	r2, r1
 8002496:	2107      	movs	r1, #7
 8002498:	000d      	movs	r5, r1
 800249a:	2400      	movs	r4, #0
 800249c:	4015      	ands	r5, r2
 800249e:	4211      	tst	r1, r2
 80024a0:	d05b      	beq.n	800255a <__aeabi_dmul+0x4b6>
 80024a2:	210f      	movs	r1, #15
 80024a4:	2400      	movs	r4, #0
 80024a6:	4011      	ands	r1, r2
 80024a8:	2904      	cmp	r1, #4
 80024aa:	d053      	beq.n	8002554 <__aeabi_dmul+0x4b0>
 80024ac:	1d11      	adds	r1, r2, #4
 80024ae:	4291      	cmp	r1, r2
 80024b0:	4192      	sbcs	r2, r2
 80024b2:	4252      	negs	r2, r2
 80024b4:	18a4      	adds	r4, r4, r2
 80024b6:	000a      	movs	r2, r1
 80024b8:	0223      	lsls	r3, r4, #8
 80024ba:	d54b      	bpl.n	8002554 <__aeabi_dmul+0x4b0>
 80024bc:	2201      	movs	r2, #1
 80024be:	2400      	movs	r4, #0
 80024c0:	2500      	movs	r5, #0
 80024c2:	e650      	b.n	8002166 <__aeabi_dmul+0xc2>
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	421c      	tst	r4, r3
 80024ca:	d009      	beq.n	80024e0 <__aeabi_dmul+0x43c>
 80024cc:	421e      	tst	r6, r3
 80024ce:	d107      	bne.n	80024e0 <__aeabi_dmul+0x43c>
 80024d0:	4333      	orrs	r3, r6
 80024d2:	031c      	lsls	r4, r3, #12
 80024d4:	4643      	mov	r3, r8
 80024d6:	0015      	movs	r5, r2
 80024d8:	0b24      	lsrs	r4, r4, #12
 80024da:	4a25      	ldr	r2, [pc, #148]	; (8002570 <__aeabi_dmul+0x4cc>)
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	e642      	b.n	8002166 <__aeabi_dmul+0xc2>
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	0312      	lsls	r2, r2, #12
 80024e4:	4314      	orrs	r4, r2
 80024e6:	0324      	lsls	r4, r4, #12
 80024e8:	4a21      	ldr	r2, [pc, #132]	; (8002570 <__aeabi_dmul+0x4cc>)
 80024ea:	0b24      	lsrs	r4, r4, #12
 80024ec:	9701      	str	r7, [sp, #4]
 80024ee:	e63a      	b.n	8002166 <__aeabi_dmul+0xc2>
 80024f0:	f000 fd50 	bl	8002f94 <__clzsi2>
 80024f4:	0001      	movs	r1, r0
 80024f6:	0002      	movs	r2, r0
 80024f8:	3115      	adds	r1, #21
 80024fa:	3220      	adds	r2, #32
 80024fc:	291c      	cmp	r1, #28
 80024fe:	dc00      	bgt.n	8002502 <__aeabi_dmul+0x45e>
 8002500:	e74b      	b.n	800239a <__aeabi_dmul+0x2f6>
 8002502:	0034      	movs	r4, r6
 8002504:	3808      	subs	r0, #8
 8002506:	2500      	movs	r5, #0
 8002508:	4084      	lsls	r4, r0
 800250a:	e750      	b.n	80023ae <__aeabi_dmul+0x30a>
 800250c:	f000 fd42 	bl	8002f94 <__clzsi2>
 8002510:	0003      	movs	r3, r0
 8002512:	001a      	movs	r2, r3
 8002514:	3215      	adds	r2, #21
 8002516:	3020      	adds	r0, #32
 8002518:	2a1c      	cmp	r2, #28
 800251a:	dc00      	bgt.n	800251e <__aeabi_dmul+0x47a>
 800251c:	e71e      	b.n	800235c <__aeabi_dmul+0x2b8>
 800251e:	4656      	mov	r6, sl
 8002520:	3b08      	subs	r3, #8
 8002522:	2200      	movs	r2, #0
 8002524:	409e      	lsls	r6, r3
 8002526:	e723      	b.n	8002370 <__aeabi_dmul+0x2cc>
 8002528:	9b00      	ldr	r3, [sp, #0]
 800252a:	469c      	mov	ip, r3
 800252c:	e6e6      	b.n	80022fc <__aeabi_dmul+0x258>
 800252e:	4912      	ldr	r1, [pc, #72]	; (8002578 <__aeabi_dmul+0x4d4>)
 8002530:	0022      	movs	r2, r4
 8002532:	4461      	add	r1, ip
 8002534:	002e      	movs	r6, r5
 8002536:	408d      	lsls	r5, r1
 8002538:	408a      	lsls	r2, r1
 800253a:	40c6      	lsrs	r6, r0
 800253c:	1e69      	subs	r1, r5, #1
 800253e:	418d      	sbcs	r5, r1
 8002540:	4332      	orrs	r2, r6
 8002542:	432a      	orrs	r2, r5
 8002544:	40c4      	lsrs	r4, r0
 8002546:	0753      	lsls	r3, r2, #29
 8002548:	d0b6      	beq.n	80024b8 <__aeabi_dmul+0x414>
 800254a:	210f      	movs	r1, #15
 800254c:	4011      	ands	r1, r2
 800254e:	2904      	cmp	r1, #4
 8002550:	d1ac      	bne.n	80024ac <__aeabi_dmul+0x408>
 8002552:	e7b1      	b.n	80024b8 <__aeabi_dmul+0x414>
 8002554:	0765      	lsls	r5, r4, #29
 8002556:	0264      	lsls	r4, r4, #9
 8002558:	0b24      	lsrs	r4, r4, #12
 800255a:	08d2      	lsrs	r2, r2, #3
 800255c:	4315      	orrs	r5, r2
 800255e:	2200      	movs	r2, #0
 8002560:	e601      	b.n	8002166 <__aeabi_dmul+0xc2>
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	4314      	orrs	r4, r2
 8002568:	0324      	lsls	r4, r4, #12
 800256a:	4a01      	ldr	r2, [pc, #4]	; (8002570 <__aeabi_dmul+0x4cc>)
 800256c:	0b24      	lsrs	r4, r4, #12
 800256e:	e5fa      	b.n	8002166 <__aeabi_dmul+0xc2>
 8002570:	000007ff 	.word	0x000007ff
 8002574:	0000043e 	.word	0x0000043e
 8002578:	0000041e 	.word	0x0000041e

0800257c <__aeabi_dsub>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	4657      	mov	r7, sl
 8002580:	464e      	mov	r6, r9
 8002582:	4645      	mov	r5, r8
 8002584:	46de      	mov	lr, fp
 8002586:	b5e0      	push	{r5, r6, r7, lr}
 8002588:	001e      	movs	r6, r3
 800258a:	0017      	movs	r7, r2
 800258c:	004a      	lsls	r2, r1, #1
 800258e:	030b      	lsls	r3, r1, #12
 8002590:	0d52      	lsrs	r2, r2, #21
 8002592:	0a5b      	lsrs	r3, r3, #9
 8002594:	4690      	mov	r8, r2
 8002596:	0f42      	lsrs	r2, r0, #29
 8002598:	431a      	orrs	r2, r3
 800259a:	0fcd      	lsrs	r5, r1, #31
 800259c:	4ccd      	ldr	r4, [pc, #820]	; (80028d4 <__aeabi_dsub+0x358>)
 800259e:	0331      	lsls	r1, r6, #12
 80025a0:	00c3      	lsls	r3, r0, #3
 80025a2:	4694      	mov	ip, r2
 80025a4:	0070      	lsls	r0, r6, #1
 80025a6:	0f7a      	lsrs	r2, r7, #29
 80025a8:	0a49      	lsrs	r1, r1, #9
 80025aa:	00ff      	lsls	r7, r7, #3
 80025ac:	469a      	mov	sl, r3
 80025ae:	46b9      	mov	r9, r7
 80025b0:	0d40      	lsrs	r0, r0, #21
 80025b2:	0ff6      	lsrs	r6, r6, #31
 80025b4:	4311      	orrs	r1, r2
 80025b6:	42a0      	cmp	r0, r4
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x40>
 80025ba:	e0b1      	b.n	8002720 <__aeabi_dsub+0x1a4>
 80025bc:	2201      	movs	r2, #1
 80025be:	4056      	eors	r6, r2
 80025c0:	46b3      	mov	fp, r6
 80025c2:	42b5      	cmp	r5, r6
 80025c4:	d100      	bne.n	80025c8 <__aeabi_dsub+0x4c>
 80025c6:	e088      	b.n	80026da <__aeabi_dsub+0x15e>
 80025c8:	4642      	mov	r2, r8
 80025ca:	1a12      	subs	r2, r2, r0
 80025cc:	2a00      	cmp	r2, #0
 80025ce:	dc00      	bgt.n	80025d2 <__aeabi_dsub+0x56>
 80025d0:	e0ae      	b.n	8002730 <__aeabi_dsub+0x1b4>
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d100      	bne.n	80025d8 <__aeabi_dsub+0x5c>
 80025d6:	e0c1      	b.n	800275c <__aeabi_dsub+0x1e0>
 80025d8:	48be      	ldr	r0, [pc, #760]	; (80028d4 <__aeabi_dsub+0x358>)
 80025da:	4580      	cmp	r8, r0
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dsub+0x64>
 80025de:	e151      	b.n	8002884 <__aeabi_dsub+0x308>
 80025e0:	2080      	movs	r0, #128	; 0x80
 80025e2:	0400      	lsls	r0, r0, #16
 80025e4:	4301      	orrs	r1, r0
 80025e6:	2a38      	cmp	r2, #56	; 0x38
 80025e8:	dd00      	ble.n	80025ec <__aeabi_dsub+0x70>
 80025ea:	e17b      	b.n	80028e4 <__aeabi_dsub+0x368>
 80025ec:	2a1f      	cmp	r2, #31
 80025ee:	dd00      	ble.n	80025f2 <__aeabi_dsub+0x76>
 80025f0:	e1ee      	b.n	80029d0 <__aeabi_dsub+0x454>
 80025f2:	2020      	movs	r0, #32
 80025f4:	003e      	movs	r6, r7
 80025f6:	1a80      	subs	r0, r0, r2
 80025f8:	000c      	movs	r4, r1
 80025fa:	40d6      	lsrs	r6, r2
 80025fc:	40d1      	lsrs	r1, r2
 80025fe:	4087      	lsls	r7, r0
 8002600:	4662      	mov	r2, ip
 8002602:	4084      	lsls	r4, r0
 8002604:	1a52      	subs	r2, r2, r1
 8002606:	1e78      	subs	r0, r7, #1
 8002608:	4187      	sbcs	r7, r0
 800260a:	4694      	mov	ip, r2
 800260c:	4334      	orrs	r4, r6
 800260e:	4327      	orrs	r7, r4
 8002610:	1bdc      	subs	r4, r3, r7
 8002612:	42a3      	cmp	r3, r4
 8002614:	419b      	sbcs	r3, r3
 8002616:	4662      	mov	r2, ip
 8002618:	425b      	negs	r3, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	4699      	mov	r9, r3
 800261e:	464b      	mov	r3, r9
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	d400      	bmi.n	8002626 <__aeabi_dsub+0xaa>
 8002624:	e118      	b.n	8002858 <__aeabi_dsub+0x2dc>
 8002626:	464b      	mov	r3, r9
 8002628:	0258      	lsls	r0, r3, #9
 800262a:	0a43      	lsrs	r3, r0, #9
 800262c:	4699      	mov	r9, r3
 800262e:	464b      	mov	r3, r9
 8002630:	2b00      	cmp	r3, #0
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0xba>
 8002634:	e137      	b.n	80028a6 <__aeabi_dsub+0x32a>
 8002636:	4648      	mov	r0, r9
 8002638:	f000 fcac 	bl	8002f94 <__clzsi2>
 800263c:	0001      	movs	r1, r0
 800263e:	3908      	subs	r1, #8
 8002640:	2320      	movs	r3, #32
 8002642:	0022      	movs	r2, r4
 8002644:	4648      	mov	r0, r9
 8002646:	1a5b      	subs	r3, r3, r1
 8002648:	40da      	lsrs	r2, r3
 800264a:	4088      	lsls	r0, r1
 800264c:	408c      	lsls	r4, r1
 800264e:	4643      	mov	r3, r8
 8002650:	4310      	orrs	r0, r2
 8002652:	4588      	cmp	r8, r1
 8002654:	dd00      	ble.n	8002658 <__aeabi_dsub+0xdc>
 8002656:	e136      	b.n	80028c6 <__aeabi_dsub+0x34a>
 8002658:	1ac9      	subs	r1, r1, r3
 800265a:	1c4b      	adds	r3, r1, #1
 800265c:	2b1f      	cmp	r3, #31
 800265e:	dd00      	ble.n	8002662 <__aeabi_dsub+0xe6>
 8002660:	e0ea      	b.n	8002838 <__aeabi_dsub+0x2bc>
 8002662:	2220      	movs	r2, #32
 8002664:	0026      	movs	r6, r4
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	0001      	movs	r1, r0
 800266a:	4094      	lsls	r4, r2
 800266c:	40de      	lsrs	r6, r3
 800266e:	40d8      	lsrs	r0, r3
 8002670:	2300      	movs	r3, #0
 8002672:	4091      	lsls	r1, r2
 8002674:	1e62      	subs	r2, r4, #1
 8002676:	4194      	sbcs	r4, r2
 8002678:	4681      	mov	r9, r0
 800267a:	4698      	mov	r8, r3
 800267c:	4331      	orrs	r1, r6
 800267e:	430c      	orrs	r4, r1
 8002680:	0763      	lsls	r3, r4, #29
 8002682:	d009      	beq.n	8002698 <__aeabi_dsub+0x11c>
 8002684:	230f      	movs	r3, #15
 8002686:	4023      	ands	r3, r4
 8002688:	2b04      	cmp	r3, #4
 800268a:	d005      	beq.n	8002698 <__aeabi_dsub+0x11c>
 800268c:	1d23      	adds	r3, r4, #4
 800268e:	42a3      	cmp	r3, r4
 8002690:	41a4      	sbcs	r4, r4
 8002692:	4264      	negs	r4, r4
 8002694:	44a1      	add	r9, r4
 8002696:	001c      	movs	r4, r3
 8002698:	464b      	mov	r3, r9
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	d400      	bmi.n	80026a0 <__aeabi_dsub+0x124>
 800269e:	e0de      	b.n	800285e <__aeabi_dsub+0x2e2>
 80026a0:	4641      	mov	r1, r8
 80026a2:	4b8c      	ldr	r3, [pc, #560]	; (80028d4 <__aeabi_dsub+0x358>)
 80026a4:	3101      	adds	r1, #1
 80026a6:	4299      	cmp	r1, r3
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x130>
 80026aa:	e0e7      	b.n	800287c <__aeabi_dsub+0x300>
 80026ac:	464b      	mov	r3, r9
 80026ae:	488a      	ldr	r0, [pc, #552]	; (80028d8 <__aeabi_dsub+0x35c>)
 80026b0:	08e4      	lsrs	r4, r4, #3
 80026b2:	4003      	ands	r3, r0
 80026b4:	0018      	movs	r0, r3
 80026b6:	0549      	lsls	r1, r1, #21
 80026b8:	075b      	lsls	r3, r3, #29
 80026ba:	0240      	lsls	r0, r0, #9
 80026bc:	4323      	orrs	r3, r4
 80026be:	0d4a      	lsrs	r2, r1, #21
 80026c0:	0b04      	lsrs	r4, r0, #12
 80026c2:	0512      	lsls	r2, r2, #20
 80026c4:	07ed      	lsls	r5, r5, #31
 80026c6:	4322      	orrs	r2, r4
 80026c8:	432a      	orrs	r2, r5
 80026ca:	0018      	movs	r0, r3
 80026cc:	0011      	movs	r1, r2
 80026ce:	bcf0      	pop	{r4, r5, r6, r7}
 80026d0:	46bb      	mov	fp, r7
 80026d2:	46b2      	mov	sl, r6
 80026d4:	46a9      	mov	r9, r5
 80026d6:	46a0      	mov	r8, r4
 80026d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026da:	4642      	mov	r2, r8
 80026dc:	1a12      	subs	r2, r2, r0
 80026de:	2a00      	cmp	r2, #0
 80026e0:	dd52      	ble.n	8002788 <__aeabi_dsub+0x20c>
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x16c>
 80026e6:	e09c      	b.n	8002822 <__aeabi_dsub+0x2a6>
 80026e8:	45a0      	cmp	r8, r4
 80026ea:	d100      	bne.n	80026ee <__aeabi_dsub+0x172>
 80026ec:	e0ca      	b.n	8002884 <__aeabi_dsub+0x308>
 80026ee:	2080      	movs	r0, #128	; 0x80
 80026f0:	0400      	lsls	r0, r0, #16
 80026f2:	4301      	orrs	r1, r0
 80026f4:	2a38      	cmp	r2, #56	; 0x38
 80026f6:	dd00      	ble.n	80026fa <__aeabi_dsub+0x17e>
 80026f8:	e149      	b.n	800298e <__aeabi_dsub+0x412>
 80026fa:	2a1f      	cmp	r2, #31
 80026fc:	dc00      	bgt.n	8002700 <__aeabi_dsub+0x184>
 80026fe:	e197      	b.n	8002a30 <__aeabi_dsub+0x4b4>
 8002700:	0010      	movs	r0, r2
 8002702:	000e      	movs	r6, r1
 8002704:	3820      	subs	r0, #32
 8002706:	40c6      	lsrs	r6, r0
 8002708:	2a20      	cmp	r2, #32
 800270a:	d004      	beq.n	8002716 <__aeabi_dsub+0x19a>
 800270c:	2040      	movs	r0, #64	; 0x40
 800270e:	1a82      	subs	r2, r0, r2
 8002710:	4091      	lsls	r1, r2
 8002712:	430f      	orrs	r7, r1
 8002714:	46b9      	mov	r9, r7
 8002716:	464c      	mov	r4, r9
 8002718:	1e62      	subs	r2, r4, #1
 800271a:	4194      	sbcs	r4, r2
 800271c:	4334      	orrs	r4, r6
 800271e:	e13a      	b.n	8002996 <__aeabi_dsub+0x41a>
 8002720:	000a      	movs	r2, r1
 8002722:	433a      	orrs	r2, r7
 8002724:	d028      	beq.n	8002778 <__aeabi_dsub+0x1fc>
 8002726:	46b3      	mov	fp, r6
 8002728:	42b5      	cmp	r5, r6
 800272a:	d02b      	beq.n	8002784 <__aeabi_dsub+0x208>
 800272c:	4a6b      	ldr	r2, [pc, #428]	; (80028dc <__aeabi_dsub+0x360>)
 800272e:	4442      	add	r2, r8
 8002730:	2a00      	cmp	r2, #0
 8002732:	d05d      	beq.n	80027f0 <__aeabi_dsub+0x274>
 8002734:	4642      	mov	r2, r8
 8002736:	4644      	mov	r4, r8
 8002738:	1a82      	subs	r2, r0, r2
 800273a:	2c00      	cmp	r4, #0
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x1c4>
 800273e:	e0f5      	b.n	800292c <__aeabi_dsub+0x3b0>
 8002740:	4665      	mov	r5, ip
 8002742:	431d      	orrs	r5, r3
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x1cc>
 8002746:	e19c      	b.n	8002a82 <__aeabi_dsub+0x506>
 8002748:	1e55      	subs	r5, r2, #1
 800274a:	2a01      	cmp	r2, #1
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x1d4>
 800274e:	e1fb      	b.n	8002b48 <__aeabi_dsub+0x5cc>
 8002750:	4c60      	ldr	r4, [pc, #384]	; (80028d4 <__aeabi_dsub+0x358>)
 8002752:	42a2      	cmp	r2, r4
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x1dc>
 8002756:	e1bd      	b.n	8002ad4 <__aeabi_dsub+0x558>
 8002758:	002a      	movs	r2, r5
 800275a:	e0f0      	b.n	800293e <__aeabi_dsub+0x3c2>
 800275c:	0008      	movs	r0, r1
 800275e:	4338      	orrs	r0, r7
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x1e8>
 8002762:	e0c3      	b.n	80028ec <__aeabi_dsub+0x370>
 8002764:	1e50      	subs	r0, r2, #1
 8002766:	2a01      	cmp	r2, #1
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x1f0>
 800276a:	e1a8      	b.n	8002abe <__aeabi_dsub+0x542>
 800276c:	4c59      	ldr	r4, [pc, #356]	; (80028d4 <__aeabi_dsub+0x358>)
 800276e:	42a2      	cmp	r2, r4
 8002770:	d100      	bne.n	8002774 <__aeabi_dsub+0x1f8>
 8002772:	e087      	b.n	8002884 <__aeabi_dsub+0x308>
 8002774:	0002      	movs	r2, r0
 8002776:	e736      	b.n	80025e6 <__aeabi_dsub+0x6a>
 8002778:	2201      	movs	r2, #1
 800277a:	4056      	eors	r6, r2
 800277c:	46b3      	mov	fp, r6
 800277e:	42b5      	cmp	r5, r6
 8002780:	d000      	beq.n	8002784 <__aeabi_dsub+0x208>
 8002782:	e721      	b.n	80025c8 <__aeabi_dsub+0x4c>
 8002784:	4a55      	ldr	r2, [pc, #340]	; (80028dc <__aeabi_dsub+0x360>)
 8002786:	4442      	add	r2, r8
 8002788:	2a00      	cmp	r2, #0
 800278a:	d100      	bne.n	800278e <__aeabi_dsub+0x212>
 800278c:	e0b5      	b.n	80028fa <__aeabi_dsub+0x37e>
 800278e:	4642      	mov	r2, r8
 8002790:	4644      	mov	r4, r8
 8002792:	1a82      	subs	r2, r0, r2
 8002794:	2c00      	cmp	r4, #0
 8002796:	d100      	bne.n	800279a <__aeabi_dsub+0x21e>
 8002798:	e138      	b.n	8002a0c <__aeabi_dsub+0x490>
 800279a:	4e4e      	ldr	r6, [pc, #312]	; (80028d4 <__aeabi_dsub+0x358>)
 800279c:	42b0      	cmp	r0, r6
 800279e:	d100      	bne.n	80027a2 <__aeabi_dsub+0x226>
 80027a0:	e1de      	b.n	8002b60 <__aeabi_dsub+0x5e4>
 80027a2:	2680      	movs	r6, #128	; 0x80
 80027a4:	4664      	mov	r4, ip
 80027a6:	0436      	lsls	r6, r6, #16
 80027a8:	4334      	orrs	r4, r6
 80027aa:	46a4      	mov	ip, r4
 80027ac:	2a38      	cmp	r2, #56	; 0x38
 80027ae:	dd00      	ble.n	80027b2 <__aeabi_dsub+0x236>
 80027b0:	e196      	b.n	8002ae0 <__aeabi_dsub+0x564>
 80027b2:	2a1f      	cmp	r2, #31
 80027b4:	dd00      	ble.n	80027b8 <__aeabi_dsub+0x23c>
 80027b6:	e224      	b.n	8002c02 <__aeabi_dsub+0x686>
 80027b8:	2620      	movs	r6, #32
 80027ba:	1ab4      	subs	r4, r6, r2
 80027bc:	46a2      	mov	sl, r4
 80027be:	4664      	mov	r4, ip
 80027c0:	4656      	mov	r6, sl
 80027c2:	40b4      	lsls	r4, r6
 80027c4:	46a1      	mov	r9, r4
 80027c6:	001c      	movs	r4, r3
 80027c8:	464e      	mov	r6, r9
 80027ca:	40d4      	lsrs	r4, r2
 80027cc:	4326      	orrs	r6, r4
 80027ce:	0034      	movs	r4, r6
 80027d0:	4656      	mov	r6, sl
 80027d2:	40b3      	lsls	r3, r6
 80027d4:	1e5e      	subs	r6, r3, #1
 80027d6:	41b3      	sbcs	r3, r6
 80027d8:	431c      	orrs	r4, r3
 80027da:	4663      	mov	r3, ip
 80027dc:	40d3      	lsrs	r3, r2
 80027de:	18c9      	adds	r1, r1, r3
 80027e0:	19e4      	adds	r4, r4, r7
 80027e2:	42bc      	cmp	r4, r7
 80027e4:	41bf      	sbcs	r7, r7
 80027e6:	427f      	negs	r7, r7
 80027e8:	46b9      	mov	r9, r7
 80027ea:	4680      	mov	r8, r0
 80027ec:	4489      	add	r9, r1
 80027ee:	e0d8      	b.n	80029a2 <__aeabi_dsub+0x426>
 80027f0:	4640      	mov	r0, r8
 80027f2:	4c3b      	ldr	r4, [pc, #236]	; (80028e0 <__aeabi_dsub+0x364>)
 80027f4:	3001      	adds	r0, #1
 80027f6:	4220      	tst	r0, r4
 80027f8:	d000      	beq.n	80027fc <__aeabi_dsub+0x280>
 80027fa:	e0b4      	b.n	8002966 <__aeabi_dsub+0x3ea>
 80027fc:	4640      	mov	r0, r8
 80027fe:	2800      	cmp	r0, #0
 8002800:	d000      	beq.n	8002804 <__aeabi_dsub+0x288>
 8002802:	e144      	b.n	8002a8e <__aeabi_dsub+0x512>
 8002804:	4660      	mov	r0, ip
 8002806:	4318      	orrs	r0, r3
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x290>
 800280a:	e190      	b.n	8002b2e <__aeabi_dsub+0x5b2>
 800280c:	0008      	movs	r0, r1
 800280e:	4338      	orrs	r0, r7
 8002810:	d000      	beq.n	8002814 <__aeabi_dsub+0x298>
 8002812:	e1aa      	b.n	8002b6a <__aeabi_dsub+0x5ee>
 8002814:	4661      	mov	r1, ip
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	0749      	lsls	r1, r1, #29
 800281a:	430b      	orrs	r3, r1
 800281c:	4661      	mov	r1, ip
 800281e:	08cc      	lsrs	r4, r1, #3
 8002820:	e027      	b.n	8002872 <__aeabi_dsub+0x2f6>
 8002822:	0008      	movs	r0, r1
 8002824:	4338      	orrs	r0, r7
 8002826:	d061      	beq.n	80028ec <__aeabi_dsub+0x370>
 8002828:	1e50      	subs	r0, r2, #1
 800282a:	2a01      	cmp	r2, #1
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x2b4>
 800282e:	e139      	b.n	8002aa4 <__aeabi_dsub+0x528>
 8002830:	42a2      	cmp	r2, r4
 8002832:	d027      	beq.n	8002884 <__aeabi_dsub+0x308>
 8002834:	0002      	movs	r2, r0
 8002836:	e75d      	b.n	80026f4 <__aeabi_dsub+0x178>
 8002838:	0002      	movs	r2, r0
 800283a:	391f      	subs	r1, #31
 800283c:	40ca      	lsrs	r2, r1
 800283e:	0011      	movs	r1, r2
 8002840:	2b20      	cmp	r3, #32
 8002842:	d003      	beq.n	800284c <__aeabi_dsub+0x2d0>
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	4098      	lsls	r0, r3
 800284a:	4304      	orrs	r4, r0
 800284c:	1e63      	subs	r3, r4, #1
 800284e:	419c      	sbcs	r4, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4699      	mov	r9, r3
 8002854:	4698      	mov	r8, r3
 8002856:	430c      	orrs	r4, r1
 8002858:	0763      	lsls	r3, r4, #29
 800285a:	d000      	beq.n	800285e <__aeabi_dsub+0x2e2>
 800285c:	e712      	b.n	8002684 <__aeabi_dsub+0x108>
 800285e:	464b      	mov	r3, r9
 8002860:	464a      	mov	r2, r9
 8002862:	08e4      	lsrs	r4, r4, #3
 8002864:	075b      	lsls	r3, r3, #29
 8002866:	4323      	orrs	r3, r4
 8002868:	08d4      	lsrs	r4, r2, #3
 800286a:	4642      	mov	r2, r8
 800286c:	4919      	ldr	r1, [pc, #100]	; (80028d4 <__aeabi_dsub+0x358>)
 800286e:	428a      	cmp	r2, r1
 8002870:	d00e      	beq.n	8002890 <__aeabi_dsub+0x314>
 8002872:	0324      	lsls	r4, r4, #12
 8002874:	0552      	lsls	r2, r2, #21
 8002876:	0b24      	lsrs	r4, r4, #12
 8002878:	0d52      	lsrs	r2, r2, #21
 800287a:	e722      	b.n	80026c2 <__aeabi_dsub+0x146>
 800287c:	000a      	movs	r2, r1
 800287e:	2400      	movs	r4, #0
 8002880:	2300      	movs	r3, #0
 8002882:	e71e      	b.n	80026c2 <__aeabi_dsub+0x146>
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	4662      	mov	r2, ip
 8002888:	0752      	lsls	r2, r2, #29
 800288a:	4313      	orrs	r3, r2
 800288c:	4662      	mov	r2, ip
 800288e:	08d4      	lsrs	r4, r2, #3
 8002890:	001a      	movs	r2, r3
 8002892:	4322      	orrs	r2, r4
 8002894:	d100      	bne.n	8002898 <__aeabi_dsub+0x31c>
 8002896:	e1fc      	b.n	8002c92 <__aeabi_dsub+0x716>
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	0312      	lsls	r2, r2, #12
 800289c:	4314      	orrs	r4, r2
 800289e:	0324      	lsls	r4, r4, #12
 80028a0:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <__aeabi_dsub+0x358>)
 80028a2:	0b24      	lsrs	r4, r4, #12
 80028a4:	e70d      	b.n	80026c2 <__aeabi_dsub+0x146>
 80028a6:	0020      	movs	r0, r4
 80028a8:	f000 fb74 	bl	8002f94 <__clzsi2>
 80028ac:	0001      	movs	r1, r0
 80028ae:	3118      	adds	r1, #24
 80028b0:	291f      	cmp	r1, #31
 80028b2:	dc00      	bgt.n	80028b6 <__aeabi_dsub+0x33a>
 80028b4:	e6c4      	b.n	8002640 <__aeabi_dsub+0xc4>
 80028b6:	3808      	subs	r0, #8
 80028b8:	4084      	lsls	r4, r0
 80028ba:	4643      	mov	r3, r8
 80028bc:	0020      	movs	r0, r4
 80028be:	2400      	movs	r4, #0
 80028c0:	4588      	cmp	r8, r1
 80028c2:	dc00      	bgt.n	80028c6 <__aeabi_dsub+0x34a>
 80028c4:	e6c8      	b.n	8002658 <__aeabi_dsub+0xdc>
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__aeabi_dsub+0x35c>)
 80028c8:	1a5b      	subs	r3, r3, r1
 80028ca:	4010      	ands	r0, r2
 80028cc:	4698      	mov	r8, r3
 80028ce:	4681      	mov	r9, r0
 80028d0:	e6d6      	b.n	8002680 <__aeabi_dsub+0x104>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	000007ff 	.word	0x000007ff
 80028d8:	ff7fffff 	.word	0xff7fffff
 80028dc:	fffff801 	.word	0xfffff801
 80028e0:	000007fe 	.word	0x000007fe
 80028e4:	430f      	orrs	r7, r1
 80028e6:	1e7a      	subs	r2, r7, #1
 80028e8:	4197      	sbcs	r7, r2
 80028ea:	e691      	b.n	8002610 <__aeabi_dsub+0x94>
 80028ec:	4661      	mov	r1, ip
 80028ee:	08db      	lsrs	r3, r3, #3
 80028f0:	0749      	lsls	r1, r1, #29
 80028f2:	430b      	orrs	r3, r1
 80028f4:	4661      	mov	r1, ip
 80028f6:	08cc      	lsrs	r4, r1, #3
 80028f8:	e7b8      	b.n	800286c <__aeabi_dsub+0x2f0>
 80028fa:	4640      	mov	r0, r8
 80028fc:	4cd3      	ldr	r4, [pc, #844]	; (8002c4c <__aeabi_dsub+0x6d0>)
 80028fe:	3001      	adds	r0, #1
 8002900:	4220      	tst	r0, r4
 8002902:	d000      	beq.n	8002906 <__aeabi_dsub+0x38a>
 8002904:	e0a2      	b.n	8002a4c <__aeabi_dsub+0x4d0>
 8002906:	4640      	mov	r0, r8
 8002908:	2800      	cmp	r0, #0
 800290a:	d000      	beq.n	800290e <__aeabi_dsub+0x392>
 800290c:	e101      	b.n	8002b12 <__aeabi_dsub+0x596>
 800290e:	4660      	mov	r0, ip
 8002910:	4318      	orrs	r0, r3
 8002912:	d100      	bne.n	8002916 <__aeabi_dsub+0x39a>
 8002914:	e15e      	b.n	8002bd4 <__aeabi_dsub+0x658>
 8002916:	0008      	movs	r0, r1
 8002918:	4338      	orrs	r0, r7
 800291a:	d000      	beq.n	800291e <__aeabi_dsub+0x3a2>
 800291c:	e15f      	b.n	8002bde <__aeabi_dsub+0x662>
 800291e:	4661      	mov	r1, ip
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	0749      	lsls	r1, r1, #29
 8002924:	430b      	orrs	r3, r1
 8002926:	4661      	mov	r1, ip
 8002928:	08cc      	lsrs	r4, r1, #3
 800292a:	e7a2      	b.n	8002872 <__aeabi_dsub+0x2f6>
 800292c:	4dc8      	ldr	r5, [pc, #800]	; (8002c50 <__aeabi_dsub+0x6d4>)
 800292e:	42a8      	cmp	r0, r5
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x3b8>
 8002932:	e0cf      	b.n	8002ad4 <__aeabi_dsub+0x558>
 8002934:	2580      	movs	r5, #128	; 0x80
 8002936:	4664      	mov	r4, ip
 8002938:	042d      	lsls	r5, r5, #16
 800293a:	432c      	orrs	r4, r5
 800293c:	46a4      	mov	ip, r4
 800293e:	2a38      	cmp	r2, #56	; 0x38
 8002940:	dc56      	bgt.n	80029f0 <__aeabi_dsub+0x474>
 8002942:	2a1f      	cmp	r2, #31
 8002944:	dd00      	ble.n	8002948 <__aeabi_dsub+0x3cc>
 8002946:	e0d1      	b.n	8002aec <__aeabi_dsub+0x570>
 8002948:	2520      	movs	r5, #32
 800294a:	001e      	movs	r6, r3
 800294c:	1aad      	subs	r5, r5, r2
 800294e:	4664      	mov	r4, ip
 8002950:	40ab      	lsls	r3, r5
 8002952:	40ac      	lsls	r4, r5
 8002954:	40d6      	lsrs	r6, r2
 8002956:	1e5d      	subs	r5, r3, #1
 8002958:	41ab      	sbcs	r3, r5
 800295a:	4334      	orrs	r4, r6
 800295c:	4323      	orrs	r3, r4
 800295e:	4664      	mov	r4, ip
 8002960:	40d4      	lsrs	r4, r2
 8002962:	1b09      	subs	r1, r1, r4
 8002964:	e049      	b.n	80029fa <__aeabi_dsub+0x47e>
 8002966:	4660      	mov	r0, ip
 8002968:	1bdc      	subs	r4, r3, r7
 800296a:	1a46      	subs	r6, r0, r1
 800296c:	42a3      	cmp	r3, r4
 800296e:	4180      	sbcs	r0, r0
 8002970:	4240      	negs	r0, r0
 8002972:	4681      	mov	r9, r0
 8002974:	0030      	movs	r0, r6
 8002976:	464e      	mov	r6, r9
 8002978:	1b80      	subs	r0, r0, r6
 800297a:	4681      	mov	r9, r0
 800297c:	0200      	lsls	r0, r0, #8
 800297e:	d476      	bmi.n	8002a6e <__aeabi_dsub+0x4f2>
 8002980:	464b      	mov	r3, r9
 8002982:	4323      	orrs	r3, r4
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x40c>
 8002986:	e652      	b.n	800262e <__aeabi_dsub+0xb2>
 8002988:	2400      	movs	r4, #0
 800298a:	2500      	movs	r5, #0
 800298c:	e771      	b.n	8002872 <__aeabi_dsub+0x2f6>
 800298e:	4339      	orrs	r1, r7
 8002990:	000c      	movs	r4, r1
 8002992:	1e62      	subs	r2, r4, #1
 8002994:	4194      	sbcs	r4, r2
 8002996:	18e4      	adds	r4, r4, r3
 8002998:	429c      	cmp	r4, r3
 800299a:	419b      	sbcs	r3, r3
 800299c:	425b      	negs	r3, r3
 800299e:	4463      	add	r3, ip
 80029a0:	4699      	mov	r9, r3
 80029a2:	464b      	mov	r3, r9
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	d400      	bmi.n	80029aa <__aeabi_dsub+0x42e>
 80029a8:	e756      	b.n	8002858 <__aeabi_dsub+0x2dc>
 80029aa:	2301      	movs	r3, #1
 80029ac:	469c      	mov	ip, r3
 80029ae:	4ba8      	ldr	r3, [pc, #672]	; (8002c50 <__aeabi_dsub+0x6d4>)
 80029b0:	44e0      	add	r8, ip
 80029b2:	4598      	cmp	r8, r3
 80029b4:	d038      	beq.n	8002a28 <__aeabi_dsub+0x4ac>
 80029b6:	464b      	mov	r3, r9
 80029b8:	48a6      	ldr	r0, [pc, #664]	; (8002c54 <__aeabi_dsub+0x6d8>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	4003      	ands	r3, r0
 80029be:	0018      	movs	r0, r3
 80029c0:	0863      	lsrs	r3, r4, #1
 80029c2:	4014      	ands	r4, r2
 80029c4:	431c      	orrs	r4, r3
 80029c6:	07c3      	lsls	r3, r0, #31
 80029c8:	431c      	orrs	r4, r3
 80029ca:	0843      	lsrs	r3, r0, #1
 80029cc:	4699      	mov	r9, r3
 80029ce:	e657      	b.n	8002680 <__aeabi_dsub+0x104>
 80029d0:	0010      	movs	r0, r2
 80029d2:	000e      	movs	r6, r1
 80029d4:	3820      	subs	r0, #32
 80029d6:	40c6      	lsrs	r6, r0
 80029d8:	2a20      	cmp	r2, #32
 80029da:	d004      	beq.n	80029e6 <__aeabi_dsub+0x46a>
 80029dc:	2040      	movs	r0, #64	; 0x40
 80029de:	1a82      	subs	r2, r0, r2
 80029e0:	4091      	lsls	r1, r2
 80029e2:	430f      	orrs	r7, r1
 80029e4:	46b9      	mov	r9, r7
 80029e6:	464f      	mov	r7, r9
 80029e8:	1e7a      	subs	r2, r7, #1
 80029ea:	4197      	sbcs	r7, r2
 80029ec:	4337      	orrs	r7, r6
 80029ee:	e60f      	b.n	8002610 <__aeabi_dsub+0x94>
 80029f0:	4662      	mov	r2, ip
 80029f2:	431a      	orrs	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	4193      	sbcs	r3, r2
 80029fa:	1afc      	subs	r4, r7, r3
 80029fc:	42a7      	cmp	r7, r4
 80029fe:	41bf      	sbcs	r7, r7
 8002a00:	427f      	negs	r7, r7
 8002a02:	1bcb      	subs	r3, r1, r7
 8002a04:	4699      	mov	r9, r3
 8002a06:	465d      	mov	r5, fp
 8002a08:	4680      	mov	r8, r0
 8002a0a:	e608      	b.n	800261e <__aeabi_dsub+0xa2>
 8002a0c:	4666      	mov	r6, ip
 8002a0e:	431e      	orrs	r6, r3
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x498>
 8002a12:	e0be      	b.n	8002b92 <__aeabi_dsub+0x616>
 8002a14:	1e56      	subs	r6, r2, #1
 8002a16:	2a01      	cmp	r2, #1
 8002a18:	d100      	bne.n	8002a1c <__aeabi_dsub+0x4a0>
 8002a1a:	e109      	b.n	8002c30 <__aeabi_dsub+0x6b4>
 8002a1c:	4c8c      	ldr	r4, [pc, #560]	; (8002c50 <__aeabi_dsub+0x6d4>)
 8002a1e:	42a2      	cmp	r2, r4
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x4a8>
 8002a22:	e119      	b.n	8002c58 <__aeabi_dsub+0x6dc>
 8002a24:	0032      	movs	r2, r6
 8002a26:	e6c1      	b.n	80027ac <__aeabi_dsub+0x230>
 8002a28:	4642      	mov	r2, r8
 8002a2a:	2400      	movs	r4, #0
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e648      	b.n	80026c2 <__aeabi_dsub+0x146>
 8002a30:	2020      	movs	r0, #32
 8002a32:	000c      	movs	r4, r1
 8002a34:	1a80      	subs	r0, r0, r2
 8002a36:	003e      	movs	r6, r7
 8002a38:	4087      	lsls	r7, r0
 8002a3a:	4084      	lsls	r4, r0
 8002a3c:	40d6      	lsrs	r6, r2
 8002a3e:	1e78      	subs	r0, r7, #1
 8002a40:	4187      	sbcs	r7, r0
 8002a42:	40d1      	lsrs	r1, r2
 8002a44:	4334      	orrs	r4, r6
 8002a46:	433c      	orrs	r4, r7
 8002a48:	448c      	add	ip, r1
 8002a4a:	e7a4      	b.n	8002996 <__aeabi_dsub+0x41a>
 8002a4c:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <__aeabi_dsub+0x6d4>)
 8002a4e:	4290      	cmp	r0, r2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x4d8>
 8002a52:	e0e9      	b.n	8002c28 <__aeabi_dsub+0x6ac>
 8002a54:	19df      	adds	r7, r3, r7
 8002a56:	429f      	cmp	r7, r3
 8002a58:	419b      	sbcs	r3, r3
 8002a5a:	4461      	add	r1, ip
 8002a5c:	425b      	negs	r3, r3
 8002a5e:	18c9      	adds	r1, r1, r3
 8002a60:	07cc      	lsls	r4, r1, #31
 8002a62:	087f      	lsrs	r7, r7, #1
 8002a64:	084b      	lsrs	r3, r1, #1
 8002a66:	4699      	mov	r9, r3
 8002a68:	4680      	mov	r8, r0
 8002a6a:	433c      	orrs	r4, r7
 8002a6c:	e6f4      	b.n	8002858 <__aeabi_dsub+0x2dc>
 8002a6e:	1afc      	subs	r4, r7, r3
 8002a70:	42a7      	cmp	r7, r4
 8002a72:	41bf      	sbcs	r7, r7
 8002a74:	4663      	mov	r3, ip
 8002a76:	427f      	negs	r7, r7
 8002a78:	1ac9      	subs	r1, r1, r3
 8002a7a:	1bcb      	subs	r3, r1, r7
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	465d      	mov	r5, fp
 8002a80:	e5d5      	b.n	800262e <__aeabi_dsub+0xb2>
 8002a82:	08ff      	lsrs	r7, r7, #3
 8002a84:	074b      	lsls	r3, r1, #29
 8002a86:	465d      	mov	r5, fp
 8002a88:	433b      	orrs	r3, r7
 8002a8a:	08cc      	lsrs	r4, r1, #3
 8002a8c:	e6ee      	b.n	800286c <__aeabi_dsub+0x2f0>
 8002a8e:	4662      	mov	r2, ip
 8002a90:	431a      	orrs	r2, r3
 8002a92:	d000      	beq.n	8002a96 <__aeabi_dsub+0x51a>
 8002a94:	e082      	b.n	8002b9c <__aeabi_dsub+0x620>
 8002a96:	000b      	movs	r3, r1
 8002a98:	433b      	orrs	r3, r7
 8002a9a:	d11b      	bne.n	8002ad4 <__aeabi_dsub+0x558>
 8002a9c:	2480      	movs	r4, #128	; 0x80
 8002a9e:	2500      	movs	r5, #0
 8002aa0:	0324      	lsls	r4, r4, #12
 8002aa2:	e6f9      	b.n	8002898 <__aeabi_dsub+0x31c>
 8002aa4:	19dc      	adds	r4, r3, r7
 8002aa6:	429c      	cmp	r4, r3
 8002aa8:	419b      	sbcs	r3, r3
 8002aaa:	4461      	add	r1, ip
 8002aac:	4689      	mov	r9, r1
 8002aae:	425b      	negs	r3, r3
 8002ab0:	4499      	add	r9, r3
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	d444      	bmi.n	8002b42 <__aeabi_dsub+0x5c6>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	4698      	mov	r8, r3
 8002abc:	e6cc      	b.n	8002858 <__aeabi_dsub+0x2dc>
 8002abe:	1bdc      	subs	r4, r3, r7
 8002ac0:	4662      	mov	r2, ip
 8002ac2:	42a3      	cmp	r3, r4
 8002ac4:	419b      	sbcs	r3, r3
 8002ac6:	1a51      	subs	r1, r2, r1
 8002ac8:	425b      	negs	r3, r3
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	4699      	mov	r9, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4698      	mov	r8, r3
 8002ad2:	e5a4      	b.n	800261e <__aeabi_dsub+0xa2>
 8002ad4:	08ff      	lsrs	r7, r7, #3
 8002ad6:	074b      	lsls	r3, r1, #29
 8002ad8:	465d      	mov	r5, fp
 8002ada:	433b      	orrs	r3, r7
 8002adc:	08cc      	lsrs	r4, r1, #3
 8002ade:	e6d7      	b.n	8002890 <__aeabi_dsub+0x314>
 8002ae0:	4662      	mov	r2, ip
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	0014      	movs	r4, r2
 8002ae6:	1e63      	subs	r3, r4, #1
 8002ae8:	419c      	sbcs	r4, r3
 8002aea:	e679      	b.n	80027e0 <__aeabi_dsub+0x264>
 8002aec:	0015      	movs	r5, r2
 8002aee:	4664      	mov	r4, ip
 8002af0:	3d20      	subs	r5, #32
 8002af2:	40ec      	lsrs	r4, r5
 8002af4:	46a0      	mov	r8, r4
 8002af6:	2a20      	cmp	r2, #32
 8002af8:	d005      	beq.n	8002b06 <__aeabi_dsub+0x58a>
 8002afa:	2540      	movs	r5, #64	; 0x40
 8002afc:	4664      	mov	r4, ip
 8002afe:	1aaa      	subs	r2, r5, r2
 8002b00:	4094      	lsls	r4, r2
 8002b02:	4323      	orrs	r3, r4
 8002b04:	469a      	mov	sl, r3
 8002b06:	4654      	mov	r4, sl
 8002b08:	1e63      	subs	r3, r4, #1
 8002b0a:	419c      	sbcs	r4, r3
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	e773      	b.n	80029fa <__aeabi_dsub+0x47e>
 8002b12:	4662      	mov	r2, ip
 8002b14:	431a      	orrs	r2, r3
 8002b16:	d023      	beq.n	8002b60 <__aeabi_dsub+0x5e4>
 8002b18:	000a      	movs	r2, r1
 8002b1a:	433a      	orrs	r2, r7
 8002b1c:	d000      	beq.n	8002b20 <__aeabi_dsub+0x5a4>
 8002b1e:	e0a0      	b.n	8002c62 <__aeabi_dsub+0x6e6>
 8002b20:	4662      	mov	r2, ip
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	0752      	lsls	r2, r2, #29
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4662      	mov	r2, ip
 8002b2a:	08d4      	lsrs	r4, r2, #3
 8002b2c:	e6b0      	b.n	8002890 <__aeabi_dsub+0x314>
 8002b2e:	000b      	movs	r3, r1
 8002b30:	433b      	orrs	r3, r7
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0x5ba>
 8002b34:	e728      	b.n	8002988 <__aeabi_dsub+0x40c>
 8002b36:	08ff      	lsrs	r7, r7, #3
 8002b38:	074b      	lsls	r3, r1, #29
 8002b3a:	465d      	mov	r5, fp
 8002b3c:	433b      	orrs	r3, r7
 8002b3e:	08cc      	lsrs	r4, r1, #3
 8002b40:	e697      	b.n	8002872 <__aeabi_dsub+0x2f6>
 8002b42:	2302      	movs	r3, #2
 8002b44:	4698      	mov	r8, r3
 8002b46:	e736      	b.n	80029b6 <__aeabi_dsub+0x43a>
 8002b48:	1afc      	subs	r4, r7, r3
 8002b4a:	42a7      	cmp	r7, r4
 8002b4c:	41bf      	sbcs	r7, r7
 8002b4e:	4663      	mov	r3, ip
 8002b50:	427f      	negs	r7, r7
 8002b52:	1ac9      	subs	r1, r1, r3
 8002b54:	1bcb      	subs	r3, r1, r7
 8002b56:	4699      	mov	r9, r3
 8002b58:	2301      	movs	r3, #1
 8002b5a:	465d      	mov	r5, fp
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	e55e      	b.n	800261e <__aeabi_dsub+0xa2>
 8002b60:	074b      	lsls	r3, r1, #29
 8002b62:	08ff      	lsrs	r7, r7, #3
 8002b64:	433b      	orrs	r3, r7
 8002b66:	08cc      	lsrs	r4, r1, #3
 8002b68:	e692      	b.n	8002890 <__aeabi_dsub+0x314>
 8002b6a:	1bdc      	subs	r4, r3, r7
 8002b6c:	4660      	mov	r0, ip
 8002b6e:	42a3      	cmp	r3, r4
 8002b70:	41b6      	sbcs	r6, r6
 8002b72:	1a40      	subs	r0, r0, r1
 8002b74:	4276      	negs	r6, r6
 8002b76:	1b80      	subs	r0, r0, r6
 8002b78:	4681      	mov	r9, r0
 8002b7a:	0200      	lsls	r0, r0, #8
 8002b7c:	d560      	bpl.n	8002c40 <__aeabi_dsub+0x6c4>
 8002b7e:	1afc      	subs	r4, r7, r3
 8002b80:	42a7      	cmp	r7, r4
 8002b82:	41bf      	sbcs	r7, r7
 8002b84:	4663      	mov	r3, ip
 8002b86:	427f      	negs	r7, r7
 8002b88:	1ac9      	subs	r1, r1, r3
 8002b8a:	1bcb      	subs	r3, r1, r7
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	465d      	mov	r5, fp
 8002b90:	e576      	b.n	8002680 <__aeabi_dsub+0x104>
 8002b92:	08ff      	lsrs	r7, r7, #3
 8002b94:	074b      	lsls	r3, r1, #29
 8002b96:	433b      	orrs	r3, r7
 8002b98:	08cc      	lsrs	r4, r1, #3
 8002b9a:	e667      	b.n	800286c <__aeabi_dsub+0x2f0>
 8002b9c:	000a      	movs	r2, r1
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	433a      	orrs	r2, r7
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x62a>
 8002ba4:	e66f      	b.n	8002886 <__aeabi_dsub+0x30a>
 8002ba6:	4662      	mov	r2, ip
 8002ba8:	0752      	lsls	r2, r2, #29
 8002baa:	4313      	orrs	r3, r2
 8002bac:	4662      	mov	r2, ip
 8002bae:	08d4      	lsrs	r4, r2, #3
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	0312      	lsls	r2, r2, #12
 8002bb4:	4214      	tst	r4, r2
 8002bb6:	d007      	beq.n	8002bc8 <__aeabi_dsub+0x64c>
 8002bb8:	08c8      	lsrs	r0, r1, #3
 8002bba:	4210      	tst	r0, r2
 8002bbc:	d104      	bne.n	8002bc8 <__aeabi_dsub+0x64c>
 8002bbe:	465d      	mov	r5, fp
 8002bc0:	0004      	movs	r4, r0
 8002bc2:	08fb      	lsrs	r3, r7, #3
 8002bc4:	0749      	lsls	r1, r1, #29
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	0f5a      	lsrs	r2, r3, #29
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	0752      	lsls	r2, r2, #29
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	e65d      	b.n	8002890 <__aeabi_dsub+0x314>
 8002bd4:	074b      	lsls	r3, r1, #29
 8002bd6:	08ff      	lsrs	r7, r7, #3
 8002bd8:	433b      	orrs	r3, r7
 8002bda:	08cc      	lsrs	r4, r1, #3
 8002bdc:	e649      	b.n	8002872 <__aeabi_dsub+0x2f6>
 8002bde:	19dc      	adds	r4, r3, r7
 8002be0:	429c      	cmp	r4, r3
 8002be2:	419b      	sbcs	r3, r3
 8002be4:	4461      	add	r1, ip
 8002be6:	4689      	mov	r9, r1
 8002be8:	425b      	negs	r3, r3
 8002bea:	4499      	add	r9, r3
 8002bec:	464b      	mov	r3, r9
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	d400      	bmi.n	8002bf4 <__aeabi_dsub+0x678>
 8002bf2:	e631      	b.n	8002858 <__aeabi_dsub+0x2dc>
 8002bf4:	464a      	mov	r2, r9
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <__aeabi_dsub+0x6d8>)
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4691      	mov	r9, r2
 8002bfe:	4698      	mov	r8, r3
 8002c00:	e62a      	b.n	8002858 <__aeabi_dsub+0x2dc>
 8002c02:	0016      	movs	r6, r2
 8002c04:	4664      	mov	r4, ip
 8002c06:	3e20      	subs	r6, #32
 8002c08:	40f4      	lsrs	r4, r6
 8002c0a:	46a0      	mov	r8, r4
 8002c0c:	2a20      	cmp	r2, #32
 8002c0e:	d005      	beq.n	8002c1c <__aeabi_dsub+0x6a0>
 8002c10:	2640      	movs	r6, #64	; 0x40
 8002c12:	4664      	mov	r4, ip
 8002c14:	1ab2      	subs	r2, r6, r2
 8002c16:	4094      	lsls	r4, r2
 8002c18:	4323      	orrs	r3, r4
 8002c1a:	469a      	mov	sl, r3
 8002c1c:	4654      	mov	r4, sl
 8002c1e:	1e63      	subs	r3, r4, #1
 8002c20:	419c      	sbcs	r4, r3
 8002c22:	4643      	mov	r3, r8
 8002c24:	431c      	orrs	r4, r3
 8002c26:	e5db      	b.n	80027e0 <__aeabi_dsub+0x264>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	2400      	movs	r4, #0
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e548      	b.n	80026c2 <__aeabi_dsub+0x146>
 8002c30:	19dc      	adds	r4, r3, r7
 8002c32:	42bc      	cmp	r4, r7
 8002c34:	41bf      	sbcs	r7, r7
 8002c36:	4461      	add	r1, ip
 8002c38:	4689      	mov	r9, r1
 8002c3a:	427f      	negs	r7, r7
 8002c3c:	44b9      	add	r9, r7
 8002c3e:	e738      	b.n	8002ab2 <__aeabi_dsub+0x536>
 8002c40:	464b      	mov	r3, r9
 8002c42:	4323      	orrs	r3, r4
 8002c44:	d100      	bne.n	8002c48 <__aeabi_dsub+0x6cc>
 8002c46:	e69f      	b.n	8002988 <__aeabi_dsub+0x40c>
 8002c48:	e606      	b.n	8002858 <__aeabi_dsub+0x2dc>
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	000007fe 	.word	0x000007fe
 8002c50:	000007ff 	.word	0x000007ff
 8002c54:	ff7fffff 	.word	0xff7fffff
 8002c58:	08ff      	lsrs	r7, r7, #3
 8002c5a:	074b      	lsls	r3, r1, #29
 8002c5c:	433b      	orrs	r3, r7
 8002c5e:	08cc      	lsrs	r4, r1, #3
 8002c60:	e616      	b.n	8002890 <__aeabi_dsub+0x314>
 8002c62:	4662      	mov	r2, ip
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	0752      	lsls	r2, r2, #29
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4662      	mov	r2, ip
 8002c6c:	08d4      	lsrs	r4, r2, #3
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	0312      	lsls	r2, r2, #12
 8002c72:	4214      	tst	r4, r2
 8002c74:	d007      	beq.n	8002c86 <__aeabi_dsub+0x70a>
 8002c76:	08c8      	lsrs	r0, r1, #3
 8002c78:	4210      	tst	r0, r2
 8002c7a:	d104      	bne.n	8002c86 <__aeabi_dsub+0x70a>
 8002c7c:	465d      	mov	r5, fp
 8002c7e:	0004      	movs	r4, r0
 8002c80:	08fb      	lsrs	r3, r7, #3
 8002c82:	0749      	lsls	r1, r1, #29
 8002c84:	430b      	orrs	r3, r1
 8002c86:	0f5a      	lsrs	r2, r3, #29
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	0752      	lsls	r2, r2, #29
 8002c8c:	08db      	lsrs	r3, r3, #3
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	e5fe      	b.n	8002890 <__aeabi_dsub+0x314>
 8002c92:	2300      	movs	r3, #0
 8002c94:	4a01      	ldr	r2, [pc, #4]	; (8002c9c <__aeabi_dsub+0x720>)
 8002c96:	001c      	movs	r4, r3
 8002c98:	e513      	b.n	80026c2 <__aeabi_dsub+0x146>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	000007ff 	.word	0x000007ff

08002ca0 <__aeabi_dcmpun>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	0005      	movs	r5, r0
 8002ca4:	480c      	ldr	r0, [pc, #48]	; (8002cd8 <__aeabi_dcmpun+0x38>)
 8002ca6:	031c      	lsls	r4, r3, #12
 8002ca8:	0016      	movs	r6, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	030a      	lsls	r2, r1, #12
 8002cae:	0049      	lsls	r1, r1, #1
 8002cb0:	0b12      	lsrs	r2, r2, #12
 8002cb2:	0d49      	lsrs	r1, r1, #21
 8002cb4:	0b24      	lsrs	r4, r4, #12
 8002cb6:	0d5b      	lsrs	r3, r3, #21
 8002cb8:	4281      	cmp	r1, r0
 8002cba:	d008      	beq.n	8002cce <__aeabi_dcmpun+0x2e>
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <__aeabi_dcmpun+0x38>)
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <__aeabi_dcmpun+0x2c>
 8002cc4:	0020      	movs	r0, r4
 8002cc6:	4330      	orrs	r0, r6
 8002cc8:	1e43      	subs	r3, r0, #1
 8002cca:	4198      	sbcs	r0, r3
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
 8002cce:	2001      	movs	r0, #1
 8002cd0:	432a      	orrs	r2, r5
 8002cd2:	d1fb      	bne.n	8002ccc <__aeabi_dcmpun+0x2c>
 8002cd4:	e7f2      	b.n	8002cbc <__aeabi_dcmpun+0x1c>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	000007ff 	.word	0x000007ff

08002cdc <__aeabi_d2iz>:
 8002cdc:	000a      	movs	r2, r1
 8002cde:	b530      	push	{r4, r5, lr}
 8002ce0:	4c13      	ldr	r4, [pc, #76]	; (8002d30 <__aeabi_d2iz+0x54>)
 8002ce2:	0053      	lsls	r3, r2, #1
 8002ce4:	0309      	lsls	r1, r1, #12
 8002ce6:	0005      	movs	r5, r0
 8002ce8:	0b09      	lsrs	r1, r1, #12
 8002cea:	2000      	movs	r0, #0
 8002cec:	0d5b      	lsrs	r3, r3, #21
 8002cee:	0fd2      	lsrs	r2, r2, #31
 8002cf0:	42a3      	cmp	r3, r4
 8002cf2:	dd04      	ble.n	8002cfe <__aeabi_d2iz+0x22>
 8002cf4:	480f      	ldr	r0, [pc, #60]	; (8002d34 <__aeabi_d2iz+0x58>)
 8002cf6:	4283      	cmp	r3, r0
 8002cf8:	dd02      	ble.n	8002d00 <__aeabi_d2iz+0x24>
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <__aeabi_d2iz+0x5c>)
 8002cfc:	18d0      	adds	r0, r2, r3
 8002cfe:	bd30      	pop	{r4, r5, pc}
 8002d00:	2080      	movs	r0, #128	; 0x80
 8002d02:	0340      	lsls	r0, r0, #13
 8002d04:	4301      	orrs	r1, r0
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <__aeabi_d2iz+0x60>)
 8002d08:	1ac0      	subs	r0, r0, r3
 8002d0a:	281f      	cmp	r0, #31
 8002d0c:	dd08      	ble.n	8002d20 <__aeabi_d2iz+0x44>
 8002d0e:	480c      	ldr	r0, [pc, #48]	; (8002d40 <__aeabi_d2iz+0x64>)
 8002d10:	1ac3      	subs	r3, r0, r3
 8002d12:	40d9      	lsrs	r1, r3
 8002d14:	000b      	movs	r3, r1
 8002d16:	4258      	negs	r0, r3
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d1f0      	bne.n	8002cfe <__aeabi_d2iz+0x22>
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	e7ee      	b.n	8002cfe <__aeabi_d2iz+0x22>
 8002d20:	4c08      	ldr	r4, [pc, #32]	; (8002d44 <__aeabi_d2iz+0x68>)
 8002d22:	40c5      	lsrs	r5, r0
 8002d24:	46a4      	mov	ip, r4
 8002d26:	4463      	add	r3, ip
 8002d28:	4099      	lsls	r1, r3
 8002d2a:	000b      	movs	r3, r1
 8002d2c:	432b      	orrs	r3, r5
 8002d2e:	e7f2      	b.n	8002d16 <__aeabi_d2iz+0x3a>
 8002d30:	000003fe 	.word	0x000003fe
 8002d34:	0000041d 	.word	0x0000041d
 8002d38:	7fffffff 	.word	0x7fffffff
 8002d3c:	00000433 	.word	0x00000433
 8002d40:	00000413 	.word	0x00000413
 8002d44:	fffffbed 	.word	0xfffffbed

08002d48 <__aeabi_i2d>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d016      	beq.n	8002d7c <__aeabi_i2d+0x34>
 8002d4e:	17c3      	asrs	r3, r0, #31
 8002d50:	18c5      	adds	r5, r0, r3
 8002d52:	405d      	eors	r5, r3
 8002d54:	0fc4      	lsrs	r4, r0, #31
 8002d56:	0028      	movs	r0, r5
 8002d58:	f000 f91c 	bl	8002f94 <__clzsi2>
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <__aeabi_i2d+0x5c>)
 8002d5e:	1a12      	subs	r2, r2, r0
 8002d60:	280a      	cmp	r0, #10
 8002d62:	dc16      	bgt.n	8002d92 <__aeabi_i2d+0x4a>
 8002d64:	0003      	movs	r3, r0
 8002d66:	002e      	movs	r6, r5
 8002d68:	3315      	adds	r3, #21
 8002d6a:	409e      	lsls	r6, r3
 8002d6c:	230b      	movs	r3, #11
 8002d6e:	1a18      	subs	r0, r3, r0
 8002d70:	40c5      	lsrs	r5, r0
 8002d72:	0552      	lsls	r2, r2, #21
 8002d74:	032d      	lsls	r5, r5, #12
 8002d76:	0b2d      	lsrs	r5, r5, #12
 8002d78:	0d53      	lsrs	r3, r2, #21
 8002d7a:	e003      	b.n	8002d84 <__aeabi_i2d+0x3c>
 8002d7c:	2400      	movs	r4, #0
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2500      	movs	r5, #0
 8002d82:	2600      	movs	r6, #0
 8002d84:	051b      	lsls	r3, r3, #20
 8002d86:	432b      	orrs	r3, r5
 8002d88:	07e4      	lsls	r4, r4, #31
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	0030      	movs	r0, r6
 8002d8e:	0019      	movs	r1, r3
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
 8002d92:	380b      	subs	r0, #11
 8002d94:	4085      	lsls	r5, r0
 8002d96:	0552      	lsls	r2, r2, #21
 8002d98:	032d      	lsls	r5, r5, #12
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	0b2d      	lsrs	r5, r5, #12
 8002d9e:	0d53      	lsrs	r3, r2, #21
 8002da0:	e7f0      	b.n	8002d84 <__aeabi_i2d+0x3c>
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	0000041e 	.word	0x0000041e

08002da8 <__aeabi_ui2d>:
 8002da8:	b510      	push	{r4, lr}
 8002daa:	1e04      	subs	r4, r0, #0
 8002dac:	d010      	beq.n	8002dd0 <__aeabi_ui2d+0x28>
 8002dae:	f000 f8f1 	bl	8002f94 <__clzsi2>
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <__aeabi_ui2d+0x48>)
 8002db4:	1a1b      	subs	r3, r3, r0
 8002db6:	280a      	cmp	r0, #10
 8002db8:	dc11      	bgt.n	8002dde <__aeabi_ui2d+0x36>
 8002dba:	220b      	movs	r2, #11
 8002dbc:	0021      	movs	r1, r4
 8002dbe:	1a12      	subs	r2, r2, r0
 8002dc0:	40d1      	lsrs	r1, r2
 8002dc2:	3015      	adds	r0, #21
 8002dc4:	030a      	lsls	r2, r1, #12
 8002dc6:	055b      	lsls	r3, r3, #21
 8002dc8:	4084      	lsls	r4, r0
 8002dca:	0b12      	lsrs	r2, r2, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e001      	b.n	8002dd4 <__aeabi_ui2d+0x2c>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	0020      	movs	r0, r4
 8002dda:	0019      	movs	r1, r3
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	0022      	movs	r2, r4
 8002de0:	380b      	subs	r0, #11
 8002de2:	4082      	lsls	r2, r0
 8002de4:	055b      	lsls	r3, r3, #21
 8002de6:	0312      	lsls	r2, r2, #12
 8002de8:	2400      	movs	r4, #0
 8002dea:	0b12      	lsrs	r2, r2, #12
 8002dec:	0d5b      	lsrs	r3, r3, #21
 8002dee:	e7f1      	b.n	8002dd4 <__aeabi_ui2d+0x2c>
 8002df0:	0000041e 	.word	0x0000041e

08002df4 <__aeabi_f2d>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	0043      	lsls	r3, r0, #1
 8002df8:	0246      	lsls	r6, r0, #9
 8002dfa:	0fc4      	lsrs	r4, r0, #31
 8002dfc:	20fe      	movs	r0, #254	; 0xfe
 8002dfe:	0e1b      	lsrs	r3, r3, #24
 8002e00:	1c59      	adds	r1, r3, #1
 8002e02:	0a75      	lsrs	r5, r6, #9
 8002e04:	4208      	tst	r0, r1
 8002e06:	d00c      	beq.n	8002e22 <__aeabi_f2d+0x2e>
 8002e08:	22e0      	movs	r2, #224	; 0xe0
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4694      	mov	ip, r2
 8002e0e:	076d      	lsls	r5, r5, #29
 8002e10:	0b36      	lsrs	r6, r6, #12
 8002e12:	4463      	add	r3, ip
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	4333      	orrs	r3, r6
 8002e18:	07e4      	lsls	r4, r4, #31
 8002e1a:	4323      	orrs	r3, r4
 8002e1c:	0028      	movs	r0, r5
 8002e1e:	0019      	movs	r1, r3
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d114      	bne.n	8002e50 <__aeabi_f2d+0x5c>
 8002e26:	2d00      	cmp	r5, #0
 8002e28:	d01b      	beq.n	8002e62 <__aeabi_f2d+0x6e>
 8002e2a:	0028      	movs	r0, r5
 8002e2c:	f000 f8b2 	bl	8002f94 <__clzsi2>
 8002e30:	280a      	cmp	r0, #10
 8002e32:	dc1c      	bgt.n	8002e6e <__aeabi_f2d+0x7a>
 8002e34:	230b      	movs	r3, #11
 8002e36:	002e      	movs	r6, r5
 8002e38:	1a1b      	subs	r3, r3, r0
 8002e3a:	40de      	lsrs	r6, r3
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	3315      	adds	r3, #21
 8002e40:	409d      	lsls	r5, r3
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <__aeabi_f2d+0x88>)
 8002e44:	0336      	lsls	r6, r6, #12
 8002e46:	1a12      	subs	r2, r2, r0
 8002e48:	0552      	lsls	r2, r2, #21
 8002e4a:	0b36      	lsrs	r6, r6, #12
 8002e4c:	0d53      	lsrs	r3, r2, #21
 8002e4e:	e7e1      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e50:	2d00      	cmp	r5, #0
 8002e52:	d009      	beq.n	8002e68 <__aeabi_f2d+0x74>
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	0b36      	lsrs	r6, r6, #12
 8002e58:	0312      	lsls	r2, r2, #12
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <__aeabi_f2d+0x8c>)
 8002e5c:	076d      	lsls	r5, r5, #29
 8002e5e:	4316      	orrs	r6, r2
 8002e60:	e7d8      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2600      	movs	r6, #0
 8002e66:	e7d5      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e68:	2600      	movs	r6, #0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <__aeabi_f2d+0x8c>)
 8002e6c:	e7d2      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	3b0b      	subs	r3, #11
 8002e72:	409d      	lsls	r5, r3
 8002e74:	002e      	movs	r6, r5
 8002e76:	2500      	movs	r5, #0
 8002e78:	e7e3      	b.n	8002e42 <__aeabi_f2d+0x4e>
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	00000389 	.word	0x00000389
 8002e80:	000007ff 	.word	0x000007ff

08002e84 <__aeabi_d2f>:
 8002e84:	0002      	movs	r2, r0
 8002e86:	004b      	lsls	r3, r1, #1
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	0d5b      	lsrs	r3, r3, #21
 8002e8c:	030c      	lsls	r4, r1, #12
 8002e8e:	4e3d      	ldr	r6, [pc, #244]	; (8002f84 <__aeabi_d2f+0x100>)
 8002e90:	0a64      	lsrs	r4, r4, #9
 8002e92:	0f40      	lsrs	r0, r0, #29
 8002e94:	1c5f      	adds	r7, r3, #1
 8002e96:	0fc9      	lsrs	r1, r1, #31
 8002e98:	4304      	orrs	r4, r0
 8002e9a:	00d5      	lsls	r5, r2, #3
 8002e9c:	4237      	tst	r7, r6
 8002e9e:	d00a      	beq.n	8002eb6 <__aeabi_d2f+0x32>
 8002ea0:	4839      	ldr	r0, [pc, #228]	; (8002f88 <__aeabi_d2f+0x104>)
 8002ea2:	181e      	adds	r6, r3, r0
 8002ea4:	2efe      	cmp	r6, #254	; 0xfe
 8002ea6:	dd16      	ble.n	8002ed6 <__aeabi_d2f+0x52>
 8002ea8:	20ff      	movs	r0, #255	; 0xff
 8002eaa:	2400      	movs	r4, #0
 8002eac:	05c0      	lsls	r0, r0, #23
 8002eae:	4320      	orrs	r0, r4
 8002eb0:	07c9      	lsls	r1, r1, #31
 8002eb2:	4308      	orrs	r0, r1
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <__aeabi_d2f+0x44>
 8002eba:	432c      	orrs	r4, r5
 8002ebc:	d026      	beq.n	8002f0c <__aeabi_d2f+0x88>
 8002ebe:	2205      	movs	r2, #5
 8002ec0:	0192      	lsls	r2, r2, #6
 8002ec2:	0a54      	lsrs	r4, r2, #9
 8002ec4:	b2d8      	uxtb	r0, r3
 8002ec6:	e7f1      	b.n	8002eac <__aeabi_d2f+0x28>
 8002ec8:	4325      	orrs	r5, r4
 8002eca:	d0ed      	beq.n	8002ea8 <__aeabi_d2f+0x24>
 8002ecc:	2080      	movs	r0, #128	; 0x80
 8002ece:	03c0      	lsls	r0, r0, #15
 8002ed0:	4304      	orrs	r4, r0
 8002ed2:	20ff      	movs	r0, #255	; 0xff
 8002ed4:	e7ea      	b.n	8002eac <__aeabi_d2f+0x28>
 8002ed6:	2e00      	cmp	r6, #0
 8002ed8:	dd1b      	ble.n	8002f12 <__aeabi_d2f+0x8e>
 8002eda:	0192      	lsls	r2, r2, #6
 8002edc:	1e53      	subs	r3, r2, #1
 8002ede:	419a      	sbcs	r2, r3
 8002ee0:	00e4      	lsls	r4, r4, #3
 8002ee2:	0f6d      	lsrs	r5, r5, #29
 8002ee4:	4322      	orrs	r2, r4
 8002ee6:	432a      	orrs	r2, r5
 8002ee8:	0753      	lsls	r3, r2, #29
 8002eea:	d048      	beq.n	8002f7e <__aeabi_d2f+0xfa>
 8002eec:	230f      	movs	r3, #15
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d000      	beq.n	8002ef6 <__aeabi_d2f+0x72>
 8002ef4:	3204      	adds	r2, #4
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	04db      	lsls	r3, r3, #19
 8002efa:	4013      	ands	r3, r2
 8002efc:	d03f      	beq.n	8002f7e <__aeabi_d2f+0xfa>
 8002efe:	1c70      	adds	r0, r6, #1
 8002f00:	2efe      	cmp	r6, #254	; 0xfe
 8002f02:	d0d1      	beq.n	8002ea8 <__aeabi_d2f+0x24>
 8002f04:	0192      	lsls	r2, r2, #6
 8002f06:	0a54      	lsrs	r4, r2, #9
 8002f08:	b2c0      	uxtb	r0, r0
 8002f0a:	e7cf      	b.n	8002eac <__aeabi_d2f+0x28>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	2400      	movs	r4, #0
 8002f10:	e7cc      	b.n	8002eac <__aeabi_d2f+0x28>
 8002f12:	0032      	movs	r2, r6
 8002f14:	3217      	adds	r2, #23
 8002f16:	db22      	blt.n	8002f5e <__aeabi_d2f+0xda>
 8002f18:	2080      	movs	r0, #128	; 0x80
 8002f1a:	0400      	lsls	r0, r0, #16
 8002f1c:	4320      	orrs	r0, r4
 8002f1e:	241e      	movs	r4, #30
 8002f20:	1ba4      	subs	r4, r4, r6
 8002f22:	2c1f      	cmp	r4, #31
 8002f24:	dd1d      	ble.n	8002f62 <__aeabi_d2f+0xde>
 8002f26:	2202      	movs	r2, #2
 8002f28:	4252      	negs	r2, r2
 8002f2a:	1b96      	subs	r6, r2, r6
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	40f2      	lsrs	r2, r6
 8002f30:	0016      	movs	r6, r2
 8002f32:	2c20      	cmp	r4, #32
 8002f34:	d004      	beq.n	8002f40 <__aeabi_d2f+0xbc>
 8002f36:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <__aeabi_d2f+0x108>)
 8002f38:	4694      	mov	ip, r2
 8002f3a:	4463      	add	r3, ip
 8002f3c:	4098      	lsls	r0, r3
 8002f3e:	4305      	orrs	r5, r0
 8002f40:	002a      	movs	r2, r5
 8002f42:	1e53      	subs	r3, r2, #1
 8002f44:	419a      	sbcs	r2, r3
 8002f46:	4332      	orrs	r2, r6
 8002f48:	2600      	movs	r6, #0
 8002f4a:	0753      	lsls	r3, r2, #29
 8002f4c:	d1ce      	bne.n	8002eec <__aeabi_d2f+0x68>
 8002f4e:	2480      	movs	r4, #128	; 0x80
 8002f50:	0013      	movs	r3, r2
 8002f52:	04e4      	lsls	r4, r4, #19
 8002f54:	2001      	movs	r0, #1
 8002f56:	4023      	ands	r3, r4
 8002f58:	4222      	tst	r2, r4
 8002f5a:	d1d3      	bne.n	8002f04 <__aeabi_d2f+0x80>
 8002f5c:	e7b0      	b.n	8002ec0 <__aeabi_d2f+0x3c>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e7ad      	b.n	8002ebe <__aeabi_d2f+0x3a>
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <__aeabi_d2f+0x10c>)
 8002f64:	4694      	mov	ip, r2
 8002f66:	002a      	movs	r2, r5
 8002f68:	40e2      	lsrs	r2, r4
 8002f6a:	0014      	movs	r4, r2
 8002f6c:	002a      	movs	r2, r5
 8002f6e:	4463      	add	r3, ip
 8002f70:	409a      	lsls	r2, r3
 8002f72:	4098      	lsls	r0, r3
 8002f74:	1e55      	subs	r5, r2, #1
 8002f76:	41aa      	sbcs	r2, r5
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	4322      	orrs	r2, r4
 8002f7c:	e7e4      	b.n	8002f48 <__aeabi_d2f+0xc4>
 8002f7e:	0033      	movs	r3, r6
 8002f80:	e79e      	b.n	8002ec0 <__aeabi_d2f+0x3c>
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	000007fe 	.word	0x000007fe
 8002f88:	fffffc80 	.word	0xfffffc80
 8002f8c:	fffffca2 	.word	0xfffffca2
 8002f90:	fffffc82 	.word	0xfffffc82

08002f94 <__clzsi2>:
 8002f94:	211c      	movs	r1, #28
 8002f96:	2301      	movs	r3, #1
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	4298      	cmp	r0, r3
 8002f9c:	d301      	bcc.n	8002fa2 <__clzsi2+0xe>
 8002f9e:	0c00      	lsrs	r0, r0, #16
 8002fa0:	3910      	subs	r1, #16
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	4298      	cmp	r0, r3
 8002fa6:	d301      	bcc.n	8002fac <__clzsi2+0x18>
 8002fa8:	0a00      	lsrs	r0, r0, #8
 8002faa:	3908      	subs	r1, #8
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	4298      	cmp	r0, r3
 8002fb0:	d301      	bcc.n	8002fb6 <__clzsi2+0x22>
 8002fb2:	0900      	lsrs	r0, r0, #4
 8002fb4:	3904      	subs	r1, #4
 8002fb6:	a202      	add	r2, pc, #8	; (adr r2, 8002fc0 <__clzsi2+0x2c>)
 8002fb8:	5c10      	ldrb	r0, [r2, r0]
 8002fba:	1840      	adds	r0, r0, r1
 8002fbc:	4770      	bx	lr
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	02020304 	.word	0x02020304
 8002fc4:	01010101 	.word	0x01010101
	...

08002fd0 <Get_BME280_in_all_readings>:

uint8_t tim3Flag = 0;
uint16_t myCnt[10] = {0};

void Get_BME280_in_all_readings()
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b093      	sub	sp, #76	; 0x4c
 8002fd4:	af12      	add	r7, sp, #72	; 0x48
	Sensors.BME280_Internal.Status = BME280_Get_ID(hi2c1, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 8002fd6:	4c33      	ldr	r4, [pc, #204]	; (80030a4 <Get_BME280_in_all_readings+0xd4>)
 8002fd8:	2314      	movs	r3, #20
 8002fda:	9310      	str	r3, [sp, #64]	; 0x40
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <Get_BME280_in_all_readings+0xd8>)
 8002fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fe0:	466b      	mov	r3, sp
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	0023      	movs	r3, r4
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	223c      	movs	r2, #60	; 0x3c
 8002fea:	0019      	movs	r1, r3
 8002fec:	f00b fabc 	bl	800e568 <memcpy>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	6861      	ldr	r1, [r4, #4]
 8002ff4:	68a2      	ldr	r2, [r4, #8]
 8002ff6:	68e3      	ldr	r3, [r4, #12]
 8002ff8:	f009 fc2d 	bl	800c856 <BME280_Get_ID>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	0019      	movs	r1, r3
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003002:	2230      	movs	r2, #48	; 0x30
 8003004:	5499      	strb	r1, [r3, r2]
	if(Sensors.BME280_Internal.Status != HAL_OK)
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003008:	2230      	movs	r2, #48	; 0x30
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d143      	bne.n	8003098 <Get_BME280_in_all_readings+0xc8>
		return;
	Sensors.BME280_Internal.Status = BME280_Get_All(hi2c1, I2C_long_timeout);
 8003010:	4c24      	ldr	r4, [pc, #144]	; (80030a4 <Get_BME280_in_all_readings+0xd4>)
 8003012:	23c8      	movs	r3, #200	; 0xc8
 8003014:	930f      	str	r3, [sp, #60]	; 0x3c
 8003016:	466b      	mov	r3, sp
 8003018:	0018      	movs	r0, r3
 800301a:	0023      	movs	r3, r4
 800301c:	3310      	adds	r3, #16
 800301e:	223c      	movs	r2, #60	; 0x3c
 8003020:	0019      	movs	r1, r3
 8003022:	f00b faa1 	bl	800e568 <memcpy>
 8003026:	6820      	ldr	r0, [r4, #0]
 8003028:	6861      	ldr	r1, [r4, #4]
 800302a:	68a2      	ldr	r2, [r4, #8]
 800302c:	68e3      	ldr	r3, [r4, #12]
 800302e:	f009 fe11 	bl	800cc54 <BME280_Get_All>
 8003032:	0003      	movs	r3, r0
 8003034:	0019      	movs	r1, r3
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003038:	2230      	movs	r2, #48	; 0x30
 800303a:	5499      	strb	r1, [r3, r2]
	if(Sensors.BME280_Internal.Status != HAL_OK)
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 800303e:	2230      	movs	r2, #48	; 0x30
 8003040:	5c9b      	ldrb	r3, [r3, r2]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12a      	bne.n	800309c <Get_BME280_in_all_readings+0xcc>
		return;

	Sensors.BME280_Internal.Temperature = BME280_T_Double(&BME280_internal_Calib_Data);
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <Get_BME280_in_all_readings+0xe0>)
 8003048:	0018      	movs	r0, r3
 800304a:	f009 fe7d 	bl	800cd48 <BME280_T_Double>
 800304e:	0002      	movs	r2, r0
 8003050:	000b      	movs	r3, r1
 8003052:	4916      	ldr	r1, [pc, #88]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003054:	638a      	str	r2, [r1, #56]	; 0x38
 8003056:	63cb      	str	r3, [r1, #60]	; 0x3c
	Sensors.BME280_Internal.Pressure = BME280_P_Double(&BME280_internal_Calib_Data);
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <Get_BME280_in_all_readings+0xe0>)
 800305a:	0018      	movs	r0, r3
 800305c:	f009 ff34 	bl	800cec8 <BME280_P_Double>
 8003060:	0002      	movs	r2, r0
 8003062:	000b      	movs	r3, r1
 8003064:	4911      	ldr	r1, [pc, #68]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003066:	640a      	str	r2, [r1, #64]	; 0x40
 8003068:	644b      	str	r3, [r1, #68]	; 0x44
	Sensors.BME280_Internal.Humidity = BME280_H_Double(&BME280_internal_Calib_Data);
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <Get_BME280_in_all_readings+0xe0>)
 800306c:	0018      	movs	r0, r3
 800306e:	f00a f8c1 	bl	800d1f4 <BME280_H_Double>
 8003072:	0002      	movs	r2, r0
 8003074:	000b      	movs	r3, r1
 8003076:	490d      	ldr	r1, [pc, #52]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003078:	650a      	str	r2, [r1, #80]	; 0x50
 800307a:	654b      	str	r3, [r1, #84]	; 0x54
	Sensors.BME280_Internal.Altitude = BME280_Altitude_Double(Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Pressure_ref);
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 800307e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003080:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	f00a f9ac 	bl	800d3e4 <BME280_Altitude_Double>
 800308c:	0002      	movs	r2, r0
 800308e:	000b      	movs	r3, r1
 8003090:	4906      	ldr	r1, [pc, #24]	; (80030ac <Get_BME280_in_all_readings+0xdc>)
 8003092:	658a      	str	r2, [r1, #88]	; 0x58
 8003094:	65cb      	str	r3, [r1, #92]	; 0x5c
 8003096:	e002      	b.n	800309e <Get_BME280_in_all_readings+0xce>
		return;
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	e000      	b.n	800309e <Get_BME280_in_all_readings+0xce>
		return;
 800309c:	46c0      	nop			; (mov r8, r8)
}
 800309e:	46bd      	mov	sp, r7
 80030a0:	b001      	add	sp, #4
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	20000214 	.word	0x20000214
 80030a8:	20000539 	.word	0x20000539
 80030ac:	20000508 	.word	0x20000508
 80030b0:	20002694 	.word	0x20002694

080030b4 <Get_MPU6050_all_readings>:
	Sensors.BME280_External.Humidity = BME280_H_Double(&BME280_external_Calib_Data);
	Sensors.BME280_External.Altitude = BME280_Altitude_Double(Sensors.BME280_External.Pressure, Sensors.BME280_External.Pressure_ref);
}
*/
void Get_MPU6050_all_readings()
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b093      	sub	sp, #76	; 0x4c
 80030b8:	af12      	add	r7, sp, #72	; 0x48
	Sensors.MPU6050.Status = MPU6050_read_ID(hi2c1, &Sensors.MPU6050.ID, I2C_short_timeout);
 80030ba:	4c2e      	ldr	r4, [pc, #184]	; (8003174 <Get_MPU6050_all_readings+0xc0>)
 80030bc:	2314      	movs	r3, #20
 80030be:	9310      	str	r3, [sp, #64]	; 0x40
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <Get_MPU6050_all_readings+0xc4>)
 80030c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80030c4:	466b      	mov	r3, sp
 80030c6:	0018      	movs	r0, r3
 80030c8:	0023      	movs	r3, r4
 80030ca:	3310      	adds	r3, #16
 80030cc:	223c      	movs	r2, #60	; 0x3c
 80030ce:	0019      	movs	r1, r3
 80030d0:	f00b fa4a 	bl	800e568 <memcpy>
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	6861      	ldr	r1, [r4, #4]
 80030d8:	68a2      	ldr	r2, [r4, #8]
 80030da:	68e3      	ldr	r3, [r4, #12]
 80030dc:	f00a fa77 	bl	800d5ce <MPU6050_read_ID>
 80030e0:	0003      	movs	r3, r0
 80030e2:	0019      	movs	r1, r3
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <Get_MPU6050_all_readings+0xc8>)
 80030e6:	2260      	movs	r2, #96	; 0x60
 80030e8:	5499      	strb	r1, [r3, r2]
	myCnt[2]++;
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <Get_MPU6050_all_readings+0xcc>)
 80030ec:	889b      	ldrh	r3, [r3, #4]
 80030ee:	3301      	adds	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	4b23      	ldr	r3, [pc, #140]	; (8003180 <Get_MPU6050_all_readings+0xcc>)
 80030f4:	809a      	strh	r2, [r3, #4]
	if(Sensors.MPU6050.Status != HAL_OK)
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <Get_MPU6050_all_readings+0xc8>)
 80030f8:	2260      	movs	r2, #96	; 0x60
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d133      	bne.n	8003168 <Get_MPU6050_all_readings+0xb4>
		return;
	Sensors.MPU6050.Status = MPU6050_read_All(hi2c1, I2C_long_timeout);
 8003100:	4c1c      	ldr	r4, [pc, #112]	; (8003174 <Get_MPU6050_all_readings+0xc0>)
 8003102:	23c8      	movs	r3, #200	; 0xc8
 8003104:	930f      	str	r3, [sp, #60]	; 0x3c
 8003106:	466b      	mov	r3, sp
 8003108:	0018      	movs	r0, r3
 800310a:	0023      	movs	r3, r4
 800310c:	3310      	adds	r3, #16
 800310e:	223c      	movs	r2, #60	; 0x3c
 8003110:	0019      	movs	r1, r3
 8003112:	f00b fa29 	bl	800e568 <memcpy>
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	6861      	ldr	r1, [r4, #4]
 800311a:	68a2      	ldr	r2, [r4, #8]
 800311c:	68e3      	ldr	r3, [r4, #12]
 800311e:	f00a fa77 	bl	800d610 <MPU6050_read_All>
 8003122:	0003      	movs	r3, r0
 8003124:	0019      	movs	r1, r3
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <Get_MPU6050_all_readings+0xc8>)
 8003128:	2260      	movs	r2, #96	; 0x60
 800312a:	5499      	strb	r1, [r3, r2]
	myCnt[3]++;
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <Get_MPU6050_all_readings+0xcc>)
 800312e:	88db      	ldrh	r3, [r3, #6]
 8003130:	3301      	adds	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <Get_MPU6050_all_readings+0xcc>)
 8003136:	80da      	strh	r2, [r3, #6]
	if(Sensors.MPU6050.Status != HAL_OK)
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <Get_MPU6050_all_readings+0xc8>)
 800313a:	2260      	movs	r2, #96	; 0x60
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d114      	bne.n	800316c <Get_MPU6050_all_readings+0xb8>
		return;

	MPU6050_Accel_double(&Sensors.MPU6050);
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <Get_MPU6050_all_readings+0xd0>)
 8003144:	0018      	movs	r0, r3
 8003146:	f00a fae5 	bl	800d714 <MPU6050_Accel_double>
	myCnt[4]++;
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <Get_MPU6050_all_readings+0xcc>)
 800314c:	891b      	ldrh	r3, [r3, #8]
 800314e:	3301      	adds	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <Get_MPU6050_all_readings+0xcc>)
 8003154:	811a      	strh	r2, [r3, #8]
	MPU6050_Gyro_double(&Sensors.MPU6050);
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <Get_MPU6050_all_readings+0xd0>)
 8003158:	0018      	movs	r0, r3
 800315a:	f00a fb3d 	bl	800d7d8 <MPU6050_Gyro_double>
	MPU6050_Temp_double(&Sensors.MPU6050);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <Get_MPU6050_all_readings+0xd0>)
 8003160:	0018      	movs	r0, r3
 8003162:	f00a fb11 	bl	800d788 <MPU6050_Temp_double>
 8003166:	e002      	b.n	800316e <Get_MPU6050_all_readings+0xba>
		return;
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	e000      	b.n	800316e <Get_MPU6050_all_readings+0xba>
		return;
 800316c:	46c0      	nop			; (mov r8, r8)
}
 800316e:	46bd      	mov	sp, r7
 8003170:	b001      	add	sp, #4
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	20000214 	.word	0x20000214
 8003178:	20000569 	.word	0x20000569
 800317c:	20000508 	.word	0x20000508
 8003180:	200026bc 	.word	0x200026bc
 8003184:	20000568 	.word	0x20000568

08003188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318a:	46c6      	mov	lr, r8
 800318c:	b500      	push	{lr}
 800318e:	b0b6      	sub	sp, #216	; 0xd8
 8003190:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003192:	f001 f947 	bl	8004424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003196:	f000 f9b1 	bl	80034fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800319a:	f000 fc23 	bl	80039e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800319e:	f000 fa1b 	bl	80035d8 <MX_I2C1_Init>
  MX_RTC_Init();
 80031a2:	f000 fa99 	bl	80036d8 <MX_RTC_Init>
  MX_TIM3_Init();
 80031a6:	f000 fb37 	bl	8003818 <MX_TIM3_Init>
  MX_I2C2_Init();
 80031aa:	f000 fa55 	bl	8003658 <MX_I2C2_Init>
  MX_SPI1_Init();
 80031ae:	f000 faf5 	bl	800379c <MX_SPI1_Init>
  MX_FATFS_Init();
 80031b2:	f005 ff63 	bl	800907c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80031b6:	f000 fb85 	bl	80038c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031ba:	f000 fbb3 	bl	8003924 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80031be:	f000 fbe1 	bl	8003984 <MX_USART3_UART_Init>
  /*------------------Sensors init-----------------------*/
//  	Sensors.BME280_Internal.Pressure_ref = PRESSURE_REFERENCE;
//	Sensors.BME280_External.Pressure_ref = PRESSURE_REFERENCE;

  	/* Wait for Sensor power-on */
  	HAL_Delay(1000);
 80031c2:	23fa      	movs	r3, #250	; 0xfa
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	0018      	movs	r0, r3
 80031c8:	f001 f990 	bl	80044ec <HAL_Delay>

  	Sensors.BME280_Internal.Status = BME280_Get_ID(hi2c1, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 80031cc:	4cb2      	ldr	r4, [pc, #712]	; (8003498 <main+0x310>)
 80031ce:	2314      	movs	r3, #20
 80031d0:	9310      	str	r3, [sp, #64]	; 0x40
 80031d2:	4bb2      	ldr	r3, [pc, #712]	; (800349c <main+0x314>)
 80031d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80031d6:	466b      	mov	r3, sp
 80031d8:	0018      	movs	r0, r3
 80031da:	0023      	movs	r3, r4
 80031dc:	3310      	adds	r3, #16
 80031de:	223c      	movs	r2, #60	; 0x3c
 80031e0:	0019      	movs	r1, r3
 80031e2:	f00b f9c1 	bl	800e568 <memcpy>
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	6861      	ldr	r1, [r4, #4]
 80031ea:	68a2      	ldr	r2, [r4, #8]
 80031ec:	68e3      	ldr	r3, [r4, #12]
 80031ee:	f009 fb32 	bl	800c856 <BME280_Get_ID>
 80031f2:	0003      	movs	r3, r0
 80031f4:	0019      	movs	r1, r3
 80031f6:	4baa      	ldr	r3, [pc, #680]	; (80034a0 <main+0x318>)
 80031f8:	2230      	movs	r2, #48	; 0x30
 80031fa:	5499      	strb	r1, [r3, r2]
  	if (Sensors.BME280_Internal.Status == HAL_OK)
 80031fc:	4ba8      	ldr	r3, [pc, #672]	; (80034a0 <main+0x318>)
 80031fe:	2230      	movs	r2, #48	; 0x30
 8003200:	5c9b      	ldrb	r3, [r3, r2]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d12f      	bne.n	8003266 <main+0xde>
  	{
  		Sensors.BME280_Internal.Status = BME280_Init(hi2c1, I2C_short_timeout);
 8003206:	4ca4      	ldr	r4, [pc, #656]	; (8003498 <main+0x310>)
 8003208:	2314      	movs	r3, #20
 800320a:	930f      	str	r3, [sp, #60]	; 0x3c
 800320c:	466b      	mov	r3, sp
 800320e:	0018      	movs	r0, r3
 8003210:	0023      	movs	r3, r4
 8003212:	3310      	adds	r3, #16
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	0019      	movs	r1, r3
 8003218:	f00b f9a6 	bl	800e568 <memcpy>
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	6861      	ldr	r1, [r4, #4]
 8003220:	68a2      	ldr	r2, [r4, #8]
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	f009 fa98 	bl	800c758 <BME280_Init>
 8003228:	0003      	movs	r3, r0
 800322a:	0019      	movs	r1, r3
 800322c:	4b9c      	ldr	r3, [pc, #624]	; (80034a0 <main+0x318>)
 800322e:	2230      	movs	r2, #48	; 0x30
 8003230:	5499      	strb	r1, [r3, r2]
  		Sensors.BME280_Internal.Status = BME280_Calib_Read(hi2c1, &BME280_internal_Calib_Data, I2C_long_timeout);
 8003232:	4c99      	ldr	r4, [pc, #612]	; (8003498 <main+0x310>)
 8003234:	23c8      	movs	r3, #200	; 0xc8
 8003236:	9310      	str	r3, [sp, #64]	; 0x40
 8003238:	4b9a      	ldr	r3, [pc, #616]	; (80034a4 <main+0x31c>)
 800323a:	930f      	str	r3, [sp, #60]	; 0x3c
 800323c:	466b      	mov	r3, sp
 800323e:	0018      	movs	r0, r3
 8003240:	0023      	movs	r3, r4
 8003242:	3310      	adds	r3, #16
 8003244:	223c      	movs	r2, #60	; 0x3c
 8003246:	0019      	movs	r1, r3
 8003248:	f00b f98e 	bl	800e568 <memcpy>
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	6861      	ldr	r1, [r4, #4]
 8003250:	68a2      	ldr	r2, [r4, #8]
 8003252:	68e3      	ldr	r3, [r4, #12]
 8003254:	f009 fb20 	bl	800c898 <BME280_Calib_Read>
 8003258:	0003      	movs	r3, r0
 800325a:	0019      	movs	r1, r3
 800325c:	4b90      	ldr	r3, [pc, #576]	; (80034a0 <main+0x318>)
 800325e:	2230      	movs	r2, #48	; 0x30
 8003260:	5499      	strb	r1, [r3, r2]
  		Get_BME280_in_all_readings();
 8003262:	f7ff feb5 	bl	8002fd0 <Get_BME280_in_all_readings>
  		Sensors.BME280_External.Status = BME280_Init(hi2c2, I2C_short_timeout);
  		Sensors.BME280_External.Status = BME280_Calib_Read(hi2c2, &BME280_external_Calib_Data, I2C_long_timeout);
  		Get_BME280_ex_all_readings();
  	}
*/
  	Sensors.MPU6050.Status = MPU6050_read_ID(hi2c1, &Sensors.MPU6050.ID, I2C_short_timeout);
 8003266:	4c8c      	ldr	r4, [pc, #560]	; (8003498 <main+0x310>)
 8003268:	2314      	movs	r3, #20
 800326a:	9310      	str	r3, [sp, #64]	; 0x40
 800326c:	4b8e      	ldr	r3, [pc, #568]	; (80034a8 <main+0x320>)
 800326e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003270:	466b      	mov	r3, sp
 8003272:	0018      	movs	r0, r3
 8003274:	0023      	movs	r3, r4
 8003276:	3310      	adds	r3, #16
 8003278:	223c      	movs	r2, #60	; 0x3c
 800327a:	0019      	movs	r1, r3
 800327c:	f00b f974 	bl	800e568 <memcpy>
 8003280:	6820      	ldr	r0, [r4, #0]
 8003282:	6861      	ldr	r1, [r4, #4]
 8003284:	68a2      	ldr	r2, [r4, #8]
 8003286:	68e3      	ldr	r3, [r4, #12]
 8003288:	f00a f9a1 	bl	800d5ce <MPU6050_read_ID>
 800328c:	0003      	movs	r3, r0
 800328e:	0019      	movs	r1, r3
 8003290:	4b83      	ldr	r3, [pc, #524]	; (80034a0 <main+0x318>)
 8003292:	2260      	movs	r2, #96	; 0x60
 8003294:	5499      	strb	r1, [r3, r2]
  	if (Sensors.MPU6050.Status == HAL_OK)
 8003296:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <main+0x318>)
 8003298:	2260      	movs	r2, #96	; 0x60
 800329a:	5c9b      	ldrb	r3, [r3, r2]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d117      	bne.n	80032d0 <main+0x148>
  	{
  		Sensors.MPU6050.Status = MPU6050_Init(hi2c1, I2C_short_timeout);
 80032a0:	4c7d      	ldr	r4, [pc, #500]	; (8003498 <main+0x310>)
 80032a2:	2314      	movs	r3, #20
 80032a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80032a6:	466b      	mov	r3, sp
 80032a8:	0018      	movs	r0, r3
 80032aa:	0023      	movs	r3, r4
 80032ac:	3310      	adds	r3, #16
 80032ae:	223c      	movs	r2, #60	; 0x3c
 80032b0:	0019      	movs	r1, r3
 80032b2:	f00b f959 	bl	800e568 <memcpy>
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	6861      	ldr	r1, [r4, #4]
 80032ba:	68a2      	ldr	r2, [r4, #8]
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	f00a f8c7 	bl	800d450 <MPU6050_Init>
 80032c2:	0003      	movs	r3, r0
 80032c4:	0019      	movs	r1, r3
 80032c6:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <main+0x318>)
 80032c8:	2260      	movs	r2, #96	; 0x60
 80032ca:	5499      	strb	r1, [r3, r2]
  		Get_MPU6050_all_readings();
 80032cc:	f7ff fef2 	bl	80030b4 <Get_MPU6050_all_readings>
*/ //1.library




  	QMC_init(&QMC_Data, &hi2c2, 200);
 80032d0:	4976      	ldr	r1, [pc, #472]	; (80034ac <main+0x324>)
 80032d2:	4b77      	ldr	r3, [pc, #476]	; (80034b0 <main+0x328>)
 80032d4:	22c8      	movs	r2, #200	; 0xc8
 80032d6:	0018      	movs	r0, r3
 80032d8:	f00a fab8 	bl	800d84c <QMC_init>



  	Data = MY_SDCard_SetUp();
 80032dc:	4c75      	ldr	r4, [pc, #468]	; (80034b4 <main+0x32c>)
 80032de:	003b      	movs	r3, r7
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fbff 	bl	8003ae4 <MY_SDCard_SetUp>
 80032e6:	003a      	movs	r2, r7
 80032e8:	0023      	movs	r3, r4
 80032ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032ec:	c313      	stmia	r3!, {r0, r1, r4}
 80032ee:	ca03      	ldmia	r2!, {r0, r1}
 80032f0:	c303      	stmia	r3!, {r0, r1}
  	HAL_TIM_Base_Start_IT(&htim3);
 80032f2:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <main+0x330>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f004 f83d 	bl	8007374 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart1, Rx_command1, 1);
 80032fa:	4970      	ldr	r1, [pc, #448]	; (80034bc <main+0x334>)
 80032fc:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <main+0x338>)
 80032fe:	2201      	movs	r2, #1
 8003300:	0018      	movs	r0, r3
 8003302:	f004 fcd9 	bl	8007cb8 <HAL_UART_Receive_IT>
  	HAL_UART_Receive_IT(&huart3, Rx_command3, 1);
 8003306:	496f      	ldr	r1, [pc, #444]	; (80034c4 <main+0x33c>)
 8003308:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <main+0x340>)
 800330a:	2201      	movs	r2, #1
 800330c:	0018      	movs	r0, r3
 800330e:	f004 fcd3 	bl	8007cb8 <HAL_UART_Receive_IT>
	*/ //1.library




	  if(QMC_read(&QMC_Data)==0)
 8003312:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <main+0x328>)
 8003314:	0018      	movs	r0, r3
 8003316:	f00a fb0d 	bl	800d934 <QMC_read>
 800331a:	1e03      	subs	r3, r0, #0
 800331c:	d103      	bne.n	8003326 <main+0x19e>
	  	{
	  		//HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
	  		Compas_Value=QMC_Data.heading;
 800331e:	4b64      	ldr	r3, [pc, #400]	; (80034b0 <main+0x328>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <main+0x344>)
 8003324:	601a      	str	r2, [r3, #0]
	  	}
	  	else
	  	{
	  		//HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
	  	}
	  	HAL_Delay(50);
 8003326:	2032      	movs	r0, #50	; 0x32
 8003328:	f001 f8e0 	bl	80044ec <HAL_Delay>




	switch(SM.state){
 800332c:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <main+0x348>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d100      	bne.n	8003336 <main+0x1ae>
 8003334:	e080      	b.n	8003438 <main+0x2b0>
 8003336:	dd00      	ble.n	800333a <main+0x1b2>
 8003338:	e0a6      	b.n	8003488 <main+0x300>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <main+0x1bc>
 800333e:	2b01      	cmp	r3, #1
 8003340:	d027      	beq.n	8003392 <main+0x20a>
 8003342:	e0a1      	b.n	8003488 <main+0x300>
		case SM_STATE_READ_SENSORS:
			if(tim3Flag == 1){
 8003344:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <main+0x34c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d11a      	bne.n	8003382 <main+0x1fa>
				Get_BME280_in_all_readings();
 800334c:	f7ff fe40 	bl	8002fd0 <Get_BME280_in_all_readings>
				//Get_BME280_ex_all_readings();
	  	  		Get_MPU6050_all_readings();
 8003350:	f7ff feb0 	bl	80030b4 <Get_MPU6050_all_readings>
	  	  		//Get_QMC5883_all_readings();
	  	  		//QMC_read(&QMC_Data);

	  	  		HAL_RTC_GetTime(&hrtc, &systemRTCTime, RTC_FORMAT_BIN);
 8003354:	4960      	ldr	r1, [pc, #384]	; (80034d8 <main+0x350>)
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <main+0x354>)
 8003358:	2200      	movs	r2, #0
 800335a:	0018      	movs	r0, r3
 800335c:	f003 f878 	bl	8006450 <HAL_RTC_GetTime>
	  	  		HAL_RTC_GetDate(&hrtc, &systemRTCDate, RTC_FORMAT_BIN);
 8003360:	495f      	ldr	r1, [pc, #380]	; (80034e0 <main+0x358>)
 8003362:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <main+0x354>)
 8003364:	2200      	movs	r2, #0
 8003366:	0018      	movs	r0, r3
 8003368:	f003 f976 	bl	8006658 <HAL_RTC_GetDate>
	  	  		tim3Flag = 0;
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <main+0x34c>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
	  	  		SM.nextState= SM_STATE_WRITE_TO_SD_CARD;
 8003372:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <main+0x348>)
 8003374:	2201      	movs	r2, #1
 8003376:	705a      	strb	r2, [r3, #1]
	  	  		SM.state = SM.nextState;
 8003378:	4b55      	ldr	r3, [pc, #340]	; (80034d0 <main+0x348>)
 800337a:	785a      	ldrb	r2, [r3, #1]
 800337c:	4b54      	ldr	r3, [pc, #336]	; (80034d0 <main+0x348>)
 800337e:	701a      	strb	r2, [r3, #0]
	  	  		break;
 8003380:	e088      	b.n	8003494 <main+0x30c>
	  	  	}
	  	  	//SM.nextState= SM_STATE_READ_SENSORS;
	  	  	SM.nextState= SM_STATE_WRITE_TO_SD_CARD;
 8003382:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <main+0x348>)
 8003384:	2201      	movs	r2, #1
 8003386:	705a      	strb	r2, [r3, #1]
	  	  	SM.state = SM.nextState;
 8003388:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <main+0x348>)
 800338a:	785a      	ldrb	r2, [r3, #1]
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <main+0x348>)
 800338e:	701a      	strb	r2, [r3, #0]
	  	 break;
 8003390:	e080      	b.n	8003494 <main+0x30c>
	  	 case SM_STATE_WRITE_TO_SD_CARD:
	  		 if((Data.statuss == 1) && (Data.statusSync == FR_OK)){
 8003392:	4b48      	ldr	r3, [pc, #288]	; (80034b4 <main+0x32c>)
 8003394:	791b      	ldrb	r3, [r3, #4]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d145      	bne.n	8003428 <main+0x2a0>
 800339c:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <main+0x32c>)
 800339e:	78db      	ldrb	r3, [r3, #3]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d140      	bne.n	8003428 <main+0x2a0>
	  			 char TempStr[100];
	  	  		 //sprintf(TempStr, "%9.2f  %9.2f  %9.2f  %9.2f  \n", Sensors.BME280_Internal.Temperature, Sensors.BME280_Internal.Humidity, Sensors.MPU650.Gyro_X, Sensors.MPU650.Gyro_Y);
	  			 sprintf(TempStr, "%d\t%d\t%d\t%3.2f\t%3.2f\n",systemRTCTime.Hours, systemRTCTime.Minutes, systemRTCTime.Seconds, Sensors.BME280_Internal.Temperature, Sensors.BME280_Internal.Pressure);
 80033a6:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <main+0x350>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	469c      	mov	ip, r3
 80033ac:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <main+0x350>)
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	4698      	mov	r8, r3
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <main+0x350>)
 80033b4:	789b      	ldrb	r3, [r3, #2]
 80033b6:	001e      	movs	r6, r3
 80033b8:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <main+0x318>)
 80033ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	4938      	ldr	r1, [pc, #224]	; (80034a0 <main+0x318>)
 80033c0:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80033c2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80033c4:	4d47      	ldr	r5, [pc, #284]	; (80034e4 <main+0x35c>)
 80033c6:	2418      	movs	r4, #24
 80033c8:	193c      	adds	r4, r7, r4
 80033ca:	9004      	str	r0, [sp, #16]
 80033cc:	9105      	str	r1, [sp, #20]
 80033ce:	9202      	str	r2, [sp, #8]
 80033d0:	9303      	str	r3, [sp, #12]
 80033d2:	9600      	str	r6, [sp, #0]
 80033d4:	4643      	mov	r3, r8
 80033d6:	4662      	mov	r2, ip
 80033d8:	0029      	movs	r1, r5
 80033da:	0020      	movs	r0, r4
 80033dc:	f00b fd44 	bl	800ee68 <siprintf>
	  			 f_printf(&fil, TempStr);
 80033e0:	2418      	movs	r4, #24
 80033e2:	193a      	adds	r2, r7, r4
 80033e4:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <main+0x360>)
 80033e6:	0011      	movs	r1, r2
 80033e8:	0018      	movs	r0, r3
 80033ea:	f008 ff21 	bl	800c230 <f_printf>
	  	  		 Data.statusSync = f_sync(&fil);
 80033ee:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <main+0x360>)
 80033f0:	0018      	movs	r0, r3
 80033f2:	f008 fd1d 	bl	800be30 <f_sync>
 80033f6:	0003      	movs	r3, r0
 80033f8:	001a      	movs	r2, r3
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <main+0x32c>)
 80033fc:	70da      	strb	r2, [r3, #3]
	  	  		 myCnt[1]++;
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <main+0x364>)
 8003400:	885b      	ldrh	r3, [r3, #2]
 8003402:	3301      	adds	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	4b39      	ldr	r3, [pc, #228]	; (80034ec <main+0x364>)
 8003408:	805a      	strh	r2, [r3, #2]
	  	  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	4a38      	ldr	r2, [pc, #224]	; (80034f0 <main+0x368>)
 8003410:	0019      	movs	r1, r3
 8003412:	0010      	movs	r0, r2
 8003414:	f001 fb77 	bl	8004b06 <HAL_GPIO_TogglePin>
	  	  		 SM.nextState= SM_STATE_SEND_DATA_TO_COM;
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <main+0x348>)
 800341a:	2202      	movs	r2, #2
 800341c:	705a      	strb	r2, [r3, #1]
	  	  		 SM.state = SM.nextState;
 800341e:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <main+0x348>)
 8003420:	785a      	ldrb	r2, [r3, #1]
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <main+0x348>)
 8003424:	701a      	strb	r2, [r3, #0]
	  	  		 break;
 8003426:	e035      	b.n	8003494 <main+0x30c>
	  	  	  }
	  	  	  //SM.nextState= SM_STATE_SEND_DATA_TO_COM;
	  		  SM.nextState= SM_STATE_READ_SENSORS;
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <main+0x348>)
 800342a:	2200      	movs	r2, #0
 800342c:	705a      	strb	r2, [r3, #1]
	  	  	  SM.state = SM.nextState;
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <main+0x348>)
 8003430:	785a      	ldrb	r2, [r3, #1]
 8003432:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <main+0x348>)
 8003434:	701a      	strb	r2, [r3, #0]
	  	 break;
 8003436:	e02d      	b.n	8003494 <main+0x30c>
	  	 case SM_STATE_SEND_DATA_TO_COM:
	  		 memset(Data_to_send, 0, sizeof(Data_to_send));
 8003438:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <main+0x36c>)
 800343a:	2232      	movs	r2, #50	; 0x32
 800343c:	2100      	movs	r1, #0
 800343e:	0018      	movs	r0, r3
 8003440:	f00b f89b 	bl	800e57a <memset>
	  		 char TempStr[20];
	  		 sprintf(TempStr, "%.2f", Sensors.BME280_Internal.Temperature);
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <main+0x318>)
 8003446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	492b      	ldr	r1, [pc, #172]	; (80034f8 <main+0x370>)
 800344c:	247c      	movs	r4, #124	; 0x7c
 800344e:	1938      	adds	r0, r7, r4
 8003450:	f00b fd0a 	bl	800ee68 <siprintf>
	  		 strcat(Data_to_send, TempStr);
 8003454:	193a      	adds	r2, r7, r4
 8003456:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <main+0x36c>)
 8003458:	0011      	movs	r1, r2
 800345a:	0018      	movs	r0, r3
 800345c:	f00b fd24 	bl	800eea8 <strcat>
	  		 HAL_UART_Transmit_IT(&huart1,Data_to_send, 5);
 8003460:	4924      	ldr	r1, [pc, #144]	; (80034f4 <main+0x36c>)
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <main+0x338>)
 8003464:	2205      	movs	r2, #5
 8003466:	0018      	movs	r0, r3
 8003468:	f004 fba6 	bl	8007bb8 <HAL_UART_Transmit_IT>
	  		 SM.nextState= SM_STATE_READ_SENSORS;
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <main+0x348>)
 800346e:	2200      	movs	r2, #0
 8003470:	705a      	strb	r2, [r3, #1]
	  		 SM.state = SM.nextState;
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <main+0x348>)
 8003474:	785a      	ldrb	r2, [r3, #1]
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <main+0x348>)
 8003478:	701a      	strb	r2, [r3, #0]
	  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <main+0x368>)
 8003480:	0019      	movs	r1, r3
 8003482:	0010      	movs	r0, r2
 8003484:	f001 fb3f 	bl	8004b06 <HAL_GPIO_TogglePin>
	  	 default:
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <main+0x368>)
 800348a:	2201      	movs	r2, #1
 800348c:	2104      	movs	r1, #4
 800348e:	0018      	movs	r0, r3
 8003490:	f001 fb1c 	bl	8004acc <HAL_GPIO_WritePin>
	  if(QMC_read(&QMC_Data)==0)
 8003494:	e73d      	b.n	8003312 <main+0x18a>
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	20000214 	.word	0x20000214
 800349c:	20000539 	.word	0x20000539
 80034a0:	20000508 	.word	0x20000508
 80034a4:	20002694 	.word	0x20002694
 80034a8:	20000569 	.word	0x20000569
 80034ac:	20000260 	.word	0x20000260
 80034b0:	200026d0 	.word	0x200026d0
 80034b4:	20002664 	.word	0x20002664
 80034b8:	20000330 	.word	0x20000330
 80034bc:	2000265c 	.word	0x2000265c
 80034c0:	20000378 	.word	0x20000378
 80034c4:	20002660 	.word	0x20002660
 80034c8:	20000480 	.word	0x20000480
 80034cc:	200026ec 	.word	0x200026ec
 80034d0:	20002690 	.word	0x20002690
 80034d4:	200026b8 	.word	0x200026b8
 80034d8:	2000267c 	.word	0x2000267c
 80034dc:	200002ac 	.word	0x200002ac
 80034e0:	20002678 	.word	0x20002678
 80034e4:	080125c8 	.word	0x080125c8
 80034e8:	200015fc 	.word	0x200015fc
 80034ec:	200026bc 	.word	0x200026bc
 80034f0:	48000400 	.word	0x48000400
 80034f4:	20002628 	.word	0x20002628
 80034f8:	080125e0 	.word	0x080125e0

080034fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b095      	sub	sp, #84	; 0x54
 8003500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003502:	2420      	movs	r4, #32
 8003504:	193b      	adds	r3, r7, r4
 8003506:	0018      	movs	r0, r3
 8003508:	2330      	movs	r3, #48	; 0x30
 800350a:	001a      	movs	r2, r3
 800350c:	2100      	movs	r1, #0
 800350e:	f00b f834 	bl	800e57a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003512:	2310      	movs	r3, #16
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	0018      	movs	r0, r3
 8003518:	2310      	movs	r3, #16
 800351a:	001a      	movs	r2, r3
 800351c:	2100      	movs	r1, #0
 800351e:	f00b f82c 	bl	800e57a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003522:	003b      	movs	r3, r7
 8003524:	0018      	movs	r0, r3
 8003526:	2310      	movs	r3, #16
 8003528:	001a      	movs	r2, r3
 800352a:	2100      	movs	r1, #0
 800352c:	f00b f825 	bl	800e57a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003530:	0021      	movs	r1, r4
 8003532:	187b      	adds	r3, r7, r1
 8003534:	220a      	movs	r2, #10
 8003536:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2201      	movs	r2, #1
 800353c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800353e:	187b      	adds	r3, r7, r1
 8003540:	2210      	movs	r2, #16
 8003542:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003544:	187b      	adds	r3, r7, r1
 8003546:	2201      	movs	r2, #1
 8003548:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800354a:	187b      	adds	r3, r7, r1
 800354c:	2202      	movs	r2, #2
 800354e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003550:	187b      	adds	r3, r7, r1
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	0212      	lsls	r2, r2, #8
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003558:	187b      	adds	r3, r7, r1
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	0312      	lsls	r2, r2, #12
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2200      	movs	r2, #0
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003566:	187b      	adds	r3, r7, r1
 8003568:	0018      	movs	r0, r3
 800356a:	f002 f8e5 	bl	8005738 <HAL_RCC_OscConfig>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003572:	f000 fbfd 	bl	8003d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003576:	2110      	movs	r1, #16
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2207      	movs	r2, #7
 800357c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2202      	movs	r2, #2
 8003582:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003584:	187b      	adds	r3, r7, r1
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800358a:	187b      	adds	r3, r7, r1
 800358c:	2200      	movs	r2, #0
 800358e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003590:	187b      	adds	r3, r7, r1
 8003592:	2101      	movs	r1, #1
 8003594:	0018      	movs	r0, r3
 8003596:	f002 fbed 	bl	8005d74 <HAL_RCC_ClockConfig>
 800359a:	1e03      	subs	r3, r0, #0
 800359c:	d001      	beq.n	80035a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800359e:	f000 fbe7 	bl	8003d70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80035a2:	003b      	movs	r3, r7
 80035a4:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <SystemClock_Config+0xd8>)
 80035a6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80035a8:	003b      	movs	r3, r7
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80035ae:	003b      	movs	r3, r7
 80035b0:	2210      	movs	r2, #16
 80035b2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80035b4:	003b      	movs	r3, r7
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	0092      	lsls	r2, r2, #2
 80035ba:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035bc:	003b      	movs	r3, r7
 80035be:	0018      	movs	r0, r3
 80035c0:	f002 fd28 	bl	8006014 <HAL_RCCEx_PeriphCLKConfig>
 80035c4:	1e03      	subs	r3, r0, #0
 80035c6:	d001      	beq.n	80035cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80035c8:	f000 fbd2 	bl	8003d70 <Error_Handler>
  }
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b015      	add	sp, #84	; 0x54
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	00010021 	.word	0x00010021

080035d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <MX_I2C1_Init+0x74>)
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <MX_I2C1_Init+0x78>)
 80035e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <MX_I2C1_Init+0x74>)
 80035e4:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <MX_I2C1_Init+0x7c>)
 80035e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035e8:	4b18      	ldr	r3, [pc, #96]	; (800364c <MX_I2C1_Init+0x74>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035ee:	4b17      	ldr	r3, [pc, #92]	; (800364c <MX_I2C1_Init+0x74>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <MX_I2C1_Init+0x74>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <MX_I2C1_Init+0x74>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <MX_I2C1_Init+0x74>)
 8003602:	2200      	movs	r2, #0
 8003604:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <MX_I2C1_Init+0x74>)
 8003608:	2200      	movs	r2, #0
 800360a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <MX_I2C1_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <MX_I2C1_Init+0x74>)
 8003614:	0018      	movs	r0, r3
 8003616:	f001 faad 	bl	8004b74 <HAL_I2C_Init>
 800361a:	1e03      	subs	r3, r0, #0
 800361c:	d001      	beq.n	8003622 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800361e:	f000 fba7 	bl	8003d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <MX_I2C1_Init+0x74>)
 8003624:	2100      	movs	r1, #0
 8003626:	0018      	movs	r0, r3
 8003628:	f001 ffee 	bl	8005608 <HAL_I2CEx_ConfigAnalogFilter>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d001      	beq.n	8003634 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003630:	f000 fb9e 	bl	8003d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <MX_I2C1_Init+0x74>)
 8003636:	2100      	movs	r1, #0
 8003638:	0018      	movs	r0, r3
 800363a:	f002 f831 	bl	80056a0 <HAL_I2CEx_ConfigDigitalFilter>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d001      	beq.n	8003646 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003642:	f000 fb95 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000214 	.word	0x20000214
 8003650:	40005400 	.word	0x40005400
 8003654:	00707cbb 	.word	0x00707cbb

08003658 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <MX_I2C2_Init+0x74>)
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <MX_I2C2_Init+0x78>)
 8003660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x003038FF;
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <MX_I2C2_Init+0x74>)
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <MX_I2C2_Init+0x7c>)
 8003666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <MX_I2C2_Init+0x74>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <MX_I2C2_Init+0x74>)
 8003670:	2201      	movs	r2, #1
 8003672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <MX_I2C2_Init+0x74>)
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <MX_I2C2_Init+0x74>)
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <MX_I2C2_Init+0x74>)
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <MX_I2C2_Init+0x74>)
 8003688:	2200      	movs	r2, #0
 800368a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <MX_I2C2_Init+0x74>)
 800368e:	2200      	movs	r2, #0
 8003690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <MX_I2C2_Init+0x74>)
 8003694:	0018      	movs	r0, r3
 8003696:	f001 fa6d 	bl	8004b74 <HAL_I2C_Init>
 800369a:	1e03      	subs	r3, r0, #0
 800369c:	d001      	beq.n	80036a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800369e:	f000 fb67 	bl	8003d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <MX_I2C2_Init+0x74>)
 80036a4:	2100      	movs	r1, #0
 80036a6:	0018      	movs	r0, r3
 80036a8:	f001 ffae 	bl	8005608 <HAL_I2CEx_ConfigAnalogFilter>
 80036ac:	1e03      	subs	r3, r0, #0
 80036ae:	d001      	beq.n	80036b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80036b0:	f000 fb5e 	bl	8003d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <MX_I2C2_Init+0x74>)
 80036b6:	2100      	movs	r1, #0
 80036b8:	0018      	movs	r0, r3
 80036ba:	f001 fff1 	bl	80056a0 <HAL_I2CEx_ConfigDigitalFilter>
 80036be:	1e03      	subs	r3, r0, #0
 80036c0:	d001      	beq.n	80036c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80036c2:	f000 fb55 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000260 	.word	0x20000260
 80036d0:	40005800 	.word	0x40005800
 80036d4:	003038ff 	.word	0x003038ff

080036d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	0018      	movs	r0, r3
 80036e2:	2314      	movs	r3, #20
 80036e4:	001a      	movs	r2, r3
 80036e6:	2100      	movs	r1, #0
 80036e8:	f00a ff47 	bl	800e57a <memset>
  RTC_DateTypeDef sDate = {0};
 80036ec:	003b      	movs	r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <MX_RTC_Init+0xbc>)
 80036f4:	4a28      	ldr	r2, [pc, #160]	; (8003798 <MX_RTC_Init+0xc0>)
 80036f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <MX_RTC_Init+0xbc>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <MX_RTC_Init+0xbc>)
 8003700:	227f      	movs	r2, #127	; 0x7f
 8003702:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <MX_RTC_Init+0xbc>)
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <MX_RTC_Init+0xbc>)
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <MX_RTC_Init+0xbc>)
 8003712:	2200      	movs	r2, #0
 8003714:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003716:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <MX_RTC_Init+0xbc>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <MX_RTC_Init+0xbc>)
 800371e:	0018      	movs	r0, r3
 8003720:	f002 fd46 	bl	80061b0 <HAL_RTC_Init>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d001      	beq.n	800372c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8003728:	f000 fb22 	bl	8003d70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	2200      	movs	r2, #0
 8003736:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	2200      	movs	r2, #0
 800373c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	2200      	movs	r2, #0
 8003742:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800374a:	1d39      	adds	r1, r7, #4
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <MX_RTC_Init+0xbc>)
 800374e:	2201      	movs	r2, #1
 8003750:	0018      	movs	r0, r3
 8003752:	f002 fdc1 	bl	80062d8 <HAL_RTC_SetTime>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d001      	beq.n	800375e <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800375a:	f000 fb09 	bl	8003d70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800375e:	003b      	movs	r3, r7
 8003760:	2206      	movs	r2, #6
 8003762:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8003764:	003b      	movs	r3, r7
 8003766:	2202      	movs	r2, #2
 8003768:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x25;
 800376a:	003b      	movs	r3, r7
 800376c:	2225      	movs	r2, #37	; 0x25
 800376e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 8003770:	003b      	movs	r3, r7
 8003772:	2223      	movs	r2, #35	; 0x23
 8003774:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003776:	0039      	movs	r1, r7
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <MX_RTC_Init+0xbc>)
 800377a:	2201      	movs	r2, #1
 800377c:	0018      	movs	r0, r3
 800377e:	f002 fec5 	bl	800650c <HAL_RTC_SetDate>
 8003782:	1e03      	subs	r3, r0, #0
 8003784:	d001      	beq.n	800378a <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8003786:	f000 faf3 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b006      	add	sp, #24
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	200002ac 	.word	0x200002ac
 8003798:	40002800 	.word	0x40002800

0800379c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <MX_SPI1_Init+0x74>)
 80037a2:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <MX_SPI1_Init+0x78>)
 80037a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037a6:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <MX_SPI1_Init+0x74>)
 80037a8:	2282      	movs	r2, #130	; 0x82
 80037aa:	0052      	lsls	r2, r2, #1
 80037ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <MX_SPI1_Init+0x74>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <MX_SPI1_Init+0x74>)
 80037b6:	22e0      	movs	r2, #224	; 0xe0
 80037b8:	00d2      	lsls	r2, r2, #3
 80037ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037bc:	4b14      	ldr	r3, [pc, #80]	; (8003810 <MX_SPI1_Init+0x74>)
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <MX_SPI1_Init+0x74>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <MX_SPI1_Init+0x74>)
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	0092      	lsls	r2, r2, #2
 80037ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <MX_SPI1_Init+0x74>)
 80037d2:	2220      	movs	r2, #32
 80037d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <MX_SPI1_Init+0x74>)
 80037d8:	2200      	movs	r2, #0
 80037da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <MX_SPI1_Init+0x74>)
 80037de:	2200      	movs	r2, #0
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <MX_SPI1_Init+0x74>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <MX_SPI1_Init+0x74>)
 80037ea:	2207      	movs	r2, #7
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <MX_SPI1_Init+0x74>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <MX_SPI1_Init+0x74>)
 80037f6:	2208      	movs	r2, #8
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <MX_SPI1_Init+0x74>)
 80037fc:	0018      	movs	r0, r3
 80037fe:	f003 f811 	bl	8006824 <HAL_SPI_Init>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d001      	beq.n	800380a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003806:	f000 fab3 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200002cc 	.word	0x200002cc
 8003814:	40013000 	.word	0x40013000

08003818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800381e:	2308      	movs	r3, #8
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	0018      	movs	r0, r3
 8003824:	2310      	movs	r3, #16
 8003826:	001a      	movs	r2, r3
 8003828:	2100      	movs	r1, #0
 800382a:	f00a fea6 	bl	800e57a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800382e:	003b      	movs	r3, r7
 8003830:	0018      	movs	r0, r3
 8003832:	2308      	movs	r3, #8
 8003834:	001a      	movs	r2, r3
 8003836:	2100      	movs	r1, #0
 8003838:	f00a fe9f 	bl	800e57a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <MX_TIM3_Init+0xa4>)
 800383e:	4a20      	ldr	r2, [pc, #128]	; (80038c0 <MX_TIM3_Init+0xa8>)
 8003840:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <MX_TIM3_Init+0xa4>)
 8003844:	22fa      	movs	r2, #250	; 0xfa
 8003846:	01d2      	lsls	r2, r2, #7
 8003848:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <MX_TIM3_Init+0xa4>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <MX_TIM3_Init+0xa4>)
 8003852:	22fa      	movs	r2, #250	; 0xfa
 8003854:	0092      	lsls	r2, r2, #2
 8003856:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <MX_TIM3_Init+0xa4>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <MX_TIM3_Init+0xa4>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003864:	4b15      	ldr	r3, [pc, #84]	; (80038bc <MX_TIM3_Init+0xa4>)
 8003866:	0018      	movs	r0, r3
 8003868:	f003 fd34 	bl	80072d4 <HAL_TIM_Base_Init>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8003870:	f000 fa7e 	bl	8003d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003874:	2108      	movs	r1, #8
 8003876:	187b      	adds	r3, r7, r1
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	0152      	lsls	r2, r2, #5
 800387c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800387e:	187a      	adds	r2, r7, r1
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_TIM3_Init+0xa4>)
 8003882:	0011      	movs	r1, r2
 8003884:	0018      	movs	r0, r3
 8003886:	f003 fed7 	bl	8007638 <HAL_TIM_ConfigClockSource>
 800388a:	1e03      	subs	r3, r0, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800388e:	f000 fa6f 	bl	8003d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003892:	003b      	movs	r3, r7
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003898:	003b      	movs	r3, r7
 800389a:	2200      	movs	r2, #0
 800389c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800389e:	003a      	movs	r2, r7
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <MX_TIM3_Init+0xa4>)
 80038a2:	0011      	movs	r1, r2
 80038a4:	0018      	movs	r0, r3
 80038a6:	f004 f8cb 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 80038aa:	1e03      	subs	r3, r0, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80038ae:	f000 fa5f 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b006      	add	sp, #24
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	20000330 	.word	0x20000330
 80038c0:	40000400 	.word	0x40000400

080038c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038ca:	4a15      	ldr	r2, [pc, #84]	; (8003920 <MX_USART1_UART_Init+0x5c>)
 80038cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038d0:	2296      	movs	r2, #150	; 0x96
 80038d2:	0192      	lsls	r2, r2, #6
 80038d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038de:	2200      	movs	r2, #0
 80038e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038ea:	220c      	movs	r2, #12
 80038ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <MX_USART1_UART_Init+0x58>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <MX_USART1_UART_Init+0x58>)
 8003902:	2200      	movs	r2, #0
 8003904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <MX_USART1_UART_Init+0x58>)
 8003908:	0018      	movs	r0, r3
 800390a:	f004 f901 	bl	8007b10 <HAL_UART_Init>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003912:	f000 fa2d 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000378 	.word	0x20000378
 8003920:	40013800 	.word	0x40013800

08003924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <MX_USART2_UART_Init+0x58>)
 800392a:	4a15      	ldr	r2, [pc, #84]	; (8003980 <MX_USART2_UART_Init+0x5c>)
 800392c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <MX_USART2_UART_Init+0x58>)
 8003930:	2296      	movs	r2, #150	; 0x96
 8003932:	0192      	lsls	r2, r2, #6
 8003934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_USART2_UART_Init+0x58>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <MX_USART2_UART_Init+0x58>)
 800393e:	2200      	movs	r2, #0
 8003940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_USART2_UART_Init+0x58>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_USART2_UART_Init+0x58>)
 800394a:	220c      	movs	r2, #12
 800394c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <MX_USART2_UART_Init+0x58>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_USART2_UART_Init+0x58>)
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <MX_USART2_UART_Init+0x58>)
 800395c:	2200      	movs	r2, #0
 800395e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_USART2_UART_Init+0x58>)
 8003962:	2200      	movs	r2, #0
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <MX_USART2_UART_Init+0x58>)
 8003968:	0018      	movs	r0, r3
 800396a:	f004 f8d1 	bl	8007b10 <HAL_UART_Init>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003972:	f000 f9fd 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200003fc 	.word	0x200003fc
 8003980:	40004400 	.word	0x40004400

08003984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <MX_USART3_UART_Init+0x58>)
 800398a:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <MX_USART3_UART_Init+0x5c>)
 800398c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <MX_USART3_UART_Init+0x58>)
 8003990:	2296      	movs	r2, #150	; 0x96
 8003992:	0192      	lsls	r2, r2, #6
 8003994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <MX_USART3_UART_Init+0x58>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <MX_USART3_UART_Init+0x58>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <MX_USART3_UART_Init+0x58>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <MX_USART3_UART_Init+0x58>)
 80039aa:	220c      	movs	r2, #12
 80039ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <MX_USART3_UART_Init+0x58>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <MX_USART3_UART_Init+0x58>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <MX_USART3_UART_Init+0x58>)
 80039bc:	2200      	movs	r2, #0
 80039be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <MX_USART3_UART_Init+0x58>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <MX_USART3_UART_Init+0x58>)
 80039c8:	0018      	movs	r0, r3
 80039ca:	f004 f8a1 	bl	8007b10 <HAL_UART_Init>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d001      	beq.n	80039d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80039d2:	f000 f9cd 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000480 	.word	0x20000480
 80039e0:	40004800 	.word	0x40004800

080039e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ea:	240c      	movs	r4, #12
 80039ec:	193b      	adds	r3, r7, r4
 80039ee:	0018      	movs	r0, r3
 80039f0:	2314      	movs	r3, #20
 80039f2:	001a      	movs	r2, r3
 80039f4:	2100      	movs	r1, #0
 80039f6:	f00a fdc0 	bl	800e57a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fa:	4b37      	ldr	r3, [pc, #220]	; (8003ad8 <MX_GPIO_Init+0xf4>)
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <MX_GPIO_Init+0xf4>)
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	0289      	lsls	r1, r1, #10
 8003a04:	430a      	orrs	r2, r1
 8003a06:	615a      	str	r2, [r3, #20]
 8003a08:	4b33      	ldr	r3, [pc, #204]	; (8003ad8 <MX_GPIO_Init+0xf4>)
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	029b      	lsls	r3, r3, #10
 8003a10:	4013      	ands	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a16:	4b30      	ldr	r3, [pc, #192]	; (8003ad8 <MX_GPIO_Init+0xf4>)
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <MX_GPIO_Init+0xf4>)
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	02c9      	lsls	r1, r1, #11
 8003a20:	430a      	orrs	r2, r1
 8003a22:	615a      	str	r2, [r3, #20]
 8003a24:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <MX_GPIO_Init+0xf4>)
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	02db      	lsls	r3, r3, #11
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LED4_Pin, GPIO_PIN_RESET);
 8003a32:	2388      	movs	r3, #136	; 0x88
 8003a34:	0059      	lsls	r1, r3, #1
 8003a36:	2390      	movs	r3, #144	; 0x90
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f001 f845 	bl	8004acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|LED0_Pin|LED1_Pin|LED2_Pin
 8003a42:	4926      	ldr	r1, [pc, #152]	; (8003adc <MX_GPIO_Init+0xf8>)
 8003a44:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <MX_GPIO_Init+0xfc>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f001 f83f 	bl	8004acc <HAL_GPIO_WritePin>
                          |LED3_Pin|GAS_VALVE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SD_CS_Pin LED4_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LED4_Pin;
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	2288      	movs	r2, #136	; 0x88
 8003a52:	0052      	lsls	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	2201      	movs	r2, #1
 8003a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a62:	193b      	adds	r3, r7, r4
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	193a      	adds	r2, r7, r4
 8003a6a:	2390      	movs	r3, #144	; 0x90
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 febb 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a76:	0021      	movs	r1, r4
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2284      	movs	r2, #132	; 0x84
 8003a82:	0392      	lsls	r2, r2, #14
 8003a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8c:	000c      	movs	r4, r1
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <MX_GPIO_Init+0xfc>)
 8003a92:	0019      	movs	r1, r3
 8003a94:	0010      	movs	r0, r2
 8003a96:	f000 fea9 	bl	80047ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin GAS_VALVE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED0_Pin|LED1_Pin|LED2_Pin
 8003a9a:	0021      	movs	r1, r4
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <MX_GPIO_Init+0xf8>)
 8003aa0:	601a      	str	r2, [r3, #0]
                          |LED3_Pin|GAS_VALVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <MX_GPIO_Init+0xfc>)
 8003ab8:	0019      	movs	r1, r3
 8003aba:	0010      	movs	r0, r2
 8003abc:	f000 fe96 	bl	80047ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	2005      	movs	r0, #5
 8003ac6:	f000 fde1 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003aca:	2005      	movs	r0, #5
 8003acc:	f000 fdf3 	bl	80046b6 <HAL_NVIC_EnableIRQ>

}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b009      	add	sp, #36	; 0x24
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	0000f204 	.word	0x0000f204
 8003ae0:	48000400 	.word	0x48000400

08003ae4 <MY_SDCard_SetUp>:

/* USER CODE BEGIN 4 */

MYfilResult MY_SDCard_SetUp()
{
 8003ae4:	b5b0      	push	{r4, r5, r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	6078      	str	r0, [r7, #4]
	MYfilResult SD_FR;

	SD_FR.mount = f_mount(&FS, "", 0);
 8003aec:	4948      	ldr	r1, [pc, #288]	; (8003c10 <MY_SDCard_SetUp+0x12c>)
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <MY_SDCard_SetUp+0x130>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	0018      	movs	r0, r3
 8003af4:	f007 fca0 	bl	800b438 <f_mount>
 8003af8:	0003      	movs	r3, r0
 8003afa:	001a      	movs	r2, r3
 8003afc:	240c      	movs	r4, #12
 8003afe:	193b      	adds	r3, r7, r4
 8003b00:	701a      	strb	r2, [r3, #0]
	SD_FR.open = f_open(&fil, "IRBEX.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8003b02:	4945      	ldr	r1, [pc, #276]	; (8003c18 <MY_SDCard_SetUp+0x134>)
 8003b04:	4b45      	ldr	r3, [pc, #276]	; (8003c1c <MY_SDCard_SetUp+0x138>)
 8003b06:	2212      	movs	r2, #18
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f007 fce5 	bl	800b4d8 <f_open>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	001a      	movs	r2, r3
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	705a      	strb	r2, [r3, #1]
	if((SD_FR.mount == FR_OK) && (SD_FR.open == FR_OK))
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d16c      	bne.n	8003bfa <MY_SDCard_SetUp+0x116>
 8003b20:	193b      	adds	r3, r7, r4
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d167      	bne.n	8003bfa <MY_SDCard_SetUp+0x116>
	{
		SD_FR.freeSpace = f_getfree("", &SD_FR.freeCluster, &pFS);
 8003b2a:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <MY_SDCard_SetUp+0x13c>)
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	3310      	adds	r3, #16
 8003b30:	0019      	movs	r1, r3
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <MY_SDCard_SetUp+0x12c>)
 8003b34:	0018      	movs	r0, r3
 8003b36:	f008 fa55 	bl	800bfe4 <f_getfree>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	0020      	movs	r0, r4
 8003b40:	183b      	adds	r3, r7, r0
 8003b42:	709a      	strb	r2, [r3, #2]
		if(SD_FR.freeSpace == FR_OK)
 8003b44:	183b      	adds	r3, r7, r0
 8003b46:	789b      	ldrb	r3, [r3, #2]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d117      	bne.n	8003b7e <MY_SDCard_SetUp+0x9a>
		{
			SD_FR.mytotalSpace = (pFS -> n_fatent - 2) * (pFS -> csize);
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <MY_SDCard_SetUp+0x13c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a34      	ldr	r2, [pc, #208]	; (8003c24 <MY_SDCard_SetUp+0x140>)
 8003b54:	589b      	ldr	r3, [r3, r2]
 8003b56:	1e9a      	subs	r2, r3, #2
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <MY_SDCard_SetUp+0x13c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4932      	ldr	r1, [pc, #200]	; (8003c28 <MY_SDCard_SetUp+0x144>)
 8003b5e:	5c5b      	ldrb	r3, [r3, r1]
 8003b60:	435a      	muls	r2, r3
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	609a      	str	r2, [r3, #8]
			SD_FR.myfreeSpace = SD_FR.freeCluster * (pFS -> csize);
 8003b66:	183b      	adds	r3, r7, r0
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <MY_SDCard_SetUp+0x13c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	492e      	ldr	r1, [pc, #184]	; (8003c28 <MY_SDCard_SetUp+0x144>)
 8003b70:	5c5b      	ldrb	r3, [r3, r1]
 8003b72:	435a      	muls	r2, r3
 8003b74:	183b      	adds	r3, r7, r0
 8003b76:	60da      	str	r2, [r3, #12]

			SD_FR.statuss = 1;
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	711a      	strb	r2, [r3, #4]
		}

		if(SD_FR.statuss == 1)
 8003b7e:	250c      	movs	r5, #12
 8003b80:	197b      	adds	r3, r7, r5
 8003b82:	791b      	ldrb	r3, [r3, #4]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d137      	bne.n	8003bfa <MY_SDCard_SetUp+0x116>
		{
			//Write a meta date of data logger text fil
			f_printf(&fil, "IRBEX DATA LOGGER.\n");
 8003b8a:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <MY_SDCard_SetUp+0x148>)
 8003b8c:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <MY_SDCard_SetUp+0x138>)
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f008 fb4d 	bl	800c230 <f_printf>
			HAL_RTC_GetDate(&hrtc, &systemRTCDate, RTC_FORMAT_BIN);
 8003b96:	4926      	ldr	r1, [pc, #152]	; (8003c30 <MY_SDCard_SetUp+0x14c>)
 8003b98:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <MY_SDCard_SetUp+0x150>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f002 fd5b 	bl	8006658 <HAL_RTC_GetDate>
			f_printf(&fil, "Date: %d.%d.%d\n", systemRTCDate.Date, systemRTCDate.Month, systemRTCDate.Year);
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <MY_SDCard_SetUp+0x14c>)
 8003ba4:	789b      	ldrb	r3, [r3, #2]
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <MY_SDCard_SetUp+0x14c>)
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	001c      	movs	r4, r3
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <MY_SDCard_SetUp+0x14c>)
 8003bb0:	78db      	ldrb	r3, [r3, #3]
 8003bb2:	4921      	ldr	r1, [pc, #132]	; (8003c38 <MY_SDCard_SetUp+0x154>)
 8003bb4:	4819      	ldr	r0, [pc, #100]	; (8003c1c <MY_SDCard_SetUp+0x138>)
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	0023      	movs	r3, r4
 8003bba:	f008 fb39 	bl	800c230 <f_printf>
			f_printf(&fil, "SD Card memory total space = %d & free space = %d\n", SD_FR.mytotalSpace, SD_FR.myfreeSpace);
 8003bbe:	197b      	adds	r3, r7, r5
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	491d      	ldr	r1, [pc, #116]	; (8003c3c <MY_SDCard_SetUp+0x158>)
 8003bc8:	4814      	ldr	r0, [pc, #80]	; (8003c1c <MY_SDCard_SetUp+0x138>)
 8003bca:	f008 fb31 	bl	800c230 <f_printf>
			f_printf(&fil, "Hours\tMinutes\tSeconds\tInternal_Temp\tInternal_Pressure\t");
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <MY_SDCard_SetUp+0x15c>)
 8003bd0:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <MY_SDCard_SetUp+0x138>)
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f008 fb2b 	bl	800c230 <f_printf>
			SD_FR.statusSync = f_sync(&fil);
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <MY_SDCard_SetUp+0x138>)
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f008 f927 	bl	800be30 <f_sync>
 8003be2:	0003      	movs	r3, r0
 8003be4:	001a      	movs	r2, r3
 8003be6:	197b      	adds	r3, r7, r5
 8003be8:	70da      	strb	r2, [r3, #3]
			SD_FR.statusSync = f_sync(&fil);
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <MY_SDCard_SetUp+0x138>)
 8003bec:	0018      	movs	r0, r3
 8003bee:	f008 f91f 	bl	800be30 <f_sync>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	001a      	movs	r2, r3
 8003bf6:	197b      	adds	r3, r7, r5
 8003bf8:	70da      	strb	r2, [r3, #3]
		}
	}
	return SD_FR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	220c      	movs	r2, #12
 8003bfe:	18ba      	adds	r2, r7, r2
 8003c00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c02:	c313      	stmia	r3!, {r0, r1, r4}
 8003c04:	ca03      	ldmia	r2!, {r0, r1}
 8003c06:	c303      	stmia	r3!, {r0, r1}
}
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b008      	add	sp, #32
 8003c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c10:	080125e8 	.word	0x080125e8
 8003c14:	200005c8 	.word	0x200005c8
 8003c18:	080125ec 	.word	0x080125ec
 8003c1c:	200015fc 	.word	0x200015fc
 8003c20:	200015f8 	.word	0x200015f8
 8003c24:	00001014 	.word	0x00001014
 8003c28:	00001002 	.word	0x00001002
 8003c2c:	080125f8 	.word	0x080125f8
 8003c30:	20002678 	.word	0x20002678
 8003c34:	200002ac 	.word	0x200002ac
 8003c38:	0801260c 	.word	0x0801260c
 8003c3c:	0801261c 	.word	0x0801261c
 8003c40:	08012650 	.word	0x08012650

08003c44 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d108      	bne.n	8003c66 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		tim3Flag = 1;
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
		myCnt[0]++;
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003c64:	801a      	strh	r2, [r3, #0]
	}
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	20000330 	.word	0x20000330
 8003c74:	200026b8 	.word	0x200026b8
 8003c78:	200026bc 	.word	0x200026bc

08003c7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_UART_RxCpltCallback+0x9c>)
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d112      	bne.n	8003cb2 <HAL_UART_RxCpltCallback+0x36>
	{
		myCnt[2]++;
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <HAL_UART_RxCpltCallback+0xa0>)
 8003c8e:	889b      	ldrh	r3, [r3, #4]
 8003c90:	3301      	adds	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_UART_RxCpltCallback+0xa0>)
 8003c96:	809a      	strh	r2, [r3, #4]
		HAL_UART_Receive_IT(&huart1, Rx_command1, 1);
 8003c98:	4921      	ldr	r1, [pc, #132]	; (8003d20 <HAL_UART_RxCpltCallback+0xa4>)
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_UART_RxCpltCallback+0x9c>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f004 f80a 	bl	8007cb8 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	01db      	lsls	r3, r3, #7
 8003ca8:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <HAL_UART_RxCpltCallback+0xa8>)
 8003caa:	0019      	movs	r1, r3
 8003cac:	0010      	movs	r0, r2
 8003cae:	f000 ff2a 	bl	8004b06 <HAL_GPIO_TogglePin>
	}
	if (huart == &huart3)
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_UART_RxCpltCallback+0xac>)
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d129      	bne.n	8003d0e <HAL_UART_RxCpltCallback+0x92>
	{
		//myCnt[3]++;
		HAL_UART_Receive_IT(&huart3, Rx_command3, 1);
 8003cba:	491c      	ldr	r1, [pc, #112]	; (8003d2c <HAL_UART_RxCpltCallback+0xb0>)
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_UART_RxCpltCallback+0xac>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f003 fff9 	bl	8007cb8 <HAL_UART_Receive_IT>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
		if(Rx_command3[0] == 49){
 8003cc6:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_UART_RxCpltCallback+0xb0>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b31      	cmp	r3, #49	; 0x31
 8003ccc:	d10e      	bne.n	8003cec <HAL_UART_RxCpltCallback+0x70>
			myCnt[4]++;
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <HAL_UART_RxCpltCallback+0xa0>)
 8003cd0:	891b      	ldrh	r3, [r3, #8]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_UART_RxCpltCallback+0xa0>)
 8003cd8:	811a      	strh	r2, [r3, #8]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	005a      	lsls	r2, r3, #1
 8003cde:	2390      	movs	r3, #144	; 0x90
 8003ce0:	05db      	lsls	r3, r3, #23
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 ff0e 	bl	8004b06 <HAL_GPIO_TogglePin>
					myCnt[4]++;
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
				}
	}

}
 8003cea:	e010      	b.n	8003d0e <HAL_UART_RxCpltCallback+0x92>
		else if(Rx_command3[0] == 50){
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_UART_RxCpltCallback+0xb0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b32      	cmp	r3, #50	; 0x32
 8003cf2:	d10c      	bne.n	8003d0e <HAL_UART_RxCpltCallback+0x92>
					myCnt[4]++;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_UART_RxCpltCallback+0xa0>)
 8003cf6:	891b      	ldrh	r3, [r3, #8]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <HAL_UART_RxCpltCallback+0xa0>)
 8003cfe:	811a      	strh	r2, [r3, #8]
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <HAL_UART_RxCpltCallback+0xa8>)
 8003d06:	0019      	movs	r1, r3
 8003d08:	0010      	movs	r0, r2
 8003d0a:	f000 fefc 	bl	8004b06 <HAL_GPIO_TogglePin>
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20000378 	.word	0x20000378
 8003d1c:	200026bc 	.word	0x200026bc
 8003d20:	2000265c 	.word	0x2000265c
 8003d24:	48000400 	.word	0x48000400
 8003d28:	20000480 	.word	0x20000480
 8003d2c:	20002660 	.word	0x20002660

08003d30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	0002      	movs	r2, r0
 8003d38:	1dbb      	adds	r3, r7, #6
 8003d3a:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_0) {
 8003d3c:	1dbb      	adds	r3, r7, #6
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	0010      	movs	r0, r2
 8003d4e:	f000 feda 	bl	8004b06 <HAL_GPIO_TogglePin>
  } else {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
  }
}
 8003d52:	e006      	b.n	8003d62 <HAL_GPIO_EXTI_Callback+0x32>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	4804      	ldr	r0, [pc, #16]	; (8003d6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	f000 feb5 	bl	8004acc <HAL_GPIO_WritePin>
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	48000400 	.word	0x48000400

08003d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d74:	b672      	cpsid	i
}
 8003d76:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <Error_Handler+0x8>
	...

08003d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_MspInit+0x44>)
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <HAL_MspInit+0x44>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_MspInit+0x44>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	607b      	str	r3, [r7, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_MspInit+0x44>)
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <HAL_MspInit+0x44>)
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	0549      	lsls	r1, r1, #21
 8003da4:	430a      	orrs	r2, r1
 8003da6:	61da      	str	r2, [r3, #28]
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_MspInit+0x44>)
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	055b      	lsls	r3, r3, #21
 8003db0:	4013      	ands	r3, r2
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b08d      	sub	sp, #52	; 0x34
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	241c      	movs	r4, #28
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	2314      	movs	r3, #20
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f00a fbcf 	bl	800e57a <memset>
  if(hi2c->Instance==I2C1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a39      	ldr	r2, [pc, #228]	; (8003ec8 <HAL_I2C_MspInit+0x104>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d133      	bne.n	8003e4e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	02c9      	lsls	r1, r1, #11
 8003df0:	430a      	orrs	r2, r1
 8003df2:	615a      	str	r2, [r3, #20]
 8003df4:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	02db      	lsls	r3, r3, #11
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003e02:	193b      	adds	r3, r7, r4
 8003e04:	22c0      	movs	r2, #192	; 0xc0
 8003e06:	0052      	lsls	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e0a:	0021      	movs	r1, r4
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	2212      	movs	r2, #18
 8003e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	2201      	movs	r2, #1
 8003e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <HAL_I2C_MspInit+0x10c>)
 8003e28:	0019      	movs	r1, r3
 8003e2a:	0010      	movs	r0, r2
 8003e2c:	f000 fcde 	bl	80047ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e30:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	0389      	lsls	r1, r1, #14
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	61da      	str	r2, [r3, #28]
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	039b      	lsls	r3, r3, #14
 8003e46:	4013      	ands	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e4c:	e038      	b.n	8003ec0 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a20      	ldr	r2, [pc, #128]	; (8003ed4 <HAL_I2C_MspInit+0x110>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d133      	bne.n	8003ec0 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003e5e:	2180      	movs	r1, #128	; 0x80
 8003e60:	0289      	lsls	r1, r1, #10
 8003e62:	430a      	orrs	r2, r1
 8003e64:	615a      	str	r2, [r3, #20]
 8003e66:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003e74:	211c      	movs	r1, #28
 8003e76:	187b      	adds	r3, r7, r1
 8003e78:	22c0      	movs	r2, #192	; 0xc0
 8003e7a:	0152      	lsls	r2, r2, #5
 8003e7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	2212      	movs	r2, #18
 8003e82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8003e90:	187b      	adds	r3, r7, r1
 8003e92:	2205      	movs	r2, #5
 8003e94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e96:	187a      	adds	r2, r7, r1
 8003e98:	2390      	movs	r3, #144	; 0x90
 8003e9a:	05db      	lsls	r3, r3, #23
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 fca4 	bl	80047ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	03c9      	lsls	r1, r1, #15
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	61da      	str	r2, [r3, #28]
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_I2C_MspInit+0x108>)
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	03db      	lsls	r3, r3, #15
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b00d      	add	sp, #52	; 0x34
 8003ec6:	bd90      	pop	{r4, r7, pc}
 8003ec8:	40005400 	.word	0x40005400
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	48000400 	.word	0x48000400
 8003ed4:	40005800 	.word	0x40005800

08003ed8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <HAL_RTC_MspInit+0x28>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RTC_MspInit+0x2c>)
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RTC_MspInit+0x2c>)
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	0209      	lsls	r1, r1, #8
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b002      	add	sp, #8
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40002800 	.word	0x40002800
 8003f04:	40021000 	.word	0x40021000

08003f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b08b      	sub	sp, #44	; 0x2c
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	2414      	movs	r4, #20
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	0018      	movs	r0, r3
 8003f16:	2314      	movs	r3, #20
 8003f18:	001a      	movs	r2, r3
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	f00a fb2d 	bl	800e57a <memset>
  if(hspi->Instance==SPI1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <HAL_SPI_MspInit+0x90>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d132      	bne.n	8003f90 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <HAL_SPI_MspInit+0x94>)
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_SPI_MspInit+0x94>)
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	0149      	lsls	r1, r1, #5
 8003f34:	430a      	orrs	r2, r1
 8003f36:	619a      	str	r2, [r3, #24]
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_SPI_MspInit+0x94>)
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	015b      	lsls	r3, r3, #5
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_SPI_MspInit+0x94>)
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_SPI_MspInit+0x94>)
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	0289      	lsls	r1, r1, #10
 8003f50:	430a      	orrs	r2, r1
 8003f52:	615a      	str	r2, [r3, #20]
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_SPI_MspInit+0x94>)
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	029b      	lsls	r3, r3, #10
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f62:	0021      	movs	r1, r4
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	22e0      	movs	r2, #224	; 0xe0
 8003f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	2200      	movs	r2, #0
 8003f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f82:	187a      	adds	r2, r7, r1
 8003f84:	2390      	movs	r3, #144	; 0x90
 8003f86:	05db      	lsls	r3, r3, #23
 8003f88:	0011      	movs	r1, r2
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fc2e 	bl	80047ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b00b      	add	sp, #44	; 0x2c
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	40013000 	.word	0x40013000
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <HAL_TIM_Base_MspInit+0x44>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d113      	bne.n	8003fda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <HAL_TIM_Base_MspInit+0x48>)
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <HAL_TIM_Base_MspInit+0x48>)
 8003fb8:	2102      	movs	r1, #2
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	61da      	str	r2, [r3, #28]
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_TIM_Base_MspInit+0x48>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2100      	movs	r1, #0
 8003fce:	2010      	movs	r0, #16
 8003fd0:	f000 fb5c 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003fd4:	2010      	movs	r0, #16
 8003fd6:	f000 fb6e 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40021000 	.word	0x40021000

08003fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b08f      	sub	sp, #60	; 0x3c
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff4:	2424      	movs	r4, #36	; 0x24
 8003ff6:	193b      	adds	r3, r7, r4
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	2314      	movs	r3, #20
 8003ffc:	001a      	movs	r2, r3
 8003ffe:	2100      	movs	r1, #0
 8004000:	f00a fabb 	bl	800e57a <memset>
  if(huart->Instance==USART1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a62      	ldr	r2, [pc, #392]	; (8004194 <HAL_UART_MspInit+0x1a8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d13c      	bne.n	8004088 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800400e:	4b62      	ldr	r3, [pc, #392]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	01c9      	lsls	r1, r1, #7
 8004018:	430a      	orrs	r2, r1
 800401a:	619a      	str	r2, [r3, #24]
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	01db      	lsls	r3, r3, #7
 8004024:	4013      	ands	r3, r2
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402a:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	0289      	lsls	r1, r1, #10
 8004034:	430a      	orrs	r2, r1
 8004036:	615a      	str	r2, [r3, #20]
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	029b      	lsls	r3, r3, #10
 8004040:	4013      	ands	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004046:	193b      	adds	r3, r7, r4
 8004048:	22c0      	movs	r2, #192	; 0xc0
 800404a:	00d2      	lsls	r2, r2, #3
 800404c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	0021      	movs	r1, r4
 8004050:	187b      	adds	r3, r7, r1
 8004052:	2202      	movs	r2, #2
 8004054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	187b      	adds	r3, r7, r1
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2203      	movs	r2, #3
 8004060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004062:	187b      	adds	r3, r7, r1
 8004064:	2201      	movs	r2, #1
 8004066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004068:	187a      	adds	r2, r7, r1
 800406a:	2390      	movs	r3, #144	; 0x90
 800406c:	05db      	lsls	r3, r3, #23
 800406e:	0011      	movs	r1, r2
 8004070:	0018      	movs	r0, r3
 8004072:	f000 fbbb 	bl	80047ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	2100      	movs	r1, #0
 800407a:	201b      	movs	r0, #27
 800407c:	f000 fb06 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004080:	201b      	movs	r0, #27
 8004082:	f000 fb18 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004086:	e080      	b.n	800418a <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a43      	ldr	r2, [pc, #268]	; (800419c <HAL_UART_MspInit+0x1b0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d13b      	bne.n	800410a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0289      	lsls	r1, r1, #10
 800409c:	430a      	orrs	r2, r1
 800409e:	61da      	str	r2, [r3, #28]
 80040a0:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	029b      	lsls	r3, r3, #10
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ae:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	0289      	lsls	r1, r1, #10
 80040b8:	430a      	orrs	r2, r1
 80040ba:	615a      	str	r2, [r3, #20]
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	029b      	lsls	r3, r3, #10
 80040c4:	4013      	ands	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040ca:	2124      	movs	r1, #36	; 0x24
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	220c      	movs	r2, #12
 80040d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	2202      	movs	r2, #2
 80040d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	187b      	adds	r3, r7, r1
 80040da:	2200      	movs	r2, #0
 80040dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	2203      	movs	r2, #3
 80040e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	2201      	movs	r2, #1
 80040e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ea:	187a      	adds	r2, r7, r1
 80040ec:	2390      	movs	r3, #144	; 0x90
 80040ee:	05db      	lsls	r3, r3, #23
 80040f0:	0011      	movs	r1, r2
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 fb7a 	bl	80047ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2100      	movs	r1, #0
 80040fc:	201c      	movs	r0, #28
 80040fe:	f000 fac5 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004102:	201c      	movs	r0, #28
 8004104:	f000 fad7 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 8004108:	e03f      	b.n	800418a <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a24      	ldr	r2, [pc, #144]	; (80041a0 <HAL_UART_MspInit+0x1b4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d13a      	bne.n	800418a <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004114:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	02c9      	lsls	r1, r1, #11
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	02db      	lsls	r3, r3, #11
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	02c9      	lsls	r1, r1, #11
 800413a:	430a      	orrs	r2, r1
 800413c:	615a      	str	r2, [r3, #20]
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_UART_MspInit+0x1ac>)
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	02db      	lsls	r3, r3, #11
 8004146:	4013      	ands	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800414c:	2124      	movs	r1, #36	; 0x24
 800414e:	187b      	adds	r3, r7, r1
 8004150:	22c0      	movs	r2, #192	; 0xc0
 8004152:	0112      	lsls	r2, r2, #4
 8004154:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004156:	187b      	adds	r3, r7, r1
 8004158:	2202      	movs	r2, #2
 800415a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	187b      	adds	r3, r7, r1
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004162:	187b      	adds	r3, r7, r1
 8004164:	2203      	movs	r2, #3
 8004166:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004168:	187b      	adds	r3, r7, r1
 800416a:	2204      	movs	r2, #4
 800416c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416e:	187b      	adds	r3, r7, r1
 8004170:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <HAL_UART_MspInit+0x1b8>)
 8004172:	0019      	movs	r1, r3
 8004174:	0010      	movs	r0, r2
 8004176:	f000 fb39 	bl	80047ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	201d      	movs	r0, #29
 8004180:	f000 fa84 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8004184:	201d      	movs	r0, #29
 8004186:	f000 fa96 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b00f      	add	sp, #60	; 0x3c
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	40013800 	.word	0x40013800
 8004198:	40021000 	.word	0x40021000
 800419c:	40004400 	.word	0x40004400
 80041a0:	40004800 	.word	0x40004800
 80041a4:	48000400 	.word	0x48000400

080041a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041ac:	e7fe      	b.n	80041ac <NMI_Handler+0x4>

080041ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041b2:	e7fe      	b.n	80041b2 <HardFault_Handler+0x4>

080041b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041cc:	f000 f972 	bl	80044b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80041da:	2001      	movs	r0, #1
 80041dc:	f000 fcae 	bl	8004b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <TIM3_IRQHandler+0x14>)
 80041ee:	0018      	movs	r0, r3
 80041f0:	f003 f90c 	bl	800740c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	20000330 	.word	0x20000330

08004200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <USART1_IRQHandler+0x14>)
 8004206:	0018      	movs	r0, r3
 8004208:	f003 fdb8 	bl	8007d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	20000378 	.word	0x20000378

08004218 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <USART2_IRQHandler+0x14>)
 800421e:	0018      	movs	r0, r3
 8004220:	f003 fdac 	bl	8007d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	200003fc 	.word	0x200003fc

08004230 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <USART3_6_IRQHandler+0x14>)
 8004236:	0018      	movs	r0, r3
 8004238:	f003 fda0 	bl	8007d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	20000480 	.word	0x20000480

08004248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
	return 1;
 800424c:	2301      	movs	r3, #1
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_kill>:

int _kill(int pid, int sig)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800425e:	f00a f959 	bl	800e514 <__errno>
 8004262:	0003      	movs	r3, r0
 8004264:	2216      	movs	r2, #22
 8004266:	601a      	str	r2, [r3, #0]
	return -1;
 8004268:	2301      	movs	r3, #1
 800426a:	425b      	negs	r3, r3
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}

08004274 <_exit>:

void _exit (int status)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800427c:	2301      	movs	r3, #1
 800427e:	425a      	negs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff ffe5 	bl	8004254 <_kill>
	while (1) {}		/* Make sure we hang here */
 800428a:	e7fe      	b.n	800428a <_exit+0x16>

0800428c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e00a      	b.n	80042b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800429e:	e000      	b.n	80042a2 <_read+0x16>
 80042a0:	bf00      	nop
 80042a2:	0001      	movs	r1, r0
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	60ba      	str	r2, [r7, #8]
 80042aa:	b2ca      	uxtb	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	dbf0      	blt.n	800429e <_read+0x12>
	}

return len;
 80042bc:	687b      	ldr	r3, [r7, #4]
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b006      	add	sp, #24
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e009      	b.n	80042ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	60ba      	str	r2, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	0018      	movs	r0, r3
 80042e2:	e000      	b.n	80042e6 <_write+0x20>
 80042e4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3301      	adds	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dbf1      	blt.n	80042d8 <_write+0x12>
	}
	return len;
 80042f4:	687b      	ldr	r3, [r7, #4]
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b006      	add	sp, #24
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_close>:

int _close(int file)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
	return -1;
 8004306:	2301      	movs	r3, #1
 8004308:	425b      	negs	r3, r3
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}

08004312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	0192      	lsls	r2, r2, #6
 8004322:	605a      	str	r2, [r3, #4]
	return 0;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}

0800432e <_isatty>:

int _isatty(int file)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
	return 1;
 8004336:	2301      	movs	r3, #1
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}

08004340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
	return 0;
 800434c:	2300      	movs	r3, #0
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <_sbrk+0x5c>)
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <_sbrk+0x60>)
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <_sbrk+0x64>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <_sbrk+0x64>)
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <_sbrk+0x68>)
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <_sbrk+0x64>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	18d3      	adds	r3, r2, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	429a      	cmp	r2, r3
 8004386:	d207      	bcs.n	8004398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004388:	f00a f8c4 	bl	800e514 <__errno>
 800438c:	0003      	movs	r3, r0
 800438e:	220c      	movs	r2, #12
 8004390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004392:	2301      	movs	r3, #1
 8004394:	425b      	negs	r3, r3
 8004396:	e009      	b.n	80043ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <_sbrk+0x64>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	18d2      	adds	r2, r2, r3
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <_sbrk+0x64>)
 80043a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b006      	add	sp, #24
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20008000 	.word	0x20008000
 80043b8:	00000400 	.word	0x00000400
 80043bc:	200026f0 	.word	0x200026f0
 80043c0:	20002770 	.word	0x20002770

080043c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043d0:	480d      	ldr	r0, [pc, #52]	; (8004408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043d4:	480d      	ldr	r0, [pc, #52]	; (800440c <LoopForever+0x6>)
  ldr r1, =_edata
 80043d6:	490e      	ldr	r1, [pc, #56]	; (8004410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d8:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <LoopForever+0xe>)
  movs r3, #0
 80043da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043dc:	e002      	b.n	80043e4 <LoopCopyDataInit>

080043de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e2:	3304      	adds	r3, #4

080043e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e8:	d3f9      	bcc.n	80043de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043ec:	4c0b      	ldr	r4, [pc, #44]	; (800441c <LoopForever+0x16>)
  movs r3, #0
 80043ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f0:	e001      	b.n	80043f6 <LoopFillZerobss>

080043f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f4:	3204      	adds	r2, #4

080043f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f8:	d3fb      	bcc.n	80043f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043fa:	f7ff ffe3 	bl	80043c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80043fe:	f00a f88f 	bl	800e520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004402:	f7fe fec1 	bl	8003188 <main>

08004406 <LoopForever>:

LoopForever:
    b LoopForever
 8004406:	e7fe      	b.n	8004406 <LoopForever>
  ldr   r0, =_estack
 8004408:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004410:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004414:	08012da8 	.word	0x08012da8
  ldr r2, =_sbss
 8004418:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800441c:	2000276c 	.word	0x2000276c

08004420 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004420:	e7fe      	b.n	8004420 <ADC1_IRQHandler>
	...

08004424 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <HAL_Init+0x24>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_Init+0x24>)
 800442e:	2110      	movs	r1, #16
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004434:	2003      	movs	r0, #3
 8004436:	f000 f809 	bl	800444c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800443a:	f7ff fc9f 	bl	8003d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	40022000 	.word	0x40022000

0800444c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_InitTick+0x5c>)
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <HAL_InitTick+0x60>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	0019      	movs	r1, r3
 800445e:	23fa      	movs	r3, #250	; 0xfa
 8004460:	0098      	lsls	r0, r3, #2
 8004462:	f7fb fe6b 	bl	800013c <__udivsi3>
 8004466:	0003      	movs	r3, r0
 8004468:	0019      	movs	r1, r3
 800446a:	0020      	movs	r0, r4
 800446c:	f7fb fe66 	bl	800013c <__udivsi3>
 8004470:	0003      	movs	r3, r0
 8004472:	0018      	movs	r0, r3
 8004474:	f000 f92f 	bl	80046d6 <HAL_SYSTICK_Config>
 8004478:	1e03      	subs	r3, r0, #0
 800447a:	d001      	beq.n	8004480 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e00f      	b.n	80044a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d80b      	bhi.n	800449e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	2301      	movs	r3, #1
 800448a:	425b      	negs	r3, r3
 800448c:	2200      	movs	r2, #0
 800448e:	0018      	movs	r0, r3
 8004490:	f000 f8fc 	bl	800468c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_InitTick+0x64>)
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b003      	add	sp, #12
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	20000000 	.word	0x20000000
 80044ac:	20000008 	.word	0x20000008
 80044b0:	20000004 	.word	0x20000004

080044b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_IncTick+0x1c>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	001a      	movs	r2, r3
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_IncTick+0x20>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	18d2      	adds	r2, r2, r3
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_IncTick+0x20>)
 80044c6:	601a      	str	r2, [r3, #0]
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	20000008 	.word	0x20000008
 80044d4:	200026f4 	.word	0x200026f4

080044d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  return uwTick;
 80044dc:	4b02      	ldr	r3, [pc, #8]	; (80044e8 <HAL_GetTick+0x10>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	200026f4 	.word	0x200026f4

080044ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_GetTick>
 80044f8:	0003      	movs	r3, r0
 80044fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3301      	adds	r3, #1
 8004504:	d005      	beq.n	8004512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_Delay+0x44>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	001a      	movs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	189b      	adds	r3, r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	f7ff ffe0 	bl	80044d8 <HAL_GetTick>
 8004518:	0002      	movs	r2, r0
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	429a      	cmp	r2, r3
 8004522:	d8f7      	bhi.n	8004514 <HAL_Delay+0x28>
  {
  }
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	20000008 	.word	0x20000008

08004534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	0002      	movs	r2, r0
 800453c:	1dfb      	adds	r3, r7, #7
 800453e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b7f      	cmp	r3, #127	; 0x7f
 8004546:	d809      	bhi.n	800455c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004548:	1dfb      	adds	r3, r7, #7
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	001a      	movs	r2, r3
 800454e:	231f      	movs	r3, #31
 8004550:	401a      	ands	r2, r3
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <__NVIC_EnableIRQ+0x30>)
 8004554:	2101      	movs	r1, #1
 8004556:	4091      	lsls	r1, r2
 8004558:	000a      	movs	r2, r1
 800455a:	601a      	str	r2, [r3, #0]
  }
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}
 8004564:	e000e100 	.word	0xe000e100

08004568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	0002      	movs	r2, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	1dfb      	adds	r3, r7, #7
 8004574:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004576:	1dfb      	adds	r3, r7, #7
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b7f      	cmp	r3, #127	; 0x7f
 800457c:	d828      	bhi.n	80045d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <__NVIC_SetPriority+0xd4>)
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b25b      	sxtb	r3, r3
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	33c0      	adds	r3, #192	; 0xc0
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	589b      	ldr	r3, [r3, r2]
 800458e:	1dfa      	adds	r2, r7, #7
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	0011      	movs	r1, r2
 8004594:	2203      	movs	r2, #3
 8004596:	400a      	ands	r2, r1
 8004598:	00d2      	lsls	r2, r2, #3
 800459a:	21ff      	movs	r1, #255	; 0xff
 800459c:	4091      	lsls	r1, r2
 800459e:	000a      	movs	r2, r1
 80045a0:	43d2      	mvns	r2, r2
 80045a2:	401a      	ands	r2, r3
 80045a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	019b      	lsls	r3, r3, #6
 80045aa:	22ff      	movs	r2, #255	; 0xff
 80045ac:	401a      	ands	r2, r3
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	0018      	movs	r0, r3
 80045b4:	2303      	movs	r3, #3
 80045b6:	4003      	ands	r3, r0
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045bc:	481f      	ldr	r0, [pc, #124]	; (800463c <__NVIC_SetPriority+0xd4>)
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	430a      	orrs	r2, r1
 80045c8:	33c0      	adds	r3, #192	; 0xc0
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045ce:	e031      	b.n	8004634 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d0:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <__NVIC_SetPriority+0xd8>)
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	0019      	movs	r1, r3
 80045d8:	230f      	movs	r3, #15
 80045da:	400b      	ands	r3, r1
 80045dc:	3b08      	subs	r3, #8
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	3306      	adds	r3, #6
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	18d3      	adds	r3, r2, r3
 80045e6:	3304      	adds	r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	1dfa      	adds	r2, r7, #7
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	0011      	movs	r1, r2
 80045f0:	2203      	movs	r2, #3
 80045f2:	400a      	ands	r2, r1
 80045f4:	00d2      	lsls	r2, r2, #3
 80045f6:	21ff      	movs	r1, #255	; 0xff
 80045f8:	4091      	lsls	r1, r2
 80045fa:	000a      	movs	r2, r1
 80045fc:	43d2      	mvns	r2, r2
 80045fe:	401a      	ands	r2, r3
 8004600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	22ff      	movs	r2, #255	; 0xff
 8004608:	401a      	ands	r2, r3
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	0018      	movs	r0, r3
 8004610:	2303      	movs	r3, #3
 8004612:	4003      	ands	r3, r0
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <__NVIC_SetPriority+0xd8>)
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	001c      	movs	r4, r3
 8004620:	230f      	movs	r3, #15
 8004622:	4023      	ands	r3, r4
 8004624:	3b08      	subs	r3, #8
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	430a      	orrs	r2, r1
 800462a:	3306      	adds	r3, #6
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18c3      	adds	r3, r0, r3
 8004630:	3304      	adds	r3, #4
 8004632:	601a      	str	r2, [r3, #0]
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b003      	add	sp, #12
 800463a:	bd90      	pop	{r4, r7, pc}
 800463c:	e000e100 	.word	0xe000e100
 8004640:	e000ed00 	.word	0xe000ed00

08004644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1e5a      	subs	r2, r3, #1
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	045b      	lsls	r3, r3, #17
 8004654:	429a      	cmp	r2, r3
 8004656:	d301      	bcc.n	800465c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004658:	2301      	movs	r3, #1
 800465a:	e010      	b.n	800467e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <SysTick_Config+0x44>)
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	3a01      	subs	r2, #1
 8004662:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004664:	2301      	movs	r3, #1
 8004666:	425b      	negs	r3, r3
 8004668:	2103      	movs	r1, #3
 800466a:	0018      	movs	r0, r3
 800466c:	f7ff ff7c 	bl	8004568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <SysTick_Config+0x44>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <SysTick_Config+0x44>)
 8004678:	2207      	movs	r2, #7
 800467a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800467c:	2300      	movs	r3, #0
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b002      	add	sp, #8
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	e000e010 	.word	0xe000e010

0800468c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	210f      	movs	r1, #15
 8004698:	187b      	adds	r3, r7, r1
 800469a:	1c02      	adds	r2, r0, #0
 800469c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7ff ff5d 	bl	8004568 <__NVIC_SetPriority>
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	0002      	movs	r2, r0
 80046be:	1dfb      	adds	r3, r7, #7
 80046c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c2:	1dfb      	adds	r3, r7, #7
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b25b      	sxtb	r3, r3
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff ff33 	bl	8004534 <__NVIC_EnableIRQ>
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7ff ffaf 	bl	8004644 <SysTick_Config>
 80046e6:	0003      	movs	r3, r0
}
 80046e8:	0018      	movs	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2221      	movs	r2, #33	; 0x21
 80046fc:	5c9b      	ldrb	r3, [r3, r2]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d008      	beq.n	8004716 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2204      	movs	r2, #4
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e020      	b.n	8004758 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	210e      	movs	r1, #14
 8004722:	438a      	bics	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	438a      	bics	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2101      	movs	r1, #1
 8004740:	4091      	lsls	r1, r2
 8004742:	000a      	movs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2221      	movs	r2, #33	; 0x21
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	2100      	movs	r1, #0
 8004754:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b002      	add	sp, #8
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004768:	210f      	movs	r1, #15
 800476a:	187b      	adds	r3, r7, r1
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2221      	movs	r2, #33	; 0x21
 8004774:	5c9b      	ldrb	r3, [r3, r2]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d006      	beq.n	800478a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2204      	movs	r2, #4
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004782:	187b      	adds	r3, r7, r1
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e028      	b.n	80047dc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	210e      	movs	r1, #14
 8004796:	438a      	bics	r2, r1
 8004798:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	438a      	bics	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	2101      	movs	r1, #1
 80047b4:	4091      	lsls	r1, r2
 80047b6:	000a      	movs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2221      	movs	r2, #33	; 0x21
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	2100      	movs	r1, #0
 80047c8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	0010      	movs	r0, r2
 80047da:	4798      	blx	r3
    } 
  }
  return status;
 80047dc:	230f      	movs	r3, #15
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	781b      	ldrb	r3, [r3, #0]
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b004      	add	sp, #16
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047fa:	e14f      	b.n	8004a9c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2101      	movs	r1, #1
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4091      	lsls	r1, r2
 8004806:	000a      	movs	r2, r1
 8004808:	4013      	ands	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d100      	bne.n	8004814 <HAL_GPIO_Init+0x28>
 8004812:	e140      	b.n	8004a96 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2203      	movs	r2, #3
 800481a:	4013      	ands	r3, r2
 800481c:	2b01      	cmp	r3, #1
 800481e:	d005      	beq.n	800482c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2203      	movs	r2, #3
 8004826:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004828:	2b02      	cmp	r3, #2
 800482a:	d130      	bne.n	800488e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	2203      	movs	r2, #3
 8004838:	409a      	lsls	r2, r3
 800483a:	0013      	movs	r3, r2
 800483c:	43da      	mvns	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	409a      	lsls	r2, r3
 800484e:	0013      	movs	r3, r2
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004862:	2201      	movs	r2, #1
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	409a      	lsls	r2, r3
 8004868:	0013      	movs	r3, r2
 800486a:	43da      	mvns	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	2201      	movs	r2, #1
 800487a:	401a      	ands	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	409a      	lsls	r2, r3
 8004880:	0013      	movs	r3, r2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2203      	movs	r2, #3
 8004894:	4013      	ands	r3, r2
 8004896:	2b03      	cmp	r3, #3
 8004898:	d017      	beq.n	80048ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	2203      	movs	r2, #3
 80048a6:	409a      	lsls	r2, r3
 80048a8:	0013      	movs	r3, r2
 80048aa:	43da      	mvns	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	409a      	lsls	r2, r3
 80048bc:	0013      	movs	r3, r2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2203      	movs	r2, #3
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d123      	bne.n	800491e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	08da      	lsrs	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3208      	adds	r2, #8
 80048de:	0092      	lsls	r2, r2, #2
 80048e0:	58d3      	ldr	r3, [r2, r3]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2207      	movs	r2, #7
 80048e8:	4013      	ands	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	409a      	lsls	r2, r3
 80048f0:	0013      	movs	r3, r2
 80048f2:	43da      	mvns	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2107      	movs	r1, #7
 8004902:	400b      	ands	r3, r1
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	409a      	lsls	r2, r3
 8004908:	0013      	movs	r3, r2
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	0092      	lsls	r2, r2, #2
 800491a:	6939      	ldr	r1, [r7, #16]
 800491c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	409a      	lsls	r2, r3
 800492c:	0013      	movs	r3, r2
 800492e:	43da      	mvns	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2203      	movs	r2, #3
 800493c:	401a      	ands	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	409a      	lsls	r2, r3
 8004944:	0013      	movs	r3, r2
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	23c0      	movs	r3, #192	; 0xc0
 8004958:	029b      	lsls	r3, r3, #10
 800495a:	4013      	ands	r3, r2
 800495c:	d100      	bne.n	8004960 <HAL_GPIO_Init+0x174>
 800495e:	e09a      	b.n	8004a96 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004960:	4b54      	ldr	r3, [pc, #336]	; (8004ab4 <HAL_GPIO_Init+0x2c8>)
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	4b53      	ldr	r3, [pc, #332]	; (8004ab4 <HAL_GPIO_Init+0x2c8>)
 8004966:	2101      	movs	r1, #1
 8004968:	430a      	orrs	r2, r1
 800496a:	619a      	str	r2, [r3, #24]
 800496c:	4b51      	ldr	r3, [pc, #324]	; (8004ab4 <HAL_GPIO_Init+0x2c8>)
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004978:	4a4f      	ldr	r2, [pc, #316]	; (8004ab8 <HAL_GPIO_Init+0x2cc>)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	3302      	adds	r3, #2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	589b      	ldr	r3, [r3, r2]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2203      	movs	r2, #3
 800498a:	4013      	ands	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	220f      	movs	r2, #15
 8004990:	409a      	lsls	r2, r3
 8004992:	0013      	movs	r3, r2
 8004994:	43da      	mvns	r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	2390      	movs	r3, #144	; 0x90
 80049a0:	05db      	lsls	r3, r3, #23
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d013      	beq.n	80049ce <HAL_GPIO_Init+0x1e2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a44      	ldr	r2, [pc, #272]	; (8004abc <HAL_GPIO_Init+0x2d0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00d      	beq.n	80049ca <HAL_GPIO_Init+0x1de>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a43      	ldr	r2, [pc, #268]	; (8004ac0 <HAL_GPIO_Init+0x2d4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <HAL_GPIO_Init+0x1da>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a42      	ldr	r2, [pc, #264]	; (8004ac4 <HAL_GPIO_Init+0x2d8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_GPIO_Init+0x1d6>
 80049be:	2303      	movs	r3, #3
 80049c0:	e006      	b.n	80049d0 <HAL_GPIO_Init+0x1e4>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e004      	b.n	80049d0 <HAL_GPIO_Init+0x1e4>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e002      	b.n	80049d0 <HAL_GPIO_Init+0x1e4>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <HAL_GPIO_Init+0x1e4>
 80049ce:	2300      	movs	r3, #0
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	2103      	movs	r1, #3
 80049d4:	400a      	ands	r2, r1
 80049d6:	0092      	lsls	r2, r2, #2
 80049d8:	4093      	lsls	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049e0:	4935      	ldr	r1, [pc, #212]	; (8004ab8 <HAL_GPIO_Init+0x2cc>)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	3302      	adds	r3, #2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	43da      	mvns	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4013      	ands	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	025b      	lsls	r3, r3, #9
 8004a06:	4013      	ands	r3, r2
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004a18:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4013      	ands	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	029b      	lsls	r3, r3, #10
 8004a30:	4013      	ands	r3, r2
 8004a32:	d003      	beq.n	8004a3c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a42:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	035b      	lsls	r3, r3, #13
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	43da      	mvns	r2, r3
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	039b      	lsls	r3, r3, #14
 8004a84:	4013      	ands	r3, r2
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a90:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <HAL_GPIO_Init+0x2dc>)
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	40da      	lsrs	r2, r3
 8004aa4:	1e13      	subs	r3, r2, #0
 8004aa6:	d000      	beq.n	8004aaa <HAL_GPIO_Init+0x2be>
 8004aa8:	e6a8      	b.n	80047fc <HAL_GPIO_Init+0x10>
  } 
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46c0      	nop			; (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b006      	add	sp, #24
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	48000400 	.word	0x48000400
 8004ac0:	48000800 	.word	0x48000800
 8004ac4:	48000c00 	.word	0x48000c00
 8004ac8:	40010400 	.word	0x40010400

08004acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	0008      	movs	r0, r1
 8004ad6:	0011      	movs	r1, r2
 8004ad8:	1cbb      	adds	r3, r7, #2
 8004ada:	1c02      	adds	r2, r0, #0
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	1c7b      	adds	r3, r7, #1
 8004ae0:	1c0a      	adds	r2, r1, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ae4:	1c7b      	adds	r3, r7, #1
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aec:	1cbb      	adds	r3, r7, #2
 8004aee:	881a      	ldrh	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004af4:	e003      	b.n	8004afe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004af6:	1cbb      	adds	r3, r7, #2
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	000a      	movs	r2, r1
 8004b10:	1cbb      	adds	r3, r7, #2
 8004b12:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b1a:	1cbb      	adds	r3, r7, #2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4013      	ands	r3, r2
 8004b22:	041a      	lsls	r2, r3, #16
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	1cb9      	adds	r1, r7, #2
 8004b2a:	8809      	ldrh	r1, [r1, #0]
 8004b2c:	400b      	ands	r3, r1
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	619a      	str	r2, [r3, #24]
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b004      	add	sp, #16
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	0002      	movs	r2, r0
 8004b44:	1dbb      	adds	r3, r7, #6
 8004b46:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	1dba      	adds	r2, r7, #6
 8004b4e:	8812      	ldrh	r2, [r2, #0]
 8004b50:	4013      	ands	r3, r2
 8004b52:	d008      	beq.n	8004b66 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004b56:	1dba      	adds	r2, r7, #6
 8004b58:	8812      	ldrh	r2, [r2, #0]
 8004b5a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b5c:	1dbb      	adds	r3, r7, #6
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f7ff f8e5 	bl	8003d30 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b002      	add	sp, #8
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	40010400 	.word	0x40010400

08004b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e082      	b.n	8004c8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2241      	movs	r2, #65	; 0x41
 8004b8a:	5c9b      	ldrb	r3, [r3, r2]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2240      	movs	r2, #64	; 0x40
 8004b96:	2100      	movs	r1, #0
 8004b98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff f911 	bl	8003dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2241      	movs	r2, #65	; 0x41
 8004ba6:	2124      	movs	r1, #36	; 0x24
 8004ba8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4934      	ldr	r1, [pc, #208]	; (8004c94 <HAL_I2C_Init+0x120>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4931      	ldr	r1, [pc, #196]	; (8004c98 <HAL_I2C_Init+0x124>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d108      	bne.n	8004bf2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	0209      	lsls	r1, r1, #8
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	e007      	b.n	8004c02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2184      	movs	r1, #132	; 0x84
 8004bfc:	0209      	lsls	r1, r1, #8
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d104      	bne.n	8004c14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	0112      	lsls	r2, r2, #4
 8004c12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	491f      	ldr	r1, [pc, #124]	; (8004c9c <HAL_I2C_Init+0x128>)
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	491a      	ldr	r1, [pc, #104]	; (8004c98 <HAL_I2C_Init+0x124>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69d9      	ldr	r1, [r3, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2101      	movs	r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2241      	movs	r2, #65	; 0x41
 8004c78:	2120      	movs	r1, #32
 8004c7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2242      	movs	r2, #66	; 0x42
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	f0ffffff 	.word	0xf0ffffff
 8004c98:	ffff7fff 	.word	0xffff7fff
 8004c9c:	02008000 	.word	0x02008000

08004ca0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	000c      	movs	r4, r1
 8004caa:	0010      	movs	r0, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	230a      	movs	r3, #10
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	1c22      	adds	r2, r4, #0
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	1c02      	adds	r2, r0, #0
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	1dbb      	adds	r3, r7, #6
 8004cc0:	1c0a      	adds	r2, r1, #0
 8004cc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2241      	movs	r2, #65	; 0x41
 8004cc8:	5c9b      	ldrb	r3, [r3, r2]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d000      	beq.n	8004cd2 <HAL_I2C_Mem_Write+0x32>
 8004cd0:	e10c      	b.n	8004eec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_I2C_Mem_Write+0x42>
 8004cd8:	232c      	movs	r3, #44	; 0x2c
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	0092      	lsls	r2, r2, #2
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0ff      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2240      	movs	r2, #64	; 0x40
 8004cf2:	5c9b      	ldrb	r3, [r3, r2]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_I2C_Mem_Write+0x5c>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e0f8      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	2101      	movs	r1, #1
 8004d02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d04:	f7ff fbe8 	bl	80044d8 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	0219      	lsls	r1, r3, #8
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	2319      	movs	r3, #25
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f000 fb0b 	bl	8005334 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	1e03      	subs	r3, r0, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0e3      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2241      	movs	r2, #65	; 0x41
 8004d2a:	2121      	movs	r1, #33	; 0x21
 8004d2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2242      	movs	r2, #66	; 0x42
 8004d32:	2140      	movs	r1, #64	; 0x40
 8004d34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	222c      	movs	r2, #44	; 0x2c
 8004d46:	18ba      	adds	r2, r7, r2
 8004d48:	8812      	ldrh	r2, [r2, #0]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d52:	1dbb      	adds	r3, r7, #6
 8004d54:	881c      	ldrh	r4, [r3, #0]
 8004d56:	2308      	movs	r3, #8
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	881a      	ldrh	r2, [r3, #0]
 8004d5c:	230a      	movs	r3, #10
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	8819      	ldrh	r1, [r3, #0]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	0023      	movs	r3, r4
 8004d6e:	f000 f9f9 	bl	8005164 <I2C_RequestMemoryWrite>
 8004d72:	1e03      	subs	r3, r0, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2240      	movs	r2, #64	; 0x40
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0b5      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2bff      	cmp	r3, #255	; 0xff
 8004d8a:	d911      	bls.n	8004db0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	22ff      	movs	r2, #255	; 0xff
 8004d90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	045c      	lsls	r4, r3, #17
 8004d9c:	230a      	movs	r3, #10
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	8819      	ldrh	r1, [r3, #0]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	2300      	movs	r3, #0
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	0023      	movs	r3, r4
 8004daa:	f000 fbf7 	bl	800559c <I2C_TransferConfig>
 8004dae:	e012      	b.n	8004dd6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	049c      	lsls	r4, r3, #18
 8004dc4:	230a      	movs	r3, #10
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	8819      	ldrh	r1, [r3, #0]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	0023      	movs	r3, r4
 8004dd2:	f000 fbe3 	bl	800559c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f000 fae8 	bl	80053b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004de2:	1e03      	subs	r3, r0, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e081      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	781a      	ldrb	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d03a      	beq.n	8004e9a <HAL_I2C_Mem_Write+0x1fa>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d136      	bne.n	8004e9a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	0013      	movs	r3, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	f000 fa7b 	bl	8005334 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	1e03      	subs	r3, r0, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e053      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2bff      	cmp	r3, #255	; 0xff
 8004e4e:	d911      	bls.n	8004e74 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	045c      	lsls	r4, r3, #17
 8004e60:	230a      	movs	r3, #10
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	8819      	ldrh	r1, [r3, #0]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	0023      	movs	r3, r4
 8004e6e:	f000 fb95 	bl	800559c <I2C_TransferConfig>
 8004e72:	e012      	b.n	8004e9a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	049c      	lsls	r4, r3, #18
 8004e88:	230a      	movs	r3, #10
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	8819      	ldrh	r1, [r3, #0]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	2300      	movs	r3, #0
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	0023      	movs	r3, r4
 8004e96:	f000 fb81 	bl	800559c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d198      	bne.n	8004dd6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 fac0 	bl	8005430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eb0:	1e03      	subs	r3, r0, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e01a      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	490b      	ldr	r1, [pc, #44]	; (8004ef8 <HAL_I2C_Mem_Write+0x258>)
 8004ecc:	400a      	ands	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2241      	movs	r2, #65	; 0x41
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2242      	movs	r2, #66	; 0x42
 8004edc:	2100      	movs	r1, #0
 8004ede:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e000      	b.n	8004eee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
  }
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b007      	add	sp, #28
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	fe00e800 	.word	0xfe00e800

08004efc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	000c      	movs	r4, r1
 8004f06:	0010      	movs	r0, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	1c22      	adds	r2, r4, #0
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	2308      	movs	r3, #8
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	1c02      	adds	r2, r0, #0
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	1dbb      	adds	r3, r7, #6
 8004f1c:	1c0a      	adds	r2, r1, #0
 8004f1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2241      	movs	r2, #65	; 0x41
 8004f24:	5c9b      	ldrb	r3, [r3, r2]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d000      	beq.n	8004f2e <HAL_I2C_Mem_Read+0x32>
 8004f2c:	e110      	b.n	8005150 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <HAL_I2C_Mem_Read+0x42>
 8004f34:	232c      	movs	r3, #44	; 0x2c
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	0092      	lsls	r2, r2, #2
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e103      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2240      	movs	r2, #64	; 0x40
 8004f4e:	5c9b      	ldrb	r3, [r3, r2]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_I2C_Mem_Read+0x5c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e0fc      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2240      	movs	r2, #64	; 0x40
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f60:	f7ff faba 	bl	80044d8 <HAL_GetTick>
 8004f64:	0003      	movs	r3, r0
 8004f66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	0219      	lsls	r1, r3, #8
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2319      	movs	r3, #25
 8004f74:	2201      	movs	r2, #1
 8004f76:	f000 f9dd 	bl	8005334 <I2C_WaitOnFlagUntilTimeout>
 8004f7a:	1e03      	subs	r3, r0, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0e7      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2241      	movs	r2, #65	; 0x41
 8004f86:	2122      	movs	r1, #34	; 0x22
 8004f88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2242      	movs	r2, #66	; 0x42
 8004f8e:	2140      	movs	r1, #64	; 0x40
 8004f90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	222c      	movs	r2, #44	; 0x2c
 8004fa2:	18ba      	adds	r2, r7, r2
 8004fa4:	8812      	ldrh	r2, [r2, #0]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fae:	1dbb      	adds	r3, r7, #6
 8004fb0:	881c      	ldrh	r4, [r3, #0]
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	230a      	movs	r3, #10
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	8819      	ldrh	r1, [r3, #0]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	0023      	movs	r3, r4
 8004fca:	f000 f92f 	bl	800522c <I2C_RequestMemoryRead>
 8004fce:	1e03      	subs	r3, r0, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2240      	movs	r2, #64	; 0x40
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0b9      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2bff      	cmp	r3, #255	; 0xff
 8004fe6:	d911      	bls.n	800500c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22ff      	movs	r2, #255	; 0xff
 8004fec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	045c      	lsls	r4, r3, #17
 8004ff8:	230a      	movs	r3, #10
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	8819      	ldrh	r1, [r3, #0]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	4b56      	ldr	r3, [pc, #344]	; (800515c <HAL_I2C_Mem_Read+0x260>)
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	0023      	movs	r3, r4
 8005006:	f000 fac9 	bl	800559c <I2C_TransferConfig>
 800500a:	e012      	b.n	8005032 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	b2da      	uxtb	r2, r3
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	049c      	lsls	r4, r3, #18
 8005020:	230a      	movs	r3, #10
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	8819      	ldrh	r1, [r3, #0]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	4b4c      	ldr	r3, [pc, #304]	; (800515c <HAL_I2C_Mem_Read+0x260>)
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	0023      	movs	r3, r4
 800502e:	f000 fab5 	bl	800559c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	0013      	movs	r3, r2
 800503c:	2200      	movs	r2, #0
 800503e:	2104      	movs	r1, #4
 8005040:	f000 f978 	bl	8005334 <I2C_WaitOnFlagUntilTimeout>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d001      	beq.n	800504c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e082      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d03a      	beq.n	80050fe <HAL_I2C_Mem_Read+0x202>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	d136      	bne.n	80050fe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	0013      	movs	r3, r2
 800509a:	2200      	movs	r2, #0
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	f000 f949 	bl	8005334 <I2C_WaitOnFlagUntilTimeout>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e053      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2bff      	cmp	r3, #255	; 0xff
 80050b2:	d911      	bls.n	80050d8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	22ff      	movs	r2, #255	; 0xff
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	045c      	lsls	r4, r3, #17
 80050c4:	230a      	movs	r3, #10
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	8819      	ldrh	r1, [r3, #0]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	2300      	movs	r3, #0
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	0023      	movs	r3, r4
 80050d2:	f000 fa63 	bl	800559c <I2C_TransferConfig>
 80050d6:	e012      	b.n	80050fe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	049c      	lsls	r4, r3, #18
 80050ec:	230a      	movs	r3, #10
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	8819      	ldrh	r1, [r3, #0]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	0023      	movs	r3, r4
 80050fa:	f000 fa4f 	bl	800559c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d194      	bne.n	8005032 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	0018      	movs	r0, r3
 8005110:	f000 f98e 	bl	8005430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005114:	1e03      	subs	r3, r0, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e01a      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2220      	movs	r2, #32
 8005122:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	490c      	ldr	r1, [pc, #48]	; (8005160 <HAL_I2C_Mem_Read+0x264>)
 8005130:	400a      	ands	r2, r1
 8005132:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2241      	movs	r2, #65	; 0x41
 8005138:	2120      	movs	r1, #32
 800513a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2242      	movs	r2, #66	; 0x42
 8005140:	2100      	movs	r1, #0
 8005142:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2240      	movs	r2, #64	; 0x40
 8005148:	2100      	movs	r1, #0
 800514a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	0018      	movs	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	b007      	add	sp, #28
 8005158:	bd90      	pop	{r4, r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	80002400 	.word	0x80002400
 8005160:	fe00e800 	.word	0xfe00e800

08005164 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005164:	b5b0      	push	{r4, r5, r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	000c      	movs	r4, r1
 800516e:	0010      	movs	r0, r2
 8005170:	0019      	movs	r1, r3
 8005172:	250a      	movs	r5, #10
 8005174:	197b      	adds	r3, r7, r5
 8005176:	1c22      	adds	r2, r4, #0
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	2308      	movs	r3, #8
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	1c02      	adds	r2, r0, #0
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	1dbb      	adds	r3, r7, #6
 8005184:	1c0a      	adds	r2, r1, #0
 8005186:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	045c      	lsls	r4, r3, #17
 8005192:	197b      	adds	r3, r7, r5
 8005194:	8819      	ldrh	r1, [r3, #0]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	4b23      	ldr	r3, [pc, #140]	; (8005228 <I2C_RequestMemoryWrite+0xc4>)
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	0023      	movs	r3, r4
 800519e:	f000 f9fd 	bl	800559c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f902 	bl	80053b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d001      	beq.n	80051b6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e033      	b.n	800521e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051b6:	1dbb      	adds	r3, r7, #6
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051be:	2308      	movs	r3, #8
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
 80051cc:	e019      	b.n	8005202 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051ce:	2308      	movs	r3, #8
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	0a1b      	lsrs	r3, r3, #8
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	6a39      	ldr	r1, [r7, #32]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 f8e3 	bl	80053b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051ec:	1e03      	subs	r3, r0, #0
 80051ee:	d001      	beq.n	80051f4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e014      	b.n	800521e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051f4:	2308      	movs	r3, #8
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	0013      	movs	r3, r2
 800520c:	2200      	movs	r2, #0
 800520e:	2180      	movs	r1, #128	; 0x80
 8005210:	f000 f890 	bl	8005334 <I2C_WaitOnFlagUntilTimeout>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d001      	beq.n	800521c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	0018      	movs	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	b004      	add	sp, #16
 8005224:	bdb0      	pop	{r4, r5, r7, pc}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	80002000 	.word	0x80002000

0800522c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800522c:	b5b0      	push	{r4, r5, r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	000c      	movs	r4, r1
 8005236:	0010      	movs	r0, r2
 8005238:	0019      	movs	r1, r3
 800523a:	250a      	movs	r5, #10
 800523c:	197b      	adds	r3, r7, r5
 800523e:	1c22      	adds	r2, r4, #0
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	2308      	movs	r3, #8
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	1c02      	adds	r2, r0, #0
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	1dbb      	adds	r3, r7, #6
 800524c:	1c0a      	adds	r2, r1, #0
 800524e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005250:	1dbb      	adds	r3, r7, #6
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	197b      	adds	r3, r7, r5
 8005258:	8819      	ldrh	r1, [r3, #0]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	4b23      	ldr	r3, [pc, #140]	; (80052ec <I2C_RequestMemoryRead+0xc0>)
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	f000 f99b 	bl	800559c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	6a39      	ldr	r1, [r7, #32]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	0018      	movs	r0, r3
 800526e:	f000 f8a0 	bl	80053b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005272:	1e03      	subs	r3, r0, #0
 8005274:	d001      	beq.n	800527a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e033      	b.n	80052e2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800527a:	1dbb      	adds	r3, r7, #6
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d107      	bne.n	8005292 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005282:	2308      	movs	r3, #8
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	629a      	str	r2, [r3, #40]	; 0x28
 8005290:	e019      	b.n	80052c6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005292:	2308      	movs	r3, #8
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	b29b      	uxth	r3, r3
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a6:	6a39      	ldr	r1, [r7, #32]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 f881 	bl	80053b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80052b0:	1e03      	subs	r3, r0, #0
 80052b2:	d001      	beq.n	80052b8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e014      	b.n	80052e2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052b8:	2308      	movs	r3, #8
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	0013      	movs	r3, r2
 80052d0:	2200      	movs	r2, #0
 80052d2:	2140      	movs	r1, #64	; 0x40
 80052d4:	f000 f82e 	bl	8005334 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d001      	beq.n	80052e0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	0018      	movs	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b004      	add	sp, #16
 80052e8:	bdb0      	pop	{r4, r5, r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	80002000 	.word	0x80002000

080052f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2202      	movs	r2, #2
 8005300:	4013      	ands	r3, r2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d103      	bne.n	800530e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2201      	movs	r2, #1
 8005316:	4013      	ands	r3, r2
 8005318:	2b01      	cmp	r3, #1
 800531a:	d007      	beq.n	800532c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2101      	movs	r1, #1
 8005328:	430a      	orrs	r2, r1
 800532a:	619a      	str	r2, [r3, #24]
  }
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	b002      	add	sp, #8
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	1dfb      	adds	r3, r7, #7
 8005342:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005344:	e021      	b.n	800538a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	d01e      	beq.n	800538a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534c:	f7ff f8c4 	bl	80044d8 <HAL_GetTick>
 8005350:	0002      	movs	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d113      	bne.n	800538a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	2220      	movs	r2, #32
 8005368:	431a      	orrs	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2241      	movs	r2, #65	; 0x41
 8005372:	2120      	movs	r1, #32
 8005374:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2242      	movs	r2, #66	; 0x42
 800537a:	2100      	movs	r1, #0
 800537c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2240      	movs	r2, #64	; 0x40
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e00f      	b.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	425a      	negs	r2, r3
 800539a:	4153      	adcs	r3, r2
 800539c:	b2db      	uxtb	r3, r3
 800539e:	001a      	movs	r2, r3
 80053a0:	1dfb      	adds	r3, r7, #7
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d0ce      	beq.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b004      	add	sp, #16
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053be:	e02b      	b.n	8005418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 f86e 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d001      	beq.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e029      	b.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	3301      	adds	r3, #1
 80053d8:	d01e      	beq.n	8005418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7ff f87d 	bl	80044d8 <HAL_GetTick>
 80053de:	0002      	movs	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d113      	bne.n	8005418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f4:	2220      	movs	r2, #32
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2241      	movs	r2, #65	; 0x41
 8005400:	2120      	movs	r1, #32
 8005402:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2242      	movs	r2, #66	; 0x42
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2240      	movs	r2, #64	; 0x40
 8005410:	2100      	movs	r1, #0
 8005412:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e007      	b.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2202      	movs	r2, #2
 8005420:	4013      	ands	r3, r2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d1cc      	bne.n	80053c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b004      	add	sp, #16
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800543c:	e028      	b.n	8005490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	0018      	movs	r0, r3
 8005446:	f000 f82f 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d001      	beq.n	8005452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e026      	b.n	80054a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7ff f841 	bl	80044d8 <HAL_GetTick>
 8005456:	0002      	movs	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d113      	bne.n	8005490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	2220      	movs	r2, #32
 800546e:	431a      	orrs	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2241      	movs	r2, #65	; 0x41
 8005478:	2120      	movs	r1, #32
 800547a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2242      	movs	r2, #66	; 0x42
 8005480:	2100      	movs	r1, #0
 8005482:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2240      	movs	r2, #64	; 0x40
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2220      	movs	r2, #32
 8005498:	4013      	ands	r3, r2
 800549a:	2b20      	cmp	r3, #32
 800549c:	d1cf      	bne.n	800543e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b004      	add	sp, #16
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2210      	movs	r2, #16
 80054bc:	4013      	ands	r3, r2
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d164      	bne.n	800558c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	049b      	lsls	r3, r3, #18
 80054cc:	401a      	ands	r2, r3
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	049b      	lsls	r3, r3, #18
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d02b      	beq.n	800552e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	01c9      	lsls	r1, r1, #7
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e8:	e021      	b.n	800552e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	3301      	adds	r3, #1
 80054ee:	d01e      	beq.n	800552e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f0:	f7fe fff2 	bl	80044d8 <HAL_GetTick>
 80054f4:	0002      	movs	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <I2C_IsAcknowledgeFailed+0x5e>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	2220      	movs	r2, #32
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2241      	movs	r2, #65	; 0x41
 8005516:	2120      	movs	r1, #32
 8005518:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2242      	movs	r2, #66	; 0x42
 800551e:	2100      	movs	r1, #0
 8005520:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2240      	movs	r2, #64	; 0x40
 8005526:	2100      	movs	r1, #0
 8005528:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02f      	b.n	800558e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2220      	movs	r2, #32
 8005536:	4013      	ands	r3, r2
 8005538:	2b20      	cmp	r3, #32
 800553a:	d1d6      	bne.n	80054ea <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2210      	movs	r2, #16
 8005542:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2220      	movs	r2, #32
 800554a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	0018      	movs	r0, r3
 8005550:	f7ff fece 	bl	80052f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	490e      	ldr	r1, [pc, #56]	; (8005598 <I2C_IsAcknowledgeFailed+0xf0>)
 8005560:	400a      	ands	r2, r1
 8005562:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	2204      	movs	r2, #4
 800556a:	431a      	orrs	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2241      	movs	r2, #65	; 0x41
 8005574:	2120      	movs	r1, #32
 8005576:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2242      	movs	r2, #66	; 0x42
 800557c:	2100      	movs	r1, #0
 800557e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2240      	movs	r2, #64	; 0x40
 8005584:	2100      	movs	r1, #0
 8005586:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	0018      	movs	r0, r3
 8005590:	46bd      	mov	sp, r7
 8005592:	b004      	add	sp, #16
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	fe00e800 	.word	0xfe00e800

0800559c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800559c:	b590      	push	{r4, r7, lr}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	0008      	movs	r0, r1
 80055a6:	0011      	movs	r1, r2
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	240a      	movs	r4, #10
 80055ac:	193b      	adds	r3, r7, r4
 80055ae:	1c02      	adds	r2, r0, #0
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	2009      	movs	r0, #9
 80055b4:	183b      	adds	r3, r7, r0
 80055b6:	1c0a      	adds	r2, r1, #0
 80055b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	0d51      	lsrs	r1, r2, #21
 80055c4:	2280      	movs	r2, #128	; 0x80
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	400a      	ands	r2, r1
 80055ca:	490e      	ldr	r1, [pc, #56]	; (8005604 <I2C_TransferConfig+0x68>)
 80055cc:	430a      	orrs	r2, r1
 80055ce:	43d2      	mvns	r2, r2
 80055d0:	401a      	ands	r2, r3
 80055d2:	0011      	movs	r1, r2
 80055d4:	193b      	adds	r3, r7, r4
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	059b      	lsls	r3, r3, #22
 80055da:	0d9a      	lsrs	r2, r3, #22
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	0418      	lsls	r0, r3, #16
 80055e2:	23ff      	movs	r3, #255	; 0xff
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	4003      	ands	r3, r0
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b005      	add	sp, #20
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	03ff63ff 	.word	0x03ff63ff

08005608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2241      	movs	r2, #65	; 0x41
 8005616:	5c9b      	ldrb	r3, [r3, r2]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b20      	cmp	r3, #32
 800561c:	d138      	bne.n	8005690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2240      	movs	r2, #64	; 0x40
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005628:	2302      	movs	r3, #2
 800562a:	e032      	b.n	8005692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	2101      	movs	r1, #1
 8005632:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2241      	movs	r2, #65	; 0x41
 8005638:	2124      	movs	r1, #36	; 0x24
 800563a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2101      	movs	r1, #1
 8005648:	438a      	bics	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4911      	ldr	r1, [pc, #68]	; (800569c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005658:	400a      	ands	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2101      	movs	r1, #1
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2241      	movs	r2, #65	; 0x41
 8005680:	2120      	movs	r1, #32
 8005682:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	2100      	movs	r1, #0
 800568a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b002      	add	sp, #8
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	ffffefff 	.word	0xffffefff

080056a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2241      	movs	r2, #65	; 0x41
 80056ae:	5c9b      	ldrb	r3, [r3, r2]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d139      	bne.n	800572a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	5c9b      	ldrb	r3, [r3, r2]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e033      	b.n	800572c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	2101      	movs	r1, #1
 80056ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2241      	movs	r2, #65	; 0x41
 80056d0:	2124      	movs	r1, #36	; 0x24
 80056d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2101      	movs	r1, #1
 80056e0:	438a      	bics	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a11      	ldr	r2, [pc, #68]	; (8005734 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2101      	movs	r1, #1
 8005712:	430a      	orrs	r2, r1
 8005714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2241      	movs	r2, #65	; 0x41
 800571a:	2120      	movs	r1, #32
 800571c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2240      	movs	r2, #64	; 0x40
 8005722:	2100      	movs	r1, #0
 8005724:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
  }
}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b004      	add	sp, #16
 8005732:	bd80      	pop	{r7, pc}
 8005734:	fffff0ff 	.word	0xfffff0ff

08005738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e305      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2201      	movs	r2, #1
 8005750:	4013      	ands	r3, r2
 8005752:	d100      	bne.n	8005756 <HAL_RCC_OscConfig+0x1e>
 8005754:	e08d      	b.n	8005872 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005756:	4bc5      	ldr	r3, [pc, #788]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	220c      	movs	r2, #12
 800575c:	4013      	ands	r3, r2
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00e      	beq.n	8005780 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005762:	4bc2      	ldr	r3, [pc, #776]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	220c      	movs	r2, #12
 8005768:	4013      	ands	r3, r2
 800576a:	2b08      	cmp	r3, #8
 800576c:	d116      	bne.n	800579c <HAL_RCC_OscConfig+0x64>
 800576e:	4bbf      	ldr	r3, [pc, #764]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	025b      	lsls	r3, r3, #9
 8005776:	401a      	ands	r2, r3
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	025b      	lsls	r3, r3, #9
 800577c:	429a      	cmp	r2, r3
 800577e:	d10d      	bne.n	800579c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005780:	4bba      	ldr	r3, [pc, #744]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	029b      	lsls	r3, r3, #10
 8005788:	4013      	ands	r3, r2
 800578a:	d100      	bne.n	800578e <HAL_RCC_OscConfig+0x56>
 800578c:	e070      	b.n	8005870 <HAL_RCC_OscConfig+0x138>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d000      	beq.n	8005798 <HAL_RCC_OscConfig+0x60>
 8005796:	e06b      	b.n	8005870 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e2dc      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <HAL_RCC_OscConfig+0x7c>
 80057a4:	4bb1      	ldr	r3, [pc, #708]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4bb0      	ldr	r3, [pc, #704]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	0249      	lsls	r1, r1, #9
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e02f      	b.n	8005814 <HAL_RCC_OscConfig+0xdc>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10c      	bne.n	80057d6 <HAL_RCC_OscConfig+0x9e>
 80057bc:	4bab      	ldr	r3, [pc, #684]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4baa      	ldr	r3, [pc, #680]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057c2:	49ab      	ldr	r1, [pc, #684]	; (8005a70 <HAL_RCC_OscConfig+0x338>)
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	4ba8      	ldr	r3, [pc, #672]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4ba7      	ldr	r3, [pc, #668]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057ce:	49a9      	ldr	r1, [pc, #676]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 80057d0:	400a      	ands	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e01e      	b.n	8005814 <HAL_RCC_OscConfig+0xdc>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b05      	cmp	r3, #5
 80057dc:	d10e      	bne.n	80057fc <HAL_RCC_OscConfig+0xc4>
 80057de:	4ba3      	ldr	r3, [pc, #652]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4ba2      	ldr	r3, [pc, #648]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	02c9      	lsls	r1, r1, #11
 80057e8:	430a      	orrs	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	4b9f      	ldr	r3, [pc, #636]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	4b9e      	ldr	r3, [pc, #632]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057f2:	2180      	movs	r1, #128	; 0x80
 80057f4:	0249      	lsls	r1, r1, #9
 80057f6:	430a      	orrs	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0xdc>
 80057fc:	4b9b      	ldr	r3, [pc, #620]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b9a      	ldr	r3, [pc, #616]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005802:	499b      	ldr	r1, [pc, #620]	; (8005a70 <HAL_RCC_OscConfig+0x338>)
 8005804:	400a      	ands	r2, r1
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	4b98      	ldr	r3, [pc, #608]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b97      	ldr	r3, [pc, #604]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 800580e:	4999      	ldr	r1, [pc, #612]	; (8005a74 <HAL_RCC_OscConfig+0x33c>)
 8005810:	400a      	ands	r2, r1
 8005812:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d014      	beq.n	8005846 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fe fe5c 	bl	80044d8 <HAL_GetTick>
 8005820:	0003      	movs	r3, r0
 8005822:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005826:	f7fe fe57 	bl	80044d8 <HAL_GetTick>
 800582a:	0002      	movs	r2, r0
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b64      	cmp	r3, #100	; 0x64
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e28e      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005838:	4b8c      	ldr	r3, [pc, #560]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	4013      	ands	r3, r2
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0xee>
 8005844:	e015      	b.n	8005872 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005846:	f7fe fe47 	bl	80044d8 <HAL_GetTick>
 800584a:	0003      	movs	r3, r0
 800584c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005850:	f7fe fe42 	bl	80044d8 <HAL_GetTick>
 8005854:	0002      	movs	r2, r0
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e279      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005862:	4b82      	ldr	r3, [pc, #520]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	029b      	lsls	r3, r3, #10
 800586a:	4013      	ands	r3, r2
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x118>
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2202      	movs	r2, #2
 8005878:	4013      	ands	r3, r2
 800587a:	d100      	bne.n	800587e <HAL_RCC_OscConfig+0x146>
 800587c:	e06c      	b.n	8005958 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800587e:	4b7b      	ldr	r3, [pc, #492]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	220c      	movs	r2, #12
 8005884:	4013      	ands	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005888:	4b78      	ldr	r3, [pc, #480]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	220c      	movs	r2, #12
 800588e:	4013      	ands	r3, r2
 8005890:	2b08      	cmp	r3, #8
 8005892:	d11f      	bne.n	80058d4 <HAL_RCC_OscConfig+0x19c>
 8005894:	4b75      	ldr	r3, [pc, #468]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	025b      	lsls	r3, r3, #9
 800589c:	401a      	ands	r2, r3
 800589e:	2380      	movs	r3, #128	; 0x80
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d116      	bne.n	80058d4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	4b71      	ldr	r3, [pc, #452]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2202      	movs	r2, #2
 80058ac:	4013      	ands	r3, r2
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_OscConfig+0x184>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e24c      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	4b6b      	ldr	r3, [pc, #428]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	22f8      	movs	r2, #248	; 0xf8
 80058c2:	4393      	bics	r3, r2
 80058c4:	0019      	movs	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00da      	lsls	r2, r3, #3
 80058cc:	4b67      	ldr	r3, [pc, #412]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80058ce:	430a      	orrs	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d2:	e041      	b.n	8005958 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d024      	beq.n	8005926 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058dc:	4b63      	ldr	r3, [pc, #396]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b62      	ldr	r3, [pc, #392]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80058e2:	2101      	movs	r1, #1
 80058e4:	430a      	orrs	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fe fdf6 	bl	80044d8 <HAL_GetTick>
 80058ec:	0003      	movs	r3, r0
 80058ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f2:	f7fe fdf1 	bl	80044d8 <HAL_GetTick>
 80058f6:	0002      	movs	r2, r0
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e228      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2202      	movs	r2, #2
 800590a:	4013      	ands	r3, r2
 800590c:	d0f1      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590e:	4b57      	ldr	r3, [pc, #348]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	22f8      	movs	r2, #248	; 0xf8
 8005914:	4393      	bics	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	00da      	lsls	r2, r3, #3
 800591e:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005920:	430a      	orrs	r2, r1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e018      	b.n	8005958 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005926:	4b51      	ldr	r3, [pc, #324]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b50      	ldr	r3, [pc, #320]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 800592c:	2101      	movs	r1, #1
 800592e:	438a      	bics	r2, r1
 8005930:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fe fdd1 	bl	80044d8 <HAL_GetTick>
 8005936:	0003      	movs	r3, r0
 8005938:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800593c:	f7fe fdcc 	bl	80044d8 <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e203      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594e:	4b47      	ldr	r3, [pc, #284]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2202      	movs	r2, #2
 8005954:	4013      	ands	r3, r2
 8005956:	d1f1      	bne.n	800593c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2208      	movs	r2, #8
 800595e:	4013      	ands	r3, r2
 8005960:	d036      	beq.n	80059d0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d019      	beq.n	800599e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 800596c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800596e:	4b3f      	ldr	r3, [pc, #252]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005970:	2101      	movs	r1, #1
 8005972:	430a      	orrs	r2, r1
 8005974:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005976:	f7fe fdaf 	bl	80044d8 <HAL_GetTick>
 800597a:	0003      	movs	r3, r0
 800597c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005980:	f7fe fdaa 	bl	80044d8 <HAL_GetTick>
 8005984:	0002      	movs	r2, r0
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e1e1      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2202      	movs	r2, #2
 8005998:	4013      	ands	r3, r2
 800599a:	d0f1      	beq.n	8005980 <HAL_RCC_OscConfig+0x248>
 800599c:	e018      	b.n	80059d0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800599e:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80059a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a2:	4b32      	ldr	r3, [pc, #200]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80059a4:	2101      	movs	r1, #1
 80059a6:	438a      	bics	r2, r1
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059aa:	f7fe fd95 	bl	80044d8 <HAL_GetTick>
 80059ae:	0003      	movs	r3, r0
 80059b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fe fd90 	bl	80044d8 <HAL_GetTick>
 80059b8:	0002      	movs	r2, r0
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e1c7      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2202      	movs	r2, #2
 80059cc:	4013      	ands	r3, r2
 80059ce:	d1f1      	bne.n	80059b4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2204      	movs	r2, #4
 80059d6:	4013      	ands	r3, r2
 80059d8:	d100      	bne.n	80059dc <HAL_RCC_OscConfig+0x2a4>
 80059da:	e0b5      	b.n	8005b48 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059dc:	201f      	movs	r0, #31
 80059de:	183b      	adds	r3, r7, r0
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e4:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	055b      	lsls	r3, r3, #21
 80059ec:	4013      	ands	r3, r2
 80059ee:	d110      	bne.n	8005a12 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f0:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	0549      	lsls	r1, r1, #21
 80059fa:	430a      	orrs	r2, r1
 80059fc:	61da      	str	r2, [r3, #28]
 80059fe:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	055b      	lsls	r3, r3, #21
 8005a06:	4013      	ands	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a0c:	183b      	adds	r3, r7, r0
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a12:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCC_OscConfig+0x340>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d11a      	bne.n	8005a54 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1e:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <HAL_RCC_OscConfig+0x340>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <HAL_RCC_OscConfig+0x340>)
 8005a24:	2180      	movs	r1, #128	; 0x80
 8005a26:	0049      	lsls	r1, r1, #1
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2c:	f7fe fd54 	bl	80044d8 <HAL_GetTick>
 8005a30:	0003      	movs	r3, r0
 8005a32:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a36:	f7fe fd4f 	bl	80044d8 <HAL_GetTick>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b64      	cmp	r3, #100	; 0x64
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e186      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCC_OscConfig+0x340>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4013      	ands	r3, r2
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d10f      	bne.n	8005a7c <HAL_RCC_OscConfig+0x344>
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	4b02      	ldr	r3, [pc, #8]	; (8005a6c <HAL_RCC_OscConfig+0x334>)
 8005a62:	2101      	movs	r1, #1
 8005a64:	430a      	orrs	r2, r1
 8005a66:	621a      	str	r2, [r3, #32]
 8005a68:	e036      	b.n	8005ad8 <HAL_RCC_OscConfig+0x3a0>
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	fffeffff 	.word	0xfffeffff
 8005a74:	fffbffff 	.word	0xfffbffff
 8005a78:	40007000 	.word	0x40007000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCC_OscConfig+0x366>
 8005a84:	4bb6      	ldr	r3, [pc, #728]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	4bb5      	ldr	r3, [pc, #724]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	438a      	bics	r2, r1
 8005a8e:	621a      	str	r2, [r3, #32]
 8005a90:	4bb3      	ldr	r3, [pc, #716]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	4bb2      	ldr	r3, [pc, #712]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005a96:	2104      	movs	r1, #4
 8005a98:	438a      	bics	r2, r1
 8005a9a:	621a      	str	r2, [r3, #32]
 8005a9c:	e01c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x3a0>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x388>
 8005aa6:	4bae      	ldr	r3, [pc, #696]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	4bad      	ldr	r3, [pc, #692]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005aac:	2104      	movs	r1, #4
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	621a      	str	r2, [r3, #32]
 8005ab2:	4bab      	ldr	r3, [pc, #684]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	4baa      	ldr	r3, [pc, #680]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005ab8:	2101      	movs	r1, #1
 8005aba:	430a      	orrs	r2, r1
 8005abc:	621a      	str	r2, [r3, #32]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x3a0>
 8005ac0:	4ba7      	ldr	r3, [pc, #668]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	4ba6      	ldr	r3, [pc, #664]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	438a      	bics	r2, r1
 8005aca:	621a      	str	r2, [r3, #32]
 8005acc:	4ba4      	ldr	r3, [pc, #656]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	4ba3      	ldr	r3, [pc, #652]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	438a      	bics	r2, r1
 8005ad6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d014      	beq.n	8005b0a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae0:	f7fe fcfa 	bl	80044d8 <HAL_GetTick>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	e009      	b.n	8005afe <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fe fcf5 	bl	80044d8 <HAL_GetTick>
 8005aee:	0002      	movs	r2, r0
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	4a9b      	ldr	r2, [pc, #620]	; (8005d64 <HAL_RCC_OscConfig+0x62c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e12b      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afe:	4b98      	ldr	r3, [pc, #608]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	2202      	movs	r2, #2
 8005b04:	4013      	ands	r3, r2
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x3b2>
 8005b08:	e013      	b.n	8005b32 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0a:	f7fe fce5 	bl	80044d8 <HAL_GetTick>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b12:	e009      	b.n	8005b28 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7fe fce0 	bl	80044d8 <HAL_GetTick>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	4a91      	ldr	r2, [pc, #580]	; (8005d64 <HAL_RCC_OscConfig+0x62c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e116      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b28:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b32:	231f      	movs	r3, #31
 8005b34:	18fb      	adds	r3, r7, r3
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3c:	4b88      	ldr	r3, [pc, #544]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	4b87      	ldr	r3, [pc, #540]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b42:	4989      	ldr	r1, [pc, #548]	; (8005d68 <HAL_RCC_OscConfig+0x630>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2210      	movs	r2, #16
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d063      	beq.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d12a      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b5a:	4b81      	ldr	r3, [pc, #516]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5e:	4b80      	ldr	r3, [pc, #512]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b60:	2104      	movs	r1, #4
 8005b62:	430a      	orrs	r2, r1
 8005b64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005b66:	4b7e      	ldr	r3, [pc, #504]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b6a:	4b7d      	ldr	r3, [pc, #500]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b72:	f7fe fcb1 	bl	80044d8 <HAL_GetTick>
 8005b76:	0003      	movs	r3, r0
 8005b78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005b7c:	f7fe fcac 	bl	80044d8 <HAL_GetTick>
 8005b80:	0002      	movs	r2, r0
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e0e3      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b8e:	4b74      	ldr	r3, [pc, #464]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	2202      	movs	r2, #2
 8005b94:	4013      	ands	r3, r2
 8005b96:	d0f1      	beq.n	8005b7c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b98:	4b71      	ldr	r3, [pc, #452]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	22f8      	movs	r2, #248	; 0xf8
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	00da      	lsls	r2, r3, #3
 8005ba8:	4b6d      	ldr	r3, [pc, #436]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005baa:	430a      	orrs	r2, r1
 8005bac:	635a      	str	r2, [r3, #52]	; 0x34
 8005bae:	e034      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	3305      	adds	r3, #5
 8005bb6:	d111      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005bb8:	4b69      	ldr	r3, [pc, #420]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bbc:	4b68      	ldr	r3, [pc, #416]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005bbe:	2104      	movs	r1, #4
 8005bc0:	438a      	bics	r2, r1
 8005bc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005bc4:	4b66      	ldr	r3, [pc, #408]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc8:	22f8      	movs	r2, #248	; 0xf8
 8005bca:	4393      	bics	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	00da      	lsls	r2, r3, #3
 8005bd4:	4b62      	ldr	r3, [pc, #392]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8005bda:	e01e      	b.n	8005c1a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005bdc:	4b60      	ldr	r3, [pc, #384]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be0:	4b5f      	ldr	r3, [pc, #380]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005be2:	2104      	movs	r1, #4
 8005be4:	430a      	orrs	r2, r1
 8005be6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005be8:	4b5d      	ldr	r3, [pc, #372]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	4b5c      	ldr	r3, [pc, #368]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005bee:	2101      	movs	r1, #1
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf4:	f7fe fc70 	bl	80044d8 <HAL_GetTick>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005bfe:	f7fe fc6b 	bl	80044d8 <HAL_GetTick>
 8005c02:	0002      	movs	r2, r0
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0a2      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005c10:	4b53      	ldr	r3, [pc, #332]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	2202      	movs	r2, #2
 8005c16:	4013      	ands	r3, r2
 8005c18:	d1f1      	bne.n	8005bfe <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d100      	bne.n	8005c24 <HAL_RCC_OscConfig+0x4ec>
 8005c22:	e097      	b.n	8005d54 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c24:	4b4e      	ldr	r3, [pc, #312]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	220c      	movs	r2, #12
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d100      	bne.n	8005c32 <HAL_RCC_OscConfig+0x4fa>
 8005c30:	e06b      	b.n	8005d0a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d14c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3a:	4b49      	ldr	r3, [pc, #292]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c40:	494a      	ldr	r1, [pc, #296]	; (8005d6c <HAL_RCC_OscConfig+0x634>)
 8005c42:	400a      	ands	r2, r1
 8005c44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7fe fc47 	bl	80044d8 <HAL_GetTick>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c50:	f7fe fc42 	bl	80044d8 <HAL_GetTick>
 8005c54:	0002      	movs	r2, r0
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e079      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c62:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	2380      	movs	r3, #128	; 0x80
 8005c68:	049b      	lsls	r3, r3, #18
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d1f0      	bne.n	8005c50 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c6e:	4b3c      	ldr	r3, [pc, #240]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	220f      	movs	r2, #15
 8005c74:	4393      	bics	r3, r2
 8005c76:	0019      	movs	r1, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c82:	4b37      	ldr	r3, [pc, #220]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4a3a      	ldr	r2, [pc, #232]	; (8005d70 <HAL_RCC_OscConfig+0x638>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	431a      	orrs	r2, r3
 8005c96:	4b32      	ldr	r3, [pc, #200]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c9c:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b2f      	ldr	r3, [pc, #188]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005ca2:	2180      	movs	r1, #128	; 0x80
 8005ca4:	0449      	lsls	r1, r1, #17
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005caa:	f7fe fc15 	bl	80044d8 <HAL_GetTick>
 8005cae:	0003      	movs	r3, r0
 8005cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fe fc10 	bl	80044d8 <HAL_GetTick>
 8005cb8:	0002      	movs	r2, r0
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e047      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	049b      	lsls	r3, r3, #18
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x57c>
 8005cd2:	e03f      	b.n	8005d54 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd4:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005cda:	4924      	ldr	r1, [pc, #144]	; (8005d6c <HAL_RCC_OscConfig+0x634>)
 8005cdc:	400a      	ands	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce0:	f7fe fbfa 	bl	80044d8 <HAL_GetTick>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cea:	f7fe fbf5 	bl	80044d8 <HAL_GetTick>
 8005cee:	0002      	movs	r2, r0
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e02c      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	049b      	lsls	r3, r3, #18
 8005d04:	4013      	ands	r3, r2
 8005d06:	d1f0      	bne.n	8005cea <HAL_RCC_OscConfig+0x5b2>
 8005d08:	e024      	b.n	8005d54 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e01f      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <HAL_RCC_OscConfig+0x628>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	025b      	lsls	r3, r3, #9
 8005d28:	401a      	ands	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d10e      	bne.n	8005d50 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	220f      	movs	r2, #15
 8005d36:	401a      	ands	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	23f0      	movs	r3, #240	; 0xf0
 8005d44:	039b      	lsls	r3, r3, #14
 8005d46:	401a      	ands	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b008      	add	sp, #32
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	40021000 	.word	0x40021000
 8005d64:	00001388 	.word	0x00001388
 8005d68:	efffffff 	.word	0xefffffff
 8005d6c:	feffffff 	.word	0xfeffffff
 8005d70:	ffc2ffff 	.word	0xffc2ffff

08005d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0b3      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d88:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4013      	ands	r3, r2
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d911      	bls.n	8005dba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b58      	ldr	r3, [pc, #352]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da8:	4b53      	ldr	r3, [pc, #332]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2201      	movs	r2, #1
 8005dae:	4013      	ands	r3, r2
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e09a      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d015      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d006      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005dce:	4b4b      	ldr	r3, [pc, #300]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4b4a      	ldr	r3, [pc, #296]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005dd4:	21e0      	movs	r1, #224	; 0xe0
 8005dd6:	00c9      	lsls	r1, r1, #3
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ddc:	4b47      	ldr	r3, [pc, #284]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	22f0      	movs	r2, #240	; 0xf0
 8005de2:	4393      	bics	r3, r2
 8005de4:	0019      	movs	r1, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	4b44      	ldr	r3, [pc, #272]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	4013      	ands	r3, r2
 8005df8:	d040      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	4b3e      	ldr	r3, [pc, #248]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	029b      	lsls	r3, r3, #10
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d114      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e06e      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1a:	4b38      	ldr	r3, [pc, #224]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	049b      	lsls	r3, r3, #18
 8005e22:	4013      	ands	r3, r2
 8005e24:	d108      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e062      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2a:	4b34      	ldr	r3, [pc, #208]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	4013      	ands	r3, r2
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e05b      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e38:	4b30      	ldr	r3, [pc, #192]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	4393      	bics	r3, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e4c:	f7fe fb44 	bl	80044d8 <HAL_GetTick>
 8005e50:	0003      	movs	r3, r0
 8005e52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e54:	e009      	b.n	8005e6a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e56:	f7fe fb3f 	bl	80044d8 <HAL_GetTick>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	4a27      	ldr	r2, [pc, #156]	; (8005f00 <HAL_RCC_ClockConfig+0x18c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e042      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	220c      	movs	r2, #12
 8005e70:	401a      	ands	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1ec      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d211      	bcs.n	8005eae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	4393      	bics	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9c:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <HAL_RCC_ClockConfig+0x184>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d001      	beq.n	8005eae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e020      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <HAL_RCC_ClockConfig+0x190>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ecc:	f000 f820 	bl	8005f10 <HAL_RCC_GetSysClockFreq>
 8005ed0:	0001      	movs	r1, r0
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <HAL_RCC_ClockConfig+0x188>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	220f      	movs	r2, #15
 8005eda:	4013      	ands	r3, r2
 8005edc:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x194>)
 8005ede:	5cd3      	ldrb	r3, [r2, r3]
 8005ee0:	000a      	movs	r2, r1
 8005ee2:	40da      	lsrs	r2, r3
 8005ee4:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x198>)
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005ee8:	2003      	movs	r0, #3
 8005eea:	f7fe faaf 	bl	800444c <HAL_InitTick>
  
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b004      	add	sp, #16
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40022000 	.word	0x40022000
 8005efc:	40021000 	.word	0x40021000
 8005f00:	00001388 	.word	0x00001388
 8005f04:	fffff8ff 	.word	0xfffff8ff
 8005f08:	0801282c 	.word	0x0801282c
 8005f0c:	20000000 	.word	0x20000000

08005f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b08f      	sub	sp, #60	; 0x3c
 8005f14:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005f16:	2314      	movs	r3, #20
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005f1e:	c313      	stmia	r3!, {r0, r1, r4}
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	4a28      	ldr	r2, [pc, #160]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005f2a:	c313      	stmia	r3!, {r0, r1, r4}
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f34:	2300      	movs	r3, #0
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f38:	2300      	movs	r3, #0
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005f44:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	220c      	movs	r2, #12
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d002      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x4a>
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d003      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x50>
 8005f58:	e02c      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f5e:	e02c      	b.n	8005fba <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	0c9b      	lsrs	r3, r3, #18
 8005f64:	220f      	movs	r2, #15
 8005f66:	4013      	ands	r3, r2
 8005f68:	2214      	movs	r2, #20
 8005f6a:	18ba      	adds	r2, r7, r2
 8005f6c:	5cd3      	ldrb	r3, [r2, r3]
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005f70:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	220f      	movs	r2, #15
 8005f76:	4013      	ands	r3, r2
 8005f78:	1d3a      	adds	r2, r7, #4
 8005f7a:	5cd3      	ldrb	r3, [r2, r3]
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	025b      	lsls	r3, r3, #9
 8005f84:	4013      	ands	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f8a:	4811      	ldr	r0, [pc, #68]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f8c:	f7fa f8d6 	bl	800013c <__udivsi3>
 8005f90:	0003      	movs	r3, r0
 8005f92:	001a      	movs	r2, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	4353      	muls	r3, r2
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f9e:	480c      	ldr	r0, [pc, #48]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fa0:	f7fa f8cc 	bl	800013c <__udivsi3>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	4353      	muls	r3, r2
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005fb2:	e002      	b.n	8005fba <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005fb8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b00f      	add	sp, #60	; 0x3c
 8005fc2:	bd90      	pop	{r4, r7, pc}
 8005fc4:	08012688 	.word	0x08012688
 8005fc8:	08012698 	.word	0x08012698
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	007a1200 	.word	0x007a1200

08005fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fd8:	4b02      	ldr	r3, [pc, #8]	; (8005fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	0018      	movs	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	20000000 	.word	0x20000000

08005fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005fec:	f7ff fff2 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 8005ff0:	0001      	movs	r1, r0
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	2207      	movs	r2, #7
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	4a04      	ldr	r2, [pc, #16]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ffe:	5cd3      	ldrb	r3, [r2, r3]
 8006000:	40d9      	lsrs	r1, r3
 8006002:	000b      	movs	r3, r1
}    
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	40021000 	.word	0x40021000
 8006010:	0801283c 	.word	0x0801283c

08006014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	025b      	lsls	r3, r3, #9
 800602c:	4013      	ands	r3, r2
 800602e:	d100      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006030:	e08e      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006032:	2017      	movs	r0, #23
 8006034:	183b      	adds	r3, r7, r0
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603a:	4b57      	ldr	r3, [pc, #348]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800603c:	69da      	ldr	r2, [r3, #28]
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	055b      	lsls	r3, r3, #21
 8006042:	4013      	ands	r3, r2
 8006044:	d110      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	4b54      	ldr	r3, [pc, #336]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	4b53      	ldr	r3, [pc, #332]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800604c:	2180      	movs	r1, #128	; 0x80
 800604e:	0549      	lsls	r1, r1, #21
 8006050:	430a      	orrs	r2, r1
 8006052:	61da      	str	r2, [r3, #28]
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	055b      	lsls	r3, r3, #21
 800605c:	4013      	ands	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006062:	183b      	adds	r3, r7, r0
 8006064:	2201      	movs	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006068:	4b4c      	ldr	r3, [pc, #304]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	4013      	ands	r3, r2
 8006072:	d11a      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006074:	4b49      	ldr	r3, [pc, #292]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b48      	ldr	r3, [pc, #288]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800607a:	2180      	movs	r1, #128	; 0x80
 800607c:	0049      	lsls	r1, r1, #1
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006082:	f7fe fa29 	bl	80044d8 <HAL_GetTick>
 8006086:	0003      	movs	r3, r0
 8006088:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800608a:	e008      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608c:	f7fe fa24 	bl	80044d8 <HAL_GetTick>
 8006090:	0002      	movs	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b64      	cmp	r3, #100	; 0x64
 8006098:	d901      	bls.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e077      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609e:	4b3f      	ldr	r3, [pc, #252]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	2380      	movs	r3, #128	; 0x80
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	4013      	ands	r3, r2
 80060a8:	d0f0      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060aa:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80060ac:	6a1a      	ldr	r2, [r3, #32]
 80060ae:	23c0      	movs	r3, #192	; 0xc0
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4013      	ands	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d034      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	23c0      	movs	r3, #192	; 0xc0
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4013      	ands	r3, r2
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d02c      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060cc:	4b32      	ldr	r3, [pc, #200]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	4a33      	ldr	r2, [pc, #204]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060d6:	4b30      	ldr	r3, [pc, #192]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	4b2f      	ldr	r3, [pc, #188]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80060dc:	2180      	movs	r1, #128	; 0x80
 80060de:	0249      	lsls	r1, r1, #9
 80060e0:	430a      	orrs	r2, r1
 80060e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80060ea:	492e      	ldr	r1, [pc, #184]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80060ec:	400a      	ands	r2, r1
 80060ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060f0:	4b29      	ldr	r3, [pc, #164]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	d013      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fe:	f7fe f9eb 	bl	80044d8 <HAL_GetTick>
 8006102:	0003      	movs	r3, r0
 8006104:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006106:	e009      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006108:	f7fe f9e6 	bl	80044d8 <HAL_GetTick>
 800610c:	0002      	movs	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	4a25      	ldr	r2, [pc, #148]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e038      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611c:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	2202      	movs	r2, #2
 8006122:	4013      	ands	r3, r2
 8006124:	d0f0      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006126:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800612c:	4013      	ands	r3, r2
 800612e:	0019      	movs	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	4b18      	ldr	r3, [pc, #96]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006136:	430a      	orrs	r2, r1
 8006138:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800613a:	2317      	movs	r3, #23
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d105      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006144:	4b14      	ldr	r3, [pc, #80]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	4b13      	ldr	r3, [pc, #76]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800614a:	4918      	ldr	r1, [pc, #96]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800614c:	400a      	ands	r2, r1
 800614e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	4013      	ands	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800615a:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	2203      	movs	r2, #3
 8006160:	4393      	bics	r3, r2
 8006162:	0019      	movs	r1, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800616a:	430a      	orrs	r2, r1
 800616c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2220      	movs	r2, #32
 8006174:	4013      	ands	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006178:	4b07      	ldr	r3, [pc, #28]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	2210      	movs	r2, #16
 800617e:	4393      	bics	r3, r2
 8006180:	0019      	movs	r1, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	4b04      	ldr	r3, [pc, #16]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006188:	430a      	orrs	r2, r1
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	0018      	movs	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	b006      	add	sp, #24
 8006194:	bd80      	pop	{r7, pc}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	40021000 	.word	0x40021000
 800619c:	40007000 	.word	0x40007000
 80061a0:	fffffcff 	.word	0xfffffcff
 80061a4:	fffeffff 	.word	0xfffeffff
 80061a8:	00001388 	.word	0x00001388
 80061ac:	efffffff 	.word	0xefffffff

080061b0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e081      	b.n	80062c6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7f5b      	ldrb	r3, [r3, #29]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7fd fe7f 	bl	8003ed8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	22ca      	movs	r2, #202	; 0xca
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2253      	movs	r2, #83	; 0x53
 80061ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 faa9 	bl	800674a <RTC_EnterInitMode>
 80061f8:	1e03      	subs	r3, r0, #0
 80061fa:	d008      	beq.n	800620e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	22ff      	movs	r2, #255	; 0xff
 8006202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2204      	movs	r2, #4
 8006208:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e05b      	b.n	80062c6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	492d      	ldr	r1, [pc, #180]	; (80062d0 <HAL_RTC_Init+0x120>)
 800621a:	400a      	ands	r2, r1
 800621c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6899      	ldr	r1, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68d2      	ldr	r2, [r2, #12]
 8006244:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6919      	ldr	r1, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	041a      	lsls	r2, r3, #16
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2180      	movs	r1, #128	; 0x80
 8006266:	438a      	bics	r2, r1
 8006268:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2220      	movs	r2, #32
 8006272:	4013      	ands	r3, r2
 8006274:	d10e      	bne.n	8006294 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	0018      	movs	r0, r3
 800627a:	f000 fa3d 	bl	80066f8 <HAL_RTC_WaitForSynchro>
 800627e:	1e03      	subs	r3, r0, #0
 8006280:	d008      	beq.n	8006294 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	22ff      	movs	r2, #255	; 0xff
 8006288:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2204      	movs	r2, #4
 800628e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e018      	b.n	80062c6 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	490d      	ldr	r1, [pc, #52]	; (80062d4 <HAL_RTC_Init+0x124>)
 80062a0:	400a      	ands	r2, r1
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	22ff      	movs	r2, #255	; 0xff
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80062c4:	2300      	movs	r3, #0
  }
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	b002      	add	sp, #8
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	ff8fffbf 	.word	0xff8fffbf
 80062d4:	fffbffff 	.word	0xfffbffff

080062d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062d8:	b590      	push	{r4, r7, lr}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	7f1b      	ldrb	r3, [r3, #28]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_RTC_SetTime+0x1c>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e0a5      	b.n	8006440 <HAL_RTC_SetTime+0x168>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2202      	movs	r2, #2
 80062fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d125      	bne.n	8006352 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2240      	movs	r2, #64	; 0x40
 800630e:	4013      	ands	r3, r2
 8006310:	d102      	bne.n	8006318 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	0018      	movs	r0, r3
 800631e:	f000 fa40 	bl	80067a2 <RTC_ByteToBcd2>
 8006322:	0003      	movs	r3, r0
 8006324:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	0018      	movs	r0, r3
 800632c:	f000 fa39 	bl	80067a2 <RTC_ByteToBcd2>
 8006330:	0003      	movs	r3, r0
 8006332:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006334:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	789b      	ldrb	r3, [r3, #2]
 800633a:	0018      	movs	r0, r3
 800633c:	f000 fa31 	bl	80067a2 <RTC_ByteToBcd2>
 8006340:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006342:	0022      	movs	r2, r4
 8006344:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	78db      	ldrb	r3, [r3, #3]
 800634a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e017      	b.n	8006382 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2240      	movs	r2, #64	; 0x40
 800635a:	4013      	ands	r3, r2
 800635c:	d102      	bne.n	8006364 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006370:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006376:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	22ca      	movs	r2, #202	; 0xca
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2253      	movs	r2, #83	; 0x53
 8006390:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	0018      	movs	r0, r3
 8006396:	f000 f9d8 	bl	800674a <RTC_EnterInitMode>
 800639a:	1e03      	subs	r3, r0, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	22ff      	movs	r2, #255	; 0xff
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2204      	movs	r2, #4
 80063aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e044      	b.n	8006440 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4922      	ldr	r1, [pc, #136]	; (8006448 <HAL_RTC_SetTime+0x170>)
 80063be:	400a      	ands	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	491f      	ldr	r1, [pc, #124]	; (800644c <HAL_RTC_SetTime+0x174>)
 80063ce:	400a      	ands	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6899      	ldr	r1, [r3, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	438a      	bics	r2, r1
 80063f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2220      	movs	r2, #32
 8006402:	4013      	ands	r3, r2
 8006404:	d111      	bne.n	800642a <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	0018      	movs	r0, r3
 800640a:	f000 f975 	bl	80066f8 <HAL_RTC_WaitForSynchro>
 800640e:	1e03      	subs	r3, r0, #0
 8006410:	d00b      	beq.n	800642a <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	22ff      	movs	r2, #255	; 0xff
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2204      	movs	r2, #4
 800641e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e00a      	b.n	8006440 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	22ff      	movs	r2, #255	; 0xff
 8006430:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800643e:	2300      	movs	r3, #0
  }
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b007      	add	sp, #28
 8006446:	bd90      	pop	{r4, r7, pc}
 8006448:	007f7f7f 	.word	0x007f7f7f
 800644c:	fffbffff 	.word	0xfffbffff

08006450 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	045b      	lsls	r3, r3, #17
 8006472:	0c5a      	lsrs	r2, r3, #17
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a22      	ldr	r2, [pc, #136]	; (8006508 <HAL_RTC_GetTime+0xb8>)
 8006480:	4013      	ands	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	0c1b      	lsrs	r3, r3, #16
 8006488:	b2db      	uxtb	r3, r3
 800648a:	223f      	movs	r2, #63	; 0x3f
 800648c:	4013      	ands	r3, r2
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b2db      	uxtb	r3, r3
 800649a:	227f      	movs	r2, #127	; 0x7f
 800649c:	4013      	ands	r3, r2
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	227f      	movs	r2, #127	; 0x7f
 80064aa:	4013      	ands	r3, r2
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	4013      	ands	r3, r2
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11a      	bne.n	80064fe <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	0018      	movs	r0, r3
 80064ce:	f000 f989 	bl	80067e4 <RTC_Bcd2ToByte>
 80064d2:	0003      	movs	r3, r0
 80064d4:	001a      	movs	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 f980 	bl	80067e4 <RTC_Bcd2ToByte>
 80064e4:	0003      	movs	r3, r0
 80064e6:	001a      	movs	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	789b      	ldrb	r3, [r3, #2]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 f977 	bl	80067e4 <RTC_Bcd2ToByte>
 80064f6:	0003      	movs	r3, r0
 80064f8:	001a      	movs	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	0018      	movs	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	b006      	add	sp, #24
 8006506:	bd80      	pop	{r7, pc}
 8006508:	007f7f7f 	.word	0x007f7f7f

0800650c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	7f1b      	ldrb	r3, [r3, #28]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_RTC_SetDate+0x1c>
 8006524:	2302      	movs	r3, #2
 8006526:	e091      	b.n	800664c <HAL_RTC_SetDate+0x140>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2202      	movs	r2, #2
 8006532:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10e      	bne.n	8006558 <HAL_RTC_SetDate+0x4c>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	001a      	movs	r2, r3
 8006540:	2310      	movs	r3, #16
 8006542:	4013      	ands	r3, r2
 8006544:	d008      	beq.n	8006558 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2210      	movs	r2, #16
 800654c:	4393      	bics	r3, r2
 800654e:	b2db      	uxtb	r3, r3
 8006550:	330a      	adds	r3, #10
 8006552:	b2da      	uxtb	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d11c      	bne.n	8006598 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	0018      	movs	r0, r3
 8006564:	f000 f91d 	bl	80067a2 <RTC_ByteToBcd2>
 8006568:	0003      	movs	r3, r0
 800656a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	0018      	movs	r0, r3
 8006572:	f000 f916 	bl	80067a2 <RTC_ByteToBcd2>
 8006576:	0003      	movs	r3, r0
 8006578:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800657a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	789b      	ldrb	r3, [r3, #2]
 8006580:	0018      	movs	r0, r3
 8006582:	f000 f90e 	bl	80067a2 <RTC_ByteToBcd2>
 8006586:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006588:	0022      	movs	r2, r4
 800658a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e00e      	b.n	80065b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	78db      	ldrb	r3, [r3, #3]
 800659c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80065a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80065aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	22ca      	movs	r2, #202	; 0xca
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2253      	movs	r2, #83	; 0x53
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f000 f8be 	bl	800674a <RTC_EnterInitMode>
 80065ce:	1e03      	subs	r3, r0, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	22ff      	movs	r2, #255	; 0xff
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2204      	movs	r2, #4
 80065de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e030      	b.n	800664c <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4918      	ldr	r1, [pc, #96]	; (8006654 <HAL_RTC_SetDate+0x148>)
 80065f2:	400a      	ands	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2180      	movs	r1, #128	; 0x80
 8006602:	438a      	bics	r2, r1
 8006604:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2220      	movs	r2, #32
 800660e:	4013      	ands	r3, r2
 8006610:	d111      	bne.n	8006636 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	0018      	movs	r0, r3
 8006616:	f000 f86f 	bl	80066f8 <HAL_RTC_WaitForSynchro>
 800661a:	1e03      	subs	r3, r0, #0
 800661c:	d00b      	beq.n	8006636 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	22ff      	movs	r2, #255	; 0xff
 8006624:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2204      	movs	r2, #4
 800662a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e00a      	b.n	800664c <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	22ff      	movs	r2, #255	; 0xff
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800664a:	2300      	movs	r3, #0
  }
}
 800664c:	0018      	movs	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	b007      	add	sp, #28
 8006652:	bd90      	pop	{r4, r7, pc}
 8006654:	00ffff3f 	.word	0x00ffff3f

08006658 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <HAL_RTC_GetDate+0x9c>)
 8006670:	4013      	ands	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	b2da      	uxtb	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	b2db      	uxtb	r3, r3
 8006684:	221f      	movs	r2, #31
 8006686:	4013      	ands	r3, r2
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	223f      	movs	r2, #63	; 0x3f
 8006694:	4013      	ands	r3, r2
 8006696:	b2da      	uxtb	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	0b5b      	lsrs	r3, r3, #13
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2207      	movs	r2, #7
 80066a4:	4013      	ands	r3, r2
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d11a      	bne.n	80066e8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 f894 	bl	80067e4 <RTC_Bcd2ToByte>
 80066bc:	0003      	movs	r3, r0
 80066be:	001a      	movs	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 f88b 	bl	80067e4 <RTC_Bcd2ToByte>
 80066ce:	0003      	movs	r3, r0
 80066d0:	001a      	movs	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	789b      	ldrb	r3, [r3, #2]
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 f882 	bl	80067e4 <RTC_Bcd2ToByte>
 80066e0:	0003      	movs	r3, r0
 80066e2:	001a      	movs	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b006      	add	sp, #24
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	00ffff3f 	.word	0x00ffff3f

080066f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	21a0      	movs	r1, #160	; 0xa0
 8006710:	438a      	bics	r2, r1
 8006712:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006714:	f7fd fee0 	bl	80044d8 <HAL_GetTick>
 8006718:	0003      	movs	r3, r0
 800671a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800671c:	e00a      	b.n	8006734 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800671e:	f7fd fedb 	bl	80044d8 <HAL_GetTick>
 8006722:	0002      	movs	r2, r0
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1ad2      	subs	r2, r2, r3
 8006728:	23fa      	movs	r3, #250	; 0xfa
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	429a      	cmp	r2, r3
 800672e:	d901      	bls.n	8006734 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e006      	b.n	8006742 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	4013      	ands	r3, r2
 800673e:	d0ee      	beq.n	800671e <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	0018      	movs	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	b004      	add	sp, #16
 8006748:	bd80      	pop	{r7, pc}

0800674a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2240      	movs	r2, #64	; 0x40
 800675e:	4013      	ands	r3, r2
 8006760:	d11a      	bne.n	8006798 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2201      	movs	r2, #1
 8006768:	4252      	negs	r2, r2
 800676a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800676c:	f7fd feb4 	bl	80044d8 <HAL_GetTick>
 8006770:	0003      	movs	r3, r0
 8006772:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006774:	e00a      	b.n	800678c <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006776:	f7fd feaf 	bl	80044d8 <HAL_GetTick>
 800677a:	0002      	movs	r2, r0
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1ad2      	subs	r2, r2, r3
 8006780:	23fa      	movs	r3, #250	; 0xfa
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	429a      	cmp	r2, r3
 8006786:	d901      	bls.n	800678c <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e006      	b.n	800679a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2240      	movs	r2, #64	; 0x40
 8006794:	4013      	ands	r3, r2
 8006796:	d0ee      	beq.n	8006776 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	0018      	movs	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	b004      	add	sp, #16
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	0002      	movs	r2, r0
 80067aa:	1dfb      	adds	r3, r7, #7
 80067ac:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80067b2:	e007      	b.n	80067c4 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80067ba:	1dfb      	adds	r3, r7, #7
 80067bc:	1dfa      	adds	r2, r7, #7
 80067be:	7812      	ldrb	r2, [r2, #0]
 80067c0:	3a0a      	subs	r2, #10
 80067c2:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80067c4:	1dfb      	adds	r3, r7, #7
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d8f3      	bhi.n	80067b4 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	1dfb      	adds	r3, r7, #7
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	4313      	orrs	r3, r2
 80067da:	b2db      	uxtb	r3, r3
}
 80067dc:	0018      	movs	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	b004      	add	sp, #16
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	0002      	movs	r2, r0
 80067ec:	1dfb      	adds	r3, r7, #7
 80067ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80067f4:	1dfb      	adds	r3, r7, #7
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	091b      	lsrs	r3, r3, #4
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	001a      	movs	r2, r3
 80067fe:	0013      	movs	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	189b      	adds	r3, r3, r2
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8006808:	1dfb      	adds	r3, r7, #7
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	220f      	movs	r2, #15
 800680e:	4013      	ands	r3, r2
 8006810:	b2da      	uxtb	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	18d3      	adds	r3, r2, r3
 8006818:	b2db      	uxtb	r3, r3
}
 800681a:	0018      	movs	r0, r3
 800681c:	46bd      	mov	sp, r7
 800681e:	b004      	add	sp, #16
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e0a8      	b.n	8006988 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	2382      	movs	r3, #130	; 0x82
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	429a      	cmp	r2, r3
 8006848:	d009      	beq.n	800685e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	61da      	str	r2, [r3, #28]
 8006850:	e005      	b.n	800685e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	225d      	movs	r2, #93	; 0x5d
 8006868:	5c9b      	ldrb	r3, [r3, r2]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d107      	bne.n	8006880 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	225c      	movs	r2, #92	; 0x5c
 8006874:	2100      	movs	r1, #0
 8006876:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0018      	movs	r0, r3
 800687c:	f7fd fb44 	bl	8003f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	225d      	movs	r2, #93	; 0x5d
 8006884:	2102      	movs	r1, #2
 8006886:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2140      	movs	r1, #64	; 0x40
 8006894:	438a      	bics	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	23e0      	movs	r3, #224	; 0xe0
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d902      	bls.n	80068aa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e002      	b.n	80068b0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068aa:	2380      	movs	r3, #128	; 0x80
 80068ac:	015b      	lsls	r3, r3, #5
 80068ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	23f0      	movs	r3, #240	; 0xf0
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d008      	beq.n	80068ce <HAL_SPI_Init+0xaa>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	23e0      	movs	r3, #224	; 0xe0
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d002      	beq.n	80068ce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	2382      	movs	r3, #130	; 0x82
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	401a      	ands	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6899      	ldr	r1, [r3, #8]
 80068dc:	2384      	movs	r3, #132	; 0x84
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	400b      	ands	r3, r1
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2102      	movs	r1, #2
 80068ea:	400b      	ands	r3, r1
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	2101      	movs	r1, #1
 80068f4:	400b      	ands	r3, r1
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6999      	ldr	r1, [r3, #24]
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	400b      	ands	r3, r1
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	2138      	movs	r1, #56	; 0x38
 800690a:	400b      	ands	r3, r1
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	2180      	movs	r1, #128	; 0x80
 8006914:	400b      	ands	r3, r1
 8006916:	431a      	orrs	r2, r3
 8006918:	0011      	movs	r1, r2
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691e:	2380      	movs	r3, #128	; 0x80
 8006920:	019b      	lsls	r3, r3, #6
 8006922:	401a      	ands	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	2204      	movs	r2, #4
 8006934:	401a      	ands	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	2110      	movs	r1, #16
 800693c:	400b      	ands	r3, r1
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006944:	2108      	movs	r1, #8
 8006946:	400b      	ands	r3, r1
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68d9      	ldr	r1, [r3, #12]
 800694e:	23f0      	movs	r3, #240	; 0xf0
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	400b      	ands	r3, r1
 8006954:	431a      	orrs	r2, r3
 8006956:	0011      	movs	r1, r2
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	2380      	movs	r3, #128	; 0x80
 800695c:	015b      	lsls	r3, r3, #5
 800695e:	401a      	ands	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69da      	ldr	r2, [r3, #28]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4907      	ldr	r1, [pc, #28]	; (8006990 <HAL_SPI_Init+0x16c>)
 8006974:	400a      	ands	r2, r1
 8006976:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	225d      	movs	r2, #93	; 0x5d
 8006982:	2101      	movs	r1, #1
 8006984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b004      	add	sp, #16
 800698e:	bd80      	pop	{r7, pc}
 8006990:	fffff7ff 	.word	0xfffff7ff

08006994 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	1dbb      	adds	r3, r7, #6
 80069a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069a4:	231f      	movs	r3, #31
 80069a6:	18fb      	adds	r3, r7, r3
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	225c      	movs	r2, #92	; 0x5c
 80069b0:	5c9b      	ldrb	r3, [r3, r2]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_SPI_Transmit+0x26>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e140      	b.n	8006c3c <HAL_SPI_Transmit+0x2a8>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	225c      	movs	r2, #92	; 0x5c
 80069be:	2101      	movs	r1, #1
 80069c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c2:	f7fd fd89 	bl	80044d8 <HAL_GetTick>
 80069c6:	0003      	movs	r3, r0
 80069c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069ca:	2316      	movs	r3, #22
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	1dba      	adds	r2, r7, #6
 80069d0:	8812      	ldrh	r2, [r2, #0]
 80069d2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	225d      	movs	r2, #93	; 0x5d
 80069d8:	5c9b      	ldrb	r3, [r3, r2]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d004      	beq.n	80069ea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80069e0:	231f      	movs	r3, #31
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	2202      	movs	r2, #2
 80069e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80069e8:	e11d      	b.n	8006c26 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_SPI_Transmit+0x64>
 80069f0:	1dbb      	adds	r3, r7, #6
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80069f8:	231f      	movs	r3, #31
 80069fa:	18fb      	adds	r3, r7, r3
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a00:	e111      	b.n	8006c26 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	225d      	movs	r2, #93	; 0x5d
 8006a06:	2103      	movs	r1, #3
 8006a08:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1dba      	adds	r2, r7, #6
 8006a1a:	8812      	ldrh	r2, [r2, #0]
 8006a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1dba      	adds	r2, r7, #6
 8006a22:	8812      	ldrh	r2, [r2, #0]
 8006a24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2244      	movs	r2, #68	; 0x44
 8006a30:	2100      	movs	r1, #0
 8006a32:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2246      	movs	r2, #70	; 0x46
 8006a38:	2100      	movs	r1, #0
 8006a3a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	2380      	movs	r3, #128	; 0x80
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d110      	bne.n	8006a76 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2140      	movs	r1, #64	; 0x40
 8006a60:	438a      	bics	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2180      	movs	r1, #128	; 0x80
 8006a70:	01c9      	lsls	r1, r1, #7
 8006a72:	430a      	orrs	r2, r1
 8006a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2240      	movs	r2, #64	; 0x40
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d007      	beq.n	8006a94 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2140      	movs	r1, #64	; 0x40
 8006a90:	430a      	orrs	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	23e0      	movs	r3, #224	; 0xe0
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d94e      	bls.n	8006b3e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <HAL_SPI_Transmit+0x11e>
 8006aa8:	2316      	movs	r3, #22
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d13f      	bne.n	8006b32 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	881a      	ldrh	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	1c9a      	adds	r2, r3, #2
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ad6:	e02c      	b.n	8006b32 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d112      	bne.n	8006b0c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	1c9a      	adds	r2, r3, #2
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b0a:	e012      	b.n	8006b32 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b0c:	f7fd fce4 	bl	80044d8 <HAL_GetTick>
 8006b10:	0002      	movs	r2, r0
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d802      	bhi.n	8006b22 <HAL_SPI_Transmit+0x18e>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	d102      	bne.n	8006b28 <HAL_SPI_Transmit+0x194>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006b28:	231f      	movs	r3, #31
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006b30:	e079      	b.n	8006c26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1cd      	bne.n	8006ad8 <HAL_SPI_Transmit+0x144>
 8006b3c:	e04f      	b.n	8006bde <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <HAL_SPI_Transmit+0x1bc>
 8006b46:	2316      	movs	r3, #22
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d141      	bne.n	8006bd4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	7812      	ldrb	r2, [r2, #0]
 8006b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006b76:	e02d      	b.n	8006bd4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4013      	ands	r3, r2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d113      	bne.n	8006bae <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bac:	e012      	b.n	8006bd4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bae:	f7fd fc93 	bl	80044d8 <HAL_GetTick>
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d802      	bhi.n	8006bc4 <HAL_SPI_Transmit+0x230>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	d102      	bne.n	8006bca <HAL_SPI_Transmit+0x236>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006bca:	231f      	movs	r3, #31
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	2203      	movs	r2, #3
 8006bd0:	701a      	strb	r2, [r3, #0]
          goto error;
 8006bd2:	e028      	b.n	8006c26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1cc      	bne.n	8006b78 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 fb2f 	bl	8007248 <SPI_EndRxTxTransaction>
 8006bea:	1e03      	subs	r3, r0, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006c1a:	231f      	movs	r3, #31
 8006c1c:	18fb      	adds	r3, r7, r3
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	e000      	b.n	8006c26 <HAL_SPI_Transmit+0x292>
  }

error:
 8006c24:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	225d      	movs	r2, #93	; 0x5d
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	225c      	movs	r2, #92	; 0x5c
 8006c32:	2100      	movs	r1, #0
 8006c34:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c36:	231f      	movs	r3, #31
 8006c38:	18fb      	adds	r3, r7, r3
 8006c3a:	781b      	ldrb	r3, [r3, #0]
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b008      	add	sp, #32
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	; 0x28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	001a      	movs	r2, r3
 8006c52:	1cbb      	adds	r3, r7, #2
 8006c54:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c56:	2301      	movs	r3, #1
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c5a:	2323      	movs	r3, #35	; 0x23
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	225c      	movs	r2, #92	; 0x5c
 8006c66:	5c9b      	ldrb	r3, [r3, r2]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_SPI_TransmitReceive+0x2c>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e1b5      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x398>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	225c      	movs	r2, #92	; 0x5c
 8006c74:	2101      	movs	r1, #1
 8006c76:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c78:	f7fd fc2e 	bl	80044d8 <HAL_GetTick>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c80:	201b      	movs	r0, #27
 8006c82:	183b      	adds	r3, r7, r0
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	215d      	movs	r1, #93	; 0x5d
 8006c88:	5c52      	ldrb	r2, [r2, r1]
 8006c8a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c92:	2312      	movs	r3, #18
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	1cba      	adds	r2, r7, #2
 8006c98:	8812      	ldrh	r2, [r2, #0]
 8006c9a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c9c:	183b      	adds	r3, r7, r0
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d011      	beq.n	8006cc8 <HAL_SPI_TransmitReceive+0x84>
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	2382      	movs	r3, #130	; 0x82
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d107      	bne.n	8006cbe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_SPI_TransmitReceive+0x7a>
 8006cb6:	183b      	adds	r3, r7, r0
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d004      	beq.n	8006cc8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006cbe:	2323      	movs	r3, #35	; 0x23
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006cc6:	e17e      	b.n	8006fc6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d006      	beq.n	8006cdc <HAL_SPI_TransmitReceive+0x98>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_SPI_TransmitReceive+0x98>
 8006cd4:	1cbb      	adds	r3, r7, #2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006cdc:	2323      	movs	r3, #35	; 0x23
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ce4:	e16f      	b.n	8006fc6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	225d      	movs	r2, #93	; 0x5d
 8006cea:	5c9b      	ldrb	r3, [r3, r2]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d003      	beq.n	8006cfa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	225d      	movs	r2, #93	; 0x5d
 8006cf6:	2105      	movs	r1, #5
 8006cf8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1cba      	adds	r2, r7, #2
 8006d0a:	2146      	movs	r1, #70	; 0x46
 8006d0c:	8812      	ldrh	r2, [r2, #0]
 8006d0e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1cba      	adds	r2, r7, #2
 8006d14:	2144      	movs	r1, #68	; 0x44
 8006d16:	8812      	ldrh	r2, [r2, #0]
 8006d18:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	1cba      	adds	r2, r7, #2
 8006d24:	8812      	ldrh	r2, [r2, #0]
 8006d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	1cba      	adds	r2, r7, #2
 8006d2c:	8812      	ldrh	r2, [r2, #0]
 8006d2e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	23e0      	movs	r3, #224	; 0xe0
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d908      	bls.n	8006d5a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	49a4      	ldr	r1, [pc, #656]	; (8006fe4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006d54:	400a      	ands	r2, r1
 8006d56:	605a      	str	r2, [r3, #4]
 8006d58:	e008      	b.n	8006d6c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2180      	movs	r1, #128	; 0x80
 8006d66:	0149      	lsls	r1, r1, #5
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2240      	movs	r2, #64	; 0x40
 8006d74:	4013      	ands	r3, r2
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d007      	beq.n	8006d8a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2140      	movs	r1, #64	; 0x40
 8006d86:	430a      	orrs	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	23e0      	movs	r3, #224	; 0xe0
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d800      	bhi.n	8006d98 <HAL_SPI_TransmitReceive+0x154>
 8006d96:	e07f      	b.n	8006e98 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x168>
 8006da0:	2312      	movs	r3, #18
 8006da2:	18fb      	adds	r3, r7, r3
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d000      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x168>
 8006daa:	e069      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	881a      	ldrh	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	1c9a      	adds	r2, r3, #2
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dd0:	e056      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d11b      	bne.n	8006e18 <HAL_SPI_TransmitReceive+0x1d4>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <HAL_SPI_TransmitReceive+0x1d4>
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d113      	bne.n	8006e18 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	881a      	ldrh	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d11c      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x21c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2246      	movs	r2, #70	; 0x46
 8006e2a:	5a9b      	ldrh	r3, [r3, r2]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d016      	beq.n	8006e60 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2246      	movs	r2, #70	; 0x46
 8006e4e:	5a9b      	ldrh	r3, [r3, r2]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b299      	uxth	r1, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2246      	movs	r2, #70	; 0x46
 8006e5a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e60:	f7fd fb3a 	bl	80044d8 <HAL_GetTick>
 8006e64:	0002      	movs	r2, r0
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d807      	bhi.n	8006e80 <HAL_SPI_TransmitReceive+0x23c>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	3301      	adds	r3, #1
 8006e74:	d004      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006e76:	2323      	movs	r3, #35	; 0x23
 8006e78:	18fb      	adds	r3, r7, r3
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006e7e:	e0a2      	b.n	8006fc6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1a3      	bne.n	8006dd2 <HAL_SPI_TransmitReceive+0x18e>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2246      	movs	r2, #70	; 0x46
 8006e8e:	5a9b      	ldrh	r3, [r3, r2]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d19d      	bne.n	8006dd2 <HAL_SPI_TransmitReceive+0x18e>
 8006e96:	e085      	b.n	8006fa4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_SPI_TransmitReceive+0x268>
 8006ea0:	2312      	movs	r3, #18
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d000      	beq.n	8006eac <HAL_SPI_TransmitReceive+0x268>
 8006eaa:	e070      	b.n	8006f8e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	330c      	adds	r3, #12
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ed2:	e05c      	b.n	8006f8e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2202      	movs	r2, #2
 8006edc:	4013      	ands	r3, r2
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d11c      	bne.n	8006f1c <HAL_SPI_TransmitReceive+0x2d8>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d017      	beq.n	8006f1c <HAL_SPI_TransmitReceive+0x2d8>
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d114      	bne.n	8006f1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2201      	movs	r2, #1
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d11e      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x324>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2246      	movs	r2, #70	; 0x46
 8006f2e:	5a9b      	ldrh	r3, [r3, r2]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d018      	beq.n	8006f68 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	330c      	adds	r3, #12
 8006f3c:	001a      	movs	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2246      	movs	r2, #70	; 0x46
 8006f56:	5a9b      	ldrh	r3, [r3, r2]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b299      	uxth	r1, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2246      	movs	r2, #70	; 0x46
 8006f62:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f64:	2301      	movs	r3, #1
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f68:	f7fd fab6 	bl	80044d8 <HAL_GetTick>
 8006f6c:	0002      	movs	r2, r0
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d802      	bhi.n	8006f7e <HAL_SPI_TransmitReceive+0x33a>
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	d102      	bne.n	8006f84 <HAL_SPI_TransmitReceive+0x340>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006f84:	2323      	movs	r3, #35	; 0x23
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	2203      	movs	r2, #3
 8006f8a:	701a      	strb	r2, [r3, #0]
        goto error;
 8006f8c:	e01b      	b.n	8006fc6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d19d      	bne.n	8006ed4 <HAL_SPI_TransmitReceive+0x290>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2246      	movs	r2, #70	; 0x46
 8006f9c:	5a9b      	ldrh	r3, [r3, r2]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d197      	bne.n	8006ed4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	0018      	movs	r0, r3
 8006fac:	f000 f94c 	bl	8007248 <SPI_EndRxTxTransaction>
 8006fb0:	1e03      	subs	r3, r0, #0
 8006fb2:	d007      	beq.n	8006fc4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006fb4:	2323      	movs	r3, #35	; 0x23
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	2201      	movs	r2, #1
 8006fba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	661a      	str	r2, [r3, #96]	; 0x60
 8006fc2:	e000      	b.n	8006fc6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006fc4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	225d      	movs	r2, #93	; 0x5d
 8006fca:	2101      	movs	r1, #1
 8006fcc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	225c      	movs	r2, #92	; 0x5c
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006fd6:	2323      	movs	r3, #35	; 0x23
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	781b      	ldrb	r3, [r3, #0]
}
 8006fdc:	0018      	movs	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	b00a      	add	sp, #40	; 0x28
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	ffffefff 	.word	0xffffefff

08006fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	1dfb      	adds	r3, r7, #7
 8006ff6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ff8:	f7fd fa6e 	bl	80044d8 <HAL_GetTick>
 8006ffc:	0002      	movs	r2, r0
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	18d3      	adds	r3, r2, r3
 8007006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007008:	f7fd fa66 	bl	80044d8 <HAL_GetTick>
 800700c:	0003      	movs	r3, r0
 800700e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007010:	4b3a      	ldr	r3, [pc, #232]	; (80070fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	015b      	lsls	r3, r3, #5
 8007016:	0d1b      	lsrs	r3, r3, #20
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	4353      	muls	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800701e:	e058      	b.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	d055      	beq.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007026:	f7fd fa57 	bl	80044d8 <HAL_GetTick>
 800702a:	0002      	movs	r2, r0
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	429a      	cmp	r2, r3
 8007034:	d902      	bls.n	800703c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d142      	bne.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	21e0      	movs	r1, #224	; 0xe0
 8007048:	438a      	bics	r2, r1
 800704a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	2382      	movs	r3, #130	; 0x82
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	429a      	cmp	r2, r3
 8007056:	d113      	bne.n	8007080 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	2380      	movs	r3, #128	; 0x80
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	429a      	cmp	r2, r3
 8007062:	d005      	beq.n	8007070 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	429a      	cmp	r2, r3
 800706e:	d107      	bne.n	8007080 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2140      	movs	r1, #64	; 0x40
 800707c:	438a      	bics	r2, r1
 800707e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007084:	2380      	movs	r3, #128	; 0x80
 8007086:	019b      	lsls	r3, r3, #6
 8007088:	429a      	cmp	r2, r3
 800708a:	d110      	bne.n	80070ae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	491a      	ldr	r1, [pc, #104]	; (8007100 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007098:	400a      	ands	r2, r1
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2180      	movs	r1, #128	; 0x80
 80070a8:	0189      	lsls	r1, r1, #6
 80070aa:	430a      	orrs	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	225d      	movs	r2, #93	; 0x5d
 80070b2:	2101      	movs	r1, #1
 80070b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	225c      	movs	r2, #92	; 0x5c
 80070ba:	2100      	movs	r1, #0
 80070bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e017      	b.n	80070f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	425a      	negs	r2, r3
 80070e2:	4153      	adcs	r3, r2
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	001a      	movs	r2, r3
 80070e8:	1dfb      	adds	r3, r7, #7
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d197      	bne.n	8007020 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	0018      	movs	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	b008      	add	sp, #32
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	20000000 	.word	0x20000000
 8007100:	ffffdfff 	.word	0xffffdfff

08007104 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007112:	2317      	movs	r3, #23
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800711a:	f7fd f9dd 	bl	80044d8 <HAL_GetTick>
 800711e:	0002      	movs	r2, r0
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	18d3      	adds	r3, r2, r3
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800712a:	f7fd f9d5 	bl	80044d8 <HAL_GetTick>
 800712e:	0003      	movs	r3, r0
 8007130:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800713a:	4b41      	ldr	r3, [pc, #260]	; (8007240 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	0013      	movs	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	189b      	adds	r3, r3, r2
 8007144:	00da      	lsls	r2, r3, #3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	0d1b      	lsrs	r3, r3, #20
 800714a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714c:	4353      	muls	r3, r2
 800714e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007150:	e068      	b.n	8007224 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	23c0      	movs	r3, #192	; 0xc0
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	429a      	cmp	r2, r3
 800715a:	d10a      	bne.n	8007172 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d107      	bne.n	8007172 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	2117      	movs	r1, #23
 800716a:	187b      	adds	r3, r7, r1
 800716c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800716e:	187b      	adds	r3, r7, r1
 8007170:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	d055      	beq.n	8007224 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007178:	f7fd f9ae 	bl	80044d8 <HAL_GetTick>
 800717c:	0002      	movs	r2, r0
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	429a      	cmp	r2, r3
 8007186:	d902      	bls.n	800718e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	2b00      	cmp	r3, #0
 800718c:	d142      	bne.n	8007214 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	21e0      	movs	r1, #224	; 0xe0
 800719a:	438a      	bics	r2, r1
 800719c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	2382      	movs	r3, #130	; 0x82
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d113      	bne.n	80071d2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	2380      	movs	r3, #128	; 0x80
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d005      	beq.n	80071c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	2380      	movs	r3, #128	; 0x80
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	429a      	cmp	r2, r3
 80071c0:	d107      	bne.n	80071d2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2140      	movs	r1, #64	; 0x40
 80071ce:	438a      	bics	r2, r1
 80071d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071d6:	2380      	movs	r3, #128	; 0x80
 80071d8:	019b      	lsls	r3, r3, #6
 80071da:	429a      	cmp	r2, r3
 80071dc:	d110      	bne.n	8007200 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4916      	ldr	r1, [pc, #88]	; (8007244 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80071ea:	400a      	ands	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2180      	movs	r1, #128	; 0x80
 80071fa:	0189      	lsls	r1, r1, #6
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	225d      	movs	r2, #93	; 0x5d
 8007204:	2101      	movs	r1, #1
 8007206:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	225c      	movs	r2, #92	; 0x5c
 800720c:	2100      	movs	r1, #0
 800720e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e010      	b.n	8007236 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	3b01      	subs	r3, #1
 8007222:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4013      	ands	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d18e      	bne.n	8007152 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	0018      	movs	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	b00a      	add	sp, #40	; 0x28
 800723c:	bd80      	pop	{r7, pc}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	20000000 	.word	0x20000000
 8007244:	ffffdfff 	.word	0xffffdfff

08007248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	23c0      	movs	r3, #192	; 0xc0
 8007258:	0159      	lsls	r1, r3, #5
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	0013      	movs	r3, r2
 8007262:	2200      	movs	r2, #0
 8007264:	f7ff ff4e 	bl	8007104 <SPI_WaitFifoStateUntilTimeout>
 8007268:	1e03      	subs	r3, r0, #0
 800726a:	d007      	beq.n	800727c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007270:	2220      	movs	r2, #32
 8007272:	431a      	orrs	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e027      	b.n	80072cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	0013      	movs	r3, r2
 8007286:	2200      	movs	r2, #0
 8007288:	2180      	movs	r1, #128	; 0x80
 800728a:	f7ff fead 	bl	8006fe8 <SPI_WaitFlagStateUntilTimeout>
 800728e:	1e03      	subs	r3, r0, #0
 8007290:	d007      	beq.n	80072a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007296:	2220      	movs	r2, #32
 8007298:	431a      	orrs	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e014      	b.n	80072cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	23c0      	movs	r3, #192	; 0xc0
 80072a6:	00d9      	lsls	r1, r3, #3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	0013      	movs	r3, r2
 80072b0:	2200      	movs	r2, #0
 80072b2:	f7ff ff27 	bl	8007104 <SPI_WaitFifoStateUntilTimeout>
 80072b6:	1e03      	subs	r3, r0, #0
 80072b8:	d007      	beq.n	80072ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072be:	2220      	movs	r2, #32
 80072c0:	431a      	orrs	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e000      	b.n	80072cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	0018      	movs	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b004      	add	sp, #16
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e042      	b.n	800736c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	223d      	movs	r2, #61	; 0x3d
 80072ea:	5c9b      	ldrb	r3, [r3, r2]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d107      	bne.n	8007302 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	223c      	movs	r2, #60	; 0x3c
 80072f6:	2100      	movs	r1, #0
 80072f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	0018      	movs	r0, r3
 80072fe:	f7fc fe4f 	bl	8003fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	223d      	movs	r2, #61	; 0x3d
 8007306:	2102      	movs	r1, #2
 8007308:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3304      	adds	r3, #4
 8007312:	0019      	movs	r1, r3
 8007314:	0010      	movs	r0, r2
 8007316:	f000 fa83 	bl	8007820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2246      	movs	r2, #70	; 0x46
 800731e:	2101      	movs	r1, #1
 8007320:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	223e      	movs	r2, #62	; 0x3e
 8007326:	2101      	movs	r1, #1
 8007328:	5499      	strb	r1, [r3, r2]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	223f      	movs	r2, #63	; 0x3f
 800732e:	2101      	movs	r1, #1
 8007330:	5499      	strb	r1, [r3, r2]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2240      	movs	r2, #64	; 0x40
 8007336:	2101      	movs	r1, #1
 8007338:	5499      	strb	r1, [r3, r2]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2241      	movs	r2, #65	; 0x41
 800733e:	2101      	movs	r1, #1
 8007340:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2242      	movs	r2, #66	; 0x42
 8007346:	2101      	movs	r1, #1
 8007348:	5499      	strb	r1, [r3, r2]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2243      	movs	r2, #67	; 0x43
 800734e:	2101      	movs	r1, #1
 8007350:	5499      	strb	r1, [r3, r2]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2244      	movs	r2, #68	; 0x44
 8007356:	2101      	movs	r1, #1
 8007358:	5499      	strb	r1, [r3, r2]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2245      	movs	r2, #69	; 0x45
 800735e:	2101      	movs	r1, #1
 8007360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	223d      	movs	r2, #61	; 0x3d
 8007366:	2101      	movs	r1, #1
 8007368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	0018      	movs	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	b002      	add	sp, #8
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	223d      	movs	r2, #61	; 0x3d
 8007380:	5c9b      	ldrb	r3, [r3, r2]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b01      	cmp	r3, #1
 8007386:	d001      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e035      	b.n	80073f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	223d      	movs	r2, #61	; 0x3d
 8007390:	2102      	movs	r1, #2
 8007392:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2101      	movs	r1, #1
 80073a0:	430a      	orrs	r2, r1
 80073a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a15      	ldr	r2, [pc, #84]	; (8007400 <HAL_TIM_Base_Start_IT+0x8c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d009      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0x4e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a14      	ldr	r2, [pc, #80]	; (8007404 <HAL_TIM_Base_Start_IT+0x90>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d004      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0x4e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a12      	ldr	r2, [pc, #72]	; (8007408 <HAL_TIM_Base_Start_IT+0x94>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d111      	bne.n	80073e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2207      	movs	r2, #7
 80073ca:	4013      	ands	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b06      	cmp	r3, #6
 80073d2:	d010      	beq.n	80073f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2101      	movs	r1, #1
 80073e0:	430a      	orrs	r2, r1
 80073e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e4:	e007      	b.n	80073f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2101      	movs	r1, #1
 80073f2:	430a      	orrs	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	0018      	movs	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b004      	add	sp, #16
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40000400 	.word	0x40000400
 8007408:	40014000 	.word	0x40014000

0800740c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2202      	movs	r2, #2
 800741c:	4013      	ands	r3, r2
 800741e:	2b02      	cmp	r3, #2
 8007420:	d124      	bne.n	800746c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2202      	movs	r2, #2
 800742a:	4013      	ands	r3, r2
 800742c:	2b02      	cmp	r3, #2
 800742e:	d11d      	bne.n	800746c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2203      	movs	r2, #3
 8007436:	4252      	negs	r2, r2
 8007438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	2203      	movs	r2, #3
 8007448:	4013      	ands	r3, r2
 800744a:	d004      	beq.n	8007456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0018      	movs	r0, r3
 8007450:	f000 f9ce 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007454:	e007      	b.n	8007466 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0018      	movs	r0, r3
 800745a:	f000 f9c1 	bl	80077e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	0018      	movs	r0, r3
 8007462:	f000 f9cd 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2204      	movs	r2, #4
 8007474:	4013      	ands	r3, r2
 8007476:	2b04      	cmp	r3, #4
 8007478:	d125      	bne.n	80074c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2204      	movs	r2, #4
 8007482:	4013      	ands	r3, r2
 8007484:	2b04      	cmp	r3, #4
 8007486:	d11e      	bne.n	80074c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2205      	movs	r2, #5
 800748e:	4252      	negs	r2, r2
 8007490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	23c0      	movs	r3, #192	; 0xc0
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4013      	ands	r3, r2
 80074a4:	d004      	beq.n	80074b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 f9a1 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 80074ae:	e007      	b.n	80074c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f000 f994 	bl	80077e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	0018      	movs	r0, r3
 80074bc:	f000 f9a0 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2208      	movs	r2, #8
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d124      	bne.n	800751e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2208      	movs	r2, #8
 80074dc:	4013      	ands	r3, r2
 80074de:	2b08      	cmp	r3, #8
 80074e0:	d11d      	bne.n	800751e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2209      	movs	r2, #9
 80074e8:	4252      	negs	r2, r2
 80074ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2204      	movs	r2, #4
 80074f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	2203      	movs	r2, #3
 80074fa:	4013      	ands	r3, r2
 80074fc:	d004      	beq.n	8007508 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	0018      	movs	r0, r3
 8007502:	f000 f975 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007506:	e007      	b.n	8007518 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	0018      	movs	r0, r3
 800750c:	f000 f968 	bl	80077e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	0018      	movs	r0, r3
 8007514:	f000 f974 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2210      	movs	r2, #16
 8007526:	4013      	ands	r3, r2
 8007528:	2b10      	cmp	r3, #16
 800752a:	d125      	bne.n	8007578 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	2210      	movs	r2, #16
 8007534:	4013      	ands	r3, r2
 8007536:	2b10      	cmp	r3, #16
 8007538:	d11e      	bne.n	8007578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2211      	movs	r2, #17
 8007540:	4252      	negs	r2, r2
 8007542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2208      	movs	r2, #8
 8007548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	23c0      	movs	r3, #192	; 0xc0
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4013      	ands	r3, r2
 8007556:	d004      	beq.n	8007562 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	0018      	movs	r0, r3
 800755c:	f000 f948 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007560:	e007      	b.n	8007572 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	0018      	movs	r0, r3
 8007566:	f000 f93b 	bl	80077e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	0018      	movs	r0, r3
 800756e:	f000 f947 	bl	8007800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2201      	movs	r2, #1
 8007580:	4013      	ands	r3, r2
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10f      	bne.n	80075a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	4013      	ands	r3, r2
 8007590:	2b01      	cmp	r3, #1
 8007592:	d108      	bne.n	80075a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2202      	movs	r2, #2
 800759a:	4252      	negs	r2, r2
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	0018      	movs	r0, r3
 80075a2:	f7fc fb4f 	bl	8003c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2280      	movs	r2, #128	; 0x80
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b80      	cmp	r3, #128	; 0x80
 80075b2:	d10f      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	2280      	movs	r2, #128	; 0x80
 80075bc:	4013      	ands	r3, r2
 80075be:	2b80      	cmp	r3, #128	; 0x80
 80075c0:	d108      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2281      	movs	r2, #129	; 0x81
 80075c8:	4252      	negs	r2, r2
 80075ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	0018      	movs	r0, r3
 80075d0:	f000 fa96 	bl	8007b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2240      	movs	r2, #64	; 0x40
 80075dc:	4013      	ands	r3, r2
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d10f      	bne.n	8007602 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2240      	movs	r2, #64	; 0x40
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b40      	cmp	r3, #64	; 0x40
 80075ee:	d108      	bne.n	8007602 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2241      	movs	r2, #65	; 0x41
 80075f6:	4252      	negs	r2, r2
 80075f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 f907 	bl	8007810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2220      	movs	r2, #32
 800760a:	4013      	ands	r3, r2
 800760c:	2b20      	cmp	r3, #32
 800760e:	d10f      	bne.n	8007630 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	4013      	ands	r3, r2
 800761a:	2b20      	cmp	r3, #32
 800761c:	d108      	bne.n	8007630 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2221      	movs	r2, #33	; 0x21
 8007624:	4252      	negs	r2, r2
 8007626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	0018      	movs	r0, r3
 800762c:	f000 fa60 	bl	8007af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007630:	46c0      	nop			; (mov r8, r8)
 8007632:	46bd      	mov	sp, r7
 8007634:	b002      	add	sp, #8
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007642:	230f      	movs	r3, #15
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	223c      	movs	r2, #60	; 0x3c
 800764e:	5c9b      	ldrb	r3, [r3, r2]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_TIM_ConfigClockSource+0x20>
 8007654:	2302      	movs	r3, #2
 8007656:	e0bc      	b.n	80077d2 <HAL_TIM_ConfigClockSource+0x19a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	223c      	movs	r2, #60	; 0x3c
 800765c:	2101      	movs	r1, #1
 800765e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	223d      	movs	r2, #61	; 0x3d
 8007664:	2102      	movs	r1, #2
 8007666:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2277      	movs	r2, #119	; 0x77
 8007674:	4393      	bics	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4a58      	ldr	r2, [pc, #352]	; (80077dc <HAL_TIM_ConfigClockSource+0x1a4>)
 800767c:	4013      	ands	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2280      	movs	r2, #128	; 0x80
 800768e:	0192      	lsls	r2, r2, #6
 8007690:	4293      	cmp	r3, r2
 8007692:	d040      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0xde>
 8007694:	2280      	movs	r2, #128	; 0x80
 8007696:	0192      	lsls	r2, r2, #6
 8007698:	4293      	cmp	r3, r2
 800769a:	d900      	bls.n	800769e <HAL_TIM_ConfigClockSource+0x66>
 800769c:	e088      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 800769e:	2280      	movs	r2, #128	; 0x80
 80076a0:	0152      	lsls	r2, r2, #5
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d100      	bne.n	80076a8 <HAL_TIM_ConfigClockSource+0x70>
 80076a6:	e088      	b.n	80077ba <HAL_TIM_ConfigClockSource+0x182>
 80076a8:	2280      	movs	r2, #128	; 0x80
 80076aa:	0152      	lsls	r2, r2, #5
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d900      	bls.n	80076b2 <HAL_TIM_ConfigClockSource+0x7a>
 80076b0:	e07e      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 80076b2:	2b70      	cmp	r3, #112	; 0x70
 80076b4:	d018      	beq.n	80076e8 <HAL_TIM_ConfigClockSource+0xb0>
 80076b6:	d900      	bls.n	80076ba <HAL_TIM_ConfigClockSource+0x82>
 80076b8:	e07a      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 80076ba:	2b60      	cmp	r3, #96	; 0x60
 80076bc:	d04f      	beq.n	800775e <HAL_TIM_ConfigClockSource+0x126>
 80076be:	d900      	bls.n	80076c2 <HAL_TIM_ConfigClockSource+0x8a>
 80076c0:	e076      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 80076c2:	2b50      	cmp	r3, #80	; 0x50
 80076c4:	d03b      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x106>
 80076c6:	d900      	bls.n	80076ca <HAL_TIM_ConfigClockSource+0x92>
 80076c8:	e072      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d057      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x146>
 80076ce:	d900      	bls.n	80076d2 <HAL_TIM_ConfigClockSource+0x9a>
 80076d0:	e06e      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 80076d2:	2b30      	cmp	r3, #48	; 0x30
 80076d4:	d063      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x166>
 80076d6:	d86b      	bhi.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d060      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x166>
 80076dc:	d868      	bhi.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d05d      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x166>
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d05b      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x166>
 80076e6:	e063      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	6899      	ldr	r1, [r3, #8]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f000 f982 	bl	8007a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2277      	movs	r2, #119	; 0x77
 8007708:	4313      	orrs	r3, r2
 800770a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	609a      	str	r2, [r3, #8]
      break;
 8007714:	e052      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6899      	ldr	r1, [r3, #8]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f000 f96b 	bl	8007a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2180      	movs	r1, #128	; 0x80
 8007736:	01c9      	lsls	r1, r1, #7
 8007738:	430a      	orrs	r2, r1
 800773a:	609a      	str	r2, [r3, #8]
      break;
 800773c:	e03e      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6859      	ldr	r1, [r3, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	001a      	movs	r2, r3
 800774c:	f000 f8de 	bl	800790c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2150      	movs	r1, #80	; 0x50
 8007756:	0018      	movs	r0, r3
 8007758:	f000 f938 	bl	80079cc <TIM_ITRx_SetConfig>
      break;
 800775c:	e02e      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6859      	ldr	r1, [r3, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	001a      	movs	r2, r3
 800776c:	f000 f8fc 	bl	8007968 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2160      	movs	r1, #96	; 0x60
 8007776:	0018      	movs	r0, r3
 8007778:	f000 f928 	bl	80079cc <TIM_ITRx_SetConfig>
      break;
 800777c:	e01e      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6859      	ldr	r1, [r3, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	001a      	movs	r2, r3
 800778c:	f000 f8be 	bl	800790c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2140      	movs	r1, #64	; 0x40
 8007796:	0018      	movs	r0, r3
 8007798:	f000 f918 	bl	80079cc <TIM_ITRx_SetConfig>
      break;
 800779c:	e00e      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	0019      	movs	r1, r3
 80077a8:	0010      	movs	r0, r2
 80077aa:	f000 f90f 	bl	80079cc <TIM_ITRx_SetConfig>
      break;
 80077ae:	e005      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80077b0:	230f      	movs	r3, #15
 80077b2:	18fb      	adds	r3, r7, r3
 80077b4:	2201      	movs	r2, #1
 80077b6:	701a      	strb	r2, [r3, #0]
      break;
 80077b8:	e000      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80077ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	223d      	movs	r2, #61	; 0x3d
 80077c0:	2101      	movs	r1, #1
 80077c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	223c      	movs	r2, #60	; 0x3c
 80077c8:	2100      	movs	r1, #0
 80077ca:	5499      	strb	r1, [r3, r2]

  return status;
 80077cc:	230f      	movs	r3, #15
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	781b      	ldrb	r3, [r3, #0]
}
 80077d2:	0018      	movs	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b004      	add	sp, #16
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	ffff00ff 	.word	0xffff00ff

080077e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077e8:	46c0      	nop			; (mov r8, r8)
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b002      	add	sp, #8
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077f8:	46c0      	nop			; (mov r8, r8)
 80077fa:	46bd      	mov	sp, r7
 80077fc:	b002      	add	sp, #8
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007808:	46c0      	nop			; (mov r8, r8)
 800780a:	46bd      	mov	sp, r7
 800780c:	b002      	add	sp, #8
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007818:	46c0      	nop			; (mov r8, r8)
 800781a:	46bd      	mov	sp, r7
 800781c:	b002      	add	sp, #8
 800781e:	bd80      	pop	{r7, pc}

08007820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a2f      	ldr	r2, [pc, #188]	; (80078f0 <TIM_Base_SetConfig+0xd0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_Base_SetConfig+0x20>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a2e      	ldr	r2, [pc, #184]	; (80078f4 <TIM_Base_SetConfig+0xd4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d108      	bne.n	8007852 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2270      	movs	r2, #112	; 0x70
 8007844:	4393      	bics	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a26      	ldr	r2, [pc, #152]	; (80078f0 <TIM_Base_SetConfig+0xd0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d013      	beq.n	8007882 <TIM_Base_SetConfig+0x62>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a25      	ldr	r2, [pc, #148]	; (80078f4 <TIM_Base_SetConfig+0xd4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00f      	beq.n	8007882 <TIM_Base_SetConfig+0x62>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a24      	ldr	r2, [pc, #144]	; (80078f8 <TIM_Base_SetConfig+0xd8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00b      	beq.n	8007882 <TIM_Base_SetConfig+0x62>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a23      	ldr	r2, [pc, #140]	; (80078fc <TIM_Base_SetConfig+0xdc>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d007      	beq.n	8007882 <TIM_Base_SetConfig+0x62>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a22      	ldr	r2, [pc, #136]	; (8007900 <TIM_Base_SetConfig+0xe0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_Base_SetConfig+0x62>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a21      	ldr	r2, [pc, #132]	; (8007904 <TIM_Base_SetConfig+0xe4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d108      	bne.n	8007894 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4a20      	ldr	r2, [pc, #128]	; (8007908 <TIM_Base_SetConfig+0xe8>)
 8007886:	4013      	ands	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2280      	movs	r2, #128	; 0x80
 8007898:	4393      	bics	r3, r2
 800789a:	001a      	movs	r2, r3
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <TIM_Base_SetConfig+0xd0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00b      	beq.n	80078da <TIM_Base_SetConfig+0xba>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a0d      	ldr	r2, [pc, #52]	; (80078fc <TIM_Base_SetConfig+0xdc>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d007      	beq.n	80078da <TIM_Base_SetConfig+0xba>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a0c      	ldr	r2, [pc, #48]	; (8007900 <TIM_Base_SetConfig+0xe0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d003      	beq.n	80078da <TIM_Base_SetConfig+0xba>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <TIM_Base_SetConfig+0xe4>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d103      	bne.n	80078e2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	615a      	str	r2, [r3, #20]
}
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b004      	add	sp, #16
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40012c00 	.word	0x40012c00
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40002000 	.word	0x40002000
 80078fc:	40014000 	.word	0x40014000
 8007900:	40014400 	.word	0x40014400
 8007904:	40014800 	.word	0x40014800
 8007908:	fffffcff 	.word	0xfffffcff

0800790c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	2201      	movs	r2, #1
 8007924:	4393      	bics	r3, r2
 8007926:	001a      	movs	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	22f0      	movs	r2, #240	; 0xf0
 8007936:	4393      	bics	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	220a      	movs	r2, #10
 8007948:	4393      	bics	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	621a      	str	r2, [r3, #32]
}
 8007960:	46c0      	nop			; (mov r8, r8)
 8007962:	46bd      	mov	sp, r7
 8007964:	b006      	add	sp, #24
 8007966:	bd80      	pop	{r7, pc}

08007968 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	2210      	movs	r2, #16
 800797a:	4393      	bics	r3, r2
 800797c:	001a      	movs	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	4a0d      	ldr	r2, [pc, #52]	; (80079c8 <TIM_TI2_ConfigInputStage+0x60>)
 8007992:	4013      	ands	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	031b      	lsls	r3, r3, #12
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	22a0      	movs	r2, #160	; 0xa0
 80079a4:	4393      	bics	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b006      	add	sp, #24
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	ffff0fff 	.word	0xffff0fff

080079cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2270      	movs	r2, #112	; 0x70
 80079e0:	4393      	bics	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	2207      	movs	r2, #7
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	609a      	str	r2, [r3, #8]
}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	46bd      	mov	sp, r7
 80079fa:	b004      	add	sp, #16
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <TIM_ETR_SetConfig+0x3c>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	021a      	lsls	r2, r3, #8
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	609a      	str	r2, [r3, #8]
}
 8007a34:	46c0      	nop			; (mov r8, r8)
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b006      	add	sp, #24
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	ffff00ff 	.word	0xffff00ff

08007a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	223c      	movs	r2, #60	; 0x3c
 8007a4e:	5c9b      	ldrb	r3, [r3, r2]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e041      	b.n	8007adc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	223c      	movs	r2, #60	; 0x3c
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	223d      	movs	r2, #61	; 0x3d
 8007a64:	2102      	movs	r1, #2
 8007a66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2270      	movs	r2, #112	; 0x70
 8007a7c:	4393      	bics	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a13      	ldr	r2, [pc, #76]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a11      	ldr	r2, [pc, #68]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a10      	ldr	r2, [pc, #64]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10c      	bne.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	4393      	bics	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	223d      	movs	r2, #61	; 0x3d
 8007ace:	2101      	movs	r1, #1
 8007ad0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	223c      	movs	r2, #60	; 0x3c
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	0018      	movs	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	b004      	add	sp, #16
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	40000400 	.word	0x40000400
 8007aec:	40014000 	.word	0x40014000

08007af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007af8:	46c0      	nop			; (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b002      	add	sp, #8
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b08:	46c0      	nop			; (mov r8, r8)
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b002      	add	sp, #8
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e044      	b.n	8007bac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d107      	bne.n	8007b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2274      	movs	r2, #116	; 0x74
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	0018      	movs	r0, r3
 8007b36:	f7fc fa59 	bl	8003fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2224      	movs	r2, #36	; 0x24
 8007b3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	438a      	bics	r2, r1
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f000 fbee 	bl	8008334 <UART_SetConfig>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e024      	b.n	8007bac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f000 fd51 	bl	8008614 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	490d      	ldr	r1, [pc, #52]	; (8007bb4 <HAL_UART_Init+0xa4>)
 8007b7e:	400a      	ands	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2108      	movs	r1, #8
 8007b8e:	438a      	bics	r2, r1
 8007b90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f000 fde9 	bl	800877c <UART_CheckIdleState>
 8007baa:	0003      	movs	r3, r0
}
 8007bac:	0018      	movs	r0, r3
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b002      	add	sp, #8
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	fffff7ff 	.word	0xfffff7ff

08007bb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	1dbb      	adds	r3, r7, #6
 8007bc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d000      	beq.n	8007bd0 <HAL_UART_Transmit_IT+0x18>
 8007bce:	e06a      	b.n	8007ca6 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_UART_Transmit_IT+0x26>
 8007bd6:	1dbb      	adds	r3, r7, #6
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e062      	b.n	8007ca8 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	2380      	movs	r3, #128	; 0x80
 8007be8:	015b      	lsls	r3, r3, #5
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d109      	bne.n	8007c02 <HAL_UART_Transmit_IT+0x4a>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d105      	bne.n	8007c02 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	d001      	beq.n	8007c02 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e052      	b.n	8007ca8 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2274      	movs	r2, #116	; 0x74
 8007c06:	5c9b      	ldrb	r3, [r3, r2]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_UART_Transmit_IT+0x58>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e04b      	b.n	8007ca8 <HAL_UART_Transmit_IT+0xf0>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2274      	movs	r2, #116	; 0x74
 8007c14:	2101      	movs	r1, #1
 8007c16:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1dba      	adds	r2, r7, #6
 8007c22:	2150      	movs	r1, #80	; 0x50
 8007c24:	8812      	ldrh	r2, [r2, #0]
 8007c26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	1dba      	adds	r2, r7, #6
 8007c2c:	2152      	movs	r1, #82	; 0x52
 8007c2e:	8812      	ldrh	r2, [r2, #0]
 8007c30:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2280      	movs	r2, #128	; 0x80
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2221      	movs	r2, #33	; 0x21
 8007c44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	015b      	lsls	r3, r3, #5
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d107      	bne.n	8007c62 <HAL_UART_Transmit_IT+0xaa>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <HAL_UART_Transmit_IT+0xf8>)
 8007c5e:	669a      	str	r2, [r3, #104]	; 0x68
 8007c60:	e002      	b.n	8007c68 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <HAL_UART_Transmit_IT+0xfc>)
 8007c66:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2274      	movs	r2, #116	; 0x74
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c70:	f3ef 8310 	mrs	r3, PRIMASK
 8007c74:	613b      	str	r3, [r7, #16]
  return(result);
 8007c76:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f383 8810 	msr	PRIMASK, r3
}
 8007c84:	46c0      	nop			; (mov r8, r8)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2180      	movs	r1, #128	; 0x80
 8007c92:	430a      	orrs	r2, r1
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ca0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	0018      	movs	r0, r3
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b008      	add	sp, #32
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	08008c9b 	.word	0x08008c9b
 8007cb4:	08008be7 	.word	0x08008be7

08007cb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	1dbb      	adds	r3, r7, #6
 8007cc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d150      	bne.n	8007d70 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_UART_Receive_IT+0x24>
 8007cd4:	1dbb      	adds	r3, r7, #6
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e048      	b.n	8007d72 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	015b      	lsls	r3, r3, #5
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d109      	bne.n	8007d00 <HAL_UART_Receive_IT+0x48>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d001      	beq.n	8007d00 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e038      	b.n	8007d72 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2274      	movs	r2, #116	; 0x74
 8007d04:	5c9b      	ldrb	r3, [r3, r2]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Receive_IT+0x56>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	e031      	b.n	8007d72 <HAL_UART_Receive_IT+0xba>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2274      	movs	r2, #116	; 0x74
 8007d12:	2101      	movs	r1, #1
 8007d14:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	2380      	movs	r3, #128	; 0x80
 8007d24:	041b      	lsls	r3, r3, #16
 8007d26:	4013      	ands	r3, r2
 8007d28:	d019      	beq.n	8007d5e <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2e:	613b      	str	r3, [r7, #16]
  return(result);
 8007d30:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	2301      	movs	r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f383 8810 	msr	PRIMASK, r3
}
 8007d3e:	46c0      	nop			; (mov r8, r8)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2180      	movs	r1, #128	; 0x80
 8007d4c:	04c9      	lsls	r1, r1, #19
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	f383 8810 	msr	PRIMASK, r3
}
 8007d5c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d5e:	1dbb      	adds	r3, r7, #6
 8007d60:	881a      	ldrh	r2, [r3, #0]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	0018      	movs	r0, r3
 8007d68:	f000 fe14 	bl	8008994 <UART_Start_Receive_IT>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	e000      	b.n	8007d72 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007d70:	2302      	movs	r3, #2
  }
}
 8007d72:	0018      	movs	r0, r3
 8007d74:	46bd      	mov	sp, r7
 8007d76:	b008      	add	sp, #32
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d7c:	b590      	push	{r4, r7, lr}
 8007d7e:	b0ab      	sub	sp, #172	; 0xac
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	22a4      	movs	r2, #164	; 0xa4
 8007d8c:	18b9      	adds	r1, r7, r2
 8007d8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	20a0      	movs	r0, #160	; 0xa0
 8007d98:	1839      	adds	r1, r7, r0
 8007d9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	219c      	movs	r1, #156	; 0x9c
 8007da4:	1879      	adds	r1, r7, r1
 8007da6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007da8:	0011      	movs	r1, r2
 8007daa:	18bb      	adds	r3, r7, r2
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a99      	ldr	r2, [pc, #612]	; (8008014 <HAL_UART_IRQHandler+0x298>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	2298      	movs	r2, #152	; 0x98
 8007db4:	18bc      	adds	r4, r7, r2
 8007db6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007db8:	18bb      	adds	r3, r7, r2
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d114      	bne.n	8007dea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dc0:	187b      	adds	r3, r7, r1
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	d00f      	beq.n	8007dea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007dca:	183b      	adds	r3, r7, r0
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	d00a      	beq.n	8007dea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d100      	bne.n	8007dde <HAL_UART_IRQHandler+0x62>
 8007ddc:	e27e      	b.n	80082dc <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	0010      	movs	r0, r2
 8007de6:	4798      	blx	r3
      }
      return;
 8007de8:	e278      	b.n	80082dc <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007dea:	2398      	movs	r3, #152	; 0x98
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d100      	bne.n	8007df6 <HAL_UART_IRQHandler+0x7a>
 8007df4:	e114      	b.n	8008020 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007df6:	239c      	movs	r3, #156	; 0x9c
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d106      	bne.n	8007e10 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e02:	23a0      	movs	r3, #160	; 0xa0
 8007e04:	18fb      	adds	r3, r7, r3
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a83      	ldr	r2, [pc, #524]	; (8008018 <HAL_UART_IRQHandler+0x29c>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d100      	bne.n	8007e10 <HAL_UART_IRQHandler+0x94>
 8007e0e:	e107      	b.n	8008020 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e10:	23a4      	movs	r3, #164	; 0xa4
 8007e12:	18fb      	adds	r3, r7, r3
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2201      	movs	r2, #1
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d012      	beq.n	8007e42 <HAL_UART_IRQHandler+0xc6>
 8007e1c:	23a0      	movs	r3, #160	; 0xa0
 8007e1e:	18fb      	adds	r3, r7, r3
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	2380      	movs	r3, #128	; 0x80
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	4013      	ands	r3, r2
 8007e28:	d00b      	beq.n	8007e42 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2280      	movs	r2, #128	; 0x80
 8007e36:	589b      	ldr	r3, [r3, r2]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2180      	movs	r1, #128	; 0x80
 8007e40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e42:	23a4      	movs	r3, #164	; 0xa4
 8007e44:	18fb      	adds	r3, r7, r3
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d011      	beq.n	8007e72 <HAL_UART_IRQHandler+0xf6>
 8007e4e:	239c      	movs	r3, #156	; 0x9c
 8007e50:	18fb      	adds	r3, r7, r3
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	4013      	ands	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2280      	movs	r2, #128	; 0x80
 8007e66:	589b      	ldr	r3, [r3, r2]
 8007e68:	2204      	movs	r2, #4
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e72:	23a4      	movs	r3, #164	; 0xa4
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2204      	movs	r2, #4
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d011      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x126>
 8007e7e:	239c      	movs	r3, #156	; 0x9c
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2201      	movs	r2, #1
 8007e86:	4013      	ands	r3, r2
 8007e88:	d00b      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2204      	movs	r2, #4
 8007e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2280      	movs	r2, #128	; 0x80
 8007e96:	589b      	ldr	r3, [r3, r2]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2180      	movs	r1, #128	; 0x80
 8007ea0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ea2:	23a4      	movs	r3, #164	; 0xa4
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	4013      	ands	r3, r2
 8007eac:	d017      	beq.n	8007ede <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007eae:	23a0      	movs	r3, #160	; 0xa0
 8007eb0:	18fb      	adds	r3, r7, r3
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	d105      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007eba:	239c      	movs	r3, #156	; 0x9c
 8007ebc:	18fb      	adds	r3, r7, r3
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ec4:	d00b      	beq.n	8007ede <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2208      	movs	r2, #8
 8007ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2280      	movs	r2, #128	; 0x80
 8007ed2:	589b      	ldr	r3, [r3, r2]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2180      	movs	r1, #128	; 0x80
 8007edc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ede:	23a4      	movs	r3, #164	; 0xa4
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	2380      	movs	r3, #128	; 0x80
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d013      	beq.n	8007f14 <HAL_UART_IRQHandler+0x198>
 8007eec:	23a0      	movs	r3, #160	; 0xa0
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	2380      	movs	r3, #128	; 0x80
 8007ef4:	04db      	lsls	r3, r3, #19
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	d00c      	beq.n	8007f14 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2280      	movs	r2, #128	; 0x80
 8007f00:	0112      	lsls	r2, r2, #4
 8007f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2280      	movs	r2, #128	; 0x80
 8007f08:	589b      	ldr	r3, [r3, r2]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2280      	movs	r2, #128	; 0x80
 8007f18:	589b      	ldr	r3, [r3, r2]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d100      	bne.n	8007f20 <HAL_UART_IRQHandler+0x1a4>
 8007f1e:	e1df      	b.n	80082e0 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f20:	23a4      	movs	r3, #164	; 0xa4
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2220      	movs	r2, #32
 8007f28:	4013      	ands	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f2c:	23a0      	movs	r3, #160	; 0xa0
 8007f2e:	18fb      	adds	r3, r7, r3
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2220      	movs	r2, #32
 8007f34:	4013      	ands	r3, r2
 8007f36:	d008      	beq.n	8007f4a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	0010      	movs	r0, r2
 8007f48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2280      	movs	r2, #128	; 0x80
 8007f4e:	589b      	ldr	r3, [r3, r2]
 8007f50:	2194      	movs	r1, #148	; 0x94
 8007f52:	187a      	adds	r2, r7, r1
 8007f54:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2240      	movs	r2, #64	; 0x40
 8007f5e:	4013      	ands	r3, r2
 8007f60:	2b40      	cmp	r3, #64	; 0x40
 8007f62:	d004      	beq.n	8007f6e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f64:	187b      	adds	r3, r7, r1
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2228      	movs	r2, #40	; 0x28
 8007f6a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f6c:	d047      	beq.n	8007ffe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	0018      	movs	r0, r3
 8007f72:	f000 fdbf 	bl	8008af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2240      	movs	r2, #64	; 0x40
 8007f7e:	4013      	ands	r3, r2
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d137      	bne.n	8007ff4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f84:	f3ef 8310 	mrs	r3, PRIMASK
 8007f88:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8c:	2090      	movs	r0, #144	; 0x90
 8007f8e:	183a      	adds	r2, r7, r0
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	2301      	movs	r3, #1
 8007f94:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f98:	f383 8810 	msr	PRIMASK, r3
}
 8007f9c:	46c0      	nop			; (mov r8, r8)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2140      	movs	r1, #64	; 0x40
 8007faa:	438a      	bics	r2, r1
 8007fac:	609a      	str	r2, [r3, #8]
 8007fae:	183b      	adds	r3, r7, r0
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fb6:	f383 8810 	msr	PRIMASK, r3
}
 8007fba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d012      	beq.n	8007fea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc8:	4a14      	ldr	r2, [pc, #80]	; (800801c <HAL_UART_IRQHandler+0x2a0>)
 8007fca:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f7fc fbc5 	bl	8004760 <HAL_DMA_Abort_IT>
 8007fd6:	1e03      	subs	r3, r0, #0
 8007fd8:	d01a      	beq.n	8008010 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe8:	e012      	b.n	8008010 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f000 f98d 	bl	800830c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff2:	e00d      	b.n	8008010 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f000 f988 	bl	800830c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	e008      	b.n	8008010 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	0018      	movs	r0, r3
 8008002:	f000 f983 	bl	800830c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2280      	movs	r2, #128	; 0x80
 800800a:	2100      	movs	r1, #0
 800800c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800800e:	e167      	b.n	80082e0 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	46c0      	nop			; (mov r8, r8)
    return;
 8008012:	e165      	b.n	80082e0 <HAL_UART_IRQHandler+0x564>
 8008014:	0000080f 	.word	0x0000080f
 8008018:	04000120 	.word	0x04000120
 800801c:	08008bb9 	.word	0x08008bb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008024:	2b01      	cmp	r3, #1
 8008026:	d000      	beq.n	800802a <HAL_UART_IRQHandler+0x2ae>
 8008028:	e131      	b.n	800828e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800802a:	23a4      	movs	r3, #164	; 0xa4
 800802c:	18fb      	adds	r3, r7, r3
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2210      	movs	r2, #16
 8008032:	4013      	ands	r3, r2
 8008034:	d100      	bne.n	8008038 <HAL_UART_IRQHandler+0x2bc>
 8008036:	e12a      	b.n	800828e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008038:	23a0      	movs	r3, #160	; 0xa0
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2210      	movs	r2, #16
 8008040:	4013      	ands	r3, r2
 8008042:	d100      	bne.n	8008046 <HAL_UART_IRQHandler+0x2ca>
 8008044:	e123      	b.n	800828e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2210      	movs	r2, #16
 800804c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2240      	movs	r2, #64	; 0x40
 8008056:	4013      	ands	r3, r2
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d000      	beq.n	800805e <HAL_UART_IRQHandler+0x2e2>
 800805c:	e09b      	b.n	8008196 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	217e      	movs	r1, #126	; 0x7e
 8008068:	187b      	adds	r3, r7, r1
 800806a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800806c:	187b      	adds	r3, r7, r1
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d100      	bne.n	8008076 <HAL_UART_IRQHandler+0x2fa>
 8008074:	e136      	b.n	80082e4 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2258      	movs	r2, #88	; 0x58
 800807a:	5a9b      	ldrh	r3, [r3, r2]
 800807c:	187a      	adds	r2, r7, r1
 800807e:	8812      	ldrh	r2, [r2, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d300      	bcc.n	8008086 <HAL_UART_IRQHandler+0x30a>
 8008084:	e12e      	b.n	80082e4 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	187a      	adds	r2, r7, r1
 800808a:	215a      	movs	r1, #90	; 0x5a
 800808c:	8812      	ldrh	r2, [r2, #0]
 800808e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	2b20      	cmp	r3, #32
 8008098:	d06e      	beq.n	8008178 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800809a:	f3ef 8310 	mrs	r3, PRIMASK
 800809e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80080a4:	2301      	movs	r3, #1
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080aa:	f383 8810 	msr	PRIMASK, r3
}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	498e      	ldr	r1, [pc, #568]	; (80082f4 <HAL_UART_IRQHandler+0x578>)
 80080bc:	400a      	ands	r2, r1
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	f383 8810 	msr	PRIMASK, r3
}
 80080ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080cc:	f3ef 8310 	mrs	r3, PRIMASK
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80080d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d4:	677b      	str	r3, [r7, #116]	; 0x74
 80080d6:	2301      	movs	r3, #1
 80080d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080dc:	f383 8810 	msr	PRIMASK, r3
}
 80080e0:	46c0      	nop			; (mov r8, r8)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2101      	movs	r1, #1
 80080ee:	438a      	bics	r2, r1
 80080f0:	609a      	str	r2, [r3, #8]
 80080f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f8:	f383 8810 	msr	PRIMASK, r3
}
 80080fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008102:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008104:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008106:	673b      	str	r3, [r7, #112]	; 0x70
 8008108:	2301      	movs	r3, #1
 800810a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800810c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810e:	f383 8810 	msr	PRIMASK, r3
}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2140      	movs	r1, #64	; 0x40
 8008120:	438a      	bics	r2, r1
 8008122:	609a      	str	r2, [r3, #8]
 8008124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008126:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812a:	f383 8810 	msr	PRIMASK, r3
}
 800812e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800813c:	f3ef 8310 	mrs	r3, PRIMASK
 8008140:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008142:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008146:	2301      	movs	r3, #1
 8008148:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800814c:	f383 8810 	msr	PRIMASK, r3
}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2110      	movs	r1, #16
 800815e:	438a      	bics	r2, r1
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008164:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008168:	f383 8810 	msr	PRIMASK, r3
}
 800816c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008172:	0018      	movs	r0, r3
 8008174:	f7fc fabc 	bl	80046f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2258      	movs	r2, #88	; 0x58
 800817c:	5a9a      	ldrh	r2, [r3, r2]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	215a      	movs	r1, #90	; 0x5a
 8008182:	5a5b      	ldrh	r3, [r3, r1]
 8008184:	b29b      	uxth	r3, r3
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	0011      	movs	r1, r2
 800818e:	0018      	movs	r0, r3
 8008190:	f000 f8c4 	bl	800831c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008194:	e0a6      	b.n	80082e4 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2258      	movs	r2, #88	; 0x58
 800819a:	5a99      	ldrh	r1, [r3, r2]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	225a      	movs	r2, #90	; 0x5a
 80081a0:	5a9b      	ldrh	r3, [r3, r2]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	208e      	movs	r0, #142	; 0x8e
 80081a6:	183b      	adds	r3, r7, r0
 80081a8:	1a8a      	subs	r2, r1, r2
 80081aa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	225a      	movs	r2, #90	; 0x5a
 80081b0:	5a9b      	ldrh	r3, [r3, r2]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d100      	bne.n	80081ba <HAL_UART_IRQHandler+0x43e>
 80081b8:	e096      	b.n	80082e8 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80081ba:	183b      	adds	r3, r7, r0
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d100      	bne.n	80081c4 <HAL_UART_IRQHandler+0x448>
 80081c2:	e091      	b.n	80082e8 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c4:	f3ef 8310 	mrs	r3, PRIMASK
 80081c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80081ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081cc:	2488      	movs	r4, #136	; 0x88
 80081ce:	193a      	adds	r2, r7, r4
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	2301      	movs	r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f383 8810 	msr	PRIMASK, r3
}
 80081dc:	46c0      	nop			; (mov r8, r8)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4943      	ldr	r1, [pc, #268]	; (80082f8 <HAL_UART_IRQHandler+0x57c>)
 80081ea:	400a      	ands	r2, r1
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	193b      	adds	r3, r7, r4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f383 8810 	msr	PRIMASK, r3
}
 80081fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008200:	61bb      	str	r3, [r7, #24]
  return(result);
 8008202:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008204:	2484      	movs	r4, #132	; 0x84
 8008206:	193a      	adds	r2, r7, r4
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	2301      	movs	r3, #1
 800820c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f383 8810 	msr	PRIMASK, r3
}
 8008214:	46c0      	nop			; (mov r8, r8)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2101      	movs	r1, #1
 8008222:	438a      	bics	r2, r1
 8008224:	609a      	str	r2, [r3, #8]
 8008226:	193b      	adds	r3, r7, r4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	f383 8810 	msr	PRIMASK, r3
}
 8008232:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008246:	f3ef 8310 	mrs	r3, PRIMASK
 800824a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824e:	2480      	movs	r4, #128	; 0x80
 8008250:	193a      	adds	r2, r7, r4
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	2301      	movs	r3, #1
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	f383 8810 	msr	PRIMASK, r3
}
 800825e:	46c0      	nop			; (mov r8, r8)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2110      	movs	r1, #16
 800826c:	438a      	bics	r2, r1
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	193b      	adds	r3, r7, r4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	f383 8810 	msr	PRIMASK, r3
}
 800827c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800827e:	183b      	adds	r3, r7, r0
 8008280:	881a      	ldrh	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0011      	movs	r1, r2
 8008286:	0018      	movs	r0, r3
 8008288:	f000 f848 	bl	800831c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800828c:	e02c      	b.n	80082e8 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800828e:	23a4      	movs	r3, #164	; 0xa4
 8008290:	18fb      	adds	r3, r7, r3
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2280      	movs	r2, #128	; 0x80
 8008296:	4013      	ands	r3, r2
 8008298:	d00f      	beq.n	80082ba <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800829a:	23a0      	movs	r3, #160	; 0xa0
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2280      	movs	r2, #128	; 0x80
 80082a2:	4013      	ands	r3, r2
 80082a4:	d009      	beq.n	80082ba <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d01e      	beq.n	80082ec <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	0010      	movs	r0, r2
 80082b6:	4798      	blx	r3
    }
    return;
 80082b8:	e018      	b.n	80082ec <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082ba:	23a4      	movs	r3, #164	; 0xa4
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2240      	movs	r2, #64	; 0x40
 80082c2:	4013      	ands	r3, r2
 80082c4:	d013      	beq.n	80082ee <HAL_UART_IRQHandler+0x572>
 80082c6:	23a0      	movs	r3, #160	; 0xa0
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2240      	movs	r2, #64	; 0x40
 80082ce:	4013      	ands	r3, r2
 80082d0:	d00d      	beq.n	80082ee <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 fd3e 	bl	8008d56 <UART_EndTransmit_IT>
    return;
 80082da:	e008      	b.n	80082ee <HAL_UART_IRQHandler+0x572>
      return;
 80082dc:	46c0      	nop			; (mov r8, r8)
 80082de:	e006      	b.n	80082ee <HAL_UART_IRQHandler+0x572>
    return;
 80082e0:	46c0      	nop			; (mov r8, r8)
 80082e2:	e004      	b.n	80082ee <HAL_UART_IRQHandler+0x572>
      return;
 80082e4:	46c0      	nop			; (mov r8, r8)
 80082e6:	e002      	b.n	80082ee <HAL_UART_IRQHandler+0x572>
      return;
 80082e8:	46c0      	nop			; (mov r8, r8)
 80082ea:	e000      	b.n	80082ee <HAL_UART_IRQHandler+0x572>
    return;
 80082ec:	46c0      	nop			; (mov r8, r8)
  }

}
 80082ee:	46bd      	mov	sp, r7
 80082f0:	b02b      	add	sp, #172	; 0xac
 80082f2:	bd90      	pop	{r4, r7, pc}
 80082f4:	fffffeff 	.word	0xfffffeff
 80082f8:	fffffedf 	.word	0xfffffedf

080082fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008304:	46c0      	nop			; (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	b002      	add	sp, #8
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008314:	46c0      	nop			; (mov r8, r8)
 8008316:	46bd      	mov	sp, r7
 8008318:	b002      	add	sp, #8
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	000a      	movs	r2, r1
 8008326:	1cbb      	adds	r3, r7, #2
 8008328:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	46bd      	mov	sp, r7
 800832e:	b002      	add	sp, #8
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800833c:	231e      	movs	r3, #30
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	2200      	movs	r2, #0
 8008342:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	4313      	orrs	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4aa1      	ldr	r2, [pc, #644]	; (80085e8 <UART_SetConfig+0x2b4>)
 8008364:	4013      	ands	r3, r2
 8008366:	0019      	movs	r1, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	430a      	orrs	r2, r1
 8008370:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4a9c      	ldr	r2, [pc, #624]	; (80085ec <UART_SetConfig+0x2b8>)
 800837a:	4013      	ands	r3, r2
 800837c:	0019      	movs	r1, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	4a93      	ldr	r2, [pc, #588]	; (80085f0 <UART_SetConfig+0x2bc>)
 80083a2:	4013      	ands	r3, r2
 80083a4:	0019      	movs	r1, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a8f      	ldr	r2, [pc, #572]	; (80085f4 <UART_SetConfig+0x2c0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d127      	bne.n	800840a <UART_SetConfig+0xd6>
 80083ba:	4b8f      	ldr	r3, [pc, #572]	; (80085f8 <UART_SetConfig+0x2c4>)
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	2203      	movs	r2, #3
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d00d      	beq.n	80083e2 <UART_SetConfig+0xae>
 80083c6:	d81b      	bhi.n	8008400 <UART_SetConfig+0xcc>
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d014      	beq.n	80083f6 <UART_SetConfig+0xc2>
 80083cc:	d818      	bhi.n	8008400 <UART_SetConfig+0xcc>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <UART_SetConfig+0xa4>
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d00a      	beq.n	80083ec <UART_SetConfig+0xb8>
 80083d6:	e013      	b.n	8008400 <UART_SetConfig+0xcc>
 80083d8:	231f      	movs	r3, #31
 80083da:	18fb      	adds	r3, r7, r3
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e049      	b.n	8008476 <UART_SetConfig+0x142>
 80083e2:	231f      	movs	r3, #31
 80083e4:	18fb      	adds	r3, r7, r3
 80083e6:	2202      	movs	r2, #2
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e044      	b.n	8008476 <UART_SetConfig+0x142>
 80083ec:	231f      	movs	r3, #31
 80083ee:	18fb      	adds	r3, r7, r3
 80083f0:	2204      	movs	r2, #4
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	e03f      	b.n	8008476 <UART_SetConfig+0x142>
 80083f6:	231f      	movs	r3, #31
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	2208      	movs	r2, #8
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	e03a      	b.n	8008476 <UART_SetConfig+0x142>
 8008400:	231f      	movs	r3, #31
 8008402:	18fb      	adds	r3, r7, r3
 8008404:	2210      	movs	r2, #16
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e035      	b.n	8008476 <UART_SetConfig+0x142>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a7b      	ldr	r2, [pc, #492]	; (80085fc <UART_SetConfig+0x2c8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d104      	bne.n	800841e <UART_SetConfig+0xea>
 8008414:	231f      	movs	r3, #31
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]
 800841c:	e02b      	b.n	8008476 <UART_SetConfig+0x142>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a77      	ldr	r2, [pc, #476]	; (8008600 <UART_SetConfig+0x2cc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d104      	bne.n	8008432 <UART_SetConfig+0xfe>
 8008428:	231f      	movs	r3, #31
 800842a:	18fb      	adds	r3, r7, r3
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e021      	b.n	8008476 <UART_SetConfig+0x142>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a73      	ldr	r2, [pc, #460]	; (8008604 <UART_SetConfig+0x2d0>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d104      	bne.n	8008446 <UART_SetConfig+0x112>
 800843c:	231f      	movs	r3, #31
 800843e:	18fb      	adds	r3, r7, r3
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e017      	b.n	8008476 <UART_SetConfig+0x142>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a6f      	ldr	r2, [pc, #444]	; (8008608 <UART_SetConfig+0x2d4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d104      	bne.n	800845a <UART_SetConfig+0x126>
 8008450:	231f      	movs	r3, #31
 8008452:	18fb      	adds	r3, r7, r3
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e00d      	b.n	8008476 <UART_SetConfig+0x142>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a6b      	ldr	r2, [pc, #428]	; (800860c <UART_SetConfig+0x2d8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d104      	bne.n	800846e <UART_SetConfig+0x13a>
 8008464:	231f      	movs	r3, #31
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	2200      	movs	r2, #0
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e003      	b.n	8008476 <UART_SetConfig+0x142>
 800846e:	231f      	movs	r3, #31
 8008470:	18fb      	adds	r3, r7, r3
 8008472:	2210      	movs	r2, #16
 8008474:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69da      	ldr	r2, [r3, #28]
 800847a:	2380      	movs	r3, #128	; 0x80
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	429a      	cmp	r2, r3
 8008480:	d15d      	bne.n	800853e <UART_SetConfig+0x20a>
  {
    switch (clocksource)
 8008482:	231f      	movs	r3, #31
 8008484:	18fb      	adds	r3, r7, r3
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b08      	cmp	r3, #8
 800848a:	d015      	beq.n	80084b8 <UART_SetConfig+0x184>
 800848c:	dc18      	bgt.n	80084c0 <UART_SetConfig+0x18c>
 800848e:	2b04      	cmp	r3, #4
 8008490:	d00d      	beq.n	80084ae <UART_SetConfig+0x17a>
 8008492:	dc15      	bgt.n	80084c0 <UART_SetConfig+0x18c>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <UART_SetConfig+0x16a>
 8008498:	2b02      	cmp	r3, #2
 800849a:	d005      	beq.n	80084a8 <UART_SetConfig+0x174>
 800849c:	e010      	b.n	80084c0 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800849e:	f7fd fda3 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 80084a2:	0003      	movs	r3, r0
 80084a4:	61bb      	str	r3, [r7, #24]
        break;
 80084a6:	e012      	b.n	80084ce <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084a8:	4b59      	ldr	r3, [pc, #356]	; (8008610 <UART_SetConfig+0x2dc>)
 80084aa:	61bb      	str	r3, [r7, #24]
        break;
 80084ac:	e00f      	b.n	80084ce <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ae:	f7fd fd2f 	bl	8005f10 <HAL_RCC_GetSysClockFreq>
 80084b2:	0003      	movs	r3, r0
 80084b4:	61bb      	str	r3, [r7, #24]
        break;
 80084b6:	e00a      	b.n	80084ce <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084b8:	2380      	movs	r3, #128	; 0x80
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	61bb      	str	r3, [r7, #24]
        break;
 80084be:	e006      	b.n	80084ce <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084c4:	231e      	movs	r3, #30
 80084c6:	18fb      	adds	r3, r7, r3
 80084c8:	2201      	movs	r2, #1
 80084ca:	701a      	strb	r2, [r3, #0]
        break;
 80084cc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d100      	bne.n	80084d6 <UART_SetConfig+0x1a2>
 80084d4:	e07b      	b.n	80085ce <UART_SetConfig+0x29a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	005a      	lsls	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	18d2      	adds	r2, r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	0019      	movs	r1, r3
 80084e8:	0010      	movs	r0, r2
 80084ea:	f7f7 fe27 	bl	800013c <__udivsi3>
 80084ee:	0003      	movs	r3, r0
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d91c      	bls.n	8008534 <UART_SetConfig+0x200>
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	025b      	lsls	r3, r3, #9
 8008500:	429a      	cmp	r2, r3
 8008502:	d217      	bcs.n	8008534 <UART_SetConfig+0x200>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	b29a      	uxth	r2, r3
 8008508:	200e      	movs	r0, #14
 800850a:	183b      	adds	r3, r7, r0
 800850c:	210f      	movs	r1, #15
 800850e:	438a      	bics	r2, r1
 8008510:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	085b      	lsrs	r3, r3, #1
 8008516:	b29b      	uxth	r3, r3
 8008518:	2207      	movs	r2, #7
 800851a:	4013      	ands	r3, r2
 800851c:	b299      	uxth	r1, r3
 800851e:	183b      	adds	r3, r7, r0
 8008520:	183a      	adds	r2, r7, r0
 8008522:	8812      	ldrh	r2, [r2, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	183a      	adds	r2, r7, r0
 800852e:	8812      	ldrh	r2, [r2, #0]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	e04c      	b.n	80085ce <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 8008534:	231e      	movs	r3, #30
 8008536:	18fb      	adds	r3, r7, r3
 8008538:	2201      	movs	r2, #1
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	e047      	b.n	80085ce <UART_SetConfig+0x29a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800853e:	231f      	movs	r3, #31
 8008540:	18fb      	adds	r3, r7, r3
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b08      	cmp	r3, #8
 8008546:	d015      	beq.n	8008574 <UART_SetConfig+0x240>
 8008548:	dc18      	bgt.n	800857c <UART_SetConfig+0x248>
 800854a:	2b04      	cmp	r3, #4
 800854c:	d00d      	beq.n	800856a <UART_SetConfig+0x236>
 800854e:	dc15      	bgt.n	800857c <UART_SetConfig+0x248>
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <UART_SetConfig+0x226>
 8008554:	2b02      	cmp	r3, #2
 8008556:	d005      	beq.n	8008564 <UART_SetConfig+0x230>
 8008558:	e010      	b.n	800857c <UART_SetConfig+0x248>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800855a:	f7fd fd45 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 800855e:	0003      	movs	r3, r0
 8008560:	61bb      	str	r3, [r7, #24]
        break;
 8008562:	e012      	b.n	800858a <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008564:	4b2a      	ldr	r3, [pc, #168]	; (8008610 <UART_SetConfig+0x2dc>)
 8008566:	61bb      	str	r3, [r7, #24]
        break;
 8008568:	e00f      	b.n	800858a <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800856a:	f7fd fcd1 	bl	8005f10 <HAL_RCC_GetSysClockFreq>
 800856e:	0003      	movs	r3, r0
 8008570:	61bb      	str	r3, [r7, #24]
        break;
 8008572:	e00a      	b.n	800858a <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	61bb      	str	r3, [r7, #24]
        break;
 800857a:	e006      	b.n	800858a <UART_SetConfig+0x256>
      default:
        pclk = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008580:	231e      	movs	r3, #30
 8008582:	18fb      	adds	r3, r7, r3
 8008584:	2201      	movs	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
        break;
 8008588:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01e      	beq.n	80085ce <UART_SetConfig+0x29a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	085a      	lsrs	r2, r3, #1
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	18d2      	adds	r2, r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	0019      	movs	r1, r3
 80085a0:	0010      	movs	r0, r2
 80085a2:	f7f7 fdcb 	bl	800013c <__udivsi3>
 80085a6:	0003      	movs	r3, r0
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b0f      	cmp	r3, #15
 80085b0:	d909      	bls.n	80085c6 <UART_SetConfig+0x292>
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	025b      	lsls	r3, r3, #9
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d204      	bcs.n	80085c6 <UART_SetConfig+0x292>
      {
        huart->Instance->BRR = usartdiv;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	60da      	str	r2, [r3, #12]
 80085c4:	e003      	b.n	80085ce <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 80085c6:	231e      	movs	r3, #30
 80085c8:	18fb      	adds	r3, r7, r3
 80085ca:	2201      	movs	r2, #1
 80085cc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80085da:	231e      	movs	r3, #30
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	781b      	ldrb	r3, [r3, #0]
}
 80085e0:	0018      	movs	r0, r3
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b008      	add	sp, #32
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	efff69f3 	.word	0xefff69f3
 80085ec:	ffffcfff 	.word	0xffffcfff
 80085f0:	fffff4ff 	.word	0xfffff4ff
 80085f4:	40013800 	.word	0x40013800
 80085f8:	40021000 	.word	0x40021000
 80085fc:	40004400 	.word	0x40004400
 8008600:	40004800 	.word	0x40004800
 8008604:	40004c00 	.word	0x40004c00
 8008608:	40005000 	.word	0x40005000
 800860c:	40011400 	.word	0x40011400
 8008610:	007a1200 	.word	0x007a1200

08008614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2201      	movs	r2, #1
 8008622:	4013      	ands	r3, r2
 8008624:	d00b      	beq.n	800863e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	4a4a      	ldr	r2, [pc, #296]	; (8008758 <UART_AdvFeatureConfig+0x144>)
 800862e:	4013      	ands	r3, r2
 8008630:	0019      	movs	r1, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	2202      	movs	r2, #2
 8008644:	4013      	ands	r3, r2
 8008646:	d00b      	beq.n	8008660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	4a43      	ldr	r2, [pc, #268]	; (800875c <UART_AdvFeatureConfig+0x148>)
 8008650:	4013      	ands	r3, r2
 8008652:	0019      	movs	r1, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2204      	movs	r2, #4
 8008666:	4013      	ands	r3, r2
 8008668:	d00b      	beq.n	8008682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	4a3b      	ldr	r2, [pc, #236]	; (8008760 <UART_AdvFeatureConfig+0x14c>)
 8008672:	4013      	ands	r3, r2
 8008674:	0019      	movs	r1, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	2208      	movs	r2, #8
 8008688:	4013      	ands	r3, r2
 800868a:	d00b      	beq.n	80086a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	4a34      	ldr	r2, [pc, #208]	; (8008764 <UART_AdvFeatureConfig+0x150>)
 8008694:	4013      	ands	r3, r2
 8008696:	0019      	movs	r1, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	2210      	movs	r2, #16
 80086aa:	4013      	ands	r3, r2
 80086ac:	d00b      	beq.n	80086c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	4a2c      	ldr	r2, [pc, #176]	; (8008768 <UART_AdvFeatureConfig+0x154>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	0019      	movs	r1, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	2220      	movs	r2, #32
 80086cc:	4013      	ands	r3, r2
 80086ce:	d00b      	beq.n	80086e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	4a25      	ldr	r2, [pc, #148]	; (800876c <UART_AdvFeatureConfig+0x158>)
 80086d8:	4013      	ands	r3, r2
 80086da:	0019      	movs	r1, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2240      	movs	r2, #64	; 0x40
 80086ee:	4013      	ands	r3, r2
 80086f0:	d01d      	beq.n	800872e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	4a1d      	ldr	r2, [pc, #116]	; (8008770 <UART_AdvFeatureConfig+0x15c>)
 80086fa:	4013      	ands	r3, r2
 80086fc:	0019      	movs	r1, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800870e:	2380      	movs	r3, #128	; 0x80
 8008710:	035b      	lsls	r3, r3, #13
 8008712:	429a      	cmp	r2, r3
 8008714:	d10b      	bne.n	800872e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	4a15      	ldr	r2, [pc, #84]	; (8008774 <UART_AdvFeatureConfig+0x160>)
 800871e:	4013      	ands	r3, r2
 8008720:	0019      	movs	r1, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	2280      	movs	r2, #128	; 0x80
 8008734:	4013      	ands	r3, r2
 8008736:	d00b      	beq.n	8008750 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	4a0e      	ldr	r2, [pc, #56]	; (8008778 <UART_AdvFeatureConfig+0x164>)
 8008740:	4013      	ands	r3, r2
 8008742:	0019      	movs	r1, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	605a      	str	r2, [r3, #4]
  }
}
 8008750:	46c0      	nop			; (mov r8, r8)
 8008752:	46bd      	mov	sp, r7
 8008754:	b002      	add	sp, #8
 8008756:	bd80      	pop	{r7, pc}
 8008758:	fffdffff 	.word	0xfffdffff
 800875c:	fffeffff 	.word	0xfffeffff
 8008760:	fffbffff 	.word	0xfffbffff
 8008764:	ffff7fff 	.word	0xffff7fff
 8008768:	ffffefff 	.word	0xffffefff
 800876c:	ffffdfff 	.word	0xffffdfff
 8008770:	ffefffff 	.word	0xffefffff
 8008774:	ff9fffff 	.word	0xff9fffff
 8008778:	fff7ffff 	.word	0xfff7ffff

0800877c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2280      	movs	r2, #128	; 0x80
 8008788:	2100      	movs	r1, #0
 800878a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800878c:	f7fb fea4 	bl	80044d8 <HAL_GetTick>
 8008790:	0003      	movs	r3, r0
 8008792:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2208      	movs	r2, #8
 800879c:	4013      	ands	r3, r2
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d10c      	bne.n	80087bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2280      	movs	r2, #128	; 0x80
 80087a6:	0391      	lsls	r1, r2, #14
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4a17      	ldr	r2, [pc, #92]	; (8008808 <UART_CheckIdleState+0x8c>)
 80087ac:	9200      	str	r2, [sp, #0]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f000 f82c 	bl	800880c <UART_WaitOnFlagUntilTimeout>
 80087b4:	1e03      	subs	r3, r0, #0
 80087b6:	d001      	beq.n	80087bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e021      	b.n	8008800 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2204      	movs	r2, #4
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d10c      	bne.n	80087e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2280      	movs	r2, #128	; 0x80
 80087ce:	03d1      	lsls	r1, r2, #15
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	4a0d      	ldr	r2, [pc, #52]	; (8008808 <UART_CheckIdleState+0x8c>)
 80087d4:	9200      	str	r2, [sp, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f000 f818 	bl	800880c <UART_WaitOnFlagUntilTimeout>
 80087dc:	1e03      	subs	r3, r0, #0
 80087de:	d001      	beq.n	80087e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e00d      	b.n	8008800 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2220      	movs	r2, #32
 80087e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2274      	movs	r2, #116	; 0x74
 80087fa:	2100      	movs	r1, #0
 80087fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	0018      	movs	r0, r3
 8008802:	46bd      	mov	sp, r7
 8008804:	b004      	add	sp, #16
 8008806:	bd80      	pop	{r7, pc}
 8008808:	01ffffff 	.word	0x01ffffff

0800880c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b094      	sub	sp, #80	; 0x50
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	1dfb      	adds	r3, r7, #7
 800881a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800881c:	e0a3      	b.n	8008966 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800881e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008820:	3301      	adds	r3, #1
 8008822:	d100      	bne.n	8008826 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008824:	e09f      	b.n	8008966 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008826:	f7fb fe57 	bl	80044d8 <HAL_GetTick>
 800882a:	0002      	movs	r2, r0
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008832:	429a      	cmp	r2, r3
 8008834:	d302      	bcc.n	800883c <UART_WaitOnFlagUntilTimeout+0x30>
 8008836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008838:	2b00      	cmp	r3, #0
 800883a:	d13d      	bne.n	80088b8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800883c:	f3ef 8310 	mrs	r3, PRIMASK
 8008840:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008844:	647b      	str	r3, [r7, #68]	; 0x44
 8008846:	2301      	movs	r3, #1
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	f383 8810 	msr	PRIMASK, r3
}
 8008850:	46c0      	nop			; (mov r8, r8)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	494c      	ldr	r1, [pc, #304]	; (8008990 <UART_WaitOnFlagUntilTimeout+0x184>)
 800885e:	400a      	ands	r2, r1
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008864:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	f383 8810 	msr	PRIMASK, r3
}
 800886c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886e:	f3ef 8310 	mrs	r3, PRIMASK
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008876:	643b      	str	r3, [r7, #64]	; 0x40
 8008878:	2301      	movs	r3, #1
 800887a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	f383 8810 	msr	PRIMASK, r3
}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2101      	movs	r1, #1
 8008890:	438a      	bics	r2, r1
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889a:	f383 8810 	msr	PRIMASK, r3
}
 800889e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2274      	movs	r2, #116	; 0x74
 80088b0:	2100      	movs	r1, #0
 80088b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e067      	b.n	8008988 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2204      	movs	r2, #4
 80088c0:	4013      	ands	r3, r2
 80088c2:	d050      	beq.n	8008966 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	69da      	ldr	r2, [r3, #28]
 80088ca:	2380      	movs	r3, #128	; 0x80
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	401a      	ands	r2, r3
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d146      	bne.n	8008966 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2280      	movs	r2, #128	; 0x80
 80088de:	0112      	lsls	r2, r2, #4
 80088e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e2:	f3ef 8310 	mrs	r3, PRIMASK
 80088e6:	613b      	str	r3, [r7, #16]
  return(result);
 80088e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ec:	2301      	movs	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f383 8810 	msr	PRIMASK, r3
}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4923      	ldr	r1, [pc, #140]	; (8008990 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008904:	400a      	ands	r2, r1
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	f383 8810 	msr	PRIMASK, r3
}
 8008912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008914:	f3ef 8310 	mrs	r3, PRIMASK
 8008918:	61fb      	str	r3, [r7, #28]
  return(result);
 800891a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891c:	64bb      	str	r3, [r7, #72]	; 0x48
 800891e:	2301      	movs	r3, #1
 8008920:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f383 8810 	msr	PRIMASK, r3
}
 8008928:	46c0      	nop			; (mov r8, r8)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2101      	movs	r1, #1
 8008936:	438a      	bics	r2, r1
 8008938:	609a      	str	r2, [r3, #8]
 800893a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	f383 8810 	msr	PRIMASK, r3
}
 8008944:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2220      	movs	r2, #32
 800894a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2220      	movs	r2, #32
 8008950:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2280      	movs	r2, #128	; 0x80
 8008956:	2120      	movs	r1, #32
 8008958:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2274      	movs	r2, #116	; 0x74
 800895e:	2100      	movs	r1, #0
 8008960:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e010      	b.n	8008988 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	4013      	ands	r3, r2
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	425a      	negs	r2, r3
 8008976:	4153      	adcs	r3, r2
 8008978:	b2db      	uxtb	r3, r3
 800897a:	001a      	movs	r2, r3
 800897c:	1dfb      	adds	r3, r7, #7
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d100      	bne.n	8008986 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008984:	e74b      	b.n	800881e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	0018      	movs	r0, r3
 800898a:	46bd      	mov	sp, r7
 800898c:	b014      	add	sp, #80	; 0x50
 800898e:	bd80      	pop	{r7, pc}
 8008990:	fffffe5f 	.word	0xfffffe5f

08008994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08c      	sub	sp, #48	; 0x30
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	1dbb      	adds	r3, r7, #6
 80089a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	1dba      	adds	r2, r7, #6
 80089ac:	2158      	movs	r1, #88	; 0x58
 80089ae:	8812      	ldrh	r2, [r2, #0]
 80089b0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1dba      	adds	r2, r7, #6
 80089b6:	215a      	movs	r1, #90	; 0x5a
 80089b8:	8812      	ldrh	r2, [r2, #0]
 80089ba:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	2380      	movs	r3, #128	; 0x80
 80089c8:	015b      	lsls	r3, r3, #5
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d10d      	bne.n	80089ea <UART_Start_Receive_IT+0x56>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <UART_Start_Receive_IT+0x4c>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	225c      	movs	r2, #92	; 0x5c
 80089da:	4943      	ldr	r1, [pc, #268]	; (8008ae8 <UART_Start_Receive_IT+0x154>)
 80089dc:	5299      	strh	r1, [r3, r2]
 80089de:	e02e      	b.n	8008a3e <UART_Start_Receive_IT+0xaa>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	225c      	movs	r2, #92	; 0x5c
 80089e4:	21ff      	movs	r1, #255	; 0xff
 80089e6:	5299      	strh	r1, [r3, r2]
 80089e8:	e029      	b.n	8008a3e <UART_Start_Receive_IT+0xaa>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10d      	bne.n	8008a0e <UART_Start_Receive_IT+0x7a>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d104      	bne.n	8008a04 <UART_Start_Receive_IT+0x70>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	225c      	movs	r2, #92	; 0x5c
 80089fe:	21ff      	movs	r1, #255	; 0xff
 8008a00:	5299      	strh	r1, [r3, r2]
 8008a02:	e01c      	b.n	8008a3e <UART_Start_Receive_IT+0xaa>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	225c      	movs	r2, #92	; 0x5c
 8008a08:	217f      	movs	r1, #127	; 0x7f
 8008a0a:	5299      	strh	r1, [r3, r2]
 8008a0c:	e017      	b.n	8008a3e <UART_Start_Receive_IT+0xaa>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	2380      	movs	r3, #128	; 0x80
 8008a14:	055b      	lsls	r3, r3, #21
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d10d      	bne.n	8008a36 <UART_Start_Receive_IT+0xa2>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d104      	bne.n	8008a2c <UART_Start_Receive_IT+0x98>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	225c      	movs	r2, #92	; 0x5c
 8008a26:	217f      	movs	r1, #127	; 0x7f
 8008a28:	5299      	strh	r1, [r3, r2]
 8008a2a:	e008      	b.n	8008a3e <UART_Start_Receive_IT+0xaa>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	225c      	movs	r2, #92	; 0x5c
 8008a30:	213f      	movs	r1, #63	; 0x3f
 8008a32:	5299      	strh	r1, [r3, r2]
 8008a34:	e003      	b.n	8008a3e <UART_Start_Receive_IT+0xaa>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	225c      	movs	r2, #92	; 0x5c
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2280      	movs	r2, #128	; 0x80
 8008a42:	2100      	movs	r1, #0
 8008a44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2222      	movs	r2, #34	; 0x22
 8008a4a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a50:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a52:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a56:	2301      	movs	r3, #1
 8008a58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	f383 8810 	msr	PRIMASK, r3
}
 8008a60:	46c0      	nop			; (mov r8, r8)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	609a      	str	r2, [r3, #8]
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	f383 8810 	msr	PRIMASK, r3
}
 8008a7c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	2380      	movs	r3, #128	; 0x80
 8008a84:	015b      	lsls	r3, r3, #5
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d107      	bne.n	8008a9a <UART_Start_Receive_IT+0x106>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d103      	bne.n	8008a9a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a15      	ldr	r2, [pc, #84]	; (8008aec <UART_Start_Receive_IT+0x158>)
 8008a96:	665a      	str	r2, [r3, #100]	; 0x64
 8008a98:	e002      	b.n	8008aa0 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4a14      	ldr	r2, [pc, #80]	; (8008af0 <UART_Start_Receive_IT+0x15c>)
 8008a9e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2274      	movs	r2, #116	; 0x74
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8008aac:	613b      	str	r3, [r7, #16]
  return(result);
 8008aae:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f383 8810 	msr	PRIMASK, r3
}
 8008abc:	46c0      	nop			; (mov r8, r8)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2190      	movs	r1, #144	; 0x90
 8008aca:	0049      	lsls	r1, r1, #1
 8008acc:	430a      	orrs	r2, r1
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f383 8810 	msr	PRIMASK, r3
}
 8008ada:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	0018      	movs	r0, r3
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	b00c      	add	sp, #48	; 0x30
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	000001ff 	.word	0x000001ff
 8008aec:	08008f15 	.word	0x08008f15
 8008af0:	08008dad 	.word	0x08008dad

08008af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08e      	sub	sp, #56	; 0x38
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008afc:	f3ef 8310 	mrs	r3, PRIMASK
 8008b00:	617b      	str	r3, [r7, #20]
  return(result);
 8008b02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b04:	637b      	str	r3, [r7, #52]	; 0x34
 8008b06:	2301      	movs	r3, #1
 8008b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f383 8810 	msr	PRIMASK, r3
}
 8008b10:	46c0      	nop			; (mov r8, r8)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4925      	ldr	r1, [pc, #148]	; (8008bb4 <UART_EndRxTransfer+0xc0>)
 8008b1e:	400a      	ands	r2, r1
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f383 8810 	msr	PRIMASK, r3
}
 8008b2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b32:	623b      	str	r3, [r7, #32]
  return(result);
 8008b34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b36:	633b      	str	r3, [r7, #48]	; 0x30
 8008b38:	2301      	movs	r3, #1
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	f383 8810 	msr	PRIMASK, r3
}
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2101      	movs	r1, #1
 8008b50:	438a      	bics	r2, r1
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	f383 8810 	msr	PRIMASK, r3
}
 8008b5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d118      	bne.n	8008b9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b68:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b72:	2301      	movs	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f383 8810 	msr	PRIMASK, r3
}
 8008b7c:	46c0      	nop			; (mov r8, r8)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2110      	movs	r1, #16
 8008b8a:	438a      	bics	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f383 8810 	msr	PRIMASK, r3
}
 8008b98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008bac:	46c0      	nop			; (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b00e      	add	sp, #56	; 0x38
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	fffffedf 	.word	0xfffffedf

08008bb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	225a      	movs	r2, #90	; 0x5a
 8008bca:	2100      	movs	r1, #0
 8008bcc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2252      	movs	r2, #82	; 0x52
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f7ff fb97 	bl	800830c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bde:	46c0      	nop			; (mov r8, r8)
 8008be0:	46bd      	mov	sp, r7
 8008be2:	b004      	add	sp, #16
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b08a      	sub	sp, #40	; 0x28
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bf2:	2b21      	cmp	r3, #33	; 0x21
 8008bf4:	d14d      	bne.n	8008c92 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2252      	movs	r2, #82	; 0x52
 8008bfa:	5a9b      	ldrh	r3, [r3, r2]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d132      	bne.n	8008c68 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c02:	f3ef 8310 	mrs	r3, PRIMASK
 8008c06:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c08:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f383 8810 	msr	PRIMASK, r3
}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2180      	movs	r1, #128	; 0x80
 8008c24:	438a      	bics	r2, r1
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f383 8810 	msr	PRIMASK, r3
}
 8008c32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c34:	f3ef 8310 	mrs	r3, PRIMASK
 8008c38:	617b      	str	r3, [r7, #20]
  return(result);
 8008c3a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c3c:	623b      	str	r3, [r7, #32]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	f383 8810 	msr	PRIMASK, r3
}
 8008c48:	46c0      	nop			; (mov r8, r8)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2140      	movs	r1, #64	; 0x40
 8008c56:	430a      	orrs	r2, r1
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	f383 8810 	msr	PRIMASK, r3
}
 8008c64:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008c66:	e014      	b.n	8008c92 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	b292      	uxth	r2, r2
 8008c74:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2252      	movs	r2, #82	; 0x52
 8008c84:	5a9b      	ldrh	r3, [r3, r2]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	b299      	uxth	r1, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2252      	movs	r2, #82	; 0x52
 8008c90:	5299      	strh	r1, [r3, r2]
}
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	46bd      	mov	sp, r7
 8008c96:	b00a      	add	sp, #40	; 0x28
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b08c      	sub	sp, #48	; 0x30
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ca6:	2b21      	cmp	r3, #33	; 0x21
 8008ca8:	d151      	bne.n	8008d4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2252      	movs	r2, #82	; 0x52
 8008cae:	5a9b      	ldrh	r3, [r3, r2]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d132      	bne.n	8008d1c <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cba:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f383 8810 	msr	PRIMASK, r3
}
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2180      	movs	r1, #128	; 0x80
 8008cd8:	438a      	bics	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f383 8810 	msr	PRIMASK, r3
}
 8008ce6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cec:	61bb      	str	r3, [r7, #24]
  return(result);
 8008cee:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	f383 8810 	msr	PRIMASK, r3
}
 8008cfc:	46c0      	nop			; (mov r8, r8)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2140      	movs	r1, #64	; 0x40
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	f383 8810 	msr	PRIMASK, r3
}
 8008d18:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008d1a:	e018      	b.n	8008d4e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d24:	881a      	ldrh	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	05d2      	lsls	r2, r2, #23
 8008d2c:	0dd2      	lsrs	r2, r2, #23
 8008d2e:	b292      	uxth	r2, r2
 8008d30:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d36:	1c9a      	adds	r2, r3, #2
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2252      	movs	r2, #82	; 0x52
 8008d40:	5a9b      	ldrh	r3, [r3, r2]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	3b01      	subs	r3, #1
 8008d46:	b299      	uxth	r1, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2252      	movs	r2, #82	; 0x52
 8008d4c:	5299      	strh	r1, [r3, r2]
}
 8008d4e:	46c0      	nop			; (mov r8, r8)
 8008d50:	46bd      	mov	sp, r7
 8008d52:	b00c      	add	sp, #48	; 0x30
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d64:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	2301      	movs	r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f383 8810 	msr	PRIMASK, r3
}
 8008d72:	46c0      	nop			; (mov r8, r8)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2140      	movs	r1, #64	; 0x40
 8008d80:	438a      	bics	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f383 8810 	msr	PRIMASK, r3
}
 8008d8e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f7ff faac 	bl	80082fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008da4:	46c0      	nop			; (mov r8, r8)
 8008da6:	46bd      	mov	sp, r7
 8008da8:	b006      	add	sp, #24
 8008daa:	bd80      	pop	{r7, pc}

08008dac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b090      	sub	sp, #64	; 0x40
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008db4:	203e      	movs	r0, #62	; 0x3e
 8008db6:	183b      	adds	r3, r7, r0
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	215c      	movs	r1, #92	; 0x5c
 8008dbc:	5a52      	ldrh	r2, [r2, r1]
 8008dbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dc4:	2b22      	cmp	r3, #34	; 0x22
 8008dc6:	d000      	beq.n	8008dca <UART_RxISR_8BIT+0x1e>
 8008dc8:	e095      	b.n	8008ef6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	213c      	movs	r1, #60	; 0x3c
 8008dd0:	187b      	adds	r3, r7, r1
 8008dd2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008dd4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dd6:	187b      	adds	r3, r7, r1
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	183b      	adds	r3, r7, r0
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b2d9      	uxtb	r1, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de6:	400a      	ands	r2, r1
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	225a      	movs	r2, #90	; 0x5a
 8008dfa:	5a9b      	ldrh	r3, [r3, r2]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b299      	uxth	r1, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	225a      	movs	r2, #90	; 0x5a
 8008e06:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	225a      	movs	r2, #90	; 0x5a
 8008e0c:	5a9b      	ldrh	r3, [r3, r2]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d178      	bne.n	8008f06 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e14:	f3ef 8310 	mrs	r3, PRIMASK
 8008e18:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e1a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e1e:	2301      	movs	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	f383 8810 	msr	PRIMASK, r3
}
 8008e28:	46c0      	nop			; (mov r8, r8)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4936      	ldr	r1, [pc, #216]	; (8008f10 <UART_RxISR_8BIT+0x164>)
 8008e36:	400a      	ands	r2, r1
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	f383 8810 	msr	PRIMASK, r3
}
 8008e44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e46:	f3ef 8310 	mrs	r3, PRIMASK
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e50:	2301      	movs	r3, #1
 8008e52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	f383 8810 	msr	PRIMASK, r3
}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2101      	movs	r1, #1
 8008e68:	438a      	bics	r2, r1
 8008e6a:	609a      	str	r2, [r3, #8]
 8008e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	f383 8810 	msr	PRIMASK, r3
}
 8008e76:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d12f      	bne.n	8008eec <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e92:	f3ef 8310 	mrs	r3, PRIMASK
 8008e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e98:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f383 8810 	msr	PRIMASK, r3
}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2110      	movs	r1, #16
 8008eb4:	438a      	bics	r2, r1
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f383 8810 	msr	PRIMASK, r3
}
 8008ec2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	2210      	movs	r2, #16
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b10      	cmp	r3, #16
 8008ed0:	d103      	bne.n	8008eda <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2258      	movs	r2, #88	; 0x58
 8008ede:	5a9a      	ldrh	r2, [r3, r2]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	0011      	movs	r1, r2
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f7ff fa19 	bl	800831c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008eea:	e00c      	b.n	8008f06 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7fa fec4 	bl	8003c7c <HAL_UART_RxCpltCallback>
}
 8008ef4:	e007      	b.n	8008f06 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	699a      	ldr	r2, [r3, #24]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2108      	movs	r1, #8
 8008f02:	430a      	orrs	r2, r1
 8008f04:	619a      	str	r2, [r3, #24]
}
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	b010      	add	sp, #64	; 0x40
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	fffffedf 	.word	0xfffffedf

08008f14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b090      	sub	sp, #64	; 0x40
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f1c:	203e      	movs	r0, #62	; 0x3e
 8008f1e:	183b      	adds	r3, r7, r0
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	215c      	movs	r1, #92	; 0x5c
 8008f24:	5a52      	ldrh	r2, [r2, r1]
 8008f26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f2c:	2b22      	cmp	r3, #34	; 0x22
 8008f2e:	d000      	beq.n	8008f32 <UART_RxISR_16BIT+0x1e>
 8008f30:	e095      	b.n	800905e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	213c      	movs	r1, #60	; 0x3c
 8008f38:	187b      	adds	r3, r7, r1
 8008f3a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008f3c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f42:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f44:	187b      	adds	r3, r7, r1
 8008f46:	183a      	adds	r2, r7, r0
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	8812      	ldrh	r2, [r2, #0]
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	1c9a      	adds	r2, r3, #2
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	225a      	movs	r2, #90	; 0x5a
 8008f62:	5a9b      	ldrh	r3, [r3, r2]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b299      	uxth	r1, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	225a      	movs	r2, #90	; 0x5a
 8008f6e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	225a      	movs	r2, #90	; 0x5a
 8008f74:	5a9b      	ldrh	r3, [r3, r2]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d178      	bne.n	800906e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f80:	617b      	str	r3, [r7, #20]
  return(result);
 8008f82:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
 8008f86:	2301      	movs	r3, #1
 8008f88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	f383 8810 	msr	PRIMASK, r3
}
 8008f90:	46c0      	nop			; (mov r8, r8)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4936      	ldr	r1, [pc, #216]	; (8009078 <UART_RxISR_16BIT+0x164>)
 8008f9e:	400a      	ands	r2, r1
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f383 8810 	msr	PRIMASK, r3
}
 8008fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fae:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb2:	623b      	str	r3, [r7, #32]
  return(result);
 8008fb4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8008fb8:	2301      	movs	r3, #1
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	f383 8810 	msr	PRIMASK, r3
}
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689a      	ldr	r2, [r3, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2101      	movs	r1, #1
 8008fd0:	438a      	bics	r2, r1
 8008fd2:	609a      	str	r2, [r3, #8]
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	f383 8810 	msr	PRIMASK, r3
}
 8008fde:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d12f      	bne.n	8009054 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8008ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009000:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009004:	2301      	movs	r3, #1
 8009006:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f383 8810 	msr	PRIMASK, r3
}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2110      	movs	r1, #16
 800901c:	438a      	bics	r2, r1
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f383 8810 	msr	PRIMASK, r3
}
 800902a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	2210      	movs	r2, #16
 8009034:	4013      	ands	r3, r2
 8009036:	2b10      	cmp	r3, #16
 8009038:	d103      	bne.n	8009042 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2210      	movs	r2, #16
 8009040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2258      	movs	r2, #88	; 0x58
 8009046:	5a9a      	ldrh	r2, [r3, r2]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	0011      	movs	r1, r2
 800904c:	0018      	movs	r0, r3
 800904e:	f7ff f965 	bl	800831c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009052:	e00c      	b.n	800906e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	0018      	movs	r0, r3
 8009058:	f7fa fe10 	bl	8003c7c <HAL_UART_RxCpltCallback>
}
 800905c:	e007      	b.n	800906e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	699a      	ldr	r2, [r3, #24]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2108      	movs	r1, #8
 800906a:	430a      	orrs	r2, r1
 800906c:	619a      	str	r2, [r3, #24]
}
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	46bd      	mov	sp, r7
 8009072:	b010      	add	sp, #64	; 0x40
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	fffffedf 	.word	0xfffffedf

0800907c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009080:	4a06      	ldr	r2, [pc, #24]	; (800909c <MX_FATFS_Init+0x20>)
 8009082:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <MX_FATFS_Init+0x24>)
 8009084:	0011      	movs	r1, r2
 8009086:	0018      	movs	r0, r3
 8009088:	f003 fb56 	bl	800c738 <FATFS_LinkDriver>
 800908c:	0003      	movs	r3, r0
 800908e:	001a      	movs	r2, r3
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <MX_FATFS_Init+0x28>)
 8009092:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009094:	46c0      	nop			; (mov r8, r8)
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	200026fc 	.word	0x200026fc
 80090a0:	2000000c 	.word	0x2000000c
 80090a4:	200026f8 	.word	0x200026f8

080090a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090ae:	0018      	movs	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	0002      	movs	r2, r0
 80090bc:	1dfb      	adds	r3, r7, #7
 80090be:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 80090c0:	1dfb      	adds	r3, r7, #7
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	0018      	movs	r0, r3
 80090c6:	f004 fec5 	bl	800de54 <SD_disk_initialize>
 80090ca:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80090cc:	0018      	movs	r0, r3
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b002      	add	sp, #8
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	0002      	movs	r2, r0
 80090dc:	1dfb      	adds	r3, r7, #7
 80090de:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 80090e0:	1dfb      	adds	r3, r7, #7
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f004 ffd1 	bl	800e08c <SD_disk_status>
 80090ea:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80090ec:	0018      	movs	r0, r3
 80090ee:	46bd      	mov	sp, r7
 80090f0:	b002      	add	sp, #8
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090f4:	b5b0      	push	{r4, r5, r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	250f      	movs	r5, #15
 8009102:	197b      	adds	r3, r7, r5
 8009104:	1c02      	adds	r2, r0, #0
 8009106:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8009108:	683c      	ldr	r4, [r7, #0]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	197b      	adds	r3, r7, r5
 8009110:	7818      	ldrb	r0, [r3, #0]
 8009112:	0023      	movs	r3, r4
 8009114:	f004 ffd0 	bl	800e0b8 <SD_disk_read>
 8009118:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800911a:	0018      	movs	r0, r3
 800911c:	46bd      	mov	sp, r7
 800911e:	b004      	add	sp, #16
 8009120:	bdb0      	pop	{r4, r5, r7, pc}

08009122 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009122:	b5b0      	push	{r4, r5, r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	603b      	str	r3, [r7, #0]
 800912e:	250f      	movs	r5, #15
 8009130:	197b      	adds	r3, r7, r5
 8009132:	1c02      	adds	r2, r0, #0
 8009134:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8009136:	683c      	ldr	r4, [r7, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	197b      	adds	r3, r7, r5
 800913e:	7818      	ldrb	r0, [r3, #0]
 8009140:	0023      	movs	r3, r4
 8009142:	f005 f829 	bl	800e198 <SD_disk_write>
 8009146:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8009148:	0018      	movs	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	b004      	add	sp, #16
 800914e:	bdb0      	pop	{r4, r5, r7, pc}

08009150 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	603a      	str	r2, [r7, #0]
 8009158:	1dfb      	adds	r3, r7, #7
 800915a:	1c02      	adds	r2, r0, #0
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	1dbb      	adds	r3, r7, #6
 8009160:	1c0a      	adds	r2, r1, #0
 8009162:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	1dbb      	adds	r3, r7, #6
 8009168:	7819      	ldrb	r1, [r3, #0]
 800916a:	1dfb      	adds	r3, r7, #7
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	0018      	movs	r0, r3
 8009170:	f005 f89a 	bl	800e2a8 <SD_disk_ioctl>
 8009174:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8009176:	0018      	movs	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	b002      	add	sp, #8
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009180:	b5b0      	push	{r4, r5, r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	0002      	movs	r2, r0
 8009188:	1dfb      	adds	r3, r7, #7
 800918a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800918c:	1dfb      	adds	r3, r7, #7
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	4a0b      	ldr	r2, [pc, #44]	; (80091c0 <disk_status+0x40>)
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	18d3      	adds	r3, r2, r3
 8009196:	3304      	adds	r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	1dfa      	adds	r2, r7, #7
 800919e:	7812      	ldrb	r2, [r2, #0]
 80091a0:	4907      	ldr	r1, [pc, #28]	; (80091c0 <disk_status+0x40>)
 80091a2:	188a      	adds	r2, r1, r2
 80091a4:	7a12      	ldrb	r2, [r2, #8]
 80091a6:	250f      	movs	r5, #15
 80091a8:	197c      	adds	r4, r7, r5
 80091aa:	0010      	movs	r0, r2
 80091ac:	4798      	blx	r3
 80091ae:	0003      	movs	r3, r0
 80091b0:	7023      	strb	r3, [r4, #0]
  return stat;
 80091b2:	197b      	adds	r3, r7, r5
 80091b4:	781b      	ldrb	r3, [r3, #0]
}
 80091b6:	0018      	movs	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b004      	add	sp, #16
 80091bc:	bdb0      	pop	{r4, r5, r7, pc}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	20002720 	.word	0x20002720

080091c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80091c4:	b590      	push	{r4, r7, lr}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	0002      	movs	r2, r0
 80091cc:	1dfb      	adds	r3, r7, #7
 80091ce:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80091d0:	200f      	movs	r0, #15
 80091d2:	183b      	adds	r3, r7, r0
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 80091d8:	1dfb      	adds	r3, r7, #7
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	4a10      	ldr	r2, [pc, #64]	; (8009220 <disk_initialize+0x5c>)
 80091de:	5cd3      	ldrb	r3, [r2, r3]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d116      	bne.n	8009212 <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 80091e4:	1dfb      	adds	r3, r7, #7
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	4a0d      	ldr	r2, [pc, #52]	; (8009220 <disk_initialize+0x5c>)
 80091ea:	2101      	movs	r1, #1
 80091ec:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80091ee:	1dfb      	adds	r3, r7, #7
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	4a0b      	ldr	r2, [pc, #44]	; (8009220 <disk_initialize+0x5c>)
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	18d3      	adds	r3, r2, r3
 80091f8:	3304      	adds	r3, #4
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	1dfa      	adds	r2, r7, #7
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	4907      	ldr	r1, [pc, #28]	; (8009220 <disk_initialize+0x5c>)
 8009204:	188a      	adds	r2, r1, r2
 8009206:	7a12      	ldrb	r2, [r2, #8]
 8009208:	183c      	adds	r4, r7, r0
 800920a:	0010      	movs	r0, r2
 800920c:	4798      	blx	r3
 800920e:	0003      	movs	r3, r0
 8009210:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8009212:	230f      	movs	r3, #15
 8009214:	18fb      	adds	r3, r7, r3
 8009216:	781b      	ldrb	r3, [r3, #0]
}
 8009218:	0018      	movs	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	b005      	add	sp, #20
 800921e:	bd90      	pop	{r4, r7, pc}
 8009220:	20002720 	.word	0x20002720

08009224 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	210f      	movs	r1, #15
 8009232:	187b      	adds	r3, r7, r1
 8009234:	1c02      	adds	r2, r0, #0
 8009236:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009238:	187b      	adds	r3, r7, r1
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	4a0c      	ldr	r2, [pc, #48]	; (8009270 <disk_read+0x4c>)
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	18d3      	adds	r3, r2, r3
 8009242:	3304      	adds	r3, #4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689d      	ldr	r5, [r3, #8]
 8009248:	187b      	adds	r3, r7, r1
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	4a08      	ldr	r2, [pc, #32]	; (8009270 <disk_read+0x4c>)
 800924e:	18d3      	adds	r3, r2, r3
 8009250:	7a18      	ldrb	r0, [r3, #8]
 8009252:	2617      	movs	r6, #23
 8009254:	19bc      	adds	r4, r7, r6
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	47a8      	blx	r5
 800925e:	0003      	movs	r3, r0
 8009260:	7023      	strb	r3, [r4, #0]
  return res;
 8009262:	19bb      	adds	r3, r7, r6
 8009264:	781b      	ldrb	r3, [r3, #0]
}
 8009266:	0018      	movs	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	b007      	add	sp, #28
 800926c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	20002720 	.word	0x20002720

08009274 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	210f      	movs	r1, #15
 8009282:	187b      	adds	r3, r7, r1
 8009284:	1c02      	adds	r2, r0, #0
 8009286:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009288:	187b      	adds	r3, r7, r1
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <disk_write+0x4c>)
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	18d3      	adds	r3, r2, r3
 8009292:	3304      	adds	r3, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68dd      	ldr	r5, [r3, #12]
 8009298:	187b      	adds	r3, r7, r1
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	4a08      	ldr	r2, [pc, #32]	; (80092c0 <disk_write+0x4c>)
 800929e:	18d3      	adds	r3, r2, r3
 80092a0:	7a18      	ldrb	r0, [r3, #8]
 80092a2:	2617      	movs	r6, #23
 80092a4:	19bc      	adds	r4, r7, r6
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	47a8      	blx	r5
 80092ae:	0003      	movs	r3, r0
 80092b0:	7023      	strb	r3, [r4, #0]
  return res;
 80092b2:	19bb      	adds	r3, r7, r6
 80092b4:	781b      	ldrb	r3, [r3, #0]
}
 80092b6:	0018      	movs	r0, r3
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b007      	add	sp, #28
 80092bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	20002720 	.word	0x20002720

080092c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80092c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	603a      	str	r2, [r7, #0]
 80092cc:	1dfb      	adds	r3, r7, #7
 80092ce:	1c02      	adds	r2, r0, #0
 80092d0:	701a      	strb	r2, [r3, #0]
 80092d2:	1dbb      	adds	r3, r7, #6
 80092d4:	1c0a      	adds	r2, r1, #0
 80092d6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80092d8:	1dfb      	adds	r3, r7, #7
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	4a0c      	ldr	r2, [pc, #48]	; (8009310 <disk_ioctl+0x4c>)
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	18d3      	adds	r3, r2, r3
 80092e2:	3304      	adds	r3, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	1dfa      	adds	r2, r7, #7
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	4908      	ldr	r1, [pc, #32]	; (8009310 <disk_ioctl+0x4c>)
 80092ee:	188a      	adds	r2, r1, r2
 80092f0:	7a10      	ldrb	r0, [r2, #8]
 80092f2:	260f      	movs	r6, #15
 80092f4:	19bc      	adds	r4, r7, r6
 80092f6:	683d      	ldr	r5, [r7, #0]
 80092f8:	1dba      	adds	r2, r7, #6
 80092fa:	7811      	ldrb	r1, [r2, #0]
 80092fc:	002a      	movs	r2, r5
 80092fe:	4798      	blx	r3
 8009300:	0003      	movs	r3, r0
 8009302:	7023      	strb	r3, [r4, #0]
  return res;
 8009304:	19bb      	adds	r3, r7, r6
 8009306:	781b      	ldrb	r3, [r3, #0]
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	b005      	add	sp, #20
 800930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009310:	20002720 	.word	0x20002720

08009314 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009328:	e007      	b.n	800933a <mem_cpy+0x26>
		*d++ = *s++;
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	1c53      	adds	r3, r2, #1
 800932e:	613b      	str	r3, [r7, #16]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	1c59      	adds	r1, r3, #1
 8009334:	6179      	str	r1, [r7, #20]
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	1e5a      	subs	r2, r3, #1
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1f2      	bne.n	800932a <mem_cpy+0x16>
}
 8009344:	46c0      	nop			; (mov r8, r8)
 8009346:	46c0      	nop			; (mov r8, r8)
 8009348:	46bd      	mov	sp, r7
 800934a:	b006      	add	sp, #24
 800934c:	bd80      	pop	{r7, pc}

0800934e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800934e:	b580      	push	{r7, lr}
 8009350:	b086      	sub	sp, #24
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800935e:	e005      	b.n	800936c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	617a      	str	r2, [r7, #20]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	1e5a      	subs	r2, r3, #1
 8009370:	607a      	str	r2, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f4      	bne.n	8009360 <mem_set+0x12>
}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	46c0      	nop			; (mov r8, r8)
 800937a:	46bd      	mov	sp, r7
 800937c:	b006      	add	sp, #24
 800937e:	bd80      	pop	{r7, pc}

08009380 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009380:	b580      	push	{r7, lr}
 8009382:	b088      	sub	sp, #32
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009398:	46c0      	nop			; (mov r8, r8)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	1e5a      	subs	r2, r3, #1
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00d      	beq.n	80093c0 <mem_cmp+0x40>
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	61fa      	str	r2, [r7, #28]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	0019      	movs	r1, r3
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	61ba      	str	r2, [r7, #24]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	1acb      	subs	r3, r1, r3
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0ec      	beq.n	800939a <mem_cmp+0x1a>
	return r;
 80093c0:	697b      	ldr	r3, [r7, #20]
}
 80093c2:	0018      	movs	r0, r3
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b008      	add	sp, #32
 80093c8:	bd80      	pop	{r7, pc}

080093ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b082      	sub	sp, #8
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80093d4:	e002      	b.n	80093dc <chk_chr+0x12>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3301      	adds	r3, #1
 80093da:	607b      	str	r3, [r7, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <chk_chr+0x26>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	001a      	movs	r2, r3
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d1f2      	bne.n	80093d6 <chk_chr+0xc>
	return *str;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	781b      	ldrb	r3, [r3, #0]
}
 80093f4:	0018      	movs	r0, r3
 80093f6:	46bd      	mov	sp, r7
 80093f8:	b002      	add	sp, #8
 80093fa:	bd80      	pop	{r7, pc}

080093fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009406:	2300      	movs	r3, #0
 8009408:	60bb      	str	r3, [r7, #8]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	e037      	b.n	8009480 <chk_lock+0x84>
		if (Files[i].fs) {	/* Existing entry */
 8009410:	492f      	ldr	r1, [pc, #188]	; (80094d0 <chk_lock+0xd4>)
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	0013      	movs	r3, r2
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	189b      	adds	r3, r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	585b      	ldr	r3, [r3, r1]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d029      	beq.n	8009476 <chk_lock+0x7a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009422:	492b      	ldr	r1, [pc, #172]	; (80094d0 <chk_lock+0xd4>)
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	0013      	movs	r3, r2
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	189b      	adds	r3, r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	585a      	ldr	r2, [r3, r1]
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	2380      	movs	r3, #128	; 0x80
 8009434:	015b      	lsls	r3, r3, #5
 8009436:	58cb      	ldr	r3, [r1, r3]
 8009438:	429a      	cmp	r2, r3
 800943a:	d11e      	bne.n	800947a <chk_lock+0x7e>
				Files[i].clu == dp->sclust &&
 800943c:	4924      	ldr	r1, [pc, #144]	; (80094d0 <chk_lock+0xd4>)
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	0013      	movs	r3, r2
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	189b      	adds	r3, r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	18cb      	adds	r3, r1, r3
 800944a:	3304      	adds	r3, #4
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4920      	ldr	r1, [pc, #128]	; (80094d4 <chk_lock+0xd8>)
 8009452:	585b      	ldr	r3, [r3, r1]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009454:	429a      	cmp	r2, r3
 8009456:	d110      	bne.n	800947a <chk_lock+0x7e>
				Files[i].idx == dp->index) break;
 8009458:	491d      	ldr	r1, [pc, #116]	; (80094d0 <chk_lock+0xd4>)
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	0013      	movs	r3, r2
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	189b      	adds	r3, r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	18cb      	adds	r3, r1, r3
 8009466:	3308      	adds	r3, #8
 8009468:	881a      	ldrh	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	491a      	ldr	r1, [pc, #104]	; (80094d8 <chk_lock+0xdc>)
 800946e:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8009470:	429a      	cmp	r2, r3
 8009472:	d102      	bne.n	800947a <chk_lock+0x7e>
				Files[i].idx == dp->index) break;
 8009474:	e007      	b.n	8009486 <chk_lock+0x8a>
		} else {			/* Blank entry */
			be = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3301      	adds	r3, #1
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d9c4      	bls.n	8009410 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d109      	bne.n	80094a0 <chk_lock+0xa4>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d102      	bne.n	8009498 <chk_lock+0x9c>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d101      	bne.n	800949c <chk_lock+0xa0>
 8009498:	2300      	movs	r3, #0
 800949a:	e014      	b.n	80094c6 <chk_lock+0xca>
 800949c:	2312      	movs	r3, #18
 800949e:	e012      	b.n	80094c6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10c      	bne.n	80094c0 <chk_lock+0xc4>
 80094a6:	490a      	ldr	r1, [pc, #40]	; (80094d0 <chk_lock+0xd4>)
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	0013      	movs	r3, r2
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	189b      	adds	r3, r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	18cb      	adds	r3, r1, r3
 80094b4:	330a      	adds	r3, #10
 80094b6:	881a      	ldrh	r2, [r3, #0]
 80094b8:	2380      	movs	r3, #128	; 0x80
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	429a      	cmp	r2, r3
 80094be:	d101      	bne.n	80094c4 <chk_lock+0xc8>
 80094c0:	2310      	movs	r3, #16
 80094c2:	e000      	b.n	80094c6 <chk_lock+0xca>
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	0018      	movs	r0, r3
 80094c8:	46bd      	mov	sp, r7
 80094ca:	b004      	add	sp, #16
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	46c0      	nop			; (mov r8, r8)
 80094d0:	20002708 	.word	0x20002708
 80094d4:	00001008 	.word	0x00001008
 80094d8:	00001006 	.word	0x00001006

080094dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80094e2:	2300      	movs	r3, #0
 80094e4:	607b      	str	r3, [r7, #4]
 80094e6:	e002      	b.n	80094ee <enq_lock+0x12>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3301      	adds	r3, #1
 80094ec:	607b      	str	r3, [r7, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d808      	bhi.n	8009506 <enq_lock+0x2a>
 80094f4:	4908      	ldr	r1, [pc, #32]	; (8009518 <enq_lock+0x3c>)
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	0013      	movs	r3, r2
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	189b      	adds	r3, r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	585b      	ldr	r3, [r3, r1]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f0      	bne.n	80094e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3b02      	subs	r3, #2
 800950a:	1e5a      	subs	r2, r3, #1
 800950c:	4193      	sbcs	r3, r2
 800950e:	b2db      	uxtb	r3, r3
}
 8009510:	0018      	movs	r0, r3
 8009512:	46bd      	mov	sp, r7
 8009514:	b002      	add	sp, #8
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20002708 	.word	0x20002708

0800951c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	e02b      	b.n	8009584 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800952c:	4954      	ldr	r1, [pc, #336]	; (8009680 <inc_lock+0x164>)
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	0013      	movs	r3, r2
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	189b      	adds	r3, r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	585a      	ldr	r2, [r3, r1]
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	2380      	movs	r3, #128	; 0x80
 800953e:	015b      	lsls	r3, r3, #5
 8009540:	58cb      	ldr	r3, [r1, r3]
 8009542:	429a      	cmp	r2, r3
 8009544:	d11b      	bne.n	800957e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009546:	494e      	ldr	r1, [pc, #312]	; (8009680 <inc_lock+0x164>)
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	0013      	movs	r3, r2
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	189b      	adds	r3, r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	18cb      	adds	r3, r1, r3
 8009554:	3304      	adds	r3, #4
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	494a      	ldr	r1, [pc, #296]	; (8009684 <inc_lock+0x168>)
 800955c:	585b      	ldr	r3, [r3, r1]
		if (Files[i].fs == dp->fs &&
 800955e:	429a      	cmp	r2, r3
 8009560:	d10d      	bne.n	800957e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009562:	4947      	ldr	r1, [pc, #284]	; (8009680 <inc_lock+0x164>)
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	0013      	movs	r3, r2
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	189b      	adds	r3, r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	18cb      	adds	r3, r1, r3
 8009570:	3308      	adds	r3, #8
 8009572:	881a      	ldrh	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4944      	ldr	r1, [pc, #272]	; (8009688 <inc_lock+0x16c>)
 8009578:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 800957a:	429a      	cmp	r2, r3
 800957c:	d006      	beq.n	800958c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d9d0      	bls.n	800952c <inc_lock+0x10>
 800958a:	e000      	b.n	800958e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800958c:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d144      	bne.n	800961e <inc_lock+0x102>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
 8009598:	e002      	b.n	80095a0 <inc_lock+0x84>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d808      	bhi.n	80095b8 <inc_lock+0x9c>
 80095a6:	4936      	ldr	r1, [pc, #216]	; (8009680 <inc_lock+0x164>)
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	0013      	movs	r3, r2
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	189b      	adds	r3, r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	585b      	ldr	r3, [r3, r1]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1f0      	bne.n	800959a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d101      	bne.n	80095c2 <inc_lock+0xa6>
 80095be:	2300      	movs	r3, #0
 80095c0:	e059      	b.n	8009676 <inc_lock+0x15a>
		Files[i].fs = dp->fs;
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	2380      	movs	r3, #128	; 0x80
 80095c6:	015b      	lsls	r3, r3, #5
 80095c8:	58d0      	ldr	r0, [r2, r3]
 80095ca:	492d      	ldr	r1, [pc, #180]	; (8009680 <inc_lock+0x164>)
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	0013      	movs	r3, r2
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	189b      	adds	r3, r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a2a      	ldr	r2, [pc, #168]	; (8009684 <inc_lock+0x168>)
 80095dc:	5899      	ldr	r1, [r3, r2]
 80095de:	4828      	ldr	r0, [pc, #160]	; (8009680 <inc_lock+0x164>)
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	0013      	movs	r3, r2
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	189b      	adds	r3, r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	18c3      	adds	r3, r0, r3
 80095ec:	3304      	adds	r3, #4
 80095ee:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a25      	ldr	r2, [pc, #148]	; (8009688 <inc_lock+0x16c>)
 80095f4:	5a98      	ldrh	r0, [r3, r2]
 80095f6:	4922      	ldr	r1, [pc, #136]	; (8009680 <inc_lock+0x164>)
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	0013      	movs	r3, r2
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	189b      	adds	r3, r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	18cb      	adds	r3, r1, r3
 8009604:	3308      	adds	r3, #8
 8009606:	1c02      	adds	r2, r0, #0
 8009608:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800960a:	491d      	ldr	r1, [pc, #116]	; (8009680 <inc_lock+0x164>)
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	0013      	movs	r3, r2
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	189b      	adds	r3, r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	18cb      	adds	r3, r1, r3
 8009618:	330a      	adds	r3, #10
 800961a:	2200      	movs	r2, #0
 800961c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00c      	beq.n	800963e <inc_lock+0x122>
 8009624:	4916      	ldr	r1, [pc, #88]	; (8009680 <inc_lock+0x164>)
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	0013      	movs	r3, r2
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	189b      	adds	r3, r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	18cb      	adds	r3, r1, r3
 8009632:	330a      	adds	r3, #10
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <inc_lock+0x122>
 800963a:	2300      	movs	r3, #0
 800963c:	e01b      	b.n	8009676 <inc_lock+0x15a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10b      	bne.n	800965c <inc_lock+0x140>
 8009644:	490e      	ldr	r1, [pc, #56]	; (8009680 <inc_lock+0x164>)
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	0013      	movs	r3, r2
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	189b      	adds	r3, r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	18cb      	adds	r3, r1, r3
 8009652:	330a      	adds	r3, #10
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	3301      	adds	r3, #1
 8009658:	b29a      	uxth	r2, r3
 800965a:	e001      	b.n	8009660 <inc_lock+0x144>
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	005a      	lsls	r2, r3, #1
 8009660:	4807      	ldr	r0, [pc, #28]	; (8009680 <inc_lock+0x164>)
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	000b      	movs	r3, r1
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	185b      	adds	r3, r3, r1
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	18c3      	adds	r3, r0, r3
 800966e:	330a      	adds	r3, #10
 8009670:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3301      	adds	r3, #1
}
 8009676:	0018      	movs	r0, r3
 8009678:	46bd      	mov	sp, r7
 800967a:	b004      	add	sp, #16
 800967c:	bd80      	pop	{r7, pc}
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	20002708 	.word	0x20002708
 8009684:	00001008 	.word	0x00001008
 8009688:	00001006 	.word	0x00001006

0800968c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
 8009698:	e014      	b.n	80096c4 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800969a:	490e      	ldr	r1, [pc, #56]	; (80096d4 <clear_lock+0x48>)
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	0013      	movs	r3, r2
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	189b      	adds	r3, r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	585b      	ldr	r3, [r3, r1]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d107      	bne.n	80096be <clear_lock+0x32>
 80096ae:	4909      	ldr	r1, [pc, #36]	; (80096d4 <clear_lock+0x48>)
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	0013      	movs	r3, r2
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	2200      	movs	r2, #0
 80096bc:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d9e7      	bls.n	800969a <clear_lock+0xe>
	}
}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	46c0      	nop			; (mov r8, r8)
 80096ce:	46bd      	mov	sp, r7
 80096d0:	b004      	add	sp, #16
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20002708 	.word	0x20002708

080096d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80096d8:	b590      	push	{r4, r7, lr}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80096e0:	240f      	movs	r4, #15
 80096e2:	193b      	adds	r3, r7, r4
 80096e4:	2200      	movs	r2, #0
 80096e6:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a22      	ldr	r2, [pc, #136]	; (8009774 <sync_window+0x9c>)
 80096ec:	5c9b      	ldrb	r3, [r3, r2]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d039      	beq.n	8009766 <sync_window+0x8e>
		wsect = fs->winsect;	/* Current sector number */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a20      	ldr	r2, [pc, #128]	; (8009778 <sync_window+0xa0>)
 80096f6:	589b      	ldr	r3, [r3, r2]
 80096f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a1f      	ldr	r2, [pc, #124]	; (800977c <sync_window+0xa4>)
 80096fe:	5c98      	ldrb	r0, [r3, r2]
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	2301      	movs	r3, #1
 8009706:	f7ff fdb5 	bl	8009274 <disk_write>
 800970a:	1e03      	subs	r3, r0, #0
 800970c:	d003      	beq.n	8009716 <sync_window+0x3e>
			res = FR_DISK_ERR;
 800970e:	193b      	adds	r3, r7, r4
 8009710:	2201      	movs	r2, #1
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	e027      	b.n	8009766 <sync_window+0x8e>
		} else {
			fs->wflag = 0;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a16      	ldr	r2, [pc, #88]	; (8009774 <sync_window+0x9c>)
 800971a:	2100      	movs	r1, #0
 800971c:	5499      	strb	r1, [r3, r2]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	2381      	movs	r3, #129	; 0x81
 8009722:	015b      	lsls	r3, r3, #5
 8009724:	58d3      	ldr	r3, [r2, r3]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	1ad2      	subs	r2, r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4914      	ldr	r1, [pc, #80]	; (8009780 <sync_window+0xa8>)
 800972e:	585b      	ldr	r3, [r3, r1]
 8009730:	429a      	cmp	r2, r3
 8009732:	d218      	bcs.n	8009766 <sync_window+0x8e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a13      	ldr	r2, [pc, #76]	; (8009784 <sync_window+0xac>)
 8009738:	5c9b      	ldrb	r3, [r3, r2]
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	e010      	b.n	8009760 <sync_window+0x88>
					wsect += fs->fsize;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a0f      	ldr	r2, [pc, #60]	; (8009780 <sync_window+0xa8>)
 8009742:	589b      	ldr	r3, [r3, r2]
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	18d3      	adds	r3, r2, r3
 8009748:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a0b      	ldr	r2, [pc, #44]	; (800977c <sync_window+0xa4>)
 800974e:	5c98      	ldrb	r0, [r3, r2]
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	2301      	movs	r3, #1
 8009756:	f7ff fd8d 	bl	8009274 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3b01      	subs	r3, #1
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d8eb      	bhi.n	800973e <sync_window+0x66>
				}
			}
		}
	}
	return res;
 8009766:	230f      	movs	r3, #15
 8009768:	18fb      	adds	r3, r7, r3
 800976a:	781b      	ldrb	r3, [r3, #0]
}
 800976c:	0018      	movs	r0, r3
 800976e:	46bd      	mov	sp, r7
 8009770:	b007      	add	sp, #28
 8009772:	bd90      	pop	{r4, r7, pc}
 8009774:	00001004 	.word	0x00001004
 8009778:	0000102c 	.word	0x0000102c
 800977c:	00001001 	.word	0x00001001
 8009780:	00001018 	.word	0x00001018
 8009784:	00001003 	.word	0x00001003

08009788 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009788:	b5b0      	push	{r4, r5, r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009792:	250f      	movs	r5, #15
 8009794:	197b      	adds	r3, r7, r5
 8009796:	2200      	movs	r2, #0
 8009798:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a15      	ldr	r2, [pc, #84]	; (80097f4 <move_window+0x6c>)
 800979e:	589b      	ldr	r3, [r3, r2]
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d01f      	beq.n	80097e6 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80097a6:	197c      	adds	r4, r7, r5
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	0018      	movs	r0, r3
 80097ac:	f7ff ff94 	bl	80096d8 <sync_window>
 80097b0:	0003      	movs	r3, r0
 80097b2:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80097b4:	002c      	movs	r4, r5
 80097b6:	193b      	adds	r3, r7, r4
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d113      	bne.n	80097e6 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a0d      	ldr	r2, [pc, #52]	; (80097f8 <move_window+0x70>)
 80097c2:	5c98      	ldrb	r0, [r3, r2]
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	2301      	movs	r3, #1
 80097ca:	f7ff fd2b 	bl	8009224 <disk_read>
 80097ce:	1e03      	subs	r3, r0, #0
 80097d0:	d005      	beq.n	80097de <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80097d2:	2301      	movs	r3, #1
 80097d4:	425b      	negs	r3, r3
 80097d6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80097d8:	193b      	adds	r3, r7, r4
 80097da:	2201      	movs	r2, #1
 80097dc:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4904      	ldr	r1, [pc, #16]	; (80097f4 <move_window+0x6c>)
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	505a      	str	r2, [r3, r1]
		}
	}
	return res;
 80097e6:	230f      	movs	r3, #15
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	781b      	ldrb	r3, [r3, #0]
}
 80097ec:	0018      	movs	r0, r3
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b004      	add	sp, #16
 80097f2:	bdb0      	pop	{r4, r5, r7, pc}
 80097f4:	0000102c 	.word	0x0000102c
 80097f8:	00001001 	.word	0x00001001

080097fc <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80097fc:	b5b0      	push	{r4, r5, r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009804:	250f      	movs	r5, #15
 8009806:	197c      	adds	r4, r7, r5
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	0018      	movs	r0, r3
 800980c:	f7ff ff64 	bl	80096d8 <sync_window>
 8009810:	0003      	movs	r3, r0
 8009812:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009814:	197b      	adds	r3, r7, r5
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d000      	beq.n	800981e <sync_fs+0x22>
 800981c:	e0aa      	b.n	8009974 <sync_fs+0x178>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	2380      	movs	r3, #128	; 0x80
 8009822:	015b      	lsls	r3, r3, #5
 8009824:	5cd3      	ldrb	r3, [r2, r3]
 8009826:	2b03      	cmp	r3, #3
 8009828:	d000      	beq.n	800982c <sync_fs+0x30>
 800982a:	e095      	b.n	8009958 <sync_fs+0x15c>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a55      	ldr	r2, [pc, #340]	; (8009984 <sync_fs+0x188>)
 8009830:	5c9b      	ldrb	r3, [r3, r2]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d000      	beq.n	8009838 <sync_fs+0x3c>
 8009836:	e08f      	b.n	8009958 <sync_fs+0x15c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a52      	ldr	r2, [pc, #328]	; (8009988 <sync_fs+0x18c>)
 800983e:	5a9b      	ldrh	r3, [r3, r2]
 8009840:	001a      	movs	r2, r3
 8009842:	2100      	movs	r1, #0
 8009844:	f7ff fd83 	bl	800934e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	23ff      	movs	r3, #255	; 0xff
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	2155      	movs	r1, #85	; 0x55
 8009850:	54d1      	strb	r1, [r2, r3]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a4d      	ldr	r2, [pc, #308]	; (800998c <sync_fs+0x190>)
 8009856:	21aa      	movs	r1, #170	; 0xaa
 8009858:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2252      	movs	r2, #82	; 0x52
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2252      	movs	r2, #82	; 0x52
 8009864:	705a      	strb	r2, [r3, #1]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2261      	movs	r2, #97	; 0x61
 800986a:	709a      	strb	r2, [r3, #2]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2241      	movs	r2, #65	; 0x41
 8009870:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	23f2      	movs	r3, #242	; 0xf2
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	2172      	movs	r1, #114	; 0x72
 800987a:	54d1      	strb	r1, [r2, r3]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	23e6      	movs	r3, #230	; 0xe6
 8009880:	33ff      	adds	r3, #255	; 0xff
 8009882:	2172      	movs	r1, #114	; 0x72
 8009884:	54d1      	strb	r1, [r2, r3]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	23f3      	movs	r3, #243	; 0xf3
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	2141      	movs	r1, #65	; 0x41
 800988e:	54d1      	strb	r1, [r2, r3]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	23e8      	movs	r3, #232	; 0xe8
 8009894:	33ff      	adds	r3, #255	; 0xff
 8009896:	2161      	movs	r1, #97	; 0x61
 8009898:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a3c      	ldr	r2, [pc, #240]	; (8009990 <sync_fs+0x194>)
 800989e:	589b      	ldr	r3, [r3, r2]
 80098a0:	b2d9      	uxtb	r1, r3
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	23f4      	movs	r3, #244	; 0xf4
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	54d1      	strb	r1, [r2, r3]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a38      	ldr	r2, [pc, #224]	; (8009990 <sync_fs+0x194>)
 80098ae:	589b      	ldr	r3, [r3, r2]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	b2d9      	uxtb	r1, r3
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	23ea      	movs	r3, #234	; 0xea
 80098bc:	33ff      	adds	r3, #255	; 0xff
 80098be:	54d1      	strb	r1, [r2, r3]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a33      	ldr	r2, [pc, #204]	; (8009990 <sync_fs+0x194>)
 80098c4:	589b      	ldr	r3, [r3, r2]
 80098c6:	0c1b      	lsrs	r3, r3, #16
 80098c8:	b2d9      	uxtb	r1, r3
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	23f5      	movs	r3, #245	; 0xf5
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	54d1      	strb	r1, [r2, r3]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2e      	ldr	r2, [pc, #184]	; (8009990 <sync_fs+0x194>)
 80098d6:	589b      	ldr	r3, [r3, r2]
 80098d8:	0e1b      	lsrs	r3, r3, #24
 80098da:	b2d9      	uxtb	r1, r3
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	23ec      	movs	r3, #236	; 0xec
 80098e0:	33ff      	adds	r3, #255	; 0xff
 80098e2:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a2b      	ldr	r2, [pc, #172]	; (8009994 <sync_fs+0x198>)
 80098e8:	589b      	ldr	r3, [r3, r2]
 80098ea:	b2d9      	uxtb	r1, r3
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	23f6      	movs	r3, #246	; 0xf6
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	54d1      	strb	r1, [r2, r3]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a27      	ldr	r2, [pc, #156]	; (8009994 <sync_fs+0x198>)
 80098f8:	589b      	ldr	r3, [r3, r2]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	0a1b      	lsrs	r3, r3, #8
 80098fe:	b29b      	uxth	r3, r3
 8009900:	b2d9      	uxtb	r1, r3
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	23ee      	movs	r3, #238	; 0xee
 8009906:	33ff      	adds	r3, #255	; 0xff
 8009908:	54d1      	strb	r1, [r2, r3]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a21      	ldr	r2, [pc, #132]	; (8009994 <sync_fs+0x198>)
 800990e:	589b      	ldr	r3, [r3, r2]
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	b2d9      	uxtb	r1, r3
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	23f7      	movs	r3, #247	; 0xf7
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	54d1      	strb	r1, [r2, r3]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a1d      	ldr	r2, [pc, #116]	; (8009994 <sync_fs+0x198>)
 8009920:	589b      	ldr	r3, [r3, r2]
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	b2d9      	uxtb	r1, r3
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	23f0      	movs	r3, #240	; 0xf0
 800992a:	33ff      	adds	r3, #255	; 0xff
 800992c:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a19      	ldr	r2, [pc, #100]	; (8009998 <sync_fs+0x19c>)
 8009932:	589b      	ldr	r3, [r3, r2]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4918      	ldr	r1, [pc, #96]	; (800999c <sync_fs+0x1a0>)
 800993a:	505a      	str	r2, [r3, r1]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a18      	ldr	r2, [pc, #96]	; (80099a0 <sync_fs+0x1a4>)
 8009940:	5c98      	ldrb	r0, [r3, r2]
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a15      	ldr	r2, [pc, #84]	; (800999c <sync_fs+0x1a0>)
 8009948:	589a      	ldr	r2, [r3, r2]
 800994a:	2301      	movs	r3, #1
 800994c:	f7ff fc92 	bl	8009274 <disk_write>
			fs->fsi_flag = 0;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a0c      	ldr	r2, [pc, #48]	; (8009984 <sync_fs+0x188>)
 8009954:	2100      	movs	r1, #0
 8009956:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a11      	ldr	r2, [pc, #68]	; (80099a0 <sync_fs+0x1a4>)
 800995c:	5c9b      	ldrb	r3, [r3, r2]
 800995e:	2200      	movs	r2, #0
 8009960:	2100      	movs	r1, #0
 8009962:	0018      	movs	r0, r3
 8009964:	f7ff fcae 	bl	80092c4 <disk_ioctl>
 8009968:	1e03      	subs	r3, r0, #0
 800996a:	d003      	beq.n	8009974 <sync_fs+0x178>
			res = FR_DISK_ERR;
 800996c:	230f      	movs	r3, #15
 800996e:	18fb      	adds	r3, r7, r3
 8009970:	2201      	movs	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8009974:	230f      	movs	r3, #15
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	781b      	ldrb	r3, [r3, #0]
}
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	b004      	add	sp, #16
 8009980:	bdb0      	pop	{r4, r5, r7, pc}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	00001005 	.word	0x00001005
 8009988:	0000100a 	.word	0x0000100a
 800998c:	000001ff 	.word	0x000001ff
 8009990:	00001010 	.word	0x00001010
 8009994:	0000100c 	.word	0x0000100c
 8009998:	0000101c 	.word	0x0000101c
 800999c:	0000102c 	.word	0x0000102c
 80099a0:	00001001 	.word	0x00001001

080099a4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	3b02      	subs	r3, #2
 80099b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a0b      	ldr	r2, [pc, #44]	; (80099e4 <clust2sect+0x40>)
 80099b8:	589b      	ldr	r3, [r3, r2]
 80099ba:	3b02      	subs	r3, #2
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d301      	bcc.n	80099c6 <clust2sect+0x22>
 80099c2:	2300      	movs	r3, #0
 80099c4:	e009      	b.n	80099da <clust2sect+0x36>
	return clst * fs->csize + fs->database;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a07      	ldr	r2, [pc, #28]	; (80099e8 <clust2sect+0x44>)
 80099ca:	5c9b      	ldrb	r3, [r3, r2]
 80099cc:	001a      	movs	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	435a      	muls	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4905      	ldr	r1, [pc, #20]	; (80099ec <clust2sect+0x48>)
 80099d6:	585b      	ldr	r3, [r3, r1]
 80099d8:	18d3      	adds	r3, r2, r3
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b002      	add	sp, #8
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	00001014 	.word	0x00001014
 80099e8:	00001002 	.word	0x00001002
 80099ec:	00001028 	.word	0x00001028

080099f0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d905      	bls.n	8009a0c <get_fat+0x1c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a78      	ldr	r2, [pc, #480]	; (8009be4 <get_fat+0x1f4>)
 8009a04:	589b      	ldr	r3, [r3, r2]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d302      	bcc.n	8009a12 <get_fat+0x22>
		val = 1;	/* Internal error */
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e0e2      	b.n	8009bd8 <get_fat+0x1e8>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009a12:	2301      	movs	r3, #1
 8009a14:	425b      	negs	r3, r3
 8009a16:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	2380      	movs	r3, #128	; 0x80
 8009a1c:	015b      	lsls	r3, r3, #5
 8009a1e:	5cd3      	ldrb	r3, [r2, r3]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d100      	bne.n	8009a26 <get_fat+0x36>
 8009a24:	e095      	b.n	8009b52 <get_fat+0x162>
 8009a26:	dd00      	ble.n	8009a2a <get_fat+0x3a>
 8009a28:	e0cc      	b.n	8009bc4 <get_fat+0x1d4>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d002      	beq.n	8009a34 <get_fat+0x44>
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d05e      	beq.n	8009af0 <get_fat+0x100>
 8009a32:	e0c7      	b.n	8009bc4 <get_fat+0x1d4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	18d3      	adds	r3, r2, r3
 8009a40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	2381      	movs	r3, #129	; 0x81
 8009a46:	015b      	lsls	r3, r3, #5
 8009a48:	58d4      	ldr	r4, [r2, r3]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a66      	ldr	r2, [pc, #408]	; (8009be8 <get_fat+0x1f8>)
 8009a4e:	5a9b      	ldrh	r3, [r3, r2]
 8009a50:	0019      	movs	r1, r3
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7f6 fb72 	bl	800013c <__udivsi3>
 8009a58:	0003      	movs	r3, r0
 8009a5a:	18e2      	adds	r2, r4, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	0011      	movs	r1, r2
 8009a60:	0018      	movs	r0, r3
 8009a62:	f7ff fe91 	bl	8009788 <move_window>
 8009a66:	1e03      	subs	r3, r0, #0
 8009a68:	d000      	beq.n	8009a6c <get_fat+0x7c>
 8009a6a:	e0ae      	b.n	8009bca <get_fat+0x1da>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	60fa      	str	r2, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	495c      	ldr	r1, [pc, #368]	; (8009be8 <get_fat+0x1f8>)
 8009a76:	5a52      	ldrh	r2, [r2, r1]
 8009a78:	0011      	movs	r1, r2
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f7f6 fbe4 	bl	8000248 <__aeabi_uidivmod>
 8009a80:	000b      	movs	r3, r1
 8009a82:	001a      	movs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	5c9b      	ldrb	r3, [r3, r2]
 8009a88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	2381      	movs	r3, #129	; 0x81
 8009a8e:	015b      	lsls	r3, r3, #5
 8009a90:	58d4      	ldr	r4, [r2, r3]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a54      	ldr	r2, [pc, #336]	; (8009be8 <get_fat+0x1f8>)
 8009a96:	5a9b      	ldrh	r3, [r3, r2]
 8009a98:	0019      	movs	r1, r3
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7f6 fb4e 	bl	800013c <__udivsi3>
 8009aa0:	0003      	movs	r3, r0
 8009aa2:	18e2      	adds	r2, r4, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	0011      	movs	r1, r2
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f7ff fe6d 	bl	8009788 <move_window>
 8009aae:	1e03      	subs	r3, r0, #0
 8009ab0:	d000      	beq.n	8009ab4 <get_fat+0xc4>
 8009ab2:	e08c      	b.n	8009bce <get_fat+0x1de>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a4c      	ldr	r2, [pc, #304]	; (8009be8 <get_fat+0x1f8>)
 8009ab8:	5a9b      	ldrh	r3, [r3, r2]
 8009aba:	001a      	movs	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	0011      	movs	r1, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f7f6 fbc1 	bl	8000248 <__aeabi_uidivmod>
 8009ac6:	000b      	movs	r3, r1
 8009ac8:	001a      	movs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	5c9b      	ldrb	r3, [r3, r2]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	001a      	movs	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2201      	movs	r2, #1
 8009adc:	4013      	ands	r3, r2
 8009ade:	d002      	beq.n	8009ae6 <get_fat+0xf6>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	091b      	lsrs	r3, r3, #4
 8009ae4:	e002      	b.n	8009aec <get_fat+0xfc>
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	051b      	lsls	r3, r3, #20
 8009aea:	0d1b      	lsrs	r3, r3, #20
 8009aec:	617b      	str	r3, [r7, #20]
			break;
 8009aee:	e073      	b.n	8009bd8 <get_fat+0x1e8>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	2381      	movs	r3, #129	; 0x81
 8009af4:	015b      	lsls	r3, r3, #5
 8009af6:	58d4      	ldr	r4, [r2, r3]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a3b      	ldr	r2, [pc, #236]	; (8009be8 <get_fat+0x1f8>)
 8009afc:	5a9b      	ldrh	r3, [r3, r2]
 8009afe:	085b      	lsrs	r3, r3, #1
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	0019      	movs	r1, r3
 8009b04:	6838      	ldr	r0, [r7, #0]
 8009b06:	f7f6 fb19 	bl	800013c <__udivsi3>
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	18e2      	adds	r2, r4, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	0011      	movs	r1, r2
 8009b12:	0018      	movs	r0, r3
 8009b14:	f7ff fe38 	bl	8009788 <move_window>
 8009b18:	1e03      	subs	r3, r0, #0
 8009b1a:	d15a      	bne.n	8009bd2 <get_fat+0x1e2>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	005a      	lsls	r2, r3, #1
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4931      	ldr	r1, [pc, #196]	; (8009be8 <get_fat+0x1f8>)
 8009b24:	5a5b      	ldrh	r3, [r3, r1]
 8009b26:	0019      	movs	r1, r3
 8009b28:	0010      	movs	r0, r2
 8009b2a:	f7f6 fb8d 	bl	8000248 <__aeabi_uidivmod>
 8009b2e:	000b      	movs	r3, r1
 8009b30:	001a      	movs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	189b      	adds	r3, r3, r2
 8009b36:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	b21a      	sxth	r2, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	b21b      	sxth	r3, r3
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	b21b      	sxth	r3, r3
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	617b      	str	r3, [r7, #20]
			break;
 8009b50:	e042      	b.n	8009bd8 <get_fat+0x1e8>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	2381      	movs	r3, #129	; 0x81
 8009b56:	015b      	lsls	r3, r3, #5
 8009b58:	58d4      	ldr	r4, [r2, r3]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a22      	ldr	r2, [pc, #136]	; (8009be8 <get_fat+0x1f8>)
 8009b5e:	5a9b      	ldrh	r3, [r3, r2]
 8009b60:	089b      	lsrs	r3, r3, #2
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	0019      	movs	r1, r3
 8009b66:	6838      	ldr	r0, [r7, #0]
 8009b68:	f7f6 fae8 	bl	800013c <__udivsi3>
 8009b6c:	0003      	movs	r3, r0
 8009b6e:	18e2      	adds	r2, r4, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	0011      	movs	r1, r2
 8009b74:	0018      	movs	r0, r3
 8009b76:	f7ff fe07 	bl	8009788 <move_window>
 8009b7a:	1e03      	subs	r3, r0, #0
 8009b7c:	d12b      	bne.n	8009bd6 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	009a      	lsls	r2, r3, #2
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4918      	ldr	r1, [pc, #96]	; (8009be8 <get_fat+0x1f8>)
 8009b86:	5a5b      	ldrh	r3, [r3, r1]
 8009b88:	0019      	movs	r1, r3
 8009b8a:	0010      	movs	r0, r2
 8009b8c:	f7f6 fb5c 	bl	8000248 <__aeabi_uidivmod>
 8009b90:	000b      	movs	r3, r1
 8009b92:	001a      	movs	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	189b      	adds	r3, r3, r2
 8009b98:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	3303      	adds	r3, #3
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	061a      	lsls	r2, r3, #24
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3302      	adds	r3, #2
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	041b      	lsls	r3, r3, #16
 8009baa:	4313      	orrs	r3, r2
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	3201      	adds	r2, #1
 8009bb0:	7812      	ldrb	r2, [r2, #0]
 8009bb2:	0212      	lsls	r2, r2, #8
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	7812      	ldrb	r2, [r2, #0]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	091b      	lsrs	r3, r3, #4
 8009bc0:	617b      	str	r3, [r7, #20]
			break;
 8009bc2:	e009      	b.n	8009bd8 <get_fat+0x1e8>

		default:
			val = 1;	/* Internal error */
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	e006      	b.n	8009bd8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	e004      	b.n	8009bd8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009bce:	46c0      	nop			; (mov r8, r8)
 8009bd0:	e002      	b.n	8009bd8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	e000      	b.n	8009bd8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bd6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8009bd8:	697b      	ldr	r3, [r7, #20]
}
 8009bda:	0018      	movs	r0, r3
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	b007      	add	sp, #28
 8009be0:	bd90      	pop	{r4, r7, pc}
 8009be2:	46c0      	nop			; (mov r8, r8)
 8009be4:	00001014 	.word	0x00001014
 8009be8:	0000100a 	.word	0x0000100a

08009bec <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8009bec:	b5b0      	push	{r4, r5, r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d905      	bls.n	8009c0a <put_fat+0x1e>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4aab      	ldr	r2, [pc, #684]	; (8009eb0 <put_fat+0x2c4>)
 8009c02:	589b      	ldr	r3, [r3, r2]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d304      	bcc.n	8009c14 <put_fat+0x28>
		res = FR_INT_ERR;
 8009c0a:	231f      	movs	r3, #31
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	2202      	movs	r2, #2
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	e145      	b.n	8009ea0 <put_fat+0x2b4>

	} else {
		switch (fs->fs_type) {
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	2380      	movs	r3, #128	; 0x80
 8009c18:	015b      	lsls	r3, r3, #5
 8009c1a:	5cd3      	ldrb	r3, [r2, r3]
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d100      	bne.n	8009c22 <put_fat+0x36>
 8009c20:	e0d5      	b.n	8009dce <put_fat+0x1e2>
 8009c22:	dd00      	ble.n	8009c26 <put_fat+0x3a>
 8009c24:	e130      	b.n	8009e88 <put_fat+0x29c>
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d003      	beq.n	8009c32 <put_fat+0x46>
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d100      	bne.n	8009c30 <put_fat+0x44>
 8009c2e:	e092      	b.n	8009d56 <put_fat+0x16a>
 8009c30:	e12a      	b.n	8009e88 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	18d3      	adds	r3, r2, r3
 8009c3e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	2381      	movs	r3, #129	; 0x81
 8009c44:	015b      	lsls	r3, r3, #5
 8009c46:	58d4      	ldr	r4, [r2, r3]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4a9a      	ldr	r2, [pc, #616]	; (8009eb4 <put_fat+0x2c8>)
 8009c4c:	5a9b      	ldrh	r3, [r3, r2]
 8009c4e:	0019      	movs	r1, r3
 8009c50:	6978      	ldr	r0, [r7, #20]
 8009c52:	f7f6 fa73 	bl	800013c <__udivsi3>
 8009c56:	0003      	movs	r3, r0
 8009c58:	18e2      	adds	r2, r4, r3
 8009c5a:	251f      	movs	r5, #31
 8009c5c:	197c      	adds	r4, r7, r5
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	0011      	movs	r1, r2
 8009c62:	0018      	movs	r0, r3
 8009c64:	f7ff fd90 	bl	8009788 <move_window>
 8009c68:	0003      	movs	r3, r0
 8009c6a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009c6c:	197b      	adds	r3, r7, r5
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d000      	beq.n	8009c76 <put_fat+0x8a>
 8009c74:	e10d      	b.n	8009e92 <put_fat+0x2a6>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	617a      	str	r2, [r7, #20]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	498d      	ldr	r1, [pc, #564]	; (8009eb4 <put_fat+0x2c8>)
 8009c80:	5a52      	ldrh	r2, [r2, r1]
 8009c82:	0011      	movs	r1, r2
 8009c84:	0018      	movs	r0, r3
 8009c86:	f7f6 fadf 	bl	8000248 <__aeabi_uidivmod>
 8009c8a:	000b      	movs	r3, r1
 8009c8c:	001a      	movs	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	189b      	adds	r3, r3, r2
 8009c92:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2201      	movs	r2, #1
 8009c98:	4013      	ands	r3, r2
 8009c9a:	d00d      	beq.n	8009cb8 <put_fat+0xcc>
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	b25b      	sxtb	r3, r3
 8009ca2:	220f      	movs	r2, #15
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	b25a      	sxtb	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	b25b      	sxtb	r3, r3
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	b25b      	sxtb	r3, r3
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	e001      	b.n	8009cbc <put_fat+0xd0>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4a7d      	ldr	r2, [pc, #500]	; (8009eb8 <put_fat+0x2cc>)
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	5499      	strb	r1, [r3, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	2381      	movs	r3, #129	; 0x81
 8009ccc:	015b      	lsls	r3, r3, #5
 8009cce:	58d4      	ldr	r4, [r2, r3]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4a78      	ldr	r2, [pc, #480]	; (8009eb4 <put_fat+0x2c8>)
 8009cd4:	5a9b      	ldrh	r3, [r3, r2]
 8009cd6:	0019      	movs	r1, r3
 8009cd8:	6978      	ldr	r0, [r7, #20]
 8009cda:	f7f6 fa2f 	bl	800013c <__udivsi3>
 8009cde:	0003      	movs	r3, r0
 8009ce0:	18e2      	adds	r2, r4, r3
 8009ce2:	251f      	movs	r5, #31
 8009ce4:	197c      	adds	r4, r7, r5
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	0011      	movs	r1, r2
 8009cea:	0018      	movs	r0, r3
 8009cec:	f7ff fd4c 	bl	8009788 <move_window>
 8009cf0:	0003      	movs	r3, r0
 8009cf2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009cf4:	197b      	adds	r3, r7, r5
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d000      	beq.n	8009cfe <put_fat+0x112>
 8009cfc:	e0cb      	b.n	8009e96 <put_fat+0x2aa>
			p = &fs->win.d8[bc % SS(fs)];
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4a6c      	ldr	r2, [pc, #432]	; (8009eb4 <put_fat+0x2c8>)
 8009d02:	5a9b      	ldrh	r3, [r3, r2]
 8009d04:	001a      	movs	r2, r3
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	0011      	movs	r1, r2
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7f6 fa9c 	bl	8000248 <__aeabi_uidivmod>
 8009d10:	000b      	movs	r3, r1
 8009d12:	001a      	movs	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	189b      	adds	r3, r3, r2
 8009d18:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	4013      	ands	r3, r2
 8009d20:	d003      	beq.n	8009d2a <put_fat+0x13e>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	091b      	lsrs	r3, r3, #4
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	e00e      	b.n	8009d48 <put_fat+0x15c>
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b25b      	sxtb	r3, r3
 8009d30:	220f      	movs	r2, #15
 8009d32:	4393      	bics	r3, r2
 8009d34:	b25a      	sxtb	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	0a1b      	lsrs	r3, r3, #8
 8009d3a:	b25b      	sxtb	r3, r3
 8009d3c:	210f      	movs	r1, #15
 8009d3e:	400b      	ands	r3, r1
 8009d40:	b25b      	sxtb	r3, r3
 8009d42:	4313      	orrs	r3, r2
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4a5a      	ldr	r2, [pc, #360]	; (8009eb8 <put_fat+0x2cc>)
 8009d50:	2101      	movs	r1, #1
 8009d52:	5499      	strb	r1, [r3, r2]
			break;
 8009d54:	e0a4      	b.n	8009ea0 <put_fat+0x2b4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	2381      	movs	r3, #129	; 0x81
 8009d5a:	015b      	lsls	r3, r3, #5
 8009d5c:	58d4      	ldr	r4, [r2, r3]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4a54      	ldr	r2, [pc, #336]	; (8009eb4 <put_fat+0x2c8>)
 8009d62:	5a9b      	ldrh	r3, [r3, r2]
 8009d64:	085b      	lsrs	r3, r3, #1
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	0019      	movs	r1, r3
 8009d6a:	68b8      	ldr	r0, [r7, #8]
 8009d6c:	f7f6 f9e6 	bl	800013c <__udivsi3>
 8009d70:	0003      	movs	r3, r0
 8009d72:	18e2      	adds	r2, r4, r3
 8009d74:	251f      	movs	r5, #31
 8009d76:	197c      	adds	r4, r7, r5
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	0011      	movs	r1, r2
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f7ff fd03 	bl	8009788 <move_window>
 8009d82:	0003      	movs	r3, r0
 8009d84:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009d86:	197b      	adds	r3, r7, r5
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d000      	beq.n	8009d90 <put_fat+0x1a4>
 8009d8e:	e084      	b.n	8009e9a <put_fat+0x2ae>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	005a      	lsls	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4947      	ldr	r1, [pc, #284]	; (8009eb4 <put_fat+0x2c8>)
 8009d98:	5a5b      	ldrh	r3, [r3, r1]
 8009d9a:	0019      	movs	r1, r3
 8009d9c:	0010      	movs	r0, r2
 8009d9e:	f7f6 fa53 	bl	8000248 <__aeabi_uidivmod>
 8009da2:	000b      	movs	r3, r1
 8009da4:	001a      	movs	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	189b      	adds	r3, r3, r2
 8009daa:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	701a      	strb	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	0a1b      	lsrs	r3, r3, #8
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4a3c      	ldr	r2, [pc, #240]	; (8009eb8 <put_fat+0x2cc>)
 8009dc8:	2101      	movs	r1, #1
 8009dca:	5499      	strb	r1, [r3, r2]
			break;
 8009dcc:	e068      	b.n	8009ea0 <put_fat+0x2b4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	2381      	movs	r3, #129	; 0x81
 8009dd2:	015b      	lsls	r3, r3, #5
 8009dd4:	58d4      	ldr	r4, [r2, r3]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	4a36      	ldr	r2, [pc, #216]	; (8009eb4 <put_fat+0x2c8>)
 8009dda:	5a9b      	ldrh	r3, [r3, r2]
 8009ddc:	089b      	lsrs	r3, r3, #2
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	0019      	movs	r1, r3
 8009de2:	68b8      	ldr	r0, [r7, #8]
 8009de4:	f7f6 f9aa 	bl	800013c <__udivsi3>
 8009de8:	0003      	movs	r3, r0
 8009dea:	18e2      	adds	r2, r4, r3
 8009dec:	251f      	movs	r5, #31
 8009dee:	197c      	adds	r4, r7, r5
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	0011      	movs	r1, r2
 8009df4:	0018      	movs	r0, r3
 8009df6:	f7ff fcc7 	bl	8009788 <move_window>
 8009dfa:	0003      	movs	r3, r0
 8009dfc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009dfe:	197b      	adds	r3, r7, r5
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d14b      	bne.n	8009e9e <put_fat+0x2b2>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	009a      	lsls	r2, r3, #2
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4929      	ldr	r1, [pc, #164]	; (8009eb4 <put_fat+0x2c8>)
 8009e0e:	5a5b      	ldrh	r3, [r3, r1]
 8009e10:	0019      	movs	r1, r3
 8009e12:	0010      	movs	r0, r2
 8009e14:	f7f6 fa18 	bl	8000248 <__aeabi_uidivmod>
 8009e18:	000b      	movs	r3, r1
 8009e1a:	001a      	movs	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	3303      	adds	r3, #3
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	061a      	lsls	r2, r3, #24
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	3302      	adds	r3, #2
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	041b      	lsls	r3, r3, #16
 8009e32:	4313      	orrs	r3, r2
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	3201      	adds	r2, #1
 8009e38:	7812      	ldrb	r2, [r2, #0]
 8009e3a:	0212      	lsls	r2, r2, #8
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	0f1b      	lsrs	r3, r3, #28
 8009e46:	071b      	lsls	r3, r3, #28
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	0a1b      	lsrs	r3, r3, #8
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	3301      	adds	r3, #1
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	701a      	strb	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	0c1a      	lsrs	r2, r3, #16
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	b2d2      	uxtb	r2, r2
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	0e1a      	lsrs	r2, r3, #24
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	3303      	adds	r3, #3
 8009e7a:	b2d2      	uxtb	r2, r2
 8009e7c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4a0d      	ldr	r2, [pc, #52]	; (8009eb8 <put_fat+0x2cc>)
 8009e82:	2101      	movs	r1, #1
 8009e84:	5499      	strb	r1, [r3, r2]
			break;
 8009e86:	e00b      	b.n	8009ea0 <put_fat+0x2b4>

		default :
			res = FR_INT_ERR;
 8009e88:	231f      	movs	r3, #31
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	e006      	b.n	8009ea0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	e004      	b.n	8009ea0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	e002      	b.n	8009ea0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	e000      	b.n	8009ea0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 8009e9e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8009ea0:	231f      	movs	r3, #31
 8009ea2:	18fb      	adds	r3, r7, r3
 8009ea4:	781b      	ldrb	r3, [r3, #0]
}
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	b008      	add	sp, #32
 8009eac:	bdb0      	pop	{r4, r5, r7, pc}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	00001014 	.word	0x00001014
 8009eb4:	0000100a 	.word	0x0000100a
 8009eb8:	00001004 	.word	0x00001004

08009ebc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8009ebc:	b5b0      	push	{r4, r5, r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d905      	bls.n	8009ed8 <remove_chain+0x1c>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a30      	ldr	r2, [pc, #192]	; (8009f90 <remove_chain+0xd4>)
 8009ed0:	589b      	ldr	r3, [r3, r2]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d304      	bcc.n	8009ee2 <remove_chain+0x26>
		res = FR_INT_ERR;
 8009ed8:	230f      	movs	r3, #15
 8009eda:	18fb      	adds	r3, r7, r3
 8009edc:	2202      	movs	r2, #2
 8009ede:	701a      	strb	r2, [r3, #0]
 8009ee0:	e04e      	b.n	8009f80 <remove_chain+0xc4>

	} else {
		res = FR_OK;
 8009ee2:	230f      	movs	r3, #15
 8009ee4:	18fb      	adds	r3, r7, r3
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009eea:	e03f      	b.n	8009f6c <remove_chain+0xb0>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	0011      	movs	r1, r2
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f7ff fd7c 	bl	80099f0 <get_fat>
 8009ef8:	0003      	movs	r3, r0
 8009efa:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d03b      	beq.n	8009f7a <remove_chain+0xbe>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d104      	bne.n	8009f12 <remove_chain+0x56>
 8009f08:	230f      	movs	r3, #15
 8009f0a:	18fb      	adds	r3, r7, r3
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	e036      	b.n	8009f80 <remove_chain+0xc4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	3301      	adds	r3, #1
 8009f16:	d104      	bne.n	8009f22 <remove_chain+0x66>
 8009f18:	230f      	movs	r3, #15
 8009f1a:	18fb      	adds	r3, r7, r3
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	e02e      	b.n	8009f80 <remove_chain+0xc4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009f22:	250f      	movs	r5, #15
 8009f24:	197c      	adds	r4, r7, r5
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7ff fe5d 	bl	8009bec <put_fat>
 8009f32:	0003      	movs	r3, r0
 8009f34:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009f36:	197b      	adds	r3, r7, r5
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d11f      	bne.n	8009f7e <remove_chain+0xc2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a14      	ldr	r2, [pc, #80]	; (8009f94 <remove_chain+0xd8>)
 8009f42:	589b      	ldr	r3, [r3, r2]
 8009f44:	3301      	adds	r3, #1
 8009f46:	d00f      	beq.n	8009f68 <remove_chain+0xac>
				fs->free_clust++;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a12      	ldr	r2, [pc, #72]	; (8009f94 <remove_chain+0xd8>)
 8009f4c:	589b      	ldr	r3, [r3, r2]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4910      	ldr	r1, [pc, #64]	; (8009f94 <remove_chain+0xd8>)
 8009f54:	505a      	str	r2, [r3, r1]
				fs->fsi_flag |= 1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a0f      	ldr	r2, [pc, #60]	; (8009f98 <remove_chain+0xdc>)
 8009f5a:	5c9b      	ldrb	r3, [r3, r2]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	b2d9      	uxtb	r1, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a0c      	ldr	r2, [pc, #48]	; (8009f98 <remove_chain+0xdc>)
 8009f66:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a08      	ldr	r2, [pc, #32]	; (8009f90 <remove_chain+0xd4>)
 8009f70:	589b      	ldr	r3, [r3, r2]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d3b9      	bcc.n	8009eec <remove_chain+0x30>
 8009f78:	e002      	b.n	8009f80 <remove_chain+0xc4>
			if (nxt == 0) break;				/* Empty cluster? */
 8009f7a:	46c0      	nop			; (mov r8, r8)
 8009f7c:	e000      	b.n	8009f80 <remove_chain+0xc4>
			if (res != FR_OK) break;
 8009f7e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8009f80:	230f      	movs	r3, #15
 8009f82:	18fb      	adds	r3, r7, r3
 8009f84:	781b      	ldrb	r3, [r3, #0]
}
 8009f86:	0018      	movs	r0, r3
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b004      	add	sp, #16
 8009f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	00001014 	.word	0x00001014
 8009f94:	00001010 	.word	0x00001010
 8009f98:	00001005 	.word	0x00001005

08009f9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009f9c:	b5b0      	push	{r4, r5, r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10f      	bne.n	8009fcc <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a50      	ldr	r2, [pc, #320]	; (800a0f0 <create_chain+0x154>)
 8009fb0:	589b      	ldr	r3, [r3, r2]
 8009fb2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d005      	beq.n	8009fc6 <create_chain+0x2a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a4d      	ldr	r2, [pc, #308]	; (800a0f4 <create_chain+0x158>)
 8009fbe:	589b      	ldr	r3, [r3, r2]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d31e      	bcc.n	800a004 <create_chain+0x68>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	613b      	str	r3, [r7, #16]
 8009fca:	e01b      	b.n	800a004 <create_chain+0x68>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	0011      	movs	r1, r2
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f7ff fd0c 	bl	80099f0 <get_fat>
 8009fd8:	0003      	movs	r3, r0
 8009fda:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d801      	bhi.n	8009fe6 <create_chain+0x4a>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e07f      	b.n	800a0e6 <create_chain+0x14a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	d101      	bne.n	8009ff0 <create_chain+0x54>
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	e07a      	b.n	800a0e6 <create_chain+0x14a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a40      	ldr	r2, [pc, #256]	; (800a0f4 <create_chain+0x158>)
 8009ff4:	589b      	ldr	r3, [r3, r2]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d201      	bcs.n	800a000 <create_chain+0x64>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	e072      	b.n	800a0e6 <create_chain+0x14a>
		scl = clst;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	3301      	adds	r3, #1
 800a00c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a38      	ldr	r2, [pc, #224]	; (800a0f4 <create_chain+0x158>)
 800a012:	589b      	ldr	r3, [r3, r2]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	429a      	cmp	r2, r3
 800a018:	d307      	bcc.n	800a02a <create_chain+0x8e>
			ncl = 2;
 800a01a:	2302      	movs	r3, #2
 800a01c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	429a      	cmp	r2, r3
 800a024:	d901      	bls.n	800a02a <create_chain+0x8e>
 800a026:	2300      	movs	r3, #0
 800a028:	e05d      	b.n	800a0e6 <create_chain+0x14a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	0011      	movs	r1, r2
 800a030:	0018      	movs	r0, r3
 800a032:	f7ff fcdd 	bl	80099f0 <get_fat>
 800a036:	0003      	movs	r3, r0
 800a038:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00d      	beq.n	800a05c <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	3301      	adds	r3, #1
 800a044:	d002      	beq.n	800a04c <create_chain+0xb0>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d101      	bne.n	800a050 <create_chain+0xb4>
			return cs;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	e04a      	b.n	800a0e6 <create_chain+0x14a>
		if (ncl == scl) return 0;		/* No free cluster */
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	429a      	cmp	r2, r3
 800a056:	d1d7      	bne.n	800a008 <create_chain+0x6c>
 800a058:	2300      	movs	r3, #0
 800a05a:	e044      	b.n	800a0e6 <create_chain+0x14a>
		if (cs == 0) break;				/* Found a free cluster */
 800a05c:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a05e:	250f      	movs	r5, #15
 800a060:	197c      	adds	r4, r7, r5
 800a062:	4a25      	ldr	r2, [pc, #148]	; (800a0f8 <create_chain+0x15c>)
 800a064:	6979      	ldr	r1, [r7, #20]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	0018      	movs	r0, r3
 800a06a:	f7ff fdbf 	bl	8009bec <put_fat>
 800a06e:	0003      	movs	r3, r0
 800a070:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 800a072:	197b      	adds	r3, r7, r5
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <create_chain+0xf6>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d008      	beq.n	800a092 <create_chain+0xf6>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a080:	197c      	adds	r4, r7, r5
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	0018      	movs	r0, r3
 800a08a:	f7ff fdaf 	bl	8009bec <put_fat>
 800a08e:	0003      	movs	r3, r0
 800a090:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 800a092:	230f      	movs	r3, #15
 800a094:	18fb      	adds	r3, r7, r3
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d119      	bne.n	800a0d0 <create_chain+0x134>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4914      	ldr	r1, [pc, #80]	; (800a0f0 <create_chain+0x154>)
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	505a      	str	r2, [r3, r1]
		if (fs->free_clust != 0xFFFFFFFF) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a15      	ldr	r2, [pc, #84]	; (800a0fc <create_chain+0x160>)
 800a0a8:	589b      	ldr	r3, [r3, r2]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	d01a      	beq.n	800a0e4 <create_chain+0x148>
			fs->free_clust--;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a12      	ldr	r2, [pc, #72]	; (800a0fc <create_chain+0x160>)
 800a0b2:	589b      	ldr	r3, [r3, r2]
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4910      	ldr	r1, [pc, #64]	; (800a0fc <create_chain+0x160>)
 800a0ba:	505a      	str	r2, [r3, r1]
			fs->fsi_flag |= 1;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a10      	ldr	r2, [pc, #64]	; (800a100 <create_chain+0x164>)
 800a0c0:	5c9b      	ldrb	r3, [r3, r2]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	b2d9      	uxtb	r1, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a0d      	ldr	r2, [pc, #52]	; (800a100 <create_chain+0x164>)
 800a0cc:	5499      	strb	r1, [r3, r2]
 800a0ce:	e009      	b.n	800a0e4 <create_chain+0x148>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a0d0:	230f      	movs	r3, #15
 800a0d2:	18fb      	adds	r3, r7, r3
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d102      	bne.n	800a0e0 <create_chain+0x144>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	425b      	negs	r3, r3
 800a0de:	e000      	b.n	800a0e2 <create_chain+0x146>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a0e4:	697b      	ldr	r3, [r7, #20]
}
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	b006      	add	sp, #24
 800a0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	0000100c 	.word	0x0000100c
 800a0f4:	00001014 	.word	0x00001014
 800a0f8:	0fffffff 	.word	0x0fffffff
 800a0fc:	00001010 	.word	0x00001010
 800a100:	00001005 	.word	0x00001005

0800a104 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a1c      	ldr	r2, [pc, #112]	; (800a184 <clmt_clust+0x80>)
 800a112:	589b      	ldr	r3, [r3, r2]
 800a114:	3304      	adds	r3, #4
 800a116:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	2380      	movs	r3, #128	; 0x80
 800a11c:	015b      	lsls	r3, r3, #5
 800a11e:	58d3      	ldr	r3, [r2, r3]
 800a120:	4a19      	ldr	r2, [pc, #100]	; (800a188 <clmt_clust+0x84>)
 800a122:	5a9b      	ldrh	r3, [r3, r2]
 800a124:	0019      	movs	r1, r3
 800a126:	6838      	ldr	r0, [r7, #0]
 800a128:	f7f6 f808 	bl	800013c <__udivsi3>
 800a12c:	0003      	movs	r3, r0
 800a12e:	0018      	movs	r0, r3
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	2380      	movs	r3, #128	; 0x80
 800a134:	015b      	lsls	r3, r3, #5
 800a136:	58d3      	ldr	r3, [r2, r3]
 800a138:	4a14      	ldr	r2, [pc, #80]	; (800a18c <clmt_clust+0x88>)
 800a13a:	5c9b      	ldrb	r3, [r3, r2]
 800a13c:	0019      	movs	r1, r3
 800a13e:	f7f5 fffd 	bl	800013c <__udivsi3>
 800a142:	0003      	movs	r3, r0
 800a144:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	1d1a      	adds	r2, r3, #4
 800a14a:	613a      	str	r2, [r7, #16]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <clmt_clust+0x56>
 800a156:	2300      	movs	r3, #0
 800a158:	e010      	b.n	800a17c <clmt_clust+0x78>
		if (cl < ncl) break;	/* In this fragment? */
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d307      	bcc.n	800a172 <clmt_clust+0x6e>
		cl -= ncl; tbl++;		/* Next fragment */
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	3304      	adds	r3, #4
 800a16e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a170:	e7e9      	b.n	800a146 <clmt_clust+0x42>
		if (cl < ncl) break;	/* In this fragment? */
 800a172:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	18d3      	adds	r3, r2, r3
}
 800a17c:	0018      	movs	r0, r3
 800a17e:	46bd      	mov	sp, r7
 800a180:	b006      	add	sp, #24
 800a182:	bd80      	pop	{r7, pc}
 800a184:	00001024 	.word	0x00001024
 800a188:	0000100a 	.word	0x0000100a
 800a18c:	00001002 	.word	0x00001002

0800a190 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	b299      	uxth	r1, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a5d      	ldr	r2, [pc, #372]	; (800a318 <dir_sdi+0x188>)
 800a1a2:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a5d      	ldr	r2, [pc, #372]	; (800a31c <dir_sdi+0x18c>)
 800a1a8:	589b      	ldr	r3, [r3, r2]
 800a1aa:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d008      	beq.n	800a1c4 <dir_sdi+0x34>
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	2380      	movs	r3, #128	; 0x80
 800a1b6:	015b      	lsls	r3, r3, #5
 800a1b8:	58d3      	ldr	r3, [r2, r3]
 800a1ba:	4a59      	ldr	r2, [pc, #356]	; (800a320 <dir_sdi+0x190>)
 800a1bc:	589b      	ldr	r3, [r3, r2]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d301      	bcc.n	800a1c8 <dir_sdi+0x38>
		return FR_INT_ERR;
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e0a2      	b.n	800a30e <dir_sdi+0x17e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10f      	bne.n	800a1ee <dir_sdi+0x5e>
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	015b      	lsls	r3, r3, #5
 800a1d4:	58d2      	ldr	r2, [r2, r3]
 800a1d6:	2380      	movs	r3, #128	; 0x80
 800a1d8:	015b      	lsls	r3, r3, #5
 800a1da:	5cd3      	ldrb	r3, [r2, r3]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d106      	bne.n	800a1ee <dir_sdi+0x5e>
		clst = dp->fs->dirbase;
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	2380      	movs	r3, #128	; 0x80
 800a1e4:	015b      	lsls	r3, r3, #5
 800a1e6:	58d3      	ldr	r3, [r2, r3]
 800a1e8:	4a4e      	ldr	r2, [pc, #312]	; (800a324 <dir_sdi+0x194>)
 800a1ea:	589b      	ldr	r3, [r3, r2]
 800a1ec:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d113      	bne.n	800a21c <dir_sdi+0x8c>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	2380      	movs	r3, #128	; 0x80
 800a1f8:	015b      	lsls	r3, r3, #5
 800a1fa:	58d3      	ldr	r3, [r2, r3]
 800a1fc:	4a47      	ldr	r2, [pc, #284]	; (800a31c <dir_sdi+0x18c>)
 800a1fe:	5a9b      	ldrh	r3, [r3, r2]
 800a200:	001a      	movs	r2, r3
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	4293      	cmp	r3, r2
 800a206:	d301      	bcc.n	800a20c <dir_sdi+0x7c>
			return FR_INT_ERR;
 800a208:	2302      	movs	r3, #2
 800a20a:	e080      	b.n	800a30e <dir_sdi+0x17e>
		sect = dp->fs->dirbase;
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	2380      	movs	r3, #128	; 0x80
 800a210:	015b      	lsls	r3, r3, #5
 800a212:	58d3      	ldr	r3, [r2, r3]
 800a214:	4a43      	ldr	r2, [pc, #268]	; (800a324 <dir_sdi+0x194>)
 800a216:	589b      	ldr	r3, [r3, r2]
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	e042      	b.n	800a2a2 <dir_sdi+0x112>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	2380      	movs	r3, #128	; 0x80
 800a220:	015b      	lsls	r3, r3, #5
 800a222:	58d3      	ldr	r3, [r2, r3]
 800a224:	4a40      	ldr	r2, [pc, #256]	; (800a328 <dir_sdi+0x198>)
 800a226:	5a9b      	ldrh	r3, [r3, r2]
 800a228:	095b      	lsrs	r3, r3, #5
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	0019      	movs	r1, r3
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	015b      	lsls	r3, r3, #5
 800a234:	58d3      	ldr	r3, [r2, r3]
 800a236:	4a3d      	ldr	r2, [pc, #244]	; (800a32c <dir_sdi+0x19c>)
 800a238:	5c9b      	ldrb	r3, [r3, r2]
 800a23a:	434b      	muls	r3, r1
 800a23c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a23e:	e021      	b.n	800a284 <dir_sdi+0xf4>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	2380      	movs	r3, #128	; 0x80
 800a244:	015b      	lsls	r3, r3, #5
 800a246:	58d3      	ldr	r3, [r2, r3]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	0011      	movs	r1, r2
 800a24c:	0018      	movs	r0, r3
 800a24e:	f7ff fbcf 	bl	80099f0 <get_fat>
 800a252:	0003      	movs	r3, r0
 800a254:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	3301      	adds	r3, #1
 800a25a:	d101      	bne.n	800a260 <dir_sdi+0xd0>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e056      	b.n	800a30e <dir_sdi+0x17e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d908      	bls.n	800a278 <dir_sdi+0xe8>
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	2380      	movs	r3, #128	; 0x80
 800a26a:	015b      	lsls	r3, r3, #5
 800a26c:	58d3      	ldr	r3, [r2, r3]
 800a26e:	4a2c      	ldr	r2, [pc, #176]	; (800a320 <dir_sdi+0x190>)
 800a270:	589b      	ldr	r3, [r3, r2]
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	429a      	cmp	r2, r3
 800a276:	d301      	bcc.n	800a27c <dir_sdi+0xec>
				return FR_INT_ERR;
 800a278:	2302      	movs	r3, #2
 800a27a:	e048      	b.n	800a30e <dir_sdi+0x17e>
			idx -= ic;
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d2d9      	bcs.n	800a240 <dir_sdi+0xb0>
		}
		sect = clust2sect(dp->fs, clst);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	2380      	movs	r3, #128	; 0x80
 800a290:	015b      	lsls	r3, r3, #5
 800a292:	58d3      	ldr	r3, [r2, r3]
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	0011      	movs	r1, r2
 800a298:	0018      	movs	r0, r3
 800a29a:	f7ff fb83 	bl	80099a4 <clust2sect>
 800a29e:	0003      	movs	r3, r0
 800a2a0:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4922      	ldr	r1, [pc, #136]	; (800a330 <dir_sdi+0x1a0>)
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	505a      	str	r2, [r3, r1]
	if (!sect) return FR_INT_ERR;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <dir_sdi+0x124>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e02c      	b.n	800a30e <dir_sdi+0x17e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	2380      	movs	r3, #128	; 0x80
 800a2b8:	015b      	lsls	r3, r3, #5
 800a2ba:	58d3      	ldr	r3, [r2, r3]
 800a2bc:	4a1a      	ldr	r2, [pc, #104]	; (800a328 <dir_sdi+0x198>)
 800a2be:	5a9b      	ldrh	r3, [r3, r2]
 800a2c0:	095b      	lsrs	r3, r3, #5
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	0019      	movs	r1, r3
 800a2c6:	6838      	ldr	r0, [r7, #0]
 800a2c8:	f7f5 ff38 	bl	800013c <__udivsi3>
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	001a      	movs	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	18d2      	adds	r2, r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4917      	ldr	r1, [pc, #92]	; (800a334 <dir_sdi+0x1a4>)
 800a2d8:	505a      	str	r2, [r3, r1]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	2380      	movs	r3, #128	; 0x80
 800a2de:	015b      	lsls	r3, r3, #5
 800a2e0:	58d3      	ldr	r3, [r2, r3]
 800a2e2:	001c      	movs	r4, r3
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	2380      	movs	r3, #128	; 0x80
 800a2e8:	015b      	lsls	r3, r3, #5
 800a2ea:	58d3      	ldr	r3, [r2, r3]
 800a2ec:	4a0e      	ldr	r2, [pc, #56]	; (800a328 <dir_sdi+0x198>)
 800a2ee:	5a9b      	ldrh	r3, [r3, r2]
 800a2f0:	095b      	lsrs	r3, r3, #5
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	001a      	movs	r2, r3
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	0011      	movs	r1, r2
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	f7f5 ffa4 	bl	8000248 <__aeabi_uidivmod>
 800a300:	000b      	movs	r3, r1
 800a302:	015b      	lsls	r3, r3, #5
 800a304:	18e2      	adds	r2, r4, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4905      	ldr	r1, [pc, #20]	; (800a320 <dir_sdi+0x190>)
 800a30a:	505a      	str	r2, [r3, r1]

	return FR_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	0018      	movs	r0, r3
 800a310:	46bd      	mov	sp, r7
 800a312:	b007      	add	sp, #28
 800a314:	bd90      	pop	{r4, r7, pc}
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	00001006 	.word	0x00001006
 800a31c:	00001008 	.word	0x00001008
 800a320:	00001014 	.word	0x00001014
 800a324:	00001024 	.word	0x00001024
 800a328:	0000100a 	.word	0x0000100a
 800a32c:	00001002 	.word	0x00001002
 800a330:	0000100c 	.word	0x0000100c
 800a334:	00001010 	.word	0x00001010

0800a338 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a338:	b590      	push	{r4, r7, lr}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a94      	ldr	r2, [pc, #592]	; (800a598 <dir_next+0x260>)
 800a346:	5a9b      	ldrh	r3, [r3, r2]
 800a348:	3301      	adds	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	041b      	lsls	r3, r3, #16
 800a350:	0c1b      	lsrs	r3, r3, #16
 800a352:	d004      	beq.n	800a35e <dir_next+0x26>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a91      	ldr	r2, [pc, #580]	; (800a59c <dir_next+0x264>)
 800a358:	589b      	ldr	r3, [r3, r2]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <dir_next+0x2a>
		return FR_NO_FILE;
 800a35e:	2304      	movs	r3, #4
 800a360:	e115      	b.n	800a58e <dir_next+0x256>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	2380      	movs	r3, #128	; 0x80
 800a366:	015b      	lsls	r3, r3, #5
 800a368:	58d3      	ldr	r3, [r2, r3]
 800a36a:	4a8d      	ldr	r2, [pc, #564]	; (800a5a0 <dir_next+0x268>)
 800a36c:	5a9b      	ldrh	r3, [r3, r2]
 800a36e:	095b      	lsrs	r3, r3, #5
 800a370:	b29b      	uxth	r3, r3
 800a372:	001a      	movs	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	0011      	movs	r1, r2
 800a378:	0018      	movs	r0, r3
 800a37a:	f7f5 ff65 	bl	8000248 <__aeabi_uidivmod>
 800a37e:	1e0b      	subs	r3, r1, #0
 800a380:	d000      	beq.n	800a384 <dir_next+0x4c>
 800a382:	e0e5      	b.n	800a550 <dir_next+0x218>
		dp->sect++;					/* Next sector */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a85      	ldr	r2, [pc, #532]	; (800a59c <dir_next+0x264>)
 800a388:	589b      	ldr	r3, [r3, r2]
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4983      	ldr	r1, [pc, #524]	; (800a59c <dir_next+0x264>)
 800a390:	505a      	str	r2, [r3, r1]

		if (!dp->clust) {		/* Static table */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a83      	ldr	r2, [pc, #524]	; (800a5a4 <dir_next+0x26c>)
 800a396:	589b      	ldr	r3, [r3, r2]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10c      	bne.n	800a3b6 <dir_next+0x7e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	2380      	movs	r3, #128	; 0x80
 800a3a0:	015b      	lsls	r3, r3, #5
 800a3a2:	58d3      	ldr	r3, [r2, r3]
 800a3a4:	4a80      	ldr	r2, [pc, #512]	; (800a5a8 <dir_next+0x270>)
 800a3a6:	5a9b      	ldrh	r3, [r3, r2]
 800a3a8:	001a      	movs	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d200      	bcs.n	800a3b2 <dir_next+0x7a>
 800a3b0:	e0ce      	b.n	800a550 <dir_next+0x218>
				return FR_NO_FILE;
 800a3b2:	2304      	movs	r3, #4
 800a3b4:	e0eb      	b.n	800a58e <dir_next+0x256>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	2380      	movs	r3, #128	; 0x80
 800a3ba:	015b      	lsls	r3, r3, #5
 800a3bc:	58d3      	ldr	r3, [r2, r3]
 800a3be:	4a78      	ldr	r2, [pc, #480]	; (800a5a0 <dir_next+0x268>)
 800a3c0:	5a9b      	ldrh	r3, [r3, r2]
 800a3c2:	095b      	lsrs	r3, r3, #5
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	0019      	movs	r1, r3
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7f5 feb7 	bl	800013c <__udivsi3>
 800a3ce:	0003      	movs	r3, r0
 800a3d0:	0019      	movs	r1, r3
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	2380      	movs	r3, #128	; 0x80
 800a3d6:	015b      	lsls	r3, r3, #5
 800a3d8:	58d3      	ldr	r3, [r2, r3]
 800a3da:	4a74      	ldr	r2, [pc, #464]	; (800a5ac <dir_next+0x274>)
 800a3dc:	5c9b      	ldrb	r3, [r3, r2]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	400b      	ands	r3, r1
 800a3e2:	d000      	beq.n	800a3e6 <dir_next+0xae>
 800a3e4:	e0b4      	b.n	800a550 <dir_next+0x218>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	2380      	movs	r3, #128	; 0x80
 800a3ea:	015b      	lsls	r3, r3, #5
 800a3ec:	58d2      	ldr	r2, [r2, r3]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	496c      	ldr	r1, [pc, #432]	; (800a5a4 <dir_next+0x26c>)
 800a3f2:	585b      	ldr	r3, [r3, r1]
 800a3f4:	0019      	movs	r1, r3
 800a3f6:	0010      	movs	r0, r2
 800a3f8:	f7ff fafa 	bl	80099f0 <get_fat>
 800a3fc:	0003      	movs	r3, r0
 800a3fe:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d801      	bhi.n	800a40a <dir_next+0xd2>
 800a406:	2302      	movs	r3, #2
 800a408:	e0c1      	b.n	800a58e <dir_next+0x256>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	3301      	adds	r3, #1
 800a40e:	d101      	bne.n	800a414 <dir_next+0xdc>
 800a410:	2301      	movs	r3, #1
 800a412:	e0bc      	b.n	800a58e <dir_next+0x256>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	2380      	movs	r3, #128	; 0x80
 800a418:	015b      	lsls	r3, r3, #5
 800a41a:	58d3      	ldr	r3, [r2, r3]
 800a41c:	4a64      	ldr	r2, [pc, #400]	; (800a5b0 <dir_next+0x278>)
 800a41e:	589b      	ldr	r3, [r3, r2]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	429a      	cmp	r2, r3
 800a424:	d200      	bcs.n	800a428 <dir_next+0xf0>
 800a426:	e082      	b.n	800a52e <dir_next+0x1f6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <dir_next+0xfa>
 800a42e:	2304      	movs	r3, #4
 800a430:	e0ad      	b.n	800a58e <dir_next+0x256>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	2380      	movs	r3, #128	; 0x80
 800a436:	015b      	lsls	r3, r3, #5
 800a438:	58d2      	ldr	r2, [r2, r3]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4959      	ldr	r1, [pc, #356]	; (800a5a4 <dir_next+0x26c>)
 800a43e:	585b      	ldr	r3, [r3, r1]
 800a440:	0019      	movs	r1, r3
 800a442:	0010      	movs	r0, r2
 800a444:	f7ff fdaa 	bl	8009f9c <create_chain>
 800a448:	0003      	movs	r3, r0
 800a44a:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <dir_next+0x11e>
 800a452:	2307      	movs	r3, #7
 800a454:	e09b      	b.n	800a58e <dir_next+0x256>
					if (clst == 1) return FR_INT_ERR;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d101      	bne.n	800a460 <dir_next+0x128>
 800a45c:	2302      	movs	r3, #2
 800a45e:	e096      	b.n	800a58e <dir_next+0x256>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	d101      	bne.n	800a46a <dir_next+0x132>
 800a466:	2301      	movs	r3, #1
 800a468:	e091      	b.n	800a58e <dir_next+0x256>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	2380      	movs	r3, #128	; 0x80
 800a46e:	015b      	lsls	r3, r3, #5
 800a470:	58d3      	ldr	r3, [r2, r3]
 800a472:	0018      	movs	r0, r3
 800a474:	f7ff f930 	bl	80096d8 <sync_window>
 800a478:	1e03      	subs	r3, r0, #0
 800a47a:	d001      	beq.n	800a480 <dir_next+0x148>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e086      	b.n	800a58e <dir_next+0x256>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	2380      	movs	r3, #128	; 0x80
 800a484:	015b      	lsls	r3, r3, #5
 800a486:	58d3      	ldr	r3, [r2, r3]
 800a488:	0018      	movs	r0, r3
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	2380      	movs	r3, #128	; 0x80
 800a48e:	015b      	lsls	r3, r3, #5
 800a490:	58d3      	ldr	r3, [r2, r3]
 800a492:	4a43      	ldr	r2, [pc, #268]	; (800a5a0 <dir_next+0x268>)
 800a494:	5a9b      	ldrh	r3, [r3, r2]
 800a496:	001a      	movs	r2, r3
 800a498:	2100      	movs	r1, #0
 800a49a:	f7fe ff58 	bl	800934e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	2380      	movs	r3, #128	; 0x80
 800a4a2:	015b      	lsls	r3, r3, #5
 800a4a4:	58d0      	ldr	r0, [r2, r3]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	2380      	movs	r3, #128	; 0x80
 800a4aa:	015b      	lsls	r3, r3, #5
 800a4ac:	58d4      	ldr	r4, [r2, r3]
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	0019      	movs	r1, r3
 800a4b2:	f7ff fa77 	bl	80099a4 <clust2sect>
 800a4b6:	0003      	movs	r3, r0
 800a4b8:	4a3e      	ldr	r2, [pc, #248]	; (800a5b4 <dir_next+0x27c>)
 800a4ba:	50a3      	str	r3, [r4, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a4bc:	2300      	movs	r3, #0
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	e01d      	b.n	800a4fe <dir_next+0x1c6>
						dp->fs->wflag = 1;
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	015b      	lsls	r3, r3, #5
 800a4c8:	58d3      	ldr	r3, [r2, r3]
 800a4ca:	4a3b      	ldr	r2, [pc, #236]	; (800a5b8 <dir_next+0x280>)
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	5499      	strb	r1, [r3, r2]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	2380      	movs	r3, #128	; 0x80
 800a4d4:	015b      	lsls	r3, r3, #5
 800a4d6:	58d3      	ldr	r3, [r2, r3]
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f7ff f8fd 	bl	80096d8 <sync_window>
 800a4de:	1e03      	subs	r3, r0, #0
 800a4e0:	d001      	beq.n	800a4e6 <dir_next+0x1ae>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e053      	b.n	800a58e <dir_next+0x256>
						dp->fs->winsect++;
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	2380      	movs	r3, #128	; 0x80
 800a4ea:	015b      	lsls	r3, r3, #5
 800a4ec:	58d3      	ldr	r3, [r2, r3]
 800a4ee:	4a31      	ldr	r2, [pc, #196]	; (800a5b4 <dir_next+0x27c>)
 800a4f0:	589a      	ldr	r2, [r3, r2]
 800a4f2:	3201      	adds	r2, #1
 800a4f4:	492f      	ldr	r1, [pc, #188]	; (800a5b4 <dir_next+0x27c>)
 800a4f6:	505a      	str	r2, [r3, r1]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	2380      	movs	r3, #128	; 0x80
 800a502:	015b      	lsls	r3, r3, #5
 800a504:	58d3      	ldr	r3, [r2, r3]
 800a506:	4a29      	ldr	r2, [pc, #164]	; (800a5ac <dir_next+0x274>)
 800a508:	5c9b      	ldrb	r3, [r3, r2]
 800a50a:	001a      	movs	r2, r3
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	4293      	cmp	r3, r2
 800a510:	d3d7      	bcc.n	800a4c2 <dir_next+0x18a>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	2380      	movs	r3, #128	; 0x80
 800a516:	015b      	lsls	r3, r3, #5
 800a518:	58d3      	ldr	r3, [r2, r3]
 800a51a:	4a26      	ldr	r2, [pc, #152]	; (800a5b4 <dir_next+0x27c>)
 800a51c:	5899      	ldr	r1, [r3, r2]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	2380      	movs	r3, #128	; 0x80
 800a522:	015b      	lsls	r3, r3, #5
 800a524:	58d3      	ldr	r3, [r2, r3]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	1a8a      	subs	r2, r1, r2
 800a52a:	4922      	ldr	r1, [pc, #136]	; (800a5b4 <dir_next+0x27c>)
 800a52c:	505a      	str	r2, [r3, r1]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	491c      	ldr	r1, [pc, #112]	; (800a5a4 <dir_next+0x26c>)
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	505a      	str	r2, [r3, r1]
				dp->sect = clust2sect(dp->fs, clst);
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	2380      	movs	r3, #128	; 0x80
 800a53a:	015b      	lsls	r3, r3, #5
 800a53c:	58d3      	ldr	r3, [r2, r3]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	0011      	movs	r1, r2
 800a542:	0018      	movs	r0, r3
 800a544:	f7ff fa2e 	bl	80099a4 <clust2sect>
 800a548:	0002      	movs	r2, r0
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4913      	ldr	r1, [pc, #76]	; (800a59c <dir_next+0x264>)
 800a54e:	505a      	str	r2, [r3, r1]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	b299      	uxth	r1, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a10      	ldr	r2, [pc, #64]	; (800a598 <dir_next+0x260>)
 800a558:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	2380      	movs	r3, #128	; 0x80
 800a55e:	015b      	lsls	r3, r3, #5
 800a560:	58d3      	ldr	r3, [r2, r3]
 800a562:	001c      	movs	r4, r3
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	2380      	movs	r3, #128	; 0x80
 800a568:	015b      	lsls	r3, r3, #5
 800a56a:	58d3      	ldr	r3, [r2, r3]
 800a56c:	4a0c      	ldr	r2, [pc, #48]	; (800a5a0 <dir_next+0x268>)
 800a56e:	5a9b      	ldrh	r3, [r3, r2]
 800a570:	095b      	lsrs	r3, r3, #5
 800a572:	b29b      	uxth	r3, r3
 800a574:	001a      	movs	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	0011      	movs	r1, r2
 800a57a:	0018      	movs	r0, r3
 800a57c:	f7f5 fe64 	bl	8000248 <__aeabi_uidivmod>
 800a580:	000b      	movs	r3, r1
 800a582:	015b      	lsls	r3, r3, #5
 800a584:	18e2      	adds	r2, r4, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4909      	ldr	r1, [pc, #36]	; (800a5b0 <dir_next+0x278>)
 800a58a:	505a      	str	r2, [r3, r1]

	return FR_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	0018      	movs	r0, r3
 800a590:	46bd      	mov	sp, r7
 800a592:	b007      	add	sp, #28
 800a594:	bd90      	pop	{r4, r7, pc}
 800a596:	46c0      	nop			; (mov r8, r8)
 800a598:	00001006 	.word	0x00001006
 800a59c:	00001010 	.word	0x00001010
 800a5a0:	0000100a 	.word	0x0000100a
 800a5a4:	0000100c 	.word	0x0000100c
 800a5a8:	00001008 	.word	0x00001008
 800a5ac:	00001002 	.word	0x00001002
 800a5b0:	00001014 	.word	0x00001014
 800a5b4:	0000102c 	.word	0x0000102c
 800a5b8:	00001004 	.word	0x00001004

0800a5bc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a5bc:	b5b0      	push	{r4, r5, r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a5c6:	250f      	movs	r5, #15
 800a5c8:	197c      	adds	r4, r7, r5
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f7ff fdde 	bl	800a190 <dir_sdi>
 800a5d4:	0003      	movs	r3, r0
 800a5d6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a5d8:	197b      	adds	r3, r7, r5
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d139      	bne.n	800a654 <dir_alloc+0x98>
		n = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	2380      	movs	r3, #128	; 0x80
 800a5e8:	015b      	lsls	r3, r3, #5
 800a5ea:	58d2      	ldr	r2, [r2, r3]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4921      	ldr	r1, [pc, #132]	; (800a674 <dir_alloc+0xb8>)
 800a5f0:	585b      	ldr	r3, [r3, r1]
 800a5f2:	250f      	movs	r5, #15
 800a5f4:	197c      	adds	r4, r7, r5
 800a5f6:	0019      	movs	r1, r3
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	f7ff f8c5 	bl	8009788 <move_window>
 800a5fe:	0003      	movs	r3, r0
 800a600:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a602:	197b      	adds	r3, r7, r5
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d123      	bne.n	800a652 <dir_alloc+0x96>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a1a      	ldr	r2, [pc, #104]	; (800a678 <dir_alloc+0xbc>)
 800a60e:	589b      	ldr	r3, [r3, r2]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2be5      	cmp	r3, #229	; 0xe5
 800a614:	d005      	beq.n	800a622 <dir_alloc+0x66>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a17      	ldr	r2, [pc, #92]	; (800a678 <dir_alloc+0xbc>)
 800a61a:	589b      	ldr	r3, [r3, r2]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d107      	bne.n	800a632 <dir_alloc+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	3301      	adds	r3, #1
 800a626:	60bb      	str	r3, [r7, #8]
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d102      	bne.n	800a636 <dir_alloc+0x7a>
 800a630:	e010      	b.n	800a654 <dir_alloc+0x98>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a632:	2300      	movs	r3, #0
 800a634:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a636:	250f      	movs	r5, #15
 800a638:	197c      	adds	r4, r7, r5
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2101      	movs	r1, #1
 800a63e:	0018      	movs	r0, r3
 800a640:	f7ff fe7a 	bl	800a338 <dir_next>
 800a644:	0003      	movs	r3, r0
 800a646:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 800a648:	197b      	adds	r3, r7, r5
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0c9      	beq.n	800a5e4 <dir_alloc+0x28>
 800a650:	e000      	b.n	800a654 <dir_alloc+0x98>
			if (res != FR_OK) break;
 800a652:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a654:	220f      	movs	r2, #15
 800a656:	18bb      	adds	r3, r7, r2
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d102      	bne.n	800a664 <dir_alloc+0xa8>
 800a65e:	18bb      	adds	r3, r7, r2
 800a660:	2207      	movs	r2, #7
 800a662:	701a      	strb	r2, [r3, #0]
	return res;
 800a664:	230f      	movs	r3, #15
 800a666:	18fb      	adds	r3, r7, r3
 800a668:	781b      	ldrb	r3, [r3, #0]
}
 800a66a:	0018      	movs	r0, r3
 800a66c:	46bd      	mov	sp, r7
 800a66e:	b004      	add	sp, #16
 800a670:	bdb0      	pop	{r4, r5, r7, pc}
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	00001010 	.word	0x00001010
 800a678:	00001014 	.word	0x00001014

0800a67c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	331b      	adds	r3, #27
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	021b      	lsls	r3, r3, #8
 800a68e:	b21a      	sxth	r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	331a      	adds	r3, #26
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b21b      	sxth	r3, r3
 800a698:	4313      	orrs	r3, r2
 800a69a:	b21b      	sxth	r3, r3
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	2380      	movs	r3, #128	; 0x80
 800a6a4:	015b      	lsls	r3, r3, #5
 800a6a6:	5cd3      	ldrb	r3, [r2, r3]
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d10f      	bne.n	800a6cc <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	3315      	adds	r3, #21
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	b21a      	sxth	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	3314      	adds	r3, #20
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	b21b      	sxth	r3, r3
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	b21b      	sxth	r3, r3
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	041b      	lsls	r3, r3, #16
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]

	return cl;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
}
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b004      	add	sp, #16
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	331a      	adds	r3, #26
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	b2d2      	uxtb	r2, r2
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	0a1b      	lsrs	r3, r3, #8
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	331b      	adds	r3, #27
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	0c1a      	lsrs	r2, r3, #16
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3314      	adds	r3, #20
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	0c1b      	lsrs	r3, r3, #16
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	0a1b      	lsrs	r3, r3, #8
 800a70e:	b29a      	uxth	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3315      	adds	r3, #21
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]
}
 800a718:	46c0      	nop			; (mov r8, r8)
 800a71a:	46bd      	mov	sp, r7
 800a71c:	b002      	add	sp, #8
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a720:	b5b0      	push	{r4, r5, r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a728:	2517      	movs	r5, #23
 800a72a:	197c      	adds	r4, r7, r5
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2100      	movs	r1, #0
 800a730:	0018      	movs	r0, r3
 800a732:	f7ff fd2d 	bl	800a190 <dir_sdi>
 800a736:	0003      	movs	r3, r0
 800a738:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800a73a:	197b      	adds	r3, r7, r5
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <dir_find+0x28>
 800a742:	197b      	adds	r3, r7, r5
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	e049      	b.n	800a7dc <dir_find+0xbc>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	2380      	movs	r3, #128	; 0x80
 800a74c:	015b      	lsls	r3, r3, #5
 800a74e:	58d2      	ldr	r2, [r2, r3]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4924      	ldr	r1, [pc, #144]	; (800a7e4 <dir_find+0xc4>)
 800a754:	585b      	ldr	r3, [r3, r1]
 800a756:	2517      	movs	r5, #23
 800a758:	197c      	adds	r4, r7, r5
 800a75a:	0019      	movs	r1, r3
 800a75c:	0010      	movs	r0, r2
 800a75e:	f7ff f813 	bl	8009788 <move_window>
 800a762:	0003      	movs	r3, r0
 800a764:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800a766:	0029      	movs	r1, r5
 800a768:	187b      	adds	r3, r7, r1
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d12f      	bne.n	800a7d0 <dir_find+0xb0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a1d      	ldr	r2, [pc, #116]	; (800a7e8 <dir_find+0xc8>)
 800a774:	589b      	ldr	r3, [r3, r2]
 800a776:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a778:	200f      	movs	r0, #15
 800a77a:	183b      	adds	r3, r7, r0
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	7812      	ldrb	r2, [r2, #0]
 800a780:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a782:	183b      	adds	r3, r7, r0
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d103      	bne.n	800a792 <dir_find+0x72>
 800a78a:	187b      	adds	r3, r7, r1
 800a78c:	2204      	movs	r2, #4
 800a78e:	701a      	strb	r2, [r3, #0]
 800a790:	e021      	b.n	800a7d6 <dir_find+0xb6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	330b      	adds	r3, #11
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	001a      	movs	r2, r3
 800a79a:	2308      	movs	r3, #8
 800a79c:	4013      	ands	r3, r2
 800a79e:	d109      	bne.n	800a7b4 <dir_find+0x94>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a12      	ldr	r2, [pc, #72]	; (800a7ec <dir_find+0xcc>)
 800a7a4:	5899      	ldr	r1, [r3, r2]
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	220b      	movs	r2, #11
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	f7fe fde8 	bl	8009380 <mem_cmp>
 800a7b0:	1e03      	subs	r3, r0, #0
 800a7b2:	d00f      	beq.n	800a7d4 <dir_find+0xb4>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a7b4:	2517      	movs	r5, #23
 800a7b6:	197c      	adds	r4, r7, r5
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f7ff fdbb 	bl	800a338 <dir_next>
 800a7c2:	0003      	movs	r3, r0
 800a7c4:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800a7c6:	197b      	adds	r3, r7, r5
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0bc      	beq.n	800a748 <dir_find+0x28>
 800a7ce:	e002      	b.n	800a7d6 <dir_find+0xb6>
		if (res != FR_OK) break;
 800a7d0:	46c0      	nop			; (mov r8, r8)
 800a7d2:	e000      	b.n	800a7d6 <dir_find+0xb6>
			break;
 800a7d4:	46c0      	nop			; (mov r8, r8)

	return res;
 800a7d6:	2317      	movs	r3, #23
 800a7d8:	18fb      	adds	r3, r7, r3
 800a7da:	781b      	ldrb	r3, [r3, #0]
}
 800a7dc:	0018      	movs	r0, r3
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	b006      	add	sp, #24
 800a7e2:	bdb0      	pop	{r4, r5, r7, pc}
 800a7e4:	00001010 	.word	0x00001010
 800a7e8:	00001014 	.word	0x00001014
 800a7ec:	00001018 	.word	0x00001018

0800a7f0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a7f0:	b5b0      	push	{r4, r5, r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a7f8:	250f      	movs	r5, #15
 800a7fa:	197c      	adds	r4, r7, r5
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2101      	movs	r1, #1
 800a800:	0018      	movs	r0, r3
 800a802:	f7ff fedb 	bl	800a5bc <dir_alloc>
 800a806:	0003      	movs	r3, r0
 800a808:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800a80a:	0028      	movs	r0, r5
 800a80c:	183b      	adds	r3, r7, r0
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d12b      	bne.n	800a86c <dir_register+0x7c>
		res = move_window(dp->fs, dp->sect);
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	2380      	movs	r3, #128	; 0x80
 800a818:	015b      	lsls	r3, r3, #5
 800a81a:	58d2      	ldr	r2, [r2, r3]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4917      	ldr	r1, [pc, #92]	; (800a87c <dir_register+0x8c>)
 800a820:	585b      	ldr	r3, [r3, r1]
 800a822:	0005      	movs	r5, r0
 800a824:	183c      	adds	r4, r7, r0
 800a826:	0019      	movs	r1, r3
 800a828:	0010      	movs	r0, r2
 800a82a:	f7fe ffad 	bl	8009788 <move_window>
 800a82e:	0003      	movs	r3, r0
 800a830:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800a832:	197b      	adds	r3, r7, r5
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d118      	bne.n	800a86c <dir_register+0x7c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a10      	ldr	r2, [pc, #64]	; (800a880 <dir_register+0x90>)
 800a83e:	589b      	ldr	r3, [r3, r2]
 800a840:	2220      	movs	r2, #32
 800a842:	2100      	movs	r1, #0
 800a844:	0018      	movs	r0, r3
 800a846:	f7fe fd82 	bl	800934e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a0c      	ldr	r2, [pc, #48]	; (800a880 <dir_register+0x90>)
 800a84e:	5898      	ldr	r0, [r3, r2]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a0c      	ldr	r2, [pc, #48]	; (800a884 <dir_register+0x94>)
 800a854:	589b      	ldr	r3, [r3, r2]
 800a856:	220b      	movs	r2, #11
 800a858:	0019      	movs	r1, r3
 800a85a:	f7fe fd5b 	bl	8009314 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	2380      	movs	r3, #128	; 0x80
 800a862:	015b      	lsls	r3, r3, #5
 800a864:	58d3      	ldr	r3, [r2, r3]
 800a866:	4a08      	ldr	r2, [pc, #32]	; (800a888 <dir_register+0x98>)
 800a868:	2101      	movs	r1, #1
 800a86a:	5499      	strb	r1, [r3, r2]
		}
	}

	return res;
 800a86c:	230f      	movs	r3, #15
 800a86e:	18fb      	adds	r3, r7, r3
 800a870:	781b      	ldrb	r3, [r3, #0]
}
 800a872:	0018      	movs	r0, r3
 800a874:	46bd      	mov	sp, r7
 800a876:	b004      	add	sp, #16
 800a878:	bdb0      	pop	{r4, r5, r7, pc}
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	00001010 	.word	0x00001010
 800a880:	00001014 	.word	0x00001014
 800a884:	00001018 	.word	0x00001018
 800a888:	00001004 	.word	0x00001004

0800a88c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	e002      	b.n	800a8a4 <create_name+0x18>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b2f      	cmp	r3, #47	; 0x2f
 800a8aa:	d0f8      	beq.n	800a89e <create_name+0x12>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a8b2:	d0f4      	beq.n	800a89e <create_name+0x12>
	sfn = dp->fn;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a73      	ldr	r2, [pc, #460]	; (800aa84 <create_name+0x1f8>)
 800a8b8:	589b      	ldr	r3, [r3, r2]
 800a8ba:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	220b      	movs	r2, #11
 800a8c0:	2120      	movs	r1, #32
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	f7fe fd43 	bl	800934e <mem_set>
	si = i = b = 0; ni = 8;
 800a8c8:	231f      	movs	r3, #31
 800a8ca:	18fb      	adds	r3, r7, r3
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	613b      	str	r3, [r7, #16]
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	2308      	movs	r3, #8
 800a8da:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	617a      	str	r2, [r7, #20]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	18d2      	adds	r2, r2, r3
 800a8e6:	211e      	movs	r1, #30
 800a8e8:	187b      	adds	r3, r7, r1
 800a8ea:	7812      	ldrb	r2, [r2, #0]
 800a8ec:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a8ee:	000a      	movs	r2, r1
 800a8f0:	18bb      	adds	r3, r7, r2
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	d800      	bhi.n	800a8fa <create_name+0x6e>
 800a8f8:	e077      	b.n	800a9ea <create_name+0x15e>
 800a8fa:	18bb      	adds	r3, r7, r2
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b2f      	cmp	r3, #47	; 0x2f
 800a900:	d100      	bne.n	800a904 <create_name+0x78>
 800a902:	e072      	b.n	800a9ea <create_name+0x15e>
 800a904:	18bb      	adds	r3, r7, r2
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	2b5c      	cmp	r3, #92	; 0x5c
 800a90a:	d100      	bne.n	800a90e <create_name+0x82>
 800a90c:	e06d      	b.n	800a9ea <create_name+0x15e>
		if (c == '.' || i >= ni) {
 800a90e:	18bb      	adds	r3, r7, r2
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b2e      	cmp	r3, #46	; 0x2e
 800a914:	d003      	beq.n	800a91e <create_name+0x92>
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d314      	bcc.n	800a948 <create_name+0xbc>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2b08      	cmp	r3, #8
 800a922:	d104      	bne.n	800a92e <create_name+0xa2>
 800a924:	231e      	movs	r3, #30
 800a926:	18fb      	adds	r3, r7, r3
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b2e      	cmp	r3, #46	; 0x2e
 800a92c:	d001      	beq.n	800a932 <create_name+0xa6>
 800a92e:	2306      	movs	r3, #6
 800a930:	e0a3      	b.n	800aa7a <create_name+0x1ee>
			i = 8; ni = 11;
 800a932:	2308      	movs	r3, #8
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	230b      	movs	r3, #11
 800a938:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800a93a:	221f      	movs	r2, #31
 800a93c:	18bb      	adds	r3, r7, r2
 800a93e:	18ba      	adds	r2, r7, r2
 800a940:	7812      	ldrb	r2, [r2, #0]
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	e04f      	b.n	800a9e8 <create_name+0x15c>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a948:	201e      	movs	r0, #30
 800a94a:	183b      	adds	r3, r7, r0
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	b25b      	sxtb	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	da0e      	bge.n	800a972 <create_name+0xe6>
			b |= 3;						/* Eliminate NT flag */
 800a954:	221f      	movs	r2, #31
 800a956:	18bb      	adds	r3, r7, r2
 800a958:	18ba      	adds	r2, r7, r2
 800a95a:	7812      	ldrb	r2, [r2, #0]
 800a95c:	2103      	movs	r1, #3
 800a95e:	430a      	orrs	r2, r1
 800a960:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a962:	183b      	adds	r3, r7, r0
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	3b80      	subs	r3, #128	; 0x80
 800a968:	001a      	movs	r2, r3
 800a96a:	183b      	adds	r3, r7, r0
 800a96c:	4946      	ldr	r1, [pc, #280]	; (800aa88 <create_name+0x1fc>)
 800a96e:	5c8a      	ldrb	r2, [r1, r2]
 800a970:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800a972:	231e      	movs	r3, #30
 800a974:	18fb      	adds	r3, r7, r3
 800a976:	781a      	ldrb	r2, [r3, #0]
 800a978:	4b44      	ldr	r3, [pc, #272]	; (800aa8c <create_name+0x200>)
 800a97a:	0011      	movs	r1, r2
 800a97c:	0018      	movs	r0, r3
 800a97e:	f7fe fd24 	bl	80093ca <chk_chr>
 800a982:	1e03      	subs	r3, r0, #0
 800a984:	d001      	beq.n	800a98a <create_name+0xfe>
				return FR_INVALID_NAME;
 800a986:	2306      	movs	r3, #6
 800a988:	e077      	b.n	800aa7a <create_name+0x1ee>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800a98a:	221e      	movs	r2, #30
 800a98c:	18bb      	adds	r3, r7, r2
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b40      	cmp	r3, #64	; 0x40
 800a992:	d90b      	bls.n	800a9ac <create_name+0x120>
 800a994:	18bb      	adds	r3, r7, r2
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b5a      	cmp	r3, #90	; 0x5a
 800a99a:	d807      	bhi.n	800a9ac <create_name+0x120>
				b |= 2;
 800a99c:	221f      	movs	r2, #31
 800a99e:	18bb      	adds	r3, r7, r2
 800a9a0:	18ba      	adds	r2, r7, r2
 800a9a2:	7812      	ldrb	r2, [r2, #0]
 800a9a4:	2102      	movs	r1, #2
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	e014      	b.n	800a9d6 <create_name+0x14a>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800a9ac:	201e      	movs	r0, #30
 800a9ae:	183b      	adds	r3, r7, r0
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b60      	cmp	r3, #96	; 0x60
 800a9b4:	d90f      	bls.n	800a9d6 <create_name+0x14a>
 800a9b6:	183b      	adds	r3, r7, r0
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b7a      	cmp	r3, #122	; 0x7a
 800a9bc:	d80b      	bhi.n	800a9d6 <create_name+0x14a>
					b |= 1; c -= 0x20;
 800a9be:	221f      	movs	r2, #31
 800a9c0:	18bb      	adds	r3, r7, r2
 800a9c2:	18ba      	adds	r2, r7, r2
 800a9c4:	7812      	ldrb	r2, [r2, #0]
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	701a      	strb	r2, [r3, #0]
 800a9cc:	183b      	adds	r3, r7, r0
 800a9ce:	183a      	adds	r2, r7, r0
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	3a20      	subs	r2, #32
 800a9d4:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	613a      	str	r2, [r7, #16]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	18d3      	adds	r3, r2, r3
 800a9e0:	221e      	movs	r2, #30
 800a9e2:	18ba      	adds	r2, r7, r2
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a9e8:	e778      	b.n	800a8dc <create_name+0x50>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	18d2      	adds	r2, r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a9f4:	231e      	movs	r3, #30
 800a9f6:	18fb      	adds	r3, r7, r3
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b20      	cmp	r3, #32
 800a9fc:	d801      	bhi.n	800aa02 <create_name+0x176>
 800a9fe:	2204      	movs	r2, #4
 800aa00:	e000      	b.n	800aa04 <create_name+0x178>
 800aa02:	2200      	movs	r2, #0
 800aa04:	231e      	movs	r3, #30
 800aa06:	18fb      	adds	r3, r7, r3
 800aa08:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <create_name+0x188>
 800aa10:	2306      	movs	r3, #6
 800aa12:	e032      	b.n	800aa7a <create_name+0x1ee>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2be5      	cmp	r3, #229	; 0xe5
 800aa1a:	d102      	bne.n	800aa22 <create_name+0x196>
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2205      	movs	r2, #5
 800aa20:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	d105      	bne.n	800aa34 <create_name+0x1a8>
 800aa28:	221f      	movs	r2, #31
 800aa2a:	18bb      	adds	r3, r7, r2
 800aa2c:	18ba      	adds	r2, r7, r2
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800aa34:	231f      	movs	r3, #31
 800aa36:	18fb      	adds	r3, r7, r3
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d106      	bne.n	800aa50 <create_name+0x1c4>
 800aa42:	221e      	movs	r2, #30
 800aa44:	18bb      	adds	r3, r7, r2
 800aa46:	18ba      	adds	r2, r7, r2
 800aa48:	7812      	ldrb	r2, [r2, #0]
 800aa4a:	2110      	movs	r1, #16
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800aa50:	231f      	movs	r3, #31
 800aa52:	18fb      	adds	r3, r7, r3
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	220c      	movs	r2, #12
 800aa58:	4013      	ands	r3, r2
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d106      	bne.n	800aa6c <create_name+0x1e0>
 800aa5e:	221e      	movs	r2, #30
 800aa60:	18bb      	adds	r3, r7, r2
 800aa62:	18ba      	adds	r2, r7, r2
 800aa64:	7812      	ldrb	r2, [r2, #0]
 800aa66:	2108      	movs	r1, #8
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	330b      	adds	r3, #11
 800aa70:	221e      	movs	r2, #30
 800aa72:	18ba      	adds	r2, r7, r2
 800aa74:	7812      	ldrb	r2, [r2, #0]
 800aa76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa78:	2300      	movs	r3, #0
#endif
}
 800aa7a:	0018      	movs	r0, r3
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	b008      	add	sp, #32
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	00001018 	.word	0x00001018
 800aa88:	08012844 	.word	0x08012844
 800aa8c:	080126a8 	.word	0x080126a8

0800aa90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa90:	b5b0      	push	{r4, r5, r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	2b2f      	cmp	r3, #47	; 0x2f
 800aaa0:	d003      	beq.n	800aaaa <follow_path+0x1a>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b5c      	cmp	r3, #92	; 0x5c
 800aaa8:	d102      	bne.n	800aab0 <follow_path+0x20>
		path++;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a39      	ldr	r2, [pc, #228]	; (800ab98 <follow_path+0x108>)
 800aab4:	2100      	movs	r1, #0
 800aab6:	5099      	str	r1, [r3, r2]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b1f      	cmp	r3, #31
 800aabe:	d80d      	bhi.n	800aadc <follow_path+0x4c>
		res = dir_sdi(dp, 0);
 800aac0:	230f      	movs	r3, #15
 800aac2:	18fc      	adds	r4, r7, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2100      	movs	r1, #0
 800aac8:	0018      	movs	r0, r3
 800aaca:	f7ff fb61 	bl	800a190 <dir_sdi>
 800aace:	0003      	movs	r3, r0
 800aad0:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a31      	ldr	r2, [pc, #196]	; (800ab9c <follow_path+0x10c>)
 800aad6:	2100      	movs	r1, #0
 800aad8:	5099      	str	r1, [r3, r2]
 800aada:	e055      	b.n	800ab88 <follow_path+0xf8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aadc:	250f      	movs	r5, #15
 800aade:	197c      	adds	r4, r7, r5
 800aae0:	003a      	movs	r2, r7
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	0011      	movs	r1, r2
 800aae6:	0018      	movs	r0, r3
 800aae8:	f7ff fed0 	bl	800a88c <create_name>
 800aaec:	0003      	movs	r3, r0
 800aaee:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800aaf0:	197b      	adds	r3, r7, r5
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d142      	bne.n	800ab7e <follow_path+0xee>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800aaf8:	197c      	adds	r4, r7, r5
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	0018      	movs	r0, r3
 800aafe:	f7ff fe0f 	bl	800a720 <dir_find>
 800ab02:	0003      	movs	r3, r0
 800ab04:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a25      	ldr	r2, [pc, #148]	; (800aba0 <follow_path+0x110>)
 800ab0a:	589a      	ldr	r2, [r3, r2]
 800ab0c:	210e      	movs	r1, #14
 800ab0e:	187b      	adds	r3, r7, r1
 800ab10:	7ad2      	ldrb	r2, [r2, #11]
 800ab12:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800ab14:	197b      	adds	r3, r7, r5
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00c      	beq.n	800ab36 <follow_path+0xa6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab1c:	197b      	adds	r3, r7, r5
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d12e      	bne.n	800ab82 <follow_path+0xf2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ab24:	187b      	adds	r3, r7, r1
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	2204      	movs	r2, #4
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	d129      	bne.n	800ab82 <follow_path+0xf2>
 800ab2e:	197b      	adds	r3, r7, r5
 800ab30:	2205      	movs	r2, #5
 800ab32:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800ab34:	e025      	b.n	800ab82 <follow_path+0xf2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab36:	230e      	movs	r3, #14
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	4013      	ands	r3, r2
 800ab40:	d121      	bne.n	800ab86 <follow_path+0xf6>
			dir = dp->dir;						/* Follow the sub-directory */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a15      	ldr	r2, [pc, #84]	; (800ab9c <follow_path+0x10c>)
 800ab46:	589b      	ldr	r3, [r3, r2]
 800ab48:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	330b      	adds	r3, #11
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	001a      	movs	r2, r3
 800ab52:	2310      	movs	r3, #16
 800ab54:	4013      	ands	r3, r2
 800ab56:	d104      	bne.n	800ab62 <follow_path+0xd2>
				res = FR_NO_PATH; break;
 800ab58:	230f      	movs	r3, #15
 800ab5a:	18fb      	adds	r3, r7, r3
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	e012      	b.n	800ab88 <follow_path+0xf8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	2380      	movs	r3, #128	; 0x80
 800ab66:	015b      	lsls	r3, r3, #5
 800ab68:	58d3      	ldr	r3, [r2, r3]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	0011      	movs	r1, r2
 800ab6e:	0018      	movs	r0, r3
 800ab70:	f7ff fd84 	bl	800a67c <ld_clust>
 800ab74:	0002      	movs	r2, r0
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4907      	ldr	r1, [pc, #28]	; (800ab98 <follow_path+0x108>)
 800ab7a:	505a      	str	r2, [r3, r1]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab7c:	e7ae      	b.n	800aadc <follow_path+0x4c>
			if (res != FR_OK) break;
 800ab7e:	46c0      	nop			; (mov r8, r8)
 800ab80:	e002      	b.n	800ab88 <follow_path+0xf8>
				break;
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	e000      	b.n	800ab88 <follow_path+0xf8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab86:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800ab88:	230f      	movs	r3, #15
 800ab8a:	18fb      	adds	r3, r7, r3
 800ab8c:	781b      	ldrb	r3, [r3, #0]
}
 800ab8e:	0018      	movs	r0, r3
 800ab90:	46bd      	mov	sp, r7
 800ab92:	b004      	add	sp, #16
 800ab94:	bdb0      	pop	{r4, r5, r7, pc}
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	00001008 	.word	0x00001008
 800ab9c:	00001014 	.word	0x00001014
 800aba0:	00001018 	.word	0x00001018

0800aba4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800abac:	2301      	movs	r3, #1
 800abae:	425b      	negs	r3, r3
 800abb0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d031      	beq.n	800ac1e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	e002      	b.n	800abc8 <get_ldnumber+0x24>
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	3301      	adds	r3, #1
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b20      	cmp	r3, #32
 800abce:	d903      	bls.n	800abd8 <get_ldnumber+0x34>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b3a      	cmp	r3, #58	; 0x3a
 800abd6:	d1f4      	bne.n	800abc2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b3a      	cmp	r3, #58	; 0x3a
 800abde:	d11c      	bne.n	800ac1a <get_ldnumber+0x76>
			tp = *path;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	60fa      	str	r2, [r7, #12]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	3b30      	subs	r3, #48	; 0x30
 800abf0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b09      	cmp	r3, #9
 800abf6:	d80e      	bhi.n	800ac16 <get_ldnumber+0x72>
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d10a      	bne.n	800ac16 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d107      	bne.n	800ac16 <get_ldnumber+0x72>
					vol = (int)i;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	e002      	b.n	800ac20 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac1e:	693b      	ldr	r3, [r7, #16]
}
 800ac20:	0018      	movs	r0, r3
 800ac22:	46bd      	mov	sp, r7
 800ac24:	b006      	add	sp, #24
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a30      	ldr	r2, [pc, #192]	; (800acf8 <check_fs+0xd0>)
 800ac36:	2100      	movs	r1, #0
 800ac38:	5499      	strb	r1, [r3, r2]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	492f      	ldr	r1, [pc, #188]	; (800acfc <check_fs+0xd4>)
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4252      	negs	r2, r2
 800ac42:	505a      	str	r2, [r3, r1]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	0011      	movs	r1, r2
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f7fe fd9c 	bl	8009788 <move_window>
 800ac50:	1e03      	subs	r3, r0, #0
 800ac52:	d001      	beq.n	800ac58 <check_fs+0x30>
		return 3;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e04b      	b.n	800acf0 <check_fs+0xc8>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	33ff      	adds	r3, #255	; 0xff
 800ac5c:	33ff      	adds	r3, #255	; 0xff
 800ac5e:	3301      	adds	r3, #1
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	b21a      	sxth	r2, r3
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	23ff      	movs	r3, #255	; 0xff
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	5ccb      	ldrb	r3, [r1, r3]
 800ac6e:	b21b      	sxth	r3, r3
 800ac70:	4313      	orrs	r3, r2
 800ac72:	b21b      	sxth	r3, r3
 800ac74:	4a22      	ldr	r2, [pc, #136]	; (800ad00 <check_fs+0xd8>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d001      	beq.n	800ac7e <check_fs+0x56>
		return 2;
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	e038      	b.n	800acf0 <check_fs+0xc8>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3336      	adds	r3, #54	; 0x36
 800ac82:	3303      	adds	r3, #3
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	061a      	lsls	r2, r3, #24
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3336      	adds	r3, #54	; 0x36
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	041b      	lsls	r3, r3, #16
 800ac92:	4313      	orrs	r3, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	3236      	adds	r2, #54	; 0x36
 800ac98:	3201      	adds	r2, #1
 800ac9a:	7812      	ldrb	r2, [r2, #0]
 800ac9c:	0212      	lsls	r2, r2, #8
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	2136      	movs	r1, #54	; 0x36
 800aca4:	5c52      	ldrb	r2, [r2, r1]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	021b      	lsls	r3, r3, #8
 800acaa:	0a1b      	lsrs	r3, r3, #8
 800acac:	4a15      	ldr	r2, [pc, #84]	; (800ad04 <check_fs+0xdc>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d101      	bne.n	800acb6 <check_fs+0x8e>
		return 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	e01c      	b.n	800acf0 <check_fs+0xc8>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	3352      	adds	r3, #82	; 0x52
 800acba:	3303      	adds	r3, #3
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	061a      	lsls	r2, r3, #24
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3352      	adds	r3, #82	; 0x52
 800acc4:	3302      	adds	r3, #2
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	041b      	lsls	r3, r3, #16
 800acca:	4313      	orrs	r3, r2
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	3252      	adds	r2, #82	; 0x52
 800acd0:	3201      	adds	r2, #1
 800acd2:	7812      	ldrb	r2, [r2, #0]
 800acd4:	0212      	lsls	r2, r2, #8
 800acd6:	4313      	orrs	r3, r2
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	2152      	movs	r1, #82	; 0x52
 800acdc:	5c52      	ldrb	r2, [r2, r1]
 800acde:	4313      	orrs	r3, r2
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	0a1b      	lsrs	r3, r3, #8
 800ace4:	4a07      	ldr	r2, [pc, #28]	; (800ad04 <check_fs+0xdc>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d101      	bne.n	800acee <check_fs+0xc6>
		return 0;
 800acea:	2300      	movs	r3, #0
 800acec:	e000      	b.n	800acf0 <check_fs+0xc8>

	return 1;
 800acee:	2301      	movs	r3, #1
}
 800acf0:	0018      	movs	r0, r3
 800acf2:	46bd      	mov	sp, r7
 800acf4:	b002      	add	sp, #8
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	00001004 	.word	0x00001004
 800acfc:	0000102c 	.word	0x0000102c
 800ad00:	ffffaa55 	.word	0xffffaa55
 800ad04:	00544146 	.word	0x00544146

0800ad08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ad08:	b5b0      	push	{r4, r5, r7, lr}
 800ad0a:	b096      	sub	sp, #88	; 0x58
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	1dfb      	adds	r3, r7, #7
 800ad14:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	0018      	movs	r0, r3
 800ad20:	f7ff ff40 	bl	800aba4 <get_ldnumber>
 800ad24:	0003      	movs	r3, r0
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da01      	bge.n	800ad32 <find_volume+0x2a>
 800ad2e:	230b      	movs	r3, #11
 800ad30:	e31a      	b.n	800b368 <find_volume+0x660>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ad32:	4bcf      	ldr	r3, [pc, #828]	; (800b070 <find_volume+0x368>)
 800ad34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad36:	0092      	lsls	r2, r2, #2
 800ad38:	58d3      	ldr	r3, [r2, r3]
 800ad3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <find_volume+0x3e>
 800ad42:	230c      	movs	r3, #12
 800ad44:	e310      	b.n	800b368 <find_volume+0x660>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad4a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800ad4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad4e:	2380      	movs	r3, #128	; 0x80
 800ad50:	015b      	lsls	r3, r3, #5
 800ad52:	5cd3      	ldrb	r3, [r2, r3]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d01c      	beq.n	800ad92 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 800ad58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5a:	4ac6      	ldr	r2, [pc, #792]	; (800b074 <find_volume+0x36c>)
 800ad5c:	5c9b      	ldrb	r3, [r3, r2]
 800ad5e:	2537      	movs	r5, #55	; 0x37
 800ad60:	197c      	adds	r4, r7, r5
 800ad62:	0018      	movs	r0, r3
 800ad64:	f7fe fa0c 	bl	8009180 <disk_status>
 800ad68:	0003      	movs	r3, r0
 800ad6a:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ad6c:	0029      	movs	r1, r5
 800ad6e:	187b      	adds	r3, r7, r1
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2201      	movs	r2, #1
 800ad74:	4013      	ands	r3, r2
 800ad76:	d10c      	bne.n	800ad92 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800ad78:	1dfb      	adds	r3, r7, #7
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d006      	beq.n	800ad8e <find_volume+0x86>
 800ad80:	187b      	adds	r3, r7, r1
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2204      	movs	r2, #4
 800ad86:	4013      	ands	r3, r2
 800ad88:	d001      	beq.n	800ad8e <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 800ad8a:	230a      	movs	r3, #10
 800ad8c:	e2ec      	b.n	800b368 <find_volume+0x660>
			return FR_OK;				/* The file system object is valid */
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e2ea      	b.n	800b368 <find_volume+0x660>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad94:	2380      	movs	r3, #128	; 0x80
 800ad96:	015b      	lsls	r3, r3, #5
 800ad98:	2100      	movs	r1, #0
 800ad9a:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9e:	b2d9      	uxtb	r1, r3
 800ada0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada2:	4ab4      	ldr	r2, [pc, #720]	; (800b074 <find_volume+0x36c>)
 800ada4:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	4ab2      	ldr	r2, [pc, #712]	; (800b074 <find_volume+0x36c>)
 800adaa:	5c9b      	ldrb	r3, [r3, r2]
 800adac:	2537      	movs	r5, #55	; 0x37
 800adae:	197c      	adds	r4, r7, r5
 800adb0:	0018      	movs	r0, r3
 800adb2:	f7fe fa07 	bl	80091c4 <disk_initialize>
 800adb6:	0003      	movs	r3, r0
 800adb8:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800adba:	197b      	adds	r3, r7, r5
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2201      	movs	r2, #1
 800adc0:	4013      	ands	r3, r2
 800adc2:	d001      	beq.n	800adc8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800adc4:	2303      	movs	r3, #3
 800adc6:	e2cf      	b.n	800b368 <find_volume+0x660>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800adc8:	1dfb      	adds	r3, r7, #7
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d007      	beq.n	800ade0 <find_volume+0xd8>
 800add0:	2337      	movs	r3, #55	; 0x37
 800add2:	18fb      	adds	r3, r7, r3
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2204      	movs	r2, #4
 800add8:	4013      	ands	r3, r2
 800adda:	d001      	beq.n	800ade0 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 800addc:	230a      	movs	r3, #10
 800adde:	e2c3      	b.n	800b368 <find_volume+0x660>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	4aa4      	ldr	r2, [pc, #656]	; (800b074 <find_volume+0x36c>)
 800ade4:	5c98      	ldrb	r0, [r3, r2]
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	4aa3      	ldr	r2, [pc, #652]	; (800b078 <find_volume+0x370>)
 800adea:	4694      	mov	ip, r2
 800adec:	4463      	add	r3, ip
 800adee:	001a      	movs	r2, r3
 800adf0:	2102      	movs	r1, #2
 800adf2:	f7fe fa67 	bl	80092c4 <disk_ioctl>
 800adf6:	1e03      	subs	r3, r0, #0
 800adf8:	d10d      	bne.n	800ae16 <find_volume+0x10e>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	4a9e      	ldr	r2, [pc, #632]	; (800b078 <find_volume+0x370>)
 800adfe:	5a9a      	ldrh	r2, [r3, r2]
 800ae00:	2380      	movs	r3, #128	; 0x80
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d306      	bcc.n	800ae16 <find_volume+0x10e>
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	4a9b      	ldr	r2, [pc, #620]	; (800b078 <find_volume+0x370>)
 800ae0c:	5a9a      	ldrh	r2, [r3, r2]
 800ae0e:	2380      	movs	r3, #128	; 0x80
 800ae10:	015b      	lsls	r3, r3, #5
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d901      	bls.n	800ae1a <find_volume+0x112>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e2a6      	b.n	800b368 <find_volume+0x660>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800ae1e:	2557      	movs	r5, #87	; 0x57
 800ae20:	197c      	adds	r4, r7, r5
 800ae22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	0011      	movs	r1, r2
 800ae28:	0018      	movs	r0, r3
 800ae2a:	f7ff fefd 	bl	800ac28 <check_fs>
 800ae2e:	0003      	movs	r3, r0
 800ae30:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800ae32:	197b      	adds	r3, r7, r5
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d155      	bne.n	800aee6 <find_volume+0x1de>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae3e:	e027      	b.n	800ae90 <find_volume+0x188>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800ae40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae44:	011b      	lsls	r3, r3, #4
 800ae46:	33bf      	adds	r3, #191	; 0xbf
 800ae48:	33ff      	adds	r3, #255	; 0xff
 800ae4a:	18d3      	adds	r3, r2, r3
 800ae4c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	3304      	adds	r3, #4
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d012      	beq.n	800ae7e <find_volume+0x176>
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	330b      	adds	r3, #11
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	061a      	lsls	r2, r3, #24
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	330a      	adds	r3, #10
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	041b      	lsls	r3, r3, #16
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae6c:	3209      	adds	r2, #9
 800ae6e:	7812      	ldrb	r2, [r2, #0]
 800ae70:	0212      	lsls	r2, r2, #8
 800ae72:	4313      	orrs	r3, r2
 800ae74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae76:	3208      	adds	r2, #8
 800ae78:	7812      	ldrb	r2, [r2, #0]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	e000      	b.n	800ae80 <find_volume+0x178>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	2214      	movs	r2, #20
 800ae82:	18ba      	adds	r2, r7, r2
 800ae84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae86:	0089      	lsls	r1, r1, #2
 800ae88:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ae8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	643b      	str	r3, [r7, #64]	; 0x40
 800ae90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d9d4      	bls.n	800ae40 <find_volume+0x138>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800ae96:	2300      	movs	r3, #0
 800ae98:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ae9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <find_volume+0x19e>
 800aea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea2:	3b01      	subs	r3, #1
 800aea4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800aea6:	2314      	movs	r3, #20
 800aea8:	18fb      	adds	r3, r7, r3
 800aeaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aeac:	0092      	lsls	r2, r2, #2
 800aeae:	58d3      	ldr	r3, [r2, r3]
 800aeb0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800aeb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <find_volume+0x1c2>
 800aeb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebc:	0011      	movs	r1, r2
 800aebe:	0018      	movs	r0, r3
 800aec0:	f7ff feb2 	bl	800ac28 <check_fs>
 800aec4:	0003      	movs	r3, r0
 800aec6:	001a      	movs	r2, r3
 800aec8:	e000      	b.n	800aecc <find_volume+0x1c4>
 800aeca:	2202      	movs	r2, #2
 800aecc:	2157      	movs	r1, #87	; 0x57
 800aece:	187b      	adds	r3, r7, r1
 800aed0:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800aed2:	187b      	adds	r3, r7, r1
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <find_volume+0x1de>
 800aeda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aedc:	3301      	adds	r3, #1
 800aede:	643b      	str	r3, [r7, #64]	; 0x40
 800aee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d9df      	bls.n	800aea6 <find_volume+0x19e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800aee6:	2357      	movs	r3, #87	; 0x57
 800aee8:	18fb      	adds	r3, r7, r3
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d101      	bne.n	800aef4 <find_volume+0x1ec>
 800aef0:	2301      	movs	r3, #1
 800aef2:	e239      	b.n	800b368 <find_volume+0x660>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800aef4:	2357      	movs	r3, #87	; 0x57
 800aef6:	18fb      	adds	r3, r7, r3
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <find_volume+0x1fa>
 800aefe:	230d      	movs	r3, #13
 800af00:	e232      	b.n	800b368 <find_volume+0x660>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	7b1b      	ldrb	r3, [r3, #12]
 800af06:	021b      	lsls	r3, r3, #8
 800af08:	b21a      	sxth	r2, r3
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	7adb      	ldrb	r3, [r3, #11]
 800af0e:	b21b      	sxth	r3, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	b21a      	sxth	r2, r3
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	4958      	ldr	r1, [pc, #352]	; (800b078 <find_volume+0x370>)
 800af18:	5a5b      	ldrh	r3, [r3, r1]
 800af1a:	b21b      	sxth	r3, r3
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d001      	beq.n	800af24 <find_volume+0x21c>
		return FR_NO_FILESYSTEM;
 800af20:	230d      	movs	r3, #13
 800af22:	e221      	b.n	800b368 <find_volume+0x660>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	7ddb      	ldrb	r3, [r3, #23]
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	b21a      	sxth	r2, r3
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	7d9b      	ldrb	r3, [r3, #22]
 800af30:	b21b      	sxth	r3, r3
 800af32:	4313      	orrs	r3, r2
 800af34:	b21b      	sxth	r3, r3
 800af36:	b29b      	uxth	r3, r3
 800af38:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800af3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d112      	bne.n	800af66 <find_volume+0x25e>
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	2227      	movs	r2, #39	; 0x27
 800af44:	5c9b      	ldrb	r3, [r3, r2]
 800af46:	061a      	lsls	r2, r3, #24
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	2126      	movs	r1, #38	; 0x26
 800af4c:	5c5b      	ldrb	r3, [r3, r1]
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	4313      	orrs	r3, r2
 800af52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af54:	2125      	movs	r1, #37	; 0x25
 800af56:	5c52      	ldrb	r2, [r2, r1]
 800af58:	0212      	lsls	r2, r2, #8
 800af5a:	4313      	orrs	r3, r2
 800af5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af5e:	2124      	movs	r1, #36	; 0x24
 800af60:	5c52      	ldrb	r2, [r2, r1]
 800af62:	4313      	orrs	r3, r2
 800af64:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	4944      	ldr	r1, [pc, #272]	; (800b07c <find_volume+0x374>)
 800af6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af6c:	505a      	str	r2, [r3, r1]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	7c19      	ldrb	r1, [r3, #16]
 800af72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af74:	4a42      	ldr	r2, [pc, #264]	; (800b080 <find_volume+0x378>)
 800af76:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800af78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7a:	4a41      	ldr	r2, [pc, #260]	; (800b080 <find_volume+0x378>)
 800af7c:	5c9b      	ldrb	r3, [r3, r2]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d006      	beq.n	800af90 <find_volume+0x288>
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	4a3e      	ldr	r2, [pc, #248]	; (800b080 <find_volume+0x378>)
 800af86:	5c9b      	ldrb	r3, [r3, r2]
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d001      	beq.n	800af90 <find_volume+0x288>
		return FR_NO_FILESYSTEM;
 800af8c:	230d      	movs	r3, #13
 800af8e:	e1eb      	b.n	800b368 <find_volume+0x660>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	4a3b      	ldr	r2, [pc, #236]	; (800b080 <find_volume+0x378>)
 800af94:	5c9b      	ldrb	r3, [r3, r2]
 800af96:	001a      	movs	r2, r3
 800af98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9a:	4353      	muls	r3, r2
 800af9c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	7b59      	ldrb	r1, [r3, #13]
 800afa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa4:	4a37      	ldr	r2, [pc, #220]	; (800b084 <find_volume+0x37c>)
 800afa6:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afaa:	4a36      	ldr	r2, [pc, #216]	; (800b084 <find_volume+0x37c>)
 800afac:	5c9b      	ldrb	r3, [r3, r2]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <find_volume+0x2be>
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	4a33      	ldr	r2, [pc, #204]	; (800b084 <find_volume+0x37c>)
 800afb6:	5c9b      	ldrb	r3, [r3, r2]
 800afb8:	0019      	movs	r1, r3
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	4a31      	ldr	r2, [pc, #196]	; (800b084 <find_volume+0x37c>)
 800afbe:	5c9b      	ldrb	r3, [r3, r2]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	400b      	ands	r3, r1
 800afc4:	d001      	beq.n	800afca <find_volume+0x2c2>
		return FR_NO_FILESYSTEM;
 800afc6:	230d      	movs	r3, #13
 800afc8:	e1ce      	b.n	800b368 <find_volume+0x660>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	7c9b      	ldrb	r3, [r3, #18]
 800afce:	021b      	lsls	r3, r3, #8
 800afd0:	b21a      	sxth	r2, r3
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	7c5b      	ldrb	r3, [r3, #17]
 800afd6:	b21b      	sxth	r3, r3
 800afd8:	4313      	orrs	r3, r2
 800afda:	b21b      	sxth	r3, r3
 800afdc:	b299      	uxth	r1, r3
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	4a29      	ldr	r2, [pc, #164]	; (800b088 <find_volume+0x380>)
 800afe2:	5299      	strh	r1, [r3, r2]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe6:	4a28      	ldr	r2, [pc, #160]	; (800b088 <find_volume+0x380>)
 800afe8:	5a9a      	ldrh	r2, [r3, r2]
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	4922      	ldr	r1, [pc, #136]	; (800b078 <find_volume+0x370>)
 800afee:	5a5b      	ldrh	r3, [r3, r1]
 800aff0:	095b      	lsrs	r3, r3, #5
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	0019      	movs	r1, r3
 800aff6:	0010      	movs	r0, r2
 800aff8:	f7f5 f926 	bl	8000248 <__aeabi_uidivmod>
 800affc:	000b      	movs	r3, r1
 800affe:	b29b      	uxth	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <find_volume+0x300>
		return FR_NO_FILESYSTEM;
 800b004:	230d      	movs	r3, #13
 800b006:	e1af      	b.n	800b368 <find_volume+0x660>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	7d1b      	ldrb	r3, [r3, #20]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	b21a      	sxth	r2, r3
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	7cdb      	ldrb	r3, [r3, #19]
 800b014:	b21b      	sxth	r3, r3
 800b016:	4313      	orrs	r3, r2
 800b018:	b21b      	sxth	r3, r3
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b020:	2b00      	cmp	r3, #0
 800b022:	d112      	bne.n	800b04a <find_volume+0x342>
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	2223      	movs	r2, #35	; 0x23
 800b028:	5c9b      	ldrb	r3, [r3, r2]
 800b02a:	061a      	lsls	r2, r3, #24
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	2122      	movs	r1, #34	; 0x22
 800b030:	5c5b      	ldrb	r3, [r3, r1]
 800b032:	041b      	lsls	r3, r3, #16
 800b034:	4313      	orrs	r3, r2
 800b036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b038:	2121      	movs	r1, #33	; 0x21
 800b03a:	5c52      	ldrb	r2, [r2, r1]
 800b03c:	0212      	lsls	r2, r2, #8
 800b03e:	4313      	orrs	r3, r2
 800b040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b042:	2120      	movs	r1, #32
 800b044:	5c52      	ldrb	r2, [r2, r1]
 800b046:	4313      	orrs	r3, r2
 800b048:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	7bdb      	ldrb	r3, [r3, #15]
 800b04e:	021b      	lsls	r3, r3, #8
 800b050:	b21a      	sxth	r2, r3
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	7b9b      	ldrb	r3, [r3, #14]
 800b056:	b21b      	sxth	r3, r3
 800b058:	4313      	orrs	r3, r2
 800b05a:	b21a      	sxth	r2, r3
 800b05c:	212e      	movs	r1, #46	; 0x2e
 800b05e:	187b      	adds	r3, r7, r1
 800b060:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b062:	187b      	adds	r3, r7, r1
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d110      	bne.n	800b08c <find_volume+0x384>
 800b06a:	230d      	movs	r3, #13
 800b06c:	e17c      	b.n	800b368 <find_volume+0x660>
 800b06e:	46c0      	nop			; (mov r8, r8)
 800b070:	20002700 	.word	0x20002700
 800b074:	00001001 	.word	0x00001001
 800b078:	0000100a 	.word	0x0000100a
 800b07c:	00001018 	.word	0x00001018
 800b080:	00001003 	.word	0x00001003
 800b084:	00001002 	.word	0x00001002
 800b088:	00001008 	.word	0x00001008

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b08c:	232e      	movs	r3, #46	; 0x2e
 800b08e:	18fb      	adds	r3, r7, r3
 800b090:	881a      	ldrh	r2, [r3, #0]
 800b092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b094:	18d4      	adds	r4, r2, r3
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	4ab5      	ldr	r2, [pc, #724]	; (800b370 <find_volume+0x668>)
 800b09a:	5a9a      	ldrh	r2, [r3, r2]
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	49b5      	ldr	r1, [pc, #724]	; (800b374 <find_volume+0x66c>)
 800b0a0:	5a5b      	ldrh	r3, [r3, r1]
 800b0a2:	095b      	lsrs	r3, r3, #5
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	0019      	movs	r1, r3
 800b0a8:	0010      	movs	r0, r2
 800b0aa:	f7f5 f847 	bl	800013c <__udivsi3>
 800b0ae:	0003      	movs	r3, r0
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	18e3      	adds	r3, r4, r3
 800b0b4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d201      	bcs.n	800b0c2 <find_volume+0x3ba>
 800b0be:	230d      	movs	r3, #13
 800b0c0:	e152      	b.n	800b368 <find_volume+0x660>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b0c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	1ad2      	subs	r2, r2, r3
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	49ab      	ldr	r1, [pc, #684]	; (800b378 <find_volume+0x670>)
 800b0cc:	5c5b      	ldrb	r3, [r3, r1]
 800b0ce:	0019      	movs	r1, r3
 800b0d0:	0010      	movs	r0, r2
 800b0d2:	f7f5 f833 	bl	800013c <__udivsi3>
 800b0d6:	0003      	movs	r3, r0
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <find_volume+0x3dc>
 800b0e0:	230d      	movs	r3, #13
 800b0e2:	e141      	b.n	800b368 <find_volume+0x660>
	fmt = FS_FAT12;
 800b0e4:	2157      	movs	r1, #87	; 0x57
 800b0e6:	187b      	adds	r3, r7, r1
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	4aa3      	ldr	r2, [pc, #652]	; (800b37c <find_volume+0x674>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d902      	bls.n	800b0fa <find_volume+0x3f2>
 800b0f4:	187b      	adds	r3, r7, r1
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	4aa0      	ldr	r2, [pc, #640]	; (800b380 <find_volume+0x678>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d903      	bls.n	800b10a <find_volume+0x402>
 800b102:	2357      	movs	r3, #87	; 0x57
 800b104:	18fb      	adds	r3, r7, r3
 800b106:	2203      	movs	r2, #3
 800b108:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	1c9a      	adds	r2, r3, #2
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	499c      	ldr	r1, [pc, #624]	; (800b384 <find_volume+0x67c>)
 800b112:	505a      	str	r2, [r3, r1]
	fs->volbase = bsect;								/* Volume start sector */
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	499c      	ldr	r1, [pc, #624]	; (800b388 <find_volume+0x680>)
 800b118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b11a:	505a      	str	r2, [r3, r1]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b11c:	232e      	movs	r3, #46	; 0x2e
 800b11e:	18fb      	adds	r3, r7, r3
 800b120:	881a      	ldrh	r2, [r3, #0]
 800b122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b124:	18d1      	adds	r1, r2, r3
 800b126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b128:	2381      	movs	r3, #129	; 0x81
 800b12a:	015b      	lsls	r3, r3, #5
 800b12c:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 800b12e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	18d2      	adds	r2, r2, r3
 800b134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b136:	4995      	ldr	r1, [pc, #596]	; (800b38c <find_volume+0x684>)
 800b138:	505a      	str	r2, [r3, r1]
	if (fmt == FS_FAT32) {
 800b13a:	2357      	movs	r3, #87	; 0x57
 800b13c:	18fb      	adds	r3, r7, r3
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b03      	cmp	r3, #3
 800b142:	d121      	bne.n	800b188 <find_volume+0x480>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	4a8a      	ldr	r2, [pc, #552]	; (800b370 <find_volume+0x668>)
 800b148:	5a9b      	ldrh	r3, [r3, r2]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <find_volume+0x44a>
 800b14e:	230d      	movs	r3, #13
 800b150:	e10a      	b.n	800b368 <find_volume+0x660>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b154:	222f      	movs	r2, #47	; 0x2f
 800b156:	5c9b      	ldrb	r3, [r3, r2]
 800b158:	061a      	lsls	r2, r3, #24
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	212e      	movs	r1, #46	; 0x2e
 800b15e:	5c5b      	ldrb	r3, [r3, r1]
 800b160:	041b      	lsls	r3, r3, #16
 800b162:	4313      	orrs	r3, r2
 800b164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b166:	212d      	movs	r1, #45	; 0x2d
 800b168:	5c52      	ldrb	r2, [r2, r1]
 800b16a:	0212      	lsls	r2, r2, #8
 800b16c:	4313      	orrs	r3, r2
 800b16e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b170:	212c      	movs	r1, #44	; 0x2c
 800b172:	5c52      	ldrb	r2, [r2, r1]
 800b174:	431a      	orrs	r2, r3
 800b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b178:	4985      	ldr	r1, [pc, #532]	; (800b390 <find_volume+0x688>)
 800b17a:	505a      	str	r2, [r3, r1]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	4a81      	ldr	r2, [pc, #516]	; (800b384 <find_volume+0x67c>)
 800b180:	589b      	ldr	r3, [r3, r2]
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	647b      	str	r3, [r7, #68]	; 0x44
 800b186:	e027      	b.n	800b1d8 <find_volume+0x4d0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	4a79      	ldr	r2, [pc, #484]	; (800b370 <find_volume+0x668>)
 800b18c:	5a9b      	ldrh	r3, [r3, r2]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <find_volume+0x48e>
 800b192:	230d      	movs	r3, #13
 800b194:	e0e8      	b.n	800b368 <find_volume+0x660>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b198:	2381      	movs	r3, #129	; 0x81
 800b19a:	015b      	lsls	r3, r3, #5
 800b19c:	58d2      	ldr	r2, [r2, r3]
 800b19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a0:	18d2      	adds	r2, r2, r3
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	497a      	ldr	r1, [pc, #488]	; (800b390 <find_volume+0x688>)
 800b1a6:	505a      	str	r2, [r3, r1]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1a8:	2357      	movs	r3, #87	; 0x57
 800b1aa:	18fb      	adds	r3, r7, r3
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d104      	bne.n	800b1bc <find_volume+0x4b4>
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	4a73      	ldr	r2, [pc, #460]	; (800b384 <find_volume+0x67c>)
 800b1b6:	589b      	ldr	r3, [r3, r2]
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	e00c      	b.n	800b1d6 <find_volume+0x4ce>
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	4a71      	ldr	r2, [pc, #452]	; (800b384 <find_volume+0x67c>)
 800b1c0:	589a      	ldr	r2, [r3, r2]
 800b1c2:	0013      	movs	r3, r2
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	189b      	adds	r3, r3, r2
 800b1c8:	085a      	lsrs	r2, r3, #1
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	496d      	ldr	r1, [pc, #436]	; (800b384 <find_volume+0x67c>)
 800b1ce:	585b      	ldr	r3, [r3, r1]
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	400b      	ands	r3, r1
 800b1d4:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b1d6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	4a6e      	ldr	r2, [pc, #440]	; (800b394 <find_volume+0x68c>)
 800b1dc:	589c      	ldr	r4, [r3, r2]
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	4a64      	ldr	r2, [pc, #400]	; (800b374 <find_volume+0x66c>)
 800b1e2:	5a9b      	ldrh	r3, [r3, r2]
 800b1e4:	001a      	movs	r2, r3
 800b1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1e8:	18d3      	adds	r3, r2, r3
 800b1ea:	1e5a      	subs	r2, r3, #1
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	4961      	ldr	r1, [pc, #388]	; (800b374 <find_volume+0x66c>)
 800b1f0:	5a5b      	ldrh	r3, [r3, r1]
 800b1f2:	0019      	movs	r1, r3
 800b1f4:	0010      	movs	r0, r2
 800b1f6:	f7f4 ffa1 	bl	800013c <__udivsi3>
 800b1fa:	0003      	movs	r3, r0
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	d201      	bcs.n	800b204 <find_volume+0x4fc>
		return FR_NO_FILESYSTEM;
 800b200:	230d      	movs	r3, #13
 800b202:	e0b1      	b.n	800b368 <find_volume+0x660>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	4964      	ldr	r1, [pc, #400]	; (800b398 <find_volume+0x690>)
 800b208:	2201      	movs	r2, #1
 800b20a:	4252      	negs	r2, r2
 800b20c:	505a      	str	r2, [r3, r1]
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	4a61      	ldr	r2, [pc, #388]	; (800b398 <find_volume+0x690>)
 800b212:	589a      	ldr	r2, [r3, r2]
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	4961      	ldr	r1, [pc, #388]	; (800b39c <find_volume+0x694>)
 800b218:	505a      	str	r2, [r3, r1]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	4a60      	ldr	r2, [pc, #384]	; (800b3a0 <find_volume+0x698>)
 800b21e:	2180      	movs	r1, #128	; 0x80
 800b220:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b222:	2357      	movs	r3, #87	; 0x57
 800b224:	18fb      	adds	r3, r7, r3
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d000      	beq.n	800b22e <find_volume+0x526>
 800b22c:	e085      	b.n	800b33a <find_volume+0x632>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	2231      	movs	r2, #49	; 0x31
 800b232:	5c9b      	ldrb	r3, [r3, r2]
 800b234:	021b      	lsls	r3, r3, #8
 800b236:	b21a      	sxth	r2, r3
 800b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23a:	2130      	movs	r1, #48	; 0x30
 800b23c:	5c5b      	ldrb	r3, [r3, r1]
 800b23e:	b21b      	sxth	r3, r3
 800b240:	4313      	orrs	r3, r2
 800b242:	b21b      	sxth	r3, r3
 800b244:	2b01      	cmp	r3, #1
 800b246:	d000      	beq.n	800b24a <find_volume+0x542>
 800b248:	e077      	b.n	800b33a <find_volume+0x632>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b24a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	0011      	movs	r1, r2
 800b252:	0018      	movs	r0, r3
 800b254:	f7fe fa98 	bl	8009788 <move_window>
 800b258:	1e03      	subs	r3, r0, #0
 800b25a:	d16e      	bne.n	800b33a <find_volume+0x632>
	{
		fs->fsi_flag = 0;
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	4a50      	ldr	r2, [pc, #320]	; (800b3a0 <find_volume+0x698>)
 800b260:	2100      	movs	r1, #0
 800b262:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	4a4f      	ldr	r2, [pc, #316]	; (800b3a4 <find_volume+0x69c>)
 800b268:	5c9b      	ldrb	r3, [r3, r2]
 800b26a:	021b      	lsls	r3, r3, #8
 800b26c:	b21a      	sxth	r2, r3
 800b26e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b270:	23ff      	movs	r3, #255	; 0xff
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	5ccb      	ldrb	r3, [r1, r3]
 800b276:	b21b      	sxth	r3, r3
 800b278:	4313      	orrs	r3, r2
 800b27a:	b21b      	sxth	r3, r3
 800b27c:	4a4a      	ldr	r2, [pc, #296]	; (800b3a8 <find_volume+0x6a0>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d15b      	bne.n	800b33a <find_volume+0x632>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	78db      	ldrb	r3, [r3, #3]
 800b286:	061a      	lsls	r2, r3, #24
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	789b      	ldrb	r3, [r3, #2]
 800b28c:	041b      	lsls	r3, r3, #16
 800b28e:	4313      	orrs	r3, r2
 800b290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b292:	7852      	ldrb	r2, [r2, #1]
 800b294:	0212      	lsls	r2, r2, #8
 800b296:	4313      	orrs	r3, r2
 800b298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b29a:	7812      	ldrb	r2, [r2, #0]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	4a43      	ldr	r2, [pc, #268]	; (800b3ac <find_volume+0x6a4>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d14a      	bne.n	800b33a <find_volume+0x632>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b2a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2a6:	23e8      	movs	r3, #232	; 0xe8
 800b2a8:	33ff      	adds	r3, #255	; 0xff
 800b2aa:	5cd3      	ldrb	r3, [r2, r3]
 800b2ac:	061a      	lsls	r2, r3, #24
 800b2ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2b0:	23f3      	movs	r3, #243	; 0xf3
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	5ccb      	ldrb	r3, [r1, r3]
 800b2b6:	041b      	lsls	r3, r3, #16
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2bc:	22e6      	movs	r2, #230	; 0xe6
 800b2be:	32ff      	adds	r2, #255	; 0xff
 800b2c0:	5c8a      	ldrb	r2, [r1, r2]
 800b2c2:	0212      	lsls	r2, r2, #8
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2c8:	22f2      	movs	r2, #242	; 0xf2
 800b2ca:	0052      	lsls	r2, r2, #1
 800b2cc:	5c8a      	ldrb	r2, [r1, r2]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	4a37      	ldr	r2, [pc, #220]	; (800b3b0 <find_volume+0x6a8>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d131      	bne.n	800b33a <find_volume+0x632>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b2d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2d8:	23ec      	movs	r3, #236	; 0xec
 800b2da:	33ff      	adds	r3, #255	; 0xff
 800b2dc:	5cd3      	ldrb	r3, [r2, r3]
 800b2de:	061a      	lsls	r2, r3, #24
 800b2e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2e2:	23f5      	movs	r3, #245	; 0xf5
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	5ccb      	ldrb	r3, [r1, r3]
 800b2e8:	041b      	lsls	r3, r3, #16
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2ee:	22ea      	movs	r2, #234	; 0xea
 800b2f0:	32ff      	adds	r2, #255	; 0xff
 800b2f2:	5c8a      	ldrb	r2, [r1, r2]
 800b2f4:	0212      	lsls	r2, r2, #8
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2fa:	22f4      	movs	r2, #244	; 0xf4
 800b2fc:	0052      	lsls	r2, r2, #1
 800b2fe:	5c8a      	ldrb	r2, [r1, r2]
 800b300:	431a      	orrs	r2, r3
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	4924      	ldr	r1, [pc, #144]	; (800b398 <find_volume+0x690>)
 800b306:	505a      	str	r2, [r3, r1]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b30a:	23f0      	movs	r3, #240	; 0xf0
 800b30c:	33ff      	adds	r3, #255	; 0xff
 800b30e:	5cd3      	ldrb	r3, [r2, r3]
 800b310:	061a      	lsls	r2, r3, #24
 800b312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b314:	23f7      	movs	r3, #247	; 0xf7
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	5ccb      	ldrb	r3, [r1, r3]
 800b31a:	041b      	lsls	r3, r3, #16
 800b31c:	4313      	orrs	r3, r2
 800b31e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b320:	22ee      	movs	r2, #238	; 0xee
 800b322:	32ff      	adds	r2, #255	; 0xff
 800b324:	5c8a      	ldrb	r2, [r1, r2]
 800b326:	0212      	lsls	r2, r2, #8
 800b328:	4313      	orrs	r3, r2
 800b32a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b32c:	22f6      	movs	r2, #246	; 0xf6
 800b32e:	0052      	lsls	r2, r2, #1
 800b330:	5c8a      	ldrb	r2, [r1, r2]
 800b332:	431a      	orrs	r2, r3
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	4919      	ldr	r1, [pc, #100]	; (800b39c <find_volume+0x694>)
 800b338:	505a      	str	r2, [r3, r1]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b33c:	2357      	movs	r3, #87	; 0x57
 800b33e:	18f9      	adds	r1, r7, r3
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	015b      	lsls	r3, r3, #5
 800b344:	7809      	ldrb	r1, [r1, #0]
 800b346:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 800b348:	4b1a      	ldr	r3, [pc, #104]	; (800b3b4 <find_volume+0x6ac>)
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	3301      	adds	r3, #1
 800b34e:	b29a      	uxth	r2, r3
 800b350:	4b18      	ldr	r3, [pc, #96]	; (800b3b4 <find_volume+0x6ac>)
 800b352:	801a      	strh	r2, [r3, #0]
 800b354:	4b17      	ldr	r3, [pc, #92]	; (800b3b4 <find_volume+0x6ac>)
 800b356:	8819      	ldrh	r1, [r3, #0]
 800b358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35a:	4a17      	ldr	r2, [pc, #92]	; (800b3b8 <find_volume+0x6b0>)
 800b35c:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	0018      	movs	r0, r3
 800b362:	f7fe f993 	bl	800968c <clear_lock>
#endif

	return FR_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	0018      	movs	r0, r3
 800b36a:	46bd      	mov	sp, r7
 800b36c:	b016      	add	sp, #88	; 0x58
 800b36e:	bdb0      	pop	{r4, r5, r7, pc}
 800b370:	00001008 	.word	0x00001008
 800b374:	0000100a 	.word	0x0000100a
 800b378:	00001002 	.word	0x00001002
 800b37c:	00000ff5 	.word	0x00000ff5
 800b380:	0000fff5 	.word	0x0000fff5
 800b384:	00001014 	.word	0x00001014
 800b388:	0000101c 	.word	0x0000101c
 800b38c:	00001028 	.word	0x00001028
 800b390:	00001024 	.word	0x00001024
 800b394:	00001018 	.word	0x00001018
 800b398:	00001010 	.word	0x00001010
 800b39c:	0000100c 	.word	0x0000100c
 800b3a0:	00001005 	.word	0x00001005
 800b3a4:	000001ff 	.word	0x000001ff
 800b3a8:	ffffaa55 	.word	0xffffaa55
 800b3ac:	41615252 	.word	0x41615252
 800b3b0:	61417272 	.word	0x61417272
 800b3b4:	20002704 	.word	0x20002704
 800b3b8:	00001006 	.word	0x00001006

0800b3bc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d027      	beq.n	800b41e <validate+0x62>
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	2380      	movs	r3, #128	; 0x80
 800b3d2:	015b      	lsls	r3, r3, #5
 800b3d4:	58d3      	ldr	r3, [r2, r3]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d021      	beq.n	800b41e <validate+0x62>
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	2380      	movs	r3, #128	; 0x80
 800b3de:	015b      	lsls	r3, r3, #5
 800b3e0:	58d2      	ldr	r2, [r2, r3]
 800b3e2:	2380      	movs	r3, #128	; 0x80
 800b3e4:	015b      	lsls	r3, r3, #5
 800b3e6:	5cd3      	ldrb	r3, [r2, r3]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d018      	beq.n	800b41e <validate+0x62>
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	2380      	movs	r3, #128	; 0x80
 800b3f0:	015b      	lsls	r3, r3, #5
 800b3f2:	58d3      	ldr	r3, [r2, r3]
 800b3f4:	4a0d      	ldr	r2, [pc, #52]	; (800b42c <validate+0x70>)
 800b3f6:	5a9a      	ldrh	r2, [r3, r2]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	490d      	ldr	r1, [pc, #52]	; (800b430 <validate+0x74>)
 800b3fc:	5a5b      	ldrh	r3, [r3, r1]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d10d      	bne.n	800b41e <validate+0x62>
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	2380      	movs	r3, #128	; 0x80
 800b406:	015b      	lsls	r3, r3, #5
 800b408:	58d3      	ldr	r3, [r2, r3]
 800b40a:	4a0a      	ldr	r2, [pc, #40]	; (800b434 <validate+0x78>)
 800b40c:	5c9b      	ldrb	r3, [r3, r2]
 800b40e:	0018      	movs	r0, r3
 800b410:	f7fd feb6 	bl	8009180 <disk_status>
 800b414:	0003      	movs	r3, r0
 800b416:	001a      	movs	r2, r3
 800b418:	2301      	movs	r3, #1
 800b41a:	4013      	ands	r3, r2
 800b41c:	d001      	beq.n	800b422 <validate+0x66>
		return FR_INVALID_OBJECT;
 800b41e:	2309      	movs	r3, #9
 800b420:	e000      	b.n	800b424 <validate+0x68>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	0018      	movs	r0, r3
 800b426:	46bd      	mov	sp, r7
 800b428:	b004      	add	sp, #16
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	00001006 	.word	0x00001006
 800b430:	00001004 	.word	0x00001004
 800b434:	00001001 	.word	0x00001001

0800b438 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b438:	b5b0      	push	{r4, r5, r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	1dfb      	adds	r3, r7, #7
 800b444:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b44a:	2310      	movs	r3, #16
 800b44c:	18fb      	adds	r3, r7, r3
 800b44e:	0018      	movs	r0, r3
 800b450:	f7ff fba8 	bl	800aba4 <get_ldnumber>
 800b454:	0003      	movs	r3, r0
 800b456:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da01      	bge.n	800b462 <f_mount+0x2a>
 800b45e:	230b      	movs	r3, #11
 800b460:	e034      	b.n	800b4cc <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b462:	4b1c      	ldr	r3, [pc, #112]	; (800b4d4 <f_mount+0x9c>)
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	0092      	lsls	r2, r2, #2
 800b468:	58d3      	ldr	r3, [r2, r3]
 800b46a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d008      	beq.n	800b484 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	0018      	movs	r0, r3
 800b476:	f7fe f909 	bl	800968c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b47a:	69ba      	ldr	r2, [r7, #24]
 800b47c:	2380      	movs	r3, #128	; 0x80
 800b47e:	015b      	lsls	r3, r3, #5
 800b480:	2100      	movs	r1, #0
 800b482:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d004      	beq.n	800b494 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	2380      	movs	r3, #128	; 0x80
 800b48e:	015b      	lsls	r3, r3, #5
 800b490:	2100      	movs	r1, #0
 800b492:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b494:	68f9      	ldr	r1, [r7, #12]
 800b496:	4b0f      	ldr	r3, [pc, #60]	; (800b4d4 <f_mount+0x9c>)
 800b498:	69fa      	ldr	r2, [r7, #28]
 800b49a:	0092      	lsls	r2, r2, #2
 800b49c:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d003      	beq.n	800b4ac <f_mount+0x74>
 800b4a4:	1dfb      	adds	r3, r7, #7
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d001      	beq.n	800b4b0 <f_mount+0x78>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	e00d      	b.n	800b4cc <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b4b0:	2517      	movs	r5, #23
 800b4b2:	197c      	adds	r4, r7, r5
 800b4b4:	2308      	movs	r3, #8
 800b4b6:	18f9      	adds	r1, r7, r3
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	18fb      	adds	r3, r7, r3
 800b4bc:	2200      	movs	r2, #0
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f7ff fc22 	bl	800ad08 <find_volume>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800b4c8:	197b      	adds	r3, r7, r5
 800b4ca:	781b      	ldrb	r3, [r3, #0]
}
 800b4cc:	0018      	movs	r0, r3
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	b008      	add	sp, #32
 800b4d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b4d4:	20002700 	.word	0x20002700

0800b4d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4da:	4cc5      	ldr	r4, [pc, #788]	; (800b7f0 <f_open+0x318>)
 800b4dc:	44a5      	add	sp, r4
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	4bc3      	ldr	r3, [pc, #780]	; (800b7f4 <f_open+0x31c>)
 800b4e6:	49c4      	ldr	r1, [pc, #784]	; (800b7f8 <f_open+0x320>)
 800b4e8:	185b      	adds	r3, r3, r1
 800b4ea:	19db      	adds	r3, r3, r7
 800b4ec:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <f_open+0x20>
 800b4f4:	2309      	movs	r3, #9
 800b4f6:	e24d      	b.n	800b994 <f_open+0x4bc>
	fp->fs = 0;			/* Clear file object */
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	2380      	movs	r3, #128	; 0x80
 800b4fc:	015b      	lsls	r3, r3, #5
 800b4fe:	2100      	movs	r1, #0
 800b500:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b502:	4bbc      	ldr	r3, [pc, #752]	; (800b7f4 <f_open+0x31c>)
 800b504:	4dbc      	ldr	r5, [pc, #752]	; (800b7f8 <f_open+0x320>)
 800b506:	195b      	adds	r3, r3, r5
 800b508:	19db      	adds	r3, r3, r7
 800b50a:	4aba      	ldr	r2, [pc, #744]	; (800b7f4 <f_open+0x31c>)
 800b50c:	1952      	adds	r2, r2, r5
 800b50e:	19d2      	adds	r2, r2, r7
 800b510:	7812      	ldrb	r2, [r2, #0]
 800b512:	211f      	movs	r1, #31
 800b514:	400a      	ands	r2, r1
 800b516:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b518:	4bb6      	ldr	r3, [pc, #728]	; (800b7f4 <f_open+0x31c>)
 800b51a:	195b      	adds	r3, r3, r5
 800b51c:	19db      	adds	r3, r3, r7
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2201      	movs	r2, #1
 800b522:	4393      	bics	r3, r2
 800b524:	b2da      	uxtb	r2, r3
 800b526:	4eb5      	ldr	r6, [pc, #724]	; (800b7fc <f_open+0x324>)
 800b528:	19bc      	adds	r4, r7, r6
 800b52a:	2308      	movs	r3, #8
 800b52c:	18f9      	adds	r1, r7, r3
 800b52e:	2320      	movs	r3, #32
 800b530:	18fb      	adds	r3, r7, r3
 800b532:	2080      	movs	r0, #128	; 0x80
 800b534:	0140      	lsls	r0, r0, #5
 800b536:	4684      	mov	ip, r0
 800b538:	4463      	add	r3, ip
 800b53a:	0018      	movs	r0, r3
 800b53c:	f7ff fbe4 	bl	800ad08 <find_volume>
 800b540:	0003      	movs	r3, r0
 800b542:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b544:	19bb      	adds	r3, r7, r6
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d000      	beq.n	800b54e <f_open+0x76>
 800b54c:	e21f      	b.n	800b98e <f_open+0x4b6>
		INIT_BUF(dj);
 800b54e:	4bac      	ldr	r3, [pc, #688]	; (800b800 <f_open+0x328>)
 800b550:	195a      	adds	r2, r3, r5
 800b552:	19d3      	adds	r3, r2, r7
 800b554:	49ab      	ldr	r1, [pc, #684]	; (800b804 <f_open+0x32c>)
 800b556:	2214      	movs	r2, #20
 800b558:	18ba      	adds	r2, r7, r2
 800b55a:	505a      	str	r2, [r3, r1]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	19bc      	adds	r4, r7, r6
 800b560:	2320      	movs	r3, #32
 800b562:	18fb      	adds	r3, r7, r3
 800b564:	0011      	movs	r1, r2
 800b566:	0018      	movs	r0, r3
 800b568:	f7ff fa92 	bl	800aa90 <follow_path>
 800b56c:	0003      	movs	r3, r0
 800b56e:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 800b570:	4ba3      	ldr	r3, [pc, #652]	; (800b800 <f_open+0x328>)
 800b572:	195b      	adds	r3, r3, r5
 800b574:	19db      	adds	r3, r3, r7
 800b576:	4aa4      	ldr	r2, [pc, #656]	; (800b808 <f_open+0x330>)
 800b578:	589b      	ldr	r3, [r3, r2]
 800b57a:	4aa4      	ldr	r2, [pc, #656]	; (800b80c <f_open+0x334>)
 800b57c:	18b9      	adds	r1, r7, r2
 800b57e:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b580:	19bb      	adds	r3, r7, r6
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d11c      	bne.n	800b5c2 <f_open+0xea>
			if (!dir)	/* Default directory itself */
 800b588:	18bb      	adds	r3, r7, r2
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d103      	bne.n	800b598 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800b590:	19bb      	adds	r3, r7, r6
 800b592:	2206      	movs	r2, #6
 800b594:	701a      	strb	r2, [r3, #0]
 800b596:	e014      	b.n	800b5c2 <f_open+0xea>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b598:	4b96      	ldr	r3, [pc, #600]	; (800b7f4 <f_open+0x31c>)
 800b59a:	4a97      	ldr	r2, [pc, #604]	; (800b7f8 <f_open+0x320>)
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	19db      	adds	r3, r3, r7
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	4393      	bics	r3, r2
 800b5a6:	1e5a      	subs	r2, r3, #1
 800b5a8:	4193      	sbcs	r3, r2
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	001a      	movs	r2, r3
 800b5ae:	4b93      	ldr	r3, [pc, #588]	; (800b7fc <f_open+0x324>)
 800b5b0:	18fc      	adds	r4, r7, r3
 800b5b2:	2320      	movs	r3, #32
 800b5b4:	18fb      	adds	r3, r7, r3
 800b5b6:	0011      	movs	r1, r2
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f7fd ff1f 	bl	80093fc <chk_lock>
 800b5be:	0003      	movs	r3, r0
 800b5c0:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b5c2:	4b8c      	ldr	r3, [pc, #560]	; (800b7f4 <f_open+0x31c>)
 800b5c4:	4a8c      	ldr	r2, [pc, #560]	; (800b7f8 <f_open+0x320>)
 800b5c6:	189b      	adds	r3, r3, r2
 800b5c8:	19db      	adds	r3, r3, r7
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	221c      	movs	r2, #28
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	d100      	bne.n	800b5d4 <f_open+0xfc>
 800b5d2:	e0fb      	b.n	800b7cc <f_open+0x2f4>
			if (res != FR_OK) {					/* No file, create new */
 800b5d4:	4a89      	ldr	r2, [pc, #548]	; (800b7fc <f_open+0x324>)
 800b5d6:	18bb      	adds	r3, r7, r2
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d027      	beq.n	800b62e <f_open+0x156>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b5de:	18bb      	adds	r3, r7, r2
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	d10f      	bne.n	800b606 <f_open+0x12e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b5e6:	f7fd ff79 	bl	80094dc <enq_lock>
 800b5ea:	1e03      	subs	r3, r0, #0
 800b5ec:	d007      	beq.n	800b5fe <f_open+0x126>
 800b5ee:	2320      	movs	r3, #32
 800b5f0:	18fb      	adds	r3, r7, r3
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	f7ff f8fc 	bl	800a7f0 <dir_register>
 800b5f8:	0003      	movs	r3, r0
 800b5fa:	001a      	movs	r2, r3
 800b5fc:	e000      	b.n	800b600 <f_open+0x128>
 800b5fe:	2212      	movs	r2, #18
 800b600:	4b7e      	ldr	r3, [pc, #504]	; (800b7fc <f_open+0x324>)
 800b602:	18fb      	adds	r3, r7, r3
 800b604:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b606:	4b7b      	ldr	r3, [pc, #492]	; (800b7f4 <f_open+0x31c>)
 800b608:	487b      	ldr	r0, [pc, #492]	; (800b7f8 <f_open+0x320>)
 800b60a:	181b      	adds	r3, r3, r0
 800b60c:	19db      	adds	r3, r3, r7
 800b60e:	4a79      	ldr	r2, [pc, #484]	; (800b7f4 <f_open+0x31c>)
 800b610:	1812      	adds	r2, r2, r0
 800b612:	19d2      	adds	r2, r2, r7
 800b614:	7812      	ldrb	r2, [r2, #0]
 800b616:	2108      	movs	r1, #8
 800b618:	430a      	orrs	r2, r1
 800b61a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b61c:	4b78      	ldr	r3, [pc, #480]	; (800b800 <f_open+0x328>)
 800b61e:	181b      	adds	r3, r3, r0
 800b620:	19db      	adds	r3, r3, r7
 800b622:	4a79      	ldr	r2, [pc, #484]	; (800b808 <f_open+0x330>)
 800b624:	589b      	ldr	r3, [r3, r2]
 800b626:	4a79      	ldr	r2, [pc, #484]	; (800b80c <f_open+0x334>)
 800b628:	18ba      	adds	r2, r7, r2
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	e019      	b.n	800b662 <f_open+0x18a>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b62e:	4b77      	ldr	r3, [pc, #476]	; (800b80c <f_open+0x334>)
 800b630:	18fb      	adds	r3, r7, r3
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	330b      	adds	r3, #11
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	001a      	movs	r2, r3
 800b63a:	2311      	movs	r3, #17
 800b63c:	4013      	ands	r3, r2
 800b63e:	d004      	beq.n	800b64a <f_open+0x172>
					res = FR_DENIED;
 800b640:	4b6e      	ldr	r3, [pc, #440]	; (800b7fc <f_open+0x324>)
 800b642:	18fb      	adds	r3, r7, r3
 800b644:	2207      	movs	r2, #7
 800b646:	701a      	strb	r2, [r3, #0]
 800b648:	e00b      	b.n	800b662 <f_open+0x18a>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b64a:	4b6a      	ldr	r3, [pc, #424]	; (800b7f4 <f_open+0x31c>)
 800b64c:	4a6a      	ldr	r2, [pc, #424]	; (800b7f8 <f_open+0x320>)
 800b64e:	189b      	adds	r3, r3, r2
 800b650:	19db      	adds	r3, r3, r7
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2204      	movs	r2, #4
 800b656:	4013      	ands	r3, r2
 800b658:	d003      	beq.n	800b662 <f_open+0x18a>
						res = FR_EXIST;
 800b65a:	4b68      	ldr	r3, [pc, #416]	; (800b7fc <f_open+0x324>)
 800b65c:	18fb      	adds	r3, r7, r3
 800b65e:	2208      	movs	r2, #8
 800b660:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b662:	4866      	ldr	r0, [pc, #408]	; (800b7fc <f_open+0x324>)
 800b664:	183b      	adds	r3, r7, r0
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d000      	beq.n	800b66e <f_open+0x196>
 800b66c:	e0ed      	b.n	800b84a <f_open+0x372>
 800b66e:	4b61      	ldr	r3, [pc, #388]	; (800b7f4 <f_open+0x31c>)
 800b670:	4c61      	ldr	r4, [pc, #388]	; (800b7f8 <f_open+0x320>)
 800b672:	191b      	adds	r3, r3, r4
 800b674:	19db      	adds	r3, r3, r7
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2208      	movs	r2, #8
 800b67a:	4013      	ands	r3, r2
 800b67c:	d100      	bne.n	800b680 <f_open+0x1a8>
 800b67e:	e0e4      	b.n	800b84a <f_open+0x372>
				dw = GET_FATTIME();				/* Created time */
 800b680:	f7fd fd12 	bl	80090a8 <get_fattime>
 800b684:	0003      	movs	r3, r0
 800b686:	4e62      	ldr	r6, [pc, #392]	; (800b810 <f_open+0x338>)
 800b688:	19ba      	adds	r2, r7, r6
 800b68a:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b68c:	495f      	ldr	r1, [pc, #380]	; (800b80c <f_open+0x334>)
 800b68e:	187b      	adds	r3, r7, r1
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	330e      	adds	r3, #14
 800b694:	19ba      	adds	r2, r7, r6
 800b696:	6812      	ldr	r2, [r2, #0]
 800b698:	b2d2      	uxtb	r2, r2
 800b69a:	701a      	strb	r2, [r3, #0]
 800b69c:	19bb      	adds	r3, r7, r6
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	187b      	adds	r3, r7, r1
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	330f      	adds	r3, #15
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	19bb      	adds	r3, r7, r6
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	0c1a      	lsrs	r2, r3, #16
 800b6b6:	187b      	adds	r3, r7, r1
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3310      	adds	r3, #16
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	19bb      	adds	r3, r7, r6
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	0e1a      	lsrs	r2, r3, #24
 800b6c6:	187b      	adds	r3, r7, r1
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3311      	adds	r3, #17
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b6d0:	187b      	adds	r3, r7, r1
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	330b      	adds	r3, #11
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b6da:	187b      	adds	r3, r7, r1
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	331c      	adds	r3, #28
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	187b      	adds	r3, r7, r1
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	331d      	adds	r3, #29
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	187b      	adds	r3, r7, r1
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	331e      	adds	r3, #30
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	187b      	adds	r3, r7, r1
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	331f      	adds	r3, #31
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b702:	4b3f      	ldr	r3, [pc, #252]	; (800b800 <f_open+0x328>)
 800b704:	0025      	movs	r5, r4
 800b706:	191b      	adds	r3, r3, r4
 800b708:	19da      	adds	r2, r3, r7
 800b70a:	2380      	movs	r3, #128	; 0x80
 800b70c:	015b      	lsls	r3, r3, #5
 800b70e:	58d3      	ldr	r3, [r2, r3]
 800b710:	000c      	movs	r4, r1
 800b712:	187a      	adds	r2, r7, r1
 800b714:	6812      	ldr	r2, [r2, #0]
 800b716:	0011      	movs	r1, r2
 800b718:	0018      	movs	r0, r3
 800b71a:	f7fe ffaf 	bl	800a67c <ld_clust>
 800b71e:	0003      	movs	r3, r0
 800b720:	2182      	movs	r1, #130	; 0x82
 800b722:	0149      	lsls	r1, r1, #5
 800b724:	187a      	adds	r2, r7, r1
 800b726:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800b728:	193b      	adds	r3, r7, r4
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2100      	movs	r1, #0
 800b72e:	0018      	movs	r0, r3
 800b730:	f7fe ffd1 	bl	800a6d6 <st_clust>
				dj.fs->wflag = 1;
 800b734:	4b32      	ldr	r3, [pc, #200]	; (800b800 <f_open+0x328>)
 800b736:	195b      	adds	r3, r3, r5
 800b738:	19da      	adds	r2, r3, r7
 800b73a:	2380      	movs	r3, #128	; 0x80
 800b73c:	015b      	lsls	r3, r3, #5
 800b73e:	58d3      	ldr	r3, [r2, r3]
 800b740:	4a34      	ldr	r2, [pc, #208]	; (800b814 <f_open+0x33c>)
 800b742:	2101      	movs	r1, #1
 800b744:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 800b746:	2182      	movs	r1, #130	; 0x82
 800b748:	0149      	lsls	r1, r1, #5
 800b74a:	187b      	adds	r3, r7, r1
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d100      	bne.n	800b754 <f_open+0x27c>
 800b752:	e07a      	b.n	800b84a <f_open+0x372>
					dw = dj.fs->winsect;
 800b754:	4b2a      	ldr	r3, [pc, #168]	; (800b800 <f_open+0x328>)
 800b756:	195b      	adds	r3, r3, r5
 800b758:	19da      	adds	r2, r3, r7
 800b75a:	2380      	movs	r3, #128	; 0x80
 800b75c:	015b      	lsls	r3, r3, #5
 800b75e:	58d3      	ldr	r3, [r2, r3]
 800b760:	4a2d      	ldr	r2, [pc, #180]	; (800b818 <f_open+0x340>)
 800b762:	589b      	ldr	r3, [r3, r2]
 800b764:	19ba      	adds	r2, r7, r6
 800b766:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <f_open+0x328>)
 800b76a:	195b      	adds	r3, r3, r5
 800b76c:	19da      	adds	r2, r3, r7
 800b76e:	2380      	movs	r3, #128	; 0x80
 800b770:	015b      	lsls	r3, r3, #5
 800b772:	58d3      	ldr	r3, [r2, r3]
 800b774:	4821      	ldr	r0, [pc, #132]	; (800b7fc <f_open+0x324>)
 800b776:	183c      	adds	r4, r7, r0
 800b778:	187a      	adds	r2, r7, r1
 800b77a:	6812      	ldr	r2, [r2, #0]
 800b77c:	0011      	movs	r1, r2
 800b77e:	0018      	movs	r0, r3
 800b780:	f7fe fb9c 	bl	8009ebc <remove_chain>
 800b784:	0003      	movs	r3, r0
 800b786:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 800b788:	481c      	ldr	r0, [pc, #112]	; (800b7fc <f_open+0x324>)
 800b78a:	183b      	adds	r3, r7, r0
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d15b      	bne.n	800b84a <f_open+0x372>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b792:	4b1b      	ldr	r3, [pc, #108]	; (800b800 <f_open+0x328>)
 800b794:	195b      	adds	r3, r3, r5
 800b796:	19da      	adds	r2, r3, r7
 800b798:	2380      	movs	r3, #128	; 0x80
 800b79a:	015b      	lsls	r3, r3, #5
 800b79c:	58d3      	ldr	r3, [r2, r3]
 800b79e:	2182      	movs	r1, #130	; 0x82
 800b7a0:	0149      	lsls	r1, r1, #5
 800b7a2:	187a      	adds	r2, r7, r1
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	3a01      	subs	r2, #1
 800b7a8:	491c      	ldr	r1, [pc, #112]	; (800b81c <f_open+0x344>)
 800b7aa:	505a      	str	r2, [r3, r1]
						res = move_window(dj.fs, dw);
 800b7ac:	4b14      	ldr	r3, [pc, #80]	; (800b800 <f_open+0x328>)
 800b7ae:	195b      	adds	r3, r3, r5
 800b7b0:	19da      	adds	r2, r3, r7
 800b7b2:	2380      	movs	r3, #128	; 0x80
 800b7b4:	015b      	lsls	r3, r3, #5
 800b7b6:	58d3      	ldr	r3, [r2, r3]
 800b7b8:	183c      	adds	r4, r7, r0
 800b7ba:	19ba      	adds	r2, r7, r6
 800b7bc:	6812      	ldr	r2, [r2, #0]
 800b7be:	0011      	movs	r1, r2
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	f7fd ffe1 	bl	8009788 <move_window>
 800b7c6:	0003      	movs	r3, r0
 800b7c8:	7023      	strb	r3, [r4, #0]
 800b7ca:	e03e      	b.n	800b84a <f_open+0x372>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b7cc:	490b      	ldr	r1, [pc, #44]	; (800b7fc <f_open+0x324>)
 800b7ce:	187b      	adds	r3, r7, r1
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d139      	bne.n	800b84a <f_open+0x372>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b7d6:	4b0d      	ldr	r3, [pc, #52]	; (800b80c <f_open+0x334>)
 800b7d8:	18fb      	adds	r3, r7, r3
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	330b      	adds	r3, #11
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	001a      	movs	r2, r3
 800b7e2:	2310      	movs	r3, #16
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	d01b      	beq.n	800b820 <f_open+0x348>
					res = FR_NO_FILE;
 800b7e8:	187b      	adds	r3, r7, r1
 800b7ea:	2204      	movs	r2, #4
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	e02c      	b.n	800b84a <f_open+0x372>
 800b7f0:	ffffefac 	.word	0xffffefac
 800b7f4:	ffffefb7 	.word	0xffffefb7
 800b7f8:	00001050 	.word	0x00001050
 800b7fc:	0000104f 	.word	0x0000104f
 800b800:	ffffefd0 	.word	0xffffefd0
 800b804:	00001018 	.word	0x00001018
 800b808:	00001014 	.word	0x00001014
 800b80c:	00001048 	.word	0x00001048
 800b810:	00001044 	.word	0x00001044
 800b814:	00001004 	.word	0x00001004
 800b818:	0000102c 	.word	0x0000102c
 800b81c:	0000100c 	.word	0x0000100c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b820:	4b5f      	ldr	r3, [pc, #380]	; (800b9a0 <f_open+0x4c8>)
 800b822:	4a60      	ldr	r2, [pc, #384]	; (800b9a4 <f_open+0x4cc>)
 800b824:	189b      	adds	r3, r3, r2
 800b826:	19db      	adds	r3, r3, r7
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2202      	movs	r2, #2
 800b82c:	4013      	ands	r3, r2
 800b82e:	d00c      	beq.n	800b84a <f_open+0x372>
 800b830:	4b5d      	ldr	r3, [pc, #372]	; (800b9a8 <f_open+0x4d0>)
 800b832:	18fb      	adds	r3, r7, r3
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	330b      	adds	r3, #11
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	001a      	movs	r2, r3
 800b83c:	2301      	movs	r3, #1
 800b83e:	4013      	ands	r3, r2
 800b840:	d003      	beq.n	800b84a <f_open+0x372>
						res = FR_DENIED;
 800b842:	4b5a      	ldr	r3, [pc, #360]	; (800b9ac <f_open+0x4d4>)
 800b844:	18fb      	adds	r3, r7, r3
 800b846:	2207      	movs	r2, #7
 800b848:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 800b84a:	4b58      	ldr	r3, [pc, #352]	; (800b9ac <f_open+0x4d4>)
 800b84c:	18fb      	adds	r3, r7, r3
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d141      	bne.n	800b8d8 <f_open+0x400>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b854:	4b52      	ldr	r3, [pc, #328]	; (800b9a0 <f_open+0x4c8>)
 800b856:	4953      	ldr	r1, [pc, #332]	; (800b9a4 <f_open+0x4cc>)
 800b858:	185b      	adds	r3, r3, r1
 800b85a:	19db      	adds	r3, r3, r7
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2208      	movs	r2, #8
 800b860:	4013      	ands	r3, r2
 800b862:	d009      	beq.n	800b878 <f_open+0x3a0>
				mode |= FA__WRITTEN;
 800b864:	4b4e      	ldr	r3, [pc, #312]	; (800b9a0 <f_open+0x4c8>)
 800b866:	185b      	adds	r3, r3, r1
 800b868:	19db      	adds	r3, r3, r7
 800b86a:	4a4d      	ldr	r2, [pc, #308]	; (800b9a0 <f_open+0x4c8>)
 800b86c:	1852      	adds	r2, r2, r1
 800b86e:	19d2      	adds	r2, r2, r7
 800b870:	7812      	ldrb	r2, [r2, #0]
 800b872:	2120      	movs	r1, #32
 800b874:	430a      	orrs	r2, r1
 800b876:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b878:	4b4d      	ldr	r3, [pc, #308]	; (800b9b0 <f_open+0x4d8>)
 800b87a:	484a      	ldr	r0, [pc, #296]	; (800b9a4 <f_open+0x4cc>)
 800b87c:	181b      	adds	r3, r3, r0
 800b87e:	19da      	adds	r2, r3, r7
 800b880:	2380      	movs	r3, #128	; 0x80
 800b882:	015b      	lsls	r3, r3, #5
 800b884:	58d3      	ldr	r3, [r2, r3]
 800b886:	4a4b      	ldr	r2, [pc, #300]	; (800b9b4 <f_open+0x4dc>)
 800b888:	589a      	ldr	r2, [r3, r2]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	494a      	ldr	r1, [pc, #296]	; (800b9b8 <f_open+0x4e0>)
 800b88e:	505a      	str	r2, [r3, r1]
			fp->dir_ptr = dir;
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	2381      	movs	r3, #129	; 0x81
 800b894:	015b      	lsls	r3, r3, #5
 800b896:	4944      	ldr	r1, [pc, #272]	; (800b9a8 <f_open+0x4d0>)
 800b898:	1879      	adds	r1, r7, r1
 800b89a:	6809      	ldr	r1, [r1, #0]
 800b89c:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b89e:	4b40      	ldr	r3, [pc, #256]	; (800b9a0 <f_open+0x4c8>)
 800b8a0:	181b      	adds	r3, r3, r0
 800b8a2:	19db      	adds	r3, r3, r7
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4393      	bics	r3, r2
 800b8aa:	1e5a      	subs	r2, r3, #1
 800b8ac:	4193      	sbcs	r3, r2
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	001a      	movs	r2, r3
 800b8b2:	2320      	movs	r3, #32
 800b8b4:	18fb      	adds	r3, r7, r3
 800b8b6:	0011      	movs	r1, r2
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	f7fd fe2f 	bl	800951c <inc_lock>
 800b8be:	0002      	movs	r2, r0
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	493e      	ldr	r1, [pc, #248]	; (800b9bc <f_open+0x4e4>)
 800b8c4:	505a      	str	r2, [r3, r1]
			if (!fp->lockid) res = FR_INT_ERR;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4a3c      	ldr	r2, [pc, #240]	; (800b9bc <f_open+0x4e4>)
 800b8ca:	589b      	ldr	r3, [r3, r2]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d103      	bne.n	800b8d8 <f_open+0x400>
 800b8d0:	4b36      	ldr	r3, [pc, #216]	; (800b9ac <f_open+0x4d4>)
 800b8d2:	18fb      	adds	r3, r7, r3
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b8d8:	4b34      	ldr	r3, [pc, #208]	; (800b9ac <f_open+0x4d4>)
 800b8da:	18fb      	adds	r3, r7, r3
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d155      	bne.n	800b98e <f_open+0x4b6>
			fp->flag = mode;					/* File access mode */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	4a2e      	ldr	r2, [pc, #184]	; (800b9a0 <f_open+0x4c8>)
 800b8e6:	4d2f      	ldr	r5, [pc, #188]	; (800b9a4 <f_open+0x4cc>)
 800b8e8:	1952      	adds	r2, r2, r5
 800b8ea:	19d2      	adds	r2, r2, r7
 800b8ec:	4934      	ldr	r1, [pc, #208]	; (800b9c0 <f_open+0x4e8>)
 800b8ee:	7812      	ldrb	r2, [r2, #0]
 800b8f0:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	4a33      	ldr	r2, [pc, #204]	; (800b9c4 <f_open+0x4ec>)
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b8fa:	4b2d      	ldr	r3, [pc, #180]	; (800b9b0 <f_open+0x4d8>)
 800b8fc:	195b      	adds	r3, r3, r5
 800b8fe:	19da      	adds	r2, r3, r7
 800b900:	2380      	movs	r3, #128	; 0x80
 800b902:	015b      	lsls	r3, r3, #5
 800b904:	58d3      	ldr	r3, [r2, r3]
 800b906:	4c28      	ldr	r4, [pc, #160]	; (800b9a8 <f_open+0x4d0>)
 800b908:	193a      	adds	r2, r7, r4
 800b90a:	6812      	ldr	r2, [r2, #0]
 800b90c:	0011      	movs	r1, r2
 800b90e:	0018      	movs	r0, r3
 800b910:	f7fe feb4 	bl	800a67c <ld_clust>
 800b914:	0002      	movs	r2, r0
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	492b      	ldr	r1, [pc, #172]	; (800b9c8 <f_open+0x4f0>)
 800b91a:	505a      	str	r2, [r3, r1]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b91c:	0021      	movs	r1, r4
 800b91e:	187b      	adds	r3, r7, r1
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	331f      	adds	r3, #31
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	061a      	lsls	r2, r3, #24
 800b928:	187b      	adds	r3, r7, r1
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	331e      	adds	r3, #30
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	041b      	lsls	r3, r3, #16
 800b932:	4313      	orrs	r3, r2
 800b934:	187a      	adds	r2, r7, r1
 800b936:	6812      	ldr	r2, [r2, #0]
 800b938:	321d      	adds	r2, #29
 800b93a:	7812      	ldrb	r2, [r2, #0]
 800b93c:	0212      	lsls	r2, r2, #8
 800b93e:	4313      	orrs	r3, r2
 800b940:	187a      	adds	r2, r7, r1
 800b942:	6812      	ldr	r2, [r2, #0]
 800b944:	321c      	adds	r2, #28
 800b946:	7812      	ldrb	r2, [r2, #0]
 800b948:	431a      	orrs	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	491f      	ldr	r1, [pc, #124]	; (800b9cc <f_open+0x4f4>)
 800b94e:	505a      	str	r2, [r3, r1]
			fp->fptr = 0;						/* File pointer */
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4a1f      	ldr	r2, [pc, #124]	; (800b9d0 <f_open+0x4f8>)
 800b954:	2100      	movs	r1, #0
 800b956:	5099      	str	r1, [r3, r2]
			fp->dsect = 0;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4a1e      	ldr	r2, [pc, #120]	; (800b9d4 <f_open+0x4fc>)
 800b95c:	2100      	movs	r1, #0
 800b95e:	5099      	str	r1, [r3, r2]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a1d      	ldr	r2, [pc, #116]	; (800b9d8 <f_open+0x500>)
 800b964:	2100      	movs	r1, #0
 800b966:	5099      	str	r1, [r3, r2]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b968:	4b11      	ldr	r3, [pc, #68]	; (800b9b0 <f_open+0x4d8>)
 800b96a:	195b      	adds	r3, r3, r5
 800b96c:	19da      	adds	r2, r3, r7
 800b96e:	2380      	movs	r3, #128	; 0x80
 800b970:	015b      	lsls	r3, r3, #5
 800b972:	58d1      	ldr	r1, [r2, r3]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	2380      	movs	r3, #128	; 0x80
 800b978:	015b      	lsls	r3, r3, #5
 800b97a:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	2380      	movs	r3, #128	; 0x80
 800b980:	015b      	lsls	r3, r3, #5
 800b982:	58d3      	ldr	r3, [r2, r3]
 800b984:	4a0e      	ldr	r2, [pc, #56]	; (800b9c0 <f_open+0x4e8>)
 800b986:	5a99      	ldrh	r1, [r3, r2]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	4a14      	ldr	r2, [pc, #80]	; (800b9dc <f_open+0x504>)
 800b98c:	5299      	strh	r1, [r3, r2]
		}
	}

	LEAVE_FF(dj.fs, res);
 800b98e:	4b07      	ldr	r3, [pc, #28]	; (800b9ac <f_open+0x4d4>)
 800b990:	18fb      	adds	r3, r7, r3
 800b992:	781b      	ldrb	r3, [r3, #0]
}
 800b994:	0018      	movs	r0, r3
 800b996:	46bd      	mov	sp, r7
 800b998:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <f_open+0x508>)
 800b99a:	449d      	add	sp, r3
 800b99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b99e:	46c0      	nop			; (mov r8, r8)
 800b9a0:	ffffefb7 	.word	0xffffefb7
 800b9a4:	00001050 	.word	0x00001050
 800b9a8:	00001048 	.word	0x00001048
 800b9ac:	0000104f 	.word	0x0000104f
 800b9b0:	ffffefd0 	.word	0xffffefd0
 800b9b4:	0000102c 	.word	0x0000102c
 800b9b8:	0000101c 	.word	0x0000101c
 800b9bc:	00001028 	.word	0x00001028
 800b9c0:	00001006 	.word	0x00001006
 800b9c4:	00001007 	.word	0x00001007
 800b9c8:	00001010 	.word	0x00001010
 800b9cc:	0000100c 	.word	0x0000100c
 800b9d0:	00001008 	.word	0x00001008
 800b9d4:	00001018 	.word	0x00001018
 800b9d8:	00001024 	.word	0x00001024
 800b9dc:	00001004 	.word	0x00001004
 800b9e0:	00001054 	.word	0x00001054

0800b9e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b9e4:	b5b0      	push	{r4, r5, r7, lr}
 800b9e6:	b08a      	sub	sp, #40	; 0x28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800b9fc:	2517      	movs	r5, #23
 800b9fe:	197c      	adds	r4, r7, r5
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	0018      	movs	r0, r3
 800ba04:	f7ff fcda 	bl	800b3bc <validate>
 800ba08:	0003      	movs	r3, r0
 800ba0a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ba0c:	197b      	adds	r3, r7, r5
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <f_write+0x36>
 800ba14:	197b      	adds	r3, r7, r5
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	e1fc      	b.n	800be14 <f_write+0x430>
	if (fp->err)							/* Check error */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4ab9      	ldr	r2, [pc, #740]	; (800bd04 <f_write+0x320>)
 800ba1e:	5c9b      	ldrb	r3, [r3, r2]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4ab7      	ldr	r2, [pc, #732]	; (800bd04 <f_write+0x320>)
 800ba28:	5c9b      	ldrb	r3, [r3, r2]
 800ba2a:	e1f3      	b.n	800be14 <f_write+0x430>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4ab6      	ldr	r2, [pc, #728]	; (800bd08 <f_write+0x324>)
 800ba30:	5c9b      	ldrb	r3, [r3, r2]
 800ba32:	001a      	movs	r2, r3
 800ba34:	2302      	movs	r3, #2
 800ba36:	4013      	ands	r3, r2
 800ba38:	d101      	bne.n	800ba3e <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ba3a:	2307      	movs	r3, #7
 800ba3c:	e1ea      	b.n	800be14 <f_write+0x430>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4ab2      	ldr	r2, [pc, #712]	; (800bd0c <f_write+0x328>)
 800ba42:	589a      	ldr	r2, [r3, r2]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	18d2      	adds	r2, r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	49b0      	ldr	r1, [pc, #704]	; (800bd0c <f_write+0x328>)
 800ba4c:	585b      	ldr	r3, [r3, r1]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d300      	bcc.n	800ba54 <f_write+0x70>
 800ba52:	e1c1      	b.n	800bdd8 <f_write+0x3f4>
 800ba54:	2300      	movs	r3, #0
 800ba56:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ba58:	e1be      	b.n	800bdd8 <f_write+0x3f4>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	4aab      	ldr	r2, [pc, #684]	; (800bd0c <f_write+0x328>)
 800ba5e:	5898      	ldr	r0, [r3, r2]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	2380      	movs	r3, #128	; 0x80
 800ba64:	015b      	lsls	r3, r3, #5
 800ba66:	58d3      	ldr	r3, [r2, r3]
 800ba68:	4aa9      	ldr	r2, [pc, #676]	; (800bd10 <f_write+0x32c>)
 800ba6a:	5a9b      	ldrh	r3, [r3, r2]
 800ba6c:	0019      	movs	r1, r3
 800ba6e:	f7f4 fbeb 	bl	8000248 <__aeabi_uidivmod>
 800ba72:	1e0b      	subs	r3, r1, #0
 800ba74:	d000      	beq.n	800ba78 <f_write+0x94>
 800ba76:	e15f      	b.n	800bd38 <f_write+0x354>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4aa4      	ldr	r2, [pc, #656]	; (800bd0c <f_write+0x328>)
 800ba7c:	5898      	ldr	r0, [r3, r2]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	2380      	movs	r3, #128	; 0x80
 800ba82:	015b      	lsls	r3, r3, #5
 800ba84:	58d3      	ldr	r3, [r2, r3]
 800ba86:	4aa2      	ldr	r2, [pc, #648]	; (800bd10 <f_write+0x32c>)
 800ba88:	5a9b      	ldrh	r3, [r3, r2]
 800ba8a:	0019      	movs	r1, r3
 800ba8c:	f7f4 fb56 	bl	800013c <__udivsi3>
 800ba90:	0003      	movs	r3, r0
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	68f9      	ldr	r1, [r7, #12]
 800ba96:	2380      	movs	r3, #128	; 0x80
 800ba98:	015b      	lsls	r3, r3, #5
 800ba9a:	58cb      	ldr	r3, [r1, r3]
 800ba9c:	499d      	ldr	r1, [pc, #628]	; (800bd14 <f_write+0x330>)
 800ba9e:	5c5b      	ldrb	r3, [r3, r1]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	b2d9      	uxtb	r1, r3
 800baa4:	2016      	movs	r0, #22
 800baa6:	183b      	adds	r3, r7, r0
 800baa8:	400a      	ands	r2, r1
 800baaa:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 800baac:	183b      	adds	r3, r7, r0
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d156      	bne.n	800bb62 <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4a95      	ldr	r2, [pc, #596]	; (800bd0c <f_write+0x328>)
 800bab8:	589b      	ldr	r3, [r3, r2]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d111      	bne.n	800bae2 <f_write+0xfe>
					clst = fp->sclust;		/* Follow from the origin */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4a95      	ldr	r2, [pc, #596]	; (800bd18 <f_write+0x334>)
 800bac2:	589b      	ldr	r3, [r3, r2]
 800bac4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d127      	bne.n	800bb1c <f_write+0x138>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	2380      	movs	r3, #128	; 0x80
 800bad0:	015b      	lsls	r3, r3, #5
 800bad2:	58d3      	ldr	r3, [r2, r3]
 800bad4:	2100      	movs	r1, #0
 800bad6:	0018      	movs	r0, r3
 800bad8:	f7fe fa60 	bl	8009f9c <create_chain>
 800badc:	0003      	movs	r3, r0
 800bade:	627b      	str	r3, [r7, #36]	; 0x24
 800bae0:	e01c      	b.n	800bb1c <f_write+0x138>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4a8d      	ldr	r2, [pc, #564]	; (800bd1c <f_write+0x338>)
 800bae6:	589b      	ldr	r3, [r3, r2]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00a      	beq.n	800bb02 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4a87      	ldr	r2, [pc, #540]	; (800bd0c <f_write+0x328>)
 800baf0:	589a      	ldr	r2, [r3, r2]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	0011      	movs	r1, r2
 800baf6:	0018      	movs	r0, r3
 800baf8:	f7fe fb04 	bl	800a104 <clmt_clust>
 800bafc:	0003      	movs	r3, r0
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
 800bb00:	e00c      	b.n	800bb1c <f_write+0x138>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	2380      	movs	r3, #128	; 0x80
 800bb06:	015b      	lsls	r3, r3, #5
 800bb08:	58d2      	ldr	r2, [r2, r3]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	4984      	ldr	r1, [pc, #528]	; (800bd20 <f_write+0x33c>)
 800bb0e:	585b      	ldr	r3, [r3, r1]
 800bb10:	0019      	movs	r1, r3
 800bb12:	0010      	movs	r0, r2
 800bb14:	f7fe fa42 	bl	8009f9c <create_chain>
 800bb18:	0003      	movs	r3, r0
 800bb1a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d100      	bne.n	800bb24 <f_write+0x140>
 800bb22:	e15e      	b.n	800bde2 <f_write+0x3fe>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d105      	bne.n	800bb36 <f_write+0x152>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4a75      	ldr	r2, [pc, #468]	; (800bd04 <f_write+0x320>)
 800bb2e:	2102      	movs	r1, #2
 800bb30:	5499      	strb	r1, [r3, r2]
 800bb32:	2302      	movs	r3, #2
 800bb34:	e16e      	b.n	800be14 <f_write+0x430>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	3301      	adds	r3, #1
 800bb3a:	d105      	bne.n	800bb48 <f_write+0x164>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	4a71      	ldr	r2, [pc, #452]	; (800bd04 <f_write+0x320>)
 800bb40:	2101      	movs	r1, #1
 800bb42:	5499      	strb	r1, [r3, r2]
 800bb44:	2301      	movs	r3, #1
 800bb46:	e165      	b.n	800be14 <f_write+0x430>
				fp->clust = clst;			/* Update current cluster */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	4975      	ldr	r1, [pc, #468]	; (800bd20 <f_write+0x33c>)
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4e:	505a      	str	r2, [r3, r1]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a71      	ldr	r2, [pc, #452]	; (800bd18 <f_write+0x334>)
 800bb54:	589b      	ldr	r3, [r3, r2]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d103      	bne.n	800bb62 <f_write+0x17e>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	496e      	ldr	r1, [pc, #440]	; (800bd18 <f_write+0x334>)
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb60:	505a      	str	r2, [r3, r1]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	4a68      	ldr	r2, [pc, #416]	; (800bd08 <f_write+0x324>)
 800bb66:	5c9b      	ldrb	r3, [r3, r2]
 800bb68:	001a      	movs	r2, r3
 800bb6a:	2340      	movs	r3, #64	; 0x40
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	d01d      	beq.n	800bbac <f_write+0x1c8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	2380      	movs	r3, #128	; 0x80
 800bb74:	015b      	lsls	r3, r3, #5
 800bb76:	58d3      	ldr	r3, [r2, r3]
 800bb78:	4a6a      	ldr	r2, [pc, #424]	; (800bd24 <f_write+0x340>)
 800bb7a:	5c98      	ldrb	r0, [r3, r2]
 800bb7c:	68f9      	ldr	r1, [r7, #12]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	4a69      	ldr	r2, [pc, #420]	; (800bd28 <f_write+0x344>)
 800bb82:	589a      	ldr	r2, [r3, r2]
 800bb84:	2301      	movs	r3, #1
 800bb86:	f7fd fb75 	bl	8009274 <disk_write>
 800bb8a:	1e03      	subs	r3, r0, #0
 800bb8c:	d005      	beq.n	800bb9a <f_write+0x1b6>
					ABORT(fp->fs, FR_DISK_ERR);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4a5c      	ldr	r2, [pc, #368]	; (800bd04 <f_write+0x320>)
 800bb92:	2101      	movs	r1, #1
 800bb94:	5499      	strb	r1, [r3, r2]
 800bb96:	2301      	movs	r3, #1
 800bb98:	e13c      	b.n	800be14 <f_write+0x430>
				fp->flag &= ~FA__DIRTY;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	4a5a      	ldr	r2, [pc, #360]	; (800bd08 <f_write+0x324>)
 800bb9e:	5c9b      	ldrb	r3, [r3, r2]
 800bba0:	2240      	movs	r2, #64	; 0x40
 800bba2:	4393      	bics	r3, r2
 800bba4:	b2d9      	uxtb	r1, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4a57      	ldr	r2, [pc, #348]	; (800bd08 <f_write+0x324>)
 800bbaa:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	2380      	movs	r3, #128	; 0x80
 800bbb0:	015b      	lsls	r3, r3, #5
 800bbb2:	58d2      	ldr	r2, [r2, r3]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	495a      	ldr	r1, [pc, #360]	; (800bd20 <f_write+0x33c>)
 800bbb8:	585b      	ldr	r3, [r3, r1]
 800bbba:	0019      	movs	r1, r3
 800bbbc:	0010      	movs	r0, r2
 800bbbe:	f7fd fef1 	bl	80099a4 <clust2sect>
 800bbc2:	0003      	movs	r3, r0
 800bbc4:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d105      	bne.n	800bbd8 <f_write+0x1f4>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4a4d      	ldr	r2, [pc, #308]	; (800bd04 <f_write+0x320>)
 800bbd0:	2102      	movs	r1, #2
 800bbd2:	5499      	strb	r1, [r3, r2]
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	e11d      	b.n	800be14 <f_write+0x430>
			sect += csect;
 800bbd8:	2416      	movs	r4, #22
 800bbda:	193b      	adds	r3, r7, r4
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	18d3      	adds	r3, r2, r3
 800bbe2:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	2380      	movs	r3, #128	; 0x80
 800bbe8:	015b      	lsls	r3, r3, #5
 800bbea:	58d3      	ldr	r3, [r2, r3]
 800bbec:	4a48      	ldr	r2, [pc, #288]	; (800bd10 <f_write+0x32c>)
 800bbee:	5a9b      	ldrh	r3, [r3, r2]
 800bbf0:	0019      	movs	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7f4 faa2 	bl	800013c <__udivsi3>
 800bbf8:	0003      	movs	r3, r0
 800bbfa:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d05e      	beq.n	800bcc0 <f_write+0x2dc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bc02:	0020      	movs	r0, r4
 800bc04:	183b      	adds	r3, r7, r0
 800bc06:	781a      	ldrb	r2, [r3, #0]
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	18d3      	adds	r3, r2, r3
 800bc0c:	68f9      	ldr	r1, [r7, #12]
 800bc0e:	2280      	movs	r2, #128	; 0x80
 800bc10:	0152      	lsls	r2, r2, #5
 800bc12:	588a      	ldr	r2, [r1, r2]
 800bc14:	493f      	ldr	r1, [pc, #252]	; (800bd14 <f_write+0x330>)
 800bc16:	5c52      	ldrb	r2, [r2, r1]
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d90a      	bls.n	800bc32 <f_write+0x24e>
					cc = fp->fs->csize - csect;
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	2380      	movs	r3, #128	; 0x80
 800bc20:	015b      	lsls	r3, r3, #5
 800bc22:	58d3      	ldr	r3, [r2, r3]
 800bc24:	4a3b      	ldr	r2, [pc, #236]	; (800bd14 <f_write+0x330>)
 800bc26:	5c9b      	ldrb	r3, [r3, r2]
 800bc28:	001a      	movs	r2, r3
 800bc2a:	183b      	adds	r3, r7, r0
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	2380      	movs	r3, #128	; 0x80
 800bc36:	015b      	lsls	r3, r3, #5
 800bc38:	58d3      	ldr	r3, [r2, r3]
 800bc3a:	4a3a      	ldr	r2, [pc, #232]	; (800bd24 <f_write+0x340>)
 800bc3c:	5c98      	ldrb	r0, [r3, r2]
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	69b9      	ldr	r1, [r7, #24]
 800bc44:	f7fd fb16 	bl	8009274 <disk_write>
 800bc48:	1e03      	subs	r3, r0, #0
 800bc4a:	d005      	beq.n	800bc58 <f_write+0x274>
					ABORT(fp->fs, FR_DISK_ERR);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4a2d      	ldr	r2, [pc, #180]	; (800bd04 <f_write+0x320>)
 800bc50:	2101      	movs	r1, #1
 800bc52:	5499      	strb	r1, [r3, r2]
 800bc54:	2301      	movs	r3, #1
 800bc56:	e0dd      	b.n	800be14 <f_write+0x430>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a33      	ldr	r2, [pc, #204]	; (800bd28 <f_write+0x344>)
 800bc5c:	589a      	ldr	r2, [r3, r2]
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d920      	bls.n	800bcaa <f_write+0x2c6>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4a2e      	ldr	r2, [pc, #184]	; (800bd28 <f_write+0x344>)
 800bc6e:	589a      	ldr	r2, [r3, r2]
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	68f9      	ldr	r1, [r7, #12]
 800bc76:	2280      	movs	r2, #128	; 0x80
 800bc78:	0152      	lsls	r2, r2, #5
 800bc7a:	588a      	ldr	r2, [r1, r2]
 800bc7c:	4924      	ldr	r1, [pc, #144]	; (800bd10 <f_write+0x32c>)
 800bc7e:	5a52      	ldrh	r2, [r2, r1]
 800bc80:	4353      	muls	r3, r2
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	18d1      	adds	r1, r2, r3
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	2380      	movs	r3, #128	; 0x80
 800bc8a:	015b      	lsls	r3, r3, #5
 800bc8c:	58d3      	ldr	r3, [r2, r3]
 800bc8e:	4a20      	ldr	r2, [pc, #128]	; (800bd10 <f_write+0x32c>)
 800bc90:	5a9b      	ldrh	r3, [r3, r2]
 800bc92:	001a      	movs	r2, r3
 800bc94:	f7fd fb3e 	bl	8009314 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4a1b      	ldr	r2, [pc, #108]	; (800bd08 <f_write+0x324>)
 800bc9c:	5c9b      	ldrb	r3, [r3, r2]
 800bc9e:	2240      	movs	r2, #64	; 0x40
 800bca0:	4393      	bics	r3, r2
 800bca2:	b2d9      	uxtb	r1, r3
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	4a18      	ldr	r2, [pc, #96]	; (800bd08 <f_write+0x324>)
 800bca8:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	2380      	movs	r3, #128	; 0x80
 800bcae:	015b      	lsls	r3, r3, #5
 800bcb0:	58d3      	ldr	r3, [r2, r3]
 800bcb2:	4a17      	ldr	r2, [pc, #92]	; (800bd10 <f_write+0x32c>)
 800bcb4:	5a9b      	ldrh	r3, [r3, r2]
 800bcb6:	001a      	movs	r2, r3
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4353      	muls	r3, r2
 800bcbc:	623b      	str	r3, [r7, #32]
				continue;
 800bcbe:	e075      	b.n	800bdac <f_write+0x3c8>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4a19      	ldr	r2, [pc, #100]	; (800bd28 <f_write+0x344>)
 800bcc4:	589b      	ldr	r3, [r3, r2]
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d031      	beq.n	800bd30 <f_write+0x34c>
				if (fp->fptr < fp->fsize &&
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4a0f      	ldr	r2, [pc, #60]	; (800bd0c <f_write+0x328>)
 800bcd0:	589a      	ldr	r2, [r3, r2]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4915      	ldr	r1, [pc, #84]	; (800bd2c <f_write+0x348>)
 800bcd6:	585b      	ldr	r3, [r3, r1]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d229      	bcs.n	800bd30 <f_write+0x34c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	2380      	movs	r3, #128	; 0x80
 800bce0:	015b      	lsls	r3, r3, #5
 800bce2:	58d3      	ldr	r3, [r2, r3]
 800bce4:	4a0f      	ldr	r2, [pc, #60]	; (800bd24 <f_write+0x340>)
 800bce6:	5c98      	ldrb	r0, [r3, r2]
 800bce8:	68f9      	ldr	r1, [r7, #12]
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	2301      	movs	r3, #1
 800bcee:	f7fd fa99 	bl	8009224 <disk_read>
 800bcf2:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 800bcf4:	d01c      	beq.n	800bd30 <f_write+0x34c>
						ABORT(fp->fs, FR_DISK_ERR);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	4a02      	ldr	r2, [pc, #8]	; (800bd04 <f_write+0x320>)
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	5499      	strb	r1, [r3, r2]
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e088      	b.n	800be14 <f_write+0x430>
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	00001007 	.word	0x00001007
 800bd08:	00001006 	.word	0x00001006
 800bd0c:	00001008 	.word	0x00001008
 800bd10:	0000100a 	.word	0x0000100a
 800bd14:	00001002 	.word	0x00001002
 800bd18:	00001010 	.word	0x00001010
 800bd1c:	00001024 	.word	0x00001024
 800bd20:	00001014 	.word	0x00001014
 800bd24:	00001001 	.word	0x00001001
 800bd28:	00001018 	.word	0x00001018
 800bd2c:	0000100c 	.word	0x0000100c
			}
#endif
			fp->dsect = sect;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	493a      	ldr	r1, [pc, #232]	; (800be1c <f_write+0x438>)
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	505a      	str	r2, [r3, r1]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	2380      	movs	r3, #128	; 0x80
 800bd3c:	015b      	lsls	r3, r3, #5
 800bd3e:	58d3      	ldr	r3, [r2, r3]
 800bd40:	4a37      	ldr	r2, [pc, #220]	; (800be20 <f_write+0x43c>)
 800bd42:	5a9b      	ldrh	r3, [r3, r2]
 800bd44:	001c      	movs	r4, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	4a36      	ldr	r2, [pc, #216]	; (800be24 <f_write+0x440>)
 800bd4a:	5898      	ldr	r0, [r3, r2]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	2380      	movs	r3, #128	; 0x80
 800bd50:	015b      	lsls	r3, r3, #5
 800bd52:	58d3      	ldr	r3, [r2, r3]
 800bd54:	4a32      	ldr	r2, [pc, #200]	; (800be20 <f_write+0x43c>)
 800bd56:	5a9b      	ldrh	r3, [r3, r2]
 800bd58:	0019      	movs	r1, r3
 800bd5a:	f7f4 fa75 	bl	8000248 <__aeabi_uidivmod>
 800bd5e:	000b      	movs	r3, r1
 800bd60:	1ae3      	subs	r3, r4, r3
 800bd62:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bd64:	6a3a      	ldr	r2, [r7, #32]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d901      	bls.n	800bd70 <f_write+0x38c>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4a2c      	ldr	r2, [pc, #176]	; (800be24 <f_write+0x440>)
 800bd74:	5898      	ldr	r0, [r3, r2]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	2380      	movs	r3, #128	; 0x80
 800bd7a:	015b      	lsls	r3, r3, #5
 800bd7c:	58d3      	ldr	r3, [r2, r3]
 800bd7e:	4a28      	ldr	r2, [pc, #160]	; (800be20 <f_write+0x43c>)
 800bd80:	5a9b      	ldrh	r3, [r3, r2]
 800bd82:	0019      	movs	r1, r3
 800bd84:	f7f4 fa60 	bl	8000248 <__aeabi_uidivmod>
 800bd88:	000b      	movs	r3, r1
 800bd8a:	001a      	movs	r2, r3
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	189b      	adds	r3, r3, r2
 800bd90:	6a3a      	ldr	r2, [r7, #32]
 800bd92:	69b9      	ldr	r1, [r7, #24]
 800bd94:	0018      	movs	r0, r3
 800bd96:	f7fd fabd 	bl	8009314 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4a22      	ldr	r2, [pc, #136]	; (800be28 <f_write+0x444>)
 800bd9e:	5c9b      	ldrb	r3, [r3, r2]
 800bda0:	2240      	movs	r2, #64	; 0x40
 800bda2:	4313      	orrs	r3, r2
 800bda4:	b2d9      	uxtb	r1, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	4a1f      	ldr	r2, [pc, #124]	; (800be28 <f_write+0x444>)
 800bdaa:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	18d3      	adds	r3, r2, r3
 800bdb2:	61bb      	str	r3, [r7, #24]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4a1b      	ldr	r2, [pc, #108]	; (800be24 <f_write+0x440>)
 800bdb8:	589a      	ldr	r2, [r3, r2]
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	18d2      	adds	r2, r2, r3
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4918      	ldr	r1, [pc, #96]	; (800be24 <f_write+0x440>)
 800bdc2:	505a      	str	r2, [r3, r1]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	18d2      	adds	r2, r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d000      	beq.n	800bde0 <f_write+0x3fc>
 800bdde:	e63c      	b.n	800ba5a <f_write+0x76>
 800bde0:	e000      	b.n	800bde4 <f_write+0x400>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bde2:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4a0f      	ldr	r2, [pc, #60]	; (800be24 <f_write+0x440>)
 800bde8:	589a      	ldr	r2, [r3, r2]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	490f      	ldr	r1, [pc, #60]	; (800be2c <f_write+0x448>)
 800bdee:	585b      	ldr	r3, [r3, r1]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d905      	bls.n	800be00 <f_write+0x41c>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	4a0b      	ldr	r2, [pc, #44]	; (800be24 <f_write+0x440>)
 800bdf8:	589a      	ldr	r2, [r3, r2]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	490b      	ldr	r1, [pc, #44]	; (800be2c <f_write+0x448>)
 800bdfe:	505a      	str	r2, [r3, r1]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4a09      	ldr	r2, [pc, #36]	; (800be28 <f_write+0x444>)
 800be04:	5c9b      	ldrb	r3, [r3, r2]
 800be06:	2220      	movs	r2, #32
 800be08:	4313      	orrs	r3, r2
 800be0a:	b2d9      	uxtb	r1, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	4a06      	ldr	r2, [pc, #24]	; (800be28 <f_write+0x444>)
 800be10:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 800be12:	2300      	movs	r3, #0
}
 800be14:	0018      	movs	r0, r3
 800be16:	46bd      	mov	sp, r7
 800be18:	b00a      	add	sp, #40	; 0x28
 800be1a:	bdb0      	pop	{r4, r5, r7, pc}
 800be1c:	00001018 	.word	0x00001018
 800be20:	0000100a 	.word	0x0000100a
 800be24:	00001008 	.word	0x00001008
 800be28:	00001006 	.word	0x00001006
 800be2c:	0000100c 	.word	0x0000100c

0800be30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800be30:	b5b0      	push	{r4, r5, r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800be38:	2517      	movs	r5, #23
 800be3a:	197c      	adds	r4, r7, r5
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	0018      	movs	r0, r3
 800be40:	f7ff fabc 	bl	800b3bc <validate>
 800be44:	0003      	movs	r3, r0
 800be46:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800be48:	197b      	adds	r3, r7, r5
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d000      	beq.n	800be52 <f_sync+0x22>
 800be50:	e0b2      	b.n	800bfb8 <f_sync+0x188>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a5c      	ldr	r2, [pc, #368]	; (800bfc8 <f_sync+0x198>)
 800be56:	5c9b      	ldrb	r3, [r3, r2]
 800be58:	001a      	movs	r2, r3
 800be5a:	2320      	movs	r3, #32
 800be5c:	4013      	ands	r3, r2
 800be5e:	d100      	bne.n	800be62 <f_sync+0x32>
 800be60:	e0aa      	b.n	800bfb8 <f_sync+0x188>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a58      	ldr	r2, [pc, #352]	; (800bfc8 <f_sync+0x198>)
 800be66:	5c9b      	ldrb	r3, [r3, r2]
 800be68:	001a      	movs	r2, r3
 800be6a:	2340      	movs	r3, #64	; 0x40
 800be6c:	4013      	ands	r3, r2
 800be6e:	d019      	beq.n	800bea4 <f_sync+0x74>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	2380      	movs	r3, #128	; 0x80
 800be74:	015b      	lsls	r3, r3, #5
 800be76:	58d3      	ldr	r3, [r2, r3]
 800be78:	4a54      	ldr	r2, [pc, #336]	; (800bfcc <f_sync+0x19c>)
 800be7a:	5c98      	ldrb	r0, [r3, r2]
 800be7c:	6879      	ldr	r1, [r7, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a53      	ldr	r2, [pc, #332]	; (800bfd0 <f_sync+0x1a0>)
 800be82:	589a      	ldr	r2, [r3, r2]
 800be84:	2301      	movs	r3, #1
 800be86:	f7fd f9f5 	bl	8009274 <disk_write>
 800be8a:	1e03      	subs	r3, r0, #0
 800be8c:	d001      	beq.n	800be92 <f_sync+0x62>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800be8e:	2301      	movs	r3, #1
 800be90:	e095      	b.n	800bfbe <f_sync+0x18e>
				fp->flag &= ~FA__DIRTY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a4c      	ldr	r2, [pc, #304]	; (800bfc8 <f_sync+0x198>)
 800be96:	5c9b      	ldrb	r3, [r3, r2]
 800be98:	2240      	movs	r2, #64	; 0x40
 800be9a:	4393      	bics	r3, r2
 800be9c:	b2d9      	uxtb	r1, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a49      	ldr	r2, [pc, #292]	; (800bfc8 <f_sync+0x198>)
 800bea2:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	2380      	movs	r3, #128	; 0x80
 800bea8:	015b      	lsls	r3, r3, #5
 800beaa:	58d2      	ldr	r2, [r2, r3]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4949      	ldr	r1, [pc, #292]	; (800bfd4 <f_sync+0x1a4>)
 800beb0:	585b      	ldr	r3, [r3, r1]
 800beb2:	2517      	movs	r5, #23
 800beb4:	197c      	adds	r4, r7, r5
 800beb6:	0019      	movs	r1, r3
 800beb8:	0010      	movs	r0, r2
 800beba:	f7fd fc65 	bl	8009788 <move_window>
 800bebe:	0003      	movs	r3, r0
 800bec0:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 800bec2:	002c      	movs	r4, r5
 800bec4:	193b      	adds	r3, r7, r4
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d175      	bne.n	800bfb8 <f_sync+0x188>
				dir = fp->dir_ptr;
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	2381      	movs	r3, #129	; 0x81
 800bed0:	015b      	lsls	r3, r3, #5
 800bed2:	58d3      	ldr	r3, [r2, r3]
 800bed4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	330b      	adds	r3, #11
 800beda:	781a      	ldrb	r2, [r3, #0]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	330b      	adds	r3, #11
 800bee0:	2120      	movs	r1, #32
 800bee2:	430a      	orrs	r2, r1
 800bee4:	b2d2      	uxtb	r2, r2
 800bee6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a3b      	ldr	r2, [pc, #236]	; (800bfd8 <f_sync+0x1a8>)
 800beec:	589a      	ldr	r2, [r3, r2]
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	331c      	adds	r3, #28
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a37      	ldr	r2, [pc, #220]	; (800bfd8 <f_sync+0x1a8>)
 800befa:	589b      	ldr	r3, [r3, r2]
 800befc:	b29b      	uxth	r3, r3
 800befe:	0a1b      	lsrs	r3, r3, #8
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	331d      	adds	r3, #29
 800bf06:	b2d2      	uxtb	r2, r2
 800bf08:	701a      	strb	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a32      	ldr	r2, [pc, #200]	; (800bfd8 <f_sync+0x1a8>)
 800bf0e:	589b      	ldr	r3, [r3, r2]
 800bf10:	0c1a      	lsrs	r2, r3, #16
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	331e      	adds	r3, #30
 800bf16:	b2d2      	uxtb	r2, r2
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a2e      	ldr	r2, [pc, #184]	; (800bfd8 <f_sync+0x1a8>)
 800bf1e:	589b      	ldr	r3, [r3, r2]
 800bf20:	0e1a      	lsrs	r2, r3, #24
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	331f      	adds	r3, #31
 800bf26:	b2d2      	uxtb	r2, r2
 800bf28:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a2b      	ldr	r2, [pc, #172]	; (800bfdc <f_sync+0x1ac>)
 800bf2e:	589a      	ldr	r2, [r3, r2]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	0011      	movs	r1, r2
 800bf34:	0018      	movs	r0, r3
 800bf36:	f7fe fbce 	bl	800a6d6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800bf3a:	f7fd f8b5 	bl	80090a8 <get_fattime>
 800bf3e:	0003      	movs	r3, r0
 800bf40:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	3316      	adds	r3, #22
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	701a      	strb	r2, [r3, #0]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	0a1b      	lsrs	r3, r3, #8
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	3317      	adds	r3, #23
 800bf58:	b2d2      	uxtb	r2, r2
 800bf5a:	701a      	strb	r2, [r3, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	0c1a      	lsrs	r2, r3, #16
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	3318      	adds	r3, #24
 800bf64:	b2d2      	uxtb	r2, r2
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	0e1a      	lsrs	r2, r3, #24
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	3319      	adds	r3, #25
 800bf70:	b2d2      	uxtb	r2, r2
 800bf72:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	3312      	adds	r3, #18
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	3313      	adds	r3, #19
 800bf80:	2200      	movs	r2, #0
 800bf82:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a10      	ldr	r2, [pc, #64]	; (800bfc8 <f_sync+0x198>)
 800bf88:	5c9b      	ldrb	r3, [r3, r2]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	4393      	bics	r3, r2
 800bf8e:	b2d9      	uxtb	r1, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a0d      	ldr	r2, [pc, #52]	; (800bfc8 <f_sync+0x198>)
 800bf94:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	2380      	movs	r3, #128	; 0x80
 800bf9a:	015b      	lsls	r3, r3, #5
 800bf9c:	58d3      	ldr	r3, [r2, r3]
 800bf9e:	4a10      	ldr	r2, [pc, #64]	; (800bfe0 <f_sync+0x1b0>)
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	5499      	strb	r1, [r3, r2]
				res = sync_fs(fp->fs);
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	2380      	movs	r3, #128	; 0x80
 800bfa8:	015b      	lsls	r3, r3, #5
 800bfaa:	58d3      	ldr	r3, [r2, r3]
 800bfac:	193c      	adds	r4, r7, r4
 800bfae:	0018      	movs	r0, r3
 800bfb0:	f7fd fc24 	bl	80097fc <sync_fs>
 800bfb4:	0003      	movs	r3, r0
 800bfb6:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800bfb8:	2317      	movs	r3, #23
 800bfba:	18fb      	adds	r3, r7, r3
 800bfbc:	781b      	ldrb	r3, [r3, #0]
}
 800bfbe:	0018      	movs	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	b006      	add	sp, #24
 800bfc4:	bdb0      	pop	{r4, r5, r7, pc}
 800bfc6:	46c0      	nop			; (mov r8, r8)
 800bfc8:	00001006 	.word	0x00001006
 800bfcc:	00001001 	.word	0x00001001
 800bfd0:	00001018 	.word	0x00001018
 800bfd4:	0000101c 	.word	0x0000101c
 800bfd8:	0000100c 	.word	0x0000100c
 800bfdc:	00001010 	.word	0x00001010
 800bfe0:	00001004 	.word	0x00001004

0800bfe4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bfe4:	b5b0      	push	{r4, r5, r7, lr}
 800bfe6:	b08e      	sub	sp, #56	; 0x38
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800bff0:	2537      	movs	r5, #55	; 0x37
 800bff2:	197c      	adds	r4, r7, r5
 800bff4:	230c      	movs	r3, #12
 800bff6:	18f9      	adds	r1, r7, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	0018      	movs	r0, r3
 800bffe:	f7fe fe83 	bl	800ad08 <find_volume>
 800c002:	0003      	movs	r3, r0
 800c004:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800c00c:	197b      	adds	r3, r7, r5
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d000      	beq.n	800c016 <f_getfree+0x32>
 800c014:	e0bb      	b.n	800c18e <f_getfree+0x1aa>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	4a60      	ldr	r2, [pc, #384]	; (800c19c <f_getfree+0x1b8>)
 800c01a:	589a      	ldr	r2, [r3, r2]
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	4960      	ldr	r1, [pc, #384]	; (800c1a0 <f_getfree+0x1bc>)
 800c020:	585b      	ldr	r3, [r3, r1]
 800c022:	3b02      	subs	r3, #2
 800c024:	429a      	cmp	r2, r3
 800c026:	d805      	bhi.n	800c034 <f_getfree+0x50>
			*nclst = fs->free_clust;
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	4a5c      	ldr	r2, [pc, #368]	; (800c19c <f_getfree+0x1b8>)
 800c02c:	589a      	ldr	r2, [r3, r2]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	e0ac      	b.n	800c18e <f_getfree+0x1aa>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800c034:	201b      	movs	r0, #27
 800c036:	183b      	adds	r3, r7, r0
 800c038:	69f9      	ldr	r1, [r7, #28]
 800c03a:	2280      	movs	r2, #128	; 0x80
 800c03c:	0152      	lsls	r2, r2, #5
 800c03e:	5c8a      	ldrb	r2, [r1, r2]
 800c040:	701a      	strb	r2, [r3, #0]
			n = 0;
 800c042:	2300      	movs	r3, #0
 800c044:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800c046:	183b      	adds	r3, r7, r0
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d129      	bne.n	800c0a2 <f_getfree+0xbe>
				clst = 2;
 800c04e:	2302      	movs	r3, #2
 800c050:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800c052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	0011      	movs	r1, r2
 800c058:	0018      	movs	r0, r3
 800c05a:	f7fd fcc9 	bl	80099f0 <get_fat>
 800c05e:	0003      	movs	r3, r0
 800c060:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	3301      	adds	r3, #1
 800c066:	d104      	bne.n	800c072 <f_getfree+0x8e>
 800c068:	2337      	movs	r3, #55	; 0x37
 800c06a:	18fb      	adds	r3, r7, r3
 800c06c:	2201      	movs	r2, #1
 800c06e:	701a      	strb	r2, [r3, #0]
 800c070:	e07d      	b.n	800c16e <f_getfree+0x18a>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d104      	bne.n	800c082 <f_getfree+0x9e>
 800c078:	2337      	movs	r3, #55	; 0x37
 800c07a:	18fb      	adds	r3, r7, r3
 800c07c:	2202      	movs	r2, #2
 800c07e:	701a      	strb	r2, [r3, #0]
 800c080:	e075      	b.n	800c16e <f_getfree+0x18a>
					if (stat == 0) n++;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <f_getfree+0xaa>
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	3301      	adds	r3, #1
 800c08c:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	3301      	adds	r3, #1
 800c092:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	4a42      	ldr	r2, [pc, #264]	; (800c1a0 <f_getfree+0x1bc>)
 800c098:	589b      	ldr	r3, [r3, r2]
 800c09a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d3d8      	bcc.n	800c052 <f_getfree+0x6e>
 800c0a0:	e065      	b.n	800c16e <f_getfree+0x18a>
			} else {
				clst = fs->n_fatent;
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	4a3e      	ldr	r2, [pc, #248]	; (800c1a0 <f_getfree+0x1bc>)
 800c0a6:	589b      	ldr	r3, [r3, r2]
 800c0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800c0aa:	69fa      	ldr	r2, [r7, #28]
 800c0ac:	2381      	movs	r3, #129	; 0x81
 800c0ae:	015b      	lsls	r3, r3, #5
 800c0b0:	58d3      	ldr	r3, [r2, r3]
 800c0b2:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d115      	bne.n	800c0ee <f_getfree+0x10a>
						res = move_window(fs, sect++);
 800c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	62ba      	str	r2, [r7, #40]	; 0x28
 800c0c8:	2537      	movs	r5, #55	; 0x37
 800c0ca:	197c      	adds	r4, r7, r5
 800c0cc:	69fa      	ldr	r2, [r7, #28]
 800c0ce:	0019      	movs	r1, r3
 800c0d0:	0010      	movs	r0, r2
 800c0d2:	f7fd fb59 	bl	8009788 <move_window>
 800c0d6:	0003      	movs	r3, r0
 800c0d8:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 800c0da:	197b      	adds	r3, r7, r5
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d144      	bne.n	800c16c <f_getfree+0x188>
						p = fs->win.d8;
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	4a2e      	ldr	r2, [pc, #184]	; (800c1a4 <f_getfree+0x1c0>)
 800c0ea:	5a9b      	ldrh	r3, [r3, r2]
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800c0ee:	231b      	movs	r3, #27
 800c0f0:	18fb      	adds	r3, r7, r3
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d115      	bne.n	800c124 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	021b      	lsls	r3, r3, #8
 800c100:	b21a      	sxth	r2, r3
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	b21b      	sxth	r3, r3
 800c108:	4313      	orrs	r3, r2
 800c10a:	b21b      	sxth	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d102      	bne.n	800c116 <f_getfree+0x132>
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	3301      	adds	r3, #1
 800c114:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	3302      	adds	r3, #2
 800c11a:	623b      	str	r3, [r7, #32]
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	3b02      	subs	r3, #2
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
 800c122:	e01c      	b.n	800c15e <f_getfree+0x17a>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	3303      	adds	r3, #3
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	061a      	lsls	r2, r3, #24
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	3302      	adds	r3, #2
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	041b      	lsls	r3, r3, #16
 800c134:	4313      	orrs	r3, r2
 800c136:	6a3a      	ldr	r2, [r7, #32]
 800c138:	3201      	adds	r2, #1
 800c13a:	7812      	ldrb	r2, [r2, #0]
 800c13c:	0212      	lsls	r2, r2, #8
 800c13e:	4313      	orrs	r3, r2
 800c140:	6a3a      	ldr	r2, [r7, #32]
 800c142:	7812      	ldrb	r2, [r2, #0]
 800c144:	4313      	orrs	r3, r2
 800c146:	011b      	lsls	r3, r3, #4
 800c148:	091b      	lsrs	r3, r3, #4
 800c14a:	d102      	bne.n	800c152 <f_getfree+0x16e>
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	3301      	adds	r3, #1
 800c150:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800c152:	6a3b      	ldr	r3, [r7, #32]
 800c154:	3304      	adds	r3, #4
 800c156:	623b      	str	r3, [r7, #32]
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	3b04      	subs	r3, #4
 800c15c:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	3b01      	subs	r3, #1
 800c162:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1a8      	bne.n	800c0bc <f_getfree+0xd8>
 800c16a:	e000      	b.n	800c16e <f_getfree+0x18a>
						if (res != FR_OK) break;
 800c16c:	46c0      	nop			; (mov r8, r8)
			}
			fs->free_clust = n;
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	490a      	ldr	r1, [pc, #40]	; (800c19c <f_getfree+0x1b8>)
 800c172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c174:	505a      	str	r2, [r3, r1]
			fs->fsi_flag |= 1;
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	4a0b      	ldr	r2, [pc, #44]	; (800c1a8 <f_getfree+0x1c4>)
 800c17a:	5c9b      	ldrb	r3, [r3, r2]
 800c17c:	2201      	movs	r2, #1
 800c17e:	4313      	orrs	r3, r2
 800c180:	b2d9      	uxtb	r1, r3
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	4a08      	ldr	r2, [pc, #32]	; (800c1a8 <f_getfree+0x1c4>)
 800c186:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c18c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800c18e:	2337      	movs	r3, #55	; 0x37
 800c190:	18fb      	adds	r3, r7, r3
 800c192:	781b      	ldrb	r3, [r3, #0]
}
 800c194:	0018      	movs	r0, r3
 800c196:	46bd      	mov	sp, r7
 800c198:	b00e      	add	sp, #56	; 0x38
 800c19a:	bdb0      	pop	{r4, r5, r7, pc}
 800c19c:	00001010 	.word	0x00001010
 800c1a0:	00001014 	.word	0x00001014
 800c1a4:	0000100a 	.word	0x0000100a
 800c1a8:	00001005 	.word	0x00001005

0800c1ac <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	000a      	movs	r2, r1
 800c1b6:	1cfb      	adds	r3, r7, #3
 800c1b8:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800c1ba:	1cfb      	adds	r3, r7, #3
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	2b0a      	cmp	r3, #10
 800c1c0:	d104      	bne.n	800c1cc <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	210d      	movs	r1, #13
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	f7ff fff0 	bl	800c1ac <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	db26      	blt.n	800c226 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	60fa      	str	r2, [r7, #12]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	18d3      	adds	r3, r2, r3
 800c1e2:	1cfa      	adds	r2, r7, #3
 800c1e4:	7812      	ldrb	r2, [r2, #0]
 800c1e6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b3c      	cmp	r3, #60	; 0x3c
 800c1ec:	dd12      	ble.n	800c214 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6818      	ldr	r0, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	330c      	adds	r3, #12
 800c1f6:	0019      	movs	r1, r3
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	2308      	movs	r3, #8
 800c1fc:	18fb      	adds	r3, r7, r3
 800c1fe:	f7ff fbf1 	bl	800b9e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	429a      	cmp	r2, r3
 800c208:	d101      	bne.n	800c20e <putc_bfd+0x62>
 800c20a:	2300      	movs	r3, #0
 800c20c:	e001      	b.n	800c212 <putc_bfd+0x66>
 800c20e:	2301      	movs	r3, #1
 800c210:	425b      	negs	r3, r3
 800c212:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	609a      	str	r2, [r3, #8]
 800c224:	e000      	b.n	800c228 <putc_bfd+0x7c>
	if (i < 0) return;
 800c226:	46c0      	nop			; (mov r8, r8)
}
 800c228:	46bd      	mov	sp, r7
 800c22a:	b004      	add	sp, #16
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800c230:	b40e      	push	{r1, r2, r3}
 800c232:	b5b0      	push	{r4, r5, r7, lr}
 800c234:	b0a3      	sub	sp, #140	; 0x8c
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 800c23a:	2108      	movs	r1, #8
 800c23c:	187b      	adds	r3, r7, r1
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	601a      	str	r2, [r3, #0]
	pb.nchr = pb.idx = 0;
 800c242:	187b      	adds	r3, r7, r1
 800c244:	2200      	movs	r2, #0
 800c246:	605a      	str	r2, [r3, #4]
 800c248:	187b      	adds	r3, r7, r1
 800c24a:	685a      	ldr	r2, [r3, #4]
 800c24c:	187b      	adds	r3, r7, r1
 800c24e:	609a      	str	r2, [r3, #8]

	va_start(arp, fmt);
 800c250:	2398      	movs	r3, #152	; 0x98
 800c252:	2208      	movs	r2, #8
 800c254:	189b      	adds	r3, r3, r2
 800c256:	19db      	adds	r3, r3, r7
 800c258:	66bb      	str	r3, [r7, #104]	; 0x68

	for (;;) {
		c = *fmt++;
 800c25a:	2194      	movs	r1, #148	; 0x94
 800c25c:	2008      	movs	r0, #8
 800c25e:	180b      	adds	r3, r1, r0
 800c260:	19db      	adds	r3, r3, r7
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	1809      	adds	r1, r1, r0
 800c268:	19c9      	adds	r1, r1, r7
 800c26a:	600a      	str	r2, [r1, #0]
 800c26c:	2173      	movs	r1, #115	; 0x73
 800c26e:	187a      	adds	r2, r7, r1
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	7013      	strb	r3, [r2, #0]
		if (c == 0) break;			/* End of string */
 800c274:	000a      	movs	r2, r1
 800c276:	18bb      	adds	r3, r7, r2
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d100      	bne.n	800c280 <f_printf+0x50>
 800c27e:	e1dc      	b.n	800c63a <f_printf+0x40a>
		if (c != '%') {				/* Non escape character */
 800c280:	18bb      	adds	r3, r7, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b25      	cmp	r3, #37	; 0x25
 800c286:	d008      	beq.n	800c29a <f_printf+0x6a>
			putc_bfd(&pb, c);
 800c288:	18bb      	adds	r3, r7, r2
 800c28a:	781a      	ldrb	r2, [r3, #0]
 800c28c:	0003      	movs	r3, r0
 800c28e:	18fb      	adds	r3, r7, r3
 800c290:	0011      	movs	r1, r2
 800c292:	0018      	movs	r0, r3
 800c294:	f7ff ff8a 	bl	800c1ac <putc_bfd>
			continue;
 800c298:	e1ce      	b.n	800c638 <f_printf+0x408>
		}
		w = f = 0;
 800c29a:	2487      	movs	r4, #135	; 0x87
 800c29c:	193b      	adds	r3, r7, r4
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	67bb      	str	r3, [r7, #120]	; 0x78
		c = *fmt++;
 800c2a6:	2194      	movs	r1, #148	; 0x94
 800c2a8:	2508      	movs	r5, #8
 800c2aa:	194b      	adds	r3, r1, r5
 800c2ac:	19db      	adds	r3, r3, r7
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	1948      	adds	r0, r1, r5
 800c2b4:	19c0      	adds	r0, r0, r7
 800c2b6:	6002      	str	r2, [r0, #0]
 800c2b8:	2073      	movs	r0, #115	; 0x73
 800c2ba:	183a      	adds	r2, r7, r0
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padding */
 800c2c0:	183b      	adds	r3, r7, r0
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b30      	cmp	r3, #48	; 0x30
 800c2c6:	d10d      	bne.n	800c2e4 <f_printf+0xb4>
			f = 1; c = *fmt++;
 800c2c8:	193b      	adds	r3, r7, r4
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	701a      	strb	r2, [r3, #0]
 800c2ce:	194b      	adds	r3, r1, r5
 800c2d0:	19db      	adds	r3, r3, r7
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	1949      	adds	r1, r1, r5
 800c2d8:	19c9      	adds	r1, r1, r7
 800c2da:	600a      	str	r2, [r1, #0]
 800c2dc:	183a      	adds	r2, r7, r0
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	7013      	strb	r3, [r2, #0]
 800c2e2:	e02d      	b.n	800c340 <f_printf+0x110>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800c2e4:	2173      	movs	r1, #115	; 0x73
 800c2e6:	187b      	adds	r3, r7, r1
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	2b2d      	cmp	r3, #45	; 0x2d
 800c2ec:	d128      	bne.n	800c340 <f_printf+0x110>
				f = 2; c = *fmt++;
 800c2ee:	2387      	movs	r3, #135	; 0x87
 800c2f0:	18fb      	adds	r3, r7, r3
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	2094      	movs	r0, #148	; 0x94
 800c2f8:	2408      	movs	r4, #8
 800c2fa:	1903      	adds	r3, r0, r4
 800c2fc:	19db      	adds	r3, r3, r7
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	1900      	adds	r0, r0, r4
 800c304:	19c0      	adds	r0, r0, r7
 800c306:	6002      	str	r2, [r0, #0]
 800c308:	187a      	adds	r2, r7, r1
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	7013      	strb	r3, [r2, #0]
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800c30e:	e017      	b.n	800c340 <f_printf+0x110>
			w = w * 10 + c - '0';
 800c310:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c312:	0013      	movs	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	189b      	adds	r3, r3, r2
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	001a      	movs	r2, r3
 800c31c:	2173      	movs	r1, #115	; 0x73
 800c31e:	187b      	adds	r3, r7, r1
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	18d3      	adds	r3, r2, r3
 800c324:	3b30      	subs	r3, #48	; 0x30
 800c326:	67bb      	str	r3, [r7, #120]	; 0x78
			c = *fmt++;
 800c328:	2094      	movs	r0, #148	; 0x94
 800c32a:	2408      	movs	r4, #8
 800c32c:	1903      	adds	r3, r0, r4
 800c32e:	19db      	adds	r3, r3, r7
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	1900      	adds	r0, r0, r4
 800c336:	19c0      	adds	r0, r0, r7
 800c338:	6002      	str	r2, [r0, #0]
 800c33a:	187a      	adds	r2, r7, r1
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	7013      	strb	r3, [r2, #0]
		while (IsDigit(c)) {		/* Precision */
 800c340:	2273      	movs	r2, #115	; 0x73
 800c342:	18bb      	adds	r3, r7, r2
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b2f      	cmp	r3, #47	; 0x2f
 800c348:	d903      	bls.n	800c352 <f_printf+0x122>
 800c34a:	18bb      	adds	r3, r7, r2
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	2b39      	cmp	r3, #57	; 0x39
 800c350:	d9de      	bls.n	800c310 <f_printf+0xe0>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800c352:	2273      	movs	r2, #115	; 0x73
 800c354:	18bb      	adds	r3, r7, r2
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	2b6c      	cmp	r3, #108	; 0x6c
 800c35a:	d003      	beq.n	800c364 <f_printf+0x134>
 800c35c:	18bb      	adds	r3, r7, r2
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	2b4c      	cmp	r3, #76	; 0x4c
 800c362:	d113      	bne.n	800c38c <f_printf+0x15c>
			f |= 4; c = *fmt++;
 800c364:	2287      	movs	r2, #135	; 0x87
 800c366:	18bb      	adds	r3, r7, r2
 800c368:	18ba      	adds	r2, r7, r2
 800c36a:	7812      	ldrb	r2, [r2, #0]
 800c36c:	2104      	movs	r1, #4
 800c36e:	430a      	orrs	r2, r1
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	2194      	movs	r1, #148	; 0x94
 800c374:	2008      	movs	r0, #8
 800c376:	180b      	adds	r3, r1, r0
 800c378:	19db      	adds	r3, r3, r7
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	1809      	adds	r1, r1, r0
 800c380:	19c9      	adds	r1, r1, r7
 800c382:	600a      	str	r2, [r1, #0]
 800c384:	2273      	movs	r2, #115	; 0x73
 800c386:	18ba      	adds	r2, r7, r2
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;
 800c38c:	2273      	movs	r2, #115	; 0x73
 800c38e:	18bb      	adds	r3, r7, r2
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d100      	bne.n	800c398 <f_printf+0x168>
 800c396:	e152      	b.n	800c63e <f_printf+0x40e>
		d = c;
 800c398:	2172      	movs	r1, #114	; 0x72
 800c39a:	187b      	adds	r3, r7, r1
 800c39c:	18ba      	adds	r2, r7, r2
 800c39e:	7812      	ldrb	r2, [r2, #0]
 800c3a0:	701a      	strb	r2, [r3, #0]
		if (IsLower(d)) d -= 0x20;
 800c3a2:	187b      	adds	r3, r7, r1
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2b60      	cmp	r3, #96	; 0x60
 800c3a8:	d908      	bls.n	800c3bc <f_printf+0x18c>
 800c3aa:	187b      	adds	r3, r7, r1
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b7a      	cmp	r3, #122	; 0x7a
 800c3b0:	d804      	bhi.n	800c3bc <f_printf+0x18c>
 800c3b2:	187b      	adds	r3, r7, r1
 800c3b4:	187a      	adds	r2, r7, r1
 800c3b6:	7812      	ldrb	r2, [r2, #0]
 800c3b8:	3a20      	subs	r2, #32
 800c3ba:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800c3bc:	2372      	movs	r3, #114	; 0x72
 800c3be:	18fb      	adds	r3, r7, r3
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	3b42      	subs	r3, #66	; 0x42
 800c3c4:	2b16      	cmp	r3, #22
 800c3c6:	d865      	bhi.n	800c494 <f_printf+0x264>
 800c3c8:	009a      	lsls	r2, r3, #2
 800c3ca:	4bb0      	ldr	r3, [pc, #704]	; (800c68c <f_printf+0x45c>)
 800c3cc:	18d3      	adds	r3, r2, r3
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800c3d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3d4:	1d1a      	adds	r2, r3, #4
 800c3d6:	66ba      	str	r2, [r7, #104]	; 0x68
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	66fb      	str	r3, [r7, #108]	; 0x6c
			for (j = 0; p[j]; j++) ;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3e0:	e002      	b.n	800c3e8 <f_printf+0x1b8>
 800c3e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c3ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3ec:	18d3      	adds	r3, r2, r3
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1f6      	bne.n	800c3e2 <f_printf+0x1b2>
			if (!(f & 2)) {
 800c3f4:	2387      	movs	r3, #135	; 0x87
 800c3f6:	18fb      	adds	r3, r7, r3
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	d117      	bne.n	800c430 <f_printf+0x200>
				while (j++ < w) putc_bfd(&pb, ' ');
 800c400:	e005      	b.n	800c40e <f_printf+0x1de>
 800c402:	2308      	movs	r3, #8
 800c404:	18fb      	adds	r3, r7, r3
 800c406:	2120      	movs	r1, #32
 800c408:	0018      	movs	r0, r3
 800c40a:	f7ff fecf 	bl	800c1ac <putc_bfd>
 800c40e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c416:	429a      	cmp	r2, r3
 800c418:	d8f3      	bhi.n	800c402 <f_printf+0x1d2>
			}
			while (*p) putc_bfd(&pb, *p++);
 800c41a:	e009      	b.n	800c430 <f_printf+0x200>
 800c41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c41e:	1c5a      	adds	r2, r3, #1
 800c420:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c422:	781a      	ldrb	r2, [r3, #0]
 800c424:	2308      	movs	r3, #8
 800c426:	18fb      	adds	r3, r7, r3
 800c428:	0011      	movs	r1, r2
 800c42a:	0018      	movs	r0, r3
 800c42c:	f7ff febe 	bl	800c1ac <putc_bfd>
 800c430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1f1      	bne.n	800c41c <f_printf+0x1ec>
			while (j++ < w) putc_bfd(&pb, ' ');
 800c438:	e005      	b.n	800c446 <f_printf+0x216>
 800c43a:	2308      	movs	r3, #8
 800c43c:	18fb      	adds	r3, r7, r3
 800c43e:	2120      	movs	r1, #32
 800c440:	0018      	movs	r0, r3
 800c442:	f7ff feb3 	bl	800c1ac <putc_bfd>
 800c446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c448:	1c5a      	adds	r2, r3, #1
 800c44a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c44c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c44e:	429a      	cmp	r2, r3
 800c450:	d8f3      	bhi.n	800c43a <f_printf+0x20a>
			continue;
 800c452:	e0f1      	b.n	800c638 <f_printf+0x408>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800c454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c456:	1d1a      	adds	r2, r3, #4
 800c458:	66ba      	str	r2, [r7, #104]	; 0x68
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	2308      	movs	r3, #8
 800c460:	18fb      	adds	r3, r7, r3
 800c462:	0011      	movs	r1, r2
 800c464:	0018      	movs	r0, r3
 800c466:	f7ff fea1 	bl	800c1ac <putc_bfd>
 800c46a:	e0e5      	b.n	800c638 <f_printf+0x408>
		case 'B' :					/* Binary */
			r = 2; break;
 800c46c:	2386      	movs	r3, #134	; 0x86
 800c46e:	18fb      	adds	r3, r7, r3
 800c470:	2202      	movs	r2, #2
 800c472:	701a      	strb	r2, [r3, #0]
 800c474:	e018      	b.n	800c4a8 <f_printf+0x278>
		case 'O' :					/* Octal */
			r = 8; break;
 800c476:	2386      	movs	r3, #134	; 0x86
 800c478:	18fb      	adds	r3, r7, r3
 800c47a:	2208      	movs	r2, #8
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	e013      	b.n	800c4a8 <f_printf+0x278>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800c480:	2386      	movs	r3, #134	; 0x86
 800c482:	18fb      	adds	r3, r7, r3
 800c484:	220a      	movs	r2, #10
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	e00e      	b.n	800c4a8 <f_printf+0x278>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800c48a:	2386      	movs	r3, #134	; 0x86
 800c48c:	18fb      	adds	r3, r7, r3
 800c48e:	2210      	movs	r2, #16
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	e009      	b.n	800c4a8 <f_printf+0x278>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800c494:	2373      	movs	r3, #115	; 0x73
 800c496:	18fb      	adds	r3, r7, r3
 800c498:	781a      	ldrb	r2, [r3, #0]
 800c49a:	2308      	movs	r3, #8
 800c49c:	18fb      	adds	r3, r7, r3
 800c49e:	0011      	movs	r1, r2
 800c4a0:	0018      	movs	r0, r3
 800c4a2:	f7ff fe83 	bl	800c1ac <putc_bfd>
 800c4a6:	e0c7      	b.n	800c638 <f_printf+0x408>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800c4a8:	2387      	movs	r3, #135	; 0x87
 800c4aa:	18fb      	adds	r3, r7, r3
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	2204      	movs	r2, #4
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	d004      	beq.n	800c4be <f_printf+0x28e>
 800c4b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4b6:	1d1a      	adds	r2, r3, #4
 800c4b8:	66ba      	str	r2, [r7, #104]	; 0x68
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	e00d      	b.n	800c4da <f_printf+0x2aa>
 800c4be:	2372      	movs	r3, #114	; 0x72
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b44      	cmp	r3, #68	; 0x44
 800c4c6:	d104      	bne.n	800c4d2 <f_printf+0x2a2>
 800c4c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4ca:	1d1a      	adds	r2, r3, #4
 800c4cc:	66ba      	str	r2, [r7, #104]	; 0x68
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	e003      	b.n	800c4da <f_printf+0x2aa>
 800c4d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4d4:	1d1a      	adds	r2, r3, #4
 800c4d6:	66ba      	str	r2, [r7, #104]	; 0x68
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	677b      	str	r3, [r7, #116]	; 0x74
		if (d == 'D' && (v & 0x80000000)) {
 800c4dc:	2372      	movs	r3, #114	; 0x72
 800c4de:	18fb      	adds	r3, r7, r3
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b44      	cmp	r3, #68	; 0x44
 800c4e4:	d10c      	bne.n	800c500 <f_printf+0x2d0>
 800c4e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	da09      	bge.n	800c500 <f_printf+0x2d0>
			v = 0 - v;
 800c4ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4ee:	425b      	negs	r3, r3
 800c4f0:	677b      	str	r3, [r7, #116]	; 0x74
			f |= 8;
 800c4f2:	2287      	movs	r2, #135	; 0x87
 800c4f4:	18bb      	adds	r3, r7, r2
 800c4f6:	18ba      	adds	r2, r7, r2
 800c4f8:	7812      	ldrb	r2, [r2, #0]
 800c4fa:	2108      	movs	r1, #8
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800c500:	2300      	movs	r3, #0
 800c502:	2280      	movs	r2, #128	; 0x80
 800c504:	18ba      	adds	r2, r7, r2
 800c506:	6013      	str	r3, [r2, #0]
		do {
			d = (TCHAR)(v % r); v /= r;
 800c508:	2486      	movs	r4, #134	; 0x86
 800c50a:	193b      	adds	r3, r7, r4
 800c50c:	781a      	ldrb	r2, [r3, #0]
 800c50e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c510:	0011      	movs	r1, r2
 800c512:	0018      	movs	r0, r3
 800c514:	f7f3 fe98 	bl	8000248 <__aeabi_uidivmod>
 800c518:	000b      	movs	r3, r1
 800c51a:	001a      	movs	r2, r3
 800c51c:	2572      	movs	r5, #114	; 0x72
 800c51e:	197b      	adds	r3, r7, r5
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	193b      	adds	r3, r7, r4
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	0019      	movs	r1, r3
 800c528:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c52a:	f7f3 fe07 	bl	800013c <__udivsi3>
 800c52e:	0003      	movs	r3, r0
 800c530:	677b      	str	r3, [r7, #116]	; 0x74
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800c532:	197b      	adds	r3, r7, r5
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b09      	cmp	r3, #9
 800c538:	d90d      	bls.n	800c556 <f_printf+0x326>
 800c53a:	2373      	movs	r3, #115	; 0x73
 800c53c:	18fb      	adds	r3, r7, r3
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b78      	cmp	r3, #120	; 0x78
 800c542:	d101      	bne.n	800c548 <f_printf+0x318>
 800c544:	2327      	movs	r3, #39	; 0x27
 800c546:	e000      	b.n	800c54a <f_printf+0x31a>
 800c548:	2307      	movs	r3, #7
 800c54a:	2172      	movs	r1, #114	; 0x72
 800c54c:	187a      	adds	r2, r7, r1
 800c54e:	1879      	adds	r1, r7, r1
 800c550:	7809      	ldrb	r1, [r1, #0]
 800c552:	185b      	adds	r3, r3, r1
 800c554:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800c556:	2080      	movs	r0, #128	; 0x80
 800c558:	183b      	adds	r3, r7, r0
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	1839      	adds	r1, r7, r0
 800c560:	600a      	str	r2, [r1, #0]
 800c562:	2272      	movs	r2, #114	; 0x72
 800c564:	18ba      	adds	r2, r7, r2
 800c566:	7812      	ldrb	r2, [r2, #0]
 800c568:	3230      	adds	r2, #48	; 0x30
 800c56a:	b2d1      	uxtb	r1, r2
 800c56c:	2254      	movs	r2, #84	; 0x54
 800c56e:	18ba      	adds	r2, r7, r2
 800c570:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof s / sizeof s[0]);
 800c572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c574:	2b00      	cmp	r3, #0
 800c576:	d003      	beq.n	800c580 <f_printf+0x350>
 800c578:	183b      	adds	r3, r7, r0
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b0f      	cmp	r3, #15
 800c57e:	d9c3      	bls.n	800c508 <f_printf+0x2d8>
		if (f & 8) s[i++] = '-';
 800c580:	2387      	movs	r3, #135	; 0x87
 800c582:	18fb      	adds	r3, r7, r3
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2208      	movs	r2, #8
 800c588:	4013      	ands	r3, r2
 800c58a:	d009      	beq.n	800c5a0 <f_printf+0x370>
 800c58c:	2180      	movs	r1, #128	; 0x80
 800c58e:	187b      	adds	r3, r7, r1
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	1879      	adds	r1, r7, r1
 800c596:	600a      	str	r2, [r1, #0]
 800c598:	2254      	movs	r2, #84	; 0x54
 800c59a:	18ba      	adds	r2, r7, r2
 800c59c:	212d      	movs	r1, #45	; 0x2d
 800c59e:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 800c5a0:	2380      	movs	r3, #128	; 0x80
 800c5a2:	18fb      	adds	r3, r7, r3
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5a8:	2387      	movs	r3, #135	; 0x87
 800c5aa:	18fb      	adds	r3, r7, r3
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	d001      	beq.n	800c5b8 <f_printf+0x388>
 800c5b4:	2230      	movs	r2, #48	; 0x30
 800c5b6:	e000      	b.n	800c5ba <f_printf+0x38a>
 800c5b8:	2220      	movs	r2, #32
 800c5ba:	2372      	movs	r3, #114	; 0x72
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800c5c0:	e008      	b.n	800c5d4 <f_printf+0x3a4>
 800c5c2:	2372      	movs	r3, #114	; 0x72
 800c5c4:	18fb      	adds	r3, r7, r3
 800c5c6:	781a      	ldrb	r2, [r3, #0]
 800c5c8:	2308      	movs	r3, #8
 800c5ca:	18fb      	adds	r3, r7, r3
 800c5cc:	0011      	movs	r1, r2
 800c5ce:	0018      	movs	r0, r3
 800c5d0:	f7ff fdec 	bl	800c1ac <putc_bfd>
 800c5d4:	2387      	movs	r3, #135	; 0x87
 800c5d6:	18fb      	adds	r3, r7, r3
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	4013      	ands	r3, r2
 800c5de:	d105      	bne.n	800c5ec <f_printf+0x3bc>
 800c5e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c5e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d8ea      	bhi.n	800c5c2 <f_printf+0x392>
		do putc_bfd(&pb, s[--i]); while (i);
 800c5ec:	2480      	movs	r4, #128	; 0x80
 800c5ee:	193b      	adds	r3, r7, r4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	193a      	adds	r2, r7, r4
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	2354      	movs	r3, #84	; 0x54
 800c5fa:	18fa      	adds	r2, r7, r3
 800c5fc:	193b      	adds	r3, r7, r4
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	18d3      	adds	r3, r2, r3
 800c602:	781a      	ldrb	r2, [r3, #0]
 800c604:	2308      	movs	r3, #8
 800c606:	18fb      	adds	r3, r7, r3
 800c608:	0011      	movs	r1, r2
 800c60a:	0018      	movs	r0, r3
 800c60c:	f7ff fdce 	bl	800c1ac <putc_bfd>
 800c610:	193b      	adds	r3, r7, r4
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e9      	bne.n	800c5ec <f_printf+0x3bc>
		while (j++ < w) putc_bfd(&pb, d);
 800c618:	e008      	b.n	800c62c <f_printf+0x3fc>
 800c61a:	2372      	movs	r3, #114	; 0x72
 800c61c:	18fb      	adds	r3, r7, r3
 800c61e:	781a      	ldrb	r2, [r3, #0]
 800c620:	2308      	movs	r3, #8
 800c622:	18fb      	adds	r3, r7, r3
 800c624:	0011      	movs	r1, r2
 800c626:	0018      	movs	r0, r3
 800c628:	f7ff fdc0 	bl	800c1ac <putc_bfd>
 800c62c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c632:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c634:	429a      	cmp	r2, r3
 800c636:	d8f0      	bhi.n	800c61a <f_printf+0x3ea>
		c = *fmt++;
 800c638:	e60f      	b.n	800c25a <f_printf+0x2a>
		if (c == 0) break;			/* End of string */
 800c63a:	46c0      	nop			; (mov r8, r8)
 800c63c:	e000      	b.n	800c640 <f_printf+0x410>
		if (!c) break;
 800c63e:	46c0      	nop			; (mov r8, r8)
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800c640:	2508      	movs	r5, #8
 800c642:	197b      	adds	r3, r7, r5
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	db17      	blt.n	800c67a <f_printf+0x44a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800c64a:	197b      	adds	r3, r7, r5
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	197b      	adds	r3, r7, r5
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	001c      	movs	r4, r3
 800c654:	2364      	movs	r3, #100	; 0x64
 800c656:	18fa      	adds	r2, r7, r3
 800c658:	197b      	adds	r3, r7, r5
 800c65a:	330c      	adds	r3, #12
 800c65c:	0019      	movs	r1, r3
 800c65e:	0013      	movs	r3, r2
 800c660:	0022      	movs	r2, r4
 800c662:	f7ff f9bf 	bl	800b9e4 <f_write>
 800c666:	1e03      	subs	r3, r0, #0
 800c668:	d107      	bne.n	800c67a <f_printf+0x44a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800c66a:	197b      	adds	r3, r7, r5
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c670:	4293      	cmp	r3, r2
 800c672:	d102      	bne.n	800c67a <f_printf+0x44a>
 800c674:	197b      	adds	r3, r7, r5
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	e001      	b.n	800c67e <f_printf+0x44e>
	return EOF;
 800c67a:	2301      	movs	r3, #1
 800c67c:	425b      	negs	r3, r3
}
 800c67e:	0018      	movs	r0, r3
 800c680:	46bd      	mov	sp, r7
 800c682:	b023      	add	sp, #140	; 0x8c
 800c684:	bcb0      	pop	{r4, r5, r7}
 800c686:	bc08      	pop	{r3}
 800c688:	b003      	add	sp, #12
 800c68a:	4718      	bx	r3
 800c68c:	080128c4 	.word	0x080128c4

0800c690 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c690:	b590      	push	{r4, r7, lr}
 800c692:	b087      	sub	sp, #28
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	1dfb      	adds	r3, r7, #7
 800c69c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800c69e:	2417      	movs	r4, #23
 800c6a0:	193b      	adds	r3, r7, r4
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800c6a6:	2016      	movs	r0, #22
 800c6a8:	183b      	adds	r3, r7, r0
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 800c6ae:	4b21      	ldr	r3, [pc, #132]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6b0:	7a5b      	ldrb	r3, [r3, #9]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d836      	bhi.n	800c726 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c6b8:	4b1e      	ldr	r3, [pc, #120]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6ba:	7a5b      	ldrb	r3, [r3, #9]
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	001a      	movs	r2, r3
 800c6c0:	4b1c      	ldr	r3, [pc, #112]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c6c6:	4b1b      	ldr	r3, [pc, #108]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6c8:	7a5b      	ldrb	r3, [r3, #9]
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	4a19      	ldr	r2, [pc, #100]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	18d3      	adds	r3, r2, r3
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 800c6d8:	4b16      	ldr	r3, [pc, #88]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6da:	7a5b      	ldrb	r3, [r3, #9]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	001a      	movs	r2, r3
 800c6e0:	4b14      	ldr	r3, [pc, #80]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6e2:	189b      	adds	r3, r3, r2
 800c6e4:	1dfa      	adds	r2, r7, #7
 800c6e6:	7812      	ldrb	r2, [r2, #0]
 800c6e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c6ea:	4b12      	ldr	r3, [pc, #72]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6ec:	7a5b      	ldrb	r3, [r3, #9]
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	b2d1      	uxtb	r1, r2
 800c6f4:	4a0f      	ldr	r2, [pc, #60]	; (800c734 <FATFS_LinkDriverEx+0xa4>)
 800c6f6:	7251      	strb	r1, [r2, #9]
 800c6f8:	183a      	adds	r2, r7, r0
 800c6fa:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800c6fc:	183b      	adds	r3, r7, r0
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	3330      	adds	r3, #48	; 0x30
 800c702:	b2da      	uxtb	r2, r3
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	3301      	adds	r3, #1
 800c70c:	223a      	movs	r2, #58	; 0x3a
 800c70e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	3302      	adds	r3, #2
 800c714:	222f      	movs	r2, #47	; 0x2f
 800c716:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	3303      	adds	r3, #3
 800c71c:	2200      	movs	r2, #0
 800c71e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c720:	193b      	adds	r3, r7, r4
 800c722:	2200      	movs	r2, #0
 800c724:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800c726:	2317      	movs	r3, #23
 800c728:	18fb      	adds	r3, r7, r3
 800c72a:	781b      	ldrb	r3, [r3, #0]
}
 800c72c:	0018      	movs	r0, r3
 800c72e:	46bd      	mov	sp, r7
 800c730:	b007      	add	sp, #28
 800c732:	bd90      	pop	{r4, r7, pc}
 800c734:	20002720 	.word	0x20002720

0800c738 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	0018      	movs	r0, r3
 800c74a:	f7ff ffa1 	bl	800c690 <FATFS_LinkDriverEx>
 800c74e:	0003      	movs	r3, r0
}
 800c750:	0018      	movs	r0, r3
 800c752:	46bd      	mov	sp, r7
 800c754:	b002      	add	sp, #8
 800c756:	bd80      	pop	{r7, pc}

0800c758 <BME280_Init>:
struct BME280_temperature_data_struct Temperature_Data;
struct BME280_humidity_data_struct Humidity_Data;


HAL_StatusTypeDef BME280_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800c758:	b084      	sub	sp, #16
 800c75a:	b5b0      	push	{r4, r5, r7, lr}
 800c75c:	b086      	sub	sp, #24
 800c75e:	af04      	add	r7, sp, #16
 800c760:	2518      	movs	r5, #24
 800c762:	197c      	adds	r4, r7, r5
 800c764:	6020      	str	r0, [r4, #0]
 800c766:	6061      	str	r1, [r4, #4]
 800c768:	60a2      	str	r2, [r4, #8]
 800c76a:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t data;

	// RESET
	data = 0xB6;
 800c76c:	1dbb      	adds	r3, r7, #6
 800c76e:	22b6      	movs	r2, #182	; 0xb6
 800c770:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_reset, 1, &data, 1, Timeout);
 800c772:	234c      	movs	r3, #76	; 0x4c
 800c774:	195b      	adds	r3, r3, r5
 800c776:	19db      	adds	r3, r3, r7
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	1dfc      	adds	r4, r7, #7
 800c77c:	1978      	adds	r0, r7, r5
 800c77e:	9302      	str	r3, [sp, #8]
 800c780:	2301      	movs	r3, #1
 800c782:	9301      	str	r3, [sp, #4]
 800c784:	1dbb      	adds	r3, r7, #6
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	2301      	movs	r3, #1
 800c78a:	22e0      	movs	r2, #224	; 0xe0
 800c78c:	21ec      	movs	r1, #236	; 0xec
 800c78e:	f7f8 fa87 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800c792:	0003      	movs	r3, r0
 800c794:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800c796:	1dfb      	adds	r3, r7, #7
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d002      	beq.n	800c7a4 <BME280_Init+0x4c>
		return status;
 800c79e:	1dfb      	adds	r3, r7, #7
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	e051      	b.n	800c848 <BME280_Init+0xf0>

	// Config data
	data = 0b10000000;
 800c7a4:	1dbb      	adds	r3, r7, #6
 800c7a6:	2280      	movs	r2, #128	; 0x80
 800c7a8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_config, 1, &data, 1, Timeout);
 800c7aa:	234c      	movs	r3, #76	; 0x4c
 800c7ac:	2218      	movs	r2, #24
 800c7ae:	189b      	adds	r3, r3, r2
 800c7b0:	19db      	adds	r3, r3, r7
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	1dfc      	adds	r4, r7, #7
 800c7b6:	18b8      	adds	r0, r7, r2
 800c7b8:	9302      	str	r3, [sp, #8]
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	1dbb      	adds	r3, r7, #6
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	22f5      	movs	r2, #245	; 0xf5
 800c7c6:	21ec      	movs	r1, #236	; 0xec
 800c7c8:	f7f8 fa6a 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800c7cc:	0003      	movs	r3, r0
 800c7ce:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800c7d0:	1dfb      	adds	r3, r7, #7
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <BME280_Init+0x86>
		return status;
 800c7d8:	1dfb      	adds	r3, r7, #7
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	e034      	b.n	800c848 <BME280_Init+0xf0>

	// Humidity measure settings
	data = 0b00000011;
 800c7de:	1dbb      	adds	r3, r7, #6
 800c7e0:	2203      	movs	r2, #3
 800c7e2:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_hum, 1, &data, 1, Timeout);
 800c7e4:	234c      	movs	r3, #76	; 0x4c
 800c7e6:	2218      	movs	r2, #24
 800c7e8:	189b      	adds	r3, r3, r2
 800c7ea:	19db      	adds	r3, r3, r7
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	1dfc      	adds	r4, r7, #7
 800c7f0:	18b8      	adds	r0, r7, r2
 800c7f2:	9302      	str	r3, [sp, #8]
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	1dbb      	adds	r3, r7, #6
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	22f2      	movs	r2, #242	; 0xf2
 800c800:	21ec      	movs	r1, #236	; 0xec
 800c802:	f7f8 fa4d 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800c806:	0003      	movs	r3, r0
 800c808:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800c80a:	1dfb      	adds	r3, r7, #7
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <BME280_Init+0xc0>
		return status;
 800c812:	1dfb      	adds	r3, r7, #7
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	e017      	b.n	800c848 <BME280_Init+0xf0>

	// Temperature/Pressure measure settings
	data = 0b10001111;
 800c818:	1dbb      	adds	r3, r7, #6
 800c81a:	228f      	movs	r2, #143	; 0x8f
 800c81c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
 800c81e:	234c      	movs	r3, #76	; 0x4c
 800c820:	2218      	movs	r2, #24
 800c822:	189b      	adds	r3, r3, r2
 800c824:	19db      	adds	r3, r3, r7
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	1dfc      	adds	r4, r7, #7
 800c82a:	18b8      	adds	r0, r7, r2
 800c82c:	9302      	str	r3, [sp, #8]
 800c82e:	2301      	movs	r3, #1
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	1dbb      	adds	r3, r7, #6
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	2301      	movs	r3, #1
 800c838:	22f4      	movs	r2, #244	; 0xf4
 800c83a:	21ec      	movs	r1, #236	; 0xec
 800c83c:	f7f8 fa30 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800c840:	0003      	movs	r3, r0
 800c842:	7023      	strb	r3, [r4, #0]
	return status;
 800c844:	1dfb      	adds	r3, r7, #7
 800c846:	781b      	ldrb	r3, [r3, #0]
}
 800c848:	0018      	movs	r0, r3
 800c84a:	46bd      	mov	sp, r7
 800c84c:	b002      	add	sp, #8
 800c84e:	bcb0      	pop	{r4, r5, r7}
 800c850:	bc08      	pop	{r3}
 800c852:	b004      	add	sp, #16
 800c854:	4718      	bx	r3

0800c856 <BME280_Get_ID>:


HAL_StatusTypeDef BME280_Get_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 800c856:	b084      	sub	sp, #16
 800c858:	b5b0      	push	{r4, r5, r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af04      	add	r7, sp, #16
 800c85e:	2510      	movs	r5, #16
 800c860:	197c      	adds	r4, r7, r5
 800c862:	6020      	str	r0, [r4, #0]
 800c864:	6061      	str	r1, [r4, #4]
 800c866:	60a2      	str	r2, [r4, #8]
 800c868:	60e3      	str	r3, [r4, #12]
	return HAL_I2C_Mem_Read(&handle, BME280_address, BME280_ID, 1, ptr_ID, 1, Timeout);
 800c86a:	2350      	movs	r3, #80	; 0x50
 800c86c:	002a      	movs	r2, r5
 800c86e:	189b      	adds	r3, r3, r2
 800c870:	19db      	adds	r3, r3, r7
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	18b8      	adds	r0, r7, r2
 800c876:	9302      	str	r3, [sp, #8]
 800c878:	2301      	movs	r3, #1
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	2301      	movs	r3, #1
 800c882:	22d0      	movs	r2, #208	; 0xd0
 800c884:	21ec      	movs	r1, #236	; 0xec
 800c886:	f7f8 fb39 	bl	8004efc <HAL_I2C_Mem_Read>
 800c88a:	0003      	movs	r3, r0
}
 800c88c:	0018      	movs	r0, r3
 800c88e:	46bd      	mov	sp, r7
 800c890:	bcb0      	pop	{r4, r5, r7}
 800c892:	bc08      	pop	{r3}
 800c894:	b004      	add	sp, #16
 800c896:	4718      	bx	r3

0800c898 <BME280_Calib_Read>:


HAL_StatusTypeDef BME280_Calib_Read(I2C_HandleTypeDef handle, BME280_Calib_Data_struct *Calib_data, uint16_t Timeout)
{
 800c898:	b084      	sub	sp, #16
 800c89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c89c:	b091      	sub	sp, #68	; 0x44
 800c89e:	af04      	add	r7, sp, #16
 800c8a0:	2540      	movs	r5, #64	; 0x40
 800c8a2:	2408      	movs	r4, #8
 800c8a4:	192e      	adds	r6, r5, r4
 800c8a6:	19f4      	adds	r4, r6, r7
 800c8a8:	6020      	str	r0, [r4, #0]
 800c8aa:	6061      	str	r1, [r4, #4]
 800c8ac:	60a2      	str	r2, [r4, #8]
 800c8ae:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t calib0[26];
	uint8_t calib1[16];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib1, 1, calib0, 26, Timeout);
 800c8b0:	2350      	movs	r3, #80	; 0x50
 800c8b2:	195b      	adds	r3, r3, r5
 800c8b4:	2108      	movs	r1, #8
 800c8b6:	468c      	mov	ip, r1
 800c8b8:	44bc      	add	ip, r7
 800c8ba:	4463      	add	r3, ip
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	262f      	movs	r6, #47	; 0x2f
 800c8c0:	19bc      	adds	r4, r7, r6
 800c8c2:	2208      	movs	r2, #8
 800c8c4:	18a9      	adds	r1, r5, r2
 800c8c6:	19c8      	adds	r0, r1, r7
 800c8c8:	9302      	str	r3, [sp, #8]
 800c8ca:	231a      	movs	r3, #26
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	2314      	movs	r3, #20
 800c8d0:	18fb      	adds	r3, r7, r3
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	2288      	movs	r2, #136	; 0x88
 800c8d8:	21ec      	movs	r1, #236	; 0xec
 800c8da:	f7f8 fb0f 	bl	8004efc <HAL_I2C_Mem_Read>
 800c8de:	0003      	movs	r3, r0
 800c8e0:	7023      	strb	r3, [r4, #0]
	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib2, 1, calib1, 16, Timeout);
 800c8e2:	2350      	movs	r3, #80	; 0x50
 800c8e4:	195b      	adds	r3, r3, r5
 800c8e6:	2108      	movs	r1, #8
 800c8e8:	468c      	mov	ip, r1
 800c8ea:	44bc      	add	ip, r7
 800c8ec:	4463      	add	r3, ip
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	19bc      	adds	r4, r7, r6
 800c8f2:	2208      	movs	r2, #8
 800c8f4:	18aa      	adds	r2, r5, r2
 800c8f6:	19d0      	adds	r0, r2, r7
 800c8f8:	9302      	str	r3, [sp, #8]
 800c8fa:	2310      	movs	r3, #16
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	1d3b      	adds	r3, r7, #4
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	2301      	movs	r3, #1
 800c904:	22e1      	movs	r2, #225	; 0xe1
 800c906:	21ec      	movs	r1, #236	; 0xec
 800c908:	f7f8 faf8 	bl	8004efc <HAL_I2C_Mem_Read>
 800c90c:	0003      	movs	r3, r0
 800c90e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800c910:	19bb      	adds	r3, r7, r6
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <BME280_Calib_Read+0x86>
		return status;
 800c918:	19bb      	adds	r3, r7, r6
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	e193      	b.n	800cc46 <BME280_Calib_Read+0x3ae>

	Calib_data->dig_T1 = calib0[0];
 800c91e:	2014      	movs	r0, #20
 800c920:	183b      	adds	r3, r7, r0
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	b29a      	uxth	r2, r3
 800c926:	218c      	movs	r1, #140	; 0x8c
 800c928:	2408      	movs	r4, #8
 800c92a:	190b      	adds	r3, r1, r4
 800c92c:	19db      	adds	r3, r3, r7
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	801a      	strh	r2, [r3, #0]
	Calib_data->dig_T1 += calib0[1] << 8;
 800c932:	190b      	adds	r3, r1, r4
 800c934:	19db      	adds	r3, r3, r7
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	881a      	ldrh	r2, [r3, #0]
 800c93a:	183b      	adds	r3, r7, r0
 800c93c:	785b      	ldrb	r3, [r3, #1]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	021b      	lsls	r3, r3, #8
 800c942:	b29b      	uxth	r3, r3
 800c944:	18d3      	adds	r3, r2, r3
 800c946:	b29a      	uxth	r2, r3
 800c948:	190b      	adds	r3, r1, r4
 800c94a:	19db      	adds	r3, r3, r7
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	801a      	strh	r2, [r3, #0]

	Calib_data->dig_T2 = calib0[2];
 800c950:	183b      	adds	r3, r7, r0
 800c952:	789b      	ldrb	r3, [r3, #2]
 800c954:	b21a      	sxth	r2, r3
 800c956:	190b      	adds	r3, r1, r4
 800c958:	19db      	adds	r3, r3, r7
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	805a      	strh	r2, [r3, #2]
	Calib_data->dig_T2 += calib0[3] << 8;
 800c95e:	190b      	adds	r3, r1, r4
 800c960:	19db      	adds	r3, r3, r7
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2202      	movs	r2, #2
 800c966:	5e9b      	ldrsh	r3, [r3, r2]
 800c968:	b29a      	uxth	r2, r3
 800c96a:	183b      	adds	r3, r7, r0
 800c96c:	78db      	ldrb	r3, [r3, #3]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	021b      	lsls	r3, r3, #8
 800c972:	b29b      	uxth	r3, r3
 800c974:	18d3      	adds	r3, r2, r3
 800c976:	b29b      	uxth	r3, r3
 800c978:	b21a      	sxth	r2, r3
 800c97a:	190b      	adds	r3, r1, r4
 800c97c:	19db      	adds	r3, r3, r7
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	805a      	strh	r2, [r3, #2]

	Calib_data->dig_T3 = calib0[4];
 800c982:	183b      	adds	r3, r7, r0
 800c984:	791b      	ldrb	r3, [r3, #4]
 800c986:	b21a      	sxth	r2, r3
 800c988:	190b      	adds	r3, r1, r4
 800c98a:	19db      	adds	r3, r3, r7
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	809a      	strh	r2, [r3, #4]
	Calib_data->dig_T3 += calib0[5] << 8;
 800c990:	190b      	adds	r3, r1, r4
 800c992:	19db      	adds	r3, r3, r7
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2204      	movs	r2, #4
 800c998:	5e9b      	ldrsh	r3, [r3, r2]
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	183b      	adds	r3, r7, r0
 800c99e:	795b      	ldrb	r3, [r3, #5]
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	021b      	lsls	r3, r3, #8
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	18d3      	adds	r3, r2, r3
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	b21a      	sxth	r2, r3
 800c9ac:	190b      	adds	r3, r1, r4
 800c9ae:	19db      	adds	r3, r3, r7
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	809a      	strh	r2, [r3, #4]

	Calib_data->dig_P1 = calib0[6];
 800c9b4:	183b      	adds	r3, r7, r0
 800c9b6:	799b      	ldrb	r3, [r3, #6]
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	190b      	adds	r3, r1, r4
 800c9bc:	19db      	adds	r3, r3, r7
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	80da      	strh	r2, [r3, #6]
	Calib_data->dig_P1 += calib0[7] << 8;
 800c9c2:	190b      	adds	r3, r1, r4
 800c9c4:	19db      	adds	r3, r3, r7
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	88da      	ldrh	r2, [r3, #6]
 800c9ca:	183b      	adds	r3, r7, r0
 800c9cc:	79db      	ldrb	r3, [r3, #7]
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	021b      	lsls	r3, r3, #8
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	18d3      	adds	r3, r2, r3
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	190b      	adds	r3, r1, r4
 800c9da:	19db      	adds	r3, r3, r7
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	80da      	strh	r2, [r3, #6]

	Calib_data->dig_P2 = calib0[8];
 800c9e0:	183b      	adds	r3, r7, r0
 800c9e2:	7a1b      	ldrb	r3, [r3, #8]
 800c9e4:	b21a      	sxth	r2, r3
 800c9e6:	190b      	adds	r3, r1, r4
 800c9e8:	19db      	adds	r3, r3, r7
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	811a      	strh	r2, [r3, #8]
	Calib_data->dig_P2 += calib0[9] << 8;
 800c9ee:	190b      	adds	r3, r1, r4
 800c9f0:	19db      	adds	r3, r3, r7
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2208      	movs	r2, #8
 800c9f6:	5e9b      	ldrsh	r3, [r3, r2]
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	183b      	adds	r3, r7, r0
 800c9fc:	7a5b      	ldrb	r3, [r3, #9]
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	021b      	lsls	r3, r3, #8
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	18d3      	adds	r3, r2, r3
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	b21a      	sxth	r2, r3
 800ca0a:	190b      	adds	r3, r1, r4
 800ca0c:	19db      	adds	r3, r3, r7
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	811a      	strh	r2, [r3, #8]

	Calib_data->dig_P3 = calib0[10];
 800ca12:	183b      	adds	r3, r7, r0
 800ca14:	7a9b      	ldrb	r3, [r3, #10]
 800ca16:	b21a      	sxth	r2, r3
 800ca18:	190b      	adds	r3, r1, r4
 800ca1a:	19db      	adds	r3, r3, r7
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	815a      	strh	r2, [r3, #10]
	Calib_data->dig_P3 += calib0[11] << 8;
 800ca20:	190b      	adds	r3, r1, r4
 800ca22:	19db      	adds	r3, r3, r7
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	220a      	movs	r2, #10
 800ca28:	5e9b      	ldrsh	r3, [r3, r2]
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	183b      	adds	r3, r7, r0
 800ca2e:	7adb      	ldrb	r3, [r3, #11]
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	021b      	lsls	r3, r3, #8
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	18d3      	adds	r3, r2, r3
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	b21a      	sxth	r2, r3
 800ca3c:	190b      	adds	r3, r1, r4
 800ca3e:	19db      	adds	r3, r3, r7
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	815a      	strh	r2, [r3, #10]

	Calib_data->dig_P4 = calib0[12];
 800ca44:	183b      	adds	r3, r7, r0
 800ca46:	7b1b      	ldrb	r3, [r3, #12]
 800ca48:	b21a      	sxth	r2, r3
 800ca4a:	190b      	adds	r3, r1, r4
 800ca4c:	19db      	adds	r3, r3, r7
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	819a      	strh	r2, [r3, #12]
	Calib_data->dig_P4 += calib0[13] << 8;
 800ca52:	190b      	adds	r3, r1, r4
 800ca54:	19db      	adds	r3, r3, r7
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	220c      	movs	r2, #12
 800ca5a:	5e9b      	ldrsh	r3, [r3, r2]
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	183b      	adds	r3, r7, r0
 800ca60:	7b5b      	ldrb	r3, [r3, #13]
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	021b      	lsls	r3, r3, #8
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	18d3      	adds	r3, r2, r3
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	b21a      	sxth	r2, r3
 800ca6e:	190b      	adds	r3, r1, r4
 800ca70:	19db      	adds	r3, r3, r7
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	819a      	strh	r2, [r3, #12]

	Calib_data->dig_P5 = calib0[14];
 800ca76:	183b      	adds	r3, r7, r0
 800ca78:	7b9b      	ldrb	r3, [r3, #14]
 800ca7a:	b21a      	sxth	r2, r3
 800ca7c:	190b      	adds	r3, r1, r4
 800ca7e:	19db      	adds	r3, r3, r7
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	81da      	strh	r2, [r3, #14]
	Calib_data->dig_P5 += calib0[15] << 8;
 800ca84:	190b      	adds	r3, r1, r4
 800ca86:	19db      	adds	r3, r3, r7
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	220e      	movs	r2, #14
 800ca8c:	5e9b      	ldrsh	r3, [r3, r2]
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	183b      	adds	r3, r7, r0
 800ca92:	7bdb      	ldrb	r3, [r3, #15]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	021b      	lsls	r3, r3, #8
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	18d3      	adds	r3, r2, r3
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	b21a      	sxth	r2, r3
 800caa0:	190b      	adds	r3, r1, r4
 800caa2:	19db      	adds	r3, r3, r7
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	81da      	strh	r2, [r3, #14]

	Calib_data->dig_P6 = calib0[16];
 800caa8:	183b      	adds	r3, r7, r0
 800caaa:	7c1b      	ldrb	r3, [r3, #16]
 800caac:	b21a      	sxth	r2, r3
 800caae:	190b      	adds	r3, r1, r4
 800cab0:	19db      	adds	r3, r3, r7
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	821a      	strh	r2, [r3, #16]
	Calib_data->dig_P6 += calib0[17] << 8;
 800cab6:	190b      	adds	r3, r1, r4
 800cab8:	19db      	adds	r3, r3, r7
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2210      	movs	r2, #16
 800cabe:	5e9b      	ldrsh	r3, [r3, r2]
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	183b      	adds	r3, r7, r0
 800cac4:	7c5b      	ldrb	r3, [r3, #17]
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	021b      	lsls	r3, r3, #8
 800caca:	b29b      	uxth	r3, r3
 800cacc:	18d3      	adds	r3, r2, r3
 800cace:	b29b      	uxth	r3, r3
 800cad0:	b21a      	sxth	r2, r3
 800cad2:	190b      	adds	r3, r1, r4
 800cad4:	19db      	adds	r3, r3, r7
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	821a      	strh	r2, [r3, #16]

	Calib_data->dig_P7 = calib0[18];
 800cada:	183b      	adds	r3, r7, r0
 800cadc:	7c9b      	ldrb	r3, [r3, #18]
 800cade:	b21a      	sxth	r2, r3
 800cae0:	190b      	adds	r3, r1, r4
 800cae2:	19db      	adds	r3, r3, r7
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	825a      	strh	r2, [r3, #18]
	Calib_data->dig_P7 += calib0[19] << 8;
 800cae8:	190b      	adds	r3, r1, r4
 800caea:	19db      	adds	r3, r3, r7
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2212      	movs	r2, #18
 800caf0:	5e9b      	ldrsh	r3, [r3, r2]
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	183b      	adds	r3, r7, r0
 800caf6:	7cdb      	ldrb	r3, [r3, #19]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	18d3      	adds	r3, r2, r3
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	b21a      	sxth	r2, r3
 800cb04:	190b      	adds	r3, r1, r4
 800cb06:	19db      	adds	r3, r3, r7
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	825a      	strh	r2, [r3, #18]

	Calib_data->dig_P8 = calib0[20];
 800cb0c:	183b      	adds	r3, r7, r0
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
 800cb10:	b21a      	sxth	r2, r3
 800cb12:	190b      	adds	r3, r1, r4
 800cb14:	19db      	adds	r3, r3, r7
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	829a      	strh	r2, [r3, #20]
	Calib_data->dig_P8 += calib0[21] << 8;
 800cb1a:	190b      	adds	r3, r1, r4
 800cb1c:	19db      	adds	r3, r3, r7
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2214      	movs	r2, #20
 800cb22:	5e9b      	ldrsh	r3, [r3, r2]
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	183b      	adds	r3, r7, r0
 800cb28:	7d5b      	ldrb	r3, [r3, #21]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	18d3      	adds	r3, r2, r3
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	b21a      	sxth	r2, r3
 800cb36:	190b      	adds	r3, r1, r4
 800cb38:	19db      	adds	r3, r3, r7
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	829a      	strh	r2, [r3, #20]

	Calib_data->dig_P9 = calib0[22];
 800cb3e:	183b      	adds	r3, r7, r0
 800cb40:	7d9b      	ldrb	r3, [r3, #22]
 800cb42:	b21a      	sxth	r2, r3
 800cb44:	190b      	adds	r3, r1, r4
 800cb46:	19db      	adds	r3, r3, r7
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	82da      	strh	r2, [r3, #22]
	Calib_data->dig_P9 += calib0[23] << 8;
 800cb4c:	190b      	adds	r3, r1, r4
 800cb4e:	19db      	adds	r3, r3, r7
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2216      	movs	r2, #22
 800cb54:	5e9b      	ldrsh	r3, [r3, r2]
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	183b      	adds	r3, r7, r0
 800cb5a:	7ddb      	ldrb	r3, [r3, #23]
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	18d3      	adds	r3, r2, r3
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	b21a      	sxth	r2, r3
 800cb68:	190b      	adds	r3, r1, r4
 800cb6a:	19db      	adds	r3, r3, r7
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	82da      	strh	r2, [r3, #22]

	Calib_data->dig_H1 = calib0[25];
 800cb70:	183b      	adds	r3, r7, r0
 800cb72:	7e5a      	ldrb	r2, [r3, #25]
 800cb74:	0020      	movs	r0, r4
 800cb76:	190b      	adds	r3, r1, r4
 800cb78:	19db      	adds	r3, r3, r7
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	761a      	strb	r2, [r3, #24]

	Calib_data->dig_H2 = calib1[0];
 800cb7e:	1d3b      	adds	r3, r7, #4
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	b21a      	sxth	r2, r3
 800cb84:	180b      	adds	r3, r1, r0
 800cb86:	19db      	adds	r3, r3, r7
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	835a      	strh	r2, [r3, #26]
	Calib_data->dig_H2 += calib1[1] << 8;
 800cb8c:	180b      	adds	r3, r1, r0
 800cb8e:	19db      	adds	r3, r3, r7
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	221a      	movs	r2, #26
 800cb94:	5e9b      	ldrsh	r3, [r3, r2]
 800cb96:	b29a      	uxth	r2, r3
 800cb98:	1d3b      	adds	r3, r7, #4
 800cb9a:	785b      	ldrb	r3, [r3, #1]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	021b      	lsls	r3, r3, #8
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	18d3      	adds	r3, r2, r3
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	b21a      	sxth	r2, r3
 800cba8:	180b      	adds	r3, r1, r0
 800cbaa:	19db      	adds	r3, r3, r7
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	835a      	strh	r2, [r3, #26]

	Calib_data->dig_H3 = calib1[2];
 800cbb0:	1d3b      	adds	r3, r7, #4
 800cbb2:	789a      	ldrb	r2, [r3, #2]
 800cbb4:	180b      	adds	r3, r1, r0
 800cbb6:	19db      	adds	r3, r3, r7
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	771a      	strb	r2, [r3, #28]

	Calib_data->dig_H4 = calib1[3] << 4;
 800cbbc:	1d3b      	adds	r3, r7, #4
 800cbbe:	78db      	ldrb	r3, [r3, #3]
 800cbc0:	011b      	lsls	r3, r3, #4
 800cbc2:	b21a      	sxth	r2, r3
 800cbc4:	0004      	movs	r4, r0
 800cbc6:	190b      	adds	r3, r1, r4
 800cbc8:	19db      	adds	r3, r3, r7
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	83da      	strh	r2, [r3, #30]
	Calib_data->dig_H4 += calib1[4] & 0b00001111;
 800cbce:	0008      	movs	r0, r1
 800cbd0:	190b      	adds	r3, r1, r4
 800cbd2:	19db      	adds	r3, r3, r7
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	221e      	movs	r2, #30
 800cbd8:	5e9b      	ldrsh	r3, [r3, r2]
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	1d3b      	adds	r3, r7, #4
 800cbde:	791b      	ldrb	r3, [r3, #4]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	210f      	movs	r1, #15
 800cbe4:	400b      	ands	r3, r1
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	18d3      	adds	r3, r2, r3
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	b21a      	sxth	r2, r3
 800cbee:	1903      	adds	r3, r0, r4
 800cbf0:	19db      	adds	r3, r3, r7
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	83da      	strh	r2, [r3, #30]

	Calib_data->dig_H5 = calib1[4] >> 4;
 800cbf6:	1d3b      	adds	r3, r7, #4
 800cbf8:	791b      	ldrb	r3, [r3, #4]
 800cbfa:	091b      	lsrs	r3, r3, #4
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	b21a      	sxth	r2, r3
 800cc00:	1903      	adds	r3, r0, r4
 800cc02:	19db      	adds	r3, r3, r7
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	841a      	strh	r2, [r3, #32]
	Calib_data->dig_H5 += calib1[5] << 4;
 800cc08:	0001      	movs	r1, r0
 800cc0a:	1903      	adds	r3, r0, r4
 800cc0c:	19db      	adds	r3, r3, r7
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2220      	movs	r2, #32
 800cc12:	5e9b      	ldrsh	r3, [r3, r2]
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	1d3b      	adds	r3, r7, #4
 800cc18:	795b      	ldrb	r3, [r3, #5]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	011b      	lsls	r3, r3, #4
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	18d3      	adds	r3, r2, r3
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	b21a      	sxth	r2, r3
 800cc26:	0008      	movs	r0, r1
 800cc28:	190b      	adds	r3, r1, r4
 800cc2a:	19db      	adds	r3, r3, r7
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	841a      	strh	r2, [r3, #32]

	Calib_data->dig_H6 = calib1[6];
 800cc30:	1d3b      	adds	r3, r7, #4
 800cc32:	799b      	ldrb	r3, [r3, #6]
 800cc34:	b259      	sxtb	r1, r3
 800cc36:	1903      	adds	r3, r0, r4
 800cc38:	19db      	adds	r3, r3, r7
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2222      	movs	r2, #34	; 0x22
 800cc3e:	5499      	strb	r1, [r3, r2]

	return status;
 800cc40:	232f      	movs	r3, #47	; 0x2f
 800cc42:	18fb      	adds	r3, r7, r3
 800cc44:	781b      	ldrb	r3, [r3, #0]
}
 800cc46:	0018      	movs	r0, r3
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	b00d      	add	sp, #52	; 0x34
 800cc4c:	bcf0      	pop	{r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	b004      	add	sp, #16
 800cc52:	4718      	bx	r3

0800cc54 <BME280_Get_All>:


HAL_StatusTypeDef BME280_Get_All(I2C_HandleTypeDef handle, uint16_t Timeout){
 800cc54:	b084      	sub	sp, #16
 800cc56:	b5b0      	push	{r4, r5, r7, lr}
 800cc58:	b088      	sub	sp, #32
 800cc5a:	af04      	add	r7, sp, #16
 800cc5c:	2520      	movs	r5, #32
 800cc5e:	197c      	adds	r4, r7, r5
 800cc60:	6020      	str	r0, [r4, #0]
 800cc62:	6061      	str	r1, [r4, #4]
 800cc64:	60a2      	str	r2, [r4, #8]
 800cc66:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t measure[8];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_press, 1, measure, 8, Timeout);
 800cc68:	234c      	movs	r3, #76	; 0x4c
 800cc6a:	002a      	movs	r2, r5
 800cc6c:	189b      	adds	r3, r3, r2
 800cc6e:	19db      	adds	r3, r3, r7
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	250f      	movs	r5, #15
 800cc74:	197c      	adds	r4, r7, r5
 800cc76:	18b8      	adds	r0, r7, r2
 800cc78:	9302      	str	r3, [sp, #8]
 800cc7a:	2308      	movs	r3, #8
 800cc7c:	9301      	str	r3, [sp, #4]
 800cc7e:	1d3b      	adds	r3, r7, #4
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	2301      	movs	r3, #1
 800cc84:	22f7      	movs	r2, #247	; 0xf7
 800cc86:	21ec      	movs	r1, #236	; 0xec
 800cc88:	f7f8 f938 	bl	8004efc <HAL_I2C_Mem_Read>
 800cc8c:	0003      	movs	r3, r0
 800cc8e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800cc90:	197b      	adds	r3, r7, r5
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <BME280_Get_All+0x4a>
		return status;
 800cc98:	197b      	adds	r3, r7, r5
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	e046      	b.n	800cd2c <BME280_Get_All+0xd8>

	Pressure_Data.press_msb = measure[0];
 800cc9e:	1d3b      	adds	r3, r7, #4
 800cca0:	781a      	ldrb	r2, [r3, #0]
 800cca2:	4b26      	ldr	r3, [pc, #152]	; (800cd3c <BME280_Get_All+0xe8>)
 800cca4:	701a      	strb	r2, [r3, #0]
	Pressure_Data.press_lsb = measure[1];
 800cca6:	1d3b      	adds	r3, r7, #4
 800cca8:	785a      	ldrb	r2, [r3, #1]
 800ccaa:	4b24      	ldr	r3, [pc, #144]	; (800cd3c <BME280_Get_All+0xe8>)
 800ccac:	705a      	strb	r2, [r3, #1]
	Pressure_Data.press_xlsb = measure[2];
 800ccae:	1d3b      	adds	r3, r7, #4
 800ccb0:	789a      	ldrb	r2, [r3, #2]
 800ccb2:	4b22      	ldr	r3, [pc, #136]	; (800cd3c <BME280_Get_All+0xe8>)
 800ccb4:	709a      	strb	r2, [r3, #2]

	Temperature_Data.temp_msb = measure[3];
 800ccb6:	1d3b      	adds	r3, r7, #4
 800ccb8:	78da      	ldrb	r2, [r3, #3]
 800ccba:	4b21      	ldr	r3, [pc, #132]	; (800cd40 <BME280_Get_All+0xec>)
 800ccbc:	701a      	strb	r2, [r3, #0]
	Temperature_Data.temp_lsb = measure[4];
 800ccbe:	1d3b      	adds	r3, r7, #4
 800ccc0:	791a      	ldrb	r2, [r3, #4]
 800ccc2:	4b1f      	ldr	r3, [pc, #124]	; (800cd40 <BME280_Get_All+0xec>)
 800ccc4:	705a      	strb	r2, [r3, #1]
	Temperature_Data.temp_xlsb = measure[5];
 800ccc6:	1d3b      	adds	r3, r7, #4
 800ccc8:	795a      	ldrb	r2, [r3, #5]
 800ccca:	4b1d      	ldr	r3, [pc, #116]	; (800cd40 <BME280_Get_All+0xec>)
 800cccc:	709a      	strb	r2, [r3, #2]

	Humidity_Data.hum_msb = measure[6];
 800ccce:	1d3b      	adds	r3, r7, #4
 800ccd0:	799a      	ldrb	r2, [r3, #6]
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <BME280_Get_All+0xf0>)
 800ccd4:	701a      	strb	r2, [r3, #0]
	Humidity_Data.hum_lsb = measure[7];
 800ccd6:	1d3b      	adds	r3, r7, #4
 800ccd8:	79da      	ldrb	r2, [r3, #7]
 800ccda:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <BME280_Get_All+0xf0>)
 800ccdc:	705a      	strb	r2, [r3, #1]

	Temperature_Data.ADC_T = ((uint32_t)Temperature_Data.temp_msb << 12) | ((uint32_t)Temperature_Data.temp_lsb << 4) | ((uint32_t)Temperature_Data.temp_xlsb >> 4);
 800ccde:	4b18      	ldr	r3, [pc, #96]	; (800cd40 <BME280_Get_All+0xec>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	031a      	lsls	r2, r3, #12
 800cce4:	4b16      	ldr	r3, [pc, #88]	; (800cd40 <BME280_Get_All+0xec>)
 800cce6:	785b      	ldrb	r3, [r3, #1]
 800cce8:	011b      	lsls	r3, r3, #4
 800ccea:	4313      	orrs	r3, r2
 800ccec:	4a14      	ldr	r2, [pc, #80]	; (800cd40 <BME280_Get_All+0xec>)
 800ccee:	7892      	ldrb	r2, [r2, #2]
 800ccf0:	0912      	lsrs	r2, r2, #4
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	431a      	orrs	r2, r3
 800ccf6:	4b12      	ldr	r3, [pc, #72]	; (800cd40 <BME280_Get_All+0xec>)
 800ccf8:	605a      	str	r2, [r3, #4]
	Pressure_Data.ADC_P = ((uint32_t)Pressure_Data.press_msb << 12) | ((uint32_t)Pressure_Data.press_lsb << 4) | ((uint32_t)Pressure_Data.press_xlsb >> 4);
 800ccfa:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <BME280_Get_All+0xe8>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	031a      	lsls	r2, r3, #12
 800cd00:	4b0e      	ldr	r3, [pc, #56]	; (800cd3c <BME280_Get_All+0xe8>)
 800cd02:	785b      	ldrb	r3, [r3, #1]
 800cd04:	011b      	lsls	r3, r3, #4
 800cd06:	4313      	orrs	r3, r2
 800cd08:	4a0c      	ldr	r2, [pc, #48]	; (800cd3c <BME280_Get_All+0xe8>)
 800cd0a:	7892      	ldrb	r2, [r2, #2]
 800cd0c:	0912      	lsrs	r2, r2, #4
 800cd0e:	b2d2      	uxtb	r2, r2
 800cd10:	431a      	orrs	r2, r3
 800cd12:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <BME280_Get_All+0xe8>)
 800cd14:	605a      	str	r2, [r3, #4]
	Humidity_Data.ADC_H = ((uint32_t)Humidity_Data.hum_msb << 8) | ((uint32_t)Humidity_Data.hum_lsb);
 800cd16:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <BME280_Get_All+0xf0>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	021b      	lsls	r3, r3, #8
 800cd1c:	4a09      	ldr	r2, [pc, #36]	; (800cd44 <BME280_Get_All+0xf0>)
 800cd1e:	7852      	ldrb	r2, [r2, #1]
 800cd20:	431a      	orrs	r2, r3
 800cd22:	4b08      	ldr	r3, [pc, #32]	; (800cd44 <BME280_Get_All+0xf0>)
 800cd24:	605a      	str	r2, [r3, #4]
	return status;
 800cd26:	230f      	movs	r3, #15
 800cd28:	18fb      	adds	r3, r7, r3
 800cd2a:	781b      	ldrb	r3, [r3, #0]
}
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	b004      	add	sp, #16
 800cd32:	bcb0      	pop	{r4, r5, r7}
 800cd34:	bc08      	pop	{r3}
 800cd36:	b004      	add	sp, #16
 800cd38:	4718      	bx	r3
 800cd3a:	46c0      	nop			; (mov r8, r8)
 800cd3c:	20002730 	.word	0x20002730
 800cd40:	20002738 	.word	0x20002738
 800cd44:	20002740 	.word	0x20002740

0800cd48 <BME280_T_Double>:
	return status;
}


double BME280_T_Double (BME280_Calib_Data_struct *Calib_data)
{
 800cd48:	b5b0      	push	{r4, r5, r7, lr}
 800cd4a:	b08a      	sub	sp, #40	; 0x28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
//	BME280_Temperature(handle);
	double var1, var2, t;

	var1 = (((double) Temperature_Data.ADC_T)/16384.0 - ((double) Calib_data->dig_T1)/1024.0) * ((double) Calib_data->dig_T2);
 800cd50:	4b57      	ldr	r3, [pc, #348]	; (800ceb0 <BME280_T_Double+0x168>)
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	0018      	movs	r0, r3
 800cd56:	f7f6 f827 	bl	8002da8 <__aeabi_ui2d>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	4b55      	ldr	r3, [pc, #340]	; (800ceb4 <BME280_T_Double+0x16c>)
 800cd5e:	f7f4 fd9f 	bl	80018a0 <__aeabi_ddiv>
 800cd62:	0002      	movs	r2, r0
 800cd64:	000b      	movs	r3, r1
 800cd66:	0014      	movs	r4, r2
 800cd68:	001d      	movs	r5, r3
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	0018      	movs	r0, r3
 800cd70:	f7f6 f81a 	bl	8002da8 <__aeabi_ui2d>
 800cd74:	2200      	movs	r2, #0
 800cd76:	4b50      	ldr	r3, [pc, #320]	; (800ceb8 <BME280_T_Double+0x170>)
 800cd78:	f7f4 fd92 	bl	80018a0 <__aeabi_ddiv>
 800cd7c:	0002      	movs	r2, r0
 800cd7e:	000b      	movs	r3, r1
 800cd80:	0020      	movs	r0, r4
 800cd82:	0029      	movs	r1, r5
 800cd84:	f7f5 fbfa 	bl	800257c <__aeabi_dsub>
 800cd88:	0002      	movs	r2, r0
 800cd8a:	000b      	movs	r3, r1
 800cd8c:	0014      	movs	r4, r2
 800cd8e:	001d      	movs	r5, r3
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2202      	movs	r2, #2
 800cd94:	5e9b      	ldrsh	r3, [r3, r2]
 800cd96:	0018      	movs	r0, r3
 800cd98:	f7f5 ffd6 	bl	8002d48 <__aeabi_i2d>
 800cd9c:	0002      	movs	r2, r0
 800cd9e:	000b      	movs	r3, r1
 800cda0:	0020      	movs	r0, r4
 800cda2:	0029      	movs	r1, r5
 800cda4:	f7f5 f97e 	bl	80020a4 <__aeabi_dmul>
 800cda8:	0002      	movs	r2, r0
 800cdaa:	000b      	movs	r3, r1
 800cdac:	623a      	str	r2, [r7, #32]
 800cdae:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = ((((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0) * (((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0)) * ((double) Calib_data->dig_T3);
 800cdb0:	4b3f      	ldr	r3, [pc, #252]	; (800ceb0 <BME280_T_Double+0x168>)
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	f7f5 fff7 	bl	8002da8 <__aeabi_ui2d>
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2382      	movs	r3, #130	; 0x82
 800cdbe:	05db      	lsls	r3, r3, #23
 800cdc0:	f7f4 fd6e 	bl	80018a0 <__aeabi_ddiv>
 800cdc4:	0002      	movs	r2, r0
 800cdc6:	000b      	movs	r3, r1
 800cdc8:	0014      	movs	r4, r2
 800cdca:	001d      	movs	r5, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	881b      	ldrh	r3, [r3, #0]
 800cdd0:	0018      	movs	r0, r3
 800cdd2:	f7f5 ffe9 	bl	8002da8 <__aeabi_ui2d>
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	4b38      	ldr	r3, [pc, #224]	; (800cebc <BME280_T_Double+0x174>)
 800cdda:	f7f4 fd61 	bl	80018a0 <__aeabi_ddiv>
 800cdde:	0002      	movs	r2, r0
 800cde0:	000b      	movs	r3, r1
 800cde2:	0020      	movs	r0, r4
 800cde4:	0029      	movs	r1, r5
 800cde6:	f7f5 fbc9 	bl	800257c <__aeabi_dsub>
 800cdea:	0002      	movs	r2, r0
 800cdec:	000b      	movs	r3, r1
 800cdee:	0014      	movs	r4, r2
 800cdf0:	001d      	movs	r5, r3
 800cdf2:	4b2f      	ldr	r3, [pc, #188]	; (800ceb0 <BME280_T_Double+0x168>)
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	f7f5 ffd6 	bl	8002da8 <__aeabi_ui2d>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2382      	movs	r3, #130	; 0x82
 800ce00:	05db      	lsls	r3, r3, #23
 800ce02:	f7f4 fd4d 	bl	80018a0 <__aeabi_ddiv>
 800ce06:	0002      	movs	r2, r0
 800ce08:	000b      	movs	r3, r1
 800ce0a:	603a      	str	r2, [r7, #0]
 800ce0c:	607b      	str	r3, [r7, #4]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	881b      	ldrh	r3, [r3, #0]
 800ce12:	0018      	movs	r0, r3
 800ce14:	f7f5 ffc8 	bl	8002da8 <__aeabi_ui2d>
 800ce18:	2200      	movs	r2, #0
 800ce1a:	4b28      	ldr	r3, [pc, #160]	; (800cebc <BME280_T_Double+0x174>)
 800ce1c:	f7f4 fd40 	bl	80018a0 <__aeabi_ddiv>
 800ce20:	0002      	movs	r2, r0
 800ce22:	000b      	movs	r3, r1
 800ce24:	6838      	ldr	r0, [r7, #0]
 800ce26:	6879      	ldr	r1, [r7, #4]
 800ce28:	f7f5 fba8 	bl	800257c <__aeabi_dsub>
 800ce2c:	0002      	movs	r2, r0
 800ce2e:	000b      	movs	r3, r1
 800ce30:	0020      	movs	r0, r4
 800ce32:	0029      	movs	r1, r5
 800ce34:	f7f5 f936 	bl	80020a4 <__aeabi_dmul>
 800ce38:	0002      	movs	r2, r0
 800ce3a:	000b      	movs	r3, r1
 800ce3c:	0014      	movs	r4, r2
 800ce3e:	001d      	movs	r5, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2204      	movs	r2, #4
 800ce44:	5e9b      	ldrsh	r3, [r3, r2]
 800ce46:	0018      	movs	r0, r3
 800ce48:	f7f5 ff7e 	bl	8002d48 <__aeabi_i2d>
 800ce4c:	0002      	movs	r2, r0
 800ce4e:	000b      	movs	r3, r1
 800ce50:	0020      	movs	r0, r4
 800ce52:	0029      	movs	r1, r5
 800ce54:	f7f5 f926 	bl	80020a4 <__aeabi_dmul>
 800ce58:	0002      	movs	r2, r0
 800ce5a:	000b      	movs	r3, r1
 800ce5c:	61ba      	str	r2, [r7, #24]
 800ce5e:	61fb      	str	r3, [r7, #28]

	t_fine =  (var1 + var2);
 800ce60:	69ba      	ldr	r2, [r7, #24]
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	6a38      	ldr	r0, [r7, #32]
 800ce66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce68:	f7f4 f9de 	bl	8001228 <__aeabi_dadd>
 800ce6c:	0002      	movs	r2, r0
 800ce6e:	000b      	movs	r3, r1
 800ce70:	0010      	movs	r0, r2
 800ce72:	0019      	movs	r1, r3
 800ce74:	f7f5 ff32 	bl	8002cdc <__aeabi_d2iz>
 800ce78:	0002      	movs	r2, r0
 800ce7a:	4b11      	ldr	r3, [pc, #68]	; (800cec0 <BME280_T_Double+0x178>)
 800ce7c:	601a      	str	r2, [r3, #0]
	t = (var1 + var2)/5120.0;
 800ce7e:	69ba      	ldr	r2, [r7, #24]
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	6a38      	ldr	r0, [r7, #32]
 800ce84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce86:	f7f4 f9cf 	bl	8001228 <__aeabi_dadd>
 800ce8a:	0002      	movs	r2, r0
 800ce8c:	000b      	movs	r3, r1
 800ce8e:	0010      	movs	r0, r2
 800ce90:	0019      	movs	r1, r3
 800ce92:	2200      	movs	r2, #0
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <BME280_T_Double+0x17c>)
 800ce96:	f7f4 fd03 	bl	80018a0 <__aeabi_ddiv>
 800ce9a:	0002      	movs	r2, r0
 800ce9c:	000b      	movs	r3, r1
 800ce9e:	613a      	str	r2, [r7, #16]
 800cea0:	617b      	str	r3, [r7, #20]

	return t;
 800cea2:	693a      	ldr	r2, [r7, #16]
 800cea4:	697b      	ldr	r3, [r7, #20]
}
 800cea6:	0010      	movs	r0, r2
 800cea8:	0019      	movs	r1, r3
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	b00a      	add	sp, #40	; 0x28
 800ceae:	bdb0      	pop	{r4, r5, r7, pc}
 800ceb0:	20002738 	.word	0x20002738
 800ceb4:	40d00000 	.word	0x40d00000
 800ceb8:	40900000 	.word	0x40900000
 800cebc:	40c00000 	.word	0x40c00000
 800cec0:	2000272c 	.word	0x2000272c
 800cec4:	40b40000 	.word	0x40b40000

0800cec8 <BME280_P_Double>:

double BME280_P_Double(BME280_Calib_Data_struct *Calib_data)
{
 800cec8:	b5b0      	push	{r4, r5, r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
//	BME280_Pressure(handle);
	double var1, var2, p;

	var1 = ((double)t_fine/2.0) - 64000.0;
 800ced0:	4bba      	ldr	r3, [pc, #744]	; (800d1bc <BME280_P_Double+0x2f4>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	0018      	movs	r0, r3
 800ced6:	f7f5 ff37 	bl	8002d48 <__aeabi_i2d>
 800ceda:	2200      	movs	r2, #0
 800cedc:	2380      	movs	r3, #128	; 0x80
 800cede:	05db      	lsls	r3, r3, #23
 800cee0:	f7f4 fcde 	bl	80018a0 <__aeabi_ddiv>
 800cee4:	0002      	movs	r2, r0
 800cee6:	000b      	movs	r3, r1
 800cee8:	0010      	movs	r0, r2
 800ceea:	0019      	movs	r1, r3
 800ceec:	2200      	movs	r2, #0
 800ceee:	4bb4      	ldr	r3, [pc, #720]	; (800d1c0 <BME280_P_Double+0x2f8>)
 800cef0:	f7f5 fb44 	bl	800257c <__aeabi_dsub>
 800cef4:	0002      	movs	r2, r0
 800cef6:	000b      	movs	r3, r1
 800cef8:	61ba      	str	r2, [r7, #24]
 800cefa:	61fb      	str	r3, [r7, #28]
	var2 = var1 * var1 * ((double) Calib_data->dig_P6) / 32768.0;
 800cefc:	69ba      	ldr	r2, [r7, #24]
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	69b8      	ldr	r0, [r7, #24]
 800cf02:	69f9      	ldr	r1, [r7, #28]
 800cf04:	f7f5 f8ce 	bl	80020a4 <__aeabi_dmul>
 800cf08:	0002      	movs	r2, r0
 800cf0a:	000b      	movs	r3, r1
 800cf0c:	0014      	movs	r4, r2
 800cf0e:	001d      	movs	r5, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2210      	movs	r2, #16
 800cf14:	5e9b      	ldrsh	r3, [r3, r2]
 800cf16:	0018      	movs	r0, r3
 800cf18:	f7f5 ff16 	bl	8002d48 <__aeabi_i2d>
 800cf1c:	0002      	movs	r2, r0
 800cf1e:	000b      	movs	r3, r1
 800cf20:	0020      	movs	r0, r4
 800cf22:	0029      	movs	r1, r5
 800cf24:	f7f5 f8be 	bl	80020a4 <__aeabi_dmul>
 800cf28:	0002      	movs	r2, r0
 800cf2a:	000b      	movs	r3, r1
 800cf2c:	0010      	movs	r0, r2
 800cf2e:	0019      	movs	r1, r3
 800cf30:	2200      	movs	r2, #0
 800cf32:	4ba4      	ldr	r3, [pc, #656]	; (800d1c4 <BME280_P_Double+0x2fc>)
 800cf34:	f7f4 fcb4 	bl	80018a0 <__aeabi_ddiv>
 800cf38:	0002      	movs	r2, r0
 800cf3a:	000b      	movs	r3, r1
 800cf3c:	613a      	str	r2, [r7, #16]
 800cf3e:	617b      	str	r3, [r7, #20]
	var2 = var2 + var1 + ((double) Calib_data->dig_P5) * 2.0;
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	6938      	ldr	r0, [r7, #16]
 800cf46:	6979      	ldr	r1, [r7, #20]
 800cf48:	f7f4 f96e 	bl	8001228 <__aeabi_dadd>
 800cf4c:	0002      	movs	r2, r0
 800cf4e:	000b      	movs	r3, r1
 800cf50:	0014      	movs	r4, r2
 800cf52:	001d      	movs	r5, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	220e      	movs	r2, #14
 800cf58:	5e9b      	ldrsh	r3, [r3, r2]
 800cf5a:	0018      	movs	r0, r3
 800cf5c:	f7f5 fef4 	bl	8002d48 <__aeabi_i2d>
 800cf60:	0002      	movs	r2, r0
 800cf62:	000b      	movs	r3, r1
 800cf64:	f7f4 f960 	bl	8001228 <__aeabi_dadd>
 800cf68:	0002      	movs	r2, r0
 800cf6a:	000b      	movs	r3, r1
 800cf6c:	0020      	movs	r0, r4
 800cf6e:	0029      	movs	r1, r5
 800cf70:	f7f4 f95a 	bl	8001228 <__aeabi_dadd>
 800cf74:	0002      	movs	r2, r0
 800cf76:	000b      	movs	r3, r1
 800cf78:	613a      	str	r2, [r7, #16]
 800cf7a:	617b      	str	r3, [r7, #20]
	var2 = (var2/4.0) + (((double) Calib_data->dig_P4) * 65536.0);
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	4b92      	ldr	r3, [pc, #584]	; (800d1c8 <BME280_P_Double+0x300>)
 800cf80:	6938      	ldr	r0, [r7, #16]
 800cf82:	6979      	ldr	r1, [r7, #20]
 800cf84:	f7f4 fc8c 	bl	80018a0 <__aeabi_ddiv>
 800cf88:	0002      	movs	r2, r0
 800cf8a:	000b      	movs	r3, r1
 800cf8c:	0014      	movs	r4, r2
 800cf8e:	001d      	movs	r5, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	220c      	movs	r2, #12
 800cf94:	5e9b      	ldrsh	r3, [r3, r2]
 800cf96:	0018      	movs	r0, r3
 800cf98:	f7f5 fed6 	bl	8002d48 <__aeabi_i2d>
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	4b8b      	ldr	r3, [pc, #556]	; (800d1cc <BME280_P_Double+0x304>)
 800cfa0:	f7f5 f880 	bl	80020a4 <__aeabi_dmul>
 800cfa4:	0002      	movs	r2, r0
 800cfa6:	000b      	movs	r3, r1
 800cfa8:	0020      	movs	r0, r4
 800cfaa:	0029      	movs	r1, r5
 800cfac:	f7f4 f93c 	bl	8001228 <__aeabi_dadd>
 800cfb0:	0002      	movs	r2, r0
 800cfb2:	000b      	movs	r3, r1
 800cfb4:	613a      	str	r2, [r7, #16]
 800cfb6:	617b      	str	r3, [r7, #20]
	var1 = (((double) Calib_data->dig_P3) * var1 * var1 / 524288.0 + ((double) Calib_data->dig_P2) * var1) / 524288.0;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	220a      	movs	r2, #10
 800cfbc:	5e9b      	ldrsh	r3, [r3, r2]
 800cfbe:	0018      	movs	r0, r3
 800cfc0:	f7f5 fec2 	bl	8002d48 <__aeabi_i2d>
 800cfc4:	69ba      	ldr	r2, [r7, #24]
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	f7f5 f86c 	bl	80020a4 <__aeabi_dmul>
 800cfcc:	0002      	movs	r2, r0
 800cfce:	000b      	movs	r3, r1
 800cfd0:	0010      	movs	r0, r2
 800cfd2:	0019      	movs	r1, r3
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	f7f5 f864 	bl	80020a4 <__aeabi_dmul>
 800cfdc:	0002      	movs	r2, r0
 800cfde:	000b      	movs	r3, r1
 800cfe0:	0010      	movs	r0, r2
 800cfe2:	0019      	movs	r1, r3
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4b7a      	ldr	r3, [pc, #488]	; (800d1d0 <BME280_P_Double+0x308>)
 800cfe8:	f7f4 fc5a 	bl	80018a0 <__aeabi_ddiv>
 800cfec:	0002      	movs	r2, r0
 800cfee:	000b      	movs	r3, r1
 800cff0:	0014      	movs	r4, r2
 800cff2:	001d      	movs	r5, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2208      	movs	r2, #8
 800cff8:	5e9b      	ldrsh	r3, [r3, r2]
 800cffa:	0018      	movs	r0, r3
 800cffc:	f7f5 fea4 	bl	8002d48 <__aeabi_i2d>
 800d000:	69ba      	ldr	r2, [r7, #24]
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	f7f5 f84e 	bl	80020a4 <__aeabi_dmul>
 800d008:	0002      	movs	r2, r0
 800d00a:	000b      	movs	r3, r1
 800d00c:	0020      	movs	r0, r4
 800d00e:	0029      	movs	r1, r5
 800d010:	f7f4 f90a 	bl	8001228 <__aeabi_dadd>
 800d014:	0002      	movs	r2, r0
 800d016:	000b      	movs	r3, r1
 800d018:	0010      	movs	r0, r2
 800d01a:	0019      	movs	r1, r3
 800d01c:	2200      	movs	r2, #0
 800d01e:	4b6c      	ldr	r3, [pc, #432]	; (800d1d0 <BME280_P_Double+0x308>)
 800d020:	f7f4 fc3e 	bl	80018a0 <__aeabi_ddiv>
 800d024:	0002      	movs	r2, r0
 800d026:	000b      	movs	r3, r1
 800d028:	61ba      	str	r2, [r7, #24]
 800d02a:	61fb      	str	r3, [r7, #28]
	var1 = (1.0 + var1 / 32768.0)*((double) Calib_data->dig_P1);
 800d02c:	2200      	movs	r2, #0
 800d02e:	4b65      	ldr	r3, [pc, #404]	; (800d1c4 <BME280_P_Double+0x2fc>)
 800d030:	69b8      	ldr	r0, [r7, #24]
 800d032:	69f9      	ldr	r1, [r7, #28]
 800d034:	f7f4 fc34 	bl	80018a0 <__aeabi_ddiv>
 800d038:	0002      	movs	r2, r0
 800d03a:	000b      	movs	r3, r1
 800d03c:	0010      	movs	r0, r2
 800d03e:	0019      	movs	r1, r3
 800d040:	2200      	movs	r2, #0
 800d042:	4b64      	ldr	r3, [pc, #400]	; (800d1d4 <BME280_P_Double+0x30c>)
 800d044:	f7f4 f8f0 	bl	8001228 <__aeabi_dadd>
 800d048:	0002      	movs	r2, r0
 800d04a:	000b      	movs	r3, r1
 800d04c:	0014      	movs	r4, r2
 800d04e:	001d      	movs	r5, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	88db      	ldrh	r3, [r3, #6]
 800d054:	0018      	movs	r0, r3
 800d056:	f7f5 fea7 	bl	8002da8 <__aeabi_ui2d>
 800d05a:	0002      	movs	r2, r0
 800d05c:	000b      	movs	r3, r1
 800d05e:	0020      	movs	r0, r4
 800d060:	0029      	movs	r1, r5
 800d062:	f7f5 f81f 	bl	80020a4 <__aeabi_dmul>
 800d066:	0002      	movs	r2, r0
 800d068:	000b      	movs	r3, r1
 800d06a:	61ba      	str	r2, [r7, #24]
 800d06c:	61fb      	str	r3, [r7, #28]

	if (var1 == 0.0)
 800d06e:	2200      	movs	r2, #0
 800d070:	2300      	movs	r3, #0
 800d072:	69b8      	ldr	r0, [r7, #24]
 800d074:	69f9      	ldr	r1, [r7, #28]
 800d076:	f7f3 f9e7 	bl	8000448 <__aeabi_dcmpeq>
 800d07a:	1e03      	subs	r3, r0, #0
 800d07c:	d002      	beq.n	800d084 <BME280_P_Double+0x1bc>
	{
		return 0; // avoid exception caused by division by zero
 800d07e:	2200      	movs	r2, #0
 800d080:	2300      	movs	r3, #0
 800d082:	e096      	b.n	800d1b2 <BME280_P_Double+0x2ea>
	}

	p = 1048576.0 - (double) Pressure_Data.ADC_P;
 800d084:	4b54      	ldr	r3, [pc, #336]	; (800d1d8 <BME280_P_Double+0x310>)
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	0018      	movs	r0, r3
 800d08a:	f7f5 fe8d 	bl	8002da8 <__aeabi_ui2d>
 800d08e:	0002      	movs	r2, r0
 800d090:	000b      	movs	r3, r1
 800d092:	2000      	movs	r0, #0
 800d094:	4951      	ldr	r1, [pc, #324]	; (800d1dc <BME280_P_Double+0x314>)
 800d096:	f7f5 fa71 	bl	800257c <__aeabi_dsub>
 800d09a:	0002      	movs	r2, r0
 800d09c:	000b      	movs	r3, r1
 800d09e:	60ba      	str	r2, [r7, #8]
 800d0a0:	60fb      	str	r3, [r7, #12]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	4b4e      	ldr	r3, [pc, #312]	; (800d1e0 <BME280_P_Double+0x318>)
 800d0a6:	6938      	ldr	r0, [r7, #16]
 800d0a8:	6979      	ldr	r1, [r7, #20]
 800d0aa:	f7f4 fbf9 	bl	80018a0 <__aeabi_ddiv>
 800d0ae:	0002      	movs	r2, r0
 800d0b0:	000b      	movs	r3, r1
 800d0b2:	68b8      	ldr	r0, [r7, #8]
 800d0b4:	68f9      	ldr	r1, [r7, #12]
 800d0b6:	f7f5 fa61 	bl	800257c <__aeabi_dsub>
 800d0ba:	0002      	movs	r2, r0
 800d0bc:	000b      	movs	r3, r1
 800d0be:	0010      	movs	r0, r2
 800d0c0:	0019      	movs	r1, r3
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	4b47      	ldr	r3, [pc, #284]	; (800d1e4 <BME280_P_Double+0x31c>)
 800d0c6:	f7f4 ffed 	bl	80020a4 <__aeabi_dmul>
 800d0ca:	0002      	movs	r2, r0
 800d0cc:	000b      	movs	r3, r1
 800d0ce:	0010      	movs	r0, r2
 800d0d0:	0019      	movs	r1, r3
 800d0d2:	69ba      	ldr	r2, [r7, #24]
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	f7f4 fbe3 	bl	80018a0 <__aeabi_ddiv>
 800d0da:	0002      	movs	r2, r0
 800d0dc:	000b      	movs	r3, r1
 800d0de:	60ba      	str	r2, [r7, #8]
 800d0e0:	60fb      	str	r3, [r7, #12]

	var1 = ((double) Calib_data->dig_P9) * p* p / 2147483648.0;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2216      	movs	r2, #22
 800d0e6:	5e9b      	ldrsh	r3, [r3, r2]
 800d0e8:	0018      	movs	r0, r3
 800d0ea:	f7f5 fe2d 	bl	8002d48 <__aeabi_i2d>
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f7f4 ffd7 	bl	80020a4 <__aeabi_dmul>
 800d0f6:	0002      	movs	r2, r0
 800d0f8:	000b      	movs	r3, r1
 800d0fa:	0010      	movs	r0, r2
 800d0fc:	0019      	movs	r1, r3
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f7f4 ffcf 	bl	80020a4 <__aeabi_dmul>
 800d106:	0002      	movs	r2, r0
 800d108:	000b      	movs	r3, r1
 800d10a:	0010      	movs	r0, r2
 800d10c:	0019      	movs	r1, r3
 800d10e:	2200      	movs	r2, #0
 800d110:	4b35      	ldr	r3, [pc, #212]	; (800d1e8 <BME280_P_Double+0x320>)
 800d112:	f7f4 fbc5 	bl	80018a0 <__aeabi_ddiv>
 800d116:	0002      	movs	r2, r0
 800d118:	000b      	movs	r3, r1
 800d11a:	61ba      	str	r2, [r7, #24]
 800d11c:	61fb      	str	r3, [r7, #28]
	var2 = p * ((double) Calib_data->dig_P8) / 32768.0;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2214      	movs	r2, #20
 800d122:	5e9b      	ldrsh	r3, [r3, r2]
 800d124:	0018      	movs	r0, r3
 800d126:	f7f5 fe0f 	bl	8002d48 <__aeabi_i2d>
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f7f4 ffb9 	bl	80020a4 <__aeabi_dmul>
 800d132:	0002      	movs	r2, r0
 800d134:	000b      	movs	r3, r1
 800d136:	0010      	movs	r0, r2
 800d138:	0019      	movs	r1, r3
 800d13a:	2200      	movs	r2, #0
 800d13c:	4b21      	ldr	r3, [pc, #132]	; (800d1c4 <BME280_P_Double+0x2fc>)
 800d13e:	f7f4 fbaf 	bl	80018a0 <__aeabi_ddiv>
 800d142:	0002      	movs	r2, r0
 800d144:	000b      	movs	r3, r1
 800d146:	613a      	str	r2, [r7, #16]
 800d148:	617b      	str	r3, [r7, #20]

	p = p + (var1 + var2 + ((double) Calib_data->dig_P7)) / 16.0;
 800d14a:	693a      	ldr	r2, [r7, #16]
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	69b8      	ldr	r0, [r7, #24]
 800d150:	69f9      	ldr	r1, [r7, #28]
 800d152:	f7f4 f869 	bl	8001228 <__aeabi_dadd>
 800d156:	0002      	movs	r2, r0
 800d158:	000b      	movs	r3, r1
 800d15a:	0014      	movs	r4, r2
 800d15c:	001d      	movs	r5, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2212      	movs	r2, #18
 800d162:	5e9b      	ldrsh	r3, [r3, r2]
 800d164:	0018      	movs	r0, r3
 800d166:	f7f5 fdef 	bl	8002d48 <__aeabi_i2d>
 800d16a:	0002      	movs	r2, r0
 800d16c:	000b      	movs	r3, r1
 800d16e:	0020      	movs	r0, r4
 800d170:	0029      	movs	r1, r5
 800d172:	f7f4 f859 	bl	8001228 <__aeabi_dadd>
 800d176:	0002      	movs	r2, r0
 800d178:	000b      	movs	r3, r1
 800d17a:	0010      	movs	r0, r2
 800d17c:	0019      	movs	r1, r3
 800d17e:	2200      	movs	r2, #0
 800d180:	4b1a      	ldr	r3, [pc, #104]	; (800d1ec <BME280_P_Double+0x324>)
 800d182:	f7f4 fb8d 	bl	80018a0 <__aeabi_ddiv>
 800d186:	0002      	movs	r2, r0
 800d188:	000b      	movs	r3, r1
 800d18a:	68b8      	ldr	r0, [r7, #8]
 800d18c:	68f9      	ldr	r1, [r7, #12]
 800d18e:	f7f4 f84b 	bl	8001228 <__aeabi_dadd>
 800d192:	0002      	movs	r2, r0
 800d194:	000b      	movs	r3, r1
 800d196:	60ba      	str	r2, [r7, #8]
 800d198:	60fb      	str	r3, [r7, #12]
	p = (p/1000);
 800d19a:	2200      	movs	r2, #0
 800d19c:	4b14      	ldr	r3, [pc, #80]	; (800d1f0 <BME280_P_Double+0x328>)
 800d19e:	68b8      	ldr	r0, [r7, #8]
 800d1a0:	68f9      	ldr	r1, [r7, #12]
 800d1a2:	f7f4 fb7d 	bl	80018a0 <__aeabi_ddiv>
 800d1a6:	0002      	movs	r2, r0
 800d1a8:	000b      	movs	r3, r1
 800d1aa:	60ba      	str	r2, [r7, #8]
 800d1ac:	60fb      	str	r3, [r7, #12]

	return p;
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
}
 800d1b2:	0010      	movs	r0, r2
 800d1b4:	0019      	movs	r1, r3
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	b008      	add	sp, #32
 800d1ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d1bc:	2000272c 	.word	0x2000272c
 800d1c0:	40ef4000 	.word	0x40ef4000
 800d1c4:	40e00000 	.word	0x40e00000
 800d1c8:	40100000 	.word	0x40100000
 800d1cc:	40f00000 	.word	0x40f00000
 800d1d0:	41200000 	.word	0x41200000
 800d1d4:	3ff00000 	.word	0x3ff00000
 800d1d8:	20002730 	.word	0x20002730
 800d1dc:	41300000 	.word	0x41300000
 800d1e0:	40b00000 	.word	0x40b00000
 800d1e4:	40b86a00 	.word	0x40b86a00
 800d1e8:	41e00000 	.word	0x41e00000
 800d1ec:	40300000 	.word	0x40300000
 800d1f0:	408f4000 	.word	0x408f4000

0800d1f4 <BME280_H_Double>:

double BME280_H_Double(BME280_Calib_Data_struct *Calib_data)
{
 800d1f4:	b5b0      	push	{r4, r5, r7, lr}
 800d1f6:	b088      	sub	sp, #32
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6178      	str	r0, [r7, #20]
//	BME280_Humidity(handle);
	long double var_H;

	var_H = (((double) t_fine) - 76800.0);
 800d1fc:	4b6f      	ldr	r3, [pc, #444]	; (800d3bc <BME280_H_Double+0x1c8>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	0018      	movs	r0, r3
 800d202:	f7f5 fda1 	bl	8002d48 <__aeabi_i2d>
 800d206:	2200      	movs	r2, #0
 800d208:	4b6d      	ldr	r3, [pc, #436]	; (800d3c0 <BME280_H_Double+0x1cc>)
 800d20a:	f7f5 f9b7 	bl	800257c <__aeabi_dsub>
 800d20e:	0002      	movs	r2, r0
 800d210:	000b      	movs	r3, r1
 800d212:	61ba      	str	r2, [r7, #24]
 800d214:	61fb      	str	r3, [r7, #28]
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 800d216:	4b6b      	ldr	r3, [pc, #428]	; (800d3c4 <BME280_H_Double+0x1d0>)
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	0018      	movs	r0, r3
 800d21c:	f7f5 fdc4 	bl	8002da8 <__aeabi_ui2d>
 800d220:	0004      	movs	r4, r0
 800d222:	000d      	movs	r5, r1
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	221e      	movs	r2, #30
 800d228:	5e9b      	ldrsh	r3, [r3, r2]
 800d22a:	0018      	movs	r0, r3
 800d22c:	f7f5 fd8c 	bl	8002d48 <__aeabi_i2d>
 800d230:	2200      	movs	r2, #0
 800d232:	4b65      	ldr	r3, [pc, #404]	; (800d3c8 <BME280_H_Double+0x1d4>)
 800d234:	f7f4 ff36 	bl	80020a4 <__aeabi_dmul>
 800d238:	0002      	movs	r2, r0
 800d23a:	000b      	movs	r3, r1
 800d23c:	60ba      	str	r2, [r7, #8]
 800d23e:	60fb      	str	r3, [r7, #12]
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2120      	movs	r1, #32
 800d244:	5e5b      	ldrsh	r3, [r3, r1]
 800d246:	0018      	movs	r0, r3
 800d248:	f7f5 fd7e 	bl	8002d48 <__aeabi_i2d>
 800d24c:	2200      	movs	r2, #0
 800d24e:	4b5f      	ldr	r3, [pc, #380]	; (800d3cc <BME280_H_Double+0x1d8>)
 800d250:	f7f4 fb26 	bl	80018a0 <__aeabi_ddiv>
 800d254:	0002      	movs	r2, r0
 800d256:	000b      	movs	r3, r1
 800d258:	0010      	movs	r0, r2
 800d25a:	0019      	movs	r1, r3
 800d25c:	69ba      	ldr	r2, [r7, #24]
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	f7f4 ff20 	bl	80020a4 <__aeabi_dmul>
 800d264:	0002      	movs	r2, r0
 800d266:	000b      	movs	r3, r1
 800d268:	68b8      	ldr	r0, [r7, #8]
 800d26a:	68f9      	ldr	r1, [r7, #12]
 800d26c:	f7f3 ffdc 	bl	8001228 <__aeabi_dadd>
 800d270:	0002      	movs	r2, r0
 800d272:	000b      	movs	r3, r1
 800d274:	0020      	movs	r0, r4
 800d276:	0029      	movs	r1, r5
 800d278:	f7f5 f980 	bl	800257c <__aeabi_dsub>
 800d27c:	0002      	movs	r2, r0
 800d27e:	000b      	movs	r3, r1
 800d280:	0014      	movs	r4, r2
 800d282:	001d      	movs	r5, r3
			(((double) Calib_data->dig_H2)/65536.0 * (1.0 + ((double) Calib_data->dig_H6) / 67108864.0*var_H * (1.0 + ((double) Calib_data->dig_H3)/67108864.0*var_H)));
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	221a      	movs	r2, #26
 800d288:	5e9b      	ldrsh	r3, [r3, r2]
 800d28a:	0018      	movs	r0, r3
 800d28c:	f7f5 fd5c 	bl	8002d48 <__aeabi_i2d>
 800d290:	2200      	movs	r2, #0
 800d292:	4b4f      	ldr	r3, [pc, #316]	; (800d3d0 <BME280_H_Double+0x1dc>)
 800d294:	f7f4 fb04 	bl	80018a0 <__aeabi_ddiv>
 800d298:	0002      	movs	r2, r0
 800d29a:	000b      	movs	r3, r1
 800d29c:	60ba      	str	r2, [r7, #8]
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2222      	movs	r2, #34	; 0x22
 800d2a4:	569b      	ldrsb	r3, [r3, r2]
 800d2a6:	0018      	movs	r0, r3
 800d2a8:	f7f5 fd4e 	bl	8002d48 <__aeabi_i2d>
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	4b49      	ldr	r3, [pc, #292]	; (800d3d4 <BME280_H_Double+0x1e0>)
 800d2b0:	f7f4 faf6 	bl	80018a0 <__aeabi_ddiv>
 800d2b4:	0002      	movs	r2, r0
 800d2b6:	000b      	movs	r3, r1
 800d2b8:	0010      	movs	r0, r2
 800d2ba:	0019      	movs	r1, r3
 800d2bc:	69ba      	ldr	r2, [r7, #24]
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	f7f4 fef0 	bl	80020a4 <__aeabi_dmul>
 800d2c4:	0002      	movs	r2, r0
 800d2c6:	000b      	movs	r3, r1
 800d2c8:	603a      	str	r2, [r7, #0]
 800d2ca:	607b      	str	r3, [r7, #4]
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	7f1b      	ldrb	r3, [r3, #28]
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	f7f5 fd69 	bl	8002da8 <__aeabi_ui2d>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4b3e      	ldr	r3, [pc, #248]	; (800d3d4 <BME280_H_Double+0x1e0>)
 800d2da:	f7f4 fae1 	bl	80018a0 <__aeabi_ddiv>
 800d2de:	0002      	movs	r2, r0
 800d2e0:	000b      	movs	r3, r1
 800d2e2:	0010      	movs	r0, r2
 800d2e4:	0019      	movs	r1, r3
 800d2e6:	69ba      	ldr	r2, [r7, #24]
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	f7f4 fedb 	bl	80020a4 <__aeabi_dmul>
 800d2ee:	0002      	movs	r2, r0
 800d2f0:	000b      	movs	r3, r1
 800d2f2:	0010      	movs	r0, r2
 800d2f4:	0019      	movs	r1, r3
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	4b37      	ldr	r3, [pc, #220]	; (800d3d8 <BME280_H_Double+0x1e4>)
 800d2fa:	f7f3 ff95 	bl	8001228 <__aeabi_dadd>
 800d2fe:	0002      	movs	r2, r0
 800d300:	000b      	movs	r3, r1
 800d302:	6838      	ldr	r0, [r7, #0]
 800d304:	6879      	ldr	r1, [r7, #4]
 800d306:	f7f4 fecd 	bl	80020a4 <__aeabi_dmul>
 800d30a:	0002      	movs	r2, r0
 800d30c:	000b      	movs	r3, r1
 800d30e:	0010      	movs	r0, r2
 800d310:	0019      	movs	r1, r3
 800d312:	2200      	movs	r2, #0
 800d314:	4b30      	ldr	r3, [pc, #192]	; (800d3d8 <BME280_H_Double+0x1e4>)
 800d316:	f7f3 ff87 	bl	8001228 <__aeabi_dadd>
 800d31a:	0002      	movs	r2, r0
 800d31c:	000b      	movs	r3, r1
 800d31e:	68b8      	ldr	r0, [r7, #8]
 800d320:	68f9      	ldr	r1, [r7, #12]
 800d322:	f7f4 febf 	bl	80020a4 <__aeabi_dmul>
 800d326:	0002      	movs	r2, r0
 800d328:	000b      	movs	r3, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 800d32a:	0020      	movs	r0, r4
 800d32c:	0029      	movs	r1, r5
 800d32e:	f7f4 feb9 	bl	80020a4 <__aeabi_dmul>
 800d332:	0002      	movs	r2, r0
 800d334:	000b      	movs	r3, r1
 800d336:	61ba      	str	r2, [r7, #24]
 800d338:	61fb      	str	r3, [r7, #28]
	var_H *= (1.0 - ((double)Calib_data->dig_H1)*var_H/524288.0);
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	7e1b      	ldrb	r3, [r3, #24]
 800d33e:	0018      	movs	r0, r3
 800d340:	f7f5 fd32 	bl	8002da8 <__aeabi_ui2d>
 800d344:	69ba      	ldr	r2, [r7, #24]
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	f7f4 feac 	bl	80020a4 <__aeabi_dmul>
 800d34c:	0002      	movs	r2, r0
 800d34e:	000b      	movs	r3, r1
 800d350:	0010      	movs	r0, r2
 800d352:	0019      	movs	r1, r3
 800d354:	2200      	movs	r2, #0
 800d356:	4b21      	ldr	r3, [pc, #132]	; (800d3dc <BME280_H_Double+0x1e8>)
 800d358:	f7f4 faa2 	bl	80018a0 <__aeabi_ddiv>
 800d35c:	0002      	movs	r2, r0
 800d35e:	000b      	movs	r3, r1
 800d360:	2000      	movs	r0, #0
 800d362:	491d      	ldr	r1, [pc, #116]	; (800d3d8 <BME280_H_Double+0x1e4>)
 800d364:	f7f5 f90a 	bl	800257c <__aeabi_dsub>
 800d368:	0002      	movs	r2, r0
 800d36a:	000b      	movs	r3, r1
 800d36c:	69b8      	ldr	r0, [r7, #24]
 800d36e:	69f9      	ldr	r1, [r7, #28]
 800d370:	f7f4 fe98 	bl	80020a4 <__aeabi_dmul>
 800d374:	0002      	movs	r2, r0
 800d376:	000b      	movs	r3, r1
 800d378:	61ba      	str	r2, [r7, #24]
 800d37a:	61fb      	str	r3, [r7, #28]

	if (var_H > 100.0){
 800d37c:	2200      	movs	r2, #0
 800d37e:	4b18      	ldr	r3, [pc, #96]	; (800d3e0 <BME280_H_Double+0x1ec>)
 800d380:	69b8      	ldr	r0, [r7, #24]
 800d382:	69f9      	ldr	r1, [r7, #28]
 800d384:	f7f3 f87a 	bl	800047c <__aeabi_dcmpgt>
 800d388:	1e03      	subs	r3, r0, #0
 800d38a:	d004      	beq.n	800d396 <BME280_H_Double+0x1a2>
		var_H = 100.0;
 800d38c:	2200      	movs	r2, #0
 800d38e:	4b14      	ldr	r3, [pc, #80]	; (800d3e0 <BME280_H_Double+0x1ec>)
 800d390:	61ba      	str	r2, [r7, #24]
 800d392:	61fb      	str	r3, [r7, #28]
 800d394:	e00b      	b.n	800d3ae <BME280_H_Double+0x1ba>
	}
	else if (var_H < 0.0){
 800d396:	2200      	movs	r2, #0
 800d398:	2300      	movs	r3, #0
 800d39a:	69b8      	ldr	r0, [r7, #24]
 800d39c:	69f9      	ldr	r1, [r7, #28]
 800d39e:	f7f3 f859 	bl	8000454 <__aeabi_dcmplt>
 800d3a2:	1e03      	subs	r3, r0, #0
 800d3a4:	d003      	beq.n	800d3ae <BME280_H_Double+0x1ba>
		var_H = 0.0;
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	61ba      	str	r2, [r7, #24]
 800d3ac:	61fb      	str	r3, [r7, #28]
	}

	return var_H;
 800d3ae:	69ba      	ldr	r2, [r7, #24]
 800d3b0:	69fb      	ldr	r3, [r7, #28]
}
 800d3b2:	0010      	movs	r0, r2
 800d3b4:	0019      	movs	r1, r3
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	b008      	add	sp, #32
 800d3ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d3bc:	2000272c 	.word	0x2000272c
 800d3c0:	40f2c000 	.word	0x40f2c000
 800d3c4:	20002740 	.word	0x20002740
 800d3c8:	40500000 	.word	0x40500000
 800d3cc:	40d00000 	.word	0x40d00000
 800d3d0:	40f00000 	.word	0x40f00000
 800d3d4:	41900000 	.word	0x41900000
 800d3d8:	3ff00000 	.word	0x3ff00000
 800d3dc:	41200000 	.word	0x41200000
 800d3e0:	40590000 	.word	0x40590000

0800d3e4 <BME280_Altitude_Double>:


double BME280_Altitude_Double(double Pressure, double Pressure_ref)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60b8      	str	r0, [r7, #8]
 800d3ec:	60f9      	str	r1, [r7, #12]
 800d3ee:	603a      	str	r2, [r7, #0]
 800d3f0:	607b      	str	r3, [r7, #4]
	long double var1;
	var1 = pow(Pressure/Pressure_ref, 1/5.255);
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	68b8      	ldr	r0, [r7, #8]
 800d3f8:	68f9      	ldr	r1, [r7, #12]
 800d3fa:	f7f4 fa51 	bl	80018a0 <__aeabi_ddiv>
 800d3fe:	0002      	movs	r2, r0
 800d400:	000b      	movs	r3, r1
 800d402:	0010      	movs	r0, r2
 800d404:	0019      	movs	r1, r3
 800d406:	4a0e      	ldr	r2, [pc, #56]	; (800d440 <BME280_Altitude_Double+0x5c>)
 800d408:	4b0e      	ldr	r3, [pc, #56]	; (800d444 <BME280_Altitude_Double+0x60>)
 800d40a:	f004 f85d 	bl	80114c8 <pow>
 800d40e:	0002      	movs	r2, r0
 800d410:	000b      	movs	r3, r1
 800d412:	613a      	str	r2, [r7, #16]
 800d414:	617b      	str	r3, [r7, #20]
	return 44330*(1-var1);
 800d416:	693a      	ldr	r2, [r7, #16]
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2000      	movs	r0, #0
 800d41c:	490a      	ldr	r1, [pc, #40]	; (800d448 <BME280_Altitude_Double+0x64>)
 800d41e:	f7f5 f8ad 	bl	800257c <__aeabi_dsub>
 800d422:	0002      	movs	r2, r0
 800d424:	000b      	movs	r3, r1
 800d426:	0010      	movs	r0, r2
 800d428:	0019      	movs	r1, r3
 800d42a:	2200      	movs	r2, #0
 800d42c:	4b07      	ldr	r3, [pc, #28]	; (800d44c <BME280_Altitude_Double+0x68>)
 800d42e:	f7f4 fe39 	bl	80020a4 <__aeabi_dmul>
 800d432:	0002      	movs	r2, r0
 800d434:	000b      	movs	r3, r1
}
 800d436:	0010      	movs	r0, r2
 800d438:	0019      	movs	r1, r3
 800d43a:	46bd      	mov	sp, r7
 800d43c:	b006      	add	sp, #24
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	ccd9456c 	.word	0xccd9456c
 800d444:	3fc85b95 	.word	0x3fc85b95
 800d448:	3ff00000 	.word	0x3ff00000
 800d44c:	40e5a540 	.word	0x40e5a540

0800d450 <MPU6050_Init>:
int16_t Temperature_raw;



HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800d450:	b084      	sub	sp, #16
 800d452:	b5b0      	push	{r4, r5, r7, lr}
 800d454:	b086      	sub	sp, #24
 800d456:	af04      	add	r7, sp, #16
 800d458:	2518      	movs	r5, #24
 800d45a:	197c      	adds	r4, r7, r5
 800d45c:	6020      	str	r0, [r4, #0]
 800d45e:	6061      	str	r1, [r4, #4]
 800d460:	60a2      	str	r2, [r4, #8]
 800d462:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t data;

	// Config register complete reset (everything to 0, except sleep enable and ID)
	data = 0x80;
 800d464:	1dbb      	adds	r3, r7, #6
 800d466:	2280      	movs	r2, #128	; 0x80
 800d468:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 800d46a:	234c      	movs	r3, #76	; 0x4c
 800d46c:	195b      	adds	r3, r3, r5
 800d46e:	19db      	adds	r3, r3, r7
 800d470:	881b      	ldrh	r3, [r3, #0]
 800d472:	1dfc      	adds	r4, r7, #7
 800d474:	1978      	adds	r0, r7, r5
 800d476:	9302      	str	r3, [sp, #8]
 800d478:	2301      	movs	r3, #1
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	1dbb      	adds	r3, r7, #6
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	2301      	movs	r3, #1
 800d482:	226b      	movs	r2, #107	; 0x6b
 800d484:	21d0      	movs	r1, #208	; 0xd0
 800d486:	f7f7 fc0b 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d48a:	0003      	movs	r3, r0
 800d48c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d48e:	1dfb      	adds	r3, r7, #7
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <MPU6050_Init+0x4c>
		return status;
 800d496:	1dfb      	adds	r3, r7, #7
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	e091      	b.n	800d5c0 <MPU6050_Init+0x170>
	HAL_Delay(100);
 800d49c:	2064      	movs	r0, #100	; 0x64
 800d49e:	f7f7 f825 	bl	80044ec <HAL_Delay>

	// Signal path and sensor reg reset
	data = 0x01;
 800d4a2:	1dbb      	adds	r3, r7, #6
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_USER_CTRL, 1, &data, 1, Timeout);
 800d4a8:	234c      	movs	r3, #76	; 0x4c
 800d4aa:	2218      	movs	r2, #24
 800d4ac:	189b      	adds	r3, r3, r2
 800d4ae:	19db      	adds	r3, r3, r7
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	1dfc      	adds	r4, r7, #7
 800d4b4:	18b8      	adds	r0, r7, r2
 800d4b6:	9302      	str	r3, [sp, #8]
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	1dbb      	adds	r3, r7, #6
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	226a      	movs	r2, #106	; 0x6a
 800d4c4:	21d0      	movs	r1, #208	; 0xd0
 800d4c6:	f7f7 fbeb 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d4ca:	0003      	movs	r3, r0
 800d4cc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d4ce:	1dfb      	adds	r3, r7, #7
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <MPU6050_Init+0x8c>
		return status;
 800d4d6:	1dfb      	adds	r3, r7, #7
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	e071      	b.n	800d5c0 <MPU6050_Init+0x170>
	HAL_Delay(100);
 800d4dc:	2064      	movs	r0, #100	; 0x64
 800d4de:	f7f7 f805 	bl	80044ec <HAL_Delay>

	// Wake-up and change clock source to gyro_X reference
	data = 0x01;
 800d4e2:	1dbb      	adds	r3, r7, #6
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 800d4e8:	234c      	movs	r3, #76	; 0x4c
 800d4ea:	2218      	movs	r2, #24
 800d4ec:	189b      	adds	r3, r3, r2
 800d4ee:	19db      	adds	r3, r3, r7
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	1dfc      	adds	r4, r7, #7
 800d4f4:	18b8      	adds	r0, r7, r2
 800d4f6:	9302      	str	r3, [sp, #8]
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	9301      	str	r3, [sp, #4]
 800d4fc:	1dbb      	adds	r3, r7, #6
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	2301      	movs	r3, #1
 800d502:	226b      	movs	r2, #107	; 0x6b
 800d504:	21d0      	movs	r1, #208	; 0xd0
 800d506:	f7f7 fbcb 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d50a:	0003      	movs	r3, r0
 800d50c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d50e:	1dfb      	adds	r3, r7, #7
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <MPU6050_Init+0xcc>
		return status;
 800d516:	1dfb      	adds	r3, r7, #7
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	e051      	b.n	800d5c0 <MPU6050_Init+0x170>

	// Set accelerometer range to ± 4g
	data = 0x08;
 800d51c:	1dbb      	adds	r3, r7, #6
 800d51e:	2208      	movs	r2, #8
 800d520:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_ACCEL_CONFIG, 1, &data, 1, Timeout);
 800d522:	234c      	movs	r3, #76	; 0x4c
 800d524:	2218      	movs	r2, #24
 800d526:	189b      	adds	r3, r3, r2
 800d528:	19db      	adds	r3, r3, r7
 800d52a:	881b      	ldrh	r3, [r3, #0]
 800d52c:	1dfc      	adds	r4, r7, #7
 800d52e:	18b8      	adds	r0, r7, r2
 800d530:	9302      	str	r3, [sp, #8]
 800d532:	2301      	movs	r3, #1
 800d534:	9301      	str	r3, [sp, #4]
 800d536:	1dbb      	adds	r3, r7, #6
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	2301      	movs	r3, #1
 800d53c:	221c      	movs	r2, #28
 800d53e:	21d0      	movs	r1, #208	; 0xd0
 800d540:	f7f7 fbae 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d544:	0003      	movs	r3, r0
 800d546:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d548:	1dfb      	adds	r3, r7, #7
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <MPU6050_Init+0x106>
		return status;
 800d550:	1dfb      	adds	r3, r7, #7
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	e034      	b.n	800d5c0 <MPU6050_Init+0x170>

	// Set gyroscope range to ± 500°/s
	data = 0x08;
 800d556:	1dbb      	adds	r3, r7, #6
 800d558:	2208      	movs	r2, #8
 800d55a:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_GYRO_CONFIG, 1, &data, 1, Timeout);
 800d55c:	234c      	movs	r3, #76	; 0x4c
 800d55e:	2218      	movs	r2, #24
 800d560:	189b      	adds	r3, r3, r2
 800d562:	19db      	adds	r3, r3, r7
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	1dfc      	adds	r4, r7, #7
 800d568:	18b8      	adds	r0, r7, r2
 800d56a:	9302      	str	r3, [sp, #8]
 800d56c:	2301      	movs	r3, #1
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	1dbb      	adds	r3, r7, #6
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	2301      	movs	r3, #1
 800d576:	221b      	movs	r2, #27
 800d578:	21d0      	movs	r1, #208	; 0xd0
 800d57a:	f7f7 fb91 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d57e:	0003      	movs	r3, r0
 800d580:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d582:	1dfb      	adds	r3, r7, #7
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <MPU6050_Init+0x140>
		return status;
 800d58a:	1dfb      	adds	r3, r7, #7
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	e017      	b.n	800d5c0 <MPU6050_Init+0x170>

	// Set sample rate to 8kHz/(1+19)=400Hz
	data = 0x13;
 800d590:	1dbb      	adds	r3, r7, #6
 800d592:	2213      	movs	r2, #19
 800d594:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
 800d596:	234c      	movs	r3, #76	; 0x4c
 800d598:	2218      	movs	r2, #24
 800d59a:	189b      	adds	r3, r3, r2
 800d59c:	19db      	adds	r3, r3, r7
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	1dfc      	adds	r4, r7, #7
 800d5a2:	18b8      	adds	r0, r7, r2
 800d5a4:	9302      	str	r3, [sp, #8]
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	1dbb      	adds	r3, r7, #6
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	2219      	movs	r2, #25
 800d5b2:	21d0      	movs	r1, #208	; 0xd0
 800d5b4:	f7f7 fb74 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d5b8:	0003      	movs	r3, r0
 800d5ba:	7023      	strb	r3, [r4, #0]
	return status;
 800d5bc:	1dfb      	adds	r3, r7, #7
 800d5be:	781b      	ldrb	r3, [r3, #0]
}
 800d5c0:	0018      	movs	r0, r3
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	b002      	add	sp, #8
 800d5c6:	bcb0      	pop	{r4, r5, r7}
 800d5c8:	bc08      	pop	{r3}
 800d5ca:	b004      	add	sp, #16
 800d5cc:	4718      	bx	r3

0800d5ce <MPU6050_read_ID>:



HAL_StatusTypeDef MPU6050_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	b5b0      	push	{r4, r5, r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af04      	add	r7, sp, #16
 800d5d6:	2510      	movs	r5, #16
 800d5d8:	197c      	adds	r4, r7, r5
 800d5da:	6020      	str	r0, [r4, #0]
 800d5dc:	6061      	str	r1, [r4, #4]
 800d5de:	60a2      	str	r2, [r4, #8]
 800d5e0:	60e3      	str	r3, [r4, #12]
	return HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_WHO_AM_I, 1, ptr_ID, 1, Timeout);
 800d5e2:	2350      	movs	r3, #80	; 0x50
 800d5e4:	002a      	movs	r2, r5
 800d5e6:	189b      	adds	r3, r3, r2
 800d5e8:	19db      	adds	r3, r3, r7
 800d5ea:	881b      	ldrh	r3, [r3, #0]
 800d5ec:	18b8      	adds	r0, r7, r2
 800d5ee:	9302      	str	r3, [sp, #8]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	2275      	movs	r2, #117	; 0x75
 800d5fc:	21d0      	movs	r1, #208	; 0xd0
 800d5fe:	f7f7 fc7d 	bl	8004efc <HAL_I2C_Mem_Read>
 800d602:	0003      	movs	r3, r0
}
 800d604:	0018      	movs	r0, r3
 800d606:	46bd      	mov	sp, r7
 800d608:	bcb0      	pop	{r4, r5, r7}
 800d60a:	bc08      	pop	{r3}
 800d60c:	b004      	add	sp, #16
 800d60e:	4718      	bx	r3

0800d610 <MPU6050_read_All>:



HAL_StatusTypeDef MPU6050_read_All(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800d610:	b084      	sub	sp, #16
 800d612:	b5b0      	push	{r4, r5, r7, lr}
 800d614:	b088      	sub	sp, #32
 800d616:	af04      	add	r7, sp, #16
 800d618:	2520      	movs	r5, #32
 800d61a:	197c      	adds	r4, r7, r5
 800d61c:	6020      	str	r0, [r4, #0]
 800d61e:	6061      	str	r1, [r4, #4]
 800d620:	60a2      	str	r2, [r4, #8]
 800d622:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t data[14];

	status = HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_ACCEL_XOUT_H, 1, data, 14, Timeout);
 800d624:	234c      	movs	r3, #76	; 0x4c
 800d626:	002a      	movs	r2, r5
 800d628:	189b      	adds	r3, r3, r2
 800d62a:	19db      	adds	r3, r3, r7
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	250f      	movs	r5, #15
 800d630:	197c      	adds	r4, r7, r5
 800d632:	18b8      	adds	r0, r7, r2
 800d634:	9302      	str	r3, [sp, #8]
 800d636:	230e      	movs	r3, #14
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	003b      	movs	r3, r7
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	2301      	movs	r3, #1
 800d640:	223b      	movs	r2, #59	; 0x3b
 800d642:	21d0      	movs	r1, #208	; 0xd0
 800d644:	f7f7 fc5a 	bl	8004efc <HAL_I2C_Mem_Read>
 800d648:	0003      	movs	r3, r0
 800d64a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d64c:	197b      	adds	r3, r7, r5
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <MPU6050_read_All+0x4a>
		return status;
 800d654:	197b      	adds	r3, r7, r5
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	e04f      	b.n	800d6fa <MPU6050_read_All+0xea>

	MPU6050_Accel_raw.xdata = data[0] << 8 | data[1];
 800d65a:	003b      	movs	r3, r7
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	021b      	lsls	r3, r3, #8
 800d660:	b21a      	sxth	r2, r3
 800d662:	003b      	movs	r3, r7
 800d664:	785b      	ldrb	r3, [r3, #1]
 800d666:	b21b      	sxth	r3, r3
 800d668:	4313      	orrs	r3, r2
 800d66a:	b21a      	sxth	r2, r3
 800d66c:	4b26      	ldr	r3, [pc, #152]	; (800d708 <MPU6050_read_All+0xf8>)
 800d66e:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_raw.ydata = data[2] << 8 | data[3];
 800d670:	003b      	movs	r3, r7
 800d672:	789b      	ldrb	r3, [r3, #2]
 800d674:	021b      	lsls	r3, r3, #8
 800d676:	b21a      	sxth	r2, r3
 800d678:	003b      	movs	r3, r7
 800d67a:	78db      	ldrb	r3, [r3, #3]
 800d67c:	b21b      	sxth	r3, r3
 800d67e:	4313      	orrs	r3, r2
 800d680:	b21a      	sxth	r2, r3
 800d682:	4b21      	ldr	r3, [pc, #132]	; (800d708 <MPU6050_read_All+0xf8>)
 800d684:	805a      	strh	r2, [r3, #2]
	MPU6050_Accel_raw.zdata = data[4] << 8 | data[5];
 800d686:	003b      	movs	r3, r7
 800d688:	791b      	ldrb	r3, [r3, #4]
 800d68a:	021b      	lsls	r3, r3, #8
 800d68c:	b21a      	sxth	r2, r3
 800d68e:	003b      	movs	r3, r7
 800d690:	795b      	ldrb	r3, [r3, #5]
 800d692:	b21b      	sxth	r3, r3
 800d694:	4313      	orrs	r3, r2
 800d696:	b21a      	sxth	r2, r3
 800d698:	4b1b      	ldr	r3, [pc, #108]	; (800d708 <MPU6050_read_All+0xf8>)
 800d69a:	809a      	strh	r2, [r3, #4]

	Temperature_raw = data[6] << 8 | data[7];
 800d69c:	003b      	movs	r3, r7
 800d69e:	799b      	ldrb	r3, [r3, #6]
 800d6a0:	021b      	lsls	r3, r3, #8
 800d6a2:	b21a      	sxth	r2, r3
 800d6a4:	003b      	movs	r3, r7
 800d6a6:	79db      	ldrb	r3, [r3, #7]
 800d6a8:	b21b      	sxth	r3, r3
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	b21a      	sxth	r2, r3
 800d6ae:	4b17      	ldr	r3, [pc, #92]	; (800d70c <MPU6050_read_All+0xfc>)
 800d6b0:	801a      	strh	r2, [r3, #0]

	MPU6050_Gyro_raw.xdata = data[8] << 8 | data[9];
 800d6b2:	003b      	movs	r3, r7
 800d6b4:	7a1b      	ldrb	r3, [r3, #8]
 800d6b6:	021b      	lsls	r3, r3, #8
 800d6b8:	b21a      	sxth	r2, r3
 800d6ba:	003b      	movs	r3, r7
 800d6bc:	7a5b      	ldrb	r3, [r3, #9]
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	b21a      	sxth	r2, r3
 800d6c4:	4b12      	ldr	r3, [pc, #72]	; (800d710 <MPU6050_read_All+0x100>)
 800d6c6:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_raw.ydata = data[10] << 8 | data[11];
 800d6c8:	003b      	movs	r3, r7
 800d6ca:	7a9b      	ldrb	r3, [r3, #10]
 800d6cc:	021b      	lsls	r3, r3, #8
 800d6ce:	b21a      	sxth	r2, r3
 800d6d0:	003b      	movs	r3, r7
 800d6d2:	7adb      	ldrb	r3, [r3, #11]
 800d6d4:	b21b      	sxth	r3, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	b21a      	sxth	r2, r3
 800d6da:	4b0d      	ldr	r3, [pc, #52]	; (800d710 <MPU6050_read_All+0x100>)
 800d6dc:	805a      	strh	r2, [r3, #2]
	MPU6050_Gyro_raw.zdata = data[12] << 8 | data[13];
 800d6de:	003b      	movs	r3, r7
 800d6e0:	7b1b      	ldrb	r3, [r3, #12]
 800d6e2:	021b      	lsls	r3, r3, #8
 800d6e4:	b21a      	sxth	r2, r3
 800d6e6:	003b      	movs	r3, r7
 800d6e8:	7b5b      	ldrb	r3, [r3, #13]
 800d6ea:	b21b      	sxth	r3, r3
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	b21a      	sxth	r2, r3
 800d6f0:	4b07      	ldr	r3, [pc, #28]	; (800d710 <MPU6050_read_All+0x100>)
 800d6f2:	809a      	strh	r2, [r3, #4]

	return status;
 800d6f4:	230f      	movs	r3, #15
 800d6f6:	18fb      	adds	r3, r7, r3
 800d6f8:	781b      	ldrb	r3, [r3, #0]
}
 800d6fa:	0018      	movs	r0, r3
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	b004      	add	sp, #16
 800d700:	bcb0      	pop	{r4, r5, r7}
 800d702:	bc08      	pop	{r3}
 800d704:	b004      	add	sp, #16
 800d706:	4718      	bx	r3
 800d708:	20002748 	.word	0x20002748
 800d70c:	20002756 	.word	0x20002756
 800d710:	20002750 	.word	0x20002750

0800d714 <MPU6050_Accel_double>:
}



void MPU6050_Accel_double(MPU6050_struct *pMPU6050)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
	pMPU6050->Accel_X = (double)MPU6050_Accel_raw.xdata / 8192.0;
 800d71c:	4b18      	ldr	r3, [pc, #96]	; (800d780 <MPU6050_Accel_double+0x6c>)
 800d71e:	2200      	movs	r2, #0
 800d720:	5e9b      	ldrsh	r3, [r3, r2]
 800d722:	0018      	movs	r0, r3
 800d724:	f7f5 fb10 	bl	8002d48 <__aeabi_i2d>
 800d728:	2200      	movs	r2, #0
 800d72a:	4b16      	ldr	r3, [pc, #88]	; (800d784 <MPU6050_Accel_double+0x70>)
 800d72c:	f7f4 f8b8 	bl	80018a0 <__aeabi_ddiv>
 800d730:	0002      	movs	r2, r0
 800d732:	000b      	movs	r3, r1
 800d734:	6879      	ldr	r1, [r7, #4]
 800d736:	608a      	str	r2, [r1, #8]
 800d738:	60cb      	str	r3, [r1, #12]
	pMPU6050->Accel_Y = (double)MPU6050_Accel_raw.ydata / 8192.0;
 800d73a:	4b11      	ldr	r3, [pc, #68]	; (800d780 <MPU6050_Accel_double+0x6c>)
 800d73c:	2202      	movs	r2, #2
 800d73e:	5e9b      	ldrsh	r3, [r3, r2]
 800d740:	0018      	movs	r0, r3
 800d742:	f7f5 fb01 	bl	8002d48 <__aeabi_i2d>
 800d746:	2200      	movs	r2, #0
 800d748:	4b0e      	ldr	r3, [pc, #56]	; (800d784 <MPU6050_Accel_double+0x70>)
 800d74a:	f7f4 f8a9 	bl	80018a0 <__aeabi_ddiv>
 800d74e:	0002      	movs	r2, r0
 800d750:	000b      	movs	r3, r1
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	610a      	str	r2, [r1, #16]
 800d756:	614b      	str	r3, [r1, #20]
	pMPU6050->Accel_Z = (double)MPU6050_Accel_raw.zdata / 8192.0;
 800d758:	4b09      	ldr	r3, [pc, #36]	; (800d780 <MPU6050_Accel_double+0x6c>)
 800d75a:	2204      	movs	r2, #4
 800d75c:	5e9b      	ldrsh	r3, [r3, r2]
 800d75e:	0018      	movs	r0, r3
 800d760:	f7f5 faf2 	bl	8002d48 <__aeabi_i2d>
 800d764:	2200      	movs	r2, #0
 800d766:	4b07      	ldr	r3, [pc, #28]	; (800d784 <MPU6050_Accel_double+0x70>)
 800d768:	f7f4 f89a 	bl	80018a0 <__aeabi_ddiv>
 800d76c:	0002      	movs	r2, r0
 800d76e:	000b      	movs	r3, r1
 800d770:	6879      	ldr	r1, [r7, #4]
 800d772:	618a      	str	r2, [r1, #24]
 800d774:	61cb      	str	r3, [r1, #28]
}
 800d776:	46c0      	nop			; (mov r8, r8)
 800d778:	46bd      	mov	sp, r7
 800d77a:	b002      	add	sp, #8
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	46c0      	nop			; (mov r8, r8)
 800d780:	20002748 	.word	0x20002748
 800d784:	40c00000 	.word	0x40c00000

0800d788 <MPU6050_Temp_double>:

void MPU6050_Temp_double(MPU6050_struct *pMPU6050)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
	pMPU6050->Temperature = (double)Temperature_raw / 340 + 36.53;
 800d790:	4b0d      	ldr	r3, [pc, #52]	; (800d7c8 <MPU6050_Temp_double+0x40>)
 800d792:	2200      	movs	r2, #0
 800d794:	5e9b      	ldrsh	r3, [r3, r2]
 800d796:	0018      	movs	r0, r3
 800d798:	f7f5 fad6 	bl	8002d48 <__aeabi_i2d>
 800d79c:	2200      	movs	r2, #0
 800d79e:	4b0b      	ldr	r3, [pc, #44]	; (800d7cc <MPU6050_Temp_double+0x44>)
 800d7a0:	f7f4 f87e 	bl	80018a0 <__aeabi_ddiv>
 800d7a4:	0002      	movs	r2, r0
 800d7a6:	000b      	movs	r3, r1
 800d7a8:	0010      	movs	r0, r2
 800d7aa:	0019      	movs	r1, r3
 800d7ac:	4a08      	ldr	r2, [pc, #32]	; (800d7d0 <MPU6050_Temp_double+0x48>)
 800d7ae:	4b09      	ldr	r3, [pc, #36]	; (800d7d4 <MPU6050_Temp_double+0x4c>)
 800d7b0:	f7f3 fd3a 	bl	8001228 <__aeabi_dadd>
 800d7b4:	0002      	movs	r2, r0
 800d7b6:	000b      	movs	r3, r1
 800d7b8:	6879      	ldr	r1, [r7, #4]
 800d7ba:	638a      	str	r2, [r1, #56]	; 0x38
 800d7bc:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800d7be:	46c0      	nop			; (mov r8, r8)
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	b002      	add	sp, #8
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	46c0      	nop			; (mov r8, r8)
 800d7c8:	20002756 	.word	0x20002756
 800d7cc:	40754000 	.word	0x40754000
 800d7d0:	0a3d70a4 	.word	0x0a3d70a4
 800d7d4:	404243d7 	.word	0x404243d7

0800d7d8 <MPU6050_Gyro_double>:

void MPU6050_Gyro_double(MPU6050_struct *pMPU6050)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
	pMPU6050->Gyro_X = (double)MPU6050_Gyro_raw.xdata / 65.5;
 800d7e0:	4b18      	ldr	r3, [pc, #96]	; (800d844 <MPU6050_Gyro_double+0x6c>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	5e9b      	ldrsh	r3, [r3, r2]
 800d7e6:	0018      	movs	r0, r3
 800d7e8:	f7f5 faae 	bl	8002d48 <__aeabi_i2d>
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	4b16      	ldr	r3, [pc, #88]	; (800d848 <MPU6050_Gyro_double+0x70>)
 800d7f0:	f7f4 f856 	bl	80018a0 <__aeabi_ddiv>
 800d7f4:	0002      	movs	r2, r0
 800d7f6:	000b      	movs	r3, r1
 800d7f8:	6879      	ldr	r1, [r7, #4]
 800d7fa:	620a      	str	r2, [r1, #32]
 800d7fc:	624b      	str	r3, [r1, #36]	; 0x24
	pMPU6050->Gyro_Y = (double)MPU6050_Gyro_raw.ydata / 65.5;
 800d7fe:	4b11      	ldr	r3, [pc, #68]	; (800d844 <MPU6050_Gyro_double+0x6c>)
 800d800:	2202      	movs	r2, #2
 800d802:	5e9b      	ldrsh	r3, [r3, r2]
 800d804:	0018      	movs	r0, r3
 800d806:	f7f5 fa9f 	bl	8002d48 <__aeabi_i2d>
 800d80a:	2200      	movs	r2, #0
 800d80c:	4b0e      	ldr	r3, [pc, #56]	; (800d848 <MPU6050_Gyro_double+0x70>)
 800d80e:	f7f4 f847 	bl	80018a0 <__aeabi_ddiv>
 800d812:	0002      	movs	r2, r0
 800d814:	000b      	movs	r3, r1
 800d816:	6879      	ldr	r1, [r7, #4]
 800d818:	628a      	str	r2, [r1, #40]	; 0x28
 800d81a:	62cb      	str	r3, [r1, #44]	; 0x2c
	pMPU6050->Gyro_Z = (double)MPU6050_Gyro_raw.zdata / 65.5;
 800d81c:	4b09      	ldr	r3, [pc, #36]	; (800d844 <MPU6050_Gyro_double+0x6c>)
 800d81e:	2204      	movs	r2, #4
 800d820:	5e9b      	ldrsh	r3, [r3, r2]
 800d822:	0018      	movs	r0, r3
 800d824:	f7f5 fa90 	bl	8002d48 <__aeabi_i2d>
 800d828:	2200      	movs	r2, #0
 800d82a:	4b07      	ldr	r3, [pc, #28]	; (800d848 <MPU6050_Gyro_double+0x70>)
 800d82c:	f7f4 f838 	bl	80018a0 <__aeabi_ddiv>
 800d830:	0002      	movs	r2, r0
 800d832:	000b      	movs	r3, r1
 800d834:	6879      	ldr	r1, [r7, #4]
 800d836:	630a      	str	r2, [r1, #48]	; 0x30
 800d838:	634b      	str	r3, [r1, #52]	; 0x34
}
 800d83a:	46c0      	nop			; (mov r8, r8)
 800d83c:	46bd      	mov	sp, r7
 800d83e:	b002      	add	sp, #8
 800d840:	bd80      	pop	{r7, pc}
 800d842:	46c0      	nop			; (mov r8, r8)
 800d844:	20002750 	.word	0x20002750
 800d848:	40506000 	.word	0x40506000

0800d84c <QMC_init>:
#include"QMC5883_lib.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b08a      	sub	sp, #40	; 0x28
 800d850:	af04      	add	r7, sp, #16
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	1dfb      	adds	r3, r7, #7
 800d858:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	qmc->i2c=i2c;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	68ba      	ldr	r2, [r7, #8]
 800d85e:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2211      	movs	r2, #17
 800d864:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800d866:	2114      	movs	r1, #20
 800d868:	187b      	adds	r3, r7, r1
 800d86a:	2201      	movs	r2, #1
 800d86c:	701a      	strb	r2, [r3, #0]
	array[1]=qmc->Control_Register;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	791a      	ldrb	r2, [r3, #4]
 800d872:	187b      	adds	r3, r7, r1
 800d874:	705a      	strb	r2, [r3, #1]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 800d876:	1dfb      	adds	r3, r7, #7
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	2bc8      	cmp	r3, #200	; 0xc8
 800d87c:	d107      	bne.n	800d88e <QMC_init+0x42>
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	791b      	ldrb	r3, [r3, #4]
 800d882:	220c      	movs	r2, #12
 800d884:	4313      	orrs	r3, r2
 800d886:	b2da      	uxtb	r2, r3
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	711a      	strb	r2, [r3, #4]
 800d88c:	e027      	b.n	800d8de <QMC_init+0x92>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800d88e:	1dfb      	adds	r3, r7, #7
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b64      	cmp	r3, #100	; 0x64
 800d894:	d107      	bne.n	800d8a6 <QMC_init+0x5a>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	791b      	ldrb	r3, [r3, #4]
 800d89a:	2208      	movs	r2, #8
 800d89c:	4313      	orrs	r3, r2
 800d89e:	b2da      	uxtb	r2, r3
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	711a      	strb	r2, [r3, #4]
 800d8a4:	e01b      	b.n	800d8de <QMC_init+0x92>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 800d8a6:	1dfb      	adds	r3, r7, #7
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b32      	cmp	r3, #50	; 0x32
 800d8ac:	d107      	bne.n	800d8be <QMC_init+0x72>
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	791b      	ldrb	r3, [r3, #4]
 800d8b2:	2204      	movs	r2, #4
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	711a      	strb	r2, [r3, #4]
 800d8bc:	e00f      	b.n	800d8de <QMC_init+0x92>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 800d8be:	1dfb      	adds	r3, r7, #7
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	2b0a      	cmp	r3, #10
 800d8c4:	d104      	bne.n	800d8d0 <QMC_init+0x84>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	791a      	ldrb	r2, [r3, #4]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	711a      	strb	r2, [r3, #4]
 800d8ce:	e006      	b.n	800d8de <QMC_init+0x92>
	else qmc->Control_Register|=0b00001100;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	791b      	ldrb	r3, [r3, #4]
 800d8d4:	220c      	movs	r2, #12
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6818      	ldr	r0, [r3, #0]
 800d8e2:	2364      	movs	r3, #100	; 0x64
 800d8e4:	9302      	str	r3, [sp, #8]
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	9301      	str	r3, [sp, #4]
 800d8ea:	2314      	movs	r3, #20
 800d8ec:	18fb      	adds	r3, r7, r3
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	220b      	movs	r2, #11
 800d8f4:	211a      	movs	r1, #26
 800d8f6:	f7f7 f9d3 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d8fa:	1e03      	subs	r3, r0, #0
 800d8fc:	d001      	beq.n	800d902 <QMC_init+0xb6>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e013      	b.n	800d92a <QMC_init+0xde>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6818      	ldr	r0, [r3, #0]
 800d906:	2364      	movs	r3, #100	; 0x64
 800d908:	9302      	str	r3, [sp, #8]
 800d90a:	2301      	movs	r3, #1
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	2314      	movs	r3, #20
 800d910:	18fb      	adds	r3, r7, r3
 800d912:	3301      	adds	r3, #1
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	2301      	movs	r3, #1
 800d918:	2209      	movs	r2, #9
 800d91a:	211a      	movs	r1, #26
 800d91c:	f7f7 f9c0 	bl	8004ca0 <HAL_I2C_Mem_Write>
 800d920:	1e03      	subs	r3, r0, #0
 800d922:	d001      	beq.n	800d928 <QMC_init+0xdc>
 800d924:	2301      	movs	r3, #1
 800d926:	e000      	b.n	800d92a <QMC_init+0xde>

	return 0;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	0018      	movs	r0, r3
 800d92c:	46bd      	mov	sp, r7
 800d92e:	b006      	add	sp, #24
 800d930:	bd80      	pop	{r7, pc}
	...

0800d934 <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b087      	sub	sp, #28
 800d938:	af04      	add	r7, sp, #16
 800d93a:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x06, 1, qmc->datas, 1, 100);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6818      	ldr	r0, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3305      	adds	r3, #5
 800d94a:	2264      	movs	r2, #100	; 0x64
 800d94c:	9202      	str	r2, [sp, #8]
 800d94e:	2201      	movs	r2, #1
 800d950:	9201      	str	r2, [sp, #4]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	2301      	movs	r3, #1
 800d956:	2206      	movs	r2, #6
 800d958:	211a      	movs	r1, #26
 800d95a:	f7f7 facf 	bl	8004efc <HAL_I2C_Mem_Read>

	  if((qmc->datas[0]&0x01)==1)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	795b      	ldrb	r3, [r3, #5]
 800d962:	001a      	movs	r2, r3
 800d964:	2301      	movs	r3, #1
 800d966:	4013      	ands	r3, r2
 800d968:	d071      	beq.n	800da4e <QMC_read+0x11a>
	  {
		  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x00, 1, qmc->datas, 6, 100);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	3305      	adds	r3, #5
 800d972:	2264      	movs	r2, #100	; 0x64
 800d974:	9202      	str	r2, [sp, #8]
 800d976:	2206      	movs	r2, #6
 800d978:	9201      	str	r2, [sp, #4]
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	2301      	movs	r3, #1
 800d97e:	2200      	movs	r2, #0
 800d980:	211a      	movs	r1, #26
 800d982:	f7f7 fabb 	bl	8004efc <HAL_I2C_Mem_Read>
		  qmc->Xaxis= (qmc->datas[1]<<8) | qmc->datas[0];
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	799b      	ldrb	r3, [r3, #6]
 800d98a:	021b      	lsls	r3, r3, #8
 800d98c:	b21a      	sxth	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	795b      	ldrb	r3, [r3, #5]
 800d992:	b21b      	sxth	r3, r3
 800d994:	4313      	orrs	r3, r2
 800d996:	b21a      	sxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	819a      	strh	r2, [r3, #12]
		  qmc->Yaxis= (qmc->datas[3]<<8) | qmc->datas[2];
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	7a1b      	ldrb	r3, [r3, #8]
 800d9a0:	021b      	lsls	r3, r3, #8
 800d9a2:	b21a      	sxth	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	79db      	ldrb	r3, [r3, #7]
 800d9a8:	b21b      	sxth	r3, r3
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	b21a      	sxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	81da      	strh	r2, [r3, #14]
		  qmc->Zaxis= (qmc->datas[5]<<8) | qmc->datas[4];
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	7a9b      	ldrb	r3, [r3, #10]
 800d9b6:	021b      	lsls	r3, r3, #8
 800d9b8:	b21a      	sxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7a5b      	ldrb	r3, [r3, #9]
 800d9be:	b21b      	sxth	r3, r3
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	b21a      	sxth	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	821a      	strh	r2, [r3, #16]

		  qmc->compas=atan2f(qmc->Yaxis,qmc->Xaxis)*180.00/M_PI;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	220e      	movs	r2, #14
 800d9cc:	5e9b      	ldrsh	r3, [r3, r2]
 800d9ce:	0018      	movs	r0, r3
 800d9d0:	f7f3 fbdc 	bl	800118c <__aeabi_i2f>
 800d9d4:	1c04      	adds	r4, r0, #0
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	220c      	movs	r2, #12
 800d9da:	5e9b      	ldrsh	r3, [r3, r2]
 800d9dc:	0018      	movs	r0, r3
 800d9de:	f7f3 fbd5 	bl	800118c <__aeabi_i2f>
 800d9e2:	1c03      	adds	r3, r0, #0
 800d9e4:	1c19      	adds	r1, r3, #0
 800d9e6:	1c20      	adds	r0, r4, #0
 800d9e8:	f003 fddc 	bl	80115a4 <atan2f>
 800d9ec:	1c03      	adds	r3, r0, #0
 800d9ee:	1c18      	adds	r0, r3, #0
 800d9f0:	f7f5 fa00 	bl	8002df4 <__aeabi_f2d>
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	4b19      	ldr	r3, [pc, #100]	; (800da5c <QMC_read+0x128>)
 800d9f8:	f7f4 fb54 	bl	80020a4 <__aeabi_dmul>
 800d9fc:	0002      	movs	r2, r0
 800d9fe:	000b      	movs	r3, r1
 800da00:	0010      	movs	r0, r2
 800da02:	0019      	movs	r1, r3
 800da04:	4a16      	ldr	r2, [pc, #88]	; (800da60 <QMC_read+0x12c>)
 800da06:	4b17      	ldr	r3, [pc, #92]	; (800da64 <QMC_read+0x130>)
 800da08:	f7f3 ff4a 	bl	80018a0 <__aeabi_ddiv>
 800da0c:	0002      	movs	r2, r0
 800da0e:	000b      	movs	r3, r1
 800da10:	0010      	movs	r0, r2
 800da12:	0019      	movs	r1, r3
 800da14:	f7f5 fa36 	bl	8002e84 <__aeabi_d2f>
 800da18:	1c02      	adds	r2, r0, #0
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	619a      	str	r2, [r3, #24]

		  if(qmc->compas>0)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	2100      	movs	r1, #0
 800da24:	1c18      	adds	r0, r3, #0
 800da26:	f7f2 fd63 	bl	80004f0 <__aeabi_fcmpgt>
 800da2a:	1e03      	subs	r3, r0, #0
 800da2c:	d004      	beq.n	800da38 <QMC_read+0x104>
		  {
			  qmc->heading= qmc->compas;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	699a      	ldr	r2, [r3, #24]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	615a      	str	r2, [r3, #20]
 800da36:	e00c      	b.n	800da52 <QMC_read+0x11e>
		  }
		  else
		  {
			  qmc->heading=360+qmc->compas;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	490a      	ldr	r1, [pc, #40]	; (800da68 <QMC_read+0x134>)
 800da3e:	1c18      	adds	r0, r3, #0
 800da40:	f7f2 fd6a 	bl	8000518 <__aeabi_fadd>
 800da44:	1c03      	adds	r3, r0, #0
 800da46:	1c1a      	adds	r2, r3, #0
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	615a      	str	r2, [r3, #20]
 800da4c:	e001      	b.n	800da52 <QMC_read+0x11e>
		  }
	  }
	  else
	  {
		  return 1;
 800da4e:	2301      	movs	r3, #1
 800da50:	e000      	b.n	800da54 <QMC_read+0x120>
	  }
return 0;
 800da52:	2300      	movs	r3, #0
}
 800da54:	0018      	movs	r0, r3
 800da56:	46bd      	mov	sp, r7
 800da58:	b003      	add	sp, #12
 800da5a:	bd90      	pop	{r4, r7, pc}
 800da5c:	40668000 	.word	0x40668000
 800da60:	54442d18 	.word	0x54442d18
 800da64:	400921fb 	.word	0x400921fb
 800da68:	43b40000 	.word	0x43b40000

0800da6c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800da70:	2390      	movs	r3, #144	; 0x90
 800da72:	05db      	lsls	r3, r3, #23
 800da74:	2200      	movs	r2, #0
 800da76:	2110      	movs	r1, #16
 800da78:	0018      	movs	r0, r3
 800da7a:	f7f7 f827 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800da7e:	2001      	movs	r0, #1
 800da80:	f7f6 fd34 	bl	80044ec <HAL_Delay>
}
 800da84:	46c0      	nop			; (mov r8, r8)
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800da8e:	2390      	movs	r3, #144	; 0x90
 800da90:	05db      	lsls	r3, r3, #23
 800da92:	2201      	movs	r2, #1
 800da94:	2110      	movs	r1, #16
 800da96:	0018      	movs	r0, r3
 800da98:	f7f7 f818 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800da9c:	2001      	movs	r0, #1
 800da9e:	f7f6 fd25 	bl	80044ec <HAL_Delay>
}
 800daa2:	46c0      	nop			; (mov r8, r8)
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	0002      	movs	r2, r0
 800dab0:	1dfb      	adds	r3, r7, #7
 800dab2:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800dab4:	46c0      	nop			; (mov r8, r8)
 800dab6:	4b08      	ldr	r3, [pc, #32]	; (800dad8 <SPI_TxByte+0x30>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	2202      	movs	r2, #2
 800dabe:	4013      	ands	r3, r2
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d1f8      	bne.n	800dab6 <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800dac4:	1df9      	adds	r1, r7, #7
 800dac6:	4804      	ldr	r0, [pc, #16]	; (800dad8 <SPI_TxByte+0x30>)
 800dac8:	2364      	movs	r3, #100	; 0x64
 800daca:	2201      	movs	r2, #1
 800dacc:	f7f8 ff62 	bl	8006994 <HAL_SPI_Transmit>
}
 800dad0:	46c0      	nop			; (mov r8, r8)
 800dad2:	46bd      	mov	sp, r7
 800dad4:	b002      	add	sp, #8
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	200002cc 	.word	0x200002cc

0800dadc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	000a      	movs	r2, r1
 800dae6:	1cbb      	adds	r3, r7, #2
 800dae8:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800daea:	46c0      	nop			; (mov r8, r8)
 800daec:	4b08      	ldr	r3, [pc, #32]	; (800db10 <SPI_TxBuffer+0x34>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	2202      	movs	r2, #2
 800daf4:	4013      	ands	r3, r2
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d1f8      	bne.n	800daec <SPI_TxBuffer+0x10>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800dafa:	1cbb      	adds	r3, r7, #2
 800dafc:	881a      	ldrh	r2, [r3, #0]
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	4803      	ldr	r0, [pc, #12]	; (800db10 <SPI_TxBuffer+0x34>)
 800db02:	2364      	movs	r3, #100	; 0x64
 800db04:	f7f8 ff46 	bl	8006994 <HAL_SPI_Transmit>
}
 800db08:	46c0      	nop			; (mov r8, r8)
 800db0a:	46bd      	mov	sp, r7
 800db0c:	b002      	add	sp, #8
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	200002cc 	.word	0x200002cc

0800db14 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800db1a:	1dfb      	adds	r3, r7, #7
 800db1c:	22ff      	movs	r2, #255	; 0xff
 800db1e:	701a      	strb	r2, [r3, #0]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800db20:	46c0      	nop			; (mov r8, r8)
 800db22:	4b0a      	ldr	r3, [pc, #40]	; (800db4c <SPI_RxByte+0x38>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	2202      	movs	r2, #2
 800db2a:	4013      	ands	r3, r2
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d1f8      	bne.n	800db22 <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800db30:	1dba      	adds	r2, r7, #6
 800db32:	1df9      	adds	r1, r7, #7
 800db34:	4805      	ldr	r0, [pc, #20]	; (800db4c <SPI_RxByte+0x38>)
 800db36:	2364      	movs	r3, #100	; 0x64
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	2301      	movs	r3, #1
 800db3c:	f7f9 f882 	bl	8006c44 <HAL_SPI_TransmitReceive>

	return data;
 800db40:	1dbb      	adds	r3, r7, #6
 800db42:	781b      	ldrb	r3, [r3, #0]
}
 800db44:	0018      	movs	r0, r3
 800db46:	46bd      	mov	sp, r7
 800db48:	b002      	add	sp, #8
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	200002cc 	.word	0x200002cc

0800db50 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800db58:	f7ff ffdc 	bl	800db14 <SPI_RxByte>
 800db5c:	0003      	movs	r3, r0
 800db5e:	001a      	movs	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	701a      	strb	r2, [r3, #0]
}
 800db64:	46c0      	nop			; (mov r8, r8)
 800db66:	46bd      	mov	sp, r7
 800db68:	b002      	add	sp, #8
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800db6c:	b590      	push	{r4, r7, lr}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
	uint8_t res;
	uint32_t tickstart;

	tickstart = HAL_GetTick();
 800db72:	f7f6 fcb1 	bl	80044d8 <HAL_GetTick>
 800db76:	0003      	movs	r3, r0
 800db78:	607b      	str	r3, [r7, #4]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800db7a:	1cfc      	adds	r4, r7, #3
 800db7c:	f7ff ffca 	bl	800db14 <SPI_RxByte>
 800db80:	0003      	movs	r3, r0
 800db82:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && ((HAL_GetTick() - tickstart) < SD_ReadyWait_TIMEOUT));
 800db84:	1cfb      	adds	r3, r7, #3
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	2bff      	cmp	r3, #255	; 0xff
 800db8a:	d008      	beq.n	800db9e <SD_ReadyWait+0x32>
 800db8c:	f7f6 fca4 	bl	80044d8 <HAL_GetTick>
 800db90:	0002      	movs	r2, r0
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	1ad2      	subs	r2, r2, r3
 800db96:	23fa      	movs	r3, #250	; 0xfa
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d3ed      	bcc.n	800db7a <SD_ReadyWait+0xe>

	return res;
 800db9e:	1cfb      	adds	r3, r7, #3
 800dba0:	781b      	ldrb	r3, [r3, #0]
}
 800dba2:	0018      	movs	r0, r3
 800dba4:	46bd      	mov	sp, r7
 800dba6:	b003      	add	sp, #12
 800dba8:	bd90      	pop	{r4, r7, pc}
	...

0800dbac <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800dbb2:	4b20      	ldr	r3, [pc, #128]	; (800dc34 <SD_PowerOn+0x88>)
 800dbb4:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800dbb6:	f7ff ff68 	bl	800da8a <DESELECT>
	for(int i = 0; i < 10; i++)
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60bb      	str	r3, [r7, #8]
 800dbbe:	e005      	b.n	800dbcc <SD_PowerOn+0x20>
	{
		SPI_TxByte(0xFF);
 800dbc0:	20ff      	movs	r0, #255	; 0xff
 800dbc2:	f7ff ff71 	bl	800daa8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	60bb      	str	r3, [r7, #8]
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	2b09      	cmp	r3, #9
 800dbd0:	ddf6      	ble.n	800dbc0 <SD_PowerOn+0x14>
	}

	/* slave select */
	SELECT();
 800dbd2:	f7ff ff4b 	bl	800da6c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800dbd6:	003b      	movs	r3, r7
 800dbd8:	2240      	movs	r2, #64	; 0x40
 800dbda:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 800dbdc:	003b      	movs	r3, r7
 800dbde:	2200      	movs	r2, #0
 800dbe0:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 800dbe2:	003b      	movs	r3, r7
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 800dbe8:	003b      	movs	r3, r7
 800dbea:	2200      	movs	r2, #0
 800dbec:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 800dbee:	003b      	movs	r3, r7
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 800dbf4:	003b      	movs	r3, r7
 800dbf6:	2295      	movs	r2, #149	; 0x95
 800dbf8:	715a      	strb	r2, [r3, #5]

	SPI_TxBuffer(args, sizeof(args));
 800dbfa:	003b      	movs	r3, r7
 800dbfc:	2106      	movs	r1, #6
 800dbfe:	0018      	movs	r0, r3
 800dc00:	f7ff ff6c 	bl	800dadc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800dc04:	e002      	b.n	800dc0c <SD_PowerOn+0x60>
	{
		cnt--;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800dc0c:	f7ff ff82 	bl	800db14 <SPI_RxByte>
 800dc10:	0003      	movs	r3, r0
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d002      	beq.n	800dc1c <SD_PowerOn+0x70>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1f4      	bne.n	800dc06 <SD_PowerOn+0x5a>
	}

	DESELECT();
 800dc1c:	f7ff ff35 	bl	800da8a <DESELECT>
	SPI_TxByte(0XFF);
 800dc20:	20ff      	movs	r0, #255	; 0xff
 800dc22:	f7ff ff41 	bl	800daa8 <SPI_TxByte>

	PowerFlag = 1;
 800dc26:	4b04      	ldr	r3, [pc, #16]	; (800dc38 <SD_PowerOn+0x8c>)
 800dc28:	2201      	movs	r2, #1
 800dc2a:	701a      	strb	r2, [r3, #0]
}
 800dc2c:	46c0      	nop			; (mov r8, r8)
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	b004      	add	sp, #16
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	00001fff 	.word	0x00001fff
 800dc38:	20002759 	.word	0x20002759

0800dc3c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800dc40:	4b02      	ldr	r3, [pc, #8]	; (800dc4c <SD_PowerOff+0x10>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	701a      	strb	r2, [r3, #0]
}
 800dc46:	46c0      	nop			; (mov r8, r8)
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	20002759 	.word	0x20002759

0800dc50 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
	return PowerFlag;
 800dc54:	4b02      	ldr	r3, [pc, #8]	; (800dc60 <SD_CheckPower+0x10>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
}
 800dc58:	0018      	movs	r0, r3
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	20002759 	.word	0x20002759

0800dc64 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800dc64:	b5b0      	push	{r4, r5, r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
	uint8_t token;
	uint32_t tickstart;

	tickstart = HAL_GetTick();
 800dc6e:	f7f6 fc33 	bl	80044d8 <HAL_GetTick>
 800dc72:	0003      	movs	r3, r0
 800dc74:	60fb      	str	r3, [r7, #12]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800dc76:	250b      	movs	r5, #11
 800dc78:	197c      	adds	r4, r7, r5
 800dc7a:	f7ff ff4b 	bl	800db14 <SPI_RxByte>
 800dc7e:	0003      	movs	r3, r0
 800dc80:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && ((HAL_GetTick() - tickstart) < SD_RxDataBlock_TIMEOUT));
 800dc82:	197b      	adds	r3, r7, r5
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2bff      	cmp	r3, #255	; 0xff
 800dc88:	d106      	bne.n	800dc98 <SD_RxDataBlock+0x34>
 800dc8a:	f7f6 fc25 	bl	80044d8 <HAL_GetTick>
 800dc8e:	0002      	movs	r2, r0
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	2bc7      	cmp	r3, #199	; 0xc7
 800dc96:	d9ee      	bls.n	800dc76 <SD_RxDataBlock+0x12>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800dc98:	230b      	movs	r3, #11
 800dc9a:	18fb      	adds	r3, r7, r3
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	2bfe      	cmp	r3, #254	; 0xfe
 800dca0:	d001      	beq.n	800dca6 <SD_RxDataBlock+0x42>
 800dca2:	2300      	movs	r3, #0
 800dca4:	e00f      	b.n	800dcc6 <SD_RxDataBlock+0x62>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	0018      	movs	r0, r3
 800dcae:	f7ff ff4f 	bl	800db50 <SPI_RxBytePtr>
	} while(len--);
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	1e5a      	subs	r2, r3, #1
 800dcb6:	603a      	str	r2, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1f4      	bne.n	800dca6 <SD_RxDataBlock+0x42>

	/* discard CRC */
	SPI_RxByte();
 800dcbc:	f7ff ff2a 	bl	800db14 <SPI_RxByte>
	SPI_RxByte();
 800dcc0:	f7ff ff28 	bl	800db14 <SPI_RxByte>

	return TRUE;
 800dcc4:	2301      	movs	r3, #1
}
 800dcc6:	0018      	movs	r0, r3
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	b004      	add	sp, #16
 800dccc:	bdb0      	pop	{r4, r5, r7, pc}

0800dcce <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800dcce:	b5b0      	push	{r4, r5, r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	000a      	movs	r2, r1
 800dcd8:	1cfb      	adds	r3, r7, #3
 800dcda:	701a      	strb	r2, [r3, #0]
	uint8_t resp = 0;
 800dcdc:	230f      	movs	r3, #15
 800dcde:	18fb      	adds	r3, r7, r3
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800dce4:	230e      	movs	r3, #14
 800dce6:	18fb      	adds	r3, r7, r3
 800dce8:	2200      	movs	r2, #0
 800dcea:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800dcec:	f7ff ff3e 	bl	800db6c <SD_ReadyWait>
 800dcf0:	0003      	movs	r3, r0
 800dcf2:	2bff      	cmp	r3, #255	; 0xff
 800dcf4:	d001      	beq.n	800dcfa <SD_TxDataBlock+0x2c>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e03c      	b.n	800dd74 <SD_TxDataBlock+0xa6>

	/* transmit token */
	SPI_TxByte(token);
 800dcfa:	1cfb      	adds	r3, r7, #3
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	0018      	movs	r0, r3
 800dd00:	f7ff fed2 	bl	800daa8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800dd04:	1cfb      	adds	r3, r7, #3
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2bfd      	cmp	r3, #253	; 0xfd
 800dd0a:	d029      	beq.n	800dd60 <SD_TxDataBlock+0x92>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800dd0c:	2380      	movs	r3, #128	; 0x80
 800dd0e:	009a      	lsls	r2, r3, #2
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	0011      	movs	r1, r2
 800dd14:	0018      	movs	r0, r3
 800dd16:	f7ff fee1 	bl	800dadc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800dd1a:	f7ff fefb 	bl	800db14 <SPI_RxByte>
		SPI_RxByte();
 800dd1e:	f7ff fef9 	bl	800db14 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800dd22:	e011      	b.n	800dd48 <SD_TxDataBlock+0x7a>
		{
			resp = SPI_RxByte();
 800dd24:	250f      	movs	r5, #15
 800dd26:	197c      	adds	r4, r7, r5
 800dd28:	f7ff fef4 	bl	800db14 <SPI_RxByte>
 800dd2c:	0003      	movs	r3, r0
 800dd2e:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800dd30:	197b      	adds	r3, r7, r5
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	221f      	movs	r2, #31
 800dd36:	4013      	ands	r3, r2
 800dd38:	2b05      	cmp	r3, #5
 800dd3a:	d00b      	beq.n	800dd54 <SD_TxDataBlock+0x86>
			i++;
 800dd3c:	210e      	movs	r1, #14
 800dd3e:	187b      	adds	r3, r7, r1
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	187b      	adds	r3, r7, r1
 800dd44:	3201      	adds	r2, #1
 800dd46:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 800dd48:	230e      	movs	r3, #14
 800dd4a:	18fb      	adds	r3, r7, r3
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	2b40      	cmp	r3, #64	; 0x40
 800dd50:	d9e8      	bls.n	800dd24 <SD_TxDataBlock+0x56>
 800dd52:	e000      	b.n	800dd56 <SD_TxDataBlock+0x88>
			if ((resp & 0x1F) == 0x05) break;
 800dd54:	46c0      	nop			; (mov r8, r8)
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800dd56:	46c0      	nop			; (mov r8, r8)
 800dd58:	f7ff fedc 	bl	800db14 <SPI_RxByte>
 800dd5c:	1e03      	subs	r3, r0, #0
 800dd5e:	d0fb      	beq.n	800dd58 <SD_TxDataBlock+0x8a>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800dd60:	230f      	movs	r3, #15
 800dd62:	18fb      	adds	r3, r7, r3
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	221f      	movs	r2, #31
 800dd68:	4013      	ands	r3, r2
 800dd6a:	2b05      	cmp	r3, #5
 800dd6c:	d101      	bne.n	800dd72 <SD_TxDataBlock+0xa4>
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e000      	b.n	800dd74 <SD_TxDataBlock+0xa6>

	return FALSE;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	0018      	movs	r0, r3
 800dd76:	46bd      	mov	sp, r7
 800dd78:	b004      	add	sp, #16
 800dd7a:	bdb0      	pop	{r4, r5, r7, pc}

0800dd7c <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800dd7c:	b5b0      	push	{r4, r5, r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	0002      	movs	r2, r0
 800dd84:	6039      	str	r1, [r7, #0]
 800dd86:	1dfb      	adds	r3, r7, #7
 800dd88:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800dd8a:	f7ff feef 	bl	800db6c <SD_ReadyWait>
 800dd8e:	0003      	movs	r3, r0
 800dd90:	2bff      	cmp	r3, #255	; 0xff
 800dd92:	d001      	beq.n	800dd98 <SD_SendCmd+0x1c>
 800dd94:	23ff      	movs	r3, #255	; 0xff
 800dd96:	e059      	b.n	800de4c <SD_SendCmd+0xd0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800dd98:	1dfb      	adds	r3, r7, #7
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	0018      	movs	r0, r3
 800dd9e:	f7ff fe83 	bl	800daa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	0e1b      	lsrs	r3, r3, #24
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	0018      	movs	r0, r3
 800ddaa:	f7ff fe7d 	bl	800daa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	0c1b      	lsrs	r3, r3, #16
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	0018      	movs	r0, r3
 800ddb6:	f7ff fe77 	bl	800daa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	0a1b      	lsrs	r3, r3, #8
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	f7ff fe71 	bl	800daa8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	0018      	movs	r0, r3
 800ddcc:	f7ff fe6c 	bl	800daa8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800ddd0:	1dfb      	adds	r3, r7, #7
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b40      	cmp	r3, #64	; 0x40
 800ddd6:	d104      	bne.n	800dde2 <SD_SendCmd+0x66>
 800ddd8:	230f      	movs	r3, #15
 800ddda:	18fb      	adds	r3, r7, r3
 800dddc:	2295      	movs	r2, #149	; 0x95
 800ddde:	701a      	strb	r2, [r3, #0]
 800dde0:	e00c      	b.n	800ddfc <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800dde2:	1dfb      	adds	r3, r7, #7
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	2b48      	cmp	r3, #72	; 0x48
 800dde8:	d104      	bne.n	800ddf4 <SD_SendCmd+0x78>
 800ddea:	230f      	movs	r3, #15
 800ddec:	18fb      	adds	r3, r7, r3
 800ddee:	2287      	movs	r2, #135	; 0x87
 800ddf0:	701a      	strb	r2, [r3, #0]
 800ddf2:	e003      	b.n	800ddfc <SD_SendCmd+0x80>
	else crc = 1;
 800ddf4:	230f      	movs	r3, #15
 800ddf6:	18fb      	adds	r3, r7, r3
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SPI_TxByte(crc);
 800ddfc:	230f      	movs	r3, #15
 800ddfe:	18fb      	adds	r3, r7, r3
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	0018      	movs	r0, r3
 800de04:	f7ff fe50 	bl	800daa8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800de08:	1dfb      	adds	r3, r7, #7
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	2b4c      	cmp	r3, #76	; 0x4c
 800de0e:	d101      	bne.n	800de14 <SD_SendCmd+0x98>
 800de10:	f7ff fe80 	bl	800db14 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800de14:	230e      	movs	r3, #14
 800de16:	18fb      	adds	r3, r7, r3
 800de18:	220a      	movs	r2, #10
 800de1a:	701a      	strb	r2, [r3, #0]
	do {
		res = SPI_RxByte();
 800de1c:	250d      	movs	r5, #13
 800de1e:	197c      	adds	r4, r7, r5
 800de20:	f7ff fe78 	bl	800db14 <SPI_RxByte>
 800de24:	0003      	movs	r3, r0
 800de26:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 800de28:	197b      	adds	r3, r7, r5
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	b25b      	sxtb	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	da09      	bge.n	800de46 <SD_SendCmd+0xca>
 800de32:	210e      	movs	r1, #14
 800de34:	187b      	adds	r3, r7, r1
 800de36:	187a      	adds	r2, r7, r1
 800de38:	7812      	ldrb	r2, [r2, #0]
 800de3a:	3a01      	subs	r2, #1
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	187b      	adds	r3, r7, r1
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1ea      	bne.n	800de1c <SD_SendCmd+0xa0>

	return res;
 800de46:	230d      	movs	r3, #13
 800de48:	18fb      	adds	r3, r7, r3
 800de4a:	781b      	ldrb	r3, [r3, #0]
}
 800de4c:	0018      	movs	r0, r3
 800de4e:	46bd      	mov	sp, r7
 800de50:	b004      	add	sp, #16
 800de52:	bdb0      	pop	{r4, r5, r7, pc}

0800de54 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800de54:	b5b0      	push	{r4, r5, r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	0002      	movs	r2, r0
 800de5c:	1dfb      	adds	r3, r7, #7
 800de5e:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];
	uint32_t tickstart;


	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800de60:	1dfb      	adds	r3, r7, #7
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <SD_disk_initialize+0x18>
 800de68:	2301      	movs	r3, #1
 800de6a:	e106      	b.n	800e07a <SD_disk_initialize+0x226>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800de6c:	4b85      	ldr	r3, [pc, #532]	; (800e084 <SD_disk_initialize+0x230>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	b2db      	uxtb	r3, r3
 800de72:	001a      	movs	r2, r3
 800de74:	2302      	movs	r3, #2
 800de76:	4013      	ands	r3, r2
 800de78:	d003      	beq.n	800de82 <SD_disk_initialize+0x2e>
 800de7a:	4b82      	ldr	r3, [pc, #520]	; (800e084 <SD_disk_initialize+0x230>)
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	e0fb      	b.n	800e07a <SD_disk_initialize+0x226>

	/* power on */
	SD_PowerOn();
 800de82:	f7ff fe93 	bl	800dbac <SD_PowerOn>

	/* slave select */
	SELECT();
 800de86:	f7ff fdf1 	bl	800da6c <SELECT>

	/* check disk type */
	type = 0;
 800de8a:	2316      	movs	r3, #22
 800de8c:	18fb      	adds	r3, r7, r3
 800de8e:	2200      	movs	r2, #0
 800de90:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800de92:	2100      	movs	r1, #0
 800de94:	2040      	movs	r0, #64	; 0x40
 800de96:	f7ff ff71 	bl	800dd7c <SD_SendCmd>
 800de9a:	0003      	movs	r3, r0
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d000      	beq.n	800dea2 <SD_disk_initialize+0x4e>
 800dea0:	e0d0      	b.n	800e044 <SD_disk_initialize+0x1f0>
	{
		tickstart = HAL_GetTick();
 800dea2:	f7f6 fb19 	bl	80044d8 <HAL_GetTick>
 800dea6:	0003      	movs	r3, r0
 800dea8:	613b      	str	r3, [r7, #16]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800deaa:	23d5      	movs	r3, #213	; 0xd5
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	0019      	movs	r1, r3
 800deb0:	2048      	movs	r0, #72	; 0x48
 800deb2:	f7ff ff63 	bl	800dd7c <SD_SendCmd>
 800deb6:	0003      	movs	r3, r0
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d000      	beq.n	800debe <SD_disk_initialize+0x6a>
 800debc:	e075      	b.n	800dfaa <SD_disk_initialize+0x156>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800debe:	2317      	movs	r3, #23
 800dec0:	18fb      	adds	r3, r7, r3
 800dec2:	2200      	movs	r2, #0
 800dec4:	701a      	strb	r2, [r3, #0]
 800dec6:	e00e      	b.n	800dee6 <SD_disk_initialize+0x92>
			{
				ocr[n] = SPI_RxByte();
 800dec8:	2517      	movs	r5, #23
 800deca:	197b      	adds	r3, r7, r5
 800decc:	781c      	ldrb	r4, [r3, #0]
 800dece:	f7ff fe21 	bl	800db14 <SPI_RxByte>
 800ded2:	0003      	movs	r3, r0
 800ded4:	001a      	movs	r2, r3
 800ded6:	230c      	movs	r3, #12
 800ded8:	18fb      	adds	r3, r7, r3
 800deda:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 800dedc:	197b      	adds	r3, r7, r5
 800dede:	781a      	ldrb	r2, [r3, #0]
 800dee0:	197b      	adds	r3, r7, r5
 800dee2:	3201      	adds	r2, #1
 800dee4:	701a      	strb	r2, [r3, #0]
 800dee6:	2317      	movs	r3, #23
 800dee8:	18fb      	adds	r3, r7, r3
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	2b03      	cmp	r3, #3
 800deee:	d9eb      	bls.n	800dec8 <SD_disk_initialize+0x74>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800def0:	220c      	movs	r2, #12
 800def2:	18bb      	adds	r3, r7, r2
 800def4:	789b      	ldrb	r3, [r3, #2]
 800def6:	2b01      	cmp	r3, #1
 800def8:	d000      	beq.n	800defc <SD_disk_initialize+0xa8>
 800defa:	e0a3      	b.n	800e044 <SD_disk_initialize+0x1f0>
 800defc:	18bb      	adds	r3, r7, r2
 800defe:	78db      	ldrb	r3, [r3, #3]
 800df00:	2baa      	cmp	r3, #170	; 0xaa
 800df02:	d000      	beq.n	800df06 <SD_disk_initialize+0xb2>
 800df04:	e09e      	b.n	800e044 <SD_disk_initialize+0x1f0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800df06:	2100      	movs	r1, #0
 800df08:	2077      	movs	r0, #119	; 0x77
 800df0a:	f7ff ff37 	bl	800dd7c <SD_SendCmd>
 800df0e:	0003      	movs	r3, r0
 800df10:	2b01      	cmp	r3, #1
 800df12:	d807      	bhi.n	800df24 <SD_disk_initialize+0xd0>
 800df14:	2380      	movs	r3, #128	; 0x80
 800df16:	05db      	lsls	r3, r3, #23
 800df18:	0019      	movs	r1, r3
 800df1a:	2069      	movs	r0, #105	; 0x69
 800df1c:	f7ff ff2e 	bl	800dd7c <SD_SendCmd>
 800df20:	1e03      	subs	r3, r0, #0
 800df22:	d009      	beq.n	800df38 <SD_disk_initialize+0xe4>
				} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 800df24:	f7f6 fad8 	bl	80044d8 <HAL_GetTick>
 800df28:	0002      	movs	r2, r0
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	1ad2      	subs	r2, r2, r3
 800df2e:	23fa      	movs	r3, #250	; 0xfa
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	429a      	cmp	r2, r3
 800df34:	d3e7      	bcc.n	800df06 <SD_disk_initialize+0xb2>
 800df36:	e000      	b.n	800df3a <SD_disk_initialize+0xe6>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800df38:	46c0      	nop			; (mov r8, r8)

				/* READ_OCR */
				if (((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT) && SD_SendCmd(CMD58, 0) == 0)
 800df3a:	f7f6 facd 	bl	80044d8 <HAL_GetTick>
 800df3e:	0002      	movs	r2, r0
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	1ad2      	subs	r2, r2, r3
 800df44:	23fa      	movs	r3, #250	; 0xfa
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	429a      	cmp	r2, r3
 800df4a:	d300      	bcc.n	800df4e <SD_disk_initialize+0xfa>
 800df4c:	e07a      	b.n	800e044 <SD_disk_initialize+0x1f0>
 800df4e:	2100      	movs	r1, #0
 800df50:	207a      	movs	r0, #122	; 0x7a
 800df52:	f7ff ff13 	bl	800dd7c <SD_SendCmd>
 800df56:	1e03      	subs	r3, r0, #0
 800df58:	d000      	beq.n	800df5c <SD_disk_initialize+0x108>
 800df5a:	e073      	b.n	800e044 <SD_disk_initialize+0x1f0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800df5c:	2317      	movs	r3, #23
 800df5e:	18fb      	adds	r3, r7, r3
 800df60:	2200      	movs	r2, #0
 800df62:	701a      	strb	r2, [r3, #0]
 800df64:	e00e      	b.n	800df84 <SD_disk_initialize+0x130>
					{
						ocr[n] = SPI_RxByte();
 800df66:	2517      	movs	r5, #23
 800df68:	197b      	adds	r3, r7, r5
 800df6a:	781c      	ldrb	r4, [r3, #0]
 800df6c:	f7ff fdd2 	bl	800db14 <SPI_RxByte>
 800df70:	0003      	movs	r3, r0
 800df72:	001a      	movs	r2, r3
 800df74:	230c      	movs	r3, #12
 800df76:	18fb      	adds	r3, r7, r3
 800df78:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 800df7a:	197b      	adds	r3, r7, r5
 800df7c:	781a      	ldrb	r2, [r3, #0]
 800df7e:	197b      	adds	r3, r7, r5
 800df80:	3201      	adds	r2, #1
 800df82:	701a      	strb	r2, [r3, #0]
 800df84:	2317      	movs	r3, #23
 800df86:	18fb      	adds	r3, r7, r3
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b03      	cmp	r3, #3
 800df8c:	d9eb      	bls.n	800df66 <SD_disk_initialize+0x112>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800df8e:	230c      	movs	r3, #12
 800df90:	18fb      	adds	r3, r7, r3
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	001a      	movs	r2, r3
 800df96:	2340      	movs	r3, #64	; 0x40
 800df98:	4013      	ands	r3, r2
 800df9a:	d001      	beq.n	800dfa0 <SD_disk_initialize+0x14c>
 800df9c:	220c      	movs	r2, #12
 800df9e:	e000      	b.n	800dfa2 <SD_disk_initialize+0x14e>
 800dfa0:	2204      	movs	r2, #4
 800dfa2:	2316      	movs	r3, #22
 800dfa4:	18fb      	adds	r3, r7, r3
 800dfa6:	701a      	strb	r2, [r3, #0]
 800dfa8:	e04c      	b.n	800e044 <SD_disk_initialize+0x1f0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800dfaa:	2100      	movs	r1, #0
 800dfac:	2077      	movs	r0, #119	; 0x77
 800dfae:	f7ff fee5 	bl	800dd7c <SD_SendCmd>
 800dfb2:	0003      	movs	r3, r0
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d808      	bhi.n	800dfca <SD_disk_initialize+0x176>
 800dfb8:	2100      	movs	r1, #0
 800dfba:	2069      	movs	r0, #105	; 0x69
 800dfbc:	f7ff fede 	bl	800dd7c <SD_SendCmd>
 800dfc0:	0003      	movs	r3, r0
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d801      	bhi.n	800dfca <SD_disk_initialize+0x176>
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	e000      	b.n	800dfcc <SD_disk_initialize+0x178>
 800dfca:	2201      	movs	r2, #1
 800dfcc:	2316      	movs	r3, #22
 800dfce:	18fb      	adds	r3, r7, r3
 800dfd0:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 800dfd2:	2316      	movs	r3, #22
 800dfd4:	18fb      	adds	r3, r7, r3
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d10d      	bne.n	800dff8 <SD_disk_initialize+0x1a4>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800dfdc:	2100      	movs	r1, #0
 800dfde:	2077      	movs	r0, #119	; 0x77
 800dfe0:	f7ff fecc 	bl	800dd7c <SD_SendCmd>
 800dfe4:	0003      	movs	r3, r0
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d80c      	bhi.n	800e004 <SD_disk_initialize+0x1b0>
 800dfea:	2100      	movs	r1, #0
 800dfec:	2069      	movs	r0, #105	; 0x69
 800dfee:	f7ff fec5 	bl	800dd7c <SD_SendCmd>
 800dff2:	1e03      	subs	r3, r0, #0
 800dff4:	d106      	bne.n	800e004 <SD_disk_initialize+0x1b0>
 800dff6:	e010      	b.n	800e01a <SD_disk_initialize+0x1c6>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800dff8:	2100      	movs	r1, #0
 800dffa:	2041      	movs	r0, #65	; 0x41
 800dffc:	f7ff febe 	bl	800dd7c <SD_SendCmd>
 800e000:	1e03      	subs	r3, r0, #0
 800e002:	d009      	beq.n	800e018 <SD_disk_initialize+0x1c4>
				}

			} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 800e004:	f7f6 fa68 	bl	80044d8 <HAL_GetTick>
 800e008:	0002      	movs	r2, r0
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	1ad2      	subs	r2, r2, r3
 800e00e:	23fa      	movs	r3, #250	; 0xfa
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	429a      	cmp	r2, r3
 800e014:	d3dd      	bcc.n	800dfd2 <SD_disk_initialize+0x17e>
 800e016:	e000      	b.n	800e01a <SD_disk_initialize+0x1c6>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e018:	46c0      	nop			; (mov r8, r8)

			/* SET_BLOCKLEN */
			if (((HAL_GetTick() - tickstart) >= SD_disk_init_TIMEOUT) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800e01a:	f7f6 fa5d 	bl	80044d8 <HAL_GetTick>
 800e01e:	0002      	movs	r2, r0
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	1ad2      	subs	r2, r2, r3
 800e024:	23fa      	movs	r3, #250	; 0xfa
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	429a      	cmp	r2, r3
 800e02a:	d207      	bcs.n	800e03c <SD_disk_initialize+0x1e8>
 800e02c:	2380      	movs	r3, #128	; 0x80
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	0019      	movs	r1, r3
 800e032:	2050      	movs	r0, #80	; 0x50
 800e034:	f7ff fea2 	bl	800dd7c <SD_SendCmd>
 800e038:	1e03      	subs	r3, r0, #0
 800e03a:	d003      	beq.n	800e044 <SD_disk_initialize+0x1f0>
 800e03c:	2316      	movs	r3, #22
 800e03e:	18fb      	adds	r3, r7, r3
 800e040:	2200      	movs	r2, #0
 800e042:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 800e044:	4b10      	ldr	r3, [pc, #64]	; (800e088 <SD_disk_initialize+0x234>)
 800e046:	2416      	movs	r4, #22
 800e048:	193a      	adds	r2, r7, r4
 800e04a:	7812      	ldrb	r2, [r2, #0]
 800e04c:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 800e04e:	f7ff fd1c 	bl	800da8a <DESELECT>
	SPI_RxByte();
 800e052:	f7ff fd5f 	bl	800db14 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800e056:	193b      	adds	r3, r7, r4
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d008      	beq.n	800e070 <SD_disk_initialize+0x21c>
	{
		Stat &= ~STA_NOINIT;
 800e05e:	4b09      	ldr	r3, [pc, #36]	; (800e084 <SD_disk_initialize+0x230>)
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	2201      	movs	r2, #1
 800e066:	4393      	bics	r3, r2
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	4b06      	ldr	r3, [pc, #24]	; (800e084 <SD_disk_initialize+0x230>)
 800e06c:	701a      	strb	r2, [r3, #0]
 800e06e:	e001      	b.n	800e074 <SD_disk_initialize+0x220>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800e070:	f7ff fde4 	bl	800dc3c <SD_PowerOff>
	}

	return Stat;
 800e074:	4b03      	ldr	r3, [pc, #12]	; (800e084 <SD_disk_initialize+0x230>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	b2db      	uxtb	r3, r3
}
 800e07a:	0018      	movs	r0, r3
 800e07c:	46bd      	mov	sp, r7
 800e07e:	b006      	add	sp, #24
 800e080:	bdb0      	pop	{r4, r5, r7, pc}
 800e082:	46c0      	nop			; (mov r8, r8)
 800e084:	20000020 	.word	0x20000020
 800e088:	20002758 	.word	0x20002758

0800e08c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	0002      	movs	r2, r0
 800e094:	1dfb      	adds	r3, r7, #7
 800e096:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 800e098:	1dfb      	adds	r3, r7, #7
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <SD_disk_status+0x18>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e002      	b.n	800e0aa <SD_disk_status+0x1e>
	return Stat;
 800e0a4:	4b03      	ldr	r3, [pc, #12]	; (800e0b4 <SD_disk_status+0x28>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	b2db      	uxtb	r3, r3
}
 800e0aa:	0018      	movs	r0, r3
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	b002      	add	sp, #8
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	46c0      	nop			; (mov r8, r8)
 800e0b4:	20000020 	.word	0x20000020

0800e0b8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	607a      	str	r2, [r7, #4]
 800e0c2:	603b      	str	r3, [r7, #0]
 800e0c4:	210f      	movs	r1, #15
 800e0c6:	187b      	adds	r3, r7, r1
 800e0c8:	1c02      	adds	r2, r0, #0
 800e0ca:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800e0cc:	187b      	adds	r3, r7, r1
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <SD_disk_read+0x22>
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <SD_disk_read+0x26>
 800e0da:	2304      	movs	r3, #4
 800e0dc:	e053      	b.n	800e186 <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e0de:	4b2c      	ldr	r3, [pc, #176]	; (800e190 <SD_disk_read+0xd8>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	001a      	movs	r2, r3
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	d001      	beq.n	800e0f0 <SD_disk_read+0x38>
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	e04a      	b.n	800e186 <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800e0f0:	4b28      	ldr	r3, [pc, #160]	; (800e194 <SD_disk_read+0xdc>)
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	001a      	movs	r2, r3
 800e0f6:	2304      	movs	r3, #4
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	d102      	bne.n	800e102 <SD_disk_read+0x4a>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	025b      	lsls	r3, r3, #9
 800e100:	607b      	str	r3, [r7, #4]

	SELECT();
 800e102:	f7ff fcb3 	bl	800da6c <SELECT>

	if (count == 1)
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d112      	bne.n	800e132 <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	0019      	movs	r1, r3
 800e110:	2051      	movs	r0, #81	; 0x51
 800e112:	f7ff fe33 	bl	800dd7c <SD_SendCmd>
 800e116:	1e03      	subs	r3, r0, #0
 800e118:	d12d      	bne.n	800e176 <SD_disk_read+0xbe>
 800e11a:	2380      	movs	r3, #128	; 0x80
 800e11c:	009a      	lsls	r2, r3, #2
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	0011      	movs	r1, r2
 800e122:	0018      	movs	r0, r3
 800e124:	f7ff fd9e 	bl	800dc64 <SD_RxDataBlock>
 800e128:	1e03      	subs	r3, r0, #0
 800e12a:	d024      	beq.n	800e176 <SD_disk_read+0xbe>
 800e12c:	2300      	movs	r3, #0
 800e12e:	603b      	str	r3, [r7, #0]
 800e130:	e021      	b.n	800e176 <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	0019      	movs	r1, r3
 800e136:	2052      	movs	r0, #82	; 0x52
 800e138:	f7ff fe20 	bl	800dd7c <SD_SendCmd>
 800e13c:	1e03      	subs	r3, r0, #0
 800e13e:	d11a      	bne.n	800e176 <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800e140:	2380      	movs	r3, #128	; 0x80
 800e142:	009a      	lsls	r2, r3, #2
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	0011      	movs	r1, r2
 800e148:	0018      	movs	r0, r3
 800e14a:	f7ff fd8b 	bl	800dc64 <SD_RxDataBlock>
 800e14e:	1e03      	subs	r3, r0, #0
 800e150:	d00c      	beq.n	800e16c <SD_disk_read+0xb4>
				buff += 512;
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	2280      	movs	r2, #128	; 0x80
 800e156:	0092      	lsls	r2, r2, #2
 800e158:	4694      	mov	ip, r2
 800e15a:	4463      	add	r3, ip
 800e15c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	3b01      	subs	r3, #1
 800e162:	603b      	str	r3, [r7, #0]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1ea      	bne.n	800e140 <SD_disk_read+0x88>
 800e16a:	e000      	b.n	800e16e <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 800e16c:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800e16e:	2100      	movs	r1, #0
 800e170:	204c      	movs	r0, #76	; 0x4c
 800e172:	f7ff fe03 	bl	800dd7c <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800e176:	f7ff fc88 	bl	800da8a <DESELECT>
	SPI_RxByte();
 800e17a:	f7ff fccb 	bl	800db14 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	1e5a      	subs	r2, r3, #1
 800e182:	4193      	sbcs	r3, r2
 800e184:	b2db      	uxtb	r3, r3
}
 800e186:	0018      	movs	r0, r3
 800e188:	46bd      	mov	sp, r7
 800e18a:	b004      	add	sp, #16
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	46c0      	nop			; (mov r8, r8)
 800e190:	20000020 	.word	0x20000020
 800e194:	20002758 	.word	0x20002758

0800e198 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	607a      	str	r2, [r7, #4]
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	210f      	movs	r1, #15
 800e1a6:	187b      	adds	r3, r7, r1
 800e1a8:	1c02      	adds	r2, r0, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800e1ac:	187b      	adds	r3, r7, r1
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d102      	bne.n	800e1ba <SD_disk_write+0x22>
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <SD_disk_write+0x26>
 800e1ba:	2304      	movs	r3, #4
 800e1bc:	e06b      	b.n	800e296 <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e1be:	4b38      	ldr	r3, [pc, #224]	; (800e2a0 <SD_disk_write+0x108>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	001a      	movs	r2, r3
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	d001      	beq.n	800e1d0 <SD_disk_write+0x38>
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e062      	b.n	800e296 <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800e1d0:	4b33      	ldr	r3, [pc, #204]	; (800e2a0 <SD_disk_write+0x108>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	001a      	movs	r2, r3
 800e1d8:	2304      	movs	r3, #4
 800e1da:	4013      	ands	r3, r2
 800e1dc:	d001      	beq.n	800e1e2 <SD_disk_write+0x4a>
 800e1de:	2302      	movs	r3, #2
 800e1e0:	e059      	b.n	800e296 <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800e1e2:	4b30      	ldr	r3, [pc, #192]	; (800e2a4 <SD_disk_write+0x10c>)
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	001a      	movs	r2, r3
 800e1e8:	2304      	movs	r3, #4
 800e1ea:	4013      	ands	r3, r2
 800e1ec:	d102      	bne.n	800e1f4 <SD_disk_write+0x5c>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	025b      	lsls	r3, r3, #9
 800e1f2:	607b      	str	r3, [r7, #4]

	SELECT();
 800e1f4:	f7ff fc3a 	bl	800da6c <SELECT>

	if (count == 1)
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d110      	bne.n	800e220 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	0019      	movs	r1, r3
 800e202:	2058      	movs	r0, #88	; 0x58
 800e204:	f7ff fdba 	bl	800dd7c <SD_SendCmd>
 800e208:	1e03      	subs	r3, r0, #0
 800e20a:	d13c      	bne.n	800e286 <SD_disk_write+0xee>
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	21fe      	movs	r1, #254	; 0xfe
 800e210:	0018      	movs	r0, r3
 800e212:	f7ff fd5c 	bl	800dcce <SD_TxDataBlock>
 800e216:	1e03      	subs	r3, r0, #0
 800e218:	d035      	beq.n	800e286 <SD_disk_write+0xee>
			count = 0;
 800e21a:	2300      	movs	r3, #0
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	e032      	b.n	800e286 <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800e220:	4b20      	ldr	r3, [pc, #128]	; (800e2a4 <SD_disk_write+0x10c>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	001a      	movs	r2, r3
 800e226:	2302      	movs	r3, #2
 800e228:	4013      	ands	r3, r2
 800e22a:	d008      	beq.n	800e23e <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 800e22c:	2100      	movs	r1, #0
 800e22e:	2077      	movs	r0, #119	; 0x77
 800e230:	f7ff fda4 	bl	800dd7c <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	0019      	movs	r1, r3
 800e238:	2057      	movs	r0, #87	; 0x57
 800e23a:	f7ff fd9f 	bl	800dd7c <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	0019      	movs	r1, r3
 800e242:	2059      	movs	r0, #89	; 0x59
 800e244:	f7ff fd9a 	bl	800dd7c <SD_SendCmd>
 800e248:	1e03      	subs	r3, r0, #0
 800e24a:	d11c      	bne.n	800e286 <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	21fc      	movs	r1, #252	; 0xfc
 800e250:	0018      	movs	r0, r3
 800e252:	f7ff fd3c 	bl	800dcce <SD_TxDataBlock>
 800e256:	1e03      	subs	r3, r0, #0
 800e258:	d00c      	beq.n	800e274 <SD_disk_write+0xdc>
				buff += 512;
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2280      	movs	r2, #128	; 0x80
 800e25e:	0092      	lsls	r2, r2, #2
 800e260:	4694      	mov	ip, r2
 800e262:	4463      	add	r3, ip
 800e264:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	3b01      	subs	r3, #1
 800e26a:	603b      	str	r3, [r7, #0]
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1ec      	bne.n	800e24c <SD_disk_write+0xb4>
 800e272:	e000      	b.n	800e276 <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e274:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800e276:	21fd      	movs	r1, #253	; 0xfd
 800e278:	2000      	movs	r0, #0
 800e27a:	f7ff fd28 	bl	800dcce <SD_TxDataBlock>
 800e27e:	1e03      	subs	r3, r0, #0
 800e280:	d101      	bne.n	800e286 <SD_disk_write+0xee>
			{
				count = 1;
 800e282:	2301      	movs	r3, #1
 800e284:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800e286:	f7ff fc00 	bl	800da8a <DESELECT>
	SPI_RxByte();
 800e28a:	f7ff fc43 	bl	800db14 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	1e5a      	subs	r2, r3, #1
 800e292:	4193      	sbcs	r3, r2
 800e294:	b2db      	uxtb	r3, r3
}
 800e296:	0018      	movs	r0, r3
 800e298:	46bd      	mov	sp, r7
 800e29a:	b004      	add	sp, #16
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	20000020 	.word	0x20000020
 800e2a4:	20002758 	.word	0x20002758

0800e2a8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800e2a8:	b590      	push	{r4, r7, lr}
 800e2aa:	b08b      	sub	sp, #44	; 0x2c
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	603a      	str	r2, [r7, #0]
 800e2b0:	1dfb      	adds	r3, r7, #7
 800e2b2:	1c02      	adds	r2, r0, #0
 800e2b4:	701a      	strb	r2, [r3, #0]
 800e2b6:	1dbb      	adds	r3, r7, #6
 800e2b8:	1c0a      	adds	r2, r1, #0
 800e2ba:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800e2c0:	1dfb      	adds	r3, r7, #7
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <SD_disk_ioctl+0x24>
 800e2c8:	2304      	movs	r3, #4
 800e2ca:	e11b      	b.n	800e504 <SD_disk_ioctl+0x25c>
	res = RES_ERROR;
 800e2cc:	2327      	movs	r3, #39	; 0x27
 800e2ce:	18fb      	adds	r3, r7, r3
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 800e2d4:	1dbb      	adds	r3, r7, #6
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	2b05      	cmp	r3, #5
 800e2da:	d127      	bne.n	800e32c <SD_disk_ioctl+0x84>
	{
		switch (*ptr)
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d013      	beq.n	800e30c <SD_disk_ioctl+0x64>
 800e2e4:	dc1d      	bgt.n	800e322 <SD_disk_ioctl+0x7a>
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <SD_disk_ioctl+0x48>
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d007      	beq.n	800e2fe <SD_disk_ioctl+0x56>
 800e2ee:	e018      	b.n	800e322 <SD_disk_ioctl+0x7a>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800e2f0:	f7ff fca4 	bl	800dc3c <SD_PowerOff>
			res = RES_OK;
 800e2f4:	2327      	movs	r3, #39	; 0x27
 800e2f6:	18fb      	adds	r3, r7, r3
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	701a      	strb	r2, [r3, #0]
			break;
 800e2fc:	e0ff      	b.n	800e4fe <SD_disk_ioctl+0x256>
		case 1:
			SD_PowerOn();		/* Power On */
 800e2fe:	f7ff fc55 	bl	800dbac <SD_PowerOn>
			res = RES_OK;
 800e302:	2327      	movs	r3, #39	; 0x27
 800e304:	18fb      	adds	r3, r7, r3
 800e306:	2200      	movs	r2, #0
 800e308:	701a      	strb	r2, [r3, #0]
			break;
 800e30a:	e0f8      	b.n	800e4fe <SD_disk_ioctl+0x256>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	1c5c      	adds	r4, r3, #1
 800e310:	f7ff fc9e 	bl	800dc50 <SD_CheckPower>
 800e314:	0003      	movs	r3, r0
 800e316:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800e318:	2327      	movs	r3, #39	; 0x27
 800e31a:	18fb      	adds	r3, r7, r3
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
			break;
 800e320:	e0ed      	b.n	800e4fe <SD_disk_ioctl+0x256>
		default:
			res = RES_PARERR;
 800e322:	2327      	movs	r3, #39	; 0x27
 800e324:	18fb      	adds	r3, r7, r3
 800e326:	2204      	movs	r2, #4
 800e328:	701a      	strb	r2, [r3, #0]
 800e32a:	e0e8      	b.n	800e4fe <SD_disk_ioctl+0x256>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e32c:	4b77      	ldr	r3, [pc, #476]	; (800e50c <SD_disk_ioctl+0x264>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	b2db      	uxtb	r3, r3
 800e332:	001a      	movs	r2, r3
 800e334:	2301      	movs	r3, #1
 800e336:	4013      	ands	r3, r2
 800e338:	d001      	beq.n	800e33e <SD_disk_ioctl+0x96>
 800e33a:	2303      	movs	r3, #3
 800e33c:	e0e2      	b.n	800e504 <SD_disk_ioctl+0x25c>

		SELECT();
 800e33e:	f7ff fb95 	bl	800da6c <SELECT>

		switch (ctrl)
 800e342:	1dbb      	adds	r3, r7, #6
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2b0d      	cmp	r3, #13
 800e348:	d900      	bls.n	800e34c <SD_disk_ioctl+0xa4>
 800e34a:	e0c8      	b.n	800e4de <SD_disk_ioctl+0x236>
 800e34c:	009a      	lsls	r2, r3, #2
 800e34e:	4b70      	ldr	r3, [pc, #448]	; (800e510 <SD_disk_ioctl+0x268>)
 800e350:	18d3      	adds	r3, r2, r3
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800e356:	2100      	movs	r1, #0
 800e358:	2049      	movs	r0, #73	; 0x49
 800e35a:	f7ff fd0f 	bl	800dd7c <SD_SendCmd>
 800e35e:	1e03      	subs	r3, r0, #0
 800e360:	d000      	beq.n	800e364 <SD_disk_ioctl+0xbc>
 800e362:	e0c1      	b.n	800e4e8 <SD_disk_ioctl+0x240>
 800e364:	240c      	movs	r4, #12
 800e366:	193b      	adds	r3, r7, r4
 800e368:	2110      	movs	r1, #16
 800e36a:	0018      	movs	r0, r3
 800e36c:	f7ff fc7a 	bl	800dc64 <SD_RxDataBlock>
 800e370:	1e03      	subs	r3, r0, #0
 800e372:	d100      	bne.n	800e376 <SD_disk_ioctl+0xce>
 800e374:	e0b8      	b.n	800e4e8 <SD_disk_ioctl+0x240>
			{
				if ((csd[0] >> 6) == 1)
 800e376:	0022      	movs	r2, r4
 800e378:	18bb      	adds	r3, r7, r2
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	099b      	lsrs	r3, r3, #6
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b01      	cmp	r3, #1
 800e382:	d114      	bne.n	800e3ae <SD_disk_ioctl+0x106>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800e384:	0011      	movs	r1, r2
 800e386:	18bb      	adds	r3, r7, r2
 800e388:	7a5b      	ldrb	r3, [r3, #9]
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	187b      	adds	r3, r7, r1
 800e38e:	7a1b      	ldrb	r3, [r3, #8]
 800e390:	b29b      	uxth	r3, r3
 800e392:	021b      	lsls	r3, r3, #8
 800e394:	b29b      	uxth	r3, r3
 800e396:	18d3      	adds	r3, r2, r3
 800e398:	b29a      	uxth	r2, r3
 800e39a:	211e      	movs	r1, #30
 800e39c:	187b      	adds	r3, r7, r1
 800e39e:	3201      	adds	r2, #1
 800e3a0:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 800e3a2:	187b      	adds	r3, r7, r1
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	029a      	lsls	r2, r3, #10
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e03a      	b.n	800e424 <SD_disk_ioctl+0x17c>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e3ae:	200c      	movs	r0, #12
 800e3b0:	183b      	adds	r3, r7, r0
 800e3b2:	795b      	ldrb	r3, [r3, #5]
 800e3b4:	220f      	movs	r2, #15
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	183b      	adds	r3, r7, r0
 800e3bc:	7a9b      	ldrb	r3, [r3, #10]
 800e3be:	09db      	lsrs	r3, r3, #7
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	18d3      	adds	r3, r2, r3
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	183b      	adds	r3, r7, r0
 800e3c8:	7a5b      	ldrb	r3, [r3, #9]
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	2106      	movs	r1, #6
 800e3d0:	400b      	ands	r3, r1
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	18d3      	adds	r3, r2, r3
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	2426      	movs	r4, #38	; 0x26
 800e3da:	193b      	adds	r3, r7, r4
 800e3dc:	3202      	adds	r2, #2
 800e3de:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800e3e0:	183b      	adds	r3, r7, r0
 800e3e2:	7a1b      	ldrb	r3, [r3, #8]
 800e3e4:	099b      	lsrs	r3, r3, #6
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	183b      	adds	r3, r7, r0
 800e3ec:	79db      	ldrb	r3, [r3, #7]
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	18d3      	adds	r3, r2, r3
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	183b      	adds	r3, r7, r0
 800e3fa:	799b      	ldrb	r3, [r3, #6]
 800e3fc:	029b      	lsls	r3, r3, #10
 800e3fe:	b299      	uxth	r1, r3
 800e400:	23c0      	movs	r3, #192	; 0xc0
 800e402:	011b      	lsls	r3, r3, #4
 800e404:	400b      	ands	r3, r1
 800e406:	b29b      	uxth	r3, r3
 800e408:	18d3      	adds	r3, r2, r3
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	211e      	movs	r1, #30
 800e40e:	187b      	adds	r3, r7, r1
 800e410:	3201      	adds	r2, #1
 800e412:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800e414:	187b      	adds	r3, r7, r1
 800e416:	881a      	ldrh	r2, [r3, #0]
 800e418:	193b      	adds	r3, r7, r4
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	3b09      	subs	r3, #9
 800e41e:	409a      	lsls	r2, r3
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800e424:	2327      	movs	r3, #39	; 0x27
 800e426:	18fb      	adds	r3, r7, r3
 800e428:	2200      	movs	r2, #0
 800e42a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800e42c:	e05c      	b.n	800e4e8 <SD_disk_ioctl+0x240>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2280      	movs	r2, #128	; 0x80
 800e432:	0092      	lsls	r2, r2, #2
 800e434:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800e436:	2327      	movs	r3, #39	; 0x27
 800e438:	18fb      	adds	r3, r7, r3
 800e43a:	2200      	movs	r2, #0
 800e43c:	701a      	strb	r2, [r3, #0]
			break;
 800e43e:	e05a      	b.n	800e4f6 <SD_disk_ioctl+0x24e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800e440:	f7ff fb94 	bl	800db6c <SD_ReadyWait>
 800e444:	0003      	movs	r3, r0
 800e446:	2bff      	cmp	r3, #255	; 0xff
 800e448:	d150      	bne.n	800e4ec <SD_disk_ioctl+0x244>
 800e44a:	2327      	movs	r3, #39	; 0x27
 800e44c:	18fb      	adds	r3, r7, r3
 800e44e:	2200      	movs	r2, #0
 800e450:	701a      	strb	r2, [r3, #0]
			break;
 800e452:	e04b      	b.n	800e4ec <SD_disk_ioctl+0x244>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e454:	2100      	movs	r1, #0
 800e456:	2049      	movs	r0, #73	; 0x49
 800e458:	f7ff fc90 	bl	800dd7c <SD_SendCmd>
 800e45c:	1e03      	subs	r3, r0, #0
 800e45e:	d147      	bne.n	800e4f0 <SD_disk_ioctl+0x248>
 800e460:	6a3b      	ldr	r3, [r7, #32]
 800e462:	2110      	movs	r1, #16
 800e464:	0018      	movs	r0, r3
 800e466:	f7ff fbfd 	bl	800dc64 <SD_RxDataBlock>
 800e46a:	1e03      	subs	r3, r0, #0
 800e46c:	d040      	beq.n	800e4f0 <SD_disk_ioctl+0x248>
 800e46e:	2327      	movs	r3, #39	; 0x27
 800e470:	18fb      	adds	r3, r7, r3
 800e472:	2200      	movs	r2, #0
 800e474:	701a      	strb	r2, [r3, #0]
			break;
 800e476:	e03b      	b.n	800e4f0 <SD_disk_ioctl+0x248>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e478:	2100      	movs	r1, #0
 800e47a:	204a      	movs	r0, #74	; 0x4a
 800e47c:	f7ff fc7e 	bl	800dd7c <SD_SendCmd>
 800e480:	1e03      	subs	r3, r0, #0
 800e482:	d137      	bne.n	800e4f4 <SD_disk_ioctl+0x24c>
 800e484:	6a3b      	ldr	r3, [r7, #32]
 800e486:	2110      	movs	r1, #16
 800e488:	0018      	movs	r0, r3
 800e48a:	f7ff fbeb 	bl	800dc64 <SD_RxDataBlock>
 800e48e:	1e03      	subs	r3, r0, #0
 800e490:	d030      	beq.n	800e4f4 <SD_disk_ioctl+0x24c>
 800e492:	2327      	movs	r3, #39	; 0x27
 800e494:	18fb      	adds	r3, r7, r3
 800e496:	2200      	movs	r2, #0
 800e498:	701a      	strb	r2, [r3, #0]
			break;
 800e49a:	e02b      	b.n	800e4f4 <SD_disk_ioctl+0x24c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800e49c:	2100      	movs	r1, #0
 800e49e:	207a      	movs	r0, #122	; 0x7a
 800e4a0:	f7ff fc6c 	bl	800dd7c <SD_SendCmd>
 800e4a4:	1e03      	subs	r3, r0, #0
 800e4a6:	d11a      	bne.n	800e4de <SD_disk_ioctl+0x236>
			{
				for (n = 0; n < 4; n++)
 800e4a8:	2326      	movs	r3, #38	; 0x26
 800e4aa:	18fb      	adds	r3, r7, r3
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
 800e4b0:	e00c      	b.n	800e4cc <SD_disk_ioctl+0x224>
				{
					*ptr++ = SPI_RxByte();
 800e4b2:	6a3c      	ldr	r4, [r7, #32]
 800e4b4:	1c63      	adds	r3, r4, #1
 800e4b6:	623b      	str	r3, [r7, #32]
 800e4b8:	f7ff fb2c 	bl	800db14 <SPI_RxByte>
 800e4bc:	0003      	movs	r3, r0
 800e4be:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800e4c0:	2126      	movs	r1, #38	; 0x26
 800e4c2:	187b      	adds	r3, r7, r1
 800e4c4:	781a      	ldrb	r2, [r3, #0]
 800e4c6:	187b      	adds	r3, r7, r1
 800e4c8:	3201      	adds	r2, #1
 800e4ca:	701a      	strb	r2, [r3, #0]
 800e4cc:	2326      	movs	r3, #38	; 0x26
 800e4ce:	18fb      	adds	r3, r7, r3
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d9ed      	bls.n	800e4b2 <SD_disk_ioctl+0x20a>
				}
				res = RES_OK;
 800e4d6:	2327      	movs	r3, #39	; 0x27
 800e4d8:	18fb      	adds	r3, r7, r3
 800e4da:	2200      	movs	r2, #0
 800e4dc:	701a      	strb	r2, [r3, #0]
			}
		default:
			res = RES_PARERR;
 800e4de:	2327      	movs	r3, #39	; 0x27
 800e4e0:	18fb      	adds	r3, r7, r3
 800e4e2:	2204      	movs	r2, #4
 800e4e4:	701a      	strb	r2, [r3, #0]
 800e4e6:	e006      	b.n	800e4f6 <SD_disk_ioctl+0x24e>
			break;
 800e4e8:	46c0      	nop			; (mov r8, r8)
 800e4ea:	e004      	b.n	800e4f6 <SD_disk_ioctl+0x24e>
			break;
 800e4ec:	46c0      	nop			; (mov r8, r8)
 800e4ee:	e002      	b.n	800e4f6 <SD_disk_ioctl+0x24e>
			break;
 800e4f0:	46c0      	nop			; (mov r8, r8)
 800e4f2:	e000      	b.n	800e4f6 <SD_disk_ioctl+0x24e>
			break;
 800e4f4:	46c0      	nop			; (mov r8, r8)
		}

		DESELECT();
 800e4f6:	f7ff fac8 	bl	800da8a <DESELECT>
		SPI_RxByte();
 800e4fa:	f7ff fb0b 	bl	800db14 <SPI_RxByte>
	}

	return res;
 800e4fe:	2327      	movs	r3, #39	; 0x27
 800e500:	18fb      	adds	r3, r7, r3
 800e502:	781b      	ldrb	r3, [r3, #0]
}
 800e504:	0018      	movs	r0, r3
 800e506:	46bd      	mov	sp, r7
 800e508:	b00b      	add	sp, #44	; 0x2c
 800e50a:	bd90      	pop	{r4, r7, pc}
 800e50c:	20000020 	.word	0x20000020
 800e510:	08012920 	.word	0x08012920

0800e514 <__errno>:
 800e514:	4b01      	ldr	r3, [pc, #4]	; (800e51c <__errno+0x8>)
 800e516:	6818      	ldr	r0, [r3, #0]
 800e518:	4770      	bx	lr
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	20000024 	.word	0x20000024

0800e520 <__libc_init_array>:
 800e520:	b570      	push	{r4, r5, r6, lr}
 800e522:	2600      	movs	r6, #0
 800e524:	4d0c      	ldr	r5, [pc, #48]	; (800e558 <__libc_init_array+0x38>)
 800e526:	4c0d      	ldr	r4, [pc, #52]	; (800e55c <__libc_init_array+0x3c>)
 800e528:	1b64      	subs	r4, r4, r5
 800e52a:	10a4      	asrs	r4, r4, #2
 800e52c:	42a6      	cmp	r6, r4
 800e52e:	d109      	bne.n	800e544 <__libc_init_array+0x24>
 800e530:	2600      	movs	r6, #0
 800e532:	f004 f83b 	bl	80125ac <_init>
 800e536:	4d0a      	ldr	r5, [pc, #40]	; (800e560 <__libc_init_array+0x40>)
 800e538:	4c0a      	ldr	r4, [pc, #40]	; (800e564 <__libc_init_array+0x44>)
 800e53a:	1b64      	subs	r4, r4, r5
 800e53c:	10a4      	asrs	r4, r4, #2
 800e53e:	42a6      	cmp	r6, r4
 800e540:	d105      	bne.n	800e54e <__libc_init_array+0x2e>
 800e542:	bd70      	pop	{r4, r5, r6, pc}
 800e544:	00b3      	lsls	r3, r6, #2
 800e546:	58eb      	ldr	r3, [r5, r3]
 800e548:	4798      	blx	r3
 800e54a:	3601      	adds	r6, #1
 800e54c:	e7ee      	b.n	800e52c <__libc_init_array+0xc>
 800e54e:	00b3      	lsls	r3, r6, #2
 800e550:	58eb      	ldr	r3, [r5, r3]
 800e552:	4798      	blx	r3
 800e554:	3601      	adds	r6, #1
 800e556:	e7f2      	b.n	800e53e <__libc_init_array+0x1e>
 800e558:	08012da0 	.word	0x08012da0
 800e55c:	08012da0 	.word	0x08012da0
 800e560:	08012da0 	.word	0x08012da0
 800e564:	08012da4 	.word	0x08012da4

0800e568 <memcpy>:
 800e568:	2300      	movs	r3, #0
 800e56a:	b510      	push	{r4, lr}
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d100      	bne.n	800e572 <memcpy+0xa>
 800e570:	bd10      	pop	{r4, pc}
 800e572:	5ccc      	ldrb	r4, [r1, r3]
 800e574:	54c4      	strb	r4, [r0, r3]
 800e576:	3301      	adds	r3, #1
 800e578:	e7f8      	b.n	800e56c <memcpy+0x4>

0800e57a <memset>:
 800e57a:	0003      	movs	r3, r0
 800e57c:	1882      	adds	r2, r0, r2
 800e57e:	4293      	cmp	r3, r2
 800e580:	d100      	bne.n	800e584 <memset+0xa>
 800e582:	4770      	bx	lr
 800e584:	7019      	strb	r1, [r3, #0]
 800e586:	3301      	adds	r3, #1
 800e588:	e7f9      	b.n	800e57e <memset+0x4>

0800e58a <__cvt>:
 800e58a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e58c:	001e      	movs	r6, r3
 800e58e:	2300      	movs	r3, #0
 800e590:	0014      	movs	r4, r2
 800e592:	b08b      	sub	sp, #44	; 0x2c
 800e594:	429e      	cmp	r6, r3
 800e596:	da04      	bge.n	800e5a2 <__cvt+0x18>
 800e598:	2180      	movs	r1, #128	; 0x80
 800e59a:	0609      	lsls	r1, r1, #24
 800e59c:	1873      	adds	r3, r6, r1
 800e59e:	001e      	movs	r6, r3
 800e5a0:	232d      	movs	r3, #45	; 0x2d
 800e5a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e5a4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e5a6:	7013      	strb	r3, [r2, #0]
 800e5a8:	2320      	movs	r3, #32
 800e5aa:	2203      	movs	r2, #3
 800e5ac:	439f      	bics	r7, r3
 800e5ae:	2f46      	cmp	r7, #70	; 0x46
 800e5b0:	d007      	beq.n	800e5c2 <__cvt+0x38>
 800e5b2:	003b      	movs	r3, r7
 800e5b4:	3b45      	subs	r3, #69	; 0x45
 800e5b6:	4259      	negs	r1, r3
 800e5b8:	414b      	adcs	r3, r1
 800e5ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e5bc:	3a01      	subs	r2, #1
 800e5be:	18cb      	adds	r3, r1, r3
 800e5c0:	9310      	str	r3, [sp, #64]	; 0x40
 800e5c2:	ab09      	add	r3, sp, #36	; 0x24
 800e5c4:	9304      	str	r3, [sp, #16]
 800e5c6:	ab08      	add	r3, sp, #32
 800e5c8:	9303      	str	r3, [sp, #12]
 800e5ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e5cc:	9200      	str	r2, [sp, #0]
 800e5ce:	9302      	str	r3, [sp, #8]
 800e5d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5d2:	0022      	movs	r2, r4
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	0033      	movs	r3, r6
 800e5d8:	f000 fcfe 	bl	800efd8 <_dtoa_r>
 800e5dc:	0005      	movs	r5, r0
 800e5de:	2f47      	cmp	r7, #71	; 0x47
 800e5e0:	d102      	bne.n	800e5e8 <__cvt+0x5e>
 800e5e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5e4:	07db      	lsls	r3, r3, #31
 800e5e6:	d528      	bpl.n	800e63a <__cvt+0xb0>
 800e5e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5ea:	18eb      	adds	r3, r5, r3
 800e5ec:	9307      	str	r3, [sp, #28]
 800e5ee:	2f46      	cmp	r7, #70	; 0x46
 800e5f0:	d114      	bne.n	800e61c <__cvt+0x92>
 800e5f2:	782b      	ldrb	r3, [r5, #0]
 800e5f4:	2b30      	cmp	r3, #48	; 0x30
 800e5f6:	d10c      	bne.n	800e612 <__cvt+0x88>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	0020      	movs	r0, r4
 800e5fe:	0031      	movs	r1, r6
 800e600:	f7f1 ff22 	bl	8000448 <__aeabi_dcmpeq>
 800e604:	2800      	cmp	r0, #0
 800e606:	d104      	bne.n	800e612 <__cvt+0x88>
 800e608:	2301      	movs	r3, #1
 800e60a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e60c:	1a9b      	subs	r3, r3, r2
 800e60e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e614:	9a07      	ldr	r2, [sp, #28]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	18d3      	adds	r3, r2, r3
 800e61a:	9307      	str	r3, [sp, #28]
 800e61c:	2200      	movs	r2, #0
 800e61e:	2300      	movs	r3, #0
 800e620:	0020      	movs	r0, r4
 800e622:	0031      	movs	r1, r6
 800e624:	f7f1 ff10 	bl	8000448 <__aeabi_dcmpeq>
 800e628:	2800      	cmp	r0, #0
 800e62a:	d001      	beq.n	800e630 <__cvt+0xa6>
 800e62c:	9b07      	ldr	r3, [sp, #28]
 800e62e:	9309      	str	r3, [sp, #36]	; 0x24
 800e630:	2230      	movs	r2, #48	; 0x30
 800e632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e634:	9907      	ldr	r1, [sp, #28]
 800e636:	428b      	cmp	r3, r1
 800e638:	d306      	bcc.n	800e648 <__cvt+0xbe>
 800e63a:	0028      	movs	r0, r5
 800e63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e640:	1b5b      	subs	r3, r3, r5
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	b00b      	add	sp, #44	; 0x2c
 800e646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e648:	1c59      	adds	r1, r3, #1
 800e64a:	9109      	str	r1, [sp, #36]	; 0x24
 800e64c:	701a      	strb	r2, [r3, #0]
 800e64e:	e7f0      	b.n	800e632 <__cvt+0xa8>

0800e650 <__exponent>:
 800e650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e652:	1c83      	adds	r3, r0, #2
 800e654:	b087      	sub	sp, #28
 800e656:	9303      	str	r3, [sp, #12]
 800e658:	0005      	movs	r5, r0
 800e65a:	000c      	movs	r4, r1
 800e65c:	232b      	movs	r3, #43	; 0x2b
 800e65e:	7002      	strb	r2, [r0, #0]
 800e660:	2900      	cmp	r1, #0
 800e662:	da01      	bge.n	800e668 <__exponent+0x18>
 800e664:	424c      	negs	r4, r1
 800e666:	3302      	adds	r3, #2
 800e668:	706b      	strb	r3, [r5, #1]
 800e66a:	2c09      	cmp	r4, #9
 800e66c:	dd31      	ble.n	800e6d2 <__exponent+0x82>
 800e66e:	270a      	movs	r7, #10
 800e670:	ab04      	add	r3, sp, #16
 800e672:	1dde      	adds	r6, r3, #7
 800e674:	0020      	movs	r0, r4
 800e676:	0039      	movs	r1, r7
 800e678:	9601      	str	r6, [sp, #4]
 800e67a:	f7f1 fecf 	bl	800041c <__aeabi_idivmod>
 800e67e:	3e01      	subs	r6, #1
 800e680:	3130      	adds	r1, #48	; 0x30
 800e682:	0020      	movs	r0, r4
 800e684:	7031      	strb	r1, [r6, #0]
 800e686:	0039      	movs	r1, r7
 800e688:	9402      	str	r4, [sp, #8]
 800e68a:	f7f1 fde1 	bl	8000250 <__divsi3>
 800e68e:	9b02      	ldr	r3, [sp, #8]
 800e690:	0004      	movs	r4, r0
 800e692:	2b63      	cmp	r3, #99	; 0x63
 800e694:	dcee      	bgt.n	800e674 <__exponent+0x24>
 800e696:	9b01      	ldr	r3, [sp, #4]
 800e698:	3430      	adds	r4, #48	; 0x30
 800e69a:	1e9a      	subs	r2, r3, #2
 800e69c:	0013      	movs	r3, r2
 800e69e:	9903      	ldr	r1, [sp, #12]
 800e6a0:	7014      	strb	r4, [r2, #0]
 800e6a2:	a804      	add	r0, sp, #16
 800e6a4:	3007      	adds	r0, #7
 800e6a6:	4298      	cmp	r0, r3
 800e6a8:	d80e      	bhi.n	800e6c8 <__exponent+0x78>
 800e6aa:	ab04      	add	r3, sp, #16
 800e6ac:	3307      	adds	r3, #7
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d804      	bhi.n	800e6be <__exponent+0x6e>
 800e6b4:	ab04      	add	r3, sp, #16
 800e6b6:	3009      	adds	r0, #9
 800e6b8:	18c0      	adds	r0, r0, r3
 800e6ba:	9b01      	ldr	r3, [sp, #4]
 800e6bc:	1ac0      	subs	r0, r0, r3
 800e6be:	9b03      	ldr	r3, [sp, #12]
 800e6c0:	1818      	adds	r0, r3, r0
 800e6c2:	1b40      	subs	r0, r0, r5
 800e6c4:	b007      	add	sp, #28
 800e6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6c8:	7818      	ldrb	r0, [r3, #0]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	7008      	strb	r0, [r1, #0]
 800e6ce:	3101      	adds	r1, #1
 800e6d0:	e7e7      	b.n	800e6a2 <__exponent+0x52>
 800e6d2:	2330      	movs	r3, #48	; 0x30
 800e6d4:	18e4      	adds	r4, r4, r3
 800e6d6:	70ab      	strb	r3, [r5, #2]
 800e6d8:	1d28      	adds	r0, r5, #4
 800e6da:	70ec      	strb	r4, [r5, #3]
 800e6dc:	e7f1      	b.n	800e6c2 <__exponent+0x72>
	...

0800e6e0 <_printf_float>:
 800e6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6e2:	b095      	sub	sp, #84	; 0x54
 800e6e4:	000c      	movs	r4, r1
 800e6e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e6e8:	001e      	movs	r6, r3
 800e6ea:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e6ec:	0007      	movs	r7, r0
 800e6ee:	f001 fa8d 	bl	800fc0c <_localeconv_r>
 800e6f2:	6803      	ldr	r3, [r0, #0]
 800e6f4:	0018      	movs	r0, r3
 800e6f6:	930c      	str	r3, [sp, #48]	; 0x30
 800e6f8:	f7f1 fd04 	bl	8000104 <strlen>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	9312      	str	r3, [sp, #72]	; 0x48
 800e700:	7e23      	ldrb	r3, [r4, #24]
 800e702:	2207      	movs	r2, #7
 800e704:	930a      	str	r3, [sp, #40]	; 0x28
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	900e      	str	r0, [sp, #56]	; 0x38
 800e70a:	930d      	str	r3, [sp, #52]	; 0x34
 800e70c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e70e:	682b      	ldr	r3, [r5, #0]
 800e710:	05c9      	lsls	r1, r1, #23
 800e712:	d547      	bpl.n	800e7a4 <_printf_float+0xc4>
 800e714:	189b      	adds	r3, r3, r2
 800e716:	4393      	bics	r3, r2
 800e718:	001a      	movs	r2, r3
 800e71a:	3208      	adds	r2, #8
 800e71c:	602a      	str	r2, [r5, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	64a2      	str	r2, [r4, #72]	; 0x48
 800e724:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e726:	2201      	movs	r2, #1
 800e728:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e72a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800e72c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e72e:	006b      	lsls	r3, r5, #1
 800e730:	085b      	lsrs	r3, r3, #1
 800e732:	930f      	str	r3, [sp, #60]	; 0x3c
 800e734:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e736:	4ba7      	ldr	r3, [pc, #668]	; (800e9d4 <_printf_float+0x2f4>)
 800e738:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e73a:	4252      	negs	r2, r2
 800e73c:	f7f4 fab0 	bl	8002ca0 <__aeabi_dcmpun>
 800e740:	2800      	cmp	r0, #0
 800e742:	d131      	bne.n	800e7a8 <_printf_float+0xc8>
 800e744:	2201      	movs	r2, #1
 800e746:	4ba3      	ldr	r3, [pc, #652]	; (800e9d4 <_printf_float+0x2f4>)
 800e748:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e74a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e74c:	4252      	negs	r2, r2
 800e74e:	f7f1 fe8b 	bl	8000468 <__aeabi_dcmple>
 800e752:	2800      	cmp	r0, #0
 800e754:	d128      	bne.n	800e7a8 <_printf_float+0xc8>
 800e756:	2200      	movs	r2, #0
 800e758:	2300      	movs	r3, #0
 800e75a:	0029      	movs	r1, r5
 800e75c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e75e:	f7f1 fe79 	bl	8000454 <__aeabi_dcmplt>
 800e762:	2800      	cmp	r0, #0
 800e764:	d003      	beq.n	800e76e <_printf_float+0x8e>
 800e766:	0023      	movs	r3, r4
 800e768:	222d      	movs	r2, #45	; 0x2d
 800e76a:	3343      	adds	r3, #67	; 0x43
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e770:	4d99      	ldr	r5, [pc, #612]	; (800e9d8 <_printf_float+0x2f8>)
 800e772:	2b47      	cmp	r3, #71	; 0x47
 800e774:	d900      	bls.n	800e778 <_printf_float+0x98>
 800e776:	4d99      	ldr	r5, [pc, #612]	; (800e9dc <_printf_float+0x2fc>)
 800e778:	2303      	movs	r3, #3
 800e77a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e77c:	6123      	str	r3, [r4, #16]
 800e77e:	3301      	adds	r3, #1
 800e780:	439a      	bics	r2, r3
 800e782:	2300      	movs	r3, #0
 800e784:	6022      	str	r2, [r4, #0]
 800e786:	930b      	str	r3, [sp, #44]	; 0x2c
 800e788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e78a:	0021      	movs	r1, r4
 800e78c:	0038      	movs	r0, r7
 800e78e:	9600      	str	r6, [sp, #0]
 800e790:	aa13      	add	r2, sp, #76	; 0x4c
 800e792:	f000 f9e7 	bl	800eb64 <_printf_common>
 800e796:	1c43      	adds	r3, r0, #1
 800e798:	d000      	beq.n	800e79c <_printf_float+0xbc>
 800e79a:	e0a2      	b.n	800e8e2 <_printf_float+0x202>
 800e79c:	2001      	movs	r0, #1
 800e79e:	4240      	negs	r0, r0
 800e7a0:	b015      	add	sp, #84	; 0x54
 800e7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a4:	3307      	adds	r3, #7
 800e7a6:	e7b6      	b.n	800e716 <_printf_float+0x36>
 800e7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7aa:	002b      	movs	r3, r5
 800e7ac:	0010      	movs	r0, r2
 800e7ae:	0029      	movs	r1, r5
 800e7b0:	f7f4 fa76 	bl	8002ca0 <__aeabi_dcmpun>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d00b      	beq.n	800e7d0 <_printf_float+0xf0>
 800e7b8:	2d00      	cmp	r5, #0
 800e7ba:	da03      	bge.n	800e7c4 <_printf_float+0xe4>
 800e7bc:	0023      	movs	r3, r4
 800e7be:	222d      	movs	r2, #45	; 0x2d
 800e7c0:	3343      	adds	r3, #67	; 0x43
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7c6:	4d86      	ldr	r5, [pc, #536]	; (800e9e0 <_printf_float+0x300>)
 800e7c8:	2b47      	cmp	r3, #71	; 0x47
 800e7ca:	d9d5      	bls.n	800e778 <_printf_float+0x98>
 800e7cc:	4d85      	ldr	r5, [pc, #532]	; (800e9e4 <_printf_float+0x304>)
 800e7ce:	e7d3      	b.n	800e778 <_printf_float+0x98>
 800e7d0:	2220      	movs	r2, #32
 800e7d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e7d4:	6863      	ldr	r3, [r4, #4]
 800e7d6:	4391      	bics	r1, r2
 800e7d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	d149      	bne.n	800e872 <_printf_float+0x192>
 800e7de:	3307      	adds	r3, #7
 800e7e0:	6063      	str	r3, [r4, #4]
 800e7e2:	2380      	movs	r3, #128	; 0x80
 800e7e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	9206      	str	r2, [sp, #24]
 800e7ee:	aa12      	add	r2, sp, #72	; 0x48
 800e7f0:	9205      	str	r2, [sp, #20]
 800e7f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7f4:	a908      	add	r1, sp, #32
 800e7f6:	9204      	str	r2, [sp, #16]
 800e7f8:	aa11      	add	r2, sp, #68	; 0x44
 800e7fa:	9203      	str	r2, [sp, #12]
 800e7fc:	2223      	movs	r2, #35	; 0x23
 800e7fe:	6023      	str	r3, [r4, #0]
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	6863      	ldr	r3, [r4, #4]
 800e804:	1852      	adds	r2, r2, r1
 800e806:	9202      	str	r2, [sp, #8]
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	0038      	movs	r0, r7
 800e80c:	002b      	movs	r3, r5
 800e80e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e810:	f7ff febb 	bl	800e58a <__cvt>
 800e814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e816:	0005      	movs	r5, r0
 800e818:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e81a:	2b47      	cmp	r3, #71	; 0x47
 800e81c:	d108      	bne.n	800e830 <_printf_float+0x150>
 800e81e:	1ccb      	adds	r3, r1, #3
 800e820:	db02      	blt.n	800e828 <_printf_float+0x148>
 800e822:	6863      	ldr	r3, [r4, #4]
 800e824:	4299      	cmp	r1, r3
 800e826:	dd48      	ble.n	800e8ba <_printf_float+0x1da>
 800e828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e82a:	3b02      	subs	r3, #2
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	930a      	str	r3, [sp, #40]	; 0x28
 800e830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e832:	2b65      	cmp	r3, #101	; 0x65
 800e834:	d824      	bhi.n	800e880 <_printf_float+0x1a0>
 800e836:	0020      	movs	r0, r4
 800e838:	001a      	movs	r2, r3
 800e83a:	3901      	subs	r1, #1
 800e83c:	3050      	adds	r0, #80	; 0x50
 800e83e:	9111      	str	r1, [sp, #68]	; 0x44
 800e840:	f7ff ff06 	bl	800e650 <__exponent>
 800e844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e846:	900b      	str	r0, [sp, #44]	; 0x2c
 800e848:	1813      	adds	r3, r2, r0
 800e84a:	6123      	str	r3, [r4, #16]
 800e84c:	2a01      	cmp	r2, #1
 800e84e:	dc02      	bgt.n	800e856 <_printf_float+0x176>
 800e850:	6822      	ldr	r2, [r4, #0]
 800e852:	07d2      	lsls	r2, r2, #31
 800e854:	d501      	bpl.n	800e85a <_printf_float+0x17a>
 800e856:	3301      	adds	r3, #1
 800e858:	6123      	str	r3, [r4, #16]
 800e85a:	2323      	movs	r3, #35	; 0x23
 800e85c:	aa08      	add	r2, sp, #32
 800e85e:	189b      	adds	r3, r3, r2
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d100      	bne.n	800e868 <_printf_float+0x188>
 800e866:	e78f      	b.n	800e788 <_printf_float+0xa8>
 800e868:	0023      	movs	r3, r4
 800e86a:	222d      	movs	r2, #45	; 0x2d
 800e86c:	3343      	adds	r3, #67	; 0x43
 800e86e:	701a      	strb	r2, [r3, #0]
 800e870:	e78a      	b.n	800e788 <_printf_float+0xa8>
 800e872:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e874:	2a47      	cmp	r2, #71	; 0x47
 800e876:	d1b4      	bne.n	800e7e2 <_printf_float+0x102>
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1b2      	bne.n	800e7e2 <_printf_float+0x102>
 800e87c:	3301      	adds	r3, #1
 800e87e:	e7af      	b.n	800e7e0 <_printf_float+0x100>
 800e880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e882:	2b66      	cmp	r3, #102	; 0x66
 800e884:	d11b      	bne.n	800e8be <_printf_float+0x1de>
 800e886:	6863      	ldr	r3, [r4, #4]
 800e888:	2900      	cmp	r1, #0
 800e88a:	dd0d      	ble.n	800e8a8 <_printf_float+0x1c8>
 800e88c:	6121      	str	r1, [r4, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d102      	bne.n	800e898 <_printf_float+0x1b8>
 800e892:	6822      	ldr	r2, [r4, #0]
 800e894:	07d2      	lsls	r2, r2, #31
 800e896:	d502      	bpl.n	800e89e <_printf_float+0x1be>
 800e898:	3301      	adds	r3, #1
 800e89a:	1859      	adds	r1, r3, r1
 800e89c:	6121      	str	r1, [r4, #16]
 800e89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8a0:	65a3      	str	r3, [r4, #88]	; 0x58
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8a6:	e7d8      	b.n	800e85a <_printf_float+0x17a>
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d103      	bne.n	800e8b4 <_printf_float+0x1d4>
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	6821      	ldr	r1, [r4, #0]
 800e8b0:	4211      	tst	r1, r2
 800e8b2:	d000      	beq.n	800e8b6 <_printf_float+0x1d6>
 800e8b4:	1c9a      	adds	r2, r3, #2
 800e8b6:	6122      	str	r2, [r4, #16]
 800e8b8:	e7f1      	b.n	800e89e <_printf_float+0x1be>
 800e8ba:	2367      	movs	r3, #103	; 0x67
 800e8bc:	930a      	str	r3, [sp, #40]	; 0x28
 800e8be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	db06      	blt.n	800e8d4 <_printf_float+0x1f4>
 800e8c6:	6822      	ldr	r2, [r4, #0]
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	07d2      	lsls	r2, r2, #31
 800e8cc:	d5e7      	bpl.n	800e89e <_printf_float+0x1be>
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	e7e4      	b.n	800e89e <_printf_float+0x1be>
 800e8d4:	2101      	movs	r1, #1
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	dc01      	bgt.n	800e8de <_printf_float+0x1fe>
 800e8da:	1849      	adds	r1, r1, r1
 800e8dc:	1ac9      	subs	r1, r1, r3
 800e8de:	1852      	adds	r2, r2, r1
 800e8e0:	e7e9      	b.n	800e8b6 <_printf_float+0x1d6>
 800e8e2:	6822      	ldr	r2, [r4, #0]
 800e8e4:	0553      	lsls	r3, r2, #21
 800e8e6:	d407      	bmi.n	800e8f8 <_printf_float+0x218>
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	002a      	movs	r2, r5
 800e8ec:	0038      	movs	r0, r7
 800e8ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8f0:	47b0      	blx	r6
 800e8f2:	1c43      	adds	r3, r0, #1
 800e8f4:	d128      	bne.n	800e948 <_printf_float+0x268>
 800e8f6:	e751      	b.n	800e79c <_printf_float+0xbc>
 800e8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8fa:	2b65      	cmp	r3, #101	; 0x65
 800e8fc:	d800      	bhi.n	800e900 <_printf_float+0x220>
 800e8fe:	e0e1      	b.n	800eac4 <_printf_float+0x3e4>
 800e900:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e902:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e904:	2200      	movs	r2, #0
 800e906:	2300      	movs	r3, #0
 800e908:	f7f1 fd9e 	bl	8000448 <__aeabi_dcmpeq>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d031      	beq.n	800e974 <_printf_float+0x294>
 800e910:	2301      	movs	r3, #1
 800e912:	0038      	movs	r0, r7
 800e914:	4a34      	ldr	r2, [pc, #208]	; (800e9e8 <_printf_float+0x308>)
 800e916:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e918:	47b0      	blx	r6
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	d100      	bne.n	800e920 <_printf_float+0x240>
 800e91e:	e73d      	b.n	800e79c <_printf_float+0xbc>
 800e920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e924:	4293      	cmp	r3, r2
 800e926:	db02      	blt.n	800e92e <_printf_float+0x24e>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	07db      	lsls	r3, r3, #31
 800e92c:	d50c      	bpl.n	800e948 <_printf_float+0x268>
 800e92e:	0038      	movs	r0, r7
 800e930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e934:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e936:	47b0      	blx	r6
 800e938:	2500      	movs	r5, #0
 800e93a:	1c43      	adds	r3, r0, #1
 800e93c:	d100      	bne.n	800e940 <_printf_float+0x260>
 800e93e:	e72d      	b.n	800e79c <_printf_float+0xbc>
 800e940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e942:	3b01      	subs	r3, #1
 800e944:	42ab      	cmp	r3, r5
 800e946:	dc0a      	bgt.n	800e95e <_printf_float+0x27e>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	079b      	lsls	r3, r3, #30
 800e94c:	d500      	bpl.n	800e950 <_printf_float+0x270>
 800e94e:	e106      	b.n	800eb5e <_printf_float+0x47e>
 800e950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e952:	68e0      	ldr	r0, [r4, #12]
 800e954:	4298      	cmp	r0, r3
 800e956:	db00      	blt.n	800e95a <_printf_float+0x27a>
 800e958:	e722      	b.n	800e7a0 <_printf_float+0xc0>
 800e95a:	0018      	movs	r0, r3
 800e95c:	e720      	b.n	800e7a0 <_printf_float+0xc0>
 800e95e:	0022      	movs	r2, r4
 800e960:	2301      	movs	r3, #1
 800e962:	0038      	movs	r0, r7
 800e964:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e966:	321a      	adds	r2, #26
 800e968:	47b0      	blx	r6
 800e96a:	1c43      	adds	r3, r0, #1
 800e96c:	d100      	bne.n	800e970 <_printf_float+0x290>
 800e96e:	e715      	b.n	800e79c <_printf_float+0xbc>
 800e970:	3501      	adds	r5, #1
 800e972:	e7e5      	b.n	800e940 <_printf_float+0x260>
 800e974:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e976:	2b00      	cmp	r3, #0
 800e978:	dc38      	bgt.n	800e9ec <_printf_float+0x30c>
 800e97a:	2301      	movs	r3, #1
 800e97c:	0038      	movs	r0, r7
 800e97e:	4a1a      	ldr	r2, [pc, #104]	; (800e9e8 <_printf_float+0x308>)
 800e980:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e982:	47b0      	blx	r6
 800e984:	1c43      	adds	r3, r0, #1
 800e986:	d100      	bne.n	800e98a <_printf_float+0x2aa>
 800e988:	e708      	b.n	800e79c <_printf_float+0xbc>
 800e98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e98c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e98e:	4313      	orrs	r3, r2
 800e990:	d102      	bne.n	800e998 <_printf_float+0x2b8>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	07db      	lsls	r3, r3, #31
 800e996:	d5d7      	bpl.n	800e948 <_printf_float+0x268>
 800e998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e99a:	0038      	movs	r0, r7
 800e99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e99e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9a0:	47b0      	blx	r6
 800e9a2:	1c43      	adds	r3, r0, #1
 800e9a4:	d100      	bne.n	800e9a8 <_printf_float+0x2c8>
 800e9a6:	e6f9      	b.n	800e79c <_printf_float+0xbc>
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e9ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9b0:	425b      	negs	r3, r3
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	dc01      	bgt.n	800e9ba <_printf_float+0x2da>
 800e9b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9b8:	e797      	b.n	800e8ea <_printf_float+0x20a>
 800e9ba:	0022      	movs	r2, r4
 800e9bc:	2301      	movs	r3, #1
 800e9be:	0038      	movs	r0, r7
 800e9c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9c2:	321a      	adds	r2, #26
 800e9c4:	47b0      	blx	r6
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	d100      	bne.n	800e9cc <_printf_float+0x2ec>
 800e9ca:	e6e7      	b.n	800e79c <_printf_float+0xbc>
 800e9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	e7eb      	b.n	800e9aa <_printf_float+0x2ca>
 800e9d2:	46c0      	nop			; (mov r8, r8)
 800e9d4:	7fefffff 	.word	0x7fefffff
 800e9d8:	0801295c 	.word	0x0801295c
 800e9dc:	08012960 	.word	0x08012960
 800e9e0:	08012964 	.word	0x08012964
 800e9e4:	08012968 	.word	0x08012968
 800e9e8:	0801296c 	.word	0x0801296c
 800e9ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9f0:	920a      	str	r2, [sp, #40]	; 0x28
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	dd00      	ble.n	800e9f8 <_printf_float+0x318>
 800e9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	dc3c      	bgt.n	800ea78 <_printf_float+0x398>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	930d      	str	r3, [sp, #52]	; 0x34
 800ea02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea04:	43db      	mvns	r3, r3
 800ea06:	17db      	asrs	r3, r3, #31
 800ea08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea12:	4013      	ands	r3, r2
 800ea14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	dc34      	bgt.n	800ea88 <_printf_float+0x3a8>
 800ea1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea22:	4293      	cmp	r3, r2
 800ea24:	db3d      	blt.n	800eaa2 <_printf_float+0x3c2>
 800ea26:	6823      	ldr	r3, [r4, #0]
 800ea28:	07db      	lsls	r3, r3, #31
 800ea2a:	d43a      	bmi.n	800eaa2 <_printf_float+0x3c2>
 800ea2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea30:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ea32:	1ad3      	subs	r3, r2, r3
 800ea34:	1a52      	subs	r2, r2, r1
 800ea36:	920a      	str	r2, [sp, #40]	; 0x28
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	dd00      	ble.n	800ea3e <_printf_float+0x35e>
 800ea3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ea3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	dc36      	bgt.n	800eab2 <_printf_float+0x3d2>
 800ea44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea46:	2500      	movs	r5, #0
 800ea48:	43db      	mvns	r3, r3
 800ea4a:	17db      	asrs	r3, r3, #31
 800ea4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea54:	1a9b      	subs	r3, r3, r2
 800ea56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea58:	400a      	ands	r2, r1
 800ea5a:	1a9b      	subs	r3, r3, r2
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	dc00      	bgt.n	800ea62 <_printf_float+0x382>
 800ea60:	e772      	b.n	800e948 <_printf_float+0x268>
 800ea62:	0022      	movs	r2, r4
 800ea64:	2301      	movs	r3, #1
 800ea66:	0038      	movs	r0, r7
 800ea68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea6a:	321a      	adds	r2, #26
 800ea6c:	47b0      	blx	r6
 800ea6e:	1c43      	adds	r3, r0, #1
 800ea70:	d100      	bne.n	800ea74 <_printf_float+0x394>
 800ea72:	e693      	b.n	800e79c <_printf_float+0xbc>
 800ea74:	3501      	adds	r5, #1
 800ea76:	e7ea      	b.n	800ea4e <_printf_float+0x36e>
 800ea78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea7a:	002a      	movs	r2, r5
 800ea7c:	0038      	movs	r0, r7
 800ea7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea80:	47b0      	blx	r6
 800ea82:	1c43      	adds	r3, r0, #1
 800ea84:	d1bb      	bne.n	800e9fe <_printf_float+0x31e>
 800ea86:	e689      	b.n	800e79c <_printf_float+0xbc>
 800ea88:	0022      	movs	r2, r4
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	0038      	movs	r0, r7
 800ea8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea90:	321a      	adds	r2, #26
 800ea92:	47b0      	blx	r6
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	d100      	bne.n	800ea9a <_printf_float+0x3ba>
 800ea98:	e680      	b.n	800e79c <_printf_float+0xbc>
 800ea9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	930d      	str	r3, [sp, #52]	; 0x34
 800eaa0:	e7b3      	b.n	800ea0a <_printf_float+0x32a>
 800eaa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaa4:	0038      	movs	r0, r7
 800eaa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eaa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaaa:	47b0      	blx	r6
 800eaac:	1c43      	adds	r3, r0, #1
 800eaae:	d1bd      	bne.n	800ea2c <_printf_float+0x34c>
 800eab0:	e674      	b.n	800e79c <_printf_float+0xbc>
 800eab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eab4:	0038      	movs	r0, r7
 800eab6:	18ea      	adds	r2, r5, r3
 800eab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eabc:	47b0      	blx	r6
 800eabe:	1c43      	adds	r3, r0, #1
 800eac0:	d1c0      	bne.n	800ea44 <_printf_float+0x364>
 800eac2:	e66b      	b.n	800e79c <_printf_float+0xbc>
 800eac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	dc02      	bgt.n	800ead0 <_printf_float+0x3f0>
 800eaca:	2301      	movs	r3, #1
 800eacc:	421a      	tst	r2, r3
 800eace:	d034      	beq.n	800eb3a <_printf_float+0x45a>
 800ead0:	2301      	movs	r3, #1
 800ead2:	002a      	movs	r2, r5
 800ead4:	0038      	movs	r0, r7
 800ead6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ead8:	47b0      	blx	r6
 800eada:	1c43      	adds	r3, r0, #1
 800eadc:	d100      	bne.n	800eae0 <_printf_float+0x400>
 800eade:	e65d      	b.n	800e79c <_printf_float+0xbc>
 800eae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eae2:	0038      	movs	r0, r7
 800eae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eae6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eae8:	47b0      	blx	r6
 800eaea:	1c43      	adds	r3, r0, #1
 800eaec:	d100      	bne.n	800eaf0 <_printf_float+0x410>
 800eaee:	e655      	b.n	800e79c <_printf_float+0xbc>
 800eaf0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800eaf2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f7f1 fca6 	bl	8000448 <__aeabi_dcmpeq>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d11a      	bne.n	800eb36 <_printf_float+0x456>
 800eb00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb02:	1c6a      	adds	r2, r5, #1
 800eb04:	3b01      	subs	r3, #1
 800eb06:	0038      	movs	r0, r7
 800eb08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb0a:	47b0      	blx	r6
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d10e      	bne.n	800eb2e <_printf_float+0x44e>
 800eb10:	e644      	b.n	800e79c <_printf_float+0xbc>
 800eb12:	0022      	movs	r2, r4
 800eb14:	2301      	movs	r3, #1
 800eb16:	0038      	movs	r0, r7
 800eb18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb1a:	321a      	adds	r2, #26
 800eb1c:	47b0      	blx	r6
 800eb1e:	1c43      	adds	r3, r0, #1
 800eb20:	d100      	bne.n	800eb24 <_printf_float+0x444>
 800eb22:	e63b      	b.n	800e79c <_printf_float+0xbc>
 800eb24:	3501      	adds	r5, #1
 800eb26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	42ab      	cmp	r3, r5
 800eb2c:	dcf1      	bgt.n	800eb12 <_printf_float+0x432>
 800eb2e:	0022      	movs	r2, r4
 800eb30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb32:	3250      	adds	r2, #80	; 0x50
 800eb34:	e6da      	b.n	800e8ec <_printf_float+0x20c>
 800eb36:	2500      	movs	r5, #0
 800eb38:	e7f5      	b.n	800eb26 <_printf_float+0x446>
 800eb3a:	002a      	movs	r2, r5
 800eb3c:	e7e3      	b.n	800eb06 <_printf_float+0x426>
 800eb3e:	0022      	movs	r2, r4
 800eb40:	2301      	movs	r3, #1
 800eb42:	0038      	movs	r0, r7
 800eb44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb46:	3219      	adds	r2, #25
 800eb48:	47b0      	blx	r6
 800eb4a:	1c43      	adds	r3, r0, #1
 800eb4c:	d100      	bne.n	800eb50 <_printf_float+0x470>
 800eb4e:	e625      	b.n	800e79c <_printf_float+0xbc>
 800eb50:	3501      	adds	r5, #1
 800eb52:	68e3      	ldr	r3, [r4, #12]
 800eb54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eb56:	1a9b      	subs	r3, r3, r2
 800eb58:	42ab      	cmp	r3, r5
 800eb5a:	dcf0      	bgt.n	800eb3e <_printf_float+0x45e>
 800eb5c:	e6f8      	b.n	800e950 <_printf_float+0x270>
 800eb5e:	2500      	movs	r5, #0
 800eb60:	e7f7      	b.n	800eb52 <_printf_float+0x472>
 800eb62:	46c0      	nop			; (mov r8, r8)

0800eb64 <_printf_common>:
 800eb64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb66:	0015      	movs	r5, r2
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	688a      	ldr	r2, [r1, #8]
 800eb6c:	690b      	ldr	r3, [r1, #16]
 800eb6e:	000c      	movs	r4, r1
 800eb70:	9000      	str	r0, [sp, #0]
 800eb72:	4293      	cmp	r3, r2
 800eb74:	da00      	bge.n	800eb78 <_printf_common+0x14>
 800eb76:	0013      	movs	r3, r2
 800eb78:	0022      	movs	r2, r4
 800eb7a:	602b      	str	r3, [r5, #0]
 800eb7c:	3243      	adds	r2, #67	; 0x43
 800eb7e:	7812      	ldrb	r2, [r2, #0]
 800eb80:	2a00      	cmp	r2, #0
 800eb82:	d001      	beq.n	800eb88 <_printf_common+0x24>
 800eb84:	3301      	adds	r3, #1
 800eb86:	602b      	str	r3, [r5, #0]
 800eb88:	6823      	ldr	r3, [r4, #0]
 800eb8a:	069b      	lsls	r3, r3, #26
 800eb8c:	d502      	bpl.n	800eb94 <_printf_common+0x30>
 800eb8e:	682b      	ldr	r3, [r5, #0]
 800eb90:	3302      	adds	r3, #2
 800eb92:	602b      	str	r3, [r5, #0]
 800eb94:	6822      	ldr	r2, [r4, #0]
 800eb96:	2306      	movs	r3, #6
 800eb98:	0017      	movs	r7, r2
 800eb9a:	401f      	ands	r7, r3
 800eb9c:	421a      	tst	r2, r3
 800eb9e:	d027      	beq.n	800ebf0 <_printf_common+0x8c>
 800eba0:	0023      	movs	r3, r4
 800eba2:	3343      	adds	r3, #67	; 0x43
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	1e5a      	subs	r2, r3, #1
 800eba8:	4193      	sbcs	r3, r2
 800ebaa:	6822      	ldr	r2, [r4, #0]
 800ebac:	0692      	lsls	r2, r2, #26
 800ebae:	d430      	bmi.n	800ec12 <_printf_common+0xae>
 800ebb0:	0022      	movs	r2, r4
 800ebb2:	9901      	ldr	r1, [sp, #4]
 800ebb4:	9800      	ldr	r0, [sp, #0]
 800ebb6:	9e08      	ldr	r6, [sp, #32]
 800ebb8:	3243      	adds	r2, #67	; 0x43
 800ebba:	47b0      	blx	r6
 800ebbc:	1c43      	adds	r3, r0, #1
 800ebbe:	d025      	beq.n	800ec0c <_printf_common+0xa8>
 800ebc0:	2306      	movs	r3, #6
 800ebc2:	6820      	ldr	r0, [r4, #0]
 800ebc4:	682a      	ldr	r2, [r5, #0]
 800ebc6:	68e1      	ldr	r1, [r4, #12]
 800ebc8:	2500      	movs	r5, #0
 800ebca:	4003      	ands	r3, r0
 800ebcc:	2b04      	cmp	r3, #4
 800ebce:	d103      	bne.n	800ebd8 <_printf_common+0x74>
 800ebd0:	1a8d      	subs	r5, r1, r2
 800ebd2:	43eb      	mvns	r3, r5
 800ebd4:	17db      	asrs	r3, r3, #31
 800ebd6:	401d      	ands	r5, r3
 800ebd8:	68a3      	ldr	r3, [r4, #8]
 800ebda:	6922      	ldr	r2, [r4, #16]
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	dd01      	ble.n	800ebe4 <_printf_common+0x80>
 800ebe0:	1a9b      	subs	r3, r3, r2
 800ebe2:	18ed      	adds	r5, r5, r3
 800ebe4:	2700      	movs	r7, #0
 800ebe6:	42bd      	cmp	r5, r7
 800ebe8:	d120      	bne.n	800ec2c <_printf_common+0xc8>
 800ebea:	2000      	movs	r0, #0
 800ebec:	e010      	b.n	800ec10 <_printf_common+0xac>
 800ebee:	3701      	adds	r7, #1
 800ebf0:	68e3      	ldr	r3, [r4, #12]
 800ebf2:	682a      	ldr	r2, [r5, #0]
 800ebf4:	1a9b      	subs	r3, r3, r2
 800ebf6:	42bb      	cmp	r3, r7
 800ebf8:	ddd2      	ble.n	800eba0 <_printf_common+0x3c>
 800ebfa:	0022      	movs	r2, r4
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	9901      	ldr	r1, [sp, #4]
 800ec00:	9800      	ldr	r0, [sp, #0]
 800ec02:	9e08      	ldr	r6, [sp, #32]
 800ec04:	3219      	adds	r2, #25
 800ec06:	47b0      	blx	r6
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d1f0      	bne.n	800ebee <_printf_common+0x8a>
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	4240      	negs	r0, r0
 800ec10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec12:	2030      	movs	r0, #48	; 0x30
 800ec14:	18e1      	adds	r1, r4, r3
 800ec16:	3143      	adds	r1, #67	; 0x43
 800ec18:	7008      	strb	r0, [r1, #0]
 800ec1a:	0021      	movs	r1, r4
 800ec1c:	1c5a      	adds	r2, r3, #1
 800ec1e:	3145      	adds	r1, #69	; 0x45
 800ec20:	7809      	ldrb	r1, [r1, #0]
 800ec22:	18a2      	adds	r2, r4, r2
 800ec24:	3243      	adds	r2, #67	; 0x43
 800ec26:	3302      	adds	r3, #2
 800ec28:	7011      	strb	r1, [r2, #0]
 800ec2a:	e7c1      	b.n	800ebb0 <_printf_common+0x4c>
 800ec2c:	0022      	movs	r2, r4
 800ec2e:	2301      	movs	r3, #1
 800ec30:	9901      	ldr	r1, [sp, #4]
 800ec32:	9800      	ldr	r0, [sp, #0]
 800ec34:	9e08      	ldr	r6, [sp, #32]
 800ec36:	321a      	adds	r2, #26
 800ec38:	47b0      	blx	r6
 800ec3a:	1c43      	adds	r3, r0, #1
 800ec3c:	d0e6      	beq.n	800ec0c <_printf_common+0xa8>
 800ec3e:	3701      	adds	r7, #1
 800ec40:	e7d1      	b.n	800ebe6 <_printf_common+0x82>
	...

0800ec44 <_printf_i>:
 800ec44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec46:	b08b      	sub	sp, #44	; 0x2c
 800ec48:	9206      	str	r2, [sp, #24]
 800ec4a:	000a      	movs	r2, r1
 800ec4c:	3243      	adds	r2, #67	; 0x43
 800ec4e:	9307      	str	r3, [sp, #28]
 800ec50:	9005      	str	r0, [sp, #20]
 800ec52:	9204      	str	r2, [sp, #16]
 800ec54:	7e0a      	ldrb	r2, [r1, #24]
 800ec56:	000c      	movs	r4, r1
 800ec58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec5a:	2a78      	cmp	r2, #120	; 0x78
 800ec5c:	d807      	bhi.n	800ec6e <_printf_i+0x2a>
 800ec5e:	2a62      	cmp	r2, #98	; 0x62
 800ec60:	d809      	bhi.n	800ec76 <_printf_i+0x32>
 800ec62:	2a00      	cmp	r2, #0
 800ec64:	d100      	bne.n	800ec68 <_printf_i+0x24>
 800ec66:	e0c1      	b.n	800edec <_printf_i+0x1a8>
 800ec68:	2a58      	cmp	r2, #88	; 0x58
 800ec6a:	d100      	bne.n	800ec6e <_printf_i+0x2a>
 800ec6c:	e08c      	b.n	800ed88 <_printf_i+0x144>
 800ec6e:	0026      	movs	r6, r4
 800ec70:	3642      	adds	r6, #66	; 0x42
 800ec72:	7032      	strb	r2, [r6, #0]
 800ec74:	e022      	b.n	800ecbc <_printf_i+0x78>
 800ec76:	0010      	movs	r0, r2
 800ec78:	3863      	subs	r0, #99	; 0x63
 800ec7a:	2815      	cmp	r0, #21
 800ec7c:	d8f7      	bhi.n	800ec6e <_printf_i+0x2a>
 800ec7e:	f7f1 fa53 	bl	8000128 <__gnu_thumb1_case_shi>
 800ec82:	0016      	.short	0x0016
 800ec84:	fff6001f 	.word	0xfff6001f
 800ec88:	fff6fff6 	.word	0xfff6fff6
 800ec8c:	001ffff6 	.word	0x001ffff6
 800ec90:	fff6fff6 	.word	0xfff6fff6
 800ec94:	fff6fff6 	.word	0xfff6fff6
 800ec98:	003600a8 	.word	0x003600a8
 800ec9c:	fff6009a 	.word	0xfff6009a
 800eca0:	00b9fff6 	.word	0x00b9fff6
 800eca4:	0036fff6 	.word	0x0036fff6
 800eca8:	fff6fff6 	.word	0xfff6fff6
 800ecac:	009e      	.short	0x009e
 800ecae:	0026      	movs	r6, r4
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	3642      	adds	r6, #66	; 0x42
 800ecb4:	1d11      	adds	r1, r2, #4
 800ecb6:	6019      	str	r1, [r3, #0]
 800ecb8:	6813      	ldr	r3, [r2, #0]
 800ecba:	7033      	strb	r3, [r6, #0]
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e0a7      	b.n	800ee10 <_printf_i+0x1cc>
 800ecc0:	6808      	ldr	r0, [r1, #0]
 800ecc2:	6819      	ldr	r1, [r3, #0]
 800ecc4:	1d0a      	adds	r2, r1, #4
 800ecc6:	0605      	lsls	r5, r0, #24
 800ecc8:	d50b      	bpl.n	800ece2 <_printf_i+0x9e>
 800ecca:	680d      	ldr	r5, [r1, #0]
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	2d00      	cmp	r5, #0
 800ecd0:	da03      	bge.n	800ecda <_printf_i+0x96>
 800ecd2:	232d      	movs	r3, #45	; 0x2d
 800ecd4:	9a04      	ldr	r2, [sp, #16]
 800ecd6:	426d      	negs	r5, r5
 800ecd8:	7013      	strb	r3, [r2, #0]
 800ecda:	4b61      	ldr	r3, [pc, #388]	; (800ee60 <_printf_i+0x21c>)
 800ecdc:	270a      	movs	r7, #10
 800ecde:	9303      	str	r3, [sp, #12]
 800ece0:	e01b      	b.n	800ed1a <_printf_i+0xd6>
 800ece2:	680d      	ldr	r5, [r1, #0]
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	0641      	lsls	r1, r0, #25
 800ece8:	d5f1      	bpl.n	800ecce <_printf_i+0x8a>
 800ecea:	b22d      	sxth	r5, r5
 800ecec:	e7ef      	b.n	800ecce <_printf_i+0x8a>
 800ecee:	680d      	ldr	r5, [r1, #0]
 800ecf0:	6819      	ldr	r1, [r3, #0]
 800ecf2:	1d08      	adds	r0, r1, #4
 800ecf4:	6018      	str	r0, [r3, #0]
 800ecf6:	062e      	lsls	r6, r5, #24
 800ecf8:	d501      	bpl.n	800ecfe <_printf_i+0xba>
 800ecfa:	680d      	ldr	r5, [r1, #0]
 800ecfc:	e003      	b.n	800ed06 <_printf_i+0xc2>
 800ecfe:	066d      	lsls	r5, r5, #25
 800ed00:	d5fb      	bpl.n	800ecfa <_printf_i+0xb6>
 800ed02:	680d      	ldr	r5, [r1, #0]
 800ed04:	b2ad      	uxth	r5, r5
 800ed06:	4b56      	ldr	r3, [pc, #344]	; (800ee60 <_printf_i+0x21c>)
 800ed08:	2708      	movs	r7, #8
 800ed0a:	9303      	str	r3, [sp, #12]
 800ed0c:	2a6f      	cmp	r2, #111	; 0x6f
 800ed0e:	d000      	beq.n	800ed12 <_printf_i+0xce>
 800ed10:	3702      	adds	r7, #2
 800ed12:	0023      	movs	r3, r4
 800ed14:	2200      	movs	r2, #0
 800ed16:	3343      	adds	r3, #67	; 0x43
 800ed18:	701a      	strb	r2, [r3, #0]
 800ed1a:	6863      	ldr	r3, [r4, #4]
 800ed1c:	60a3      	str	r3, [r4, #8]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	db03      	blt.n	800ed2a <_printf_i+0xe6>
 800ed22:	2204      	movs	r2, #4
 800ed24:	6821      	ldr	r1, [r4, #0]
 800ed26:	4391      	bics	r1, r2
 800ed28:	6021      	str	r1, [r4, #0]
 800ed2a:	2d00      	cmp	r5, #0
 800ed2c:	d102      	bne.n	800ed34 <_printf_i+0xf0>
 800ed2e:	9e04      	ldr	r6, [sp, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00c      	beq.n	800ed4e <_printf_i+0x10a>
 800ed34:	9e04      	ldr	r6, [sp, #16]
 800ed36:	0028      	movs	r0, r5
 800ed38:	0039      	movs	r1, r7
 800ed3a:	f7f1 fa85 	bl	8000248 <__aeabi_uidivmod>
 800ed3e:	9b03      	ldr	r3, [sp, #12]
 800ed40:	3e01      	subs	r6, #1
 800ed42:	5c5b      	ldrb	r3, [r3, r1]
 800ed44:	7033      	strb	r3, [r6, #0]
 800ed46:	002b      	movs	r3, r5
 800ed48:	0005      	movs	r5, r0
 800ed4a:	429f      	cmp	r7, r3
 800ed4c:	d9f3      	bls.n	800ed36 <_printf_i+0xf2>
 800ed4e:	2f08      	cmp	r7, #8
 800ed50:	d109      	bne.n	800ed66 <_printf_i+0x122>
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	07db      	lsls	r3, r3, #31
 800ed56:	d506      	bpl.n	800ed66 <_printf_i+0x122>
 800ed58:	6863      	ldr	r3, [r4, #4]
 800ed5a:	6922      	ldr	r2, [r4, #16]
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	dc02      	bgt.n	800ed66 <_printf_i+0x122>
 800ed60:	2330      	movs	r3, #48	; 0x30
 800ed62:	3e01      	subs	r6, #1
 800ed64:	7033      	strb	r3, [r6, #0]
 800ed66:	9b04      	ldr	r3, [sp, #16]
 800ed68:	1b9b      	subs	r3, r3, r6
 800ed6a:	6123      	str	r3, [r4, #16]
 800ed6c:	9b07      	ldr	r3, [sp, #28]
 800ed6e:	0021      	movs	r1, r4
 800ed70:	9300      	str	r3, [sp, #0]
 800ed72:	9805      	ldr	r0, [sp, #20]
 800ed74:	9b06      	ldr	r3, [sp, #24]
 800ed76:	aa09      	add	r2, sp, #36	; 0x24
 800ed78:	f7ff fef4 	bl	800eb64 <_printf_common>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	d14c      	bne.n	800ee1a <_printf_i+0x1d6>
 800ed80:	2001      	movs	r0, #1
 800ed82:	4240      	negs	r0, r0
 800ed84:	b00b      	add	sp, #44	; 0x2c
 800ed86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed88:	3145      	adds	r1, #69	; 0x45
 800ed8a:	700a      	strb	r2, [r1, #0]
 800ed8c:	4a34      	ldr	r2, [pc, #208]	; (800ee60 <_printf_i+0x21c>)
 800ed8e:	9203      	str	r2, [sp, #12]
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	6821      	ldr	r1, [r4, #0]
 800ed94:	ca20      	ldmia	r2!, {r5}
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	0608      	lsls	r0, r1, #24
 800ed9a:	d516      	bpl.n	800edca <_printf_i+0x186>
 800ed9c:	07cb      	lsls	r3, r1, #31
 800ed9e:	d502      	bpl.n	800eda6 <_printf_i+0x162>
 800eda0:	2320      	movs	r3, #32
 800eda2:	4319      	orrs	r1, r3
 800eda4:	6021      	str	r1, [r4, #0]
 800eda6:	2710      	movs	r7, #16
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	d1b2      	bne.n	800ed12 <_printf_i+0xce>
 800edac:	2320      	movs	r3, #32
 800edae:	6822      	ldr	r2, [r4, #0]
 800edb0:	439a      	bics	r2, r3
 800edb2:	6022      	str	r2, [r4, #0]
 800edb4:	e7ad      	b.n	800ed12 <_printf_i+0xce>
 800edb6:	2220      	movs	r2, #32
 800edb8:	6809      	ldr	r1, [r1, #0]
 800edba:	430a      	orrs	r2, r1
 800edbc:	6022      	str	r2, [r4, #0]
 800edbe:	0022      	movs	r2, r4
 800edc0:	2178      	movs	r1, #120	; 0x78
 800edc2:	3245      	adds	r2, #69	; 0x45
 800edc4:	7011      	strb	r1, [r2, #0]
 800edc6:	4a27      	ldr	r2, [pc, #156]	; (800ee64 <_printf_i+0x220>)
 800edc8:	e7e1      	b.n	800ed8e <_printf_i+0x14a>
 800edca:	0648      	lsls	r0, r1, #25
 800edcc:	d5e6      	bpl.n	800ed9c <_printf_i+0x158>
 800edce:	b2ad      	uxth	r5, r5
 800edd0:	e7e4      	b.n	800ed9c <_printf_i+0x158>
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	680d      	ldr	r5, [r1, #0]
 800edd6:	1d10      	adds	r0, r2, #4
 800edd8:	6949      	ldr	r1, [r1, #20]
 800edda:	6018      	str	r0, [r3, #0]
 800eddc:	6813      	ldr	r3, [r2, #0]
 800edde:	062e      	lsls	r6, r5, #24
 800ede0:	d501      	bpl.n	800ede6 <_printf_i+0x1a2>
 800ede2:	6019      	str	r1, [r3, #0]
 800ede4:	e002      	b.n	800edec <_printf_i+0x1a8>
 800ede6:	066d      	lsls	r5, r5, #25
 800ede8:	d5fb      	bpl.n	800ede2 <_printf_i+0x19e>
 800edea:	8019      	strh	r1, [r3, #0]
 800edec:	2300      	movs	r3, #0
 800edee:	9e04      	ldr	r6, [sp, #16]
 800edf0:	6123      	str	r3, [r4, #16]
 800edf2:	e7bb      	b.n	800ed6c <_printf_i+0x128>
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	1d11      	adds	r1, r2, #4
 800edf8:	6019      	str	r1, [r3, #0]
 800edfa:	6816      	ldr	r6, [r2, #0]
 800edfc:	2100      	movs	r1, #0
 800edfe:	0030      	movs	r0, r6
 800ee00:	6862      	ldr	r2, [r4, #4]
 800ee02:	f000 ff11 	bl	800fc28 <memchr>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d001      	beq.n	800ee0e <_printf_i+0x1ca>
 800ee0a:	1b80      	subs	r0, r0, r6
 800ee0c:	6060      	str	r0, [r4, #4]
 800ee0e:	6863      	ldr	r3, [r4, #4]
 800ee10:	6123      	str	r3, [r4, #16]
 800ee12:	2300      	movs	r3, #0
 800ee14:	9a04      	ldr	r2, [sp, #16]
 800ee16:	7013      	strb	r3, [r2, #0]
 800ee18:	e7a8      	b.n	800ed6c <_printf_i+0x128>
 800ee1a:	6923      	ldr	r3, [r4, #16]
 800ee1c:	0032      	movs	r2, r6
 800ee1e:	9906      	ldr	r1, [sp, #24]
 800ee20:	9805      	ldr	r0, [sp, #20]
 800ee22:	9d07      	ldr	r5, [sp, #28]
 800ee24:	47a8      	blx	r5
 800ee26:	1c43      	adds	r3, r0, #1
 800ee28:	d0aa      	beq.n	800ed80 <_printf_i+0x13c>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	079b      	lsls	r3, r3, #30
 800ee2e:	d415      	bmi.n	800ee5c <_printf_i+0x218>
 800ee30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee32:	68e0      	ldr	r0, [r4, #12]
 800ee34:	4298      	cmp	r0, r3
 800ee36:	daa5      	bge.n	800ed84 <_printf_i+0x140>
 800ee38:	0018      	movs	r0, r3
 800ee3a:	e7a3      	b.n	800ed84 <_printf_i+0x140>
 800ee3c:	0022      	movs	r2, r4
 800ee3e:	2301      	movs	r3, #1
 800ee40:	9906      	ldr	r1, [sp, #24]
 800ee42:	9805      	ldr	r0, [sp, #20]
 800ee44:	9e07      	ldr	r6, [sp, #28]
 800ee46:	3219      	adds	r2, #25
 800ee48:	47b0      	blx	r6
 800ee4a:	1c43      	adds	r3, r0, #1
 800ee4c:	d098      	beq.n	800ed80 <_printf_i+0x13c>
 800ee4e:	3501      	adds	r5, #1
 800ee50:	68e3      	ldr	r3, [r4, #12]
 800ee52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee54:	1a9b      	subs	r3, r3, r2
 800ee56:	42ab      	cmp	r3, r5
 800ee58:	dcf0      	bgt.n	800ee3c <_printf_i+0x1f8>
 800ee5a:	e7e9      	b.n	800ee30 <_printf_i+0x1ec>
 800ee5c:	2500      	movs	r5, #0
 800ee5e:	e7f7      	b.n	800ee50 <_printf_i+0x20c>
 800ee60:	0801296e 	.word	0x0801296e
 800ee64:	0801297f 	.word	0x0801297f

0800ee68 <siprintf>:
 800ee68:	b40e      	push	{r1, r2, r3}
 800ee6a:	b500      	push	{lr}
 800ee6c:	490b      	ldr	r1, [pc, #44]	; (800ee9c <siprintf+0x34>)
 800ee6e:	b09c      	sub	sp, #112	; 0x70
 800ee70:	ab1d      	add	r3, sp, #116	; 0x74
 800ee72:	9002      	str	r0, [sp, #8]
 800ee74:	9006      	str	r0, [sp, #24]
 800ee76:	9107      	str	r1, [sp, #28]
 800ee78:	9104      	str	r1, [sp, #16]
 800ee7a:	4809      	ldr	r0, [pc, #36]	; (800eea0 <siprintf+0x38>)
 800ee7c:	4909      	ldr	r1, [pc, #36]	; (800eea4 <siprintf+0x3c>)
 800ee7e:	cb04      	ldmia	r3!, {r2}
 800ee80:	9105      	str	r1, [sp, #20]
 800ee82:	6800      	ldr	r0, [r0, #0]
 800ee84:	a902      	add	r1, sp, #8
 800ee86:	9301      	str	r3, [sp, #4]
 800ee88:	f001 fbe6 	bl	8010658 <_svfiprintf_r>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9a02      	ldr	r2, [sp, #8]
 800ee90:	7013      	strb	r3, [r2, #0]
 800ee92:	b01c      	add	sp, #112	; 0x70
 800ee94:	bc08      	pop	{r3}
 800ee96:	b003      	add	sp, #12
 800ee98:	4718      	bx	r3
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	7fffffff 	.word	0x7fffffff
 800eea0:	20000024 	.word	0x20000024
 800eea4:	ffff0208 	.word	0xffff0208

0800eea8 <strcat>:
 800eea8:	0002      	movs	r2, r0
 800eeaa:	b510      	push	{r4, lr}
 800eeac:	7813      	ldrb	r3, [r2, #0]
 800eeae:	0014      	movs	r4, r2
 800eeb0:	3201      	adds	r2, #1
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1fa      	bne.n	800eeac <strcat+0x4>
 800eeb6:	5cca      	ldrb	r2, [r1, r3]
 800eeb8:	54e2      	strb	r2, [r4, r3]
 800eeba:	3301      	adds	r3, #1
 800eebc:	2a00      	cmp	r2, #0
 800eebe:	d1fa      	bne.n	800eeb6 <strcat+0xe>
 800eec0:	bd10      	pop	{r4, pc}

0800eec2 <quorem>:
 800eec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eec4:	0006      	movs	r6, r0
 800eec6:	690b      	ldr	r3, [r1, #16]
 800eec8:	6932      	ldr	r2, [r6, #16]
 800eeca:	b087      	sub	sp, #28
 800eecc:	2000      	movs	r0, #0
 800eece:	9103      	str	r1, [sp, #12]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	db65      	blt.n	800efa0 <quorem+0xde>
 800eed4:	3b01      	subs	r3, #1
 800eed6:	009c      	lsls	r4, r3, #2
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	000b      	movs	r3, r1
 800eedc:	3314      	adds	r3, #20
 800eede:	9305      	str	r3, [sp, #20]
 800eee0:	191b      	adds	r3, r3, r4
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	0033      	movs	r3, r6
 800eee6:	3314      	adds	r3, #20
 800eee8:	9302      	str	r3, [sp, #8]
 800eeea:	191c      	adds	r4, r3, r4
 800eeec:	9b04      	ldr	r3, [sp, #16]
 800eeee:	6827      	ldr	r7, [r4, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	0038      	movs	r0, r7
 800eef4:	1c5d      	adds	r5, r3, #1
 800eef6:	0029      	movs	r1, r5
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	f7f1 f91f 	bl	800013c <__udivsi3>
 800eefe:	9001      	str	r0, [sp, #4]
 800ef00:	42af      	cmp	r7, r5
 800ef02:	d324      	bcc.n	800ef4e <quorem+0x8c>
 800ef04:	2500      	movs	r5, #0
 800ef06:	46ac      	mov	ip, r5
 800ef08:	9802      	ldr	r0, [sp, #8]
 800ef0a:	9f05      	ldr	r7, [sp, #20]
 800ef0c:	cf08      	ldmia	r7!, {r3}
 800ef0e:	9a01      	ldr	r2, [sp, #4]
 800ef10:	b299      	uxth	r1, r3
 800ef12:	4351      	muls	r1, r2
 800ef14:	0c1b      	lsrs	r3, r3, #16
 800ef16:	4353      	muls	r3, r2
 800ef18:	1949      	adds	r1, r1, r5
 800ef1a:	0c0a      	lsrs	r2, r1, #16
 800ef1c:	189b      	adds	r3, r3, r2
 800ef1e:	6802      	ldr	r2, [r0, #0]
 800ef20:	b289      	uxth	r1, r1
 800ef22:	b292      	uxth	r2, r2
 800ef24:	4462      	add	r2, ip
 800ef26:	1a52      	subs	r2, r2, r1
 800ef28:	6801      	ldr	r1, [r0, #0]
 800ef2a:	0c1d      	lsrs	r5, r3, #16
 800ef2c:	0c09      	lsrs	r1, r1, #16
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	1acb      	subs	r3, r1, r3
 800ef32:	1411      	asrs	r1, r2, #16
 800ef34:	185b      	adds	r3, r3, r1
 800ef36:	1419      	asrs	r1, r3, #16
 800ef38:	b292      	uxth	r2, r2
 800ef3a:	041b      	lsls	r3, r3, #16
 800ef3c:	431a      	orrs	r2, r3
 800ef3e:	9b04      	ldr	r3, [sp, #16]
 800ef40:	468c      	mov	ip, r1
 800ef42:	c004      	stmia	r0!, {r2}
 800ef44:	42bb      	cmp	r3, r7
 800ef46:	d2e1      	bcs.n	800ef0c <quorem+0x4a>
 800ef48:	6823      	ldr	r3, [r4, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d030      	beq.n	800efb0 <quorem+0xee>
 800ef4e:	0030      	movs	r0, r6
 800ef50:	9903      	ldr	r1, [sp, #12]
 800ef52:	f001 f8f9 	bl	8010148 <__mcmp>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	db21      	blt.n	800ef9e <quorem+0xdc>
 800ef5a:	0030      	movs	r0, r6
 800ef5c:	2400      	movs	r4, #0
 800ef5e:	9b01      	ldr	r3, [sp, #4]
 800ef60:	9903      	ldr	r1, [sp, #12]
 800ef62:	3301      	adds	r3, #1
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	3014      	adds	r0, #20
 800ef68:	3114      	adds	r1, #20
 800ef6a:	6803      	ldr	r3, [r0, #0]
 800ef6c:	c920      	ldmia	r1!, {r5}
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	1914      	adds	r4, r2, r4
 800ef72:	b2aa      	uxth	r2, r5
 800ef74:	1aa2      	subs	r2, r4, r2
 800ef76:	0c1b      	lsrs	r3, r3, #16
 800ef78:	0c2d      	lsrs	r5, r5, #16
 800ef7a:	1414      	asrs	r4, r2, #16
 800ef7c:	1b5b      	subs	r3, r3, r5
 800ef7e:	191b      	adds	r3, r3, r4
 800ef80:	141c      	asrs	r4, r3, #16
 800ef82:	b292      	uxth	r2, r2
 800ef84:	041b      	lsls	r3, r3, #16
 800ef86:	4313      	orrs	r3, r2
 800ef88:	c008      	stmia	r0!, {r3}
 800ef8a:	9b04      	ldr	r3, [sp, #16]
 800ef8c:	428b      	cmp	r3, r1
 800ef8e:	d2ec      	bcs.n	800ef6a <quorem+0xa8>
 800ef90:	9b00      	ldr	r3, [sp, #0]
 800ef92:	9a02      	ldr	r2, [sp, #8]
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	18d3      	adds	r3, r2, r3
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	2a00      	cmp	r2, #0
 800ef9c:	d015      	beq.n	800efca <quorem+0x108>
 800ef9e:	9801      	ldr	r0, [sp, #4]
 800efa0:	b007      	add	sp, #28
 800efa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <quorem+0xf6>
 800efaa:	9b00      	ldr	r3, [sp, #0]
 800efac:	3b01      	subs	r3, #1
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	9b02      	ldr	r3, [sp, #8]
 800efb2:	3c04      	subs	r4, #4
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	d3f5      	bcc.n	800efa4 <quorem+0xe2>
 800efb8:	9b00      	ldr	r3, [sp, #0]
 800efba:	6133      	str	r3, [r6, #16]
 800efbc:	e7c7      	b.n	800ef4e <quorem+0x8c>
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	2a00      	cmp	r2, #0
 800efc2:	d106      	bne.n	800efd2 <quorem+0x110>
 800efc4:	9a00      	ldr	r2, [sp, #0]
 800efc6:	3a01      	subs	r2, #1
 800efc8:	9200      	str	r2, [sp, #0]
 800efca:	9a02      	ldr	r2, [sp, #8]
 800efcc:	3b04      	subs	r3, #4
 800efce:	429a      	cmp	r2, r3
 800efd0:	d3f5      	bcc.n	800efbe <quorem+0xfc>
 800efd2:	9b00      	ldr	r3, [sp, #0]
 800efd4:	6133      	str	r3, [r6, #16]
 800efd6:	e7e2      	b.n	800ef9e <quorem+0xdc>

0800efd8 <_dtoa_r>:
 800efd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efda:	b09d      	sub	sp, #116	; 0x74
 800efdc:	9202      	str	r2, [sp, #8]
 800efde:	9303      	str	r3, [sp, #12]
 800efe0:	9b02      	ldr	r3, [sp, #8]
 800efe2:	9c03      	ldr	r4, [sp, #12]
 800efe4:	9308      	str	r3, [sp, #32]
 800efe6:	9409      	str	r4, [sp, #36]	; 0x24
 800efe8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800efea:	0007      	movs	r7, r0
 800efec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800efee:	2c00      	cmp	r4, #0
 800eff0:	d10e      	bne.n	800f010 <_dtoa_r+0x38>
 800eff2:	2010      	movs	r0, #16
 800eff4:	f000 fe0e 	bl	800fc14 <malloc>
 800eff8:	1e02      	subs	r2, r0, #0
 800effa:	6278      	str	r0, [r7, #36]	; 0x24
 800effc:	d104      	bne.n	800f008 <_dtoa_r+0x30>
 800effe:	21ea      	movs	r1, #234	; 0xea
 800f000:	4bc7      	ldr	r3, [pc, #796]	; (800f320 <_dtoa_r+0x348>)
 800f002:	48c8      	ldr	r0, [pc, #800]	; (800f324 <_dtoa_r+0x34c>)
 800f004:	f001 fc3a 	bl	801087c <__assert_func>
 800f008:	6044      	str	r4, [r0, #4]
 800f00a:	6084      	str	r4, [r0, #8]
 800f00c:	6004      	str	r4, [r0, #0]
 800f00e:	60c4      	str	r4, [r0, #12]
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	6819      	ldr	r1, [r3, #0]
 800f014:	2900      	cmp	r1, #0
 800f016:	d00a      	beq.n	800f02e <_dtoa_r+0x56>
 800f018:	685a      	ldr	r2, [r3, #4]
 800f01a:	2301      	movs	r3, #1
 800f01c:	4093      	lsls	r3, r2
 800f01e:	604a      	str	r2, [r1, #4]
 800f020:	608b      	str	r3, [r1, #8]
 800f022:	0038      	movs	r0, r7
 800f024:	f000 fe50 	bl	800fcc8 <_Bfree>
 800f028:	2200      	movs	r2, #0
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	9b03      	ldr	r3, [sp, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	da20      	bge.n	800f076 <_dtoa_r+0x9e>
 800f034:	2301      	movs	r3, #1
 800f036:	602b      	str	r3, [r5, #0]
 800f038:	9b03      	ldr	r3, [sp, #12]
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	085b      	lsrs	r3, r3, #1
 800f03e:	9309      	str	r3, [sp, #36]	; 0x24
 800f040:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f042:	4bb9      	ldr	r3, [pc, #740]	; (800f328 <_dtoa_r+0x350>)
 800f044:	4ab8      	ldr	r2, [pc, #736]	; (800f328 <_dtoa_r+0x350>)
 800f046:	402b      	ands	r3, r5
 800f048:	4293      	cmp	r3, r2
 800f04a:	d117      	bne.n	800f07c <_dtoa_r+0xa4>
 800f04c:	4bb7      	ldr	r3, [pc, #732]	; (800f32c <_dtoa_r+0x354>)
 800f04e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f050:	0328      	lsls	r0, r5, #12
 800f052:	6013      	str	r3, [r2, #0]
 800f054:	9b02      	ldr	r3, [sp, #8]
 800f056:	0b00      	lsrs	r0, r0, #12
 800f058:	4318      	orrs	r0, r3
 800f05a:	d101      	bne.n	800f060 <_dtoa_r+0x88>
 800f05c:	f000 fdbf 	bl	800fbde <_dtoa_r+0xc06>
 800f060:	48b3      	ldr	r0, [pc, #716]	; (800f330 <_dtoa_r+0x358>)
 800f062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f064:	9006      	str	r0, [sp, #24]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d002      	beq.n	800f070 <_dtoa_r+0x98>
 800f06a:	4bb2      	ldr	r3, [pc, #712]	; (800f334 <_dtoa_r+0x35c>)
 800f06c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f06e:	6013      	str	r3, [r2, #0]
 800f070:	9806      	ldr	r0, [sp, #24]
 800f072:	b01d      	add	sp, #116	; 0x74
 800f074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f076:	2300      	movs	r3, #0
 800f078:	602b      	str	r3, [r5, #0]
 800f07a:	e7e1      	b.n	800f040 <_dtoa_r+0x68>
 800f07c:	9b08      	ldr	r3, [sp, #32]
 800f07e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f080:	9312      	str	r3, [sp, #72]	; 0x48
 800f082:	9413      	str	r4, [sp, #76]	; 0x4c
 800f084:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f086:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f088:	2200      	movs	r2, #0
 800f08a:	2300      	movs	r3, #0
 800f08c:	f7f1 f9dc 	bl	8000448 <__aeabi_dcmpeq>
 800f090:	1e04      	subs	r4, r0, #0
 800f092:	d009      	beq.n	800f0a8 <_dtoa_r+0xd0>
 800f094:	2301      	movs	r3, #1
 800f096:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	4ba7      	ldr	r3, [pc, #668]	; (800f338 <_dtoa_r+0x360>)
 800f09c:	9306      	str	r3, [sp, #24]
 800f09e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d0e5      	beq.n	800f070 <_dtoa_r+0x98>
 800f0a4:	4ba5      	ldr	r3, [pc, #660]	; (800f33c <_dtoa_r+0x364>)
 800f0a6:	e7e1      	b.n	800f06c <_dtoa_r+0x94>
 800f0a8:	ab1a      	add	r3, sp, #104	; 0x68
 800f0aa:	9301      	str	r3, [sp, #4]
 800f0ac:	ab1b      	add	r3, sp, #108	; 0x6c
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	0038      	movs	r0, r7
 800f0b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f0b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f0b6:	f001 f8fb 	bl	80102b0 <__d2b>
 800f0ba:	006e      	lsls	r6, r5, #1
 800f0bc:	9005      	str	r0, [sp, #20]
 800f0be:	0d76      	lsrs	r6, r6, #21
 800f0c0:	d100      	bne.n	800f0c4 <_dtoa_r+0xec>
 800f0c2:	e07c      	b.n	800f1be <_dtoa_r+0x1e6>
 800f0c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f0c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f0c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f0ca:	4a9d      	ldr	r2, [pc, #628]	; (800f340 <_dtoa_r+0x368>)
 800f0cc:	031b      	lsls	r3, r3, #12
 800f0ce:	0b1b      	lsrs	r3, r3, #12
 800f0d0:	431a      	orrs	r2, r3
 800f0d2:	0011      	movs	r1, r2
 800f0d4:	4b9b      	ldr	r3, [pc, #620]	; (800f344 <_dtoa_r+0x36c>)
 800f0d6:	9418      	str	r4, [sp, #96]	; 0x60
 800f0d8:	18f6      	adds	r6, r6, r3
 800f0da:	2200      	movs	r2, #0
 800f0dc:	4b9a      	ldr	r3, [pc, #616]	; (800f348 <_dtoa_r+0x370>)
 800f0de:	f7f3 fa4d 	bl	800257c <__aeabi_dsub>
 800f0e2:	4a9a      	ldr	r2, [pc, #616]	; (800f34c <_dtoa_r+0x374>)
 800f0e4:	4b9a      	ldr	r3, [pc, #616]	; (800f350 <_dtoa_r+0x378>)
 800f0e6:	f7f2 ffdd 	bl	80020a4 <__aeabi_dmul>
 800f0ea:	4a9a      	ldr	r2, [pc, #616]	; (800f354 <_dtoa_r+0x37c>)
 800f0ec:	4b9a      	ldr	r3, [pc, #616]	; (800f358 <_dtoa_r+0x380>)
 800f0ee:	f7f2 f89b 	bl	8001228 <__aeabi_dadd>
 800f0f2:	0004      	movs	r4, r0
 800f0f4:	0030      	movs	r0, r6
 800f0f6:	000d      	movs	r5, r1
 800f0f8:	f7f3 fe26 	bl	8002d48 <__aeabi_i2d>
 800f0fc:	4a97      	ldr	r2, [pc, #604]	; (800f35c <_dtoa_r+0x384>)
 800f0fe:	4b98      	ldr	r3, [pc, #608]	; (800f360 <_dtoa_r+0x388>)
 800f100:	f7f2 ffd0 	bl	80020a4 <__aeabi_dmul>
 800f104:	0002      	movs	r2, r0
 800f106:	000b      	movs	r3, r1
 800f108:	0020      	movs	r0, r4
 800f10a:	0029      	movs	r1, r5
 800f10c:	f7f2 f88c 	bl	8001228 <__aeabi_dadd>
 800f110:	0004      	movs	r4, r0
 800f112:	000d      	movs	r5, r1
 800f114:	f7f3 fde2 	bl	8002cdc <__aeabi_d2iz>
 800f118:	2200      	movs	r2, #0
 800f11a:	9002      	str	r0, [sp, #8]
 800f11c:	2300      	movs	r3, #0
 800f11e:	0020      	movs	r0, r4
 800f120:	0029      	movs	r1, r5
 800f122:	f7f1 f997 	bl	8000454 <__aeabi_dcmplt>
 800f126:	2800      	cmp	r0, #0
 800f128:	d00b      	beq.n	800f142 <_dtoa_r+0x16a>
 800f12a:	9802      	ldr	r0, [sp, #8]
 800f12c:	f7f3 fe0c 	bl	8002d48 <__aeabi_i2d>
 800f130:	002b      	movs	r3, r5
 800f132:	0022      	movs	r2, r4
 800f134:	f7f1 f988 	bl	8000448 <__aeabi_dcmpeq>
 800f138:	4243      	negs	r3, r0
 800f13a:	4158      	adcs	r0, r3
 800f13c:	9b02      	ldr	r3, [sp, #8]
 800f13e:	1a1b      	subs	r3, r3, r0
 800f140:	9302      	str	r3, [sp, #8]
 800f142:	2301      	movs	r3, #1
 800f144:	9316      	str	r3, [sp, #88]	; 0x58
 800f146:	9b02      	ldr	r3, [sp, #8]
 800f148:	2b16      	cmp	r3, #22
 800f14a:	d80f      	bhi.n	800f16c <_dtoa_r+0x194>
 800f14c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f14e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f150:	00da      	lsls	r2, r3, #3
 800f152:	4b84      	ldr	r3, [pc, #528]	; (800f364 <_dtoa_r+0x38c>)
 800f154:	189b      	adds	r3, r3, r2
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	f7f1 f97b 	bl	8000454 <__aeabi_dcmplt>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d049      	beq.n	800f1f6 <_dtoa_r+0x21e>
 800f162:	9b02      	ldr	r3, [sp, #8]
 800f164:	3b01      	subs	r3, #1
 800f166:	9302      	str	r3, [sp, #8]
 800f168:	2300      	movs	r3, #0
 800f16a:	9316      	str	r3, [sp, #88]	; 0x58
 800f16c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f16e:	1b9e      	subs	r6, r3, r6
 800f170:	2300      	movs	r3, #0
 800f172:	930a      	str	r3, [sp, #40]	; 0x28
 800f174:	0033      	movs	r3, r6
 800f176:	3b01      	subs	r3, #1
 800f178:	930d      	str	r3, [sp, #52]	; 0x34
 800f17a:	d504      	bpl.n	800f186 <_dtoa_r+0x1ae>
 800f17c:	2301      	movs	r3, #1
 800f17e:	1b9b      	subs	r3, r3, r6
 800f180:	930a      	str	r3, [sp, #40]	; 0x28
 800f182:	2300      	movs	r3, #0
 800f184:	930d      	str	r3, [sp, #52]	; 0x34
 800f186:	9b02      	ldr	r3, [sp, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	db36      	blt.n	800f1fa <_dtoa_r+0x222>
 800f18c:	9a02      	ldr	r2, [sp, #8]
 800f18e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f190:	4694      	mov	ip, r2
 800f192:	4463      	add	r3, ip
 800f194:	930d      	str	r3, [sp, #52]	; 0x34
 800f196:	2300      	movs	r3, #0
 800f198:	9215      	str	r2, [sp, #84]	; 0x54
 800f19a:	930e      	str	r3, [sp, #56]	; 0x38
 800f19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f19e:	2401      	movs	r4, #1
 800f1a0:	2b09      	cmp	r3, #9
 800f1a2:	d864      	bhi.n	800f26e <_dtoa_r+0x296>
 800f1a4:	2b05      	cmp	r3, #5
 800f1a6:	dd02      	ble.n	800f1ae <_dtoa_r+0x1d6>
 800f1a8:	2400      	movs	r4, #0
 800f1aa:	3b04      	subs	r3, #4
 800f1ac:	9322      	str	r3, [sp, #136]	; 0x88
 800f1ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1b0:	1e98      	subs	r0, r3, #2
 800f1b2:	2803      	cmp	r0, #3
 800f1b4:	d864      	bhi.n	800f280 <_dtoa_r+0x2a8>
 800f1b6:	f7f0 ffad 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f1ba:	3829      	.short	0x3829
 800f1bc:	5836      	.short	0x5836
 800f1be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f1c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f1c2:	189e      	adds	r6, r3, r2
 800f1c4:	4b68      	ldr	r3, [pc, #416]	; (800f368 <_dtoa_r+0x390>)
 800f1c6:	18f2      	adds	r2, r6, r3
 800f1c8:	2a20      	cmp	r2, #32
 800f1ca:	dd0f      	ble.n	800f1ec <_dtoa_r+0x214>
 800f1cc:	2340      	movs	r3, #64	; 0x40
 800f1ce:	1a9b      	subs	r3, r3, r2
 800f1d0:	409d      	lsls	r5, r3
 800f1d2:	4b66      	ldr	r3, [pc, #408]	; (800f36c <_dtoa_r+0x394>)
 800f1d4:	9802      	ldr	r0, [sp, #8]
 800f1d6:	18f3      	adds	r3, r6, r3
 800f1d8:	40d8      	lsrs	r0, r3
 800f1da:	4328      	orrs	r0, r5
 800f1dc:	f7f3 fde4 	bl	8002da8 <__aeabi_ui2d>
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	4c63      	ldr	r4, [pc, #396]	; (800f370 <_dtoa_r+0x398>)
 800f1e4:	3e01      	subs	r6, #1
 800f1e6:	1909      	adds	r1, r1, r4
 800f1e8:	9318      	str	r3, [sp, #96]	; 0x60
 800f1ea:	e776      	b.n	800f0da <_dtoa_r+0x102>
 800f1ec:	2320      	movs	r3, #32
 800f1ee:	9802      	ldr	r0, [sp, #8]
 800f1f0:	1a9b      	subs	r3, r3, r2
 800f1f2:	4098      	lsls	r0, r3
 800f1f4:	e7f2      	b.n	800f1dc <_dtoa_r+0x204>
 800f1f6:	9016      	str	r0, [sp, #88]	; 0x58
 800f1f8:	e7b8      	b.n	800f16c <_dtoa_r+0x194>
 800f1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1fc:	9a02      	ldr	r2, [sp, #8]
 800f1fe:	1a9b      	subs	r3, r3, r2
 800f200:	930a      	str	r3, [sp, #40]	; 0x28
 800f202:	4253      	negs	r3, r2
 800f204:	930e      	str	r3, [sp, #56]	; 0x38
 800f206:	2300      	movs	r3, #0
 800f208:	9315      	str	r3, [sp, #84]	; 0x54
 800f20a:	e7c7      	b.n	800f19c <_dtoa_r+0x1c4>
 800f20c:	2300      	movs	r3, #0
 800f20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f210:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f212:	930c      	str	r3, [sp, #48]	; 0x30
 800f214:	9307      	str	r3, [sp, #28]
 800f216:	2b00      	cmp	r3, #0
 800f218:	dc13      	bgt.n	800f242 <_dtoa_r+0x26a>
 800f21a:	2301      	movs	r3, #1
 800f21c:	001a      	movs	r2, r3
 800f21e:	930c      	str	r3, [sp, #48]	; 0x30
 800f220:	9307      	str	r3, [sp, #28]
 800f222:	9223      	str	r2, [sp, #140]	; 0x8c
 800f224:	e00d      	b.n	800f242 <_dtoa_r+0x26a>
 800f226:	2301      	movs	r3, #1
 800f228:	e7f1      	b.n	800f20e <_dtoa_r+0x236>
 800f22a:	2300      	movs	r3, #0
 800f22c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f22e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f230:	4694      	mov	ip, r2
 800f232:	9b02      	ldr	r3, [sp, #8]
 800f234:	4463      	add	r3, ip
 800f236:	930c      	str	r3, [sp, #48]	; 0x30
 800f238:	3301      	adds	r3, #1
 800f23a:	9307      	str	r3, [sp, #28]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dc00      	bgt.n	800f242 <_dtoa_r+0x26a>
 800f240:	2301      	movs	r3, #1
 800f242:	2200      	movs	r2, #0
 800f244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f246:	6042      	str	r2, [r0, #4]
 800f248:	3204      	adds	r2, #4
 800f24a:	0015      	movs	r5, r2
 800f24c:	3514      	adds	r5, #20
 800f24e:	6841      	ldr	r1, [r0, #4]
 800f250:	429d      	cmp	r5, r3
 800f252:	d919      	bls.n	800f288 <_dtoa_r+0x2b0>
 800f254:	0038      	movs	r0, r7
 800f256:	f000 fcf3 	bl	800fc40 <_Balloc>
 800f25a:	9006      	str	r0, [sp, #24]
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d117      	bne.n	800f290 <_dtoa_r+0x2b8>
 800f260:	21d5      	movs	r1, #213	; 0xd5
 800f262:	0002      	movs	r2, r0
 800f264:	4b43      	ldr	r3, [pc, #268]	; (800f374 <_dtoa_r+0x39c>)
 800f266:	0049      	lsls	r1, r1, #1
 800f268:	e6cb      	b.n	800f002 <_dtoa_r+0x2a>
 800f26a:	2301      	movs	r3, #1
 800f26c:	e7de      	b.n	800f22c <_dtoa_r+0x254>
 800f26e:	2300      	movs	r3, #0
 800f270:	940f      	str	r4, [sp, #60]	; 0x3c
 800f272:	9322      	str	r3, [sp, #136]	; 0x88
 800f274:	3b01      	subs	r3, #1
 800f276:	930c      	str	r3, [sp, #48]	; 0x30
 800f278:	9307      	str	r3, [sp, #28]
 800f27a:	2200      	movs	r2, #0
 800f27c:	3313      	adds	r3, #19
 800f27e:	e7d0      	b.n	800f222 <_dtoa_r+0x24a>
 800f280:	2301      	movs	r3, #1
 800f282:	930f      	str	r3, [sp, #60]	; 0x3c
 800f284:	3b02      	subs	r3, #2
 800f286:	e7f6      	b.n	800f276 <_dtoa_r+0x29e>
 800f288:	3101      	adds	r1, #1
 800f28a:	6041      	str	r1, [r0, #4]
 800f28c:	0052      	lsls	r2, r2, #1
 800f28e:	e7dc      	b.n	800f24a <_dtoa_r+0x272>
 800f290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f292:	9a06      	ldr	r2, [sp, #24]
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	9b07      	ldr	r3, [sp, #28]
 800f298:	2b0e      	cmp	r3, #14
 800f29a:	d900      	bls.n	800f29e <_dtoa_r+0x2c6>
 800f29c:	e0eb      	b.n	800f476 <_dtoa_r+0x49e>
 800f29e:	2c00      	cmp	r4, #0
 800f2a0:	d100      	bne.n	800f2a4 <_dtoa_r+0x2cc>
 800f2a2:	e0e8      	b.n	800f476 <_dtoa_r+0x49e>
 800f2a4:	9b02      	ldr	r3, [sp, #8]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	dd68      	ble.n	800f37c <_dtoa_r+0x3a4>
 800f2aa:	001a      	movs	r2, r3
 800f2ac:	210f      	movs	r1, #15
 800f2ae:	4b2d      	ldr	r3, [pc, #180]	; (800f364 <_dtoa_r+0x38c>)
 800f2b0:	400a      	ands	r2, r1
 800f2b2:	00d2      	lsls	r2, r2, #3
 800f2b4:	189b      	adds	r3, r3, r2
 800f2b6:	681d      	ldr	r5, [r3, #0]
 800f2b8:	685e      	ldr	r6, [r3, #4]
 800f2ba:	9b02      	ldr	r3, [sp, #8]
 800f2bc:	111c      	asrs	r4, r3, #4
 800f2be:	2302      	movs	r3, #2
 800f2c0:	9310      	str	r3, [sp, #64]	; 0x40
 800f2c2:	9b02      	ldr	r3, [sp, #8]
 800f2c4:	05db      	lsls	r3, r3, #23
 800f2c6:	d50b      	bpl.n	800f2e0 <_dtoa_r+0x308>
 800f2c8:	4b2b      	ldr	r3, [pc, #172]	; (800f378 <_dtoa_r+0x3a0>)
 800f2ca:	400c      	ands	r4, r1
 800f2cc:	6a1a      	ldr	r2, [r3, #32]
 800f2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f2d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f2d4:	f7f2 fae4 	bl	80018a0 <__aeabi_ddiv>
 800f2d8:	2303      	movs	r3, #3
 800f2da:	9008      	str	r0, [sp, #32]
 800f2dc:	9109      	str	r1, [sp, #36]	; 0x24
 800f2de:	9310      	str	r3, [sp, #64]	; 0x40
 800f2e0:	4b25      	ldr	r3, [pc, #148]	; (800f378 <_dtoa_r+0x3a0>)
 800f2e2:	9314      	str	r3, [sp, #80]	; 0x50
 800f2e4:	2c00      	cmp	r4, #0
 800f2e6:	d108      	bne.n	800f2fa <_dtoa_r+0x322>
 800f2e8:	9808      	ldr	r0, [sp, #32]
 800f2ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2ec:	002a      	movs	r2, r5
 800f2ee:	0033      	movs	r3, r6
 800f2f0:	f7f2 fad6 	bl	80018a0 <__aeabi_ddiv>
 800f2f4:	9008      	str	r0, [sp, #32]
 800f2f6:	9109      	str	r1, [sp, #36]	; 0x24
 800f2f8:	e05c      	b.n	800f3b4 <_dtoa_r+0x3dc>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	421c      	tst	r4, r3
 800f2fe:	d00b      	beq.n	800f318 <_dtoa_r+0x340>
 800f300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f302:	0028      	movs	r0, r5
 800f304:	3301      	adds	r3, #1
 800f306:	9310      	str	r3, [sp, #64]	; 0x40
 800f308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f30a:	0031      	movs	r1, r6
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	f7f2 fec8 	bl	80020a4 <__aeabi_dmul>
 800f314:	0005      	movs	r5, r0
 800f316:	000e      	movs	r6, r1
 800f318:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f31a:	1064      	asrs	r4, r4, #1
 800f31c:	3308      	adds	r3, #8
 800f31e:	e7e0      	b.n	800f2e2 <_dtoa_r+0x30a>
 800f320:	0801299d 	.word	0x0801299d
 800f324:	080129b4 	.word	0x080129b4
 800f328:	7ff00000 	.word	0x7ff00000
 800f32c:	0000270f 	.word	0x0000270f
 800f330:	08012999 	.word	0x08012999
 800f334:	0801299c 	.word	0x0801299c
 800f338:	0801296c 	.word	0x0801296c
 800f33c:	0801296d 	.word	0x0801296d
 800f340:	3ff00000 	.word	0x3ff00000
 800f344:	fffffc01 	.word	0xfffffc01
 800f348:	3ff80000 	.word	0x3ff80000
 800f34c:	636f4361 	.word	0x636f4361
 800f350:	3fd287a7 	.word	0x3fd287a7
 800f354:	8b60c8b3 	.word	0x8b60c8b3
 800f358:	3fc68a28 	.word	0x3fc68a28
 800f35c:	509f79fb 	.word	0x509f79fb
 800f360:	3fd34413 	.word	0x3fd34413
 800f364:	08012aa8 	.word	0x08012aa8
 800f368:	00000432 	.word	0x00000432
 800f36c:	00000412 	.word	0x00000412
 800f370:	fe100000 	.word	0xfe100000
 800f374:	08012a0f 	.word	0x08012a0f
 800f378:	08012a80 	.word	0x08012a80
 800f37c:	2302      	movs	r3, #2
 800f37e:	9310      	str	r3, [sp, #64]	; 0x40
 800f380:	9b02      	ldr	r3, [sp, #8]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d016      	beq.n	800f3b4 <_dtoa_r+0x3dc>
 800f386:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f388:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f38a:	425c      	negs	r4, r3
 800f38c:	230f      	movs	r3, #15
 800f38e:	4ab6      	ldr	r2, [pc, #728]	; (800f668 <_dtoa_r+0x690>)
 800f390:	4023      	ands	r3, r4
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	18d3      	adds	r3, r2, r3
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	f7f2 fe83 	bl	80020a4 <__aeabi_dmul>
 800f39e:	2601      	movs	r6, #1
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9008      	str	r0, [sp, #32]
 800f3a4:	9109      	str	r1, [sp, #36]	; 0x24
 800f3a6:	4db1      	ldr	r5, [pc, #708]	; (800f66c <_dtoa_r+0x694>)
 800f3a8:	1124      	asrs	r4, r4, #4
 800f3aa:	2c00      	cmp	r4, #0
 800f3ac:	d000      	beq.n	800f3b0 <_dtoa_r+0x3d8>
 800f3ae:	e094      	b.n	800f4da <_dtoa_r+0x502>
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d19f      	bne.n	800f2f4 <_dtoa_r+0x31c>
 800f3b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d100      	bne.n	800f3bc <_dtoa_r+0x3e4>
 800f3ba:	e09b      	b.n	800f4f4 <_dtoa_r+0x51c>
 800f3bc:	9c08      	ldr	r4, [sp, #32]
 800f3be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	0020      	movs	r0, r4
 800f3c4:	0029      	movs	r1, r5
 800f3c6:	4baa      	ldr	r3, [pc, #680]	; (800f670 <_dtoa_r+0x698>)
 800f3c8:	f7f1 f844 	bl	8000454 <__aeabi_dcmplt>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d100      	bne.n	800f3d2 <_dtoa_r+0x3fa>
 800f3d0:	e090      	b.n	800f4f4 <_dtoa_r+0x51c>
 800f3d2:	9b07      	ldr	r3, [sp, #28]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d100      	bne.n	800f3da <_dtoa_r+0x402>
 800f3d8:	e08c      	b.n	800f4f4 <_dtoa_r+0x51c>
 800f3da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dd46      	ble.n	800f46e <_dtoa_r+0x496>
 800f3e0:	9b02      	ldr	r3, [sp, #8]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	0020      	movs	r0, r4
 800f3e6:	0029      	movs	r1, r5
 800f3e8:	1e5e      	subs	r6, r3, #1
 800f3ea:	4ba2      	ldr	r3, [pc, #648]	; (800f674 <_dtoa_r+0x69c>)
 800f3ec:	f7f2 fe5a 	bl	80020a4 <__aeabi_dmul>
 800f3f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3f2:	9008      	str	r0, [sp, #32]
 800f3f4:	9109      	str	r1, [sp, #36]	; 0x24
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	9310      	str	r3, [sp, #64]	; 0x40
 800f3fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f3fe:	9c08      	ldr	r4, [sp, #32]
 800f400:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f402:	9314      	str	r3, [sp, #80]	; 0x50
 800f404:	f7f3 fca0 	bl	8002d48 <__aeabi_i2d>
 800f408:	0022      	movs	r2, r4
 800f40a:	002b      	movs	r3, r5
 800f40c:	f7f2 fe4a 	bl	80020a4 <__aeabi_dmul>
 800f410:	2200      	movs	r2, #0
 800f412:	4b99      	ldr	r3, [pc, #612]	; (800f678 <_dtoa_r+0x6a0>)
 800f414:	f7f1 ff08 	bl	8001228 <__aeabi_dadd>
 800f418:	9010      	str	r0, [sp, #64]	; 0x40
 800f41a:	9111      	str	r1, [sp, #68]	; 0x44
 800f41c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f420:	9208      	str	r2, [sp, #32]
 800f422:	9309      	str	r3, [sp, #36]	; 0x24
 800f424:	4a95      	ldr	r2, [pc, #596]	; (800f67c <_dtoa_r+0x6a4>)
 800f426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f428:	4694      	mov	ip, r2
 800f42a:	4463      	add	r3, ip
 800f42c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f42e:	9309      	str	r3, [sp, #36]	; 0x24
 800f430:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f432:	2b00      	cmp	r3, #0
 800f434:	d161      	bne.n	800f4fa <_dtoa_r+0x522>
 800f436:	2200      	movs	r2, #0
 800f438:	0020      	movs	r0, r4
 800f43a:	0029      	movs	r1, r5
 800f43c:	4b90      	ldr	r3, [pc, #576]	; (800f680 <_dtoa_r+0x6a8>)
 800f43e:	f7f3 f89d 	bl	800257c <__aeabi_dsub>
 800f442:	9a08      	ldr	r2, [sp, #32]
 800f444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f446:	0004      	movs	r4, r0
 800f448:	000d      	movs	r5, r1
 800f44a:	f7f1 f817 	bl	800047c <__aeabi_dcmpgt>
 800f44e:	2800      	cmp	r0, #0
 800f450:	d000      	beq.n	800f454 <_dtoa_r+0x47c>
 800f452:	e2af      	b.n	800f9b4 <_dtoa_r+0x9dc>
 800f454:	488b      	ldr	r0, [pc, #556]	; (800f684 <_dtoa_r+0x6ac>)
 800f456:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f458:	4684      	mov	ip, r0
 800f45a:	4461      	add	r1, ip
 800f45c:	000b      	movs	r3, r1
 800f45e:	0020      	movs	r0, r4
 800f460:	0029      	movs	r1, r5
 800f462:	9a08      	ldr	r2, [sp, #32]
 800f464:	f7f0 fff6 	bl	8000454 <__aeabi_dcmplt>
 800f468:	2800      	cmp	r0, #0
 800f46a:	d000      	beq.n	800f46e <_dtoa_r+0x496>
 800f46c:	e29f      	b.n	800f9ae <_dtoa_r+0x9d6>
 800f46e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f470:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f472:	9308      	str	r3, [sp, #32]
 800f474:	9409      	str	r4, [sp, #36]	; 0x24
 800f476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f478:	2b00      	cmp	r3, #0
 800f47a:	da00      	bge.n	800f47e <_dtoa_r+0x4a6>
 800f47c:	e172      	b.n	800f764 <_dtoa_r+0x78c>
 800f47e:	9a02      	ldr	r2, [sp, #8]
 800f480:	2a0e      	cmp	r2, #14
 800f482:	dd00      	ble.n	800f486 <_dtoa_r+0x4ae>
 800f484:	e16e      	b.n	800f764 <_dtoa_r+0x78c>
 800f486:	4b78      	ldr	r3, [pc, #480]	; (800f668 <_dtoa_r+0x690>)
 800f488:	00d2      	lsls	r2, r2, #3
 800f48a:	189b      	adds	r3, r3, r2
 800f48c:	685c      	ldr	r4, [r3, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	930a      	str	r3, [sp, #40]	; 0x28
 800f492:	940b      	str	r4, [sp, #44]	; 0x2c
 800f494:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f496:	2b00      	cmp	r3, #0
 800f498:	db00      	blt.n	800f49c <_dtoa_r+0x4c4>
 800f49a:	e0f7      	b.n	800f68c <_dtoa_r+0x6b4>
 800f49c:	9b07      	ldr	r3, [sp, #28]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	dd00      	ble.n	800f4a4 <_dtoa_r+0x4cc>
 800f4a2:	e0f3      	b.n	800f68c <_dtoa_r+0x6b4>
 800f4a4:	d000      	beq.n	800f4a8 <_dtoa_r+0x4d0>
 800f4a6:	e282      	b.n	800f9ae <_dtoa_r+0x9d6>
 800f4a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f4aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	4b74      	ldr	r3, [pc, #464]	; (800f680 <_dtoa_r+0x6a8>)
 800f4b0:	f7f2 fdf8 	bl	80020a4 <__aeabi_dmul>
 800f4b4:	9a08      	ldr	r2, [sp, #32]
 800f4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4b8:	f7f0 ffea 	bl	8000490 <__aeabi_dcmpge>
 800f4bc:	9e07      	ldr	r6, [sp, #28]
 800f4be:	0035      	movs	r5, r6
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d000      	beq.n	800f4c6 <_dtoa_r+0x4ee>
 800f4c4:	e259      	b.n	800f97a <_dtoa_r+0x9a2>
 800f4c6:	9b06      	ldr	r3, [sp, #24]
 800f4c8:	9a06      	ldr	r2, [sp, #24]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	9308      	str	r3, [sp, #32]
 800f4ce:	2331      	movs	r3, #49	; 0x31
 800f4d0:	7013      	strb	r3, [r2, #0]
 800f4d2:	9b02      	ldr	r3, [sp, #8]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	9302      	str	r3, [sp, #8]
 800f4d8:	e254      	b.n	800f984 <_dtoa_r+0x9ac>
 800f4da:	4234      	tst	r4, r6
 800f4dc:	d007      	beq.n	800f4ee <_dtoa_r+0x516>
 800f4de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	9310      	str	r3, [sp, #64]	; 0x40
 800f4e4:	682a      	ldr	r2, [r5, #0]
 800f4e6:	686b      	ldr	r3, [r5, #4]
 800f4e8:	f7f2 fddc 	bl	80020a4 <__aeabi_dmul>
 800f4ec:	0033      	movs	r3, r6
 800f4ee:	1064      	asrs	r4, r4, #1
 800f4f0:	3508      	adds	r5, #8
 800f4f2:	e75a      	b.n	800f3aa <_dtoa_r+0x3d2>
 800f4f4:	9e02      	ldr	r6, [sp, #8]
 800f4f6:	9b07      	ldr	r3, [sp, #28]
 800f4f8:	e780      	b.n	800f3fc <_dtoa_r+0x424>
 800f4fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f4fe:	1e5a      	subs	r2, r3, #1
 800f500:	4b59      	ldr	r3, [pc, #356]	; (800f668 <_dtoa_r+0x690>)
 800f502:	00d2      	lsls	r2, r2, #3
 800f504:	189b      	adds	r3, r3, r2
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	2900      	cmp	r1, #0
 800f50c:	d051      	beq.n	800f5b2 <_dtoa_r+0x5da>
 800f50e:	2000      	movs	r0, #0
 800f510:	495d      	ldr	r1, [pc, #372]	; (800f688 <_dtoa_r+0x6b0>)
 800f512:	f7f2 f9c5 	bl	80018a0 <__aeabi_ddiv>
 800f516:	9a08      	ldr	r2, [sp, #32]
 800f518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f51a:	f7f3 f82f 	bl	800257c <__aeabi_dsub>
 800f51e:	9a06      	ldr	r2, [sp, #24]
 800f520:	9b06      	ldr	r3, [sp, #24]
 800f522:	4694      	mov	ip, r2
 800f524:	9317      	str	r3, [sp, #92]	; 0x5c
 800f526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f528:	9010      	str	r0, [sp, #64]	; 0x40
 800f52a:	9111      	str	r1, [sp, #68]	; 0x44
 800f52c:	4463      	add	r3, ip
 800f52e:	9319      	str	r3, [sp, #100]	; 0x64
 800f530:	0029      	movs	r1, r5
 800f532:	0020      	movs	r0, r4
 800f534:	f7f3 fbd2 	bl	8002cdc <__aeabi_d2iz>
 800f538:	9014      	str	r0, [sp, #80]	; 0x50
 800f53a:	f7f3 fc05 	bl	8002d48 <__aeabi_i2d>
 800f53e:	0002      	movs	r2, r0
 800f540:	000b      	movs	r3, r1
 800f542:	0020      	movs	r0, r4
 800f544:	0029      	movs	r1, r5
 800f546:	f7f3 f819 	bl	800257c <__aeabi_dsub>
 800f54a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f54c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f54e:	3301      	adds	r3, #1
 800f550:	9308      	str	r3, [sp, #32]
 800f552:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f554:	0004      	movs	r4, r0
 800f556:	3330      	adds	r3, #48	; 0x30
 800f558:	7013      	strb	r3, [r2, #0]
 800f55a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f55c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f55e:	000d      	movs	r5, r1
 800f560:	f7f0 ff78 	bl	8000454 <__aeabi_dcmplt>
 800f564:	2800      	cmp	r0, #0
 800f566:	d175      	bne.n	800f654 <_dtoa_r+0x67c>
 800f568:	0022      	movs	r2, r4
 800f56a:	002b      	movs	r3, r5
 800f56c:	2000      	movs	r0, #0
 800f56e:	4940      	ldr	r1, [pc, #256]	; (800f670 <_dtoa_r+0x698>)
 800f570:	f7f3 f804 	bl	800257c <__aeabi_dsub>
 800f574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f578:	f7f0 ff6c 	bl	8000454 <__aeabi_dcmplt>
 800f57c:	2800      	cmp	r0, #0
 800f57e:	d000      	beq.n	800f582 <_dtoa_r+0x5aa>
 800f580:	e0d2      	b.n	800f728 <_dtoa_r+0x750>
 800f582:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f584:	9a08      	ldr	r2, [sp, #32]
 800f586:	4293      	cmp	r3, r2
 800f588:	d100      	bne.n	800f58c <_dtoa_r+0x5b4>
 800f58a:	e770      	b.n	800f46e <_dtoa_r+0x496>
 800f58c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f58e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f590:	2200      	movs	r2, #0
 800f592:	4b38      	ldr	r3, [pc, #224]	; (800f674 <_dtoa_r+0x69c>)
 800f594:	f7f2 fd86 	bl	80020a4 <__aeabi_dmul>
 800f598:	4b36      	ldr	r3, [pc, #216]	; (800f674 <_dtoa_r+0x69c>)
 800f59a:	9010      	str	r0, [sp, #64]	; 0x40
 800f59c:	9111      	str	r1, [sp, #68]	; 0x44
 800f59e:	2200      	movs	r2, #0
 800f5a0:	0020      	movs	r0, r4
 800f5a2:	0029      	movs	r1, r5
 800f5a4:	f7f2 fd7e 	bl	80020a4 <__aeabi_dmul>
 800f5a8:	9b08      	ldr	r3, [sp, #32]
 800f5aa:	0004      	movs	r4, r0
 800f5ac:	000d      	movs	r5, r1
 800f5ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800f5b0:	e7be      	b.n	800f530 <_dtoa_r+0x558>
 800f5b2:	9808      	ldr	r0, [sp, #32]
 800f5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5b6:	f7f2 fd75 	bl	80020a4 <__aeabi_dmul>
 800f5ba:	9a06      	ldr	r2, [sp, #24]
 800f5bc:	9b06      	ldr	r3, [sp, #24]
 800f5be:	4694      	mov	ip, r2
 800f5c0:	9308      	str	r3, [sp, #32]
 800f5c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5c4:	9010      	str	r0, [sp, #64]	; 0x40
 800f5c6:	9111      	str	r1, [sp, #68]	; 0x44
 800f5c8:	4463      	add	r3, ip
 800f5ca:	9319      	str	r3, [sp, #100]	; 0x64
 800f5cc:	0029      	movs	r1, r5
 800f5ce:	0020      	movs	r0, r4
 800f5d0:	f7f3 fb84 	bl	8002cdc <__aeabi_d2iz>
 800f5d4:	9017      	str	r0, [sp, #92]	; 0x5c
 800f5d6:	f7f3 fbb7 	bl	8002d48 <__aeabi_i2d>
 800f5da:	0002      	movs	r2, r0
 800f5dc:	000b      	movs	r3, r1
 800f5de:	0020      	movs	r0, r4
 800f5e0:	0029      	movs	r1, r5
 800f5e2:	f7f2 ffcb 	bl	800257c <__aeabi_dsub>
 800f5e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5e8:	9a08      	ldr	r2, [sp, #32]
 800f5ea:	3330      	adds	r3, #48	; 0x30
 800f5ec:	7013      	strb	r3, [r2, #0]
 800f5ee:	0013      	movs	r3, r2
 800f5f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	0004      	movs	r4, r0
 800f5f6:	000d      	movs	r5, r1
 800f5f8:	9308      	str	r3, [sp, #32]
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d12c      	bne.n	800f658 <_dtoa_r+0x680>
 800f5fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f600:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f602:	9a06      	ldr	r2, [sp, #24]
 800f604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f606:	4694      	mov	ip, r2
 800f608:	4463      	add	r3, ip
 800f60a:	2200      	movs	r2, #0
 800f60c:	9308      	str	r3, [sp, #32]
 800f60e:	4b1e      	ldr	r3, [pc, #120]	; (800f688 <_dtoa_r+0x6b0>)
 800f610:	f7f1 fe0a 	bl	8001228 <__aeabi_dadd>
 800f614:	0002      	movs	r2, r0
 800f616:	000b      	movs	r3, r1
 800f618:	0020      	movs	r0, r4
 800f61a:	0029      	movs	r1, r5
 800f61c:	f7f0 ff2e 	bl	800047c <__aeabi_dcmpgt>
 800f620:	2800      	cmp	r0, #0
 800f622:	d000      	beq.n	800f626 <_dtoa_r+0x64e>
 800f624:	e080      	b.n	800f728 <_dtoa_r+0x750>
 800f626:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f62a:	2000      	movs	r0, #0
 800f62c:	4916      	ldr	r1, [pc, #88]	; (800f688 <_dtoa_r+0x6b0>)
 800f62e:	f7f2 ffa5 	bl	800257c <__aeabi_dsub>
 800f632:	0002      	movs	r2, r0
 800f634:	000b      	movs	r3, r1
 800f636:	0020      	movs	r0, r4
 800f638:	0029      	movs	r1, r5
 800f63a:	f7f0 ff0b 	bl	8000454 <__aeabi_dcmplt>
 800f63e:	2800      	cmp	r0, #0
 800f640:	d100      	bne.n	800f644 <_dtoa_r+0x66c>
 800f642:	e714      	b.n	800f46e <_dtoa_r+0x496>
 800f644:	9b08      	ldr	r3, [sp, #32]
 800f646:	001a      	movs	r2, r3
 800f648:	3a01      	subs	r2, #1
 800f64a:	9208      	str	r2, [sp, #32]
 800f64c:	7812      	ldrb	r2, [r2, #0]
 800f64e:	2a30      	cmp	r2, #48	; 0x30
 800f650:	d0f8      	beq.n	800f644 <_dtoa_r+0x66c>
 800f652:	9308      	str	r3, [sp, #32]
 800f654:	9602      	str	r6, [sp, #8]
 800f656:	e055      	b.n	800f704 <_dtoa_r+0x72c>
 800f658:	2200      	movs	r2, #0
 800f65a:	4b06      	ldr	r3, [pc, #24]	; (800f674 <_dtoa_r+0x69c>)
 800f65c:	f7f2 fd22 	bl	80020a4 <__aeabi_dmul>
 800f660:	0004      	movs	r4, r0
 800f662:	000d      	movs	r5, r1
 800f664:	e7b2      	b.n	800f5cc <_dtoa_r+0x5f4>
 800f666:	46c0      	nop			; (mov r8, r8)
 800f668:	08012aa8 	.word	0x08012aa8
 800f66c:	08012a80 	.word	0x08012a80
 800f670:	3ff00000 	.word	0x3ff00000
 800f674:	40240000 	.word	0x40240000
 800f678:	401c0000 	.word	0x401c0000
 800f67c:	fcc00000 	.word	0xfcc00000
 800f680:	40140000 	.word	0x40140000
 800f684:	7cc00000 	.word	0x7cc00000
 800f688:	3fe00000 	.word	0x3fe00000
 800f68c:	9b07      	ldr	r3, [sp, #28]
 800f68e:	9e06      	ldr	r6, [sp, #24]
 800f690:	3b01      	subs	r3, #1
 800f692:	199b      	adds	r3, r3, r6
 800f694:	930c      	str	r3, [sp, #48]	; 0x30
 800f696:	9c08      	ldr	r4, [sp, #32]
 800f698:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f69a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f69e:	0020      	movs	r0, r4
 800f6a0:	0029      	movs	r1, r5
 800f6a2:	f7f2 f8fd 	bl	80018a0 <__aeabi_ddiv>
 800f6a6:	f7f3 fb19 	bl	8002cdc <__aeabi_d2iz>
 800f6aa:	9007      	str	r0, [sp, #28]
 800f6ac:	f7f3 fb4c 	bl	8002d48 <__aeabi_i2d>
 800f6b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6b4:	f7f2 fcf6 	bl	80020a4 <__aeabi_dmul>
 800f6b8:	0002      	movs	r2, r0
 800f6ba:	000b      	movs	r3, r1
 800f6bc:	0020      	movs	r0, r4
 800f6be:	0029      	movs	r1, r5
 800f6c0:	f7f2 ff5c 	bl	800257c <__aeabi_dsub>
 800f6c4:	0033      	movs	r3, r6
 800f6c6:	9a07      	ldr	r2, [sp, #28]
 800f6c8:	3601      	adds	r6, #1
 800f6ca:	3230      	adds	r2, #48	; 0x30
 800f6cc:	701a      	strb	r2, [r3, #0]
 800f6ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6d0:	9608      	str	r6, [sp, #32]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d139      	bne.n	800f74a <_dtoa_r+0x772>
 800f6d6:	0002      	movs	r2, r0
 800f6d8:	000b      	movs	r3, r1
 800f6da:	f7f1 fda5 	bl	8001228 <__aeabi_dadd>
 800f6de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6e2:	0004      	movs	r4, r0
 800f6e4:	000d      	movs	r5, r1
 800f6e6:	f7f0 fec9 	bl	800047c <__aeabi_dcmpgt>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d11b      	bne.n	800f726 <_dtoa_r+0x74e>
 800f6ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6f2:	0020      	movs	r0, r4
 800f6f4:	0029      	movs	r1, r5
 800f6f6:	f7f0 fea7 	bl	8000448 <__aeabi_dcmpeq>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d002      	beq.n	800f704 <_dtoa_r+0x72c>
 800f6fe:	9b07      	ldr	r3, [sp, #28]
 800f700:	07db      	lsls	r3, r3, #31
 800f702:	d410      	bmi.n	800f726 <_dtoa_r+0x74e>
 800f704:	0038      	movs	r0, r7
 800f706:	9905      	ldr	r1, [sp, #20]
 800f708:	f000 fade 	bl	800fcc8 <_Bfree>
 800f70c:	2300      	movs	r3, #0
 800f70e:	9a08      	ldr	r2, [sp, #32]
 800f710:	9802      	ldr	r0, [sp, #8]
 800f712:	7013      	strb	r3, [r2, #0]
 800f714:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f716:	3001      	adds	r0, #1
 800f718:	6018      	str	r0, [r3, #0]
 800f71a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d100      	bne.n	800f722 <_dtoa_r+0x74a>
 800f720:	e4a6      	b.n	800f070 <_dtoa_r+0x98>
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	e4a4      	b.n	800f070 <_dtoa_r+0x98>
 800f726:	9e02      	ldr	r6, [sp, #8]
 800f728:	9b08      	ldr	r3, [sp, #32]
 800f72a:	9308      	str	r3, [sp, #32]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	781a      	ldrb	r2, [r3, #0]
 800f730:	2a39      	cmp	r2, #57	; 0x39
 800f732:	d106      	bne.n	800f742 <_dtoa_r+0x76a>
 800f734:	9a06      	ldr	r2, [sp, #24]
 800f736:	429a      	cmp	r2, r3
 800f738:	d1f7      	bne.n	800f72a <_dtoa_r+0x752>
 800f73a:	2230      	movs	r2, #48	; 0x30
 800f73c:	9906      	ldr	r1, [sp, #24]
 800f73e:	3601      	adds	r6, #1
 800f740:	700a      	strb	r2, [r1, #0]
 800f742:	781a      	ldrb	r2, [r3, #0]
 800f744:	3201      	adds	r2, #1
 800f746:	701a      	strb	r2, [r3, #0]
 800f748:	e784      	b.n	800f654 <_dtoa_r+0x67c>
 800f74a:	2200      	movs	r2, #0
 800f74c:	4baa      	ldr	r3, [pc, #680]	; (800f9f8 <_dtoa_r+0xa20>)
 800f74e:	f7f2 fca9 	bl	80020a4 <__aeabi_dmul>
 800f752:	2200      	movs	r2, #0
 800f754:	2300      	movs	r3, #0
 800f756:	0004      	movs	r4, r0
 800f758:	000d      	movs	r5, r1
 800f75a:	f7f0 fe75 	bl	8000448 <__aeabi_dcmpeq>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d09b      	beq.n	800f69a <_dtoa_r+0x6c2>
 800f762:	e7cf      	b.n	800f704 <_dtoa_r+0x72c>
 800f764:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f766:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f768:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f76a:	2d00      	cmp	r5, #0
 800f76c:	d012      	beq.n	800f794 <_dtoa_r+0x7bc>
 800f76e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f770:	2a01      	cmp	r2, #1
 800f772:	dc66      	bgt.n	800f842 <_dtoa_r+0x86a>
 800f774:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f776:	2a00      	cmp	r2, #0
 800f778:	d05d      	beq.n	800f836 <_dtoa_r+0x85e>
 800f77a:	4aa0      	ldr	r2, [pc, #640]	; (800f9fc <_dtoa_r+0xa24>)
 800f77c:	189b      	adds	r3, r3, r2
 800f77e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f780:	2101      	movs	r1, #1
 800f782:	18d2      	adds	r2, r2, r3
 800f784:	920a      	str	r2, [sp, #40]	; 0x28
 800f786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f788:	0038      	movs	r0, r7
 800f78a:	18d3      	adds	r3, r2, r3
 800f78c:	930d      	str	r3, [sp, #52]	; 0x34
 800f78e:	f000 fb4b 	bl	800fe28 <__i2b>
 800f792:	0005      	movs	r5, r0
 800f794:	2c00      	cmp	r4, #0
 800f796:	dd0e      	ble.n	800f7b6 <_dtoa_r+0x7de>
 800f798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	dd0b      	ble.n	800f7b6 <_dtoa_r+0x7de>
 800f79e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7a0:	0023      	movs	r3, r4
 800f7a2:	4294      	cmp	r4, r2
 800f7a4:	dd00      	ble.n	800f7a8 <_dtoa_r+0x7d0>
 800f7a6:	0013      	movs	r3, r2
 800f7a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7aa:	1ae4      	subs	r4, r4, r3
 800f7ac:	1ad2      	subs	r2, r2, r3
 800f7ae:	920a      	str	r2, [sp, #40]	; 0x28
 800f7b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7b2:	1ad3      	subs	r3, r2, r3
 800f7b4:	930d      	str	r3, [sp, #52]	; 0x34
 800f7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d01f      	beq.n	800f7fc <_dtoa_r+0x824>
 800f7bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d054      	beq.n	800f86c <_dtoa_r+0x894>
 800f7c2:	2e00      	cmp	r6, #0
 800f7c4:	dd11      	ble.n	800f7ea <_dtoa_r+0x812>
 800f7c6:	0029      	movs	r1, r5
 800f7c8:	0032      	movs	r2, r6
 800f7ca:	0038      	movs	r0, r7
 800f7cc:	f000 fbf2 	bl	800ffb4 <__pow5mult>
 800f7d0:	9a05      	ldr	r2, [sp, #20]
 800f7d2:	0001      	movs	r1, r0
 800f7d4:	0005      	movs	r5, r0
 800f7d6:	0038      	movs	r0, r7
 800f7d8:	f000 fb3c 	bl	800fe54 <__multiply>
 800f7dc:	9905      	ldr	r1, [sp, #20]
 800f7de:	9014      	str	r0, [sp, #80]	; 0x50
 800f7e0:	0038      	movs	r0, r7
 800f7e2:	f000 fa71 	bl	800fcc8 <_Bfree>
 800f7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7e8:	9305      	str	r3, [sp, #20]
 800f7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7ec:	1b9a      	subs	r2, r3, r6
 800f7ee:	42b3      	cmp	r3, r6
 800f7f0:	d004      	beq.n	800f7fc <_dtoa_r+0x824>
 800f7f2:	0038      	movs	r0, r7
 800f7f4:	9905      	ldr	r1, [sp, #20]
 800f7f6:	f000 fbdd 	bl	800ffb4 <__pow5mult>
 800f7fa:	9005      	str	r0, [sp, #20]
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	0038      	movs	r0, r7
 800f800:	f000 fb12 	bl	800fe28 <__i2b>
 800f804:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f806:	0006      	movs	r6, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	dd31      	ble.n	800f870 <_dtoa_r+0x898>
 800f80c:	001a      	movs	r2, r3
 800f80e:	0001      	movs	r1, r0
 800f810:	0038      	movs	r0, r7
 800f812:	f000 fbcf 	bl	800ffb4 <__pow5mult>
 800f816:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f818:	0006      	movs	r6, r0
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	dd2d      	ble.n	800f87a <_dtoa_r+0x8a2>
 800f81e:	2300      	movs	r3, #0
 800f820:	930e      	str	r3, [sp, #56]	; 0x38
 800f822:	6933      	ldr	r3, [r6, #16]
 800f824:	3303      	adds	r3, #3
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	18f3      	adds	r3, r6, r3
 800f82a:	6858      	ldr	r0, [r3, #4]
 800f82c:	f000 fab4 	bl	800fd98 <__hi0bits>
 800f830:	2320      	movs	r3, #32
 800f832:	1a18      	subs	r0, r3, r0
 800f834:	e039      	b.n	800f8aa <_dtoa_r+0x8d2>
 800f836:	2336      	movs	r3, #54	; 0x36
 800f838:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f83a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f83c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f83e:	1a9b      	subs	r3, r3, r2
 800f840:	e79d      	b.n	800f77e <_dtoa_r+0x7a6>
 800f842:	9b07      	ldr	r3, [sp, #28]
 800f844:	1e5e      	subs	r6, r3, #1
 800f846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f848:	42b3      	cmp	r3, r6
 800f84a:	db07      	blt.n	800f85c <_dtoa_r+0x884>
 800f84c:	1b9e      	subs	r6, r3, r6
 800f84e:	9b07      	ldr	r3, [sp, #28]
 800f850:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f852:	2b00      	cmp	r3, #0
 800f854:	da93      	bge.n	800f77e <_dtoa_r+0x7a6>
 800f856:	1ae4      	subs	r4, r4, r3
 800f858:	2300      	movs	r3, #0
 800f85a:	e790      	b.n	800f77e <_dtoa_r+0x7a6>
 800f85c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f85e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f860:	1af3      	subs	r3, r6, r3
 800f862:	18d3      	adds	r3, r2, r3
 800f864:	960e      	str	r6, [sp, #56]	; 0x38
 800f866:	9315      	str	r3, [sp, #84]	; 0x54
 800f868:	2600      	movs	r6, #0
 800f86a:	e7f0      	b.n	800f84e <_dtoa_r+0x876>
 800f86c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f86e:	e7c0      	b.n	800f7f2 <_dtoa_r+0x81a>
 800f870:	2300      	movs	r3, #0
 800f872:	930e      	str	r3, [sp, #56]	; 0x38
 800f874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f876:	2b01      	cmp	r3, #1
 800f878:	dc13      	bgt.n	800f8a2 <_dtoa_r+0x8ca>
 800f87a:	2300      	movs	r3, #0
 800f87c:	930e      	str	r3, [sp, #56]	; 0x38
 800f87e:	9b08      	ldr	r3, [sp, #32]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10e      	bne.n	800f8a2 <_dtoa_r+0x8ca>
 800f884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f886:	031b      	lsls	r3, r3, #12
 800f888:	d10b      	bne.n	800f8a2 <_dtoa_r+0x8ca>
 800f88a:	4b5d      	ldr	r3, [pc, #372]	; (800fa00 <_dtoa_r+0xa28>)
 800f88c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f88e:	4213      	tst	r3, r2
 800f890:	d007      	beq.n	800f8a2 <_dtoa_r+0x8ca>
 800f892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f894:	3301      	adds	r3, #1
 800f896:	930a      	str	r3, [sp, #40]	; 0x28
 800f898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f89a:	3301      	adds	r3, #1
 800f89c:	930d      	str	r3, [sp, #52]	; 0x34
 800f89e:	2301      	movs	r3, #1
 800f8a0:	930e      	str	r3, [sp, #56]	; 0x38
 800f8a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1bb      	bne.n	800f822 <_dtoa_r+0x84a>
 800f8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8ac:	221f      	movs	r2, #31
 800f8ae:	1818      	adds	r0, r3, r0
 800f8b0:	0003      	movs	r3, r0
 800f8b2:	4013      	ands	r3, r2
 800f8b4:	4210      	tst	r0, r2
 800f8b6:	d046      	beq.n	800f946 <_dtoa_r+0x96e>
 800f8b8:	3201      	adds	r2, #1
 800f8ba:	1ad2      	subs	r2, r2, r3
 800f8bc:	2a04      	cmp	r2, #4
 800f8be:	dd3f      	ble.n	800f940 <_dtoa_r+0x968>
 800f8c0:	221c      	movs	r2, #28
 800f8c2:	1ad3      	subs	r3, r2, r3
 800f8c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8c6:	18e4      	adds	r4, r4, r3
 800f8c8:	18d2      	adds	r2, r2, r3
 800f8ca:	920a      	str	r2, [sp, #40]	; 0x28
 800f8cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8ce:	18d3      	adds	r3, r2, r3
 800f8d0:	930d      	str	r3, [sp, #52]	; 0x34
 800f8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	dd05      	ble.n	800f8e4 <_dtoa_r+0x90c>
 800f8d8:	001a      	movs	r2, r3
 800f8da:	0038      	movs	r0, r7
 800f8dc:	9905      	ldr	r1, [sp, #20]
 800f8de:	f000 fbc5 	bl	801006c <__lshift>
 800f8e2:	9005      	str	r0, [sp, #20]
 800f8e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	dd05      	ble.n	800f8f6 <_dtoa_r+0x91e>
 800f8ea:	0031      	movs	r1, r6
 800f8ec:	001a      	movs	r2, r3
 800f8ee:	0038      	movs	r0, r7
 800f8f0:	f000 fbbc 	bl	801006c <__lshift>
 800f8f4:	0006      	movs	r6, r0
 800f8f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d026      	beq.n	800f94a <_dtoa_r+0x972>
 800f8fc:	0031      	movs	r1, r6
 800f8fe:	9805      	ldr	r0, [sp, #20]
 800f900:	f000 fc22 	bl	8010148 <__mcmp>
 800f904:	2800      	cmp	r0, #0
 800f906:	da20      	bge.n	800f94a <_dtoa_r+0x972>
 800f908:	9b02      	ldr	r3, [sp, #8]
 800f90a:	220a      	movs	r2, #10
 800f90c:	3b01      	subs	r3, #1
 800f90e:	9302      	str	r3, [sp, #8]
 800f910:	0038      	movs	r0, r7
 800f912:	2300      	movs	r3, #0
 800f914:	9905      	ldr	r1, [sp, #20]
 800f916:	f000 f9fb 	bl	800fd10 <__multadd>
 800f91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f91c:	9005      	str	r0, [sp, #20]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d100      	bne.n	800f924 <_dtoa_r+0x94c>
 800f922:	e166      	b.n	800fbf2 <_dtoa_r+0xc1a>
 800f924:	2300      	movs	r3, #0
 800f926:	0029      	movs	r1, r5
 800f928:	220a      	movs	r2, #10
 800f92a:	0038      	movs	r0, r7
 800f92c:	f000 f9f0 	bl	800fd10 <__multadd>
 800f930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f932:	0005      	movs	r5, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	dc47      	bgt.n	800f9c8 <_dtoa_r+0x9f0>
 800f938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	dc0d      	bgt.n	800f95a <_dtoa_r+0x982>
 800f93e:	e043      	b.n	800f9c8 <_dtoa_r+0x9f0>
 800f940:	2a04      	cmp	r2, #4
 800f942:	d0c6      	beq.n	800f8d2 <_dtoa_r+0x8fa>
 800f944:	0013      	movs	r3, r2
 800f946:	331c      	adds	r3, #28
 800f948:	e7bc      	b.n	800f8c4 <_dtoa_r+0x8ec>
 800f94a:	9b07      	ldr	r3, [sp, #28]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dc35      	bgt.n	800f9bc <_dtoa_r+0x9e4>
 800f950:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f952:	2b02      	cmp	r3, #2
 800f954:	dd32      	ble.n	800f9bc <_dtoa_r+0x9e4>
 800f956:	9b07      	ldr	r3, [sp, #28]
 800f958:	930c      	str	r3, [sp, #48]	; 0x30
 800f95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10c      	bne.n	800f97a <_dtoa_r+0x9a2>
 800f960:	0031      	movs	r1, r6
 800f962:	2205      	movs	r2, #5
 800f964:	0038      	movs	r0, r7
 800f966:	f000 f9d3 	bl	800fd10 <__multadd>
 800f96a:	0006      	movs	r6, r0
 800f96c:	0001      	movs	r1, r0
 800f96e:	9805      	ldr	r0, [sp, #20]
 800f970:	f000 fbea 	bl	8010148 <__mcmp>
 800f974:	2800      	cmp	r0, #0
 800f976:	dd00      	ble.n	800f97a <_dtoa_r+0x9a2>
 800f978:	e5a5      	b.n	800f4c6 <_dtoa_r+0x4ee>
 800f97a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f97c:	43db      	mvns	r3, r3
 800f97e:	9302      	str	r3, [sp, #8]
 800f980:	9b06      	ldr	r3, [sp, #24]
 800f982:	9308      	str	r3, [sp, #32]
 800f984:	2400      	movs	r4, #0
 800f986:	0031      	movs	r1, r6
 800f988:	0038      	movs	r0, r7
 800f98a:	f000 f99d 	bl	800fcc8 <_Bfree>
 800f98e:	2d00      	cmp	r5, #0
 800f990:	d100      	bne.n	800f994 <_dtoa_r+0x9bc>
 800f992:	e6b7      	b.n	800f704 <_dtoa_r+0x72c>
 800f994:	2c00      	cmp	r4, #0
 800f996:	d005      	beq.n	800f9a4 <_dtoa_r+0x9cc>
 800f998:	42ac      	cmp	r4, r5
 800f99a:	d003      	beq.n	800f9a4 <_dtoa_r+0x9cc>
 800f99c:	0021      	movs	r1, r4
 800f99e:	0038      	movs	r0, r7
 800f9a0:	f000 f992 	bl	800fcc8 <_Bfree>
 800f9a4:	0029      	movs	r1, r5
 800f9a6:	0038      	movs	r0, r7
 800f9a8:	f000 f98e 	bl	800fcc8 <_Bfree>
 800f9ac:	e6aa      	b.n	800f704 <_dtoa_r+0x72c>
 800f9ae:	2600      	movs	r6, #0
 800f9b0:	0035      	movs	r5, r6
 800f9b2:	e7e2      	b.n	800f97a <_dtoa_r+0x9a2>
 800f9b4:	9602      	str	r6, [sp, #8]
 800f9b6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f9b8:	0035      	movs	r5, r6
 800f9ba:	e584      	b.n	800f4c6 <_dtoa_r+0x4ee>
 800f9bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d100      	bne.n	800f9c4 <_dtoa_r+0x9ec>
 800f9c2:	e0ce      	b.n	800fb62 <_dtoa_r+0xb8a>
 800f9c4:	9b07      	ldr	r3, [sp, #28]
 800f9c6:	930c      	str	r3, [sp, #48]	; 0x30
 800f9c8:	2c00      	cmp	r4, #0
 800f9ca:	dd05      	ble.n	800f9d8 <_dtoa_r+0xa00>
 800f9cc:	0029      	movs	r1, r5
 800f9ce:	0022      	movs	r2, r4
 800f9d0:	0038      	movs	r0, r7
 800f9d2:	f000 fb4b 	bl	801006c <__lshift>
 800f9d6:	0005      	movs	r5, r0
 800f9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9da:	0028      	movs	r0, r5
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d022      	beq.n	800fa26 <_dtoa_r+0xa4e>
 800f9e0:	0038      	movs	r0, r7
 800f9e2:	6869      	ldr	r1, [r5, #4]
 800f9e4:	f000 f92c 	bl	800fc40 <_Balloc>
 800f9e8:	1e04      	subs	r4, r0, #0
 800f9ea:	d10f      	bne.n	800fa0c <_dtoa_r+0xa34>
 800f9ec:	0002      	movs	r2, r0
 800f9ee:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <_dtoa_r+0xa2c>)
 800f9f0:	4905      	ldr	r1, [pc, #20]	; (800fa08 <_dtoa_r+0xa30>)
 800f9f2:	f7ff fb06 	bl	800f002 <_dtoa_r+0x2a>
 800f9f6:	46c0      	nop			; (mov r8, r8)
 800f9f8:	40240000 	.word	0x40240000
 800f9fc:	00000433 	.word	0x00000433
 800fa00:	7ff00000 	.word	0x7ff00000
 800fa04:	08012a0f 	.word	0x08012a0f
 800fa08:	000002ea 	.word	0x000002ea
 800fa0c:	0029      	movs	r1, r5
 800fa0e:	692b      	ldr	r3, [r5, #16]
 800fa10:	310c      	adds	r1, #12
 800fa12:	1c9a      	adds	r2, r3, #2
 800fa14:	0092      	lsls	r2, r2, #2
 800fa16:	300c      	adds	r0, #12
 800fa18:	f7fe fda6 	bl	800e568 <memcpy>
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	0021      	movs	r1, r4
 800fa20:	0038      	movs	r0, r7
 800fa22:	f000 fb23 	bl	801006c <__lshift>
 800fa26:	9b06      	ldr	r3, [sp, #24]
 800fa28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa2a:	930a      	str	r3, [sp, #40]	; 0x28
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	189b      	adds	r3, r3, r2
 800fa30:	2201      	movs	r2, #1
 800fa32:	002c      	movs	r4, r5
 800fa34:	0005      	movs	r5, r0
 800fa36:	9314      	str	r3, [sp, #80]	; 0x50
 800fa38:	9b08      	ldr	r3, [sp, #32]
 800fa3a:	4013      	ands	r3, r2
 800fa3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa3e:	0031      	movs	r1, r6
 800fa40:	9805      	ldr	r0, [sp, #20]
 800fa42:	f7ff fa3e 	bl	800eec2 <quorem>
 800fa46:	0003      	movs	r3, r0
 800fa48:	0021      	movs	r1, r4
 800fa4a:	3330      	adds	r3, #48	; 0x30
 800fa4c:	900d      	str	r0, [sp, #52]	; 0x34
 800fa4e:	9805      	ldr	r0, [sp, #20]
 800fa50:	9307      	str	r3, [sp, #28]
 800fa52:	f000 fb79 	bl	8010148 <__mcmp>
 800fa56:	002a      	movs	r2, r5
 800fa58:	900e      	str	r0, [sp, #56]	; 0x38
 800fa5a:	0031      	movs	r1, r6
 800fa5c:	0038      	movs	r0, r7
 800fa5e:	f000 fb8f 	bl	8010180 <__mdiff>
 800fa62:	68c3      	ldr	r3, [r0, #12]
 800fa64:	9008      	str	r0, [sp, #32]
 800fa66:	9310      	str	r3, [sp, #64]	; 0x40
 800fa68:	2301      	movs	r3, #1
 800fa6a:	930c      	str	r3, [sp, #48]	; 0x30
 800fa6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d104      	bne.n	800fa7c <_dtoa_r+0xaa4>
 800fa72:	0001      	movs	r1, r0
 800fa74:	9805      	ldr	r0, [sp, #20]
 800fa76:	f000 fb67 	bl	8010148 <__mcmp>
 800fa7a:	900c      	str	r0, [sp, #48]	; 0x30
 800fa7c:	0038      	movs	r0, r7
 800fa7e:	9908      	ldr	r1, [sp, #32]
 800fa80:	f000 f922 	bl	800fcc8 <_Bfree>
 800fa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa88:	3301      	adds	r3, #1
 800fa8a:	9308      	str	r3, [sp, #32]
 800fa8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa92:	4313      	orrs	r3, r2
 800fa94:	d10c      	bne.n	800fab0 <_dtoa_r+0xad8>
 800fa96:	9b07      	ldr	r3, [sp, #28]
 800fa98:	2b39      	cmp	r3, #57	; 0x39
 800fa9a:	d026      	beq.n	800faea <_dtoa_r+0xb12>
 800fa9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	dd02      	ble.n	800faa8 <_dtoa_r+0xad0>
 800faa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faa4:	3331      	adds	r3, #49	; 0x31
 800faa6:	9307      	str	r3, [sp, #28]
 800faa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faaa:	9a07      	ldr	r2, [sp, #28]
 800faac:	701a      	strb	r2, [r3, #0]
 800faae:	e76a      	b.n	800f986 <_dtoa_r+0x9ae>
 800fab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	db04      	blt.n	800fac0 <_dtoa_r+0xae8>
 800fab6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fab8:	4313      	orrs	r3, r2
 800faba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fabc:	4313      	orrs	r3, r2
 800fabe:	d11f      	bne.n	800fb00 <_dtoa_r+0xb28>
 800fac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	ddf0      	ble.n	800faa8 <_dtoa_r+0xad0>
 800fac6:	9905      	ldr	r1, [sp, #20]
 800fac8:	2201      	movs	r2, #1
 800faca:	0038      	movs	r0, r7
 800facc:	f000 face 	bl	801006c <__lshift>
 800fad0:	0031      	movs	r1, r6
 800fad2:	9005      	str	r0, [sp, #20]
 800fad4:	f000 fb38 	bl	8010148 <__mcmp>
 800fad8:	2800      	cmp	r0, #0
 800fada:	dc03      	bgt.n	800fae4 <_dtoa_r+0xb0c>
 800fadc:	d1e4      	bne.n	800faa8 <_dtoa_r+0xad0>
 800fade:	9b07      	ldr	r3, [sp, #28]
 800fae0:	07db      	lsls	r3, r3, #31
 800fae2:	d5e1      	bpl.n	800faa8 <_dtoa_r+0xad0>
 800fae4:	9b07      	ldr	r3, [sp, #28]
 800fae6:	2b39      	cmp	r3, #57	; 0x39
 800fae8:	d1db      	bne.n	800faa2 <_dtoa_r+0xaca>
 800faea:	2339      	movs	r3, #57	; 0x39
 800faec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faee:	7013      	strb	r3, [r2, #0]
 800faf0:	9b08      	ldr	r3, [sp, #32]
 800faf2:	9308      	str	r3, [sp, #32]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	781a      	ldrb	r2, [r3, #0]
 800faf8:	2a39      	cmp	r2, #57	; 0x39
 800fafa:	d068      	beq.n	800fbce <_dtoa_r+0xbf6>
 800fafc:	3201      	adds	r2, #1
 800fafe:	e7d5      	b.n	800faac <_dtoa_r+0xad4>
 800fb00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	dd07      	ble.n	800fb16 <_dtoa_r+0xb3e>
 800fb06:	9b07      	ldr	r3, [sp, #28]
 800fb08:	2b39      	cmp	r3, #57	; 0x39
 800fb0a:	d0ee      	beq.n	800faea <_dtoa_r+0xb12>
 800fb0c:	9b07      	ldr	r3, [sp, #28]
 800fb0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb10:	3301      	adds	r3, #1
 800fb12:	7013      	strb	r3, [r2, #0]
 800fb14:	e737      	b.n	800f986 <_dtoa_r+0x9ae>
 800fb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb18:	9a07      	ldr	r2, [sp, #28]
 800fb1a:	701a      	strb	r2, [r3, #0]
 800fb1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d03e      	beq.n	800fba2 <_dtoa_r+0xbca>
 800fb24:	2300      	movs	r3, #0
 800fb26:	220a      	movs	r2, #10
 800fb28:	9905      	ldr	r1, [sp, #20]
 800fb2a:	0038      	movs	r0, r7
 800fb2c:	f000 f8f0 	bl	800fd10 <__multadd>
 800fb30:	2300      	movs	r3, #0
 800fb32:	9005      	str	r0, [sp, #20]
 800fb34:	220a      	movs	r2, #10
 800fb36:	0021      	movs	r1, r4
 800fb38:	0038      	movs	r0, r7
 800fb3a:	42ac      	cmp	r4, r5
 800fb3c:	d106      	bne.n	800fb4c <_dtoa_r+0xb74>
 800fb3e:	f000 f8e7 	bl	800fd10 <__multadd>
 800fb42:	0004      	movs	r4, r0
 800fb44:	0005      	movs	r5, r0
 800fb46:	9b08      	ldr	r3, [sp, #32]
 800fb48:	930a      	str	r3, [sp, #40]	; 0x28
 800fb4a:	e778      	b.n	800fa3e <_dtoa_r+0xa66>
 800fb4c:	f000 f8e0 	bl	800fd10 <__multadd>
 800fb50:	0029      	movs	r1, r5
 800fb52:	0004      	movs	r4, r0
 800fb54:	2300      	movs	r3, #0
 800fb56:	220a      	movs	r2, #10
 800fb58:	0038      	movs	r0, r7
 800fb5a:	f000 f8d9 	bl	800fd10 <__multadd>
 800fb5e:	0005      	movs	r5, r0
 800fb60:	e7f1      	b.n	800fb46 <_dtoa_r+0xb6e>
 800fb62:	9b07      	ldr	r3, [sp, #28]
 800fb64:	930c      	str	r3, [sp, #48]	; 0x30
 800fb66:	2400      	movs	r4, #0
 800fb68:	0031      	movs	r1, r6
 800fb6a:	9805      	ldr	r0, [sp, #20]
 800fb6c:	f7ff f9a9 	bl	800eec2 <quorem>
 800fb70:	9b06      	ldr	r3, [sp, #24]
 800fb72:	3030      	adds	r0, #48	; 0x30
 800fb74:	5518      	strb	r0, [r3, r4]
 800fb76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb78:	3401      	adds	r4, #1
 800fb7a:	9007      	str	r0, [sp, #28]
 800fb7c:	42a3      	cmp	r3, r4
 800fb7e:	dd07      	ble.n	800fb90 <_dtoa_r+0xbb8>
 800fb80:	2300      	movs	r3, #0
 800fb82:	220a      	movs	r2, #10
 800fb84:	0038      	movs	r0, r7
 800fb86:	9905      	ldr	r1, [sp, #20]
 800fb88:	f000 f8c2 	bl	800fd10 <__multadd>
 800fb8c:	9005      	str	r0, [sp, #20]
 800fb8e:	e7eb      	b.n	800fb68 <_dtoa_r+0xb90>
 800fb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb92:	2001      	movs	r0, #1
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	dd00      	ble.n	800fb9a <_dtoa_r+0xbc2>
 800fb98:	0018      	movs	r0, r3
 800fb9a:	2400      	movs	r4, #0
 800fb9c:	9b06      	ldr	r3, [sp, #24]
 800fb9e:	181b      	adds	r3, r3, r0
 800fba0:	9308      	str	r3, [sp, #32]
 800fba2:	9905      	ldr	r1, [sp, #20]
 800fba4:	2201      	movs	r2, #1
 800fba6:	0038      	movs	r0, r7
 800fba8:	f000 fa60 	bl	801006c <__lshift>
 800fbac:	0031      	movs	r1, r6
 800fbae:	9005      	str	r0, [sp, #20]
 800fbb0:	f000 faca 	bl	8010148 <__mcmp>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	dc9b      	bgt.n	800faf0 <_dtoa_r+0xb18>
 800fbb8:	d102      	bne.n	800fbc0 <_dtoa_r+0xbe8>
 800fbba:	9b07      	ldr	r3, [sp, #28]
 800fbbc:	07db      	lsls	r3, r3, #31
 800fbbe:	d497      	bmi.n	800faf0 <_dtoa_r+0xb18>
 800fbc0:	9b08      	ldr	r3, [sp, #32]
 800fbc2:	9308      	str	r3, [sp, #32]
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	781a      	ldrb	r2, [r3, #0]
 800fbc8:	2a30      	cmp	r2, #48	; 0x30
 800fbca:	d0fa      	beq.n	800fbc2 <_dtoa_r+0xbea>
 800fbcc:	e6db      	b.n	800f986 <_dtoa_r+0x9ae>
 800fbce:	9a06      	ldr	r2, [sp, #24]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d18e      	bne.n	800faf2 <_dtoa_r+0xb1a>
 800fbd4:	9b02      	ldr	r3, [sp, #8]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	9302      	str	r3, [sp, #8]
 800fbda:	2331      	movs	r3, #49	; 0x31
 800fbdc:	e799      	b.n	800fb12 <_dtoa_r+0xb3a>
 800fbde:	4b09      	ldr	r3, [pc, #36]	; (800fc04 <_dtoa_r+0xc2c>)
 800fbe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fbe2:	9306      	str	r3, [sp, #24]
 800fbe4:	4b08      	ldr	r3, [pc, #32]	; (800fc08 <_dtoa_r+0xc30>)
 800fbe6:	2a00      	cmp	r2, #0
 800fbe8:	d001      	beq.n	800fbee <_dtoa_r+0xc16>
 800fbea:	f7ff fa3f 	bl	800f06c <_dtoa_r+0x94>
 800fbee:	f7ff fa3f 	bl	800f070 <_dtoa_r+0x98>
 800fbf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	dcb6      	bgt.n	800fb66 <_dtoa_r+0xb8e>
 800fbf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	dd00      	ble.n	800fc00 <_dtoa_r+0xc28>
 800fbfe:	e6ac      	b.n	800f95a <_dtoa_r+0x982>
 800fc00:	e7b1      	b.n	800fb66 <_dtoa_r+0xb8e>
 800fc02:	46c0      	nop			; (mov r8, r8)
 800fc04:	08012990 	.word	0x08012990
 800fc08:	08012998 	.word	0x08012998

0800fc0c <_localeconv_r>:
 800fc0c:	4800      	ldr	r0, [pc, #0]	; (800fc10 <_localeconv_r+0x4>)
 800fc0e:	4770      	bx	lr
 800fc10:	20000178 	.word	0x20000178

0800fc14 <malloc>:
 800fc14:	b510      	push	{r4, lr}
 800fc16:	4b03      	ldr	r3, [pc, #12]	; (800fc24 <malloc+0x10>)
 800fc18:	0001      	movs	r1, r0
 800fc1a:	6818      	ldr	r0, [r3, #0]
 800fc1c:	f000 fc44 	bl	80104a8 <_malloc_r>
 800fc20:	bd10      	pop	{r4, pc}
 800fc22:	46c0      	nop			; (mov r8, r8)
 800fc24:	20000024 	.word	0x20000024

0800fc28 <memchr>:
 800fc28:	b2c9      	uxtb	r1, r1
 800fc2a:	1882      	adds	r2, r0, r2
 800fc2c:	4290      	cmp	r0, r2
 800fc2e:	d101      	bne.n	800fc34 <memchr+0xc>
 800fc30:	2000      	movs	r0, #0
 800fc32:	4770      	bx	lr
 800fc34:	7803      	ldrb	r3, [r0, #0]
 800fc36:	428b      	cmp	r3, r1
 800fc38:	d0fb      	beq.n	800fc32 <memchr+0xa>
 800fc3a:	3001      	adds	r0, #1
 800fc3c:	e7f6      	b.n	800fc2c <memchr+0x4>
	...

0800fc40 <_Balloc>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc44:	0006      	movs	r6, r0
 800fc46:	000c      	movs	r4, r1
 800fc48:	2d00      	cmp	r5, #0
 800fc4a:	d10e      	bne.n	800fc6a <_Balloc+0x2a>
 800fc4c:	2010      	movs	r0, #16
 800fc4e:	f7ff ffe1 	bl	800fc14 <malloc>
 800fc52:	1e02      	subs	r2, r0, #0
 800fc54:	6270      	str	r0, [r6, #36]	; 0x24
 800fc56:	d104      	bne.n	800fc62 <_Balloc+0x22>
 800fc58:	2166      	movs	r1, #102	; 0x66
 800fc5a:	4b19      	ldr	r3, [pc, #100]	; (800fcc0 <_Balloc+0x80>)
 800fc5c:	4819      	ldr	r0, [pc, #100]	; (800fcc4 <_Balloc+0x84>)
 800fc5e:	f000 fe0d 	bl	801087c <__assert_func>
 800fc62:	6045      	str	r5, [r0, #4]
 800fc64:	6085      	str	r5, [r0, #8]
 800fc66:	6005      	str	r5, [r0, #0]
 800fc68:	60c5      	str	r5, [r0, #12]
 800fc6a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800fc6c:	68eb      	ldr	r3, [r5, #12]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d013      	beq.n	800fc9a <_Balloc+0x5a>
 800fc72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fc74:	00a2      	lsls	r2, r4, #2
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	189b      	adds	r3, r3, r2
 800fc7a:	6818      	ldr	r0, [r3, #0]
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d118      	bne.n	800fcb2 <_Balloc+0x72>
 800fc80:	2101      	movs	r1, #1
 800fc82:	000d      	movs	r5, r1
 800fc84:	40a5      	lsls	r5, r4
 800fc86:	1d6a      	adds	r2, r5, #5
 800fc88:	0030      	movs	r0, r6
 800fc8a:	0092      	lsls	r2, r2, #2
 800fc8c:	f000 fb74 	bl	8010378 <_calloc_r>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d00c      	beq.n	800fcae <_Balloc+0x6e>
 800fc94:	6044      	str	r4, [r0, #4]
 800fc96:	6085      	str	r5, [r0, #8]
 800fc98:	e00d      	b.n	800fcb6 <_Balloc+0x76>
 800fc9a:	2221      	movs	r2, #33	; 0x21
 800fc9c:	2104      	movs	r1, #4
 800fc9e:	0030      	movs	r0, r6
 800fca0:	f000 fb6a 	bl	8010378 <_calloc_r>
 800fca4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fca6:	60e8      	str	r0, [r5, #12]
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1e1      	bne.n	800fc72 <_Balloc+0x32>
 800fcae:	2000      	movs	r0, #0
 800fcb0:	bd70      	pop	{r4, r5, r6, pc}
 800fcb2:	6802      	ldr	r2, [r0, #0]
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	6103      	str	r3, [r0, #16]
 800fcba:	60c3      	str	r3, [r0, #12]
 800fcbc:	e7f8      	b.n	800fcb0 <_Balloc+0x70>
 800fcbe:	46c0      	nop			; (mov r8, r8)
 800fcc0:	0801299d 	.word	0x0801299d
 800fcc4:	08012a20 	.word	0x08012a20

0800fcc8 <_Bfree>:
 800fcc8:	b570      	push	{r4, r5, r6, lr}
 800fcca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fccc:	0005      	movs	r5, r0
 800fcce:	000c      	movs	r4, r1
 800fcd0:	2e00      	cmp	r6, #0
 800fcd2:	d10e      	bne.n	800fcf2 <_Bfree+0x2a>
 800fcd4:	2010      	movs	r0, #16
 800fcd6:	f7ff ff9d 	bl	800fc14 <malloc>
 800fcda:	1e02      	subs	r2, r0, #0
 800fcdc:	6268      	str	r0, [r5, #36]	; 0x24
 800fcde:	d104      	bne.n	800fcea <_Bfree+0x22>
 800fce0:	218a      	movs	r1, #138	; 0x8a
 800fce2:	4b09      	ldr	r3, [pc, #36]	; (800fd08 <_Bfree+0x40>)
 800fce4:	4809      	ldr	r0, [pc, #36]	; (800fd0c <_Bfree+0x44>)
 800fce6:	f000 fdc9 	bl	801087c <__assert_func>
 800fcea:	6046      	str	r6, [r0, #4]
 800fcec:	6086      	str	r6, [r0, #8]
 800fcee:	6006      	str	r6, [r0, #0]
 800fcf0:	60c6      	str	r6, [r0, #12]
 800fcf2:	2c00      	cmp	r4, #0
 800fcf4:	d007      	beq.n	800fd06 <_Bfree+0x3e>
 800fcf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fcf8:	6862      	ldr	r2, [r4, #4]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	0092      	lsls	r2, r2, #2
 800fcfe:	189b      	adds	r3, r3, r2
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	6022      	str	r2, [r4, #0]
 800fd04:	601c      	str	r4, [r3, #0]
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
 800fd08:	0801299d 	.word	0x0801299d
 800fd0c:	08012a20 	.word	0x08012a20

0800fd10 <__multadd>:
 800fd10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd12:	000e      	movs	r6, r1
 800fd14:	9001      	str	r0, [sp, #4]
 800fd16:	000c      	movs	r4, r1
 800fd18:	001d      	movs	r5, r3
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	690f      	ldr	r7, [r1, #16]
 800fd1e:	3614      	adds	r6, #20
 800fd20:	6833      	ldr	r3, [r6, #0]
 800fd22:	3001      	adds	r0, #1
 800fd24:	b299      	uxth	r1, r3
 800fd26:	4351      	muls	r1, r2
 800fd28:	0c1b      	lsrs	r3, r3, #16
 800fd2a:	4353      	muls	r3, r2
 800fd2c:	1949      	adds	r1, r1, r5
 800fd2e:	0c0d      	lsrs	r5, r1, #16
 800fd30:	195b      	adds	r3, r3, r5
 800fd32:	0c1d      	lsrs	r5, r3, #16
 800fd34:	b289      	uxth	r1, r1
 800fd36:	041b      	lsls	r3, r3, #16
 800fd38:	185b      	adds	r3, r3, r1
 800fd3a:	c608      	stmia	r6!, {r3}
 800fd3c:	4287      	cmp	r7, r0
 800fd3e:	dcef      	bgt.n	800fd20 <__multadd+0x10>
 800fd40:	2d00      	cmp	r5, #0
 800fd42:	d022      	beq.n	800fd8a <__multadd+0x7a>
 800fd44:	68a3      	ldr	r3, [r4, #8]
 800fd46:	42bb      	cmp	r3, r7
 800fd48:	dc19      	bgt.n	800fd7e <__multadd+0x6e>
 800fd4a:	6863      	ldr	r3, [r4, #4]
 800fd4c:	9801      	ldr	r0, [sp, #4]
 800fd4e:	1c59      	adds	r1, r3, #1
 800fd50:	f7ff ff76 	bl	800fc40 <_Balloc>
 800fd54:	1e06      	subs	r6, r0, #0
 800fd56:	d105      	bne.n	800fd64 <__multadd+0x54>
 800fd58:	0002      	movs	r2, r0
 800fd5a:	21b5      	movs	r1, #181	; 0xb5
 800fd5c:	4b0c      	ldr	r3, [pc, #48]	; (800fd90 <__multadd+0x80>)
 800fd5e:	480d      	ldr	r0, [pc, #52]	; (800fd94 <__multadd+0x84>)
 800fd60:	f000 fd8c 	bl	801087c <__assert_func>
 800fd64:	0021      	movs	r1, r4
 800fd66:	6923      	ldr	r3, [r4, #16]
 800fd68:	310c      	adds	r1, #12
 800fd6a:	1c9a      	adds	r2, r3, #2
 800fd6c:	0092      	lsls	r2, r2, #2
 800fd6e:	300c      	adds	r0, #12
 800fd70:	f7fe fbfa 	bl	800e568 <memcpy>
 800fd74:	0021      	movs	r1, r4
 800fd76:	9801      	ldr	r0, [sp, #4]
 800fd78:	f7ff ffa6 	bl	800fcc8 <_Bfree>
 800fd7c:	0034      	movs	r4, r6
 800fd7e:	1d3b      	adds	r3, r7, #4
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	18e3      	adds	r3, r4, r3
 800fd84:	605d      	str	r5, [r3, #4]
 800fd86:	1c7b      	adds	r3, r7, #1
 800fd88:	6123      	str	r3, [r4, #16]
 800fd8a:	0020      	movs	r0, r4
 800fd8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd8e:	46c0      	nop			; (mov r8, r8)
 800fd90:	08012a0f 	.word	0x08012a0f
 800fd94:	08012a20 	.word	0x08012a20

0800fd98 <__hi0bits>:
 800fd98:	0003      	movs	r3, r0
 800fd9a:	0c02      	lsrs	r2, r0, #16
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	4282      	cmp	r2, r0
 800fda0:	d101      	bne.n	800fda6 <__hi0bits+0xe>
 800fda2:	041b      	lsls	r3, r3, #16
 800fda4:	3010      	adds	r0, #16
 800fda6:	0e1a      	lsrs	r2, r3, #24
 800fda8:	d101      	bne.n	800fdae <__hi0bits+0x16>
 800fdaa:	3008      	adds	r0, #8
 800fdac:	021b      	lsls	r3, r3, #8
 800fdae:	0f1a      	lsrs	r2, r3, #28
 800fdb0:	d101      	bne.n	800fdb6 <__hi0bits+0x1e>
 800fdb2:	3004      	adds	r0, #4
 800fdb4:	011b      	lsls	r3, r3, #4
 800fdb6:	0f9a      	lsrs	r2, r3, #30
 800fdb8:	d101      	bne.n	800fdbe <__hi0bits+0x26>
 800fdba:	3002      	adds	r0, #2
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	db03      	blt.n	800fdca <__hi0bits+0x32>
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	005b      	lsls	r3, r3, #1
 800fdc6:	d400      	bmi.n	800fdca <__hi0bits+0x32>
 800fdc8:	2020      	movs	r0, #32
 800fdca:	4770      	bx	lr

0800fdcc <__lo0bits>:
 800fdcc:	6803      	ldr	r3, [r0, #0]
 800fdce:	0002      	movs	r2, r0
 800fdd0:	2107      	movs	r1, #7
 800fdd2:	0018      	movs	r0, r3
 800fdd4:	4008      	ands	r0, r1
 800fdd6:	420b      	tst	r3, r1
 800fdd8:	d00d      	beq.n	800fdf6 <__lo0bits+0x2a>
 800fdda:	3906      	subs	r1, #6
 800fddc:	2000      	movs	r0, #0
 800fdde:	420b      	tst	r3, r1
 800fde0:	d105      	bne.n	800fdee <__lo0bits+0x22>
 800fde2:	3002      	adds	r0, #2
 800fde4:	4203      	tst	r3, r0
 800fde6:	d003      	beq.n	800fdf0 <__lo0bits+0x24>
 800fde8:	40cb      	lsrs	r3, r1
 800fdea:	0008      	movs	r0, r1
 800fdec:	6013      	str	r3, [r2, #0]
 800fdee:	4770      	bx	lr
 800fdf0:	089b      	lsrs	r3, r3, #2
 800fdf2:	6013      	str	r3, [r2, #0]
 800fdf4:	e7fb      	b.n	800fdee <__lo0bits+0x22>
 800fdf6:	b299      	uxth	r1, r3
 800fdf8:	2900      	cmp	r1, #0
 800fdfa:	d101      	bne.n	800fe00 <__lo0bits+0x34>
 800fdfc:	2010      	movs	r0, #16
 800fdfe:	0c1b      	lsrs	r3, r3, #16
 800fe00:	b2d9      	uxtb	r1, r3
 800fe02:	2900      	cmp	r1, #0
 800fe04:	d101      	bne.n	800fe0a <__lo0bits+0x3e>
 800fe06:	3008      	adds	r0, #8
 800fe08:	0a1b      	lsrs	r3, r3, #8
 800fe0a:	0719      	lsls	r1, r3, #28
 800fe0c:	d101      	bne.n	800fe12 <__lo0bits+0x46>
 800fe0e:	3004      	adds	r0, #4
 800fe10:	091b      	lsrs	r3, r3, #4
 800fe12:	0799      	lsls	r1, r3, #30
 800fe14:	d101      	bne.n	800fe1a <__lo0bits+0x4e>
 800fe16:	3002      	adds	r0, #2
 800fe18:	089b      	lsrs	r3, r3, #2
 800fe1a:	07d9      	lsls	r1, r3, #31
 800fe1c:	d4e9      	bmi.n	800fdf2 <__lo0bits+0x26>
 800fe1e:	3001      	adds	r0, #1
 800fe20:	085b      	lsrs	r3, r3, #1
 800fe22:	d1e6      	bne.n	800fdf2 <__lo0bits+0x26>
 800fe24:	2020      	movs	r0, #32
 800fe26:	e7e2      	b.n	800fdee <__lo0bits+0x22>

0800fe28 <__i2b>:
 800fe28:	b510      	push	{r4, lr}
 800fe2a:	000c      	movs	r4, r1
 800fe2c:	2101      	movs	r1, #1
 800fe2e:	f7ff ff07 	bl	800fc40 <_Balloc>
 800fe32:	2800      	cmp	r0, #0
 800fe34:	d106      	bne.n	800fe44 <__i2b+0x1c>
 800fe36:	21a0      	movs	r1, #160	; 0xa0
 800fe38:	0002      	movs	r2, r0
 800fe3a:	4b04      	ldr	r3, [pc, #16]	; (800fe4c <__i2b+0x24>)
 800fe3c:	4804      	ldr	r0, [pc, #16]	; (800fe50 <__i2b+0x28>)
 800fe3e:	0049      	lsls	r1, r1, #1
 800fe40:	f000 fd1c 	bl	801087c <__assert_func>
 800fe44:	2301      	movs	r3, #1
 800fe46:	6144      	str	r4, [r0, #20]
 800fe48:	6103      	str	r3, [r0, #16]
 800fe4a:	bd10      	pop	{r4, pc}
 800fe4c:	08012a0f 	.word	0x08012a0f
 800fe50:	08012a20 	.word	0x08012a20

0800fe54 <__multiply>:
 800fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe56:	690b      	ldr	r3, [r1, #16]
 800fe58:	0014      	movs	r4, r2
 800fe5a:	6912      	ldr	r2, [r2, #16]
 800fe5c:	000d      	movs	r5, r1
 800fe5e:	b089      	sub	sp, #36	; 0x24
 800fe60:	4293      	cmp	r3, r2
 800fe62:	da01      	bge.n	800fe68 <__multiply+0x14>
 800fe64:	0025      	movs	r5, r4
 800fe66:	000c      	movs	r4, r1
 800fe68:	692f      	ldr	r7, [r5, #16]
 800fe6a:	6926      	ldr	r6, [r4, #16]
 800fe6c:	6869      	ldr	r1, [r5, #4]
 800fe6e:	19bb      	adds	r3, r7, r6
 800fe70:	9302      	str	r3, [sp, #8]
 800fe72:	68ab      	ldr	r3, [r5, #8]
 800fe74:	19ba      	adds	r2, r7, r6
 800fe76:	4293      	cmp	r3, r2
 800fe78:	da00      	bge.n	800fe7c <__multiply+0x28>
 800fe7a:	3101      	adds	r1, #1
 800fe7c:	f7ff fee0 	bl	800fc40 <_Balloc>
 800fe80:	9001      	str	r0, [sp, #4]
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d106      	bne.n	800fe94 <__multiply+0x40>
 800fe86:	215e      	movs	r1, #94	; 0x5e
 800fe88:	0002      	movs	r2, r0
 800fe8a:	4b48      	ldr	r3, [pc, #288]	; (800ffac <__multiply+0x158>)
 800fe8c:	4848      	ldr	r0, [pc, #288]	; (800ffb0 <__multiply+0x15c>)
 800fe8e:	31ff      	adds	r1, #255	; 0xff
 800fe90:	f000 fcf4 	bl	801087c <__assert_func>
 800fe94:	9b01      	ldr	r3, [sp, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	3314      	adds	r3, #20
 800fe9a:	469c      	mov	ip, r3
 800fe9c:	19bb      	adds	r3, r7, r6
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	4463      	add	r3, ip
 800fea2:	9303      	str	r3, [sp, #12]
 800fea4:	4663      	mov	r3, ip
 800fea6:	9903      	ldr	r1, [sp, #12]
 800fea8:	428b      	cmp	r3, r1
 800feaa:	d32c      	bcc.n	800ff06 <__multiply+0xb2>
 800feac:	002b      	movs	r3, r5
 800feae:	0022      	movs	r2, r4
 800feb0:	3314      	adds	r3, #20
 800feb2:	00bf      	lsls	r7, r7, #2
 800feb4:	3214      	adds	r2, #20
 800feb6:	9306      	str	r3, [sp, #24]
 800feb8:	00b6      	lsls	r6, r6, #2
 800feba:	19db      	adds	r3, r3, r7
 800febc:	9304      	str	r3, [sp, #16]
 800febe:	1993      	adds	r3, r2, r6
 800fec0:	9307      	str	r3, [sp, #28]
 800fec2:	2304      	movs	r3, #4
 800fec4:	9305      	str	r3, [sp, #20]
 800fec6:	002b      	movs	r3, r5
 800fec8:	9904      	ldr	r1, [sp, #16]
 800feca:	3315      	adds	r3, #21
 800fecc:	9200      	str	r2, [sp, #0]
 800fece:	4299      	cmp	r1, r3
 800fed0:	d305      	bcc.n	800fede <__multiply+0x8a>
 800fed2:	1b4b      	subs	r3, r1, r5
 800fed4:	3b15      	subs	r3, #21
 800fed6:	089b      	lsrs	r3, r3, #2
 800fed8:	3301      	adds	r3, #1
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	9305      	str	r3, [sp, #20]
 800fede:	9b07      	ldr	r3, [sp, #28]
 800fee0:	9a00      	ldr	r2, [sp, #0]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d311      	bcc.n	800ff0a <__multiply+0xb6>
 800fee6:	9b02      	ldr	r3, [sp, #8]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	dd06      	ble.n	800fefa <__multiply+0xa6>
 800feec:	9b03      	ldr	r3, [sp, #12]
 800feee:	3b04      	subs	r3, #4
 800fef0:	9303      	str	r3, [sp, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	9300      	str	r3, [sp, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d053      	beq.n	800ffa2 <__multiply+0x14e>
 800fefa:	9b01      	ldr	r3, [sp, #4]
 800fefc:	9a02      	ldr	r2, [sp, #8]
 800fefe:	0018      	movs	r0, r3
 800ff00:	611a      	str	r2, [r3, #16]
 800ff02:	b009      	add	sp, #36	; 0x24
 800ff04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff06:	c304      	stmia	r3!, {r2}
 800ff08:	e7cd      	b.n	800fea6 <__multiply+0x52>
 800ff0a:	9b00      	ldr	r3, [sp, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	b298      	uxth	r0, r3
 800ff10:	2800      	cmp	r0, #0
 800ff12:	d01b      	beq.n	800ff4c <__multiply+0xf8>
 800ff14:	4667      	mov	r7, ip
 800ff16:	2400      	movs	r4, #0
 800ff18:	9e06      	ldr	r6, [sp, #24]
 800ff1a:	ce02      	ldmia	r6!, {r1}
 800ff1c:	683a      	ldr	r2, [r7, #0]
 800ff1e:	b28b      	uxth	r3, r1
 800ff20:	4343      	muls	r3, r0
 800ff22:	b292      	uxth	r2, r2
 800ff24:	189b      	adds	r3, r3, r2
 800ff26:	191b      	adds	r3, r3, r4
 800ff28:	0c0c      	lsrs	r4, r1, #16
 800ff2a:	4344      	muls	r4, r0
 800ff2c:	683a      	ldr	r2, [r7, #0]
 800ff2e:	0c11      	lsrs	r1, r2, #16
 800ff30:	1861      	adds	r1, r4, r1
 800ff32:	0c1c      	lsrs	r4, r3, #16
 800ff34:	1909      	adds	r1, r1, r4
 800ff36:	0c0c      	lsrs	r4, r1, #16
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	0409      	lsls	r1, r1, #16
 800ff3c:	430b      	orrs	r3, r1
 800ff3e:	c708      	stmia	r7!, {r3}
 800ff40:	9b04      	ldr	r3, [sp, #16]
 800ff42:	42b3      	cmp	r3, r6
 800ff44:	d8e9      	bhi.n	800ff1a <__multiply+0xc6>
 800ff46:	4663      	mov	r3, ip
 800ff48:	9a05      	ldr	r2, [sp, #20]
 800ff4a:	509c      	str	r4, [r3, r2]
 800ff4c:	9b00      	ldr	r3, [sp, #0]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	0c1e      	lsrs	r6, r3, #16
 800ff52:	d020      	beq.n	800ff96 <__multiply+0x142>
 800ff54:	4663      	mov	r3, ip
 800ff56:	002c      	movs	r4, r5
 800ff58:	4660      	mov	r0, ip
 800ff5a:	2700      	movs	r7, #0
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3414      	adds	r4, #20
 800ff60:	6822      	ldr	r2, [r4, #0]
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	b291      	uxth	r1, r2
 800ff66:	4371      	muls	r1, r6
 800ff68:	6802      	ldr	r2, [r0, #0]
 800ff6a:	0c12      	lsrs	r2, r2, #16
 800ff6c:	1889      	adds	r1, r1, r2
 800ff6e:	19cf      	adds	r7, r1, r7
 800ff70:	0439      	lsls	r1, r7, #16
 800ff72:	430b      	orrs	r3, r1
 800ff74:	6003      	str	r3, [r0, #0]
 800ff76:	cc02      	ldmia	r4!, {r1}
 800ff78:	6843      	ldr	r3, [r0, #4]
 800ff7a:	0c09      	lsrs	r1, r1, #16
 800ff7c:	4371      	muls	r1, r6
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	0c3f      	lsrs	r7, r7, #16
 800ff82:	18cb      	adds	r3, r1, r3
 800ff84:	9a04      	ldr	r2, [sp, #16]
 800ff86:	19db      	adds	r3, r3, r7
 800ff88:	0c1f      	lsrs	r7, r3, #16
 800ff8a:	3004      	adds	r0, #4
 800ff8c:	42a2      	cmp	r2, r4
 800ff8e:	d8e7      	bhi.n	800ff60 <__multiply+0x10c>
 800ff90:	4662      	mov	r2, ip
 800ff92:	9905      	ldr	r1, [sp, #20]
 800ff94:	5053      	str	r3, [r2, r1]
 800ff96:	9b00      	ldr	r3, [sp, #0]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	9300      	str	r3, [sp, #0]
 800ff9c:	2304      	movs	r3, #4
 800ff9e:	449c      	add	ip, r3
 800ffa0:	e79d      	b.n	800fede <__multiply+0x8a>
 800ffa2:	9b02      	ldr	r3, [sp, #8]
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	9302      	str	r3, [sp, #8]
 800ffa8:	e79d      	b.n	800fee6 <__multiply+0x92>
 800ffaa:	46c0      	nop			; (mov r8, r8)
 800ffac:	08012a0f 	.word	0x08012a0f
 800ffb0:	08012a20 	.word	0x08012a20

0800ffb4 <__pow5mult>:
 800ffb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	0015      	movs	r5, r2
 800ffba:	0007      	movs	r7, r0
 800ffbc:	000e      	movs	r6, r1
 800ffbe:	401a      	ands	r2, r3
 800ffc0:	421d      	tst	r5, r3
 800ffc2:	d008      	beq.n	800ffd6 <__pow5mult+0x22>
 800ffc4:	4925      	ldr	r1, [pc, #148]	; (801005c <__pow5mult+0xa8>)
 800ffc6:	3a01      	subs	r2, #1
 800ffc8:	0092      	lsls	r2, r2, #2
 800ffca:	5852      	ldr	r2, [r2, r1]
 800ffcc:	2300      	movs	r3, #0
 800ffce:	0031      	movs	r1, r6
 800ffd0:	f7ff fe9e 	bl	800fd10 <__multadd>
 800ffd4:	0006      	movs	r6, r0
 800ffd6:	10ad      	asrs	r5, r5, #2
 800ffd8:	d03d      	beq.n	8010056 <__pow5mult+0xa2>
 800ffda:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ffdc:	2c00      	cmp	r4, #0
 800ffde:	d10f      	bne.n	8010000 <__pow5mult+0x4c>
 800ffe0:	2010      	movs	r0, #16
 800ffe2:	f7ff fe17 	bl	800fc14 <malloc>
 800ffe6:	1e02      	subs	r2, r0, #0
 800ffe8:	6278      	str	r0, [r7, #36]	; 0x24
 800ffea:	d105      	bne.n	800fff8 <__pow5mult+0x44>
 800ffec:	21d7      	movs	r1, #215	; 0xd7
 800ffee:	4b1c      	ldr	r3, [pc, #112]	; (8010060 <__pow5mult+0xac>)
 800fff0:	481c      	ldr	r0, [pc, #112]	; (8010064 <__pow5mult+0xb0>)
 800fff2:	0049      	lsls	r1, r1, #1
 800fff4:	f000 fc42 	bl	801087c <__assert_func>
 800fff8:	6044      	str	r4, [r0, #4]
 800fffa:	6084      	str	r4, [r0, #8]
 800fffc:	6004      	str	r4, [r0, #0]
 800fffe:	60c4      	str	r4, [r0, #12]
 8010000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010002:	689c      	ldr	r4, [r3, #8]
 8010004:	9301      	str	r3, [sp, #4]
 8010006:	2c00      	cmp	r4, #0
 8010008:	d108      	bne.n	801001c <__pow5mult+0x68>
 801000a:	0038      	movs	r0, r7
 801000c:	4916      	ldr	r1, [pc, #88]	; (8010068 <__pow5mult+0xb4>)
 801000e:	f7ff ff0b 	bl	800fe28 <__i2b>
 8010012:	9b01      	ldr	r3, [sp, #4]
 8010014:	0004      	movs	r4, r0
 8010016:	6098      	str	r0, [r3, #8]
 8010018:	2300      	movs	r3, #0
 801001a:	6003      	str	r3, [r0, #0]
 801001c:	2301      	movs	r3, #1
 801001e:	421d      	tst	r5, r3
 8010020:	d00a      	beq.n	8010038 <__pow5mult+0x84>
 8010022:	0031      	movs	r1, r6
 8010024:	0022      	movs	r2, r4
 8010026:	0038      	movs	r0, r7
 8010028:	f7ff ff14 	bl	800fe54 <__multiply>
 801002c:	0031      	movs	r1, r6
 801002e:	9001      	str	r0, [sp, #4]
 8010030:	0038      	movs	r0, r7
 8010032:	f7ff fe49 	bl	800fcc8 <_Bfree>
 8010036:	9e01      	ldr	r6, [sp, #4]
 8010038:	106d      	asrs	r5, r5, #1
 801003a:	d00c      	beq.n	8010056 <__pow5mult+0xa2>
 801003c:	6820      	ldr	r0, [r4, #0]
 801003e:	2800      	cmp	r0, #0
 8010040:	d107      	bne.n	8010052 <__pow5mult+0x9e>
 8010042:	0022      	movs	r2, r4
 8010044:	0021      	movs	r1, r4
 8010046:	0038      	movs	r0, r7
 8010048:	f7ff ff04 	bl	800fe54 <__multiply>
 801004c:	2300      	movs	r3, #0
 801004e:	6020      	str	r0, [r4, #0]
 8010050:	6003      	str	r3, [r0, #0]
 8010052:	0004      	movs	r4, r0
 8010054:	e7e2      	b.n	801001c <__pow5mult+0x68>
 8010056:	0030      	movs	r0, r6
 8010058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801005a:	46c0      	nop			; (mov r8, r8)
 801005c:	08012b70 	.word	0x08012b70
 8010060:	0801299d 	.word	0x0801299d
 8010064:	08012a20 	.word	0x08012a20
 8010068:	00000271 	.word	0x00000271

0801006c <__lshift>:
 801006c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006e:	000c      	movs	r4, r1
 8010070:	0017      	movs	r7, r2
 8010072:	6923      	ldr	r3, [r4, #16]
 8010074:	1155      	asrs	r5, r2, #5
 8010076:	b087      	sub	sp, #28
 8010078:	18eb      	adds	r3, r5, r3
 801007a:	9302      	str	r3, [sp, #8]
 801007c:	3301      	adds	r3, #1
 801007e:	9301      	str	r3, [sp, #4]
 8010080:	6849      	ldr	r1, [r1, #4]
 8010082:	68a3      	ldr	r3, [r4, #8]
 8010084:	9004      	str	r0, [sp, #16]
 8010086:	9a01      	ldr	r2, [sp, #4]
 8010088:	4293      	cmp	r3, r2
 801008a:	db10      	blt.n	80100ae <__lshift+0x42>
 801008c:	9804      	ldr	r0, [sp, #16]
 801008e:	f7ff fdd7 	bl	800fc40 <_Balloc>
 8010092:	2300      	movs	r3, #0
 8010094:	0002      	movs	r2, r0
 8010096:	0006      	movs	r6, r0
 8010098:	0019      	movs	r1, r3
 801009a:	3214      	adds	r2, #20
 801009c:	4298      	cmp	r0, r3
 801009e:	d10c      	bne.n	80100ba <__lshift+0x4e>
 80100a0:	21da      	movs	r1, #218	; 0xda
 80100a2:	0002      	movs	r2, r0
 80100a4:	4b26      	ldr	r3, [pc, #152]	; (8010140 <__lshift+0xd4>)
 80100a6:	4827      	ldr	r0, [pc, #156]	; (8010144 <__lshift+0xd8>)
 80100a8:	31ff      	adds	r1, #255	; 0xff
 80100aa:	f000 fbe7 	bl	801087c <__assert_func>
 80100ae:	3101      	adds	r1, #1
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	e7e8      	b.n	8010086 <__lshift+0x1a>
 80100b4:	0098      	lsls	r0, r3, #2
 80100b6:	5011      	str	r1, [r2, r0]
 80100b8:	3301      	adds	r3, #1
 80100ba:	42ab      	cmp	r3, r5
 80100bc:	dbfa      	blt.n	80100b4 <__lshift+0x48>
 80100be:	43eb      	mvns	r3, r5
 80100c0:	17db      	asrs	r3, r3, #31
 80100c2:	401d      	ands	r5, r3
 80100c4:	211f      	movs	r1, #31
 80100c6:	0023      	movs	r3, r4
 80100c8:	0038      	movs	r0, r7
 80100ca:	00ad      	lsls	r5, r5, #2
 80100cc:	1955      	adds	r5, r2, r5
 80100ce:	6922      	ldr	r2, [r4, #16]
 80100d0:	3314      	adds	r3, #20
 80100d2:	0092      	lsls	r2, r2, #2
 80100d4:	4008      	ands	r0, r1
 80100d6:	4684      	mov	ip, r0
 80100d8:	189a      	adds	r2, r3, r2
 80100da:	420f      	tst	r7, r1
 80100dc:	d02a      	beq.n	8010134 <__lshift+0xc8>
 80100de:	3101      	adds	r1, #1
 80100e0:	1a09      	subs	r1, r1, r0
 80100e2:	9105      	str	r1, [sp, #20]
 80100e4:	2100      	movs	r1, #0
 80100e6:	9503      	str	r5, [sp, #12]
 80100e8:	4667      	mov	r7, ip
 80100ea:	6818      	ldr	r0, [r3, #0]
 80100ec:	40b8      	lsls	r0, r7
 80100ee:	4301      	orrs	r1, r0
 80100f0:	9803      	ldr	r0, [sp, #12]
 80100f2:	c002      	stmia	r0!, {r1}
 80100f4:	cb02      	ldmia	r3!, {r1}
 80100f6:	9003      	str	r0, [sp, #12]
 80100f8:	9805      	ldr	r0, [sp, #20]
 80100fa:	40c1      	lsrs	r1, r0
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d8f3      	bhi.n	80100e8 <__lshift+0x7c>
 8010100:	0020      	movs	r0, r4
 8010102:	3015      	adds	r0, #21
 8010104:	2304      	movs	r3, #4
 8010106:	4282      	cmp	r2, r0
 8010108:	d304      	bcc.n	8010114 <__lshift+0xa8>
 801010a:	1b13      	subs	r3, r2, r4
 801010c:	3b15      	subs	r3, #21
 801010e:	089b      	lsrs	r3, r3, #2
 8010110:	3301      	adds	r3, #1
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	50e9      	str	r1, [r5, r3]
 8010116:	2900      	cmp	r1, #0
 8010118:	d002      	beq.n	8010120 <__lshift+0xb4>
 801011a:	9b02      	ldr	r3, [sp, #8]
 801011c:	3302      	adds	r3, #2
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	9b01      	ldr	r3, [sp, #4]
 8010122:	9804      	ldr	r0, [sp, #16]
 8010124:	3b01      	subs	r3, #1
 8010126:	0021      	movs	r1, r4
 8010128:	6133      	str	r3, [r6, #16]
 801012a:	f7ff fdcd 	bl	800fcc8 <_Bfree>
 801012e:	0030      	movs	r0, r6
 8010130:	b007      	add	sp, #28
 8010132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010134:	cb02      	ldmia	r3!, {r1}
 8010136:	c502      	stmia	r5!, {r1}
 8010138:	429a      	cmp	r2, r3
 801013a:	d8fb      	bhi.n	8010134 <__lshift+0xc8>
 801013c:	e7f0      	b.n	8010120 <__lshift+0xb4>
 801013e:	46c0      	nop			; (mov r8, r8)
 8010140:	08012a0f 	.word	0x08012a0f
 8010144:	08012a20 	.word	0x08012a20

08010148 <__mcmp>:
 8010148:	6902      	ldr	r2, [r0, #16]
 801014a:	690b      	ldr	r3, [r1, #16]
 801014c:	b530      	push	{r4, r5, lr}
 801014e:	0004      	movs	r4, r0
 8010150:	1ad0      	subs	r0, r2, r3
 8010152:	429a      	cmp	r2, r3
 8010154:	d10d      	bne.n	8010172 <__mcmp+0x2a>
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	3414      	adds	r4, #20
 801015a:	3114      	adds	r1, #20
 801015c:	18e2      	adds	r2, r4, r3
 801015e:	18c9      	adds	r1, r1, r3
 8010160:	3a04      	subs	r2, #4
 8010162:	3904      	subs	r1, #4
 8010164:	6815      	ldr	r5, [r2, #0]
 8010166:	680b      	ldr	r3, [r1, #0]
 8010168:	429d      	cmp	r5, r3
 801016a:	d003      	beq.n	8010174 <__mcmp+0x2c>
 801016c:	2001      	movs	r0, #1
 801016e:	429d      	cmp	r5, r3
 8010170:	d303      	bcc.n	801017a <__mcmp+0x32>
 8010172:	bd30      	pop	{r4, r5, pc}
 8010174:	4294      	cmp	r4, r2
 8010176:	d3f3      	bcc.n	8010160 <__mcmp+0x18>
 8010178:	e7fb      	b.n	8010172 <__mcmp+0x2a>
 801017a:	4240      	negs	r0, r0
 801017c:	e7f9      	b.n	8010172 <__mcmp+0x2a>
	...

08010180 <__mdiff>:
 8010180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010182:	000e      	movs	r6, r1
 8010184:	0007      	movs	r7, r0
 8010186:	0011      	movs	r1, r2
 8010188:	0030      	movs	r0, r6
 801018a:	b087      	sub	sp, #28
 801018c:	0014      	movs	r4, r2
 801018e:	f7ff ffdb 	bl	8010148 <__mcmp>
 8010192:	1e05      	subs	r5, r0, #0
 8010194:	d110      	bne.n	80101b8 <__mdiff+0x38>
 8010196:	0001      	movs	r1, r0
 8010198:	0038      	movs	r0, r7
 801019a:	f7ff fd51 	bl	800fc40 <_Balloc>
 801019e:	1e02      	subs	r2, r0, #0
 80101a0:	d104      	bne.n	80101ac <__mdiff+0x2c>
 80101a2:	4b40      	ldr	r3, [pc, #256]	; (80102a4 <__mdiff+0x124>)
 80101a4:	4940      	ldr	r1, [pc, #256]	; (80102a8 <__mdiff+0x128>)
 80101a6:	4841      	ldr	r0, [pc, #260]	; (80102ac <__mdiff+0x12c>)
 80101a8:	f000 fb68 	bl	801087c <__assert_func>
 80101ac:	2301      	movs	r3, #1
 80101ae:	6145      	str	r5, [r0, #20]
 80101b0:	6103      	str	r3, [r0, #16]
 80101b2:	0010      	movs	r0, r2
 80101b4:	b007      	add	sp, #28
 80101b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b8:	2301      	movs	r3, #1
 80101ba:	9301      	str	r3, [sp, #4]
 80101bc:	2800      	cmp	r0, #0
 80101be:	db04      	blt.n	80101ca <__mdiff+0x4a>
 80101c0:	0023      	movs	r3, r4
 80101c2:	0034      	movs	r4, r6
 80101c4:	001e      	movs	r6, r3
 80101c6:	2300      	movs	r3, #0
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	0038      	movs	r0, r7
 80101cc:	6861      	ldr	r1, [r4, #4]
 80101ce:	f7ff fd37 	bl	800fc40 <_Balloc>
 80101d2:	1e02      	subs	r2, r0, #0
 80101d4:	d103      	bne.n	80101de <__mdiff+0x5e>
 80101d6:	2190      	movs	r1, #144	; 0x90
 80101d8:	4b32      	ldr	r3, [pc, #200]	; (80102a4 <__mdiff+0x124>)
 80101da:	0089      	lsls	r1, r1, #2
 80101dc:	e7e3      	b.n	80101a6 <__mdiff+0x26>
 80101de:	9b01      	ldr	r3, [sp, #4]
 80101e0:	2700      	movs	r7, #0
 80101e2:	60c3      	str	r3, [r0, #12]
 80101e4:	6920      	ldr	r0, [r4, #16]
 80101e6:	3414      	adds	r4, #20
 80101e8:	9401      	str	r4, [sp, #4]
 80101ea:	9b01      	ldr	r3, [sp, #4]
 80101ec:	0084      	lsls	r4, r0, #2
 80101ee:	191b      	adds	r3, r3, r4
 80101f0:	0034      	movs	r4, r6
 80101f2:	9302      	str	r3, [sp, #8]
 80101f4:	6933      	ldr	r3, [r6, #16]
 80101f6:	3414      	adds	r4, #20
 80101f8:	0099      	lsls	r1, r3, #2
 80101fa:	1863      	adds	r3, r4, r1
 80101fc:	9303      	str	r3, [sp, #12]
 80101fe:	0013      	movs	r3, r2
 8010200:	3314      	adds	r3, #20
 8010202:	469c      	mov	ip, r3
 8010204:	9305      	str	r3, [sp, #20]
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	9304      	str	r3, [sp, #16]
 801020a:	9b04      	ldr	r3, [sp, #16]
 801020c:	cc02      	ldmia	r4!, {r1}
 801020e:	cb20      	ldmia	r3!, {r5}
 8010210:	9304      	str	r3, [sp, #16]
 8010212:	b2ab      	uxth	r3, r5
 8010214:	19df      	adds	r7, r3, r7
 8010216:	b28b      	uxth	r3, r1
 8010218:	1afb      	subs	r3, r7, r3
 801021a:	0c09      	lsrs	r1, r1, #16
 801021c:	0c2d      	lsrs	r5, r5, #16
 801021e:	1a6d      	subs	r5, r5, r1
 8010220:	1419      	asrs	r1, r3, #16
 8010222:	186d      	adds	r5, r5, r1
 8010224:	4661      	mov	r1, ip
 8010226:	142f      	asrs	r7, r5, #16
 8010228:	b29b      	uxth	r3, r3
 801022a:	042d      	lsls	r5, r5, #16
 801022c:	432b      	orrs	r3, r5
 801022e:	c108      	stmia	r1!, {r3}
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	468c      	mov	ip, r1
 8010234:	42a3      	cmp	r3, r4
 8010236:	d8e8      	bhi.n	801020a <__mdiff+0x8a>
 8010238:	0031      	movs	r1, r6
 801023a:	9c03      	ldr	r4, [sp, #12]
 801023c:	3115      	adds	r1, #21
 801023e:	2304      	movs	r3, #4
 8010240:	428c      	cmp	r4, r1
 8010242:	d304      	bcc.n	801024e <__mdiff+0xce>
 8010244:	1ba3      	subs	r3, r4, r6
 8010246:	3b15      	subs	r3, #21
 8010248:	089b      	lsrs	r3, r3, #2
 801024a:	3301      	adds	r3, #1
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	9901      	ldr	r1, [sp, #4]
 8010250:	18cc      	adds	r4, r1, r3
 8010252:	9905      	ldr	r1, [sp, #20]
 8010254:	0026      	movs	r6, r4
 8010256:	18cb      	adds	r3, r1, r3
 8010258:	469c      	mov	ip, r3
 801025a:	9902      	ldr	r1, [sp, #8]
 801025c:	428e      	cmp	r6, r1
 801025e:	d310      	bcc.n	8010282 <__mdiff+0x102>
 8010260:	9e02      	ldr	r6, [sp, #8]
 8010262:	1ee1      	subs	r1, r4, #3
 8010264:	2500      	movs	r5, #0
 8010266:	428e      	cmp	r6, r1
 8010268:	d304      	bcc.n	8010274 <__mdiff+0xf4>
 801026a:	0031      	movs	r1, r6
 801026c:	3103      	adds	r1, #3
 801026e:	1b0c      	subs	r4, r1, r4
 8010270:	08a4      	lsrs	r4, r4, #2
 8010272:	00a5      	lsls	r5, r4, #2
 8010274:	195b      	adds	r3, r3, r5
 8010276:	3b04      	subs	r3, #4
 8010278:	6819      	ldr	r1, [r3, #0]
 801027a:	2900      	cmp	r1, #0
 801027c:	d00f      	beq.n	801029e <__mdiff+0x11e>
 801027e:	6110      	str	r0, [r2, #16]
 8010280:	e797      	b.n	80101b2 <__mdiff+0x32>
 8010282:	ce02      	ldmia	r6!, {r1}
 8010284:	b28d      	uxth	r5, r1
 8010286:	19ed      	adds	r5, r5, r7
 8010288:	0c0f      	lsrs	r7, r1, #16
 801028a:	1429      	asrs	r1, r5, #16
 801028c:	1879      	adds	r1, r7, r1
 801028e:	140f      	asrs	r7, r1, #16
 8010290:	b2ad      	uxth	r5, r5
 8010292:	0409      	lsls	r1, r1, #16
 8010294:	430d      	orrs	r5, r1
 8010296:	4661      	mov	r1, ip
 8010298:	c120      	stmia	r1!, {r5}
 801029a:	468c      	mov	ip, r1
 801029c:	e7dd      	b.n	801025a <__mdiff+0xda>
 801029e:	3801      	subs	r0, #1
 80102a0:	e7e9      	b.n	8010276 <__mdiff+0xf6>
 80102a2:	46c0      	nop			; (mov r8, r8)
 80102a4:	08012a0f 	.word	0x08012a0f
 80102a8:	00000232 	.word	0x00000232
 80102ac:	08012a20 	.word	0x08012a20

080102b0 <__d2b>:
 80102b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102b2:	2101      	movs	r1, #1
 80102b4:	0014      	movs	r4, r2
 80102b6:	001e      	movs	r6, r3
 80102b8:	9f08      	ldr	r7, [sp, #32]
 80102ba:	f7ff fcc1 	bl	800fc40 <_Balloc>
 80102be:	1e05      	subs	r5, r0, #0
 80102c0:	d105      	bne.n	80102ce <__d2b+0x1e>
 80102c2:	0002      	movs	r2, r0
 80102c4:	4b26      	ldr	r3, [pc, #152]	; (8010360 <__d2b+0xb0>)
 80102c6:	4927      	ldr	r1, [pc, #156]	; (8010364 <__d2b+0xb4>)
 80102c8:	4827      	ldr	r0, [pc, #156]	; (8010368 <__d2b+0xb8>)
 80102ca:	f000 fad7 	bl	801087c <__assert_func>
 80102ce:	0333      	lsls	r3, r6, #12
 80102d0:	0076      	lsls	r6, r6, #1
 80102d2:	0b1b      	lsrs	r3, r3, #12
 80102d4:	0d76      	lsrs	r6, r6, #21
 80102d6:	d124      	bne.n	8010322 <__d2b+0x72>
 80102d8:	9301      	str	r3, [sp, #4]
 80102da:	2c00      	cmp	r4, #0
 80102dc:	d027      	beq.n	801032e <__d2b+0x7e>
 80102de:	4668      	mov	r0, sp
 80102e0:	9400      	str	r4, [sp, #0]
 80102e2:	f7ff fd73 	bl	800fdcc <__lo0bits>
 80102e6:	9c00      	ldr	r4, [sp, #0]
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d01e      	beq.n	801032a <__d2b+0x7a>
 80102ec:	9b01      	ldr	r3, [sp, #4]
 80102ee:	2120      	movs	r1, #32
 80102f0:	001a      	movs	r2, r3
 80102f2:	1a09      	subs	r1, r1, r0
 80102f4:	408a      	lsls	r2, r1
 80102f6:	40c3      	lsrs	r3, r0
 80102f8:	4322      	orrs	r2, r4
 80102fa:	616a      	str	r2, [r5, #20]
 80102fc:	9301      	str	r3, [sp, #4]
 80102fe:	9c01      	ldr	r4, [sp, #4]
 8010300:	61ac      	str	r4, [r5, #24]
 8010302:	1e63      	subs	r3, r4, #1
 8010304:	419c      	sbcs	r4, r3
 8010306:	3401      	adds	r4, #1
 8010308:	612c      	str	r4, [r5, #16]
 801030a:	2e00      	cmp	r6, #0
 801030c:	d018      	beq.n	8010340 <__d2b+0x90>
 801030e:	4b17      	ldr	r3, [pc, #92]	; (801036c <__d2b+0xbc>)
 8010310:	18f6      	adds	r6, r6, r3
 8010312:	2335      	movs	r3, #53	; 0x35
 8010314:	1836      	adds	r6, r6, r0
 8010316:	1a18      	subs	r0, r3, r0
 8010318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801031a:	603e      	str	r6, [r7, #0]
 801031c:	6018      	str	r0, [r3, #0]
 801031e:	0028      	movs	r0, r5
 8010320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010322:	2280      	movs	r2, #128	; 0x80
 8010324:	0352      	lsls	r2, r2, #13
 8010326:	4313      	orrs	r3, r2
 8010328:	e7d6      	b.n	80102d8 <__d2b+0x28>
 801032a:	616c      	str	r4, [r5, #20]
 801032c:	e7e7      	b.n	80102fe <__d2b+0x4e>
 801032e:	a801      	add	r0, sp, #4
 8010330:	f7ff fd4c 	bl	800fdcc <__lo0bits>
 8010334:	2401      	movs	r4, #1
 8010336:	9b01      	ldr	r3, [sp, #4]
 8010338:	612c      	str	r4, [r5, #16]
 801033a:	616b      	str	r3, [r5, #20]
 801033c:	3020      	adds	r0, #32
 801033e:	e7e4      	b.n	801030a <__d2b+0x5a>
 8010340:	4b0b      	ldr	r3, [pc, #44]	; (8010370 <__d2b+0xc0>)
 8010342:	18c0      	adds	r0, r0, r3
 8010344:	4b0b      	ldr	r3, [pc, #44]	; (8010374 <__d2b+0xc4>)
 8010346:	6038      	str	r0, [r7, #0]
 8010348:	18e3      	adds	r3, r4, r3
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	18eb      	adds	r3, r5, r3
 801034e:	6958      	ldr	r0, [r3, #20]
 8010350:	f7ff fd22 	bl	800fd98 <__hi0bits>
 8010354:	0164      	lsls	r4, r4, #5
 8010356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010358:	1a24      	subs	r4, r4, r0
 801035a:	601c      	str	r4, [r3, #0]
 801035c:	e7df      	b.n	801031e <__d2b+0x6e>
 801035e:	46c0      	nop			; (mov r8, r8)
 8010360:	08012a0f 	.word	0x08012a0f
 8010364:	0000030a 	.word	0x0000030a
 8010368:	08012a20 	.word	0x08012a20
 801036c:	fffffbcd 	.word	0xfffffbcd
 8010370:	fffffbce 	.word	0xfffffbce
 8010374:	3fffffff 	.word	0x3fffffff

08010378 <_calloc_r>:
 8010378:	b570      	push	{r4, r5, r6, lr}
 801037a:	0c13      	lsrs	r3, r2, #16
 801037c:	0c0d      	lsrs	r5, r1, #16
 801037e:	d11e      	bne.n	80103be <_calloc_r+0x46>
 8010380:	2b00      	cmp	r3, #0
 8010382:	d10c      	bne.n	801039e <_calloc_r+0x26>
 8010384:	b289      	uxth	r1, r1
 8010386:	b294      	uxth	r4, r2
 8010388:	434c      	muls	r4, r1
 801038a:	0021      	movs	r1, r4
 801038c:	f000 f88c 	bl	80104a8 <_malloc_r>
 8010390:	1e05      	subs	r5, r0, #0
 8010392:	d01b      	beq.n	80103cc <_calloc_r+0x54>
 8010394:	0022      	movs	r2, r4
 8010396:	2100      	movs	r1, #0
 8010398:	f7fe f8ef 	bl	800e57a <memset>
 801039c:	e016      	b.n	80103cc <_calloc_r+0x54>
 801039e:	1c1d      	adds	r5, r3, #0
 80103a0:	1c0b      	adds	r3, r1, #0
 80103a2:	b292      	uxth	r2, r2
 80103a4:	b289      	uxth	r1, r1
 80103a6:	b29c      	uxth	r4, r3
 80103a8:	4351      	muls	r1, r2
 80103aa:	b2ab      	uxth	r3, r5
 80103ac:	4363      	muls	r3, r4
 80103ae:	0c0c      	lsrs	r4, r1, #16
 80103b0:	191c      	adds	r4, r3, r4
 80103b2:	0c22      	lsrs	r2, r4, #16
 80103b4:	d107      	bne.n	80103c6 <_calloc_r+0x4e>
 80103b6:	0424      	lsls	r4, r4, #16
 80103b8:	b289      	uxth	r1, r1
 80103ba:	430c      	orrs	r4, r1
 80103bc:	e7e5      	b.n	801038a <_calloc_r+0x12>
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <_calloc_r+0x4e>
 80103c2:	1c13      	adds	r3, r2, #0
 80103c4:	e7ed      	b.n	80103a2 <_calloc_r+0x2a>
 80103c6:	230c      	movs	r3, #12
 80103c8:	2500      	movs	r5, #0
 80103ca:	6003      	str	r3, [r0, #0]
 80103cc:	0028      	movs	r0, r5
 80103ce:	bd70      	pop	{r4, r5, r6, pc}

080103d0 <_free_r>:
 80103d0:	b570      	push	{r4, r5, r6, lr}
 80103d2:	0005      	movs	r5, r0
 80103d4:	2900      	cmp	r1, #0
 80103d6:	d010      	beq.n	80103fa <_free_r+0x2a>
 80103d8:	1f0c      	subs	r4, r1, #4
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	da00      	bge.n	80103e2 <_free_r+0x12>
 80103e0:	18e4      	adds	r4, r4, r3
 80103e2:	0028      	movs	r0, r5
 80103e4:	f000 fa9e 	bl	8010924 <__malloc_lock>
 80103e8:	4a1d      	ldr	r2, [pc, #116]	; (8010460 <_free_r+0x90>)
 80103ea:	6813      	ldr	r3, [r2, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d105      	bne.n	80103fc <_free_r+0x2c>
 80103f0:	6063      	str	r3, [r4, #4]
 80103f2:	6014      	str	r4, [r2, #0]
 80103f4:	0028      	movs	r0, r5
 80103f6:	f000 fa9d 	bl	8010934 <__malloc_unlock>
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	42a3      	cmp	r3, r4
 80103fe:	d908      	bls.n	8010412 <_free_r+0x42>
 8010400:	6821      	ldr	r1, [r4, #0]
 8010402:	1860      	adds	r0, r4, r1
 8010404:	4283      	cmp	r3, r0
 8010406:	d1f3      	bne.n	80103f0 <_free_r+0x20>
 8010408:	6818      	ldr	r0, [r3, #0]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	1841      	adds	r1, r0, r1
 801040e:	6021      	str	r1, [r4, #0]
 8010410:	e7ee      	b.n	80103f0 <_free_r+0x20>
 8010412:	001a      	movs	r2, r3
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <_free_r+0x4e>
 801041a:	42a3      	cmp	r3, r4
 801041c:	d9f9      	bls.n	8010412 <_free_r+0x42>
 801041e:	6811      	ldr	r1, [r2, #0]
 8010420:	1850      	adds	r0, r2, r1
 8010422:	42a0      	cmp	r0, r4
 8010424:	d10b      	bne.n	801043e <_free_r+0x6e>
 8010426:	6820      	ldr	r0, [r4, #0]
 8010428:	1809      	adds	r1, r1, r0
 801042a:	1850      	adds	r0, r2, r1
 801042c:	6011      	str	r1, [r2, #0]
 801042e:	4283      	cmp	r3, r0
 8010430:	d1e0      	bne.n	80103f4 <_free_r+0x24>
 8010432:	6818      	ldr	r0, [r3, #0]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	1841      	adds	r1, r0, r1
 8010438:	6011      	str	r1, [r2, #0]
 801043a:	6053      	str	r3, [r2, #4]
 801043c:	e7da      	b.n	80103f4 <_free_r+0x24>
 801043e:	42a0      	cmp	r0, r4
 8010440:	d902      	bls.n	8010448 <_free_r+0x78>
 8010442:	230c      	movs	r3, #12
 8010444:	602b      	str	r3, [r5, #0]
 8010446:	e7d5      	b.n	80103f4 <_free_r+0x24>
 8010448:	6821      	ldr	r1, [r4, #0]
 801044a:	1860      	adds	r0, r4, r1
 801044c:	4283      	cmp	r3, r0
 801044e:	d103      	bne.n	8010458 <_free_r+0x88>
 8010450:	6818      	ldr	r0, [r3, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	1841      	adds	r1, r0, r1
 8010456:	6021      	str	r1, [r4, #0]
 8010458:	6063      	str	r3, [r4, #4]
 801045a:	6054      	str	r4, [r2, #4]
 801045c:	e7ca      	b.n	80103f4 <_free_r+0x24>
 801045e:	46c0      	nop			; (mov r8, r8)
 8010460:	2000275c 	.word	0x2000275c

08010464 <sbrk_aligned>:
 8010464:	b570      	push	{r4, r5, r6, lr}
 8010466:	4e0f      	ldr	r6, [pc, #60]	; (80104a4 <sbrk_aligned+0x40>)
 8010468:	000d      	movs	r5, r1
 801046a:	6831      	ldr	r1, [r6, #0]
 801046c:	0004      	movs	r4, r0
 801046e:	2900      	cmp	r1, #0
 8010470:	d102      	bne.n	8010478 <sbrk_aligned+0x14>
 8010472:	f000 f9f1 	bl	8010858 <_sbrk_r>
 8010476:	6030      	str	r0, [r6, #0]
 8010478:	0029      	movs	r1, r5
 801047a:	0020      	movs	r0, r4
 801047c:	f000 f9ec 	bl	8010858 <_sbrk_r>
 8010480:	1c43      	adds	r3, r0, #1
 8010482:	d00a      	beq.n	801049a <sbrk_aligned+0x36>
 8010484:	2303      	movs	r3, #3
 8010486:	1cc5      	adds	r5, r0, #3
 8010488:	439d      	bics	r5, r3
 801048a:	42a8      	cmp	r0, r5
 801048c:	d007      	beq.n	801049e <sbrk_aligned+0x3a>
 801048e:	1a29      	subs	r1, r5, r0
 8010490:	0020      	movs	r0, r4
 8010492:	f000 f9e1 	bl	8010858 <_sbrk_r>
 8010496:	1c43      	adds	r3, r0, #1
 8010498:	d101      	bne.n	801049e <sbrk_aligned+0x3a>
 801049a:	2501      	movs	r5, #1
 801049c:	426d      	negs	r5, r5
 801049e:	0028      	movs	r0, r5
 80104a0:	bd70      	pop	{r4, r5, r6, pc}
 80104a2:	46c0      	nop			; (mov r8, r8)
 80104a4:	20002760 	.word	0x20002760

080104a8 <_malloc_r>:
 80104a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104aa:	2203      	movs	r2, #3
 80104ac:	1ccb      	adds	r3, r1, #3
 80104ae:	4393      	bics	r3, r2
 80104b0:	3308      	adds	r3, #8
 80104b2:	0006      	movs	r6, r0
 80104b4:	001f      	movs	r7, r3
 80104b6:	2b0c      	cmp	r3, #12
 80104b8:	d232      	bcs.n	8010520 <_malloc_r+0x78>
 80104ba:	270c      	movs	r7, #12
 80104bc:	42b9      	cmp	r1, r7
 80104be:	d831      	bhi.n	8010524 <_malloc_r+0x7c>
 80104c0:	0030      	movs	r0, r6
 80104c2:	f000 fa2f 	bl	8010924 <__malloc_lock>
 80104c6:	4d32      	ldr	r5, [pc, #200]	; (8010590 <_malloc_r+0xe8>)
 80104c8:	682b      	ldr	r3, [r5, #0]
 80104ca:	001c      	movs	r4, r3
 80104cc:	2c00      	cmp	r4, #0
 80104ce:	d12e      	bne.n	801052e <_malloc_r+0x86>
 80104d0:	0039      	movs	r1, r7
 80104d2:	0030      	movs	r0, r6
 80104d4:	f7ff ffc6 	bl	8010464 <sbrk_aligned>
 80104d8:	0004      	movs	r4, r0
 80104da:	1c43      	adds	r3, r0, #1
 80104dc:	d11e      	bne.n	801051c <_malloc_r+0x74>
 80104de:	682c      	ldr	r4, [r5, #0]
 80104e0:	0025      	movs	r5, r4
 80104e2:	2d00      	cmp	r5, #0
 80104e4:	d14a      	bne.n	801057c <_malloc_r+0xd4>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	0029      	movs	r1, r5
 80104ea:	18e3      	adds	r3, r4, r3
 80104ec:	0030      	movs	r0, r6
 80104ee:	9301      	str	r3, [sp, #4]
 80104f0:	f000 f9b2 	bl	8010858 <_sbrk_r>
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	4283      	cmp	r3, r0
 80104f8:	d143      	bne.n	8010582 <_malloc_r+0xda>
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	3703      	adds	r7, #3
 80104fe:	1aff      	subs	r7, r7, r3
 8010500:	2303      	movs	r3, #3
 8010502:	439f      	bics	r7, r3
 8010504:	3708      	adds	r7, #8
 8010506:	2f0c      	cmp	r7, #12
 8010508:	d200      	bcs.n	801050c <_malloc_r+0x64>
 801050a:	270c      	movs	r7, #12
 801050c:	0039      	movs	r1, r7
 801050e:	0030      	movs	r0, r6
 8010510:	f7ff ffa8 	bl	8010464 <sbrk_aligned>
 8010514:	1c43      	adds	r3, r0, #1
 8010516:	d034      	beq.n	8010582 <_malloc_r+0xda>
 8010518:	6823      	ldr	r3, [r4, #0]
 801051a:	19df      	adds	r7, r3, r7
 801051c:	6027      	str	r7, [r4, #0]
 801051e:	e013      	b.n	8010548 <_malloc_r+0xa0>
 8010520:	2b00      	cmp	r3, #0
 8010522:	dacb      	bge.n	80104bc <_malloc_r+0x14>
 8010524:	230c      	movs	r3, #12
 8010526:	2500      	movs	r5, #0
 8010528:	6033      	str	r3, [r6, #0]
 801052a:	0028      	movs	r0, r5
 801052c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801052e:	6822      	ldr	r2, [r4, #0]
 8010530:	1bd1      	subs	r1, r2, r7
 8010532:	d420      	bmi.n	8010576 <_malloc_r+0xce>
 8010534:	290b      	cmp	r1, #11
 8010536:	d917      	bls.n	8010568 <_malloc_r+0xc0>
 8010538:	19e2      	adds	r2, r4, r7
 801053a:	6027      	str	r7, [r4, #0]
 801053c:	42a3      	cmp	r3, r4
 801053e:	d111      	bne.n	8010564 <_malloc_r+0xbc>
 8010540:	602a      	str	r2, [r5, #0]
 8010542:	6863      	ldr	r3, [r4, #4]
 8010544:	6011      	str	r1, [r2, #0]
 8010546:	6053      	str	r3, [r2, #4]
 8010548:	0030      	movs	r0, r6
 801054a:	0025      	movs	r5, r4
 801054c:	f000 f9f2 	bl	8010934 <__malloc_unlock>
 8010550:	2207      	movs	r2, #7
 8010552:	350b      	adds	r5, #11
 8010554:	1d23      	adds	r3, r4, #4
 8010556:	4395      	bics	r5, r2
 8010558:	1aea      	subs	r2, r5, r3
 801055a:	429d      	cmp	r5, r3
 801055c:	d0e5      	beq.n	801052a <_malloc_r+0x82>
 801055e:	1b5b      	subs	r3, r3, r5
 8010560:	50a3      	str	r3, [r4, r2]
 8010562:	e7e2      	b.n	801052a <_malloc_r+0x82>
 8010564:	605a      	str	r2, [r3, #4]
 8010566:	e7ec      	b.n	8010542 <_malloc_r+0x9a>
 8010568:	6862      	ldr	r2, [r4, #4]
 801056a:	42a3      	cmp	r3, r4
 801056c:	d101      	bne.n	8010572 <_malloc_r+0xca>
 801056e:	602a      	str	r2, [r5, #0]
 8010570:	e7ea      	b.n	8010548 <_malloc_r+0xa0>
 8010572:	605a      	str	r2, [r3, #4]
 8010574:	e7e8      	b.n	8010548 <_malloc_r+0xa0>
 8010576:	0023      	movs	r3, r4
 8010578:	6864      	ldr	r4, [r4, #4]
 801057a:	e7a7      	b.n	80104cc <_malloc_r+0x24>
 801057c:	002c      	movs	r4, r5
 801057e:	686d      	ldr	r5, [r5, #4]
 8010580:	e7af      	b.n	80104e2 <_malloc_r+0x3a>
 8010582:	230c      	movs	r3, #12
 8010584:	0030      	movs	r0, r6
 8010586:	6033      	str	r3, [r6, #0]
 8010588:	f000 f9d4 	bl	8010934 <__malloc_unlock>
 801058c:	e7cd      	b.n	801052a <_malloc_r+0x82>
 801058e:	46c0      	nop			; (mov r8, r8)
 8010590:	2000275c 	.word	0x2000275c

08010594 <__ssputs_r>:
 8010594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010596:	688e      	ldr	r6, [r1, #8]
 8010598:	b085      	sub	sp, #20
 801059a:	0007      	movs	r7, r0
 801059c:	000c      	movs	r4, r1
 801059e:	9203      	str	r2, [sp, #12]
 80105a0:	9301      	str	r3, [sp, #4]
 80105a2:	429e      	cmp	r6, r3
 80105a4:	d83c      	bhi.n	8010620 <__ssputs_r+0x8c>
 80105a6:	2390      	movs	r3, #144	; 0x90
 80105a8:	898a      	ldrh	r2, [r1, #12]
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	421a      	tst	r2, r3
 80105ae:	d034      	beq.n	801061a <__ssputs_r+0x86>
 80105b0:	6909      	ldr	r1, [r1, #16]
 80105b2:	6823      	ldr	r3, [r4, #0]
 80105b4:	6960      	ldr	r0, [r4, #20]
 80105b6:	1a5b      	subs	r3, r3, r1
 80105b8:	9302      	str	r3, [sp, #8]
 80105ba:	2303      	movs	r3, #3
 80105bc:	4343      	muls	r3, r0
 80105be:	0fdd      	lsrs	r5, r3, #31
 80105c0:	18ed      	adds	r5, r5, r3
 80105c2:	9b01      	ldr	r3, [sp, #4]
 80105c4:	9802      	ldr	r0, [sp, #8]
 80105c6:	3301      	adds	r3, #1
 80105c8:	181b      	adds	r3, r3, r0
 80105ca:	106d      	asrs	r5, r5, #1
 80105cc:	42ab      	cmp	r3, r5
 80105ce:	d900      	bls.n	80105d2 <__ssputs_r+0x3e>
 80105d0:	001d      	movs	r5, r3
 80105d2:	0553      	lsls	r3, r2, #21
 80105d4:	d532      	bpl.n	801063c <__ssputs_r+0xa8>
 80105d6:	0029      	movs	r1, r5
 80105d8:	0038      	movs	r0, r7
 80105da:	f7ff ff65 	bl	80104a8 <_malloc_r>
 80105de:	1e06      	subs	r6, r0, #0
 80105e0:	d109      	bne.n	80105f6 <__ssputs_r+0x62>
 80105e2:	230c      	movs	r3, #12
 80105e4:	603b      	str	r3, [r7, #0]
 80105e6:	2340      	movs	r3, #64	; 0x40
 80105e8:	2001      	movs	r0, #1
 80105ea:	89a2      	ldrh	r2, [r4, #12]
 80105ec:	4240      	negs	r0, r0
 80105ee:	4313      	orrs	r3, r2
 80105f0:	81a3      	strh	r3, [r4, #12]
 80105f2:	b005      	add	sp, #20
 80105f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105f6:	9a02      	ldr	r2, [sp, #8]
 80105f8:	6921      	ldr	r1, [r4, #16]
 80105fa:	f7fd ffb5 	bl	800e568 <memcpy>
 80105fe:	89a3      	ldrh	r3, [r4, #12]
 8010600:	4a14      	ldr	r2, [pc, #80]	; (8010654 <__ssputs_r+0xc0>)
 8010602:	401a      	ands	r2, r3
 8010604:	2380      	movs	r3, #128	; 0x80
 8010606:	4313      	orrs	r3, r2
 8010608:	81a3      	strh	r3, [r4, #12]
 801060a:	9b02      	ldr	r3, [sp, #8]
 801060c:	6126      	str	r6, [r4, #16]
 801060e:	18f6      	adds	r6, r6, r3
 8010610:	6026      	str	r6, [r4, #0]
 8010612:	6165      	str	r5, [r4, #20]
 8010614:	9e01      	ldr	r6, [sp, #4]
 8010616:	1aed      	subs	r5, r5, r3
 8010618:	60a5      	str	r5, [r4, #8]
 801061a:	9b01      	ldr	r3, [sp, #4]
 801061c:	429e      	cmp	r6, r3
 801061e:	d900      	bls.n	8010622 <__ssputs_r+0x8e>
 8010620:	9e01      	ldr	r6, [sp, #4]
 8010622:	0032      	movs	r2, r6
 8010624:	9903      	ldr	r1, [sp, #12]
 8010626:	6820      	ldr	r0, [r4, #0]
 8010628:	f000 f968 	bl	80108fc <memmove>
 801062c:	68a3      	ldr	r3, [r4, #8]
 801062e:	2000      	movs	r0, #0
 8010630:	1b9b      	subs	r3, r3, r6
 8010632:	60a3      	str	r3, [r4, #8]
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	199e      	adds	r6, r3, r6
 8010638:	6026      	str	r6, [r4, #0]
 801063a:	e7da      	b.n	80105f2 <__ssputs_r+0x5e>
 801063c:	002a      	movs	r2, r5
 801063e:	0038      	movs	r0, r7
 8010640:	f000 f980 	bl	8010944 <_realloc_r>
 8010644:	1e06      	subs	r6, r0, #0
 8010646:	d1e0      	bne.n	801060a <__ssputs_r+0x76>
 8010648:	0038      	movs	r0, r7
 801064a:	6921      	ldr	r1, [r4, #16]
 801064c:	f7ff fec0 	bl	80103d0 <_free_r>
 8010650:	e7c7      	b.n	80105e2 <__ssputs_r+0x4e>
 8010652:	46c0      	nop			; (mov r8, r8)
 8010654:	fffffb7f 	.word	0xfffffb7f

08010658 <_svfiprintf_r>:
 8010658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801065a:	b0a1      	sub	sp, #132	; 0x84
 801065c:	9003      	str	r0, [sp, #12]
 801065e:	001d      	movs	r5, r3
 8010660:	898b      	ldrh	r3, [r1, #12]
 8010662:	000f      	movs	r7, r1
 8010664:	0016      	movs	r6, r2
 8010666:	061b      	lsls	r3, r3, #24
 8010668:	d511      	bpl.n	801068e <_svfiprintf_r+0x36>
 801066a:	690b      	ldr	r3, [r1, #16]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10e      	bne.n	801068e <_svfiprintf_r+0x36>
 8010670:	2140      	movs	r1, #64	; 0x40
 8010672:	f7ff ff19 	bl	80104a8 <_malloc_r>
 8010676:	6038      	str	r0, [r7, #0]
 8010678:	6138      	str	r0, [r7, #16]
 801067a:	2800      	cmp	r0, #0
 801067c:	d105      	bne.n	801068a <_svfiprintf_r+0x32>
 801067e:	230c      	movs	r3, #12
 8010680:	9a03      	ldr	r2, [sp, #12]
 8010682:	3801      	subs	r0, #1
 8010684:	6013      	str	r3, [r2, #0]
 8010686:	b021      	add	sp, #132	; 0x84
 8010688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801068a:	2340      	movs	r3, #64	; 0x40
 801068c:	617b      	str	r3, [r7, #20]
 801068e:	2300      	movs	r3, #0
 8010690:	ac08      	add	r4, sp, #32
 8010692:	6163      	str	r3, [r4, #20]
 8010694:	3320      	adds	r3, #32
 8010696:	7663      	strb	r3, [r4, #25]
 8010698:	3310      	adds	r3, #16
 801069a:	76a3      	strb	r3, [r4, #26]
 801069c:	9507      	str	r5, [sp, #28]
 801069e:	0035      	movs	r5, r6
 80106a0:	782b      	ldrb	r3, [r5, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d001      	beq.n	80106aa <_svfiprintf_r+0x52>
 80106a6:	2b25      	cmp	r3, #37	; 0x25
 80106a8:	d147      	bne.n	801073a <_svfiprintf_r+0xe2>
 80106aa:	1bab      	subs	r3, r5, r6
 80106ac:	9305      	str	r3, [sp, #20]
 80106ae:	42b5      	cmp	r5, r6
 80106b0:	d00c      	beq.n	80106cc <_svfiprintf_r+0x74>
 80106b2:	0032      	movs	r2, r6
 80106b4:	0039      	movs	r1, r7
 80106b6:	9803      	ldr	r0, [sp, #12]
 80106b8:	f7ff ff6c 	bl	8010594 <__ssputs_r>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	d100      	bne.n	80106c2 <_svfiprintf_r+0x6a>
 80106c0:	e0ae      	b.n	8010820 <_svfiprintf_r+0x1c8>
 80106c2:	6962      	ldr	r2, [r4, #20]
 80106c4:	9b05      	ldr	r3, [sp, #20]
 80106c6:	4694      	mov	ip, r2
 80106c8:	4463      	add	r3, ip
 80106ca:	6163      	str	r3, [r4, #20]
 80106cc:	782b      	ldrb	r3, [r5, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d100      	bne.n	80106d4 <_svfiprintf_r+0x7c>
 80106d2:	e0a5      	b.n	8010820 <_svfiprintf_r+0x1c8>
 80106d4:	2201      	movs	r2, #1
 80106d6:	2300      	movs	r3, #0
 80106d8:	4252      	negs	r2, r2
 80106da:	6062      	str	r2, [r4, #4]
 80106dc:	a904      	add	r1, sp, #16
 80106de:	3254      	adds	r2, #84	; 0x54
 80106e0:	1852      	adds	r2, r2, r1
 80106e2:	1c6e      	adds	r6, r5, #1
 80106e4:	6023      	str	r3, [r4, #0]
 80106e6:	60e3      	str	r3, [r4, #12]
 80106e8:	60a3      	str	r3, [r4, #8]
 80106ea:	7013      	strb	r3, [r2, #0]
 80106ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80106ee:	2205      	movs	r2, #5
 80106f0:	7831      	ldrb	r1, [r6, #0]
 80106f2:	4854      	ldr	r0, [pc, #336]	; (8010844 <_svfiprintf_r+0x1ec>)
 80106f4:	f7ff fa98 	bl	800fc28 <memchr>
 80106f8:	1c75      	adds	r5, r6, #1
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d11f      	bne.n	801073e <_svfiprintf_r+0xe6>
 80106fe:	6822      	ldr	r2, [r4, #0]
 8010700:	06d3      	lsls	r3, r2, #27
 8010702:	d504      	bpl.n	801070e <_svfiprintf_r+0xb6>
 8010704:	2353      	movs	r3, #83	; 0x53
 8010706:	a904      	add	r1, sp, #16
 8010708:	185b      	adds	r3, r3, r1
 801070a:	2120      	movs	r1, #32
 801070c:	7019      	strb	r1, [r3, #0]
 801070e:	0713      	lsls	r3, r2, #28
 8010710:	d504      	bpl.n	801071c <_svfiprintf_r+0xc4>
 8010712:	2353      	movs	r3, #83	; 0x53
 8010714:	a904      	add	r1, sp, #16
 8010716:	185b      	adds	r3, r3, r1
 8010718:	212b      	movs	r1, #43	; 0x2b
 801071a:	7019      	strb	r1, [r3, #0]
 801071c:	7833      	ldrb	r3, [r6, #0]
 801071e:	2b2a      	cmp	r3, #42	; 0x2a
 8010720:	d016      	beq.n	8010750 <_svfiprintf_r+0xf8>
 8010722:	0035      	movs	r5, r6
 8010724:	2100      	movs	r1, #0
 8010726:	200a      	movs	r0, #10
 8010728:	68e3      	ldr	r3, [r4, #12]
 801072a:	782a      	ldrb	r2, [r5, #0]
 801072c:	1c6e      	adds	r6, r5, #1
 801072e:	3a30      	subs	r2, #48	; 0x30
 8010730:	2a09      	cmp	r2, #9
 8010732:	d94e      	bls.n	80107d2 <_svfiprintf_r+0x17a>
 8010734:	2900      	cmp	r1, #0
 8010736:	d111      	bne.n	801075c <_svfiprintf_r+0x104>
 8010738:	e017      	b.n	801076a <_svfiprintf_r+0x112>
 801073a:	3501      	adds	r5, #1
 801073c:	e7b0      	b.n	80106a0 <_svfiprintf_r+0x48>
 801073e:	4b41      	ldr	r3, [pc, #260]	; (8010844 <_svfiprintf_r+0x1ec>)
 8010740:	6822      	ldr	r2, [r4, #0]
 8010742:	1ac0      	subs	r0, r0, r3
 8010744:	2301      	movs	r3, #1
 8010746:	4083      	lsls	r3, r0
 8010748:	4313      	orrs	r3, r2
 801074a:	002e      	movs	r6, r5
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	e7ce      	b.n	80106ee <_svfiprintf_r+0x96>
 8010750:	9b07      	ldr	r3, [sp, #28]
 8010752:	1d19      	adds	r1, r3, #4
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	9107      	str	r1, [sp, #28]
 8010758:	2b00      	cmp	r3, #0
 801075a:	db01      	blt.n	8010760 <_svfiprintf_r+0x108>
 801075c:	930b      	str	r3, [sp, #44]	; 0x2c
 801075e:	e004      	b.n	801076a <_svfiprintf_r+0x112>
 8010760:	425b      	negs	r3, r3
 8010762:	60e3      	str	r3, [r4, #12]
 8010764:	2302      	movs	r3, #2
 8010766:	4313      	orrs	r3, r2
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	782b      	ldrb	r3, [r5, #0]
 801076c:	2b2e      	cmp	r3, #46	; 0x2e
 801076e:	d10a      	bne.n	8010786 <_svfiprintf_r+0x12e>
 8010770:	786b      	ldrb	r3, [r5, #1]
 8010772:	2b2a      	cmp	r3, #42	; 0x2a
 8010774:	d135      	bne.n	80107e2 <_svfiprintf_r+0x18a>
 8010776:	9b07      	ldr	r3, [sp, #28]
 8010778:	3502      	adds	r5, #2
 801077a:	1d1a      	adds	r2, r3, #4
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	9207      	str	r2, [sp, #28]
 8010780:	2b00      	cmp	r3, #0
 8010782:	db2b      	blt.n	80107dc <_svfiprintf_r+0x184>
 8010784:	9309      	str	r3, [sp, #36]	; 0x24
 8010786:	4e30      	ldr	r6, [pc, #192]	; (8010848 <_svfiprintf_r+0x1f0>)
 8010788:	2203      	movs	r2, #3
 801078a:	0030      	movs	r0, r6
 801078c:	7829      	ldrb	r1, [r5, #0]
 801078e:	f7ff fa4b 	bl	800fc28 <memchr>
 8010792:	2800      	cmp	r0, #0
 8010794:	d006      	beq.n	80107a4 <_svfiprintf_r+0x14c>
 8010796:	2340      	movs	r3, #64	; 0x40
 8010798:	1b80      	subs	r0, r0, r6
 801079a:	4083      	lsls	r3, r0
 801079c:	6822      	ldr	r2, [r4, #0]
 801079e:	3501      	adds	r5, #1
 80107a0:	4313      	orrs	r3, r2
 80107a2:	6023      	str	r3, [r4, #0]
 80107a4:	7829      	ldrb	r1, [r5, #0]
 80107a6:	2206      	movs	r2, #6
 80107a8:	4828      	ldr	r0, [pc, #160]	; (801084c <_svfiprintf_r+0x1f4>)
 80107aa:	1c6e      	adds	r6, r5, #1
 80107ac:	7621      	strb	r1, [r4, #24]
 80107ae:	f7ff fa3b 	bl	800fc28 <memchr>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	d03c      	beq.n	8010830 <_svfiprintf_r+0x1d8>
 80107b6:	4b26      	ldr	r3, [pc, #152]	; (8010850 <_svfiprintf_r+0x1f8>)
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d125      	bne.n	8010808 <_svfiprintf_r+0x1b0>
 80107bc:	2207      	movs	r2, #7
 80107be:	9b07      	ldr	r3, [sp, #28]
 80107c0:	3307      	adds	r3, #7
 80107c2:	4393      	bics	r3, r2
 80107c4:	3308      	adds	r3, #8
 80107c6:	9307      	str	r3, [sp, #28]
 80107c8:	6963      	ldr	r3, [r4, #20]
 80107ca:	9a04      	ldr	r2, [sp, #16]
 80107cc:	189b      	adds	r3, r3, r2
 80107ce:	6163      	str	r3, [r4, #20]
 80107d0:	e765      	b.n	801069e <_svfiprintf_r+0x46>
 80107d2:	4343      	muls	r3, r0
 80107d4:	0035      	movs	r5, r6
 80107d6:	2101      	movs	r1, #1
 80107d8:	189b      	adds	r3, r3, r2
 80107da:	e7a6      	b.n	801072a <_svfiprintf_r+0xd2>
 80107dc:	2301      	movs	r3, #1
 80107de:	425b      	negs	r3, r3
 80107e0:	e7d0      	b.n	8010784 <_svfiprintf_r+0x12c>
 80107e2:	2300      	movs	r3, #0
 80107e4:	200a      	movs	r0, #10
 80107e6:	001a      	movs	r2, r3
 80107e8:	3501      	adds	r5, #1
 80107ea:	6063      	str	r3, [r4, #4]
 80107ec:	7829      	ldrb	r1, [r5, #0]
 80107ee:	1c6e      	adds	r6, r5, #1
 80107f0:	3930      	subs	r1, #48	; 0x30
 80107f2:	2909      	cmp	r1, #9
 80107f4:	d903      	bls.n	80107fe <_svfiprintf_r+0x1a6>
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d0c5      	beq.n	8010786 <_svfiprintf_r+0x12e>
 80107fa:	9209      	str	r2, [sp, #36]	; 0x24
 80107fc:	e7c3      	b.n	8010786 <_svfiprintf_r+0x12e>
 80107fe:	4342      	muls	r2, r0
 8010800:	0035      	movs	r5, r6
 8010802:	2301      	movs	r3, #1
 8010804:	1852      	adds	r2, r2, r1
 8010806:	e7f1      	b.n	80107ec <_svfiprintf_r+0x194>
 8010808:	ab07      	add	r3, sp, #28
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	003a      	movs	r2, r7
 801080e:	0021      	movs	r1, r4
 8010810:	4b10      	ldr	r3, [pc, #64]	; (8010854 <_svfiprintf_r+0x1fc>)
 8010812:	9803      	ldr	r0, [sp, #12]
 8010814:	f7fd ff64 	bl	800e6e0 <_printf_float>
 8010818:	9004      	str	r0, [sp, #16]
 801081a:	9b04      	ldr	r3, [sp, #16]
 801081c:	3301      	adds	r3, #1
 801081e:	d1d3      	bne.n	80107c8 <_svfiprintf_r+0x170>
 8010820:	89bb      	ldrh	r3, [r7, #12]
 8010822:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010824:	065b      	lsls	r3, r3, #25
 8010826:	d400      	bmi.n	801082a <_svfiprintf_r+0x1d2>
 8010828:	e72d      	b.n	8010686 <_svfiprintf_r+0x2e>
 801082a:	2001      	movs	r0, #1
 801082c:	4240      	negs	r0, r0
 801082e:	e72a      	b.n	8010686 <_svfiprintf_r+0x2e>
 8010830:	ab07      	add	r3, sp, #28
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	003a      	movs	r2, r7
 8010836:	0021      	movs	r1, r4
 8010838:	4b06      	ldr	r3, [pc, #24]	; (8010854 <_svfiprintf_r+0x1fc>)
 801083a:	9803      	ldr	r0, [sp, #12]
 801083c:	f7fe fa02 	bl	800ec44 <_printf_i>
 8010840:	e7ea      	b.n	8010818 <_svfiprintf_r+0x1c0>
 8010842:	46c0      	nop			; (mov r8, r8)
 8010844:	08012b7c 	.word	0x08012b7c
 8010848:	08012b82 	.word	0x08012b82
 801084c:	08012b86 	.word	0x08012b86
 8010850:	0800e6e1 	.word	0x0800e6e1
 8010854:	08010595 	.word	0x08010595

08010858 <_sbrk_r>:
 8010858:	2300      	movs	r3, #0
 801085a:	b570      	push	{r4, r5, r6, lr}
 801085c:	4d06      	ldr	r5, [pc, #24]	; (8010878 <_sbrk_r+0x20>)
 801085e:	0004      	movs	r4, r0
 8010860:	0008      	movs	r0, r1
 8010862:	602b      	str	r3, [r5, #0]
 8010864:	f7f3 fd78 	bl	8004358 <_sbrk>
 8010868:	1c43      	adds	r3, r0, #1
 801086a:	d103      	bne.n	8010874 <_sbrk_r+0x1c>
 801086c:	682b      	ldr	r3, [r5, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d000      	beq.n	8010874 <_sbrk_r+0x1c>
 8010872:	6023      	str	r3, [r4, #0]
 8010874:	bd70      	pop	{r4, r5, r6, pc}
 8010876:	46c0      	nop			; (mov r8, r8)
 8010878:	20002764 	.word	0x20002764

0801087c <__assert_func>:
 801087c:	b530      	push	{r4, r5, lr}
 801087e:	0014      	movs	r4, r2
 8010880:	001a      	movs	r2, r3
 8010882:	4b09      	ldr	r3, [pc, #36]	; (80108a8 <__assert_func+0x2c>)
 8010884:	0005      	movs	r5, r0
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	b085      	sub	sp, #20
 801088a:	68d8      	ldr	r0, [r3, #12]
 801088c:	4b07      	ldr	r3, [pc, #28]	; (80108ac <__assert_func+0x30>)
 801088e:	2c00      	cmp	r4, #0
 8010890:	d101      	bne.n	8010896 <__assert_func+0x1a>
 8010892:	4b07      	ldr	r3, [pc, #28]	; (80108b0 <__assert_func+0x34>)
 8010894:	001c      	movs	r4, r3
 8010896:	9301      	str	r3, [sp, #4]
 8010898:	9100      	str	r1, [sp, #0]
 801089a:	002b      	movs	r3, r5
 801089c:	4905      	ldr	r1, [pc, #20]	; (80108b4 <__assert_func+0x38>)
 801089e:	9402      	str	r4, [sp, #8]
 80108a0:	f000 f80a 	bl	80108b8 <fiprintf>
 80108a4:	f000 faba 	bl	8010e1c <abort>
 80108a8:	20000024 	.word	0x20000024
 80108ac:	08012b8d 	.word	0x08012b8d
 80108b0:	08012bc8 	.word	0x08012bc8
 80108b4:	08012b9a 	.word	0x08012b9a

080108b8 <fiprintf>:
 80108b8:	b40e      	push	{r1, r2, r3}
 80108ba:	b503      	push	{r0, r1, lr}
 80108bc:	0001      	movs	r1, r0
 80108be:	ab03      	add	r3, sp, #12
 80108c0:	4804      	ldr	r0, [pc, #16]	; (80108d4 <fiprintf+0x1c>)
 80108c2:	cb04      	ldmia	r3!, {r2}
 80108c4:	6800      	ldr	r0, [r0, #0]
 80108c6:	9301      	str	r3, [sp, #4]
 80108c8:	f000 f892 	bl	80109f0 <_vfiprintf_r>
 80108cc:	b002      	add	sp, #8
 80108ce:	bc08      	pop	{r3}
 80108d0:	b003      	add	sp, #12
 80108d2:	4718      	bx	r3
 80108d4:	20000024 	.word	0x20000024

080108d8 <__ascii_mbtowc>:
 80108d8:	b082      	sub	sp, #8
 80108da:	2900      	cmp	r1, #0
 80108dc:	d100      	bne.n	80108e0 <__ascii_mbtowc+0x8>
 80108de:	a901      	add	r1, sp, #4
 80108e0:	1e10      	subs	r0, r2, #0
 80108e2:	d006      	beq.n	80108f2 <__ascii_mbtowc+0x1a>
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d006      	beq.n	80108f6 <__ascii_mbtowc+0x1e>
 80108e8:	7813      	ldrb	r3, [r2, #0]
 80108ea:	600b      	str	r3, [r1, #0]
 80108ec:	7810      	ldrb	r0, [r2, #0]
 80108ee:	1e43      	subs	r3, r0, #1
 80108f0:	4198      	sbcs	r0, r3
 80108f2:	b002      	add	sp, #8
 80108f4:	4770      	bx	lr
 80108f6:	2002      	movs	r0, #2
 80108f8:	4240      	negs	r0, r0
 80108fa:	e7fa      	b.n	80108f2 <__ascii_mbtowc+0x1a>

080108fc <memmove>:
 80108fc:	b510      	push	{r4, lr}
 80108fe:	4288      	cmp	r0, r1
 8010900:	d902      	bls.n	8010908 <memmove+0xc>
 8010902:	188b      	adds	r3, r1, r2
 8010904:	4298      	cmp	r0, r3
 8010906:	d303      	bcc.n	8010910 <memmove+0x14>
 8010908:	2300      	movs	r3, #0
 801090a:	e007      	b.n	801091c <memmove+0x20>
 801090c:	5c8b      	ldrb	r3, [r1, r2]
 801090e:	5483      	strb	r3, [r0, r2]
 8010910:	3a01      	subs	r2, #1
 8010912:	d2fb      	bcs.n	801090c <memmove+0x10>
 8010914:	bd10      	pop	{r4, pc}
 8010916:	5ccc      	ldrb	r4, [r1, r3]
 8010918:	54c4      	strb	r4, [r0, r3]
 801091a:	3301      	adds	r3, #1
 801091c:	429a      	cmp	r2, r3
 801091e:	d1fa      	bne.n	8010916 <memmove+0x1a>
 8010920:	e7f8      	b.n	8010914 <memmove+0x18>
	...

08010924 <__malloc_lock>:
 8010924:	b510      	push	{r4, lr}
 8010926:	4802      	ldr	r0, [pc, #8]	; (8010930 <__malloc_lock+0xc>)
 8010928:	f000 fc4f 	bl	80111ca <__retarget_lock_acquire_recursive>
 801092c:	bd10      	pop	{r4, pc}
 801092e:	46c0      	nop			; (mov r8, r8)
 8010930:	20002768 	.word	0x20002768

08010934 <__malloc_unlock>:
 8010934:	b510      	push	{r4, lr}
 8010936:	4802      	ldr	r0, [pc, #8]	; (8010940 <__malloc_unlock+0xc>)
 8010938:	f000 fc48 	bl	80111cc <__retarget_lock_release_recursive>
 801093c:	bd10      	pop	{r4, pc}
 801093e:	46c0      	nop			; (mov r8, r8)
 8010940:	20002768 	.word	0x20002768

08010944 <_realloc_r>:
 8010944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010946:	0007      	movs	r7, r0
 8010948:	000e      	movs	r6, r1
 801094a:	0014      	movs	r4, r2
 801094c:	2900      	cmp	r1, #0
 801094e:	d105      	bne.n	801095c <_realloc_r+0x18>
 8010950:	0011      	movs	r1, r2
 8010952:	f7ff fda9 	bl	80104a8 <_malloc_r>
 8010956:	0005      	movs	r5, r0
 8010958:	0028      	movs	r0, r5
 801095a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801095c:	2a00      	cmp	r2, #0
 801095e:	d103      	bne.n	8010968 <_realloc_r+0x24>
 8010960:	f7ff fd36 	bl	80103d0 <_free_r>
 8010964:	0025      	movs	r5, r4
 8010966:	e7f7      	b.n	8010958 <_realloc_r+0x14>
 8010968:	f000 fc9e 	bl	80112a8 <_malloc_usable_size_r>
 801096c:	9001      	str	r0, [sp, #4]
 801096e:	4284      	cmp	r4, r0
 8010970:	d803      	bhi.n	801097a <_realloc_r+0x36>
 8010972:	0035      	movs	r5, r6
 8010974:	0843      	lsrs	r3, r0, #1
 8010976:	42a3      	cmp	r3, r4
 8010978:	d3ee      	bcc.n	8010958 <_realloc_r+0x14>
 801097a:	0021      	movs	r1, r4
 801097c:	0038      	movs	r0, r7
 801097e:	f7ff fd93 	bl	80104a8 <_malloc_r>
 8010982:	1e05      	subs	r5, r0, #0
 8010984:	d0e8      	beq.n	8010958 <_realloc_r+0x14>
 8010986:	9b01      	ldr	r3, [sp, #4]
 8010988:	0022      	movs	r2, r4
 801098a:	429c      	cmp	r4, r3
 801098c:	d900      	bls.n	8010990 <_realloc_r+0x4c>
 801098e:	001a      	movs	r2, r3
 8010990:	0031      	movs	r1, r6
 8010992:	0028      	movs	r0, r5
 8010994:	f7fd fde8 	bl	800e568 <memcpy>
 8010998:	0031      	movs	r1, r6
 801099a:	0038      	movs	r0, r7
 801099c:	f7ff fd18 	bl	80103d0 <_free_r>
 80109a0:	e7da      	b.n	8010958 <_realloc_r+0x14>

080109a2 <__sfputc_r>:
 80109a2:	6893      	ldr	r3, [r2, #8]
 80109a4:	b510      	push	{r4, lr}
 80109a6:	3b01      	subs	r3, #1
 80109a8:	6093      	str	r3, [r2, #8]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	da04      	bge.n	80109b8 <__sfputc_r+0x16>
 80109ae:	6994      	ldr	r4, [r2, #24]
 80109b0:	42a3      	cmp	r3, r4
 80109b2:	db07      	blt.n	80109c4 <__sfputc_r+0x22>
 80109b4:	290a      	cmp	r1, #10
 80109b6:	d005      	beq.n	80109c4 <__sfputc_r+0x22>
 80109b8:	6813      	ldr	r3, [r2, #0]
 80109ba:	1c58      	adds	r0, r3, #1
 80109bc:	6010      	str	r0, [r2, #0]
 80109be:	7019      	strb	r1, [r3, #0]
 80109c0:	0008      	movs	r0, r1
 80109c2:	bd10      	pop	{r4, pc}
 80109c4:	f000 f94e 	bl	8010c64 <__swbuf_r>
 80109c8:	0001      	movs	r1, r0
 80109ca:	e7f9      	b.n	80109c0 <__sfputc_r+0x1e>

080109cc <__sfputs_r>:
 80109cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ce:	0006      	movs	r6, r0
 80109d0:	000f      	movs	r7, r1
 80109d2:	0014      	movs	r4, r2
 80109d4:	18d5      	adds	r5, r2, r3
 80109d6:	42ac      	cmp	r4, r5
 80109d8:	d101      	bne.n	80109de <__sfputs_r+0x12>
 80109da:	2000      	movs	r0, #0
 80109dc:	e007      	b.n	80109ee <__sfputs_r+0x22>
 80109de:	7821      	ldrb	r1, [r4, #0]
 80109e0:	003a      	movs	r2, r7
 80109e2:	0030      	movs	r0, r6
 80109e4:	f7ff ffdd 	bl	80109a2 <__sfputc_r>
 80109e8:	3401      	adds	r4, #1
 80109ea:	1c43      	adds	r3, r0, #1
 80109ec:	d1f3      	bne.n	80109d6 <__sfputs_r+0xa>
 80109ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109f0 <_vfiprintf_r>:
 80109f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109f2:	b0a1      	sub	sp, #132	; 0x84
 80109f4:	0006      	movs	r6, r0
 80109f6:	000c      	movs	r4, r1
 80109f8:	001f      	movs	r7, r3
 80109fa:	9203      	str	r2, [sp, #12]
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d004      	beq.n	8010a0a <_vfiprintf_r+0x1a>
 8010a00:	6983      	ldr	r3, [r0, #24]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <_vfiprintf_r+0x1a>
 8010a06:	f000 fb3f 	bl	8011088 <__sinit>
 8010a0a:	4b8e      	ldr	r3, [pc, #568]	; (8010c44 <_vfiprintf_r+0x254>)
 8010a0c:	429c      	cmp	r4, r3
 8010a0e:	d11c      	bne.n	8010a4a <_vfiprintf_r+0x5a>
 8010a10:	6874      	ldr	r4, [r6, #4]
 8010a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a14:	07db      	lsls	r3, r3, #31
 8010a16:	d405      	bmi.n	8010a24 <_vfiprintf_r+0x34>
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	059b      	lsls	r3, r3, #22
 8010a1c:	d402      	bmi.n	8010a24 <_vfiprintf_r+0x34>
 8010a1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a20:	f000 fbd3 	bl	80111ca <__retarget_lock_acquire_recursive>
 8010a24:	89a3      	ldrh	r3, [r4, #12]
 8010a26:	071b      	lsls	r3, r3, #28
 8010a28:	d502      	bpl.n	8010a30 <_vfiprintf_r+0x40>
 8010a2a:	6923      	ldr	r3, [r4, #16]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d11d      	bne.n	8010a6c <_vfiprintf_r+0x7c>
 8010a30:	0021      	movs	r1, r4
 8010a32:	0030      	movs	r0, r6
 8010a34:	f000 f97a 	bl	8010d2c <__swsetup_r>
 8010a38:	2800      	cmp	r0, #0
 8010a3a:	d017      	beq.n	8010a6c <_vfiprintf_r+0x7c>
 8010a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a3e:	07db      	lsls	r3, r3, #31
 8010a40:	d50d      	bpl.n	8010a5e <_vfiprintf_r+0x6e>
 8010a42:	2001      	movs	r0, #1
 8010a44:	4240      	negs	r0, r0
 8010a46:	b021      	add	sp, #132	; 0x84
 8010a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a4a:	4b7f      	ldr	r3, [pc, #508]	; (8010c48 <_vfiprintf_r+0x258>)
 8010a4c:	429c      	cmp	r4, r3
 8010a4e:	d101      	bne.n	8010a54 <_vfiprintf_r+0x64>
 8010a50:	68b4      	ldr	r4, [r6, #8]
 8010a52:	e7de      	b.n	8010a12 <_vfiprintf_r+0x22>
 8010a54:	4b7d      	ldr	r3, [pc, #500]	; (8010c4c <_vfiprintf_r+0x25c>)
 8010a56:	429c      	cmp	r4, r3
 8010a58:	d1db      	bne.n	8010a12 <_vfiprintf_r+0x22>
 8010a5a:	68f4      	ldr	r4, [r6, #12]
 8010a5c:	e7d9      	b.n	8010a12 <_vfiprintf_r+0x22>
 8010a5e:	89a3      	ldrh	r3, [r4, #12]
 8010a60:	059b      	lsls	r3, r3, #22
 8010a62:	d4ee      	bmi.n	8010a42 <_vfiprintf_r+0x52>
 8010a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a66:	f000 fbb1 	bl	80111cc <__retarget_lock_release_recursive>
 8010a6a:	e7ea      	b.n	8010a42 <_vfiprintf_r+0x52>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	ad08      	add	r5, sp, #32
 8010a70:	616b      	str	r3, [r5, #20]
 8010a72:	3320      	adds	r3, #32
 8010a74:	766b      	strb	r3, [r5, #25]
 8010a76:	3310      	adds	r3, #16
 8010a78:	76ab      	strb	r3, [r5, #26]
 8010a7a:	9707      	str	r7, [sp, #28]
 8010a7c:	9f03      	ldr	r7, [sp, #12]
 8010a7e:	783b      	ldrb	r3, [r7, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d001      	beq.n	8010a88 <_vfiprintf_r+0x98>
 8010a84:	2b25      	cmp	r3, #37	; 0x25
 8010a86:	d14e      	bne.n	8010b26 <_vfiprintf_r+0x136>
 8010a88:	9b03      	ldr	r3, [sp, #12]
 8010a8a:	1afb      	subs	r3, r7, r3
 8010a8c:	9305      	str	r3, [sp, #20]
 8010a8e:	9b03      	ldr	r3, [sp, #12]
 8010a90:	429f      	cmp	r7, r3
 8010a92:	d00d      	beq.n	8010ab0 <_vfiprintf_r+0xc0>
 8010a94:	9b05      	ldr	r3, [sp, #20]
 8010a96:	0021      	movs	r1, r4
 8010a98:	0030      	movs	r0, r6
 8010a9a:	9a03      	ldr	r2, [sp, #12]
 8010a9c:	f7ff ff96 	bl	80109cc <__sfputs_r>
 8010aa0:	1c43      	adds	r3, r0, #1
 8010aa2:	d100      	bne.n	8010aa6 <_vfiprintf_r+0xb6>
 8010aa4:	e0b5      	b.n	8010c12 <_vfiprintf_r+0x222>
 8010aa6:	696a      	ldr	r2, [r5, #20]
 8010aa8:	9b05      	ldr	r3, [sp, #20]
 8010aaa:	4694      	mov	ip, r2
 8010aac:	4463      	add	r3, ip
 8010aae:	616b      	str	r3, [r5, #20]
 8010ab0:	783b      	ldrb	r3, [r7, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d100      	bne.n	8010ab8 <_vfiprintf_r+0xc8>
 8010ab6:	e0ac      	b.n	8010c12 <_vfiprintf_r+0x222>
 8010ab8:	2201      	movs	r2, #1
 8010aba:	1c7b      	adds	r3, r7, #1
 8010abc:	9303      	str	r3, [sp, #12]
 8010abe:	2300      	movs	r3, #0
 8010ac0:	4252      	negs	r2, r2
 8010ac2:	606a      	str	r2, [r5, #4]
 8010ac4:	a904      	add	r1, sp, #16
 8010ac6:	3254      	adds	r2, #84	; 0x54
 8010ac8:	1852      	adds	r2, r2, r1
 8010aca:	602b      	str	r3, [r5, #0]
 8010acc:	60eb      	str	r3, [r5, #12]
 8010ace:	60ab      	str	r3, [r5, #8]
 8010ad0:	7013      	strb	r3, [r2, #0]
 8010ad2:	65ab      	str	r3, [r5, #88]	; 0x58
 8010ad4:	9b03      	ldr	r3, [sp, #12]
 8010ad6:	2205      	movs	r2, #5
 8010ad8:	7819      	ldrb	r1, [r3, #0]
 8010ada:	485d      	ldr	r0, [pc, #372]	; (8010c50 <_vfiprintf_r+0x260>)
 8010adc:	f7ff f8a4 	bl	800fc28 <memchr>
 8010ae0:	9b03      	ldr	r3, [sp, #12]
 8010ae2:	1c5f      	adds	r7, r3, #1
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d120      	bne.n	8010b2a <_vfiprintf_r+0x13a>
 8010ae8:	682a      	ldr	r2, [r5, #0]
 8010aea:	06d3      	lsls	r3, r2, #27
 8010aec:	d504      	bpl.n	8010af8 <_vfiprintf_r+0x108>
 8010aee:	2353      	movs	r3, #83	; 0x53
 8010af0:	a904      	add	r1, sp, #16
 8010af2:	185b      	adds	r3, r3, r1
 8010af4:	2120      	movs	r1, #32
 8010af6:	7019      	strb	r1, [r3, #0]
 8010af8:	0713      	lsls	r3, r2, #28
 8010afa:	d504      	bpl.n	8010b06 <_vfiprintf_r+0x116>
 8010afc:	2353      	movs	r3, #83	; 0x53
 8010afe:	a904      	add	r1, sp, #16
 8010b00:	185b      	adds	r3, r3, r1
 8010b02:	212b      	movs	r1, #43	; 0x2b
 8010b04:	7019      	strb	r1, [r3, #0]
 8010b06:	9b03      	ldr	r3, [sp, #12]
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8010b0c:	d016      	beq.n	8010b3c <_vfiprintf_r+0x14c>
 8010b0e:	2100      	movs	r1, #0
 8010b10:	68eb      	ldr	r3, [r5, #12]
 8010b12:	9f03      	ldr	r7, [sp, #12]
 8010b14:	783a      	ldrb	r2, [r7, #0]
 8010b16:	1c78      	adds	r0, r7, #1
 8010b18:	3a30      	subs	r2, #48	; 0x30
 8010b1a:	4684      	mov	ip, r0
 8010b1c:	2a09      	cmp	r2, #9
 8010b1e:	d94f      	bls.n	8010bc0 <_vfiprintf_r+0x1d0>
 8010b20:	2900      	cmp	r1, #0
 8010b22:	d111      	bne.n	8010b48 <_vfiprintf_r+0x158>
 8010b24:	e017      	b.n	8010b56 <_vfiprintf_r+0x166>
 8010b26:	3701      	adds	r7, #1
 8010b28:	e7a9      	b.n	8010a7e <_vfiprintf_r+0x8e>
 8010b2a:	4b49      	ldr	r3, [pc, #292]	; (8010c50 <_vfiprintf_r+0x260>)
 8010b2c:	682a      	ldr	r2, [r5, #0]
 8010b2e:	1ac0      	subs	r0, r0, r3
 8010b30:	2301      	movs	r3, #1
 8010b32:	4083      	lsls	r3, r0
 8010b34:	4313      	orrs	r3, r2
 8010b36:	602b      	str	r3, [r5, #0]
 8010b38:	9703      	str	r7, [sp, #12]
 8010b3a:	e7cb      	b.n	8010ad4 <_vfiprintf_r+0xe4>
 8010b3c:	9b07      	ldr	r3, [sp, #28]
 8010b3e:	1d19      	adds	r1, r3, #4
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	9107      	str	r1, [sp, #28]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	db01      	blt.n	8010b4c <_vfiprintf_r+0x15c>
 8010b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b4a:	e004      	b.n	8010b56 <_vfiprintf_r+0x166>
 8010b4c:	425b      	negs	r3, r3
 8010b4e:	60eb      	str	r3, [r5, #12]
 8010b50:	2302      	movs	r3, #2
 8010b52:	4313      	orrs	r3, r2
 8010b54:	602b      	str	r3, [r5, #0]
 8010b56:	783b      	ldrb	r3, [r7, #0]
 8010b58:	2b2e      	cmp	r3, #46	; 0x2e
 8010b5a:	d10a      	bne.n	8010b72 <_vfiprintf_r+0x182>
 8010b5c:	787b      	ldrb	r3, [r7, #1]
 8010b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8010b60:	d137      	bne.n	8010bd2 <_vfiprintf_r+0x1e2>
 8010b62:	9b07      	ldr	r3, [sp, #28]
 8010b64:	3702      	adds	r7, #2
 8010b66:	1d1a      	adds	r2, r3, #4
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	9207      	str	r2, [sp, #28]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	db2d      	blt.n	8010bcc <_vfiprintf_r+0x1dc>
 8010b70:	9309      	str	r3, [sp, #36]	; 0x24
 8010b72:	2203      	movs	r2, #3
 8010b74:	7839      	ldrb	r1, [r7, #0]
 8010b76:	4837      	ldr	r0, [pc, #220]	; (8010c54 <_vfiprintf_r+0x264>)
 8010b78:	f7ff f856 	bl	800fc28 <memchr>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d007      	beq.n	8010b90 <_vfiprintf_r+0x1a0>
 8010b80:	4b34      	ldr	r3, [pc, #208]	; (8010c54 <_vfiprintf_r+0x264>)
 8010b82:	682a      	ldr	r2, [r5, #0]
 8010b84:	1ac0      	subs	r0, r0, r3
 8010b86:	2340      	movs	r3, #64	; 0x40
 8010b88:	4083      	lsls	r3, r0
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	3701      	adds	r7, #1
 8010b8e:	602b      	str	r3, [r5, #0]
 8010b90:	7839      	ldrb	r1, [r7, #0]
 8010b92:	1c7b      	adds	r3, r7, #1
 8010b94:	2206      	movs	r2, #6
 8010b96:	4830      	ldr	r0, [pc, #192]	; (8010c58 <_vfiprintf_r+0x268>)
 8010b98:	9303      	str	r3, [sp, #12]
 8010b9a:	7629      	strb	r1, [r5, #24]
 8010b9c:	f7ff f844 	bl	800fc28 <memchr>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d045      	beq.n	8010c30 <_vfiprintf_r+0x240>
 8010ba4:	4b2d      	ldr	r3, [pc, #180]	; (8010c5c <_vfiprintf_r+0x26c>)
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d127      	bne.n	8010bfa <_vfiprintf_r+0x20a>
 8010baa:	2207      	movs	r2, #7
 8010bac:	9b07      	ldr	r3, [sp, #28]
 8010bae:	3307      	adds	r3, #7
 8010bb0:	4393      	bics	r3, r2
 8010bb2:	3308      	adds	r3, #8
 8010bb4:	9307      	str	r3, [sp, #28]
 8010bb6:	696b      	ldr	r3, [r5, #20]
 8010bb8:	9a04      	ldr	r2, [sp, #16]
 8010bba:	189b      	adds	r3, r3, r2
 8010bbc:	616b      	str	r3, [r5, #20]
 8010bbe:	e75d      	b.n	8010a7c <_vfiprintf_r+0x8c>
 8010bc0:	210a      	movs	r1, #10
 8010bc2:	434b      	muls	r3, r1
 8010bc4:	4667      	mov	r7, ip
 8010bc6:	189b      	adds	r3, r3, r2
 8010bc8:	3909      	subs	r1, #9
 8010bca:	e7a3      	b.n	8010b14 <_vfiprintf_r+0x124>
 8010bcc:	2301      	movs	r3, #1
 8010bce:	425b      	negs	r3, r3
 8010bd0:	e7ce      	b.n	8010b70 <_vfiprintf_r+0x180>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	001a      	movs	r2, r3
 8010bd6:	3701      	adds	r7, #1
 8010bd8:	606b      	str	r3, [r5, #4]
 8010bda:	7839      	ldrb	r1, [r7, #0]
 8010bdc:	1c78      	adds	r0, r7, #1
 8010bde:	3930      	subs	r1, #48	; 0x30
 8010be0:	4684      	mov	ip, r0
 8010be2:	2909      	cmp	r1, #9
 8010be4:	d903      	bls.n	8010bee <_vfiprintf_r+0x1fe>
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d0c3      	beq.n	8010b72 <_vfiprintf_r+0x182>
 8010bea:	9209      	str	r2, [sp, #36]	; 0x24
 8010bec:	e7c1      	b.n	8010b72 <_vfiprintf_r+0x182>
 8010bee:	230a      	movs	r3, #10
 8010bf0:	435a      	muls	r2, r3
 8010bf2:	4667      	mov	r7, ip
 8010bf4:	1852      	adds	r2, r2, r1
 8010bf6:	3b09      	subs	r3, #9
 8010bf8:	e7ef      	b.n	8010bda <_vfiprintf_r+0x1ea>
 8010bfa:	ab07      	add	r3, sp, #28
 8010bfc:	9300      	str	r3, [sp, #0]
 8010bfe:	0022      	movs	r2, r4
 8010c00:	0029      	movs	r1, r5
 8010c02:	0030      	movs	r0, r6
 8010c04:	4b16      	ldr	r3, [pc, #88]	; (8010c60 <_vfiprintf_r+0x270>)
 8010c06:	f7fd fd6b 	bl	800e6e0 <_printf_float>
 8010c0a:	9004      	str	r0, [sp, #16]
 8010c0c:	9b04      	ldr	r3, [sp, #16]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	d1d1      	bne.n	8010bb6 <_vfiprintf_r+0x1c6>
 8010c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c14:	07db      	lsls	r3, r3, #31
 8010c16:	d405      	bmi.n	8010c24 <_vfiprintf_r+0x234>
 8010c18:	89a3      	ldrh	r3, [r4, #12]
 8010c1a:	059b      	lsls	r3, r3, #22
 8010c1c:	d402      	bmi.n	8010c24 <_vfiprintf_r+0x234>
 8010c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c20:	f000 fad4 	bl	80111cc <__retarget_lock_release_recursive>
 8010c24:	89a3      	ldrh	r3, [r4, #12]
 8010c26:	065b      	lsls	r3, r3, #25
 8010c28:	d500      	bpl.n	8010c2c <_vfiprintf_r+0x23c>
 8010c2a:	e70a      	b.n	8010a42 <_vfiprintf_r+0x52>
 8010c2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010c2e:	e70a      	b.n	8010a46 <_vfiprintf_r+0x56>
 8010c30:	ab07      	add	r3, sp, #28
 8010c32:	9300      	str	r3, [sp, #0]
 8010c34:	0022      	movs	r2, r4
 8010c36:	0029      	movs	r1, r5
 8010c38:	0030      	movs	r0, r6
 8010c3a:	4b09      	ldr	r3, [pc, #36]	; (8010c60 <_vfiprintf_r+0x270>)
 8010c3c:	f7fe f802 	bl	800ec44 <_printf_i>
 8010c40:	e7e3      	b.n	8010c0a <_vfiprintf_r+0x21a>
 8010c42:	46c0      	nop			; (mov r8, r8)
 8010c44:	08012cf4 	.word	0x08012cf4
 8010c48:	08012d14 	.word	0x08012d14
 8010c4c:	08012cd4 	.word	0x08012cd4
 8010c50:	08012b7c 	.word	0x08012b7c
 8010c54:	08012b82 	.word	0x08012b82
 8010c58:	08012b86 	.word	0x08012b86
 8010c5c:	0800e6e1 	.word	0x0800e6e1
 8010c60:	080109cd 	.word	0x080109cd

08010c64 <__swbuf_r>:
 8010c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c66:	0005      	movs	r5, r0
 8010c68:	000e      	movs	r6, r1
 8010c6a:	0014      	movs	r4, r2
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d004      	beq.n	8010c7a <__swbuf_r+0x16>
 8010c70:	6983      	ldr	r3, [r0, #24]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <__swbuf_r+0x16>
 8010c76:	f000 fa07 	bl	8011088 <__sinit>
 8010c7a:	4b22      	ldr	r3, [pc, #136]	; (8010d04 <__swbuf_r+0xa0>)
 8010c7c:	429c      	cmp	r4, r3
 8010c7e:	d12e      	bne.n	8010cde <__swbuf_r+0x7a>
 8010c80:	686c      	ldr	r4, [r5, #4]
 8010c82:	69a3      	ldr	r3, [r4, #24]
 8010c84:	60a3      	str	r3, [r4, #8]
 8010c86:	89a3      	ldrh	r3, [r4, #12]
 8010c88:	071b      	lsls	r3, r3, #28
 8010c8a:	d532      	bpl.n	8010cf2 <__swbuf_r+0x8e>
 8010c8c:	6923      	ldr	r3, [r4, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d02f      	beq.n	8010cf2 <__swbuf_r+0x8e>
 8010c92:	6823      	ldr	r3, [r4, #0]
 8010c94:	6922      	ldr	r2, [r4, #16]
 8010c96:	b2f7      	uxtb	r7, r6
 8010c98:	1a98      	subs	r0, r3, r2
 8010c9a:	6963      	ldr	r3, [r4, #20]
 8010c9c:	b2f6      	uxtb	r6, r6
 8010c9e:	4283      	cmp	r3, r0
 8010ca0:	dc05      	bgt.n	8010cae <__swbuf_r+0x4a>
 8010ca2:	0021      	movs	r1, r4
 8010ca4:	0028      	movs	r0, r5
 8010ca6:	f000 f94d 	bl	8010f44 <_fflush_r>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d127      	bne.n	8010cfe <__swbuf_r+0x9a>
 8010cae:	68a3      	ldr	r3, [r4, #8]
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	60a3      	str	r3, [r4, #8]
 8010cb6:	6823      	ldr	r3, [r4, #0]
 8010cb8:	1c5a      	adds	r2, r3, #1
 8010cba:	6022      	str	r2, [r4, #0]
 8010cbc:	701f      	strb	r7, [r3, #0]
 8010cbe:	6963      	ldr	r3, [r4, #20]
 8010cc0:	4283      	cmp	r3, r0
 8010cc2:	d004      	beq.n	8010cce <__swbuf_r+0x6a>
 8010cc4:	89a3      	ldrh	r3, [r4, #12]
 8010cc6:	07db      	lsls	r3, r3, #31
 8010cc8:	d507      	bpl.n	8010cda <__swbuf_r+0x76>
 8010cca:	2e0a      	cmp	r6, #10
 8010ccc:	d105      	bne.n	8010cda <__swbuf_r+0x76>
 8010cce:	0021      	movs	r1, r4
 8010cd0:	0028      	movs	r0, r5
 8010cd2:	f000 f937 	bl	8010f44 <_fflush_r>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d111      	bne.n	8010cfe <__swbuf_r+0x9a>
 8010cda:	0030      	movs	r0, r6
 8010cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cde:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <__swbuf_r+0xa4>)
 8010ce0:	429c      	cmp	r4, r3
 8010ce2:	d101      	bne.n	8010ce8 <__swbuf_r+0x84>
 8010ce4:	68ac      	ldr	r4, [r5, #8]
 8010ce6:	e7cc      	b.n	8010c82 <__swbuf_r+0x1e>
 8010ce8:	4b08      	ldr	r3, [pc, #32]	; (8010d0c <__swbuf_r+0xa8>)
 8010cea:	429c      	cmp	r4, r3
 8010cec:	d1c9      	bne.n	8010c82 <__swbuf_r+0x1e>
 8010cee:	68ec      	ldr	r4, [r5, #12]
 8010cf0:	e7c7      	b.n	8010c82 <__swbuf_r+0x1e>
 8010cf2:	0021      	movs	r1, r4
 8010cf4:	0028      	movs	r0, r5
 8010cf6:	f000 f819 	bl	8010d2c <__swsetup_r>
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	d0c9      	beq.n	8010c92 <__swbuf_r+0x2e>
 8010cfe:	2601      	movs	r6, #1
 8010d00:	4276      	negs	r6, r6
 8010d02:	e7ea      	b.n	8010cda <__swbuf_r+0x76>
 8010d04:	08012cf4 	.word	0x08012cf4
 8010d08:	08012d14 	.word	0x08012d14
 8010d0c:	08012cd4 	.word	0x08012cd4

08010d10 <__ascii_wctomb>:
 8010d10:	0003      	movs	r3, r0
 8010d12:	1e08      	subs	r0, r1, #0
 8010d14:	d005      	beq.n	8010d22 <__ascii_wctomb+0x12>
 8010d16:	2aff      	cmp	r2, #255	; 0xff
 8010d18:	d904      	bls.n	8010d24 <__ascii_wctomb+0x14>
 8010d1a:	228a      	movs	r2, #138	; 0x8a
 8010d1c:	2001      	movs	r0, #1
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	4240      	negs	r0, r0
 8010d22:	4770      	bx	lr
 8010d24:	2001      	movs	r0, #1
 8010d26:	700a      	strb	r2, [r1, #0]
 8010d28:	e7fb      	b.n	8010d22 <__ascii_wctomb+0x12>
	...

08010d2c <__swsetup_r>:
 8010d2c:	4b37      	ldr	r3, [pc, #220]	; (8010e0c <__swsetup_r+0xe0>)
 8010d2e:	b570      	push	{r4, r5, r6, lr}
 8010d30:	681d      	ldr	r5, [r3, #0]
 8010d32:	0006      	movs	r6, r0
 8010d34:	000c      	movs	r4, r1
 8010d36:	2d00      	cmp	r5, #0
 8010d38:	d005      	beq.n	8010d46 <__swsetup_r+0x1a>
 8010d3a:	69ab      	ldr	r3, [r5, #24]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d102      	bne.n	8010d46 <__swsetup_r+0x1a>
 8010d40:	0028      	movs	r0, r5
 8010d42:	f000 f9a1 	bl	8011088 <__sinit>
 8010d46:	4b32      	ldr	r3, [pc, #200]	; (8010e10 <__swsetup_r+0xe4>)
 8010d48:	429c      	cmp	r4, r3
 8010d4a:	d10f      	bne.n	8010d6c <__swsetup_r+0x40>
 8010d4c:	686c      	ldr	r4, [r5, #4]
 8010d4e:	230c      	movs	r3, #12
 8010d50:	5ee2      	ldrsh	r2, [r4, r3]
 8010d52:	b293      	uxth	r3, r2
 8010d54:	0711      	lsls	r1, r2, #28
 8010d56:	d42d      	bmi.n	8010db4 <__swsetup_r+0x88>
 8010d58:	06d9      	lsls	r1, r3, #27
 8010d5a:	d411      	bmi.n	8010d80 <__swsetup_r+0x54>
 8010d5c:	2309      	movs	r3, #9
 8010d5e:	2001      	movs	r0, #1
 8010d60:	6033      	str	r3, [r6, #0]
 8010d62:	3337      	adds	r3, #55	; 0x37
 8010d64:	4313      	orrs	r3, r2
 8010d66:	81a3      	strh	r3, [r4, #12]
 8010d68:	4240      	negs	r0, r0
 8010d6a:	bd70      	pop	{r4, r5, r6, pc}
 8010d6c:	4b29      	ldr	r3, [pc, #164]	; (8010e14 <__swsetup_r+0xe8>)
 8010d6e:	429c      	cmp	r4, r3
 8010d70:	d101      	bne.n	8010d76 <__swsetup_r+0x4a>
 8010d72:	68ac      	ldr	r4, [r5, #8]
 8010d74:	e7eb      	b.n	8010d4e <__swsetup_r+0x22>
 8010d76:	4b28      	ldr	r3, [pc, #160]	; (8010e18 <__swsetup_r+0xec>)
 8010d78:	429c      	cmp	r4, r3
 8010d7a:	d1e8      	bne.n	8010d4e <__swsetup_r+0x22>
 8010d7c:	68ec      	ldr	r4, [r5, #12]
 8010d7e:	e7e6      	b.n	8010d4e <__swsetup_r+0x22>
 8010d80:	075b      	lsls	r3, r3, #29
 8010d82:	d513      	bpl.n	8010dac <__swsetup_r+0x80>
 8010d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d86:	2900      	cmp	r1, #0
 8010d88:	d008      	beq.n	8010d9c <__swsetup_r+0x70>
 8010d8a:	0023      	movs	r3, r4
 8010d8c:	3344      	adds	r3, #68	; 0x44
 8010d8e:	4299      	cmp	r1, r3
 8010d90:	d002      	beq.n	8010d98 <__swsetup_r+0x6c>
 8010d92:	0030      	movs	r0, r6
 8010d94:	f7ff fb1c 	bl	80103d0 <_free_r>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8010d9c:	2224      	movs	r2, #36	; 0x24
 8010d9e:	89a3      	ldrh	r3, [r4, #12]
 8010da0:	4393      	bics	r3, r2
 8010da2:	81a3      	strh	r3, [r4, #12]
 8010da4:	2300      	movs	r3, #0
 8010da6:	6063      	str	r3, [r4, #4]
 8010da8:	6923      	ldr	r3, [r4, #16]
 8010daa:	6023      	str	r3, [r4, #0]
 8010dac:	2308      	movs	r3, #8
 8010dae:	89a2      	ldrh	r2, [r4, #12]
 8010db0:	4313      	orrs	r3, r2
 8010db2:	81a3      	strh	r3, [r4, #12]
 8010db4:	6923      	ldr	r3, [r4, #16]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10b      	bne.n	8010dd2 <__swsetup_r+0xa6>
 8010dba:	21a0      	movs	r1, #160	; 0xa0
 8010dbc:	2280      	movs	r2, #128	; 0x80
 8010dbe:	89a3      	ldrh	r3, [r4, #12]
 8010dc0:	0089      	lsls	r1, r1, #2
 8010dc2:	0092      	lsls	r2, r2, #2
 8010dc4:	400b      	ands	r3, r1
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d003      	beq.n	8010dd2 <__swsetup_r+0xa6>
 8010dca:	0021      	movs	r1, r4
 8010dcc:	0030      	movs	r0, r6
 8010dce:	f000 fa27 	bl	8011220 <__smakebuf_r>
 8010dd2:	220c      	movs	r2, #12
 8010dd4:	5ea3      	ldrsh	r3, [r4, r2]
 8010dd6:	2001      	movs	r0, #1
 8010dd8:	001a      	movs	r2, r3
 8010dda:	b299      	uxth	r1, r3
 8010ddc:	4002      	ands	r2, r0
 8010dde:	4203      	tst	r3, r0
 8010de0:	d00f      	beq.n	8010e02 <__swsetup_r+0xd6>
 8010de2:	2200      	movs	r2, #0
 8010de4:	60a2      	str	r2, [r4, #8]
 8010de6:	6962      	ldr	r2, [r4, #20]
 8010de8:	4252      	negs	r2, r2
 8010dea:	61a2      	str	r2, [r4, #24]
 8010dec:	2000      	movs	r0, #0
 8010dee:	6922      	ldr	r2, [r4, #16]
 8010df0:	4282      	cmp	r2, r0
 8010df2:	d1ba      	bne.n	8010d6a <__swsetup_r+0x3e>
 8010df4:	060a      	lsls	r2, r1, #24
 8010df6:	d5b8      	bpl.n	8010d6a <__swsetup_r+0x3e>
 8010df8:	2240      	movs	r2, #64	; 0x40
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	81a3      	strh	r3, [r4, #12]
 8010dfe:	3801      	subs	r0, #1
 8010e00:	e7b3      	b.n	8010d6a <__swsetup_r+0x3e>
 8010e02:	0788      	lsls	r0, r1, #30
 8010e04:	d400      	bmi.n	8010e08 <__swsetup_r+0xdc>
 8010e06:	6962      	ldr	r2, [r4, #20]
 8010e08:	60a2      	str	r2, [r4, #8]
 8010e0a:	e7ef      	b.n	8010dec <__swsetup_r+0xc0>
 8010e0c:	20000024 	.word	0x20000024
 8010e10:	08012cf4 	.word	0x08012cf4
 8010e14:	08012d14 	.word	0x08012d14
 8010e18:	08012cd4 	.word	0x08012cd4

08010e1c <abort>:
 8010e1c:	2006      	movs	r0, #6
 8010e1e:	b510      	push	{r4, lr}
 8010e20:	f000 fa74 	bl	801130c <raise>
 8010e24:	2001      	movs	r0, #1
 8010e26:	f7f3 fa25 	bl	8004274 <_exit>
	...

08010e2c <__sflush_r>:
 8010e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e2e:	898b      	ldrh	r3, [r1, #12]
 8010e30:	0005      	movs	r5, r0
 8010e32:	000c      	movs	r4, r1
 8010e34:	071a      	lsls	r2, r3, #28
 8010e36:	d45f      	bmi.n	8010ef8 <__sflush_r+0xcc>
 8010e38:	684a      	ldr	r2, [r1, #4]
 8010e3a:	2a00      	cmp	r2, #0
 8010e3c:	dc04      	bgt.n	8010e48 <__sflush_r+0x1c>
 8010e3e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010e40:	2a00      	cmp	r2, #0
 8010e42:	dc01      	bgt.n	8010e48 <__sflush_r+0x1c>
 8010e44:	2000      	movs	r0, #0
 8010e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010e48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010e4a:	2f00      	cmp	r7, #0
 8010e4c:	d0fa      	beq.n	8010e44 <__sflush_r+0x18>
 8010e4e:	2200      	movs	r2, #0
 8010e50:	2180      	movs	r1, #128	; 0x80
 8010e52:	682e      	ldr	r6, [r5, #0]
 8010e54:	602a      	str	r2, [r5, #0]
 8010e56:	001a      	movs	r2, r3
 8010e58:	0149      	lsls	r1, r1, #5
 8010e5a:	400a      	ands	r2, r1
 8010e5c:	420b      	tst	r3, r1
 8010e5e:	d034      	beq.n	8010eca <__sflush_r+0x9e>
 8010e60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e62:	89a3      	ldrh	r3, [r4, #12]
 8010e64:	075b      	lsls	r3, r3, #29
 8010e66:	d506      	bpl.n	8010e76 <__sflush_r+0x4a>
 8010e68:	6863      	ldr	r3, [r4, #4]
 8010e6a:	1ac0      	subs	r0, r0, r3
 8010e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d001      	beq.n	8010e76 <__sflush_r+0x4a>
 8010e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e74:	1ac0      	subs	r0, r0, r3
 8010e76:	0002      	movs	r2, r0
 8010e78:	6a21      	ldr	r1, [r4, #32]
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	0028      	movs	r0, r5
 8010e7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010e80:	47b8      	blx	r7
 8010e82:	89a1      	ldrh	r1, [r4, #12]
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d106      	bne.n	8010e96 <__sflush_r+0x6a>
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	2b1d      	cmp	r3, #29
 8010e8c:	d831      	bhi.n	8010ef2 <__sflush_r+0xc6>
 8010e8e:	4a2c      	ldr	r2, [pc, #176]	; (8010f40 <__sflush_r+0x114>)
 8010e90:	40da      	lsrs	r2, r3
 8010e92:	07d3      	lsls	r3, r2, #31
 8010e94:	d52d      	bpl.n	8010ef2 <__sflush_r+0xc6>
 8010e96:	2300      	movs	r3, #0
 8010e98:	6063      	str	r3, [r4, #4]
 8010e9a:	6923      	ldr	r3, [r4, #16]
 8010e9c:	6023      	str	r3, [r4, #0]
 8010e9e:	04cb      	lsls	r3, r1, #19
 8010ea0:	d505      	bpl.n	8010eae <__sflush_r+0x82>
 8010ea2:	1c43      	adds	r3, r0, #1
 8010ea4:	d102      	bne.n	8010eac <__sflush_r+0x80>
 8010ea6:	682b      	ldr	r3, [r5, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d100      	bne.n	8010eae <__sflush_r+0x82>
 8010eac:	6560      	str	r0, [r4, #84]	; 0x54
 8010eae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010eb0:	602e      	str	r6, [r5, #0]
 8010eb2:	2900      	cmp	r1, #0
 8010eb4:	d0c6      	beq.n	8010e44 <__sflush_r+0x18>
 8010eb6:	0023      	movs	r3, r4
 8010eb8:	3344      	adds	r3, #68	; 0x44
 8010eba:	4299      	cmp	r1, r3
 8010ebc:	d002      	beq.n	8010ec4 <__sflush_r+0x98>
 8010ebe:	0028      	movs	r0, r5
 8010ec0:	f7ff fa86 	bl	80103d0 <_free_r>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	6360      	str	r0, [r4, #52]	; 0x34
 8010ec8:	e7bd      	b.n	8010e46 <__sflush_r+0x1a>
 8010eca:	2301      	movs	r3, #1
 8010ecc:	0028      	movs	r0, r5
 8010ece:	6a21      	ldr	r1, [r4, #32]
 8010ed0:	47b8      	blx	r7
 8010ed2:	1c43      	adds	r3, r0, #1
 8010ed4:	d1c5      	bne.n	8010e62 <__sflush_r+0x36>
 8010ed6:	682b      	ldr	r3, [r5, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d0c2      	beq.n	8010e62 <__sflush_r+0x36>
 8010edc:	2b1d      	cmp	r3, #29
 8010ede:	d001      	beq.n	8010ee4 <__sflush_r+0xb8>
 8010ee0:	2b16      	cmp	r3, #22
 8010ee2:	d101      	bne.n	8010ee8 <__sflush_r+0xbc>
 8010ee4:	602e      	str	r6, [r5, #0]
 8010ee6:	e7ad      	b.n	8010e44 <__sflush_r+0x18>
 8010ee8:	2340      	movs	r3, #64	; 0x40
 8010eea:	89a2      	ldrh	r2, [r4, #12]
 8010eec:	4313      	orrs	r3, r2
 8010eee:	81a3      	strh	r3, [r4, #12]
 8010ef0:	e7a9      	b.n	8010e46 <__sflush_r+0x1a>
 8010ef2:	2340      	movs	r3, #64	; 0x40
 8010ef4:	430b      	orrs	r3, r1
 8010ef6:	e7fa      	b.n	8010eee <__sflush_r+0xc2>
 8010ef8:	690f      	ldr	r7, [r1, #16]
 8010efa:	2f00      	cmp	r7, #0
 8010efc:	d0a2      	beq.n	8010e44 <__sflush_r+0x18>
 8010efe:	680a      	ldr	r2, [r1, #0]
 8010f00:	600f      	str	r7, [r1, #0]
 8010f02:	1bd2      	subs	r2, r2, r7
 8010f04:	9201      	str	r2, [sp, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	079b      	lsls	r3, r3, #30
 8010f0a:	d100      	bne.n	8010f0e <__sflush_r+0xe2>
 8010f0c:	694a      	ldr	r2, [r1, #20]
 8010f0e:	60a2      	str	r2, [r4, #8]
 8010f10:	9b01      	ldr	r3, [sp, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	dc00      	bgt.n	8010f18 <__sflush_r+0xec>
 8010f16:	e795      	b.n	8010e44 <__sflush_r+0x18>
 8010f18:	003a      	movs	r2, r7
 8010f1a:	0028      	movs	r0, r5
 8010f1c:	9b01      	ldr	r3, [sp, #4]
 8010f1e:	6a21      	ldr	r1, [r4, #32]
 8010f20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f22:	47b0      	blx	r6
 8010f24:	2800      	cmp	r0, #0
 8010f26:	dc06      	bgt.n	8010f36 <__sflush_r+0x10a>
 8010f28:	2340      	movs	r3, #64	; 0x40
 8010f2a:	2001      	movs	r0, #1
 8010f2c:	89a2      	ldrh	r2, [r4, #12]
 8010f2e:	4240      	negs	r0, r0
 8010f30:	4313      	orrs	r3, r2
 8010f32:	81a3      	strh	r3, [r4, #12]
 8010f34:	e787      	b.n	8010e46 <__sflush_r+0x1a>
 8010f36:	9b01      	ldr	r3, [sp, #4]
 8010f38:	183f      	adds	r7, r7, r0
 8010f3a:	1a1b      	subs	r3, r3, r0
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	e7e7      	b.n	8010f10 <__sflush_r+0xe4>
 8010f40:	20400001 	.word	0x20400001

08010f44 <_fflush_r>:
 8010f44:	690b      	ldr	r3, [r1, #16]
 8010f46:	b570      	push	{r4, r5, r6, lr}
 8010f48:	0005      	movs	r5, r0
 8010f4a:	000c      	movs	r4, r1
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <_fflush_r+0x12>
 8010f50:	2500      	movs	r5, #0
 8010f52:	0028      	movs	r0, r5
 8010f54:	bd70      	pop	{r4, r5, r6, pc}
 8010f56:	2800      	cmp	r0, #0
 8010f58:	d004      	beq.n	8010f64 <_fflush_r+0x20>
 8010f5a:	6983      	ldr	r3, [r0, #24]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d101      	bne.n	8010f64 <_fflush_r+0x20>
 8010f60:	f000 f892 	bl	8011088 <__sinit>
 8010f64:	4b14      	ldr	r3, [pc, #80]	; (8010fb8 <_fflush_r+0x74>)
 8010f66:	429c      	cmp	r4, r3
 8010f68:	d11b      	bne.n	8010fa2 <_fflush_r+0x5e>
 8010f6a:	686c      	ldr	r4, [r5, #4]
 8010f6c:	220c      	movs	r2, #12
 8010f6e:	5ea3      	ldrsh	r3, [r4, r2]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d0ed      	beq.n	8010f50 <_fflush_r+0xc>
 8010f74:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f76:	07d2      	lsls	r2, r2, #31
 8010f78:	d404      	bmi.n	8010f84 <_fflush_r+0x40>
 8010f7a:	059b      	lsls	r3, r3, #22
 8010f7c:	d402      	bmi.n	8010f84 <_fflush_r+0x40>
 8010f7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f80:	f000 f923 	bl	80111ca <__retarget_lock_acquire_recursive>
 8010f84:	0028      	movs	r0, r5
 8010f86:	0021      	movs	r1, r4
 8010f88:	f7ff ff50 	bl	8010e2c <__sflush_r>
 8010f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f8e:	0005      	movs	r5, r0
 8010f90:	07db      	lsls	r3, r3, #31
 8010f92:	d4de      	bmi.n	8010f52 <_fflush_r+0xe>
 8010f94:	89a3      	ldrh	r3, [r4, #12]
 8010f96:	059b      	lsls	r3, r3, #22
 8010f98:	d4db      	bmi.n	8010f52 <_fflush_r+0xe>
 8010f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f9c:	f000 f916 	bl	80111cc <__retarget_lock_release_recursive>
 8010fa0:	e7d7      	b.n	8010f52 <_fflush_r+0xe>
 8010fa2:	4b06      	ldr	r3, [pc, #24]	; (8010fbc <_fflush_r+0x78>)
 8010fa4:	429c      	cmp	r4, r3
 8010fa6:	d101      	bne.n	8010fac <_fflush_r+0x68>
 8010fa8:	68ac      	ldr	r4, [r5, #8]
 8010faa:	e7df      	b.n	8010f6c <_fflush_r+0x28>
 8010fac:	4b04      	ldr	r3, [pc, #16]	; (8010fc0 <_fflush_r+0x7c>)
 8010fae:	429c      	cmp	r4, r3
 8010fb0:	d1dc      	bne.n	8010f6c <_fflush_r+0x28>
 8010fb2:	68ec      	ldr	r4, [r5, #12]
 8010fb4:	e7da      	b.n	8010f6c <_fflush_r+0x28>
 8010fb6:	46c0      	nop			; (mov r8, r8)
 8010fb8:	08012cf4 	.word	0x08012cf4
 8010fbc:	08012d14 	.word	0x08012d14
 8010fc0:	08012cd4 	.word	0x08012cd4

08010fc4 <std>:
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	b510      	push	{r4, lr}
 8010fc8:	0004      	movs	r4, r0
 8010fca:	6003      	str	r3, [r0, #0]
 8010fcc:	6043      	str	r3, [r0, #4]
 8010fce:	6083      	str	r3, [r0, #8]
 8010fd0:	8181      	strh	r1, [r0, #12]
 8010fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8010fd4:	0019      	movs	r1, r3
 8010fd6:	81c2      	strh	r2, [r0, #14]
 8010fd8:	6103      	str	r3, [r0, #16]
 8010fda:	6143      	str	r3, [r0, #20]
 8010fdc:	6183      	str	r3, [r0, #24]
 8010fde:	2208      	movs	r2, #8
 8010fe0:	305c      	adds	r0, #92	; 0x5c
 8010fe2:	f7fd faca 	bl	800e57a <memset>
 8010fe6:	4b05      	ldr	r3, [pc, #20]	; (8010ffc <std+0x38>)
 8010fe8:	6224      	str	r4, [r4, #32]
 8010fea:	6263      	str	r3, [r4, #36]	; 0x24
 8010fec:	4b04      	ldr	r3, [pc, #16]	; (8011000 <std+0x3c>)
 8010fee:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ff0:	4b04      	ldr	r3, [pc, #16]	; (8011004 <std+0x40>)
 8010ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ff4:	4b04      	ldr	r3, [pc, #16]	; (8011008 <std+0x44>)
 8010ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8010ff8:	bd10      	pop	{r4, pc}
 8010ffa:	46c0      	nop			; (mov r8, r8)
 8010ffc:	0801134d 	.word	0x0801134d
 8011000:	08011375 	.word	0x08011375
 8011004:	080113ad 	.word	0x080113ad
 8011008:	080113d9 	.word	0x080113d9

0801100c <_cleanup_r>:
 801100c:	b510      	push	{r4, lr}
 801100e:	4902      	ldr	r1, [pc, #8]	; (8011018 <_cleanup_r+0xc>)
 8011010:	f000 f8ba 	bl	8011188 <_fwalk_reent>
 8011014:	bd10      	pop	{r4, pc}
 8011016:	46c0      	nop			; (mov r8, r8)
 8011018:	08010f45 	.word	0x08010f45

0801101c <__sfmoreglue>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	2568      	movs	r5, #104	; 0x68
 8011020:	1e4a      	subs	r2, r1, #1
 8011022:	4355      	muls	r5, r2
 8011024:	000e      	movs	r6, r1
 8011026:	0029      	movs	r1, r5
 8011028:	3174      	adds	r1, #116	; 0x74
 801102a:	f7ff fa3d 	bl	80104a8 <_malloc_r>
 801102e:	1e04      	subs	r4, r0, #0
 8011030:	d008      	beq.n	8011044 <__sfmoreglue+0x28>
 8011032:	2100      	movs	r1, #0
 8011034:	002a      	movs	r2, r5
 8011036:	6001      	str	r1, [r0, #0]
 8011038:	6046      	str	r6, [r0, #4]
 801103a:	300c      	adds	r0, #12
 801103c:	60a0      	str	r0, [r4, #8]
 801103e:	3268      	adds	r2, #104	; 0x68
 8011040:	f7fd fa9b 	bl	800e57a <memset>
 8011044:	0020      	movs	r0, r4
 8011046:	bd70      	pop	{r4, r5, r6, pc}

08011048 <__sfp_lock_acquire>:
 8011048:	b510      	push	{r4, lr}
 801104a:	4802      	ldr	r0, [pc, #8]	; (8011054 <__sfp_lock_acquire+0xc>)
 801104c:	f000 f8bd 	bl	80111ca <__retarget_lock_acquire_recursive>
 8011050:	bd10      	pop	{r4, pc}
 8011052:	46c0      	nop			; (mov r8, r8)
 8011054:	20002769 	.word	0x20002769

08011058 <__sfp_lock_release>:
 8011058:	b510      	push	{r4, lr}
 801105a:	4802      	ldr	r0, [pc, #8]	; (8011064 <__sfp_lock_release+0xc>)
 801105c:	f000 f8b6 	bl	80111cc <__retarget_lock_release_recursive>
 8011060:	bd10      	pop	{r4, pc}
 8011062:	46c0      	nop			; (mov r8, r8)
 8011064:	20002769 	.word	0x20002769

08011068 <__sinit_lock_acquire>:
 8011068:	b510      	push	{r4, lr}
 801106a:	4802      	ldr	r0, [pc, #8]	; (8011074 <__sinit_lock_acquire+0xc>)
 801106c:	f000 f8ad 	bl	80111ca <__retarget_lock_acquire_recursive>
 8011070:	bd10      	pop	{r4, pc}
 8011072:	46c0      	nop			; (mov r8, r8)
 8011074:	2000276a 	.word	0x2000276a

08011078 <__sinit_lock_release>:
 8011078:	b510      	push	{r4, lr}
 801107a:	4802      	ldr	r0, [pc, #8]	; (8011084 <__sinit_lock_release+0xc>)
 801107c:	f000 f8a6 	bl	80111cc <__retarget_lock_release_recursive>
 8011080:	bd10      	pop	{r4, pc}
 8011082:	46c0      	nop			; (mov r8, r8)
 8011084:	2000276a 	.word	0x2000276a

08011088 <__sinit>:
 8011088:	b513      	push	{r0, r1, r4, lr}
 801108a:	0004      	movs	r4, r0
 801108c:	f7ff ffec 	bl	8011068 <__sinit_lock_acquire>
 8011090:	69a3      	ldr	r3, [r4, #24]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d002      	beq.n	801109c <__sinit+0x14>
 8011096:	f7ff ffef 	bl	8011078 <__sinit_lock_release>
 801109a:	bd13      	pop	{r0, r1, r4, pc}
 801109c:	64a3      	str	r3, [r4, #72]	; 0x48
 801109e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80110a0:	6523      	str	r3, [r4, #80]	; 0x50
 80110a2:	4b13      	ldr	r3, [pc, #76]	; (80110f0 <__sinit+0x68>)
 80110a4:	4a13      	ldr	r2, [pc, #76]	; (80110f4 <__sinit+0x6c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80110aa:	9301      	str	r3, [sp, #4]
 80110ac:	42a3      	cmp	r3, r4
 80110ae:	d101      	bne.n	80110b4 <__sinit+0x2c>
 80110b0:	2301      	movs	r3, #1
 80110b2:	61a3      	str	r3, [r4, #24]
 80110b4:	0020      	movs	r0, r4
 80110b6:	f000 f81f 	bl	80110f8 <__sfp>
 80110ba:	6060      	str	r0, [r4, #4]
 80110bc:	0020      	movs	r0, r4
 80110be:	f000 f81b 	bl	80110f8 <__sfp>
 80110c2:	60a0      	str	r0, [r4, #8]
 80110c4:	0020      	movs	r0, r4
 80110c6:	f000 f817 	bl	80110f8 <__sfp>
 80110ca:	2200      	movs	r2, #0
 80110cc:	2104      	movs	r1, #4
 80110ce:	60e0      	str	r0, [r4, #12]
 80110d0:	6860      	ldr	r0, [r4, #4]
 80110d2:	f7ff ff77 	bl	8010fc4 <std>
 80110d6:	2201      	movs	r2, #1
 80110d8:	2109      	movs	r1, #9
 80110da:	68a0      	ldr	r0, [r4, #8]
 80110dc:	f7ff ff72 	bl	8010fc4 <std>
 80110e0:	2202      	movs	r2, #2
 80110e2:	2112      	movs	r1, #18
 80110e4:	68e0      	ldr	r0, [r4, #12]
 80110e6:	f7ff ff6d 	bl	8010fc4 <std>
 80110ea:	2301      	movs	r3, #1
 80110ec:	61a3      	str	r3, [r4, #24]
 80110ee:	e7d2      	b.n	8011096 <__sinit+0xe>
 80110f0:	08012958 	.word	0x08012958
 80110f4:	0801100d 	.word	0x0801100d

080110f8 <__sfp>:
 80110f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fa:	0007      	movs	r7, r0
 80110fc:	f7ff ffa4 	bl	8011048 <__sfp_lock_acquire>
 8011100:	4b1f      	ldr	r3, [pc, #124]	; (8011180 <__sfp+0x88>)
 8011102:	681e      	ldr	r6, [r3, #0]
 8011104:	69b3      	ldr	r3, [r6, #24]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d102      	bne.n	8011110 <__sfp+0x18>
 801110a:	0030      	movs	r0, r6
 801110c:	f7ff ffbc 	bl	8011088 <__sinit>
 8011110:	3648      	adds	r6, #72	; 0x48
 8011112:	68b4      	ldr	r4, [r6, #8]
 8011114:	6873      	ldr	r3, [r6, #4]
 8011116:	3b01      	subs	r3, #1
 8011118:	d504      	bpl.n	8011124 <__sfp+0x2c>
 801111a:	6833      	ldr	r3, [r6, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d022      	beq.n	8011166 <__sfp+0x6e>
 8011120:	6836      	ldr	r6, [r6, #0]
 8011122:	e7f6      	b.n	8011112 <__sfp+0x1a>
 8011124:	220c      	movs	r2, #12
 8011126:	5ea5      	ldrsh	r5, [r4, r2]
 8011128:	2d00      	cmp	r5, #0
 801112a:	d11a      	bne.n	8011162 <__sfp+0x6a>
 801112c:	0020      	movs	r0, r4
 801112e:	4b15      	ldr	r3, [pc, #84]	; (8011184 <__sfp+0x8c>)
 8011130:	3058      	adds	r0, #88	; 0x58
 8011132:	60e3      	str	r3, [r4, #12]
 8011134:	6665      	str	r5, [r4, #100]	; 0x64
 8011136:	f000 f847 	bl	80111c8 <__retarget_lock_init_recursive>
 801113a:	f7ff ff8d 	bl	8011058 <__sfp_lock_release>
 801113e:	0020      	movs	r0, r4
 8011140:	2208      	movs	r2, #8
 8011142:	0029      	movs	r1, r5
 8011144:	6025      	str	r5, [r4, #0]
 8011146:	60a5      	str	r5, [r4, #8]
 8011148:	6065      	str	r5, [r4, #4]
 801114a:	6125      	str	r5, [r4, #16]
 801114c:	6165      	str	r5, [r4, #20]
 801114e:	61a5      	str	r5, [r4, #24]
 8011150:	305c      	adds	r0, #92	; 0x5c
 8011152:	f7fd fa12 	bl	800e57a <memset>
 8011156:	6365      	str	r5, [r4, #52]	; 0x34
 8011158:	63a5      	str	r5, [r4, #56]	; 0x38
 801115a:	64a5      	str	r5, [r4, #72]	; 0x48
 801115c:	64e5      	str	r5, [r4, #76]	; 0x4c
 801115e:	0020      	movs	r0, r4
 8011160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011162:	3468      	adds	r4, #104	; 0x68
 8011164:	e7d7      	b.n	8011116 <__sfp+0x1e>
 8011166:	2104      	movs	r1, #4
 8011168:	0038      	movs	r0, r7
 801116a:	f7ff ff57 	bl	801101c <__sfmoreglue>
 801116e:	1e04      	subs	r4, r0, #0
 8011170:	6030      	str	r0, [r6, #0]
 8011172:	d1d5      	bne.n	8011120 <__sfp+0x28>
 8011174:	f7ff ff70 	bl	8011058 <__sfp_lock_release>
 8011178:	230c      	movs	r3, #12
 801117a:	603b      	str	r3, [r7, #0]
 801117c:	e7ef      	b.n	801115e <__sfp+0x66>
 801117e:	46c0      	nop			; (mov r8, r8)
 8011180:	08012958 	.word	0x08012958
 8011184:	ffff0001 	.word	0xffff0001

08011188 <_fwalk_reent>:
 8011188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801118a:	0004      	movs	r4, r0
 801118c:	0006      	movs	r6, r0
 801118e:	2700      	movs	r7, #0
 8011190:	9101      	str	r1, [sp, #4]
 8011192:	3448      	adds	r4, #72	; 0x48
 8011194:	6863      	ldr	r3, [r4, #4]
 8011196:	68a5      	ldr	r5, [r4, #8]
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	9b00      	ldr	r3, [sp, #0]
 801119c:	3b01      	subs	r3, #1
 801119e:	9300      	str	r3, [sp, #0]
 80111a0:	d504      	bpl.n	80111ac <_fwalk_reent+0x24>
 80111a2:	6824      	ldr	r4, [r4, #0]
 80111a4:	2c00      	cmp	r4, #0
 80111a6:	d1f5      	bne.n	8011194 <_fwalk_reent+0xc>
 80111a8:	0038      	movs	r0, r7
 80111aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80111ac:	89ab      	ldrh	r3, [r5, #12]
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d908      	bls.n	80111c4 <_fwalk_reent+0x3c>
 80111b2:	220e      	movs	r2, #14
 80111b4:	5eab      	ldrsh	r3, [r5, r2]
 80111b6:	3301      	adds	r3, #1
 80111b8:	d004      	beq.n	80111c4 <_fwalk_reent+0x3c>
 80111ba:	0029      	movs	r1, r5
 80111bc:	0030      	movs	r0, r6
 80111be:	9b01      	ldr	r3, [sp, #4]
 80111c0:	4798      	blx	r3
 80111c2:	4307      	orrs	r7, r0
 80111c4:	3568      	adds	r5, #104	; 0x68
 80111c6:	e7e8      	b.n	801119a <_fwalk_reent+0x12>

080111c8 <__retarget_lock_init_recursive>:
 80111c8:	4770      	bx	lr

080111ca <__retarget_lock_acquire_recursive>:
 80111ca:	4770      	bx	lr

080111cc <__retarget_lock_release_recursive>:
 80111cc:	4770      	bx	lr
	...

080111d0 <__swhatbuf_r>:
 80111d0:	b570      	push	{r4, r5, r6, lr}
 80111d2:	000e      	movs	r6, r1
 80111d4:	001d      	movs	r5, r3
 80111d6:	230e      	movs	r3, #14
 80111d8:	5ec9      	ldrsh	r1, [r1, r3]
 80111da:	0014      	movs	r4, r2
 80111dc:	b096      	sub	sp, #88	; 0x58
 80111de:	2900      	cmp	r1, #0
 80111e0:	da08      	bge.n	80111f4 <__swhatbuf_r+0x24>
 80111e2:	220c      	movs	r2, #12
 80111e4:	5eb3      	ldrsh	r3, [r6, r2]
 80111e6:	2200      	movs	r2, #0
 80111e8:	602a      	str	r2, [r5, #0]
 80111ea:	061b      	lsls	r3, r3, #24
 80111ec:	d411      	bmi.n	8011212 <__swhatbuf_r+0x42>
 80111ee:	2380      	movs	r3, #128	; 0x80
 80111f0:	00db      	lsls	r3, r3, #3
 80111f2:	e00f      	b.n	8011214 <__swhatbuf_r+0x44>
 80111f4:	466a      	mov	r2, sp
 80111f6:	f000 f91b 	bl	8011430 <_fstat_r>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	dbf1      	blt.n	80111e2 <__swhatbuf_r+0x12>
 80111fe:	23f0      	movs	r3, #240	; 0xf0
 8011200:	9901      	ldr	r1, [sp, #4]
 8011202:	021b      	lsls	r3, r3, #8
 8011204:	4019      	ands	r1, r3
 8011206:	4b05      	ldr	r3, [pc, #20]	; (801121c <__swhatbuf_r+0x4c>)
 8011208:	18c9      	adds	r1, r1, r3
 801120a:	424b      	negs	r3, r1
 801120c:	4159      	adcs	r1, r3
 801120e:	6029      	str	r1, [r5, #0]
 8011210:	e7ed      	b.n	80111ee <__swhatbuf_r+0x1e>
 8011212:	2340      	movs	r3, #64	; 0x40
 8011214:	2000      	movs	r0, #0
 8011216:	6023      	str	r3, [r4, #0]
 8011218:	b016      	add	sp, #88	; 0x58
 801121a:	bd70      	pop	{r4, r5, r6, pc}
 801121c:	ffffe000 	.word	0xffffe000

08011220 <__smakebuf_r>:
 8011220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011222:	2602      	movs	r6, #2
 8011224:	898b      	ldrh	r3, [r1, #12]
 8011226:	0005      	movs	r5, r0
 8011228:	000c      	movs	r4, r1
 801122a:	4233      	tst	r3, r6
 801122c:	d006      	beq.n	801123c <__smakebuf_r+0x1c>
 801122e:	0023      	movs	r3, r4
 8011230:	3347      	adds	r3, #71	; 0x47
 8011232:	6023      	str	r3, [r4, #0]
 8011234:	6123      	str	r3, [r4, #16]
 8011236:	2301      	movs	r3, #1
 8011238:	6163      	str	r3, [r4, #20]
 801123a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801123c:	466a      	mov	r2, sp
 801123e:	ab01      	add	r3, sp, #4
 8011240:	f7ff ffc6 	bl	80111d0 <__swhatbuf_r>
 8011244:	9900      	ldr	r1, [sp, #0]
 8011246:	0007      	movs	r7, r0
 8011248:	0028      	movs	r0, r5
 801124a:	f7ff f92d 	bl	80104a8 <_malloc_r>
 801124e:	2800      	cmp	r0, #0
 8011250:	d108      	bne.n	8011264 <__smakebuf_r+0x44>
 8011252:	220c      	movs	r2, #12
 8011254:	5ea3      	ldrsh	r3, [r4, r2]
 8011256:	059a      	lsls	r2, r3, #22
 8011258:	d4ef      	bmi.n	801123a <__smakebuf_r+0x1a>
 801125a:	2203      	movs	r2, #3
 801125c:	4393      	bics	r3, r2
 801125e:	431e      	orrs	r6, r3
 8011260:	81a6      	strh	r6, [r4, #12]
 8011262:	e7e4      	b.n	801122e <__smakebuf_r+0xe>
 8011264:	4b0f      	ldr	r3, [pc, #60]	; (80112a4 <__smakebuf_r+0x84>)
 8011266:	62ab      	str	r3, [r5, #40]	; 0x28
 8011268:	2380      	movs	r3, #128	; 0x80
 801126a:	89a2      	ldrh	r2, [r4, #12]
 801126c:	6020      	str	r0, [r4, #0]
 801126e:	4313      	orrs	r3, r2
 8011270:	81a3      	strh	r3, [r4, #12]
 8011272:	9b00      	ldr	r3, [sp, #0]
 8011274:	6120      	str	r0, [r4, #16]
 8011276:	6163      	str	r3, [r4, #20]
 8011278:	9b01      	ldr	r3, [sp, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00d      	beq.n	801129a <__smakebuf_r+0x7a>
 801127e:	0028      	movs	r0, r5
 8011280:	230e      	movs	r3, #14
 8011282:	5ee1      	ldrsh	r1, [r4, r3]
 8011284:	f000 f8e6 	bl	8011454 <_isatty_r>
 8011288:	2800      	cmp	r0, #0
 801128a:	d006      	beq.n	801129a <__smakebuf_r+0x7a>
 801128c:	2203      	movs	r2, #3
 801128e:	89a3      	ldrh	r3, [r4, #12]
 8011290:	4393      	bics	r3, r2
 8011292:	001a      	movs	r2, r3
 8011294:	2301      	movs	r3, #1
 8011296:	4313      	orrs	r3, r2
 8011298:	81a3      	strh	r3, [r4, #12]
 801129a:	89a0      	ldrh	r0, [r4, #12]
 801129c:	4307      	orrs	r7, r0
 801129e:	81a7      	strh	r7, [r4, #12]
 80112a0:	e7cb      	b.n	801123a <__smakebuf_r+0x1a>
 80112a2:	46c0      	nop			; (mov r8, r8)
 80112a4:	0801100d 	.word	0x0801100d

080112a8 <_malloc_usable_size_r>:
 80112a8:	1f0b      	subs	r3, r1, #4
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	1f18      	subs	r0, r3, #4
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	da01      	bge.n	80112b6 <_malloc_usable_size_r+0xe>
 80112b2:	580b      	ldr	r3, [r1, r0]
 80112b4:	18c0      	adds	r0, r0, r3
 80112b6:	4770      	bx	lr

080112b8 <_raise_r>:
 80112b8:	b570      	push	{r4, r5, r6, lr}
 80112ba:	0004      	movs	r4, r0
 80112bc:	000d      	movs	r5, r1
 80112be:	291f      	cmp	r1, #31
 80112c0:	d904      	bls.n	80112cc <_raise_r+0x14>
 80112c2:	2316      	movs	r3, #22
 80112c4:	6003      	str	r3, [r0, #0]
 80112c6:	2001      	movs	r0, #1
 80112c8:	4240      	negs	r0, r0
 80112ca:	bd70      	pop	{r4, r5, r6, pc}
 80112cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d004      	beq.n	80112dc <_raise_r+0x24>
 80112d2:	008a      	lsls	r2, r1, #2
 80112d4:	189b      	adds	r3, r3, r2
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	2a00      	cmp	r2, #0
 80112da:	d108      	bne.n	80112ee <_raise_r+0x36>
 80112dc:	0020      	movs	r0, r4
 80112de:	f000 f831 	bl	8011344 <_getpid_r>
 80112e2:	002a      	movs	r2, r5
 80112e4:	0001      	movs	r1, r0
 80112e6:	0020      	movs	r0, r4
 80112e8:	f000 f81a 	bl	8011320 <_kill_r>
 80112ec:	e7ed      	b.n	80112ca <_raise_r+0x12>
 80112ee:	2000      	movs	r0, #0
 80112f0:	2a01      	cmp	r2, #1
 80112f2:	d0ea      	beq.n	80112ca <_raise_r+0x12>
 80112f4:	1c51      	adds	r1, r2, #1
 80112f6:	d103      	bne.n	8011300 <_raise_r+0x48>
 80112f8:	2316      	movs	r3, #22
 80112fa:	3001      	adds	r0, #1
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	e7e4      	b.n	80112ca <_raise_r+0x12>
 8011300:	2400      	movs	r4, #0
 8011302:	0028      	movs	r0, r5
 8011304:	601c      	str	r4, [r3, #0]
 8011306:	4790      	blx	r2
 8011308:	0020      	movs	r0, r4
 801130a:	e7de      	b.n	80112ca <_raise_r+0x12>

0801130c <raise>:
 801130c:	b510      	push	{r4, lr}
 801130e:	4b03      	ldr	r3, [pc, #12]	; (801131c <raise+0x10>)
 8011310:	0001      	movs	r1, r0
 8011312:	6818      	ldr	r0, [r3, #0]
 8011314:	f7ff ffd0 	bl	80112b8 <_raise_r>
 8011318:	bd10      	pop	{r4, pc}
 801131a:	46c0      	nop			; (mov r8, r8)
 801131c:	20000024 	.word	0x20000024

08011320 <_kill_r>:
 8011320:	2300      	movs	r3, #0
 8011322:	b570      	push	{r4, r5, r6, lr}
 8011324:	4d06      	ldr	r5, [pc, #24]	; (8011340 <_kill_r+0x20>)
 8011326:	0004      	movs	r4, r0
 8011328:	0008      	movs	r0, r1
 801132a:	0011      	movs	r1, r2
 801132c:	602b      	str	r3, [r5, #0]
 801132e:	f7f2 ff91 	bl	8004254 <_kill>
 8011332:	1c43      	adds	r3, r0, #1
 8011334:	d103      	bne.n	801133e <_kill_r+0x1e>
 8011336:	682b      	ldr	r3, [r5, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d000      	beq.n	801133e <_kill_r+0x1e>
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	bd70      	pop	{r4, r5, r6, pc}
 8011340:	20002764 	.word	0x20002764

08011344 <_getpid_r>:
 8011344:	b510      	push	{r4, lr}
 8011346:	f7f2 ff7f 	bl	8004248 <_getpid>
 801134a:	bd10      	pop	{r4, pc}

0801134c <__sread>:
 801134c:	b570      	push	{r4, r5, r6, lr}
 801134e:	000c      	movs	r4, r1
 8011350:	250e      	movs	r5, #14
 8011352:	5f49      	ldrsh	r1, [r1, r5]
 8011354:	f000 f8a4 	bl	80114a0 <_read_r>
 8011358:	2800      	cmp	r0, #0
 801135a:	db03      	blt.n	8011364 <__sread+0x18>
 801135c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801135e:	181b      	adds	r3, r3, r0
 8011360:	6563      	str	r3, [r4, #84]	; 0x54
 8011362:	bd70      	pop	{r4, r5, r6, pc}
 8011364:	89a3      	ldrh	r3, [r4, #12]
 8011366:	4a02      	ldr	r2, [pc, #8]	; (8011370 <__sread+0x24>)
 8011368:	4013      	ands	r3, r2
 801136a:	81a3      	strh	r3, [r4, #12]
 801136c:	e7f9      	b.n	8011362 <__sread+0x16>
 801136e:	46c0      	nop			; (mov r8, r8)
 8011370:	ffffefff 	.word	0xffffefff

08011374 <__swrite>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	001f      	movs	r7, r3
 8011378:	898b      	ldrh	r3, [r1, #12]
 801137a:	0005      	movs	r5, r0
 801137c:	000c      	movs	r4, r1
 801137e:	0016      	movs	r6, r2
 8011380:	05db      	lsls	r3, r3, #23
 8011382:	d505      	bpl.n	8011390 <__swrite+0x1c>
 8011384:	230e      	movs	r3, #14
 8011386:	5ec9      	ldrsh	r1, [r1, r3]
 8011388:	2200      	movs	r2, #0
 801138a:	2302      	movs	r3, #2
 801138c:	f000 f874 	bl	8011478 <_lseek_r>
 8011390:	89a3      	ldrh	r3, [r4, #12]
 8011392:	4a05      	ldr	r2, [pc, #20]	; (80113a8 <__swrite+0x34>)
 8011394:	0028      	movs	r0, r5
 8011396:	4013      	ands	r3, r2
 8011398:	81a3      	strh	r3, [r4, #12]
 801139a:	0032      	movs	r2, r6
 801139c:	230e      	movs	r3, #14
 801139e:	5ee1      	ldrsh	r1, [r4, r3]
 80113a0:	003b      	movs	r3, r7
 80113a2:	f000 f81f 	bl	80113e4 <_write_r>
 80113a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113a8:	ffffefff 	.word	0xffffefff

080113ac <__sseek>:
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	000c      	movs	r4, r1
 80113b0:	250e      	movs	r5, #14
 80113b2:	5f49      	ldrsh	r1, [r1, r5]
 80113b4:	f000 f860 	bl	8011478 <_lseek_r>
 80113b8:	89a3      	ldrh	r3, [r4, #12]
 80113ba:	1c42      	adds	r2, r0, #1
 80113bc:	d103      	bne.n	80113c6 <__sseek+0x1a>
 80113be:	4a05      	ldr	r2, [pc, #20]	; (80113d4 <__sseek+0x28>)
 80113c0:	4013      	ands	r3, r2
 80113c2:	81a3      	strh	r3, [r4, #12]
 80113c4:	bd70      	pop	{r4, r5, r6, pc}
 80113c6:	2280      	movs	r2, #128	; 0x80
 80113c8:	0152      	lsls	r2, r2, #5
 80113ca:	4313      	orrs	r3, r2
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	6560      	str	r0, [r4, #84]	; 0x54
 80113d0:	e7f8      	b.n	80113c4 <__sseek+0x18>
 80113d2:	46c0      	nop			; (mov r8, r8)
 80113d4:	ffffefff 	.word	0xffffefff

080113d8 <__sclose>:
 80113d8:	b510      	push	{r4, lr}
 80113da:	230e      	movs	r3, #14
 80113dc:	5ec9      	ldrsh	r1, [r1, r3]
 80113de:	f000 f815 	bl	801140c <_close_r>
 80113e2:	bd10      	pop	{r4, pc}

080113e4 <_write_r>:
 80113e4:	b570      	push	{r4, r5, r6, lr}
 80113e6:	0004      	movs	r4, r0
 80113e8:	0008      	movs	r0, r1
 80113ea:	0011      	movs	r1, r2
 80113ec:	001a      	movs	r2, r3
 80113ee:	2300      	movs	r3, #0
 80113f0:	4d05      	ldr	r5, [pc, #20]	; (8011408 <_write_r+0x24>)
 80113f2:	602b      	str	r3, [r5, #0]
 80113f4:	f7f2 ff67 	bl	80042c6 <_write>
 80113f8:	1c43      	adds	r3, r0, #1
 80113fa:	d103      	bne.n	8011404 <_write_r+0x20>
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d000      	beq.n	8011404 <_write_r+0x20>
 8011402:	6023      	str	r3, [r4, #0]
 8011404:	bd70      	pop	{r4, r5, r6, pc}
 8011406:	46c0      	nop			; (mov r8, r8)
 8011408:	20002764 	.word	0x20002764

0801140c <_close_r>:
 801140c:	2300      	movs	r3, #0
 801140e:	b570      	push	{r4, r5, r6, lr}
 8011410:	4d06      	ldr	r5, [pc, #24]	; (801142c <_close_r+0x20>)
 8011412:	0004      	movs	r4, r0
 8011414:	0008      	movs	r0, r1
 8011416:	602b      	str	r3, [r5, #0]
 8011418:	f7f2 ff71 	bl	80042fe <_close>
 801141c:	1c43      	adds	r3, r0, #1
 801141e:	d103      	bne.n	8011428 <_close_r+0x1c>
 8011420:	682b      	ldr	r3, [r5, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d000      	beq.n	8011428 <_close_r+0x1c>
 8011426:	6023      	str	r3, [r4, #0]
 8011428:	bd70      	pop	{r4, r5, r6, pc}
 801142a:	46c0      	nop			; (mov r8, r8)
 801142c:	20002764 	.word	0x20002764

08011430 <_fstat_r>:
 8011430:	2300      	movs	r3, #0
 8011432:	b570      	push	{r4, r5, r6, lr}
 8011434:	4d06      	ldr	r5, [pc, #24]	; (8011450 <_fstat_r+0x20>)
 8011436:	0004      	movs	r4, r0
 8011438:	0008      	movs	r0, r1
 801143a:	0011      	movs	r1, r2
 801143c:	602b      	str	r3, [r5, #0]
 801143e:	f7f2 ff68 	bl	8004312 <_fstat>
 8011442:	1c43      	adds	r3, r0, #1
 8011444:	d103      	bne.n	801144e <_fstat_r+0x1e>
 8011446:	682b      	ldr	r3, [r5, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d000      	beq.n	801144e <_fstat_r+0x1e>
 801144c:	6023      	str	r3, [r4, #0]
 801144e:	bd70      	pop	{r4, r5, r6, pc}
 8011450:	20002764 	.word	0x20002764

08011454 <_isatty_r>:
 8011454:	2300      	movs	r3, #0
 8011456:	b570      	push	{r4, r5, r6, lr}
 8011458:	4d06      	ldr	r5, [pc, #24]	; (8011474 <_isatty_r+0x20>)
 801145a:	0004      	movs	r4, r0
 801145c:	0008      	movs	r0, r1
 801145e:	602b      	str	r3, [r5, #0]
 8011460:	f7f2 ff65 	bl	800432e <_isatty>
 8011464:	1c43      	adds	r3, r0, #1
 8011466:	d103      	bne.n	8011470 <_isatty_r+0x1c>
 8011468:	682b      	ldr	r3, [r5, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d000      	beq.n	8011470 <_isatty_r+0x1c>
 801146e:	6023      	str	r3, [r4, #0]
 8011470:	bd70      	pop	{r4, r5, r6, pc}
 8011472:	46c0      	nop			; (mov r8, r8)
 8011474:	20002764 	.word	0x20002764

08011478 <_lseek_r>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	0004      	movs	r4, r0
 801147c:	0008      	movs	r0, r1
 801147e:	0011      	movs	r1, r2
 8011480:	001a      	movs	r2, r3
 8011482:	2300      	movs	r3, #0
 8011484:	4d05      	ldr	r5, [pc, #20]	; (801149c <_lseek_r+0x24>)
 8011486:	602b      	str	r3, [r5, #0]
 8011488:	f7f2 ff5a 	bl	8004340 <_lseek>
 801148c:	1c43      	adds	r3, r0, #1
 801148e:	d103      	bne.n	8011498 <_lseek_r+0x20>
 8011490:	682b      	ldr	r3, [r5, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d000      	beq.n	8011498 <_lseek_r+0x20>
 8011496:	6023      	str	r3, [r4, #0]
 8011498:	bd70      	pop	{r4, r5, r6, pc}
 801149a:	46c0      	nop			; (mov r8, r8)
 801149c:	20002764 	.word	0x20002764

080114a0 <_read_r>:
 80114a0:	b570      	push	{r4, r5, r6, lr}
 80114a2:	0004      	movs	r4, r0
 80114a4:	0008      	movs	r0, r1
 80114a6:	0011      	movs	r1, r2
 80114a8:	001a      	movs	r2, r3
 80114aa:	2300      	movs	r3, #0
 80114ac:	4d05      	ldr	r5, [pc, #20]	; (80114c4 <_read_r+0x24>)
 80114ae:	602b      	str	r3, [r5, #0]
 80114b0:	f7f2 feec 	bl	800428c <_read>
 80114b4:	1c43      	adds	r3, r0, #1
 80114b6:	d103      	bne.n	80114c0 <_read_r+0x20>
 80114b8:	682b      	ldr	r3, [r5, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d000      	beq.n	80114c0 <_read_r+0x20>
 80114be:	6023      	str	r3, [r4, #0]
 80114c0:	bd70      	pop	{r4, r5, r6, pc}
 80114c2:	46c0      	nop			; (mov r8, r8)
 80114c4:	20002764 	.word	0x20002764

080114c8 <pow>:
 80114c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114ca:	0014      	movs	r4, r2
 80114cc:	001d      	movs	r5, r3
 80114ce:	9000      	str	r0, [sp, #0]
 80114d0:	9101      	str	r1, [sp, #4]
 80114d2:	f000 f86b 	bl	80115ac <__ieee754_pow>
 80114d6:	0022      	movs	r2, r4
 80114d8:	0006      	movs	r6, r0
 80114da:	000f      	movs	r7, r1
 80114dc:	002b      	movs	r3, r5
 80114de:	0020      	movs	r0, r4
 80114e0:	0029      	movs	r1, r5
 80114e2:	f7f1 fbdd 	bl	8002ca0 <__aeabi_dcmpun>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d13f      	bne.n	801156a <pow+0xa2>
 80114ea:	9800      	ldr	r0, [sp, #0]
 80114ec:	9901      	ldr	r1, [sp, #4]
 80114ee:	2200      	movs	r2, #0
 80114f0:	2300      	movs	r3, #0
 80114f2:	f7ee ffa9 	bl	8000448 <__aeabi_dcmpeq>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d019      	beq.n	801152e <pow+0x66>
 80114fa:	2200      	movs	r2, #0
 80114fc:	2300      	movs	r3, #0
 80114fe:	0020      	movs	r0, r4
 8011500:	0029      	movs	r1, r5
 8011502:	f7ee ffa1 	bl	8000448 <__aeabi_dcmpeq>
 8011506:	2800      	cmp	r0, #0
 8011508:	d146      	bne.n	8011598 <pow+0xd0>
 801150a:	0020      	movs	r0, r4
 801150c:	0029      	movs	r1, r5
 801150e:	f000 febd 	bl	801228c <finite>
 8011512:	2800      	cmp	r0, #0
 8011514:	d029      	beq.n	801156a <pow+0xa2>
 8011516:	2200      	movs	r2, #0
 8011518:	2300      	movs	r3, #0
 801151a:	0020      	movs	r0, r4
 801151c:	0029      	movs	r1, r5
 801151e:	f7ee ff99 	bl	8000454 <__aeabi_dcmplt>
 8011522:	2800      	cmp	r0, #0
 8011524:	d021      	beq.n	801156a <pow+0xa2>
 8011526:	f7fc fff5 	bl	800e514 <__errno>
 801152a:	2322      	movs	r3, #34	; 0x22
 801152c:	e01c      	b.n	8011568 <pow+0xa0>
 801152e:	0030      	movs	r0, r6
 8011530:	0039      	movs	r1, r7
 8011532:	f000 feab 	bl	801228c <finite>
 8011536:	2800      	cmp	r0, #0
 8011538:	d11b      	bne.n	8011572 <pow+0xaa>
 801153a:	9800      	ldr	r0, [sp, #0]
 801153c:	9901      	ldr	r1, [sp, #4]
 801153e:	f000 fea5 	bl	801228c <finite>
 8011542:	2800      	cmp	r0, #0
 8011544:	d015      	beq.n	8011572 <pow+0xaa>
 8011546:	0020      	movs	r0, r4
 8011548:	0029      	movs	r1, r5
 801154a:	f000 fe9f 	bl	801228c <finite>
 801154e:	2800      	cmp	r0, #0
 8011550:	d00f      	beq.n	8011572 <pow+0xaa>
 8011552:	0032      	movs	r2, r6
 8011554:	003b      	movs	r3, r7
 8011556:	0030      	movs	r0, r6
 8011558:	0039      	movs	r1, r7
 801155a:	f7f1 fba1 	bl	8002ca0 <__aeabi_dcmpun>
 801155e:	2800      	cmp	r0, #0
 8011560:	d0e1      	beq.n	8011526 <pow+0x5e>
 8011562:	f7fc ffd7 	bl	800e514 <__errno>
 8011566:	2321      	movs	r3, #33	; 0x21
 8011568:	6003      	str	r3, [r0, #0]
 801156a:	0030      	movs	r0, r6
 801156c:	0039      	movs	r1, r7
 801156e:	b003      	add	sp, #12
 8011570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011572:	2200      	movs	r2, #0
 8011574:	2300      	movs	r3, #0
 8011576:	0030      	movs	r0, r6
 8011578:	0039      	movs	r1, r7
 801157a:	f7ee ff65 	bl	8000448 <__aeabi_dcmpeq>
 801157e:	2800      	cmp	r0, #0
 8011580:	d0f3      	beq.n	801156a <pow+0xa2>
 8011582:	9800      	ldr	r0, [sp, #0]
 8011584:	9901      	ldr	r1, [sp, #4]
 8011586:	f000 fe81 	bl	801228c <finite>
 801158a:	2800      	cmp	r0, #0
 801158c:	d0ed      	beq.n	801156a <pow+0xa2>
 801158e:	0020      	movs	r0, r4
 8011590:	0029      	movs	r1, r5
 8011592:	f000 fe7b 	bl	801228c <finite>
 8011596:	e7c4      	b.n	8011522 <pow+0x5a>
 8011598:	2600      	movs	r6, #0
 801159a:	4f01      	ldr	r7, [pc, #4]	; (80115a0 <pow+0xd8>)
 801159c:	e7e5      	b.n	801156a <pow+0xa2>
 801159e:	46c0      	nop			; (mov r8, r8)
 80115a0:	3ff00000 	.word	0x3ff00000

080115a4 <atan2f>:
 80115a4:	b510      	push	{r4, lr}
 80115a6:	f000 fdc1 	bl	801212c <__ieee754_atan2f>
 80115aa:	bd10      	pop	{r4, pc}

080115ac <__ieee754_pow>:
 80115ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ae:	b095      	sub	sp, #84	; 0x54
 80115b0:	9202      	str	r2, [sp, #8]
 80115b2:	9303      	str	r3, [sp, #12]
 80115b4:	9b03      	ldr	r3, [sp, #12]
 80115b6:	9a03      	ldr	r2, [sp, #12]
 80115b8:	9304      	str	r3, [sp, #16]
 80115ba:	9b02      	ldr	r3, [sp, #8]
 80115bc:	0056      	lsls	r6, r2, #1
 80115be:	001a      	movs	r2, r3
 80115c0:	0876      	lsrs	r6, r6, #1
 80115c2:	0007      	movs	r7, r0
 80115c4:	000d      	movs	r5, r1
 80115c6:	4332      	orrs	r2, r6
 80115c8:	d119      	bne.n	80115fe <__ieee754_pow+0x52>
 80115ca:	2180      	movs	r1, #128	; 0x80
 80115cc:	0309      	lsls	r1, r1, #12
 80115ce:	4069      	eors	r1, r5
 80115d0:	0002      	movs	r2, r0
 80115d2:	000b      	movs	r3, r1
 80115d4:	1892      	adds	r2, r2, r2
 80115d6:	415b      	adcs	r3, r3
 80115d8:	4989      	ldr	r1, [pc, #548]	; (8011800 <__ieee754_pow+0x254>)
 80115da:	428b      	cmp	r3, r1
 80115dc:	d806      	bhi.n	80115ec <__ieee754_pow+0x40>
 80115de:	d001      	beq.n	80115e4 <__ieee754_pow+0x38>
 80115e0:	f000 fcb6 	bl	8011f50 <__ieee754_pow+0x9a4>
 80115e4:	2a00      	cmp	r2, #0
 80115e6:	d101      	bne.n	80115ec <__ieee754_pow+0x40>
 80115e8:	f000 fcb2 	bl	8011f50 <__ieee754_pow+0x9a4>
 80115ec:	9a02      	ldr	r2, [sp, #8]
 80115ee:	9b03      	ldr	r3, [sp, #12]
 80115f0:	0038      	movs	r0, r7
 80115f2:	0029      	movs	r1, r5
 80115f4:	f7ef fe18 	bl	8001228 <__aeabi_dadd>
 80115f8:	9000      	str	r0, [sp, #0]
 80115fa:	9101      	str	r1, [sp, #4]
 80115fc:	e0ad      	b.n	801175a <__ieee754_pow+0x1ae>
 80115fe:	4a81      	ldr	r2, [pc, #516]	; (8011804 <__ieee754_pow+0x258>)
 8011600:	004c      	lsls	r4, r1, #1
 8011602:	9108      	str	r1, [sp, #32]
 8011604:	9000      	str	r0, [sp, #0]
 8011606:	0864      	lsrs	r4, r4, #1
 8011608:	4294      	cmp	r4, r2
 801160a:	dc08      	bgt.n	801161e <__ieee754_pow+0x72>
 801160c:	d101      	bne.n	8011612 <__ieee754_pow+0x66>
 801160e:	2800      	cmp	r0, #0
 8011610:	d1ec      	bne.n	80115ec <__ieee754_pow+0x40>
 8011612:	4a7c      	ldr	r2, [pc, #496]	; (8011804 <__ieee754_pow+0x258>)
 8011614:	4296      	cmp	r6, r2
 8011616:	dc02      	bgt.n	801161e <__ieee754_pow+0x72>
 8011618:	d10c      	bne.n	8011634 <__ieee754_pow+0x88>
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00a      	beq.n	8011634 <__ieee754_pow+0x88>
 801161e:	4b7a      	ldr	r3, [pc, #488]	; (8011808 <__ieee754_pow+0x25c>)
 8011620:	18eb      	adds	r3, r5, r3
 8011622:	433b      	orrs	r3, r7
 8011624:	d1e2      	bne.n	80115ec <__ieee754_pow+0x40>
 8011626:	2180      	movs	r1, #128	; 0x80
 8011628:	9803      	ldr	r0, [sp, #12]
 801162a:	0309      	lsls	r1, r1, #12
 801162c:	4048      	eors	r0, r1
 801162e:	0003      	movs	r3, r0
 8011630:	9a02      	ldr	r2, [sp, #8]
 8011632:	e7cf      	b.n	80115d4 <__ieee754_pow+0x28>
 8011634:	2200      	movs	r2, #0
 8011636:	9206      	str	r2, [sp, #24]
 8011638:	2d00      	cmp	r5, #0
 801163a:	da69      	bge.n	8011710 <__ieee754_pow+0x164>
 801163c:	4a73      	ldr	r2, [pc, #460]	; (801180c <__ieee754_pow+0x260>)
 801163e:	4296      	cmp	r6, r2
 8011640:	dc64      	bgt.n	801170c <__ieee754_pow+0x160>
 8011642:	4a73      	ldr	r2, [pc, #460]	; (8011810 <__ieee754_pow+0x264>)
 8011644:	4296      	cmp	r6, r2
 8011646:	dd11      	ble.n	801166c <__ieee754_pow+0xc0>
 8011648:	4972      	ldr	r1, [pc, #456]	; (8011814 <__ieee754_pow+0x268>)
 801164a:	1532      	asrs	r2, r6, #20
 801164c:	1852      	adds	r2, r2, r1
 801164e:	2a14      	cmp	r2, #20
 8011650:	dd3c      	ble.n	80116cc <__ieee754_pow+0x120>
 8011652:	2134      	movs	r1, #52	; 0x34
 8011654:	1a8a      	subs	r2, r1, r2
 8011656:	9902      	ldr	r1, [sp, #8]
 8011658:	40d1      	lsrs	r1, r2
 801165a:	0008      	movs	r0, r1
 801165c:	4090      	lsls	r0, r2
 801165e:	4298      	cmp	r0, r3
 8011660:	d104      	bne.n	801166c <__ieee754_pow+0xc0>
 8011662:	2201      	movs	r2, #1
 8011664:	4011      	ands	r1, r2
 8011666:	1892      	adds	r2, r2, r2
 8011668:	1a52      	subs	r2, r2, r1
 801166a:	9206      	str	r2, [sp, #24]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d03c      	beq.n	80116ea <__ieee754_pow+0x13e>
 8011670:	0038      	movs	r0, r7
 8011672:	0029      	movs	r1, r5
 8011674:	f000 fe07 	bl	8012286 <fabs>
 8011678:	9000      	str	r0, [sp, #0]
 801167a:	9101      	str	r1, [sp, #4]
 801167c:	2f00      	cmp	r7, #0
 801167e:	d000      	beq.n	8011682 <__ieee754_pow+0xd6>
 8011680:	e094      	b.n	80117ac <__ieee754_pow+0x200>
 8011682:	2c00      	cmp	r4, #0
 8011684:	d005      	beq.n	8011692 <__ieee754_pow+0xe6>
 8011686:	4a64      	ldr	r2, [pc, #400]	; (8011818 <__ieee754_pow+0x26c>)
 8011688:	00ab      	lsls	r3, r5, #2
 801168a:	089b      	lsrs	r3, r3, #2
 801168c:	4293      	cmp	r3, r2
 801168e:	d000      	beq.n	8011692 <__ieee754_pow+0xe6>
 8011690:	e08c      	b.n	80117ac <__ieee754_pow+0x200>
 8011692:	9b04      	ldr	r3, [sp, #16]
 8011694:	2b00      	cmp	r3, #0
 8011696:	da07      	bge.n	80116a8 <__ieee754_pow+0xfc>
 8011698:	9a00      	ldr	r2, [sp, #0]
 801169a:	9b01      	ldr	r3, [sp, #4]
 801169c:	2000      	movs	r0, #0
 801169e:	495e      	ldr	r1, [pc, #376]	; (8011818 <__ieee754_pow+0x26c>)
 80116a0:	f7f0 f8fe 	bl	80018a0 <__aeabi_ddiv>
 80116a4:	9000      	str	r0, [sp, #0]
 80116a6:	9101      	str	r1, [sp, #4]
 80116a8:	9b08      	ldr	r3, [sp, #32]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	da55      	bge.n	801175a <__ieee754_pow+0x1ae>
 80116ae:	4b56      	ldr	r3, [pc, #344]	; (8011808 <__ieee754_pow+0x25c>)
 80116b0:	18e4      	adds	r4, r4, r3
 80116b2:	9b06      	ldr	r3, [sp, #24]
 80116b4:	431c      	orrs	r4, r3
 80116b6:	d000      	beq.n	80116ba <__ieee754_pow+0x10e>
 80116b8:	e06c      	b.n	8011794 <__ieee754_pow+0x1e8>
 80116ba:	9a00      	ldr	r2, [sp, #0]
 80116bc:	9b01      	ldr	r3, [sp, #4]
 80116be:	0010      	movs	r0, r2
 80116c0:	0019      	movs	r1, r3
 80116c2:	f7f0 ff5b 	bl	800257c <__aeabi_dsub>
 80116c6:	0002      	movs	r2, r0
 80116c8:	000b      	movs	r3, r1
 80116ca:	e01c      	b.n	8011706 <__ieee754_pow+0x15a>
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d1cf      	bne.n	8011670 <__ieee754_pow+0xc4>
 80116d0:	3314      	adds	r3, #20
 80116d2:	1a9a      	subs	r2, r3, r2
 80116d4:	0033      	movs	r3, r6
 80116d6:	4113      	asrs	r3, r2
 80116d8:	0019      	movs	r1, r3
 80116da:	4091      	lsls	r1, r2
 80116dc:	42b1      	cmp	r1, r6
 80116de:	d104      	bne.n	80116ea <__ieee754_pow+0x13e>
 80116e0:	2201      	movs	r2, #1
 80116e2:	4013      	ands	r3, r2
 80116e4:	1892      	adds	r2, r2, r2
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	9306      	str	r3, [sp, #24]
 80116ea:	4b4b      	ldr	r3, [pc, #300]	; (8011818 <__ieee754_pow+0x26c>)
 80116ec:	429e      	cmp	r6, r3
 80116ee:	d138      	bne.n	8011762 <__ieee754_pow+0x1b6>
 80116f0:	0038      	movs	r0, r7
 80116f2:	0029      	movs	r1, r5
 80116f4:	9b04      	ldr	r3, [sp, #16]
 80116f6:	9000      	str	r0, [sp, #0]
 80116f8:	9101      	str	r1, [sp, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	da2d      	bge.n	801175a <__ieee754_pow+0x1ae>
 80116fe:	003a      	movs	r2, r7
 8011700:	002b      	movs	r3, r5
 8011702:	2000      	movs	r0, #0
 8011704:	4944      	ldr	r1, [pc, #272]	; (8011818 <__ieee754_pow+0x26c>)
 8011706:	f7f0 f8cb 	bl	80018a0 <__aeabi_ddiv>
 801170a:	e775      	b.n	80115f8 <__ieee754_pow+0x4c>
 801170c:	2202      	movs	r2, #2
 801170e:	9206      	str	r2, [sp, #24]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d1ad      	bne.n	8011670 <__ieee754_pow+0xc4>
 8011714:	4b3b      	ldr	r3, [pc, #236]	; (8011804 <__ieee754_pow+0x258>)
 8011716:	429e      	cmp	r6, r3
 8011718:	d1e7      	bne.n	80116ea <__ieee754_pow+0x13e>
 801171a:	4b3b      	ldr	r3, [pc, #236]	; (8011808 <__ieee754_pow+0x25c>)
 801171c:	18e3      	adds	r3, r4, r3
 801171e:	431f      	orrs	r7, r3
 8011720:	d101      	bne.n	8011726 <__ieee754_pow+0x17a>
 8011722:	f000 fc15 	bl	8011f50 <__ieee754_pow+0x9a4>
 8011726:	4b3a      	ldr	r3, [pc, #232]	; (8011810 <__ieee754_pow+0x264>)
 8011728:	429c      	cmp	r4, r3
 801172a:	dd09      	ble.n	8011740 <__ieee754_pow+0x194>
 801172c:	9b04      	ldr	r3, [sp, #16]
 801172e:	2b00      	cmp	r3, #0
 8011730:	da01      	bge.n	8011736 <__ieee754_pow+0x18a>
 8011732:	f000 fc11 	bl	8011f58 <__ieee754_pow+0x9ac>
 8011736:	9b02      	ldr	r3, [sp, #8]
 8011738:	9c03      	ldr	r4, [sp, #12]
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	9401      	str	r4, [sp, #4]
 801173e:	e00c      	b.n	801175a <__ieee754_pow+0x1ae>
 8011740:	9b04      	ldr	r3, [sp, #16]
 8011742:	2b00      	cmp	r3, #0
 8011744:	db01      	blt.n	801174a <__ieee754_pow+0x19e>
 8011746:	f000 fc07 	bl	8011f58 <__ieee754_pow+0x9ac>
 801174a:	2280      	movs	r2, #128	; 0x80
 801174c:	0612      	lsls	r2, r2, #24
 801174e:	4694      	mov	ip, r2
 8011750:	9b02      	ldr	r3, [sp, #8]
 8011752:	9300      	str	r3, [sp, #0]
 8011754:	9b03      	ldr	r3, [sp, #12]
 8011756:	4463      	add	r3, ip
 8011758:	9301      	str	r3, [sp, #4]
 801175a:	9800      	ldr	r0, [sp, #0]
 801175c:	9901      	ldr	r1, [sp, #4]
 801175e:	b015      	add	sp, #84	; 0x54
 8011760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011762:	2380      	movs	r3, #128	; 0x80
 8011764:	9a04      	ldr	r2, [sp, #16]
 8011766:	05db      	lsls	r3, r3, #23
 8011768:	429a      	cmp	r2, r3
 801176a:	d106      	bne.n	801177a <__ieee754_pow+0x1ce>
 801176c:	003a      	movs	r2, r7
 801176e:	002b      	movs	r3, r5
 8011770:	0038      	movs	r0, r7
 8011772:	0029      	movs	r1, r5
 8011774:	f7f0 fc96 	bl	80020a4 <__aeabi_dmul>
 8011778:	e73e      	b.n	80115f8 <__ieee754_pow+0x4c>
 801177a:	4b28      	ldr	r3, [pc, #160]	; (801181c <__ieee754_pow+0x270>)
 801177c:	9a04      	ldr	r2, [sp, #16]
 801177e:	429a      	cmp	r2, r3
 8011780:	d000      	beq.n	8011784 <__ieee754_pow+0x1d8>
 8011782:	e775      	b.n	8011670 <__ieee754_pow+0xc4>
 8011784:	2d00      	cmp	r5, #0
 8011786:	da00      	bge.n	801178a <__ieee754_pow+0x1de>
 8011788:	e772      	b.n	8011670 <__ieee754_pow+0xc4>
 801178a:	0038      	movs	r0, r7
 801178c:	0029      	movs	r1, r5
 801178e:	f000 fc17 	bl	8011fc0 <__ieee754_sqrt>
 8011792:	e731      	b.n	80115f8 <__ieee754_pow+0x4c>
 8011794:	9b06      	ldr	r3, [sp, #24]
 8011796:	2b01      	cmp	r3, #1
 8011798:	d1df      	bne.n	801175a <__ieee754_pow+0x1ae>
 801179a:	9800      	ldr	r0, [sp, #0]
 801179c:	2180      	movs	r1, #128	; 0x80
 801179e:	0002      	movs	r2, r0
 80117a0:	9801      	ldr	r0, [sp, #4]
 80117a2:	0609      	lsls	r1, r1, #24
 80117a4:	1843      	adds	r3, r0, r1
 80117a6:	9200      	str	r2, [sp, #0]
 80117a8:	9301      	str	r3, [sp, #4]
 80117aa:	e7d6      	b.n	801175a <__ieee754_pow+0x1ae>
 80117ac:	0feb      	lsrs	r3, r5, #31
 80117ae:	3b01      	subs	r3, #1
 80117b0:	930e      	str	r3, [sp, #56]	; 0x38
 80117b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117b4:	9b06      	ldr	r3, [sp, #24]
 80117b6:	4313      	orrs	r3, r2
 80117b8:	d104      	bne.n	80117c4 <__ieee754_pow+0x218>
 80117ba:	003a      	movs	r2, r7
 80117bc:	002b      	movs	r3, r5
 80117be:	0038      	movs	r0, r7
 80117c0:	0029      	movs	r1, r5
 80117c2:	e77e      	b.n	80116c2 <__ieee754_pow+0x116>
 80117c4:	4b16      	ldr	r3, [pc, #88]	; (8011820 <__ieee754_pow+0x274>)
 80117c6:	429e      	cmp	r6, r3
 80117c8:	dc00      	bgt.n	80117cc <__ieee754_pow+0x220>
 80117ca:	e0ef      	b.n	80119ac <__ieee754_pow+0x400>
 80117cc:	4b15      	ldr	r3, [pc, #84]	; (8011824 <__ieee754_pow+0x278>)
 80117ce:	429e      	cmp	r6, r3
 80117d0:	dd09      	ble.n	80117e6 <__ieee754_pow+0x23a>
 80117d2:	4b0f      	ldr	r3, [pc, #60]	; (8011810 <__ieee754_pow+0x264>)
 80117d4:	429c      	cmp	r4, r3
 80117d6:	dc0c      	bgt.n	80117f2 <__ieee754_pow+0x246>
 80117d8:	9b04      	ldr	r3, [sp, #16]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	da0c      	bge.n	80117f8 <__ieee754_pow+0x24c>
 80117de:	2000      	movs	r0, #0
 80117e0:	f000 fd4a 	bl	8012278 <__math_oflow>
 80117e4:	e708      	b.n	80115f8 <__ieee754_pow+0x4c>
 80117e6:	4b10      	ldr	r3, [pc, #64]	; (8011828 <__ieee754_pow+0x27c>)
 80117e8:	429c      	cmp	r4, r3
 80117ea:	ddf5      	ble.n	80117d8 <__ieee754_pow+0x22c>
 80117ec:	4b0a      	ldr	r3, [pc, #40]	; (8011818 <__ieee754_pow+0x26c>)
 80117ee:	429c      	cmp	r4, r3
 80117f0:	dd1c      	ble.n	801182c <__ieee754_pow+0x280>
 80117f2:	9b04      	ldr	r3, [sp, #16]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	dcf2      	bgt.n	80117de <__ieee754_pow+0x232>
 80117f8:	2000      	movs	r0, #0
 80117fa:	f000 fd36 	bl	801226a <__math_uflow>
 80117fe:	e6fb      	b.n	80115f8 <__ieee754_pow+0x4c>
 8011800:	fff00000 	.word	0xfff00000
 8011804:	7ff00000 	.word	0x7ff00000
 8011808:	c0100000 	.word	0xc0100000
 801180c:	433fffff 	.word	0x433fffff
 8011810:	3fefffff 	.word	0x3fefffff
 8011814:	fffffc01 	.word	0xfffffc01
 8011818:	3ff00000 	.word	0x3ff00000
 801181c:	3fe00000 	.word	0x3fe00000
 8011820:	41e00000 	.word	0x41e00000
 8011824:	43f00000 	.word	0x43f00000
 8011828:	3feffffe 	.word	0x3feffffe
 801182c:	2200      	movs	r2, #0
 801182e:	9800      	ldr	r0, [sp, #0]
 8011830:	9901      	ldr	r1, [sp, #4]
 8011832:	4b52      	ldr	r3, [pc, #328]	; (801197c <__ieee754_pow+0x3d0>)
 8011834:	f7f0 fea2 	bl	800257c <__aeabi_dsub>
 8011838:	22c0      	movs	r2, #192	; 0xc0
 801183a:	4b51      	ldr	r3, [pc, #324]	; (8011980 <__ieee754_pow+0x3d4>)
 801183c:	05d2      	lsls	r2, r2, #23
 801183e:	0004      	movs	r4, r0
 8011840:	000d      	movs	r5, r1
 8011842:	f7f0 fc2f 	bl	80020a4 <__aeabi_dmul>
 8011846:	4a4f      	ldr	r2, [pc, #316]	; (8011984 <__ieee754_pow+0x3d8>)
 8011848:	9000      	str	r0, [sp, #0]
 801184a:	9101      	str	r1, [sp, #4]
 801184c:	4b4e      	ldr	r3, [pc, #312]	; (8011988 <__ieee754_pow+0x3dc>)
 801184e:	0020      	movs	r0, r4
 8011850:	0029      	movs	r1, r5
 8011852:	f7f0 fc27 	bl	80020a4 <__aeabi_dmul>
 8011856:	2200      	movs	r2, #0
 8011858:	9004      	str	r0, [sp, #16]
 801185a:	9105      	str	r1, [sp, #20]
 801185c:	4b4b      	ldr	r3, [pc, #300]	; (801198c <__ieee754_pow+0x3e0>)
 801185e:	0020      	movs	r0, r4
 8011860:	0029      	movs	r1, r5
 8011862:	f7f0 fc1f 	bl	80020a4 <__aeabi_dmul>
 8011866:	0002      	movs	r2, r0
 8011868:	000b      	movs	r3, r1
 801186a:	4849      	ldr	r0, [pc, #292]	; (8011990 <__ieee754_pow+0x3e4>)
 801186c:	4949      	ldr	r1, [pc, #292]	; (8011994 <__ieee754_pow+0x3e8>)
 801186e:	f7f0 fe85 	bl	800257c <__aeabi_dsub>
 8011872:	0022      	movs	r2, r4
 8011874:	002b      	movs	r3, r5
 8011876:	f7f0 fc15 	bl	80020a4 <__aeabi_dmul>
 801187a:	0002      	movs	r2, r0
 801187c:	000b      	movs	r3, r1
 801187e:	2000      	movs	r0, #0
 8011880:	4945      	ldr	r1, [pc, #276]	; (8011998 <__ieee754_pow+0x3ec>)
 8011882:	f7f0 fe7b 	bl	800257c <__aeabi_dsub>
 8011886:	0022      	movs	r2, r4
 8011888:	0006      	movs	r6, r0
 801188a:	000f      	movs	r7, r1
 801188c:	002b      	movs	r3, r5
 801188e:	0020      	movs	r0, r4
 8011890:	0029      	movs	r1, r5
 8011892:	f7f0 fc07 	bl	80020a4 <__aeabi_dmul>
 8011896:	0002      	movs	r2, r0
 8011898:	000b      	movs	r3, r1
 801189a:	0030      	movs	r0, r6
 801189c:	0039      	movs	r1, r7
 801189e:	f7f0 fc01 	bl	80020a4 <__aeabi_dmul>
 80118a2:	4a3e      	ldr	r2, [pc, #248]	; (801199c <__ieee754_pow+0x3f0>)
 80118a4:	4b36      	ldr	r3, [pc, #216]	; (8011980 <__ieee754_pow+0x3d4>)
 80118a6:	f7f0 fbfd 	bl	80020a4 <__aeabi_dmul>
 80118aa:	0002      	movs	r2, r0
 80118ac:	000b      	movs	r3, r1
 80118ae:	9804      	ldr	r0, [sp, #16]
 80118b0:	9905      	ldr	r1, [sp, #20]
 80118b2:	f7f0 fe63 	bl	800257c <__aeabi_dsub>
 80118b6:	0002      	movs	r2, r0
 80118b8:	000b      	movs	r3, r1
 80118ba:	0004      	movs	r4, r0
 80118bc:	000d      	movs	r5, r1
 80118be:	9800      	ldr	r0, [sp, #0]
 80118c0:	9901      	ldr	r1, [sp, #4]
 80118c2:	f7ef fcb1 	bl	8001228 <__aeabi_dadd>
 80118c6:	9a00      	ldr	r2, [sp, #0]
 80118c8:	9b01      	ldr	r3, [sp, #4]
 80118ca:	2000      	movs	r0, #0
 80118cc:	000f      	movs	r7, r1
 80118ce:	0006      	movs	r6, r0
 80118d0:	f7f0 fe54 	bl	800257c <__aeabi_dsub>
 80118d4:	0002      	movs	r2, r0
 80118d6:	000b      	movs	r3, r1
 80118d8:	0020      	movs	r0, r4
 80118da:	0029      	movs	r1, r5
 80118dc:	f7f0 fe4e 	bl	800257c <__aeabi_dsub>
 80118e0:	9b06      	ldr	r3, [sp, #24]
 80118e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118e4:	3b01      	subs	r3, #1
 80118e6:	9004      	str	r0, [sp, #16]
 80118e8:	9105      	str	r1, [sp, #20]
 80118ea:	4313      	orrs	r3, r2
 80118ec:	d000      	beq.n	80118f0 <__ieee754_pow+0x344>
 80118ee:	e1db      	b.n	8011ca8 <__ieee754_pow+0x6fc>
 80118f0:	2300      	movs	r3, #0
 80118f2:	4c2b      	ldr	r4, [pc, #172]	; (80119a0 <__ieee754_pow+0x3f4>)
 80118f4:	9300      	str	r3, [sp, #0]
 80118f6:	9401      	str	r4, [sp, #4]
 80118f8:	9c02      	ldr	r4, [sp, #8]
 80118fa:	9d03      	ldr	r5, [sp, #12]
 80118fc:	9802      	ldr	r0, [sp, #8]
 80118fe:	9903      	ldr	r1, [sp, #12]
 8011900:	2400      	movs	r4, #0
 8011902:	002b      	movs	r3, r5
 8011904:	0022      	movs	r2, r4
 8011906:	f7f0 fe39 	bl	800257c <__aeabi_dsub>
 801190a:	0032      	movs	r2, r6
 801190c:	003b      	movs	r3, r7
 801190e:	f7f0 fbc9 	bl	80020a4 <__aeabi_dmul>
 8011912:	9a02      	ldr	r2, [sp, #8]
 8011914:	9b03      	ldr	r3, [sp, #12]
 8011916:	9006      	str	r0, [sp, #24]
 8011918:	9107      	str	r1, [sp, #28]
 801191a:	9804      	ldr	r0, [sp, #16]
 801191c:	9905      	ldr	r1, [sp, #20]
 801191e:	f7f0 fbc1 	bl	80020a4 <__aeabi_dmul>
 8011922:	0002      	movs	r2, r0
 8011924:	000b      	movs	r3, r1
 8011926:	9806      	ldr	r0, [sp, #24]
 8011928:	9907      	ldr	r1, [sp, #28]
 801192a:	f7ef fc7d 	bl	8001228 <__aeabi_dadd>
 801192e:	0022      	movs	r2, r4
 8011930:	002b      	movs	r3, r5
 8011932:	9004      	str	r0, [sp, #16]
 8011934:	9105      	str	r1, [sp, #20]
 8011936:	0030      	movs	r0, r6
 8011938:	0039      	movs	r1, r7
 801193a:	f7f0 fbb3 	bl	80020a4 <__aeabi_dmul>
 801193e:	0006      	movs	r6, r0
 8011940:	000f      	movs	r7, r1
 8011942:	000b      	movs	r3, r1
 8011944:	0002      	movs	r2, r0
 8011946:	9804      	ldr	r0, [sp, #16]
 8011948:	9905      	ldr	r1, [sp, #20]
 801194a:	9606      	str	r6, [sp, #24]
 801194c:	9707      	str	r7, [sp, #28]
 801194e:	f7ef fc6b 	bl	8001228 <__aeabi_dadd>
 8011952:	4b14      	ldr	r3, [pc, #80]	; (80119a4 <__ieee754_pow+0x3f8>)
 8011954:	0005      	movs	r5, r0
 8011956:	000c      	movs	r4, r1
 8011958:	9108      	str	r1, [sp, #32]
 801195a:	4299      	cmp	r1, r3
 801195c:	dc00      	bgt.n	8011960 <__ieee754_pow+0x3b4>
 801195e:	e2d6      	b.n	8011f0e <__ieee754_pow+0x962>
 8011960:	4b11      	ldr	r3, [pc, #68]	; (80119a8 <__ieee754_pow+0x3fc>)
 8011962:	18cb      	adds	r3, r1, r3
 8011964:	4303      	orrs	r3, r0
 8011966:	d100      	bne.n	801196a <__ieee754_pow+0x3be>
 8011968:	e1d8      	b.n	8011d1c <__ieee754_pow+0x770>
 801196a:	9800      	ldr	r0, [sp, #0]
 801196c:	9901      	ldr	r1, [sp, #4]
 801196e:	2300      	movs	r3, #0
 8011970:	2200      	movs	r2, #0
 8011972:	f7ee fd6f 	bl	8000454 <__aeabi_dcmplt>
 8011976:	1e43      	subs	r3, r0, #1
 8011978:	4198      	sbcs	r0, r3
 801197a:	e731      	b.n	80117e0 <__ieee754_pow+0x234>
 801197c:	3ff00000 	.word	0x3ff00000
 8011980:	3ff71547 	.word	0x3ff71547
 8011984:	f85ddf44 	.word	0xf85ddf44
 8011988:	3e54ae0b 	.word	0x3e54ae0b
 801198c:	3fd00000 	.word	0x3fd00000
 8011990:	55555555 	.word	0x55555555
 8011994:	3fd55555 	.word	0x3fd55555
 8011998:	3fe00000 	.word	0x3fe00000
 801199c:	652b82fe 	.word	0x652b82fe
 80119a0:	bff00000 	.word	0xbff00000
 80119a4:	408fffff 	.word	0x408fffff
 80119a8:	bf700000 	.word	0xbf700000
 80119ac:	4bc0      	ldr	r3, [pc, #768]	; (8011cb0 <__ieee754_pow+0x704>)
 80119ae:	2200      	movs	r2, #0
 80119b0:	422b      	tst	r3, r5
 80119b2:	d10a      	bne.n	80119ca <__ieee754_pow+0x41e>
 80119b4:	9800      	ldr	r0, [sp, #0]
 80119b6:	9901      	ldr	r1, [sp, #4]
 80119b8:	2200      	movs	r2, #0
 80119ba:	4bbe      	ldr	r3, [pc, #760]	; (8011cb4 <__ieee754_pow+0x708>)
 80119bc:	f7f0 fb72 	bl	80020a4 <__aeabi_dmul>
 80119c0:	2235      	movs	r2, #53	; 0x35
 80119c2:	9000      	str	r0, [sp, #0]
 80119c4:	9101      	str	r1, [sp, #4]
 80119c6:	9c01      	ldr	r4, [sp, #4]
 80119c8:	4252      	negs	r2, r2
 80119ca:	49bb      	ldr	r1, [pc, #748]	; (8011cb8 <__ieee754_pow+0x70c>)
 80119cc:	1523      	asrs	r3, r4, #20
 80119ce:	185b      	adds	r3, r3, r1
 80119d0:	189b      	adds	r3, r3, r2
 80119d2:	0324      	lsls	r4, r4, #12
 80119d4:	4db9      	ldr	r5, [pc, #740]	; (8011cbc <__ieee754_pow+0x710>)
 80119d6:	930d      	str	r3, [sp, #52]	; 0x34
 80119d8:	4bb9      	ldr	r3, [pc, #740]	; (8011cc0 <__ieee754_pow+0x714>)
 80119da:	0b22      	lsrs	r2, r4, #12
 80119dc:	4315      	orrs	r5, r2
 80119de:	2400      	movs	r4, #0
 80119e0:	429a      	cmp	r2, r3
 80119e2:	dd09      	ble.n	80119f8 <__ieee754_pow+0x44c>
 80119e4:	4bb7      	ldr	r3, [pc, #732]	; (8011cc4 <__ieee754_pow+0x718>)
 80119e6:	3401      	adds	r4, #1
 80119e8:	429a      	cmp	r2, r3
 80119ea:	dd05      	ble.n	80119f8 <__ieee754_pow+0x44c>
 80119ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119ee:	191b      	adds	r3, r3, r4
 80119f0:	2400      	movs	r4, #0
 80119f2:	930d      	str	r3, [sp, #52]	; 0x34
 80119f4:	4bb4      	ldr	r3, [pc, #720]	; (8011cc8 <__ieee754_pow+0x71c>)
 80119f6:	18ed      	adds	r5, r5, r3
 80119f8:	00e3      	lsls	r3, r4, #3
 80119fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80119fc:	4bb3      	ldr	r3, [pc, #716]	; (8011ccc <__ieee754_pow+0x720>)
 80119fe:	00e2      	lsls	r2, r4, #3
 8011a00:	189b      	adds	r3, r3, r2
 8011a02:	9800      	ldr	r0, [sp, #0]
 8011a04:	9901      	ldr	r1, [sp, #4]
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	0029      	movs	r1, r5
 8011a0c:	0006      	movs	r6, r0
 8011a0e:	920a      	str	r2, [sp, #40]	; 0x28
 8011a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a12:	f7f0 fdb3 	bl	800257c <__aeabi_dsub>
 8011a16:	0032      	movs	r2, r6
 8011a18:	002b      	movs	r3, r5
 8011a1a:	9010      	str	r0, [sp, #64]	; 0x40
 8011a1c:	9111      	str	r1, [sp, #68]	; 0x44
 8011a1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a22:	f7ef fc01 	bl	8001228 <__aeabi_dadd>
 8011a26:	0002      	movs	r2, r0
 8011a28:	000b      	movs	r3, r1
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	49a3      	ldr	r1, [pc, #652]	; (8011cbc <__ieee754_pow+0x710>)
 8011a2e:	f7ef ff37 	bl	80018a0 <__aeabi_ddiv>
 8011a32:	0002      	movs	r2, r0
 8011a34:	000b      	movs	r3, r1
 8011a36:	9012      	str	r0, [sp, #72]	; 0x48
 8011a38:	9113      	str	r1, [sp, #76]	; 0x4c
 8011a3a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a3e:	f7f0 fb31 	bl	80020a4 <__aeabi_dmul>
 8011a42:	9008      	str	r0, [sp, #32]
 8011a44:	9109      	str	r1, [sp, #36]	; 0x24
 8011a46:	9a08      	ldr	r2, [sp, #32]
 8011a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a4a:	2180      	movs	r1, #128	; 0x80
 8011a4c:	9204      	str	r2, [sp, #16]
 8011a4e:	9305      	str	r3, [sp, #20]
 8011a50:	2300      	movs	r3, #0
 8011a52:	002f      	movs	r7, r5
 8011a54:	0589      	lsls	r1, r1, #22
 8011a56:	106d      	asrs	r5, r5, #1
 8011a58:	430d      	orrs	r5, r1
 8011a5a:	2180      	movs	r1, #128	; 0x80
 8011a5c:	9304      	str	r3, [sp, #16]
 8011a5e:	9a04      	ldr	r2, [sp, #16]
 8011a60:	9b05      	ldr	r3, [sp, #20]
 8011a62:	9200      	str	r2, [sp, #0]
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	0309      	lsls	r1, r1, #12
 8011a6a:	186d      	adds	r5, r5, r1
 8011a6c:	04a1      	lsls	r1, r4, #18
 8011a6e:	186b      	adds	r3, r5, r1
 8011a70:	9800      	ldr	r0, [sp, #0]
 8011a72:	9901      	ldr	r1, [sp, #4]
 8011a74:	0014      	movs	r4, r2
 8011a76:	001d      	movs	r5, r3
 8011a78:	f7f0 fb14 	bl	80020a4 <__aeabi_dmul>
 8011a7c:	0002      	movs	r2, r0
 8011a7e:	000b      	movs	r3, r1
 8011a80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a82:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a84:	f7f0 fd7a 	bl	800257c <__aeabi_dsub>
 8011a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a8c:	9010      	str	r0, [sp, #64]	; 0x40
 8011a8e:	9111      	str	r1, [sp, #68]	; 0x44
 8011a90:	0020      	movs	r0, r4
 8011a92:	0029      	movs	r1, r5
 8011a94:	f7f0 fd72 	bl	800257c <__aeabi_dsub>
 8011a98:	0002      	movs	r2, r0
 8011a9a:	000b      	movs	r3, r1
 8011a9c:	0030      	movs	r0, r6
 8011a9e:	0039      	movs	r1, r7
 8011aa0:	f7f0 fd6c 	bl	800257c <__aeabi_dsub>
 8011aa4:	9a00      	ldr	r2, [sp, #0]
 8011aa6:	9b01      	ldr	r3, [sp, #4]
 8011aa8:	f7f0 fafc 	bl	80020a4 <__aeabi_dmul>
 8011aac:	0002      	movs	r2, r0
 8011aae:	000b      	movs	r3, r1
 8011ab0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011ab2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ab4:	f7f0 fd62 	bl	800257c <__aeabi_dsub>
 8011ab8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011aba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011abc:	f7f0 faf2 	bl	80020a4 <__aeabi_dmul>
 8011ac0:	9a08      	ldr	r2, [sp, #32]
 8011ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ac4:	900a      	str	r0, [sp, #40]	; 0x28
 8011ac6:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ac8:	0010      	movs	r0, r2
 8011aca:	0019      	movs	r1, r3
 8011acc:	f7f0 faea 	bl	80020a4 <__aeabi_dmul>
 8011ad0:	0006      	movs	r6, r0
 8011ad2:	000f      	movs	r7, r1
 8011ad4:	4a7e      	ldr	r2, [pc, #504]	; (8011cd0 <__ieee754_pow+0x724>)
 8011ad6:	4b7f      	ldr	r3, [pc, #508]	; (8011cd4 <__ieee754_pow+0x728>)
 8011ad8:	f7f0 fae4 	bl	80020a4 <__aeabi_dmul>
 8011adc:	4a7e      	ldr	r2, [pc, #504]	; (8011cd8 <__ieee754_pow+0x72c>)
 8011ade:	4b7f      	ldr	r3, [pc, #508]	; (8011cdc <__ieee754_pow+0x730>)
 8011ae0:	f7ef fba2 	bl	8001228 <__aeabi_dadd>
 8011ae4:	0032      	movs	r2, r6
 8011ae6:	003b      	movs	r3, r7
 8011ae8:	f7f0 fadc 	bl	80020a4 <__aeabi_dmul>
 8011aec:	4a7c      	ldr	r2, [pc, #496]	; (8011ce0 <__ieee754_pow+0x734>)
 8011aee:	4b7d      	ldr	r3, [pc, #500]	; (8011ce4 <__ieee754_pow+0x738>)
 8011af0:	f7ef fb9a 	bl	8001228 <__aeabi_dadd>
 8011af4:	0032      	movs	r2, r6
 8011af6:	003b      	movs	r3, r7
 8011af8:	f7f0 fad4 	bl	80020a4 <__aeabi_dmul>
 8011afc:	4a7a      	ldr	r2, [pc, #488]	; (8011ce8 <__ieee754_pow+0x73c>)
 8011afe:	4b7b      	ldr	r3, [pc, #492]	; (8011cec <__ieee754_pow+0x740>)
 8011b00:	f7ef fb92 	bl	8001228 <__aeabi_dadd>
 8011b04:	0032      	movs	r2, r6
 8011b06:	003b      	movs	r3, r7
 8011b08:	f7f0 facc 	bl	80020a4 <__aeabi_dmul>
 8011b0c:	4a78      	ldr	r2, [pc, #480]	; (8011cf0 <__ieee754_pow+0x744>)
 8011b0e:	4b79      	ldr	r3, [pc, #484]	; (8011cf4 <__ieee754_pow+0x748>)
 8011b10:	f7ef fb8a 	bl	8001228 <__aeabi_dadd>
 8011b14:	0032      	movs	r2, r6
 8011b16:	003b      	movs	r3, r7
 8011b18:	f7f0 fac4 	bl	80020a4 <__aeabi_dmul>
 8011b1c:	4a76      	ldr	r2, [pc, #472]	; (8011cf8 <__ieee754_pow+0x74c>)
 8011b1e:	4b77      	ldr	r3, [pc, #476]	; (8011cfc <__ieee754_pow+0x750>)
 8011b20:	f7ef fb82 	bl	8001228 <__aeabi_dadd>
 8011b24:	0032      	movs	r2, r6
 8011b26:	0004      	movs	r4, r0
 8011b28:	000d      	movs	r5, r1
 8011b2a:	003b      	movs	r3, r7
 8011b2c:	0030      	movs	r0, r6
 8011b2e:	0039      	movs	r1, r7
 8011b30:	f7f0 fab8 	bl	80020a4 <__aeabi_dmul>
 8011b34:	0002      	movs	r2, r0
 8011b36:	000b      	movs	r3, r1
 8011b38:	0020      	movs	r0, r4
 8011b3a:	0029      	movs	r1, r5
 8011b3c:	f7f0 fab2 	bl	80020a4 <__aeabi_dmul>
 8011b40:	9a00      	ldr	r2, [sp, #0]
 8011b42:	9b01      	ldr	r3, [sp, #4]
 8011b44:	0004      	movs	r4, r0
 8011b46:	000d      	movs	r5, r1
 8011b48:	9808      	ldr	r0, [sp, #32]
 8011b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b4c:	f7ef fb6c 	bl	8001228 <__aeabi_dadd>
 8011b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b54:	f7f0 faa6 	bl	80020a4 <__aeabi_dmul>
 8011b58:	0022      	movs	r2, r4
 8011b5a:	002b      	movs	r3, r5
 8011b5c:	f7ef fb64 	bl	8001228 <__aeabi_dadd>
 8011b60:	9a00      	ldr	r2, [sp, #0]
 8011b62:	9b01      	ldr	r3, [sp, #4]
 8011b64:	9010      	str	r0, [sp, #64]	; 0x40
 8011b66:	9111      	str	r1, [sp, #68]	; 0x44
 8011b68:	0010      	movs	r0, r2
 8011b6a:	0019      	movs	r1, r3
 8011b6c:	f7f0 fa9a 	bl	80020a4 <__aeabi_dmul>
 8011b70:	2200      	movs	r2, #0
 8011b72:	4b63      	ldr	r3, [pc, #396]	; (8011d00 <__ieee754_pow+0x754>)
 8011b74:	0004      	movs	r4, r0
 8011b76:	000d      	movs	r5, r1
 8011b78:	f7ef fb56 	bl	8001228 <__aeabi_dadd>
 8011b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b80:	f7ef fb52 	bl	8001228 <__aeabi_dadd>
 8011b84:	2600      	movs	r6, #0
 8011b86:	000f      	movs	r7, r1
 8011b88:	0032      	movs	r2, r6
 8011b8a:	000b      	movs	r3, r1
 8011b8c:	9800      	ldr	r0, [sp, #0]
 8011b8e:	9901      	ldr	r1, [sp, #4]
 8011b90:	f7f0 fa88 	bl	80020a4 <__aeabi_dmul>
 8011b94:	2200      	movs	r2, #0
 8011b96:	9000      	str	r0, [sp, #0]
 8011b98:	9101      	str	r1, [sp, #4]
 8011b9a:	4b59      	ldr	r3, [pc, #356]	; (8011d00 <__ieee754_pow+0x754>)
 8011b9c:	0030      	movs	r0, r6
 8011b9e:	0039      	movs	r1, r7
 8011ba0:	f7f0 fcec 	bl	800257c <__aeabi_dsub>
 8011ba4:	0022      	movs	r2, r4
 8011ba6:	002b      	movs	r3, r5
 8011ba8:	f7f0 fce8 	bl	800257c <__aeabi_dsub>
 8011bac:	0002      	movs	r2, r0
 8011bae:	000b      	movs	r3, r1
 8011bb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011bb2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011bb4:	f7f0 fce2 	bl	800257c <__aeabi_dsub>
 8011bb8:	9a08      	ldr	r2, [sp, #32]
 8011bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bbc:	f7f0 fa72 	bl	80020a4 <__aeabi_dmul>
 8011bc0:	0032      	movs	r2, r6
 8011bc2:	0004      	movs	r4, r0
 8011bc4:	000d      	movs	r5, r1
 8011bc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bca:	003b      	movs	r3, r7
 8011bcc:	f7f0 fa6a 	bl	80020a4 <__aeabi_dmul>
 8011bd0:	0002      	movs	r2, r0
 8011bd2:	000b      	movs	r3, r1
 8011bd4:	0020      	movs	r0, r4
 8011bd6:	0029      	movs	r1, r5
 8011bd8:	f7ef fb26 	bl	8001228 <__aeabi_dadd>
 8011bdc:	0004      	movs	r4, r0
 8011bde:	000d      	movs	r5, r1
 8011be0:	0002      	movs	r2, r0
 8011be2:	000b      	movs	r3, r1
 8011be4:	9800      	ldr	r0, [sp, #0]
 8011be6:	9901      	ldr	r1, [sp, #4]
 8011be8:	f7ef fb1e 	bl	8001228 <__aeabi_dadd>
 8011bec:	2600      	movs	r6, #0
 8011bee:	22e0      	movs	r2, #224	; 0xe0
 8011bf0:	4b44      	ldr	r3, [pc, #272]	; (8011d04 <__ieee754_pow+0x758>)
 8011bf2:	0612      	lsls	r2, r2, #24
 8011bf4:	0030      	movs	r0, r6
 8011bf6:	000f      	movs	r7, r1
 8011bf8:	f7f0 fa54 	bl	80020a4 <__aeabi_dmul>
 8011bfc:	9008      	str	r0, [sp, #32]
 8011bfe:	9109      	str	r1, [sp, #36]	; 0x24
 8011c00:	9a00      	ldr	r2, [sp, #0]
 8011c02:	9b01      	ldr	r3, [sp, #4]
 8011c04:	0039      	movs	r1, r7
 8011c06:	0030      	movs	r0, r6
 8011c08:	f7f0 fcb8 	bl	800257c <__aeabi_dsub>
 8011c0c:	0002      	movs	r2, r0
 8011c0e:	000b      	movs	r3, r1
 8011c10:	0020      	movs	r0, r4
 8011c12:	0029      	movs	r1, r5
 8011c14:	f7f0 fcb2 	bl	800257c <__aeabi_dsub>
 8011c18:	4a3b      	ldr	r2, [pc, #236]	; (8011d08 <__ieee754_pow+0x75c>)
 8011c1a:	4b3a      	ldr	r3, [pc, #232]	; (8011d04 <__ieee754_pow+0x758>)
 8011c1c:	f7f0 fa42 	bl	80020a4 <__aeabi_dmul>
 8011c20:	4a3a      	ldr	r2, [pc, #232]	; (8011d0c <__ieee754_pow+0x760>)
 8011c22:	0004      	movs	r4, r0
 8011c24:	000d      	movs	r5, r1
 8011c26:	4b3a      	ldr	r3, [pc, #232]	; (8011d10 <__ieee754_pow+0x764>)
 8011c28:	0039      	movs	r1, r7
 8011c2a:	0030      	movs	r0, r6
 8011c2c:	f7f0 fa3a 	bl	80020a4 <__aeabi_dmul>
 8011c30:	0002      	movs	r2, r0
 8011c32:	000b      	movs	r3, r1
 8011c34:	0020      	movs	r0, r4
 8011c36:	0029      	movs	r1, r5
 8011c38:	f7ef faf6 	bl	8001228 <__aeabi_dadd>
 8011c3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c3e:	4b35      	ldr	r3, [pc, #212]	; (8011d14 <__ieee754_pow+0x768>)
 8011c40:	189b      	adds	r3, r3, r2
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	f7ef faef 	bl	8001228 <__aeabi_dadd>
 8011c4a:	900a      	str	r0, [sp, #40]	; 0x28
 8011c4c:	910b      	str	r1, [sp, #44]	; 0x2c
 8011c4e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011c50:	f7f1 f87a 	bl	8002d48 <__aeabi_i2d>
 8011c54:	0004      	movs	r4, r0
 8011c56:	000d      	movs	r5, r1
 8011c58:	9808      	ldr	r0, [sp, #32]
 8011c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c5e:	4b2e      	ldr	r3, [pc, #184]	; (8011d18 <__ieee754_pow+0x76c>)
 8011c60:	189b      	adds	r3, r3, r2
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	9200      	str	r2, [sp, #0]
 8011c68:	9301      	str	r3, [sp, #4]
 8011c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c6e:	f7ef fadb 	bl	8001228 <__aeabi_dadd>
 8011c72:	9a00      	ldr	r2, [sp, #0]
 8011c74:	9b01      	ldr	r3, [sp, #4]
 8011c76:	f7ef fad7 	bl	8001228 <__aeabi_dadd>
 8011c7a:	0022      	movs	r2, r4
 8011c7c:	002b      	movs	r3, r5
 8011c7e:	f7ef fad3 	bl	8001228 <__aeabi_dadd>
 8011c82:	0022      	movs	r2, r4
 8011c84:	002b      	movs	r3, r5
 8011c86:	0030      	movs	r0, r6
 8011c88:	000f      	movs	r7, r1
 8011c8a:	f7f0 fc77 	bl	800257c <__aeabi_dsub>
 8011c8e:	9a00      	ldr	r2, [sp, #0]
 8011c90:	9b01      	ldr	r3, [sp, #4]
 8011c92:	f7f0 fc73 	bl	800257c <__aeabi_dsub>
 8011c96:	9a08      	ldr	r2, [sp, #32]
 8011c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c9a:	f7f0 fc6f 	bl	800257c <__aeabi_dsub>
 8011c9e:	0002      	movs	r2, r0
 8011ca0:	000b      	movs	r3, r1
 8011ca2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ca6:	e619      	b.n	80118dc <__ieee754_pow+0x330>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	4c04      	ldr	r4, [pc, #16]	; (8011cbc <__ieee754_pow+0x710>)
 8011cac:	e622      	b.n	80118f4 <__ieee754_pow+0x348>
 8011cae:	46c0      	nop			; (mov r8, r8)
 8011cb0:	7ff00000 	.word	0x7ff00000
 8011cb4:	43400000 	.word	0x43400000
 8011cb8:	fffffc01 	.word	0xfffffc01
 8011cbc:	3ff00000 	.word	0x3ff00000
 8011cc0:	0003988e 	.word	0x0003988e
 8011cc4:	000bb679 	.word	0x000bb679
 8011cc8:	fff00000 	.word	0xfff00000
 8011ccc:	08012d38 	.word	0x08012d38
 8011cd0:	4a454eef 	.word	0x4a454eef
 8011cd4:	3fca7e28 	.word	0x3fca7e28
 8011cd8:	93c9db65 	.word	0x93c9db65
 8011cdc:	3fcd864a 	.word	0x3fcd864a
 8011ce0:	a91d4101 	.word	0xa91d4101
 8011ce4:	3fd17460 	.word	0x3fd17460
 8011ce8:	518f264d 	.word	0x518f264d
 8011cec:	3fd55555 	.word	0x3fd55555
 8011cf0:	db6fabff 	.word	0xdb6fabff
 8011cf4:	3fdb6db6 	.word	0x3fdb6db6
 8011cf8:	33333303 	.word	0x33333303
 8011cfc:	3fe33333 	.word	0x3fe33333
 8011d00:	40080000 	.word	0x40080000
 8011d04:	3feec709 	.word	0x3feec709
 8011d08:	dc3a03fd 	.word	0xdc3a03fd
 8011d0c:	145b01f5 	.word	0x145b01f5
 8011d10:	be3e2fe0 	.word	0xbe3e2fe0
 8011d14:	08012d58 	.word	0x08012d58
 8011d18:	08012d48 	.word	0x08012d48
 8011d1c:	4a90      	ldr	r2, [pc, #576]	; (8011f60 <__ieee754_pow+0x9b4>)
 8011d1e:	4b91      	ldr	r3, [pc, #580]	; (8011f64 <__ieee754_pow+0x9b8>)
 8011d20:	9804      	ldr	r0, [sp, #16]
 8011d22:	9905      	ldr	r1, [sp, #20]
 8011d24:	f7ef fa80 	bl	8001228 <__aeabi_dadd>
 8011d28:	0032      	movs	r2, r6
 8011d2a:	9002      	str	r0, [sp, #8]
 8011d2c:	9103      	str	r1, [sp, #12]
 8011d2e:	003b      	movs	r3, r7
 8011d30:	0028      	movs	r0, r5
 8011d32:	0021      	movs	r1, r4
 8011d34:	f7f0 fc22 	bl	800257c <__aeabi_dsub>
 8011d38:	0002      	movs	r2, r0
 8011d3a:	000b      	movs	r3, r1
 8011d3c:	9802      	ldr	r0, [sp, #8]
 8011d3e:	9903      	ldr	r1, [sp, #12]
 8011d40:	f7ee fb9c 	bl	800047c <__aeabi_dcmpgt>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d000      	beq.n	8011d4a <__ieee754_pow+0x79e>
 8011d48:	e60f      	b.n	801196a <__ieee754_pow+0x3be>
 8011d4a:	2100      	movs	r1, #0
 8011d4c:	4a86      	ldr	r2, [pc, #536]	; (8011f68 <__ieee754_pow+0x9bc>)
 8011d4e:	0063      	lsls	r3, r4, #1
 8011d50:	085b      	lsrs	r3, r3, #1
 8011d52:	9102      	str	r1, [sp, #8]
 8011d54:	4293      	cmp	r3, r2
 8011d56:	dd25      	ble.n	8011da4 <__ieee754_pow+0x7f8>
 8011d58:	4a84      	ldr	r2, [pc, #528]	; (8011f6c <__ieee754_pow+0x9c0>)
 8011d5a:	151b      	asrs	r3, r3, #20
 8011d5c:	189b      	adds	r3, r3, r2
 8011d5e:	2280      	movs	r2, #128	; 0x80
 8011d60:	0352      	lsls	r2, r2, #13
 8011d62:	4694      	mov	ip, r2
 8011d64:	411a      	asrs	r2, r3
 8011d66:	1914      	adds	r4, r2, r4
 8011d68:	4b81      	ldr	r3, [pc, #516]	; (8011f70 <__ieee754_pow+0x9c4>)
 8011d6a:	0060      	lsls	r0, r4, #1
 8011d6c:	4d81      	ldr	r5, [pc, #516]	; (8011f74 <__ieee754_pow+0x9c8>)
 8011d6e:	0d40      	lsrs	r0, r0, #21
 8011d70:	18c0      	adds	r0, r0, r3
 8011d72:	4105      	asrs	r5, r0
 8011d74:	0021      	movs	r1, r4
 8011d76:	43a9      	bics	r1, r5
 8011d78:	000b      	movs	r3, r1
 8011d7a:	4661      	mov	r1, ip
 8011d7c:	0324      	lsls	r4, r4, #12
 8011d7e:	0b24      	lsrs	r4, r4, #12
 8011d80:	4321      	orrs	r1, r4
 8011d82:	2414      	movs	r4, #20
 8011d84:	1a20      	subs	r0, r4, r0
 8011d86:	4101      	asrs	r1, r0
 8011d88:	9102      	str	r1, [sp, #8]
 8011d8a:	9908      	ldr	r1, [sp, #32]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	2900      	cmp	r1, #0
 8011d90:	da02      	bge.n	8011d98 <__ieee754_pow+0x7ec>
 8011d92:	9902      	ldr	r1, [sp, #8]
 8011d94:	4249      	negs	r1, r1
 8011d96:	9102      	str	r1, [sp, #8]
 8011d98:	0030      	movs	r0, r6
 8011d9a:	0039      	movs	r1, r7
 8011d9c:	f7f0 fbee 	bl	800257c <__aeabi_dsub>
 8011da0:	9006      	str	r0, [sp, #24]
 8011da2:	9107      	str	r1, [sp, #28]
 8011da4:	9a04      	ldr	r2, [sp, #16]
 8011da6:	9b05      	ldr	r3, [sp, #20]
 8011da8:	9806      	ldr	r0, [sp, #24]
 8011daa:	9907      	ldr	r1, [sp, #28]
 8011dac:	2600      	movs	r6, #0
 8011dae:	f7ef fa3b 	bl	8001228 <__aeabi_dadd>
 8011db2:	2200      	movs	r2, #0
 8011db4:	0030      	movs	r0, r6
 8011db6:	4b70      	ldr	r3, [pc, #448]	; (8011f78 <__ieee754_pow+0x9cc>)
 8011db8:	000f      	movs	r7, r1
 8011dba:	f7f0 f973 	bl	80020a4 <__aeabi_dmul>
 8011dbe:	9a06      	ldr	r2, [sp, #24]
 8011dc0:	9b07      	ldr	r3, [sp, #28]
 8011dc2:	9008      	str	r0, [sp, #32]
 8011dc4:	9109      	str	r1, [sp, #36]	; 0x24
 8011dc6:	0030      	movs	r0, r6
 8011dc8:	0039      	movs	r1, r7
 8011dca:	f7f0 fbd7 	bl	800257c <__aeabi_dsub>
 8011dce:	0002      	movs	r2, r0
 8011dd0:	000b      	movs	r3, r1
 8011dd2:	9804      	ldr	r0, [sp, #16]
 8011dd4:	9905      	ldr	r1, [sp, #20]
 8011dd6:	f7f0 fbd1 	bl	800257c <__aeabi_dsub>
 8011dda:	4a68      	ldr	r2, [pc, #416]	; (8011f7c <__ieee754_pow+0x9d0>)
 8011ddc:	4b68      	ldr	r3, [pc, #416]	; (8011f80 <__ieee754_pow+0x9d4>)
 8011dde:	f7f0 f961 	bl	80020a4 <__aeabi_dmul>
 8011de2:	4a68      	ldr	r2, [pc, #416]	; (8011f84 <__ieee754_pow+0x9d8>)
 8011de4:	0004      	movs	r4, r0
 8011de6:	000d      	movs	r5, r1
 8011de8:	0030      	movs	r0, r6
 8011dea:	0039      	movs	r1, r7
 8011dec:	4b66      	ldr	r3, [pc, #408]	; (8011f88 <__ieee754_pow+0x9dc>)
 8011dee:	f7f0 f959 	bl	80020a4 <__aeabi_dmul>
 8011df2:	0002      	movs	r2, r0
 8011df4:	000b      	movs	r3, r1
 8011df6:	0020      	movs	r0, r4
 8011df8:	0029      	movs	r1, r5
 8011dfa:	f7ef fa15 	bl	8001228 <__aeabi_dadd>
 8011dfe:	0004      	movs	r4, r0
 8011e00:	000d      	movs	r5, r1
 8011e02:	0002      	movs	r2, r0
 8011e04:	000b      	movs	r3, r1
 8011e06:	9808      	ldr	r0, [sp, #32]
 8011e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e0a:	f7ef fa0d 	bl	8001228 <__aeabi_dadd>
 8011e0e:	9a08      	ldr	r2, [sp, #32]
 8011e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e12:	0006      	movs	r6, r0
 8011e14:	000f      	movs	r7, r1
 8011e16:	f7f0 fbb1 	bl	800257c <__aeabi_dsub>
 8011e1a:	0002      	movs	r2, r0
 8011e1c:	000b      	movs	r3, r1
 8011e1e:	0020      	movs	r0, r4
 8011e20:	0029      	movs	r1, r5
 8011e22:	f7f0 fbab 	bl	800257c <__aeabi_dsub>
 8011e26:	0032      	movs	r2, r6
 8011e28:	9004      	str	r0, [sp, #16]
 8011e2a:	9105      	str	r1, [sp, #20]
 8011e2c:	003b      	movs	r3, r7
 8011e2e:	0030      	movs	r0, r6
 8011e30:	0039      	movs	r1, r7
 8011e32:	f7f0 f937 	bl	80020a4 <__aeabi_dmul>
 8011e36:	0004      	movs	r4, r0
 8011e38:	000d      	movs	r5, r1
 8011e3a:	4a54      	ldr	r2, [pc, #336]	; (8011f8c <__ieee754_pow+0x9e0>)
 8011e3c:	4b54      	ldr	r3, [pc, #336]	; (8011f90 <__ieee754_pow+0x9e4>)
 8011e3e:	f7f0 f931 	bl	80020a4 <__aeabi_dmul>
 8011e42:	4a54      	ldr	r2, [pc, #336]	; (8011f94 <__ieee754_pow+0x9e8>)
 8011e44:	4b54      	ldr	r3, [pc, #336]	; (8011f98 <__ieee754_pow+0x9ec>)
 8011e46:	f7f0 fb99 	bl	800257c <__aeabi_dsub>
 8011e4a:	0022      	movs	r2, r4
 8011e4c:	002b      	movs	r3, r5
 8011e4e:	f7f0 f929 	bl	80020a4 <__aeabi_dmul>
 8011e52:	4a52      	ldr	r2, [pc, #328]	; (8011f9c <__ieee754_pow+0x9f0>)
 8011e54:	4b52      	ldr	r3, [pc, #328]	; (8011fa0 <__ieee754_pow+0x9f4>)
 8011e56:	f7ef f9e7 	bl	8001228 <__aeabi_dadd>
 8011e5a:	0022      	movs	r2, r4
 8011e5c:	002b      	movs	r3, r5
 8011e5e:	f7f0 f921 	bl	80020a4 <__aeabi_dmul>
 8011e62:	4a50      	ldr	r2, [pc, #320]	; (8011fa4 <__ieee754_pow+0x9f8>)
 8011e64:	4b50      	ldr	r3, [pc, #320]	; (8011fa8 <__ieee754_pow+0x9fc>)
 8011e66:	f7f0 fb89 	bl	800257c <__aeabi_dsub>
 8011e6a:	0022      	movs	r2, r4
 8011e6c:	002b      	movs	r3, r5
 8011e6e:	f7f0 f919 	bl	80020a4 <__aeabi_dmul>
 8011e72:	4a4e      	ldr	r2, [pc, #312]	; (8011fac <__ieee754_pow+0xa00>)
 8011e74:	4b4e      	ldr	r3, [pc, #312]	; (8011fb0 <__ieee754_pow+0xa04>)
 8011e76:	f7ef f9d7 	bl	8001228 <__aeabi_dadd>
 8011e7a:	0022      	movs	r2, r4
 8011e7c:	002b      	movs	r3, r5
 8011e7e:	f7f0 f911 	bl	80020a4 <__aeabi_dmul>
 8011e82:	0002      	movs	r2, r0
 8011e84:	000b      	movs	r3, r1
 8011e86:	0030      	movs	r0, r6
 8011e88:	0039      	movs	r1, r7
 8011e8a:	f7f0 fb77 	bl	800257c <__aeabi_dsub>
 8011e8e:	0004      	movs	r4, r0
 8011e90:	000d      	movs	r5, r1
 8011e92:	0002      	movs	r2, r0
 8011e94:	000b      	movs	r3, r1
 8011e96:	0030      	movs	r0, r6
 8011e98:	0039      	movs	r1, r7
 8011e9a:	f7f0 f903 	bl	80020a4 <__aeabi_dmul>
 8011e9e:	2380      	movs	r3, #128	; 0x80
 8011ea0:	9006      	str	r0, [sp, #24]
 8011ea2:	9107      	str	r1, [sp, #28]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	0020      	movs	r0, r4
 8011ea8:	0029      	movs	r1, r5
 8011eaa:	05db      	lsls	r3, r3, #23
 8011eac:	f7f0 fb66 	bl	800257c <__aeabi_dsub>
 8011eb0:	0002      	movs	r2, r0
 8011eb2:	000b      	movs	r3, r1
 8011eb4:	9806      	ldr	r0, [sp, #24]
 8011eb6:	9907      	ldr	r1, [sp, #28]
 8011eb8:	f7ef fcf2 	bl	80018a0 <__aeabi_ddiv>
 8011ebc:	9a04      	ldr	r2, [sp, #16]
 8011ebe:	9b05      	ldr	r3, [sp, #20]
 8011ec0:	0004      	movs	r4, r0
 8011ec2:	000d      	movs	r5, r1
 8011ec4:	0030      	movs	r0, r6
 8011ec6:	0039      	movs	r1, r7
 8011ec8:	f7f0 f8ec 	bl	80020a4 <__aeabi_dmul>
 8011ecc:	9a04      	ldr	r2, [sp, #16]
 8011ece:	9b05      	ldr	r3, [sp, #20]
 8011ed0:	f7ef f9aa 	bl	8001228 <__aeabi_dadd>
 8011ed4:	0002      	movs	r2, r0
 8011ed6:	000b      	movs	r3, r1
 8011ed8:	0020      	movs	r0, r4
 8011eda:	0029      	movs	r1, r5
 8011edc:	f7f0 fb4e 	bl	800257c <__aeabi_dsub>
 8011ee0:	0032      	movs	r2, r6
 8011ee2:	003b      	movs	r3, r7
 8011ee4:	f7f0 fb4a 	bl	800257c <__aeabi_dsub>
 8011ee8:	0002      	movs	r2, r0
 8011eea:	000b      	movs	r3, r1
 8011eec:	2000      	movs	r0, #0
 8011eee:	4931      	ldr	r1, [pc, #196]	; (8011fb4 <__ieee754_pow+0xa08>)
 8011ef0:	f7f0 fb44 	bl	800257c <__aeabi_dsub>
 8011ef4:	9b02      	ldr	r3, [sp, #8]
 8011ef6:	051b      	lsls	r3, r3, #20
 8011ef8:	185b      	adds	r3, r3, r1
 8011efa:	151a      	asrs	r2, r3, #20
 8011efc:	2a00      	cmp	r2, #0
 8011efe:	dc25      	bgt.n	8011f4c <__ieee754_pow+0x9a0>
 8011f00:	9a02      	ldr	r2, [sp, #8]
 8011f02:	f000 f9cb 	bl	801229c <scalbn>
 8011f06:	9a00      	ldr	r2, [sp, #0]
 8011f08:	9b01      	ldr	r3, [sp, #4]
 8011f0a:	f7ff fc33 	bl	8011774 <__ieee754_pow+0x1c8>
 8011f0e:	4a2a      	ldr	r2, [pc, #168]	; (8011fb8 <__ieee754_pow+0xa0c>)
 8011f10:	004b      	lsls	r3, r1, #1
 8011f12:	085b      	lsrs	r3, r3, #1
 8011f14:	4293      	cmp	r3, r2
 8011f16:	dc00      	bgt.n	8011f1a <__ieee754_pow+0x96e>
 8011f18:	e717      	b.n	8011d4a <__ieee754_pow+0x79e>
 8011f1a:	4b28      	ldr	r3, [pc, #160]	; (8011fbc <__ieee754_pow+0xa10>)
 8011f1c:	18cb      	adds	r3, r1, r3
 8011f1e:	4303      	orrs	r3, r0
 8011f20:	d008      	beq.n	8011f34 <__ieee754_pow+0x988>
 8011f22:	9800      	ldr	r0, [sp, #0]
 8011f24:	9901      	ldr	r1, [sp, #4]
 8011f26:	2300      	movs	r3, #0
 8011f28:	2200      	movs	r2, #0
 8011f2a:	f7ee fa93 	bl	8000454 <__aeabi_dcmplt>
 8011f2e:	1e43      	subs	r3, r0, #1
 8011f30:	4198      	sbcs	r0, r3
 8011f32:	e462      	b.n	80117fa <__ieee754_pow+0x24e>
 8011f34:	0032      	movs	r2, r6
 8011f36:	003b      	movs	r3, r7
 8011f38:	f7f0 fb20 	bl	800257c <__aeabi_dsub>
 8011f3c:	9a04      	ldr	r2, [sp, #16]
 8011f3e:	9b05      	ldr	r3, [sp, #20]
 8011f40:	f7ee faa6 	bl	8000490 <__aeabi_dcmpge>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d100      	bne.n	8011f4a <__ieee754_pow+0x99e>
 8011f48:	e6ff      	b.n	8011d4a <__ieee754_pow+0x79e>
 8011f4a:	e7ea      	b.n	8011f22 <__ieee754_pow+0x976>
 8011f4c:	0019      	movs	r1, r3
 8011f4e:	e7da      	b.n	8011f06 <__ieee754_pow+0x95a>
 8011f50:	2300      	movs	r3, #0
 8011f52:	4c18      	ldr	r4, [pc, #96]	; (8011fb4 <__ieee754_pow+0xa08>)
 8011f54:	f7ff fbf1 	bl	801173a <__ieee754_pow+0x18e>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	2400      	movs	r4, #0
 8011f5c:	f7ff fbed 	bl	801173a <__ieee754_pow+0x18e>
 8011f60:	652b82fe 	.word	0x652b82fe
 8011f64:	3c971547 	.word	0x3c971547
 8011f68:	3fe00000 	.word	0x3fe00000
 8011f6c:	fffffc02 	.word	0xfffffc02
 8011f70:	fffffc01 	.word	0xfffffc01
 8011f74:	000fffff 	.word	0x000fffff
 8011f78:	3fe62e43 	.word	0x3fe62e43
 8011f7c:	fefa39ef 	.word	0xfefa39ef
 8011f80:	3fe62e42 	.word	0x3fe62e42
 8011f84:	0ca86c39 	.word	0x0ca86c39
 8011f88:	be205c61 	.word	0xbe205c61
 8011f8c:	72bea4d0 	.word	0x72bea4d0
 8011f90:	3e663769 	.word	0x3e663769
 8011f94:	c5d26bf1 	.word	0xc5d26bf1
 8011f98:	3ebbbd41 	.word	0x3ebbbd41
 8011f9c:	af25de2c 	.word	0xaf25de2c
 8011fa0:	3f11566a 	.word	0x3f11566a
 8011fa4:	16bebd93 	.word	0x16bebd93
 8011fa8:	3f66c16c 	.word	0x3f66c16c
 8011fac:	5555553e 	.word	0x5555553e
 8011fb0:	3fc55555 	.word	0x3fc55555
 8011fb4:	3ff00000 	.word	0x3ff00000
 8011fb8:	4090cbff 	.word	0x4090cbff
 8011fbc:	3f6f3400 	.word	0x3f6f3400

08011fc0 <__ieee754_sqrt>:
 8011fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fc2:	000b      	movs	r3, r1
 8011fc4:	000c      	movs	r4, r1
 8011fc6:	4956      	ldr	r1, [pc, #344]	; (8012120 <__ieee754_sqrt+0x160>)
 8011fc8:	0005      	movs	r5, r0
 8011fca:	0002      	movs	r2, r0
 8011fcc:	0008      	movs	r0, r1
 8011fce:	b085      	sub	sp, #20
 8011fd0:	4020      	ands	r0, r4
 8011fd2:	4288      	cmp	r0, r1
 8011fd4:	d10f      	bne.n	8011ff6 <__ieee754_sqrt+0x36>
 8011fd6:	0028      	movs	r0, r5
 8011fd8:	0021      	movs	r1, r4
 8011fda:	f7f0 f863 	bl	80020a4 <__aeabi_dmul>
 8011fde:	0002      	movs	r2, r0
 8011fe0:	000b      	movs	r3, r1
 8011fe2:	0028      	movs	r0, r5
 8011fe4:	0021      	movs	r1, r4
 8011fe6:	f7ef f91f 	bl	8001228 <__aeabi_dadd>
 8011fea:	0005      	movs	r5, r0
 8011fec:	000c      	movs	r4, r1
 8011fee:	0028      	movs	r0, r5
 8011ff0:	0021      	movs	r1, r4
 8011ff2:	b005      	add	sp, #20
 8011ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ff6:	2c00      	cmp	r4, #0
 8011ff8:	dc10      	bgt.n	801201c <__ieee754_sqrt+0x5c>
 8011ffa:	0061      	lsls	r1, r4, #1
 8011ffc:	0849      	lsrs	r1, r1, #1
 8011ffe:	4329      	orrs	r1, r5
 8012000:	d0f5      	beq.n	8011fee <__ieee754_sqrt+0x2e>
 8012002:	2100      	movs	r1, #0
 8012004:	428c      	cmp	r4, r1
 8012006:	d100      	bne.n	801200a <__ieee754_sqrt+0x4a>
 8012008:	e080      	b.n	801210c <__ieee754_sqrt+0x14c>
 801200a:	0028      	movs	r0, r5
 801200c:	0021      	movs	r1, r4
 801200e:	f7f0 fab5 	bl	800257c <__aeabi_dsub>
 8012012:	0002      	movs	r2, r0
 8012014:	000b      	movs	r3, r1
 8012016:	f7ef fc43 	bl	80018a0 <__aeabi_ddiv>
 801201a:	e7e6      	b.n	8011fea <__ieee754_sqrt+0x2a>
 801201c:	1521      	asrs	r1, r4, #20
 801201e:	d075      	beq.n	801210c <__ieee754_sqrt+0x14c>
 8012020:	4840      	ldr	r0, [pc, #256]	; (8012124 <__ieee754_sqrt+0x164>)
 8012022:	031b      	lsls	r3, r3, #12
 8012024:	180c      	adds	r4, r1, r0
 8012026:	2080      	movs	r0, #128	; 0x80
 8012028:	0b1b      	lsrs	r3, r3, #12
 801202a:	0340      	lsls	r0, r0, #13
 801202c:	4303      	orrs	r3, r0
 801202e:	07c9      	lsls	r1, r1, #31
 8012030:	d403      	bmi.n	801203a <__ieee754_sqrt+0x7a>
 8012032:	0fd1      	lsrs	r1, r2, #31
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	185b      	adds	r3, r3, r1
 8012038:	0052      	lsls	r2, r2, #1
 801203a:	1061      	asrs	r1, r4, #1
 801203c:	2400      	movs	r4, #0
 801203e:	9103      	str	r1, [sp, #12]
 8012040:	005b      	lsls	r3, r3, #1
 8012042:	0fd1      	lsrs	r1, r2, #31
 8012044:	185b      	adds	r3, r3, r1
 8012046:	2180      	movs	r1, #128	; 0x80
 8012048:	2516      	movs	r5, #22
 801204a:	0020      	movs	r0, r4
 801204c:	0052      	lsls	r2, r2, #1
 801204e:	0389      	lsls	r1, r1, #14
 8012050:	1846      	adds	r6, r0, r1
 8012052:	429e      	cmp	r6, r3
 8012054:	dc02      	bgt.n	801205c <__ieee754_sqrt+0x9c>
 8012056:	1870      	adds	r0, r6, r1
 8012058:	1b9b      	subs	r3, r3, r6
 801205a:	1864      	adds	r4, r4, r1
 801205c:	0fd6      	lsrs	r6, r2, #31
 801205e:	005b      	lsls	r3, r3, #1
 8012060:	3d01      	subs	r5, #1
 8012062:	18f3      	adds	r3, r6, r3
 8012064:	0052      	lsls	r2, r2, #1
 8012066:	0849      	lsrs	r1, r1, #1
 8012068:	2d00      	cmp	r5, #0
 801206a:	d1f1      	bne.n	8012050 <__ieee754_sqrt+0x90>
 801206c:	2620      	movs	r6, #32
 801206e:	2780      	movs	r7, #128	; 0x80
 8012070:	0029      	movs	r1, r5
 8012072:	9601      	str	r6, [sp, #4]
 8012074:	063f      	lsls	r7, r7, #24
 8012076:	197e      	adds	r6, r7, r5
 8012078:	46b4      	mov	ip, r6
 801207a:	4283      	cmp	r3, r0
 801207c:	dc02      	bgt.n	8012084 <__ieee754_sqrt+0xc4>
 801207e:	d114      	bne.n	80120aa <__ieee754_sqrt+0xea>
 8012080:	4296      	cmp	r6, r2
 8012082:	d812      	bhi.n	80120aa <__ieee754_sqrt+0xea>
 8012084:	4665      	mov	r5, ip
 8012086:	4666      	mov	r6, ip
 8012088:	19ed      	adds	r5, r5, r7
 801208a:	9002      	str	r0, [sp, #8]
 801208c:	2e00      	cmp	r6, #0
 801208e:	da03      	bge.n	8012098 <__ieee754_sqrt+0xd8>
 8012090:	43ee      	mvns	r6, r5
 8012092:	0ff6      	lsrs	r6, r6, #31
 8012094:	1986      	adds	r6, r0, r6
 8012096:	9602      	str	r6, [sp, #8]
 8012098:	1a1b      	subs	r3, r3, r0
 801209a:	4562      	cmp	r2, ip
 801209c:	4180      	sbcs	r0, r0
 801209e:	4240      	negs	r0, r0
 80120a0:	1a1b      	subs	r3, r3, r0
 80120a2:	4660      	mov	r0, ip
 80120a4:	1a12      	subs	r2, r2, r0
 80120a6:	9802      	ldr	r0, [sp, #8]
 80120a8:	19c9      	adds	r1, r1, r7
 80120aa:	0fd6      	lsrs	r6, r2, #31
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	199b      	adds	r3, r3, r6
 80120b0:	9e01      	ldr	r6, [sp, #4]
 80120b2:	0052      	lsls	r2, r2, #1
 80120b4:	3e01      	subs	r6, #1
 80120b6:	087f      	lsrs	r7, r7, #1
 80120b8:	9601      	str	r6, [sp, #4]
 80120ba:	2e00      	cmp	r6, #0
 80120bc:	d1db      	bne.n	8012076 <__ieee754_sqrt+0xb6>
 80120be:	4313      	orrs	r3, r2
 80120c0:	d003      	beq.n	80120ca <__ieee754_sqrt+0x10a>
 80120c2:	1c4b      	adds	r3, r1, #1
 80120c4:	d127      	bne.n	8012116 <__ieee754_sqrt+0x156>
 80120c6:	0031      	movs	r1, r6
 80120c8:	3401      	adds	r4, #1
 80120ca:	4b17      	ldr	r3, [pc, #92]	; (8012128 <__ieee754_sqrt+0x168>)
 80120cc:	1060      	asrs	r0, r4, #1
 80120ce:	18c0      	adds	r0, r0, r3
 80120d0:	0849      	lsrs	r1, r1, #1
 80120d2:	07e3      	lsls	r3, r4, #31
 80120d4:	d502      	bpl.n	80120dc <__ieee754_sqrt+0x11c>
 80120d6:	2380      	movs	r3, #128	; 0x80
 80120d8:	061b      	lsls	r3, r3, #24
 80120da:	4319      	orrs	r1, r3
 80120dc:	9b03      	ldr	r3, [sp, #12]
 80120de:	000d      	movs	r5, r1
 80120e0:	051c      	lsls	r4, r3, #20
 80120e2:	1823      	adds	r3, r4, r0
 80120e4:	001c      	movs	r4, r3
 80120e6:	e782      	b.n	8011fee <__ieee754_sqrt+0x2e>
 80120e8:	0ad3      	lsrs	r3, r2, #11
 80120ea:	3815      	subs	r0, #21
 80120ec:	0552      	lsls	r2, r2, #21
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d0fa      	beq.n	80120e8 <__ieee754_sqrt+0x128>
 80120f2:	2480      	movs	r4, #128	; 0x80
 80120f4:	0364      	lsls	r4, r4, #13
 80120f6:	4223      	tst	r3, r4
 80120f8:	d00a      	beq.n	8012110 <__ieee754_sqrt+0x150>
 80120fa:	2420      	movs	r4, #32
 80120fc:	0016      	movs	r6, r2
 80120fe:	1a64      	subs	r4, r4, r1
 8012100:	40e6      	lsrs	r6, r4
 8012102:	1e4d      	subs	r5, r1, #1
 8012104:	408a      	lsls	r2, r1
 8012106:	4333      	orrs	r3, r6
 8012108:	1b41      	subs	r1, r0, r5
 801210a:	e789      	b.n	8012020 <__ieee754_sqrt+0x60>
 801210c:	2000      	movs	r0, #0
 801210e:	e7ee      	b.n	80120ee <__ieee754_sqrt+0x12e>
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	3101      	adds	r1, #1
 8012114:	e7ef      	b.n	80120f6 <__ieee754_sqrt+0x136>
 8012116:	2301      	movs	r3, #1
 8012118:	3101      	adds	r1, #1
 801211a:	4399      	bics	r1, r3
 801211c:	e7d5      	b.n	80120ca <__ieee754_sqrt+0x10a>
 801211e:	46c0      	nop			; (mov r8, r8)
 8012120:	7ff00000 	.word	0x7ff00000
 8012124:	fffffc01 	.word	0xfffffc01
 8012128:	3fe00000 	.word	0x3fe00000

0801212c <__ieee754_atan2f>:
 801212c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801212e:	25ff      	movs	r5, #255	; 0xff
 8012130:	004a      	lsls	r2, r1, #1
 8012132:	9101      	str	r1, [sp, #4]
 8012134:	0852      	lsrs	r2, r2, #1
 8012136:	05ed      	lsls	r5, r5, #23
 8012138:	42aa      	cmp	r2, r5
 801213a:	dc04      	bgt.n	8012146 <__ieee754_atan2f+0x1a>
 801213c:	0043      	lsls	r3, r0, #1
 801213e:	0007      	movs	r7, r0
 8012140:	085b      	lsrs	r3, r3, #1
 8012142:	42ab      	cmp	r3, r5
 8012144:	dd02      	ble.n	801214c <__ieee754_atan2f+0x20>
 8012146:	f7ee f9e7 	bl	8000518 <__aeabi_fadd>
 801214a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801214c:	24fe      	movs	r4, #254	; 0xfe
 801214e:	05a4      	lsls	r4, r4, #22
 8012150:	42a1      	cmp	r1, r4
 8012152:	d102      	bne.n	801215a <__ieee754_atan2f+0x2e>
 8012154:	f000 f916 	bl	8012384 <atanf>
 8012158:	e7f7      	b.n	801214a <__ieee754_atan2f+0x1e>
 801215a:	2602      	movs	r6, #2
 801215c:	178c      	asrs	r4, r1, #30
 801215e:	4034      	ands	r4, r6
 8012160:	0fc6      	lsrs	r6, r0, #31
 8012162:	4334      	orrs	r4, r6
 8012164:	2b00      	cmp	r3, #0
 8012166:	d105      	bne.n	8012174 <__ieee754_atan2f+0x48>
 8012168:	2c02      	cmp	r4, #2
 801216a:	d045      	beq.n	80121f8 <__ieee754_atan2f+0xcc>
 801216c:	2c03      	cmp	r4, #3
 801216e:	d1ec      	bne.n	801214a <__ieee754_atan2f+0x1e>
 8012170:	4824      	ldr	r0, [pc, #144]	; (8012204 <__ieee754_atan2f+0xd8>)
 8012172:	e7ea      	b.n	801214a <__ieee754_atan2f+0x1e>
 8012174:	2a00      	cmp	r2, #0
 8012176:	d103      	bne.n	8012180 <__ieee754_atan2f+0x54>
 8012178:	2f00      	cmp	r7, #0
 801217a:	da41      	bge.n	8012200 <__ieee754_atan2f+0xd4>
 801217c:	4822      	ldr	r0, [pc, #136]	; (8012208 <__ieee754_atan2f+0xdc>)
 801217e:	e7e4      	b.n	801214a <__ieee754_atan2f+0x1e>
 8012180:	42aa      	cmp	r2, r5
 8012182:	d10e      	bne.n	80121a2 <__ieee754_atan2f+0x76>
 8012184:	3c01      	subs	r4, #1
 8012186:	4293      	cmp	r3, r2
 8012188:	d105      	bne.n	8012196 <__ieee754_atan2f+0x6a>
 801218a:	2c02      	cmp	r4, #2
 801218c:	d836      	bhi.n	80121fc <__ieee754_atan2f+0xd0>
 801218e:	4b1f      	ldr	r3, [pc, #124]	; (801220c <__ieee754_atan2f+0xe0>)
 8012190:	00a4      	lsls	r4, r4, #2
 8012192:	58e0      	ldr	r0, [r4, r3]
 8012194:	e7d9      	b.n	801214a <__ieee754_atan2f+0x1e>
 8012196:	2000      	movs	r0, #0
 8012198:	2c02      	cmp	r4, #2
 801219a:	d8d6      	bhi.n	801214a <__ieee754_atan2f+0x1e>
 801219c:	4b1c      	ldr	r3, [pc, #112]	; (8012210 <__ieee754_atan2f+0xe4>)
 801219e:	00a4      	lsls	r4, r4, #2
 80121a0:	e7f7      	b.n	8012192 <__ieee754_atan2f+0x66>
 80121a2:	42ab      	cmp	r3, r5
 80121a4:	d0e8      	beq.n	8012178 <__ieee754_atan2f+0x4c>
 80121a6:	1a9b      	subs	r3, r3, r2
 80121a8:	15db      	asrs	r3, r3, #23
 80121aa:	2b3c      	cmp	r3, #60	; 0x3c
 80121ac:	dc14      	bgt.n	80121d8 <__ieee754_atan2f+0xac>
 80121ae:	2900      	cmp	r1, #0
 80121b0:	da01      	bge.n	80121b6 <__ieee754_atan2f+0x8a>
 80121b2:	333c      	adds	r3, #60	; 0x3c
 80121b4:	db12      	blt.n	80121dc <__ieee754_atan2f+0xb0>
 80121b6:	f7ee fb4d 	bl	8000854 <__aeabi_fdiv>
 80121ba:	f000 f9f3 	bl	80125a4 <fabsf>
 80121be:	f000 f8e1 	bl	8012384 <atanf>
 80121c2:	2c01      	cmp	r4, #1
 80121c4:	d00c      	beq.n	80121e0 <__ieee754_atan2f+0xb4>
 80121c6:	2c02      	cmp	r4, #2
 80121c8:	d00e      	beq.n	80121e8 <__ieee754_atan2f+0xbc>
 80121ca:	2c00      	cmp	r4, #0
 80121cc:	d0bd      	beq.n	801214a <__ieee754_atan2f+0x1e>
 80121ce:	4911      	ldr	r1, [pc, #68]	; (8012214 <__ieee754_atan2f+0xe8>)
 80121d0:	f7ee f9a2 	bl	8000518 <__aeabi_fadd>
 80121d4:	4910      	ldr	r1, [pc, #64]	; (8012218 <__ieee754_atan2f+0xec>)
 80121d6:	e00c      	b.n	80121f2 <__ieee754_atan2f+0xc6>
 80121d8:	4810      	ldr	r0, [pc, #64]	; (801221c <__ieee754_atan2f+0xf0>)
 80121da:	e7f2      	b.n	80121c2 <__ieee754_atan2f+0x96>
 80121dc:	2000      	movs	r0, #0
 80121de:	e7f0      	b.n	80121c2 <__ieee754_atan2f+0x96>
 80121e0:	2380      	movs	r3, #128	; 0x80
 80121e2:	061b      	lsls	r3, r3, #24
 80121e4:	18c0      	adds	r0, r0, r3
 80121e6:	e7b0      	b.n	801214a <__ieee754_atan2f+0x1e>
 80121e8:	490a      	ldr	r1, [pc, #40]	; (8012214 <__ieee754_atan2f+0xe8>)
 80121ea:	f7ee f995 	bl	8000518 <__aeabi_fadd>
 80121ee:	1c01      	adds	r1, r0, #0
 80121f0:	4809      	ldr	r0, [pc, #36]	; (8012218 <__ieee754_atan2f+0xec>)
 80121f2:	f7ee fe1d 	bl	8000e30 <__aeabi_fsub>
 80121f6:	e7a8      	b.n	801214a <__ieee754_atan2f+0x1e>
 80121f8:	4807      	ldr	r0, [pc, #28]	; (8012218 <__ieee754_atan2f+0xec>)
 80121fa:	e7a6      	b.n	801214a <__ieee754_atan2f+0x1e>
 80121fc:	4808      	ldr	r0, [pc, #32]	; (8012220 <__ieee754_atan2f+0xf4>)
 80121fe:	e7a4      	b.n	801214a <__ieee754_atan2f+0x1e>
 8012200:	4806      	ldr	r0, [pc, #24]	; (801221c <__ieee754_atan2f+0xf0>)
 8012202:	e7a2      	b.n	801214a <__ieee754_atan2f+0x1e>
 8012204:	c0490fdb 	.word	0xc0490fdb
 8012208:	bfc90fdb 	.word	0xbfc90fdb
 801220c:	08012d68 	.word	0x08012d68
 8012210:	08012d74 	.word	0x08012d74
 8012214:	33bbbd2e 	.word	0x33bbbd2e
 8012218:	40490fdb 	.word	0x40490fdb
 801221c:	3fc90fdb 	.word	0x3fc90fdb
 8012220:	3f490fdb 	.word	0x3f490fdb

08012224 <with_errno>:
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	000d      	movs	r5, r1
 8012228:	0016      	movs	r6, r2
 801222a:	0004      	movs	r4, r0
 801222c:	f7fc f972 	bl	800e514 <__errno>
 8012230:	0029      	movs	r1, r5
 8012232:	6006      	str	r6, [r0, #0]
 8012234:	0020      	movs	r0, r4
 8012236:	bd70      	pop	{r4, r5, r6, pc}

08012238 <xflow>:
 8012238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801223a:	0015      	movs	r5, r2
 801223c:	001c      	movs	r4, r3
 801223e:	2800      	cmp	r0, #0
 8012240:	d010      	beq.n	8012264 <xflow+0x2c>
 8012242:	2380      	movs	r3, #128	; 0x80
 8012244:	0010      	movs	r0, r2
 8012246:	061b      	lsls	r3, r3, #24
 8012248:	18e1      	adds	r1, r4, r3
 801224a:	9000      	str	r0, [sp, #0]
 801224c:	9101      	str	r1, [sp, #4]
 801224e:	9a00      	ldr	r2, [sp, #0]
 8012250:	9b01      	ldr	r3, [sp, #4]
 8012252:	0028      	movs	r0, r5
 8012254:	0021      	movs	r1, r4
 8012256:	f7ef ff25 	bl	80020a4 <__aeabi_dmul>
 801225a:	2222      	movs	r2, #34	; 0x22
 801225c:	f7ff ffe2 	bl	8012224 <with_errno>
 8012260:	b003      	add	sp, #12
 8012262:	bd30      	pop	{r4, r5, pc}
 8012264:	0010      	movs	r0, r2
 8012266:	0019      	movs	r1, r3
 8012268:	e7ef      	b.n	801224a <xflow+0x12>

0801226a <__math_uflow>:
 801226a:	2380      	movs	r3, #128	; 0x80
 801226c:	b510      	push	{r4, lr}
 801226e:	2200      	movs	r2, #0
 8012270:	055b      	lsls	r3, r3, #21
 8012272:	f7ff ffe1 	bl	8012238 <xflow>
 8012276:	bd10      	pop	{r4, pc}

08012278 <__math_oflow>:
 8012278:	23e0      	movs	r3, #224	; 0xe0
 801227a:	b510      	push	{r4, lr}
 801227c:	2200      	movs	r2, #0
 801227e:	05db      	lsls	r3, r3, #23
 8012280:	f7ff ffda 	bl	8012238 <xflow>
 8012284:	bd10      	pop	{r4, pc}

08012286 <fabs>:
 8012286:	004b      	lsls	r3, r1, #1
 8012288:	0859      	lsrs	r1, r3, #1
 801228a:	4770      	bx	lr

0801228c <finite>:
 801228c:	4b02      	ldr	r3, [pc, #8]	; (8012298 <finite+0xc>)
 801228e:	0048      	lsls	r0, r1, #1
 8012290:	0840      	lsrs	r0, r0, #1
 8012292:	18c0      	adds	r0, r0, r3
 8012294:	0fc0      	lsrs	r0, r0, #31
 8012296:	4770      	bx	lr
 8012298:	80100000 	.word	0x80100000

0801229c <scalbn>:
 801229c:	004b      	lsls	r3, r1, #1
 801229e:	b570      	push	{r4, r5, r6, lr}
 80122a0:	0d5b      	lsrs	r3, r3, #21
 80122a2:	0014      	movs	r4, r2
 80122a4:	000a      	movs	r2, r1
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d10d      	bne.n	80122c6 <scalbn+0x2a>
 80122aa:	004b      	lsls	r3, r1, #1
 80122ac:	085b      	lsrs	r3, r3, #1
 80122ae:	4303      	orrs	r3, r0
 80122b0:	d010      	beq.n	80122d4 <scalbn+0x38>
 80122b2:	4b27      	ldr	r3, [pc, #156]	; (8012350 <scalbn+0xb4>)
 80122b4:	2200      	movs	r2, #0
 80122b6:	f7ef fef5 	bl	80020a4 <__aeabi_dmul>
 80122ba:	4b26      	ldr	r3, [pc, #152]	; (8012354 <scalbn+0xb8>)
 80122bc:	429c      	cmp	r4, r3
 80122be:	da0a      	bge.n	80122d6 <scalbn+0x3a>
 80122c0:	4a25      	ldr	r2, [pc, #148]	; (8012358 <scalbn+0xbc>)
 80122c2:	4b26      	ldr	r3, [pc, #152]	; (801235c <scalbn+0xc0>)
 80122c4:	e019      	b.n	80122fa <scalbn+0x5e>
 80122c6:	4d26      	ldr	r5, [pc, #152]	; (8012360 <scalbn+0xc4>)
 80122c8:	42ab      	cmp	r3, r5
 80122ca:	d108      	bne.n	80122de <scalbn+0x42>
 80122cc:	0002      	movs	r2, r0
 80122ce:	000b      	movs	r3, r1
 80122d0:	f7ee ffaa 	bl	8001228 <__aeabi_dadd>
 80122d4:	bd70      	pop	{r4, r5, r6, pc}
 80122d6:	000a      	movs	r2, r1
 80122d8:	004b      	lsls	r3, r1, #1
 80122da:	0d5b      	lsrs	r3, r3, #21
 80122dc:	3b36      	subs	r3, #54	; 0x36
 80122de:	4d21      	ldr	r5, [pc, #132]	; (8012364 <scalbn+0xc8>)
 80122e0:	18e3      	adds	r3, r4, r3
 80122e2:	42ab      	cmp	r3, r5
 80122e4:	dd0c      	ble.n	8012300 <scalbn+0x64>
 80122e6:	4c20      	ldr	r4, [pc, #128]	; (8012368 <scalbn+0xcc>)
 80122e8:	4d20      	ldr	r5, [pc, #128]	; (801236c <scalbn+0xd0>)
 80122ea:	2900      	cmp	r1, #0
 80122ec:	da01      	bge.n	80122f2 <scalbn+0x56>
 80122ee:	4c1e      	ldr	r4, [pc, #120]	; (8012368 <scalbn+0xcc>)
 80122f0:	4d1f      	ldr	r5, [pc, #124]	; (8012370 <scalbn+0xd4>)
 80122f2:	0020      	movs	r0, r4
 80122f4:	0029      	movs	r1, r5
 80122f6:	4a1c      	ldr	r2, [pc, #112]	; (8012368 <scalbn+0xcc>)
 80122f8:	4b1c      	ldr	r3, [pc, #112]	; (801236c <scalbn+0xd0>)
 80122fa:	f7ef fed3 	bl	80020a4 <__aeabi_dmul>
 80122fe:	e7e9      	b.n	80122d4 <scalbn+0x38>
 8012300:	2b00      	cmp	r3, #0
 8012302:	dd05      	ble.n	8012310 <scalbn+0x74>
 8012304:	4c1b      	ldr	r4, [pc, #108]	; (8012374 <scalbn+0xd8>)
 8012306:	051b      	lsls	r3, r3, #20
 8012308:	4022      	ands	r2, r4
 801230a:	431a      	orrs	r2, r3
 801230c:	0011      	movs	r1, r2
 801230e:	e7e1      	b.n	80122d4 <scalbn+0x38>
 8012310:	001d      	movs	r5, r3
 8012312:	3535      	adds	r5, #53	; 0x35
 8012314:	da13      	bge.n	801233e <scalbn+0xa2>
 8012316:	4a18      	ldr	r2, [pc, #96]	; (8012378 <scalbn+0xdc>)
 8012318:	0fcb      	lsrs	r3, r1, #31
 801231a:	4294      	cmp	r4, r2
 801231c:	dd08      	ble.n	8012330 <scalbn+0x94>
 801231e:	4812      	ldr	r0, [pc, #72]	; (8012368 <scalbn+0xcc>)
 8012320:	4912      	ldr	r1, [pc, #72]	; (801236c <scalbn+0xd0>)
 8012322:	2b00      	cmp	r3, #0
 8012324:	d001      	beq.n	801232a <scalbn+0x8e>
 8012326:	4810      	ldr	r0, [pc, #64]	; (8012368 <scalbn+0xcc>)
 8012328:	4911      	ldr	r1, [pc, #68]	; (8012370 <scalbn+0xd4>)
 801232a:	4a0f      	ldr	r2, [pc, #60]	; (8012368 <scalbn+0xcc>)
 801232c:	4b0f      	ldr	r3, [pc, #60]	; (801236c <scalbn+0xd0>)
 801232e:	e7e4      	b.n	80122fa <scalbn+0x5e>
 8012330:	4809      	ldr	r0, [pc, #36]	; (8012358 <scalbn+0xbc>)
 8012332:	490a      	ldr	r1, [pc, #40]	; (801235c <scalbn+0xc0>)
 8012334:	2b00      	cmp	r3, #0
 8012336:	d0c3      	beq.n	80122c0 <scalbn+0x24>
 8012338:	4807      	ldr	r0, [pc, #28]	; (8012358 <scalbn+0xbc>)
 801233a:	4910      	ldr	r1, [pc, #64]	; (801237c <scalbn+0xe0>)
 801233c:	e7c0      	b.n	80122c0 <scalbn+0x24>
 801233e:	4c0d      	ldr	r4, [pc, #52]	; (8012374 <scalbn+0xd8>)
 8012340:	3336      	adds	r3, #54	; 0x36
 8012342:	4022      	ands	r2, r4
 8012344:	051b      	lsls	r3, r3, #20
 8012346:	4313      	orrs	r3, r2
 8012348:	0019      	movs	r1, r3
 801234a:	2200      	movs	r2, #0
 801234c:	4b0c      	ldr	r3, [pc, #48]	; (8012380 <scalbn+0xe4>)
 801234e:	e7d4      	b.n	80122fa <scalbn+0x5e>
 8012350:	43500000 	.word	0x43500000
 8012354:	ffff3cb0 	.word	0xffff3cb0
 8012358:	c2f8f359 	.word	0xc2f8f359
 801235c:	01a56e1f 	.word	0x01a56e1f
 8012360:	000007ff 	.word	0x000007ff
 8012364:	000007fe 	.word	0x000007fe
 8012368:	8800759c 	.word	0x8800759c
 801236c:	7e37e43c 	.word	0x7e37e43c
 8012370:	fe37e43c 	.word	0xfe37e43c
 8012374:	800fffff 	.word	0x800fffff
 8012378:	0000c350 	.word	0x0000c350
 801237c:	81a56e1f 	.word	0x81a56e1f
 8012380:	3c900000 	.word	0x3c900000

08012384 <atanf>:
 8012384:	23a1      	movs	r3, #161	; 0xa1
 8012386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012388:	0045      	lsls	r5, r0, #1
 801238a:	1c04      	adds	r4, r0, #0
 801238c:	9001      	str	r0, [sp, #4]
 801238e:	086d      	lsrs	r5, r5, #1
 8012390:	05db      	lsls	r3, r3, #23
 8012392:	429d      	cmp	r5, r3
 8012394:	db0f      	blt.n	80123b6 <atanf+0x32>
 8012396:	23ff      	movs	r3, #255	; 0xff
 8012398:	05db      	lsls	r3, r3, #23
 801239a:	429d      	cmp	r5, r3
 801239c:	dd04      	ble.n	80123a8 <atanf+0x24>
 801239e:	1c01      	adds	r1, r0, #0
 80123a0:	f7ee f8ba 	bl	8000518 <__aeabi_fadd>
 80123a4:	1c04      	adds	r4, r0, #0
 80123a6:	e004      	b.n	80123b2 <atanf+0x2e>
 80123a8:	9b01      	ldr	r3, [sp, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	dd00      	ble.n	80123b0 <atanf+0x2c>
 80123ae:	e0cc      	b.n	801254a <atanf+0x1c6>
 80123b0:	4c67      	ldr	r4, [pc, #412]	; (8012550 <atanf+0x1cc>)
 80123b2:	1c20      	adds	r0, r4, #0
 80123b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80123b6:	4b67      	ldr	r3, [pc, #412]	; (8012554 <atanf+0x1d0>)
 80123b8:	429d      	cmp	r5, r3
 80123ba:	dc0f      	bgt.n	80123dc <atanf+0x58>
 80123bc:	23c4      	movs	r3, #196	; 0xc4
 80123be:	059b      	lsls	r3, r3, #22
 80123c0:	429d      	cmp	r5, r3
 80123c2:	da08      	bge.n	80123d6 <atanf+0x52>
 80123c4:	4964      	ldr	r1, [pc, #400]	; (8012558 <atanf+0x1d4>)
 80123c6:	f7ee f8a7 	bl	8000518 <__aeabi_fadd>
 80123ca:	21fe      	movs	r1, #254	; 0xfe
 80123cc:	0589      	lsls	r1, r1, #22
 80123ce:	f7ee f88f 	bl	80004f0 <__aeabi_fcmpgt>
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d1ed      	bne.n	80123b2 <atanf+0x2e>
 80123d6:	2601      	movs	r6, #1
 80123d8:	4276      	negs	r6, r6
 80123da:	e01b      	b.n	8012414 <atanf+0x90>
 80123dc:	f000 f8e2 	bl	80125a4 <fabsf>
 80123e0:	4b5e      	ldr	r3, [pc, #376]	; (801255c <atanf+0x1d8>)
 80123e2:	1c04      	adds	r4, r0, #0
 80123e4:	429d      	cmp	r5, r3
 80123e6:	dc7b      	bgt.n	80124e0 <atanf+0x15c>
 80123e8:	4b5d      	ldr	r3, [pc, #372]	; (8012560 <atanf+0x1dc>)
 80123ea:	429d      	cmp	r5, r3
 80123ec:	dc67      	bgt.n	80124be <atanf+0x13a>
 80123ee:	1c01      	adds	r1, r0, #0
 80123f0:	f7ee f892 	bl	8000518 <__aeabi_fadd>
 80123f4:	21fe      	movs	r1, #254	; 0xfe
 80123f6:	0589      	lsls	r1, r1, #22
 80123f8:	f7ee fd1a 	bl	8000e30 <__aeabi_fsub>
 80123fc:	2180      	movs	r1, #128	; 0x80
 80123fe:	1c05      	adds	r5, r0, #0
 8012400:	05c9      	lsls	r1, r1, #23
 8012402:	1c20      	adds	r0, r4, #0
 8012404:	f7ee f888 	bl	8000518 <__aeabi_fadd>
 8012408:	1c01      	adds	r1, r0, #0
 801240a:	1c28      	adds	r0, r5, #0
 801240c:	f7ee fa22 	bl	8000854 <__aeabi_fdiv>
 8012410:	2600      	movs	r6, #0
 8012412:	1c04      	adds	r4, r0, #0
 8012414:	1c21      	adds	r1, r4, #0
 8012416:	1c20      	adds	r0, r4, #0
 8012418:	f7ee fbe4 	bl	8000be4 <__aeabi_fmul>
 801241c:	1c01      	adds	r1, r0, #0
 801241e:	1c07      	adds	r7, r0, #0
 8012420:	f7ee fbe0 	bl	8000be4 <__aeabi_fmul>
 8012424:	494f      	ldr	r1, [pc, #316]	; (8012564 <atanf+0x1e0>)
 8012426:	1c05      	adds	r5, r0, #0
 8012428:	f7ee fbdc 	bl	8000be4 <__aeabi_fmul>
 801242c:	494e      	ldr	r1, [pc, #312]	; (8012568 <atanf+0x1e4>)
 801242e:	f7ee f873 	bl	8000518 <__aeabi_fadd>
 8012432:	1c29      	adds	r1, r5, #0
 8012434:	f7ee fbd6 	bl	8000be4 <__aeabi_fmul>
 8012438:	494c      	ldr	r1, [pc, #304]	; (801256c <atanf+0x1e8>)
 801243a:	f7ee f86d 	bl	8000518 <__aeabi_fadd>
 801243e:	1c29      	adds	r1, r5, #0
 8012440:	f7ee fbd0 	bl	8000be4 <__aeabi_fmul>
 8012444:	494a      	ldr	r1, [pc, #296]	; (8012570 <atanf+0x1ec>)
 8012446:	f7ee f867 	bl	8000518 <__aeabi_fadd>
 801244a:	1c29      	adds	r1, r5, #0
 801244c:	f7ee fbca 	bl	8000be4 <__aeabi_fmul>
 8012450:	4948      	ldr	r1, [pc, #288]	; (8012574 <atanf+0x1f0>)
 8012452:	f7ee f861 	bl	8000518 <__aeabi_fadd>
 8012456:	1c29      	adds	r1, r5, #0
 8012458:	f7ee fbc4 	bl	8000be4 <__aeabi_fmul>
 801245c:	4946      	ldr	r1, [pc, #280]	; (8012578 <atanf+0x1f4>)
 801245e:	f7ee f85b 	bl	8000518 <__aeabi_fadd>
 8012462:	1c39      	adds	r1, r7, #0
 8012464:	f7ee fbbe 	bl	8000be4 <__aeabi_fmul>
 8012468:	4944      	ldr	r1, [pc, #272]	; (801257c <atanf+0x1f8>)
 801246a:	1c07      	adds	r7, r0, #0
 801246c:	1c28      	adds	r0, r5, #0
 801246e:	f7ee fbb9 	bl	8000be4 <__aeabi_fmul>
 8012472:	4943      	ldr	r1, [pc, #268]	; (8012580 <atanf+0x1fc>)
 8012474:	f7ee fcdc 	bl	8000e30 <__aeabi_fsub>
 8012478:	1c29      	adds	r1, r5, #0
 801247a:	f7ee fbb3 	bl	8000be4 <__aeabi_fmul>
 801247e:	4941      	ldr	r1, [pc, #260]	; (8012584 <atanf+0x200>)
 8012480:	f7ee fcd6 	bl	8000e30 <__aeabi_fsub>
 8012484:	1c29      	adds	r1, r5, #0
 8012486:	f7ee fbad 	bl	8000be4 <__aeabi_fmul>
 801248a:	493f      	ldr	r1, [pc, #252]	; (8012588 <atanf+0x204>)
 801248c:	f7ee fcd0 	bl	8000e30 <__aeabi_fsub>
 8012490:	1c29      	adds	r1, r5, #0
 8012492:	f7ee fba7 	bl	8000be4 <__aeabi_fmul>
 8012496:	493d      	ldr	r1, [pc, #244]	; (801258c <atanf+0x208>)
 8012498:	f7ee fcca 	bl	8000e30 <__aeabi_fsub>
 801249c:	1c29      	adds	r1, r5, #0
 801249e:	f7ee fba1 	bl	8000be4 <__aeabi_fmul>
 80124a2:	1c01      	adds	r1, r0, #0
 80124a4:	1c38      	adds	r0, r7, #0
 80124a6:	f7ee f837 	bl	8000518 <__aeabi_fadd>
 80124aa:	1c21      	adds	r1, r4, #0
 80124ac:	f7ee fb9a 	bl	8000be4 <__aeabi_fmul>
 80124b0:	1c73      	adds	r3, r6, #1
 80124b2:	d134      	bne.n	801251e <atanf+0x19a>
 80124b4:	1c01      	adds	r1, r0, #0
 80124b6:	1c20      	adds	r0, r4, #0
 80124b8:	f7ee fcba 	bl	8000e30 <__aeabi_fsub>
 80124bc:	e772      	b.n	80123a4 <atanf+0x20>
 80124be:	21fe      	movs	r1, #254	; 0xfe
 80124c0:	0589      	lsls	r1, r1, #22
 80124c2:	f7ee fcb5 	bl	8000e30 <__aeabi_fsub>
 80124c6:	21fe      	movs	r1, #254	; 0xfe
 80124c8:	1c05      	adds	r5, r0, #0
 80124ca:	0589      	lsls	r1, r1, #22
 80124cc:	1c20      	adds	r0, r4, #0
 80124ce:	f7ee f823 	bl	8000518 <__aeabi_fadd>
 80124d2:	1c01      	adds	r1, r0, #0
 80124d4:	1c28      	adds	r0, r5, #0
 80124d6:	f7ee f9bd 	bl	8000854 <__aeabi_fdiv>
 80124da:	2601      	movs	r6, #1
 80124dc:	1c04      	adds	r4, r0, #0
 80124de:	e799      	b.n	8012414 <atanf+0x90>
 80124e0:	4b2b      	ldr	r3, [pc, #172]	; (8012590 <atanf+0x20c>)
 80124e2:	429d      	cmp	r5, r3
 80124e4:	dc14      	bgt.n	8012510 <atanf+0x18c>
 80124e6:	21ff      	movs	r1, #255	; 0xff
 80124e8:	0589      	lsls	r1, r1, #22
 80124ea:	f7ee fca1 	bl	8000e30 <__aeabi_fsub>
 80124ee:	21ff      	movs	r1, #255	; 0xff
 80124f0:	1c05      	adds	r5, r0, #0
 80124f2:	0589      	lsls	r1, r1, #22
 80124f4:	1c20      	adds	r0, r4, #0
 80124f6:	f7ee fb75 	bl	8000be4 <__aeabi_fmul>
 80124fa:	21fe      	movs	r1, #254	; 0xfe
 80124fc:	0589      	lsls	r1, r1, #22
 80124fe:	f7ee f80b 	bl	8000518 <__aeabi_fadd>
 8012502:	1c01      	adds	r1, r0, #0
 8012504:	1c28      	adds	r0, r5, #0
 8012506:	f7ee f9a5 	bl	8000854 <__aeabi_fdiv>
 801250a:	2602      	movs	r6, #2
 801250c:	1c04      	adds	r4, r0, #0
 801250e:	e781      	b.n	8012414 <atanf+0x90>
 8012510:	1c01      	adds	r1, r0, #0
 8012512:	4820      	ldr	r0, [pc, #128]	; (8012594 <atanf+0x210>)
 8012514:	f7ee f99e 	bl	8000854 <__aeabi_fdiv>
 8012518:	2603      	movs	r6, #3
 801251a:	1c04      	adds	r4, r0, #0
 801251c:	e77a      	b.n	8012414 <atanf+0x90>
 801251e:	4b1e      	ldr	r3, [pc, #120]	; (8012598 <atanf+0x214>)
 8012520:	00b6      	lsls	r6, r6, #2
 8012522:	58f1      	ldr	r1, [r6, r3]
 8012524:	f7ee fc84 	bl	8000e30 <__aeabi_fsub>
 8012528:	1c21      	adds	r1, r4, #0
 801252a:	f7ee fc81 	bl	8000e30 <__aeabi_fsub>
 801252e:	4b1b      	ldr	r3, [pc, #108]	; (801259c <atanf+0x218>)
 8012530:	1c01      	adds	r1, r0, #0
 8012532:	58f0      	ldr	r0, [r6, r3]
 8012534:	f7ee fc7c 	bl	8000e30 <__aeabi_fsub>
 8012538:	9b01      	ldr	r3, [sp, #4]
 801253a:	1c04      	adds	r4, r0, #0
 801253c:	2b00      	cmp	r3, #0
 801253e:	db00      	blt.n	8012542 <atanf+0x1be>
 8012540:	e737      	b.n	80123b2 <atanf+0x2e>
 8012542:	2380      	movs	r3, #128	; 0x80
 8012544:	061b      	lsls	r3, r3, #24
 8012546:	18c4      	adds	r4, r0, r3
 8012548:	e733      	b.n	80123b2 <atanf+0x2e>
 801254a:	4c15      	ldr	r4, [pc, #84]	; (80125a0 <atanf+0x21c>)
 801254c:	e731      	b.n	80123b2 <atanf+0x2e>
 801254e:	46c0      	nop			; (mov r8, r8)
 8012550:	bfc90fdb 	.word	0xbfc90fdb
 8012554:	3edfffff 	.word	0x3edfffff
 8012558:	7149f2ca 	.word	0x7149f2ca
 801255c:	3f97ffff 	.word	0x3f97ffff
 8012560:	3f2fffff 	.word	0x3f2fffff
 8012564:	3c8569d7 	.word	0x3c8569d7
 8012568:	3d4bda59 	.word	0x3d4bda59
 801256c:	3d886b35 	.word	0x3d886b35
 8012570:	3dba2e6e 	.word	0x3dba2e6e
 8012574:	3e124925 	.word	0x3e124925
 8012578:	3eaaaaab 	.word	0x3eaaaaab
 801257c:	bd15a221 	.word	0xbd15a221
 8012580:	3d6ef16b 	.word	0x3d6ef16b
 8012584:	3d9d8795 	.word	0x3d9d8795
 8012588:	3de38e38 	.word	0x3de38e38
 801258c:	3e4ccccd 	.word	0x3e4ccccd
 8012590:	401bffff 	.word	0x401bffff
 8012594:	bf800000 	.word	0xbf800000
 8012598:	08012d90 	.word	0x08012d90
 801259c:	08012d80 	.word	0x08012d80
 80125a0:	3fc90fdb 	.word	0x3fc90fdb

080125a4 <fabsf>:
 80125a4:	0040      	lsls	r0, r0, #1
 80125a6:	0840      	lsrs	r0, r0, #1
 80125a8:	4770      	bx	lr
	...

080125ac <_init>:
 80125ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ae:	46c0      	nop			; (mov r8, r8)
 80125b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125b2:	bc08      	pop	{r3}
 80125b4:	469e      	mov	lr, r3
 80125b6:	4770      	bx	lr

080125b8 <_fini>:
 80125b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ba:	46c0      	nop			; (mov r8, r8)
 80125bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125be:	bc08      	pop	{r3}
 80125c0:	469e      	mov	lr, r3
 80125c2:	4770      	bx	lr


IRBE-X_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012784  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08012840  08012840  00022840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130e0  080130e0  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  080130e0  080130e0  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080130e0  080130e0  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130e0  080130e0  000230e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080130e4  080130e4  000230e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080130e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000257c  200001f8  080132dc  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002774  080132dc  00032774  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab80  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c4  00000000  00000000  0004ad9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0004e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  0004fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001566a  00000000  00000000  00051368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e951  00000000  00000000  000669d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000786f1  00000000  00000000  00085323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fda14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  000fda64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f8 	.word	0x200001f8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012828 	.word	0x08012828

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001fc 	.word	0x200001fc
 8000100:	08012828 	.word	0x08012828

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fdcf 	bl	8001ff0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd1f 	bl	8001ea0 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdc1 	bl	8001ff0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fdb7 	bl	8001ff0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd47 	bl	8001f24 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd3d 	bl	8001f24 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fae1 	bl	8000a98 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb47 	bl	8000b70 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb3d 	bl	8000b70 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 faed 	bl	8000ae4 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fae3 	bl	8000ae4 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_fadd>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	46c6      	mov	lr, r8
 8000530:	0243      	lsls	r3, r0, #9
 8000532:	0a5b      	lsrs	r3, r3, #9
 8000534:	024e      	lsls	r6, r1, #9
 8000536:	0045      	lsls	r5, r0, #1
 8000538:	004f      	lsls	r7, r1, #1
 800053a:	00da      	lsls	r2, r3, #3
 800053c:	0fc4      	lsrs	r4, r0, #31
 800053e:	469c      	mov	ip, r3
 8000540:	0a70      	lsrs	r0, r6, #9
 8000542:	4690      	mov	r8, r2
 8000544:	b500      	push	{lr}
 8000546:	0e2d      	lsrs	r5, r5, #24
 8000548:	0e3f      	lsrs	r7, r7, #24
 800054a:	0fc9      	lsrs	r1, r1, #31
 800054c:	09b6      	lsrs	r6, r6, #6
 800054e:	428c      	cmp	r4, r1
 8000550:	d04b      	beq.n	80005ea <__aeabi_fadd+0xbe>
 8000552:	1bea      	subs	r2, r5, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	dd36      	ble.n	80005c6 <__aeabi_fadd+0x9a>
 8000558:	2f00      	cmp	r7, #0
 800055a:	d061      	beq.n	8000620 <__aeabi_fadd+0xf4>
 800055c:	2dff      	cmp	r5, #255	; 0xff
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x36>
 8000560:	e0ad      	b.n	80006be <__aeabi_fadd+0x192>
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	04db      	lsls	r3, r3, #19
 8000566:	431e      	orrs	r6, r3
 8000568:	2a1b      	cmp	r2, #27
 800056a:	dc00      	bgt.n	800056e <__aeabi_fadd+0x42>
 800056c:	e0d3      	b.n	8000716 <__aeabi_fadd+0x1ea>
 800056e:	2001      	movs	r0, #1
 8000570:	4643      	mov	r3, r8
 8000572:	1a18      	subs	r0, r3, r0
 8000574:	0143      	lsls	r3, r0, #5
 8000576:	d400      	bmi.n	800057a <__aeabi_fadd+0x4e>
 8000578:	e08c      	b.n	8000694 <__aeabi_fadd+0x168>
 800057a:	0180      	lsls	r0, r0, #6
 800057c:	0987      	lsrs	r7, r0, #6
 800057e:	0038      	movs	r0, r7
 8000580:	f002 fd12 	bl	8002fa8 <__clzsi2>
 8000584:	3805      	subs	r0, #5
 8000586:	4087      	lsls	r7, r0
 8000588:	4285      	cmp	r5, r0
 800058a:	dc00      	bgt.n	800058e <__aeabi_fadd+0x62>
 800058c:	e0b6      	b.n	80006fc <__aeabi_fadd+0x1d0>
 800058e:	1a2d      	subs	r5, r5, r0
 8000590:	48b3      	ldr	r0, [pc, #716]	; (8000860 <__aeabi_fadd+0x334>)
 8000592:	4038      	ands	r0, r7
 8000594:	0743      	lsls	r3, r0, #29
 8000596:	d004      	beq.n	80005a2 <__aeabi_fadd+0x76>
 8000598:	230f      	movs	r3, #15
 800059a:	4003      	ands	r3, r0
 800059c:	2b04      	cmp	r3, #4
 800059e:	d000      	beq.n	80005a2 <__aeabi_fadd+0x76>
 80005a0:	3004      	adds	r0, #4
 80005a2:	0143      	lsls	r3, r0, #5
 80005a4:	d400      	bmi.n	80005a8 <__aeabi_fadd+0x7c>
 80005a6:	e078      	b.n	800069a <__aeabi_fadd+0x16e>
 80005a8:	1c6a      	adds	r2, r5, #1
 80005aa:	2dfe      	cmp	r5, #254	; 0xfe
 80005ac:	d065      	beq.n	800067a <__aeabi_fadd+0x14e>
 80005ae:	0180      	lsls	r0, r0, #6
 80005b0:	0a43      	lsrs	r3, r0, #9
 80005b2:	469c      	mov	ip, r3
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	4663      	mov	r3, ip
 80005b8:	05d0      	lsls	r0, r2, #23
 80005ba:	4318      	orrs	r0, r3
 80005bc:	07e4      	lsls	r4, r4, #31
 80005be:	4320      	orrs	r0, r4
 80005c0:	bc80      	pop	{r7}
 80005c2:	46b8      	mov	r8, r7
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	2a00      	cmp	r2, #0
 80005c8:	d035      	beq.n	8000636 <__aeabi_fadd+0x10a>
 80005ca:	1b7a      	subs	r2, r7, r5
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	d000      	beq.n	80005d2 <__aeabi_fadd+0xa6>
 80005d0:	e0af      	b.n	8000732 <__aeabi_fadd+0x206>
 80005d2:	4643      	mov	r3, r8
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0xae>
 80005d8:	e0a7      	b.n	800072a <__aeabi_fadd+0x1fe>
 80005da:	1e53      	subs	r3, r2, #1
 80005dc:	2a01      	cmp	r2, #1
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0xb6>
 80005e0:	e12f      	b.n	8000842 <__aeabi_fadd+0x316>
 80005e2:	2aff      	cmp	r2, #255	; 0xff
 80005e4:	d069      	beq.n	80006ba <__aeabi_fadd+0x18e>
 80005e6:	001a      	movs	r2, r3
 80005e8:	e0aa      	b.n	8000740 <__aeabi_fadd+0x214>
 80005ea:	1be9      	subs	r1, r5, r7
 80005ec:	2900      	cmp	r1, #0
 80005ee:	dd70      	ble.n	80006d2 <__aeabi_fadd+0x1a6>
 80005f0:	2f00      	cmp	r7, #0
 80005f2:	d037      	beq.n	8000664 <__aeabi_fadd+0x138>
 80005f4:	2dff      	cmp	r5, #255	; 0xff
 80005f6:	d062      	beq.n	80006be <__aeabi_fadd+0x192>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	04db      	lsls	r3, r3, #19
 80005fc:	431e      	orrs	r6, r3
 80005fe:	291b      	cmp	r1, #27
 8000600:	dc00      	bgt.n	8000604 <__aeabi_fadd+0xd8>
 8000602:	e0b0      	b.n	8000766 <__aeabi_fadd+0x23a>
 8000604:	2001      	movs	r0, #1
 8000606:	4440      	add	r0, r8
 8000608:	0143      	lsls	r3, r0, #5
 800060a:	d543      	bpl.n	8000694 <__aeabi_fadd+0x168>
 800060c:	3501      	adds	r5, #1
 800060e:	2dff      	cmp	r5, #255	; 0xff
 8000610:	d033      	beq.n	800067a <__aeabi_fadd+0x14e>
 8000612:	2301      	movs	r3, #1
 8000614:	4a93      	ldr	r2, [pc, #588]	; (8000864 <__aeabi_fadd+0x338>)
 8000616:	4003      	ands	r3, r0
 8000618:	0840      	lsrs	r0, r0, #1
 800061a:	4010      	ands	r0, r2
 800061c:	4318      	orrs	r0, r3
 800061e:	e7b9      	b.n	8000594 <__aeabi_fadd+0x68>
 8000620:	2e00      	cmp	r6, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fadd+0xfa>
 8000624:	e083      	b.n	800072e <__aeabi_fadd+0x202>
 8000626:	1e51      	subs	r1, r2, #1
 8000628:	2a01      	cmp	r2, #1
 800062a:	d100      	bne.n	800062e <__aeabi_fadd+0x102>
 800062c:	e0d8      	b.n	80007e0 <__aeabi_fadd+0x2b4>
 800062e:	2aff      	cmp	r2, #255	; 0xff
 8000630:	d045      	beq.n	80006be <__aeabi_fadd+0x192>
 8000632:	000a      	movs	r2, r1
 8000634:	e798      	b.n	8000568 <__aeabi_fadd+0x3c>
 8000636:	27fe      	movs	r7, #254	; 0xfe
 8000638:	1c6a      	adds	r2, r5, #1
 800063a:	4217      	tst	r7, r2
 800063c:	d000      	beq.n	8000640 <__aeabi_fadd+0x114>
 800063e:	e086      	b.n	800074e <__aeabi_fadd+0x222>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d000      	beq.n	8000646 <__aeabi_fadd+0x11a>
 8000644:	e0b7      	b.n	80007b6 <__aeabi_fadd+0x28a>
 8000646:	4643      	mov	r3, r8
 8000648:	2b00      	cmp	r3, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x122>
 800064c:	e0f3      	b.n	8000836 <__aeabi_fadd+0x30a>
 800064e:	2200      	movs	r2, #0
 8000650:	2e00      	cmp	r6, #0
 8000652:	d0b0      	beq.n	80005b6 <__aeabi_fadd+0x8a>
 8000654:	1b98      	subs	r0, r3, r6
 8000656:	0143      	lsls	r3, r0, #5
 8000658:	d400      	bmi.n	800065c <__aeabi_fadd+0x130>
 800065a:	e0fa      	b.n	8000852 <__aeabi_fadd+0x326>
 800065c:	4643      	mov	r3, r8
 800065e:	000c      	movs	r4, r1
 8000660:	1af0      	subs	r0, r6, r3
 8000662:	e797      	b.n	8000594 <__aeabi_fadd+0x68>
 8000664:	2e00      	cmp	r6, #0
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x13e>
 8000668:	e0c8      	b.n	80007fc <__aeabi_fadd+0x2d0>
 800066a:	1e4a      	subs	r2, r1, #1
 800066c:	2901      	cmp	r1, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x146>
 8000670:	e0ae      	b.n	80007d0 <__aeabi_fadd+0x2a4>
 8000672:	29ff      	cmp	r1, #255	; 0xff
 8000674:	d023      	beq.n	80006be <__aeabi_fadd+0x192>
 8000676:	0011      	movs	r1, r2
 8000678:	e7c1      	b.n	80005fe <__aeabi_fadd+0xd2>
 800067a:	2300      	movs	r3, #0
 800067c:	22ff      	movs	r2, #255	; 0xff
 800067e:	469c      	mov	ip, r3
 8000680:	e799      	b.n	80005b6 <__aeabi_fadd+0x8a>
 8000682:	21fe      	movs	r1, #254	; 0xfe
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	4211      	tst	r1, r2
 8000688:	d077      	beq.n	800077a <__aeabi_fadd+0x24e>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d0f5      	beq.n	800067a <__aeabi_fadd+0x14e>
 800068e:	0015      	movs	r5, r2
 8000690:	4446      	add	r6, r8
 8000692:	0870      	lsrs	r0, r6, #1
 8000694:	0743      	lsls	r3, r0, #29
 8000696:	d000      	beq.n	800069a <__aeabi_fadd+0x16e>
 8000698:	e77e      	b.n	8000598 <__aeabi_fadd+0x6c>
 800069a:	08c3      	lsrs	r3, r0, #3
 800069c:	2dff      	cmp	r5, #255	; 0xff
 800069e:	d00e      	beq.n	80006be <__aeabi_fadd+0x192>
 80006a0:	025b      	lsls	r3, r3, #9
 80006a2:	0a5b      	lsrs	r3, r3, #9
 80006a4:	469c      	mov	ip, r3
 80006a6:	b2ea      	uxtb	r2, r5
 80006a8:	e785      	b.n	80005b6 <__aeabi_fadd+0x8a>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d007      	beq.n	80006be <__aeabi_fadd+0x192>
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	03d2      	lsls	r2, r2, #15
 80006b2:	4213      	tst	r3, r2
 80006b4:	d003      	beq.n	80006be <__aeabi_fadd+0x192>
 80006b6:	4210      	tst	r0, r2
 80006b8:	d101      	bne.n	80006be <__aeabi_fadd+0x192>
 80006ba:	000c      	movs	r4, r1
 80006bc:	0003      	movs	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0db      	beq.n	800067a <__aeabi_fadd+0x14e>
 80006c2:	2080      	movs	r0, #128	; 0x80
 80006c4:	03c0      	lsls	r0, r0, #15
 80006c6:	4318      	orrs	r0, r3
 80006c8:	0240      	lsls	r0, r0, #9
 80006ca:	0a43      	lsrs	r3, r0, #9
 80006cc:	469c      	mov	ip, r3
 80006ce:	22ff      	movs	r2, #255	; 0xff
 80006d0:	e771      	b.n	80005b6 <__aeabi_fadd+0x8a>
 80006d2:	2900      	cmp	r1, #0
 80006d4:	d0d5      	beq.n	8000682 <__aeabi_fadd+0x156>
 80006d6:	1b7a      	subs	r2, r7, r5
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d160      	bne.n	800079e <__aeabi_fadd+0x272>
 80006dc:	4643      	mov	r3, r8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d024      	beq.n	800072c <__aeabi_fadd+0x200>
 80006e2:	1e53      	subs	r3, r2, #1
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d073      	beq.n	80007d0 <__aeabi_fadd+0x2a4>
 80006e8:	2aff      	cmp	r2, #255	; 0xff
 80006ea:	d0e7      	beq.n	80006bc <__aeabi_fadd+0x190>
 80006ec:	001a      	movs	r2, r3
 80006ee:	2a1b      	cmp	r2, #27
 80006f0:	dc00      	bgt.n	80006f4 <__aeabi_fadd+0x1c8>
 80006f2:	e085      	b.n	8000800 <__aeabi_fadd+0x2d4>
 80006f4:	2001      	movs	r0, #1
 80006f6:	003d      	movs	r5, r7
 80006f8:	1980      	adds	r0, r0, r6
 80006fa:	e785      	b.n	8000608 <__aeabi_fadd+0xdc>
 80006fc:	2320      	movs	r3, #32
 80006fe:	003a      	movs	r2, r7
 8000700:	1b45      	subs	r5, r0, r5
 8000702:	0038      	movs	r0, r7
 8000704:	3501      	adds	r5, #1
 8000706:	40ea      	lsrs	r2, r5
 8000708:	1b5d      	subs	r5, r3, r5
 800070a:	40a8      	lsls	r0, r5
 800070c:	1e43      	subs	r3, r0, #1
 800070e:	4198      	sbcs	r0, r3
 8000710:	2500      	movs	r5, #0
 8000712:	4310      	orrs	r0, r2
 8000714:	e73e      	b.n	8000594 <__aeabi_fadd+0x68>
 8000716:	2320      	movs	r3, #32
 8000718:	0030      	movs	r0, r6
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	0031      	movs	r1, r6
 800071e:	4098      	lsls	r0, r3
 8000720:	40d1      	lsrs	r1, r2
 8000722:	1e43      	subs	r3, r0, #1
 8000724:	4198      	sbcs	r0, r3
 8000726:	4308      	orrs	r0, r1
 8000728:	e722      	b.n	8000570 <__aeabi_fadd+0x44>
 800072a:	000c      	movs	r4, r1
 800072c:	0003      	movs	r3, r0
 800072e:	0015      	movs	r5, r2
 8000730:	e7b4      	b.n	800069c <__aeabi_fadd+0x170>
 8000732:	2fff      	cmp	r7, #255	; 0xff
 8000734:	d0c1      	beq.n	80006ba <__aeabi_fadd+0x18e>
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	4640      	mov	r0, r8
 800073a:	04db      	lsls	r3, r3, #19
 800073c:	4318      	orrs	r0, r3
 800073e:	4680      	mov	r8, r0
 8000740:	2a1b      	cmp	r2, #27
 8000742:	dd51      	ble.n	80007e8 <__aeabi_fadd+0x2bc>
 8000744:	2001      	movs	r0, #1
 8000746:	000c      	movs	r4, r1
 8000748:	003d      	movs	r5, r7
 800074a:	1a30      	subs	r0, r6, r0
 800074c:	e712      	b.n	8000574 <__aeabi_fadd+0x48>
 800074e:	4643      	mov	r3, r8
 8000750:	1b9f      	subs	r7, r3, r6
 8000752:	017b      	lsls	r3, r7, #5
 8000754:	d42b      	bmi.n	80007ae <__aeabi_fadd+0x282>
 8000756:	2f00      	cmp	r7, #0
 8000758:	d000      	beq.n	800075c <__aeabi_fadd+0x230>
 800075a:	e710      	b.n	800057e <__aeabi_fadd+0x52>
 800075c:	2300      	movs	r3, #0
 800075e:	2400      	movs	r4, #0
 8000760:	2200      	movs	r2, #0
 8000762:	469c      	mov	ip, r3
 8000764:	e727      	b.n	80005b6 <__aeabi_fadd+0x8a>
 8000766:	2320      	movs	r3, #32
 8000768:	0032      	movs	r2, r6
 800076a:	0030      	movs	r0, r6
 800076c:	40ca      	lsrs	r2, r1
 800076e:	1a59      	subs	r1, r3, r1
 8000770:	4088      	lsls	r0, r1
 8000772:	1e43      	subs	r3, r0, #1
 8000774:	4198      	sbcs	r0, r3
 8000776:	4310      	orrs	r0, r2
 8000778:	e745      	b.n	8000606 <__aeabi_fadd+0xda>
 800077a:	2d00      	cmp	r5, #0
 800077c:	d14a      	bne.n	8000814 <__aeabi_fadd+0x2e8>
 800077e:	4643      	mov	r3, r8
 8000780:	2b00      	cmp	r3, #0
 8000782:	d063      	beq.n	800084c <__aeabi_fadd+0x320>
 8000784:	2200      	movs	r2, #0
 8000786:	2e00      	cmp	r6, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fadd+0x260>
 800078a:	e714      	b.n	80005b6 <__aeabi_fadd+0x8a>
 800078c:	0030      	movs	r0, r6
 800078e:	4440      	add	r0, r8
 8000790:	0143      	lsls	r3, r0, #5
 8000792:	d400      	bmi.n	8000796 <__aeabi_fadd+0x26a>
 8000794:	e77e      	b.n	8000694 <__aeabi_fadd+0x168>
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <__aeabi_fadd+0x334>)
 8000798:	3501      	adds	r5, #1
 800079a:	4018      	ands	r0, r3
 800079c:	e77a      	b.n	8000694 <__aeabi_fadd+0x168>
 800079e:	2fff      	cmp	r7, #255	; 0xff
 80007a0:	d08c      	beq.n	80006bc <__aeabi_fadd+0x190>
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	4641      	mov	r1, r8
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	4319      	orrs	r1, r3
 80007aa:	4688      	mov	r8, r1
 80007ac:	e79f      	b.n	80006ee <__aeabi_fadd+0x1c2>
 80007ae:	4643      	mov	r3, r8
 80007b0:	000c      	movs	r4, r1
 80007b2:	1af7      	subs	r7, r6, r3
 80007b4:	e6e3      	b.n	800057e <__aeabi_fadd+0x52>
 80007b6:	4642      	mov	r2, r8
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_fadd+0x292>
 80007bc:	e775      	b.n	80006aa <__aeabi_fadd+0x17e>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x298>
 80007c2:	e77a      	b.n	80006ba <__aeabi_fadd+0x18e>
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	03db      	lsls	r3, r3, #15
 80007c8:	2400      	movs	r4, #0
 80007ca:	469c      	mov	ip, r3
 80007cc:	22ff      	movs	r2, #255	; 0xff
 80007ce:	e6f2      	b.n	80005b6 <__aeabi_fadd+0x8a>
 80007d0:	0030      	movs	r0, r6
 80007d2:	4440      	add	r0, r8
 80007d4:	2501      	movs	r5, #1
 80007d6:	0143      	lsls	r3, r0, #5
 80007d8:	d400      	bmi.n	80007dc <__aeabi_fadd+0x2b0>
 80007da:	e75b      	b.n	8000694 <__aeabi_fadd+0x168>
 80007dc:	2502      	movs	r5, #2
 80007de:	e718      	b.n	8000612 <__aeabi_fadd+0xe6>
 80007e0:	4643      	mov	r3, r8
 80007e2:	2501      	movs	r5, #1
 80007e4:	1b98      	subs	r0, r3, r6
 80007e6:	e6c5      	b.n	8000574 <__aeabi_fadd+0x48>
 80007e8:	2320      	movs	r3, #32
 80007ea:	4644      	mov	r4, r8
 80007ec:	4640      	mov	r0, r8
 80007ee:	40d4      	lsrs	r4, r2
 80007f0:	1a9a      	subs	r2, r3, r2
 80007f2:	4090      	lsls	r0, r2
 80007f4:	1e43      	subs	r3, r0, #1
 80007f6:	4198      	sbcs	r0, r3
 80007f8:	4320      	orrs	r0, r4
 80007fa:	e7a4      	b.n	8000746 <__aeabi_fadd+0x21a>
 80007fc:	000d      	movs	r5, r1
 80007fe:	e74d      	b.n	800069c <__aeabi_fadd+0x170>
 8000800:	2320      	movs	r3, #32
 8000802:	4641      	mov	r1, r8
 8000804:	4640      	mov	r0, r8
 8000806:	40d1      	lsrs	r1, r2
 8000808:	1a9a      	subs	r2, r3, r2
 800080a:	4090      	lsls	r0, r2
 800080c:	1e43      	subs	r3, r0, #1
 800080e:	4198      	sbcs	r0, r3
 8000810:	4308      	orrs	r0, r1
 8000812:	e770      	b.n	80006f6 <__aeabi_fadd+0x1ca>
 8000814:	4642      	mov	r2, r8
 8000816:	2a00      	cmp	r2, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x2f0>
 800081a:	e74f      	b.n	80006bc <__aeabi_fadd+0x190>
 800081c:	2e00      	cmp	r6, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x2f6>
 8000820:	e74d      	b.n	80006be <__aeabi_fadd+0x192>
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	03d2      	lsls	r2, r2, #15
 8000826:	4213      	tst	r3, r2
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x300>
 800082a:	e748      	b.n	80006be <__aeabi_fadd+0x192>
 800082c:	4210      	tst	r0, r2
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0x306>
 8000830:	e745      	b.n	80006be <__aeabi_fadd+0x192>
 8000832:	0003      	movs	r3, r0
 8000834:	e743      	b.n	80006be <__aeabi_fadd+0x192>
 8000836:	2e00      	cmp	r6, #0
 8000838:	d090      	beq.n	800075c <__aeabi_fadd+0x230>
 800083a:	000c      	movs	r4, r1
 800083c:	4684      	mov	ip, r0
 800083e:	2200      	movs	r2, #0
 8000840:	e6b9      	b.n	80005b6 <__aeabi_fadd+0x8a>
 8000842:	4643      	mov	r3, r8
 8000844:	000c      	movs	r4, r1
 8000846:	1af0      	subs	r0, r6, r3
 8000848:	3501      	adds	r5, #1
 800084a:	e693      	b.n	8000574 <__aeabi_fadd+0x48>
 800084c:	4684      	mov	ip, r0
 800084e:	2200      	movs	r2, #0
 8000850:	e6b1      	b.n	80005b6 <__aeabi_fadd+0x8a>
 8000852:	2800      	cmp	r0, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_fadd+0x32c>
 8000856:	e71d      	b.n	8000694 <__aeabi_fadd+0x168>
 8000858:	2300      	movs	r3, #0
 800085a:	2400      	movs	r4, #0
 800085c:	469c      	mov	ip, r3
 800085e:	e6aa      	b.n	80005b6 <__aeabi_fadd+0x8a>
 8000860:	fbffffff 	.word	0xfbffffff
 8000864:	7dffffff 	.word	0x7dffffff

08000868 <__aeabi_fdiv>:
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086a:	464f      	mov	r7, r9
 800086c:	4646      	mov	r6, r8
 800086e:	46d6      	mov	lr, sl
 8000870:	0245      	lsls	r5, r0, #9
 8000872:	b5c0      	push	{r6, r7, lr}
 8000874:	0047      	lsls	r7, r0, #1
 8000876:	1c0c      	adds	r4, r1, #0
 8000878:	0a6d      	lsrs	r5, r5, #9
 800087a:	0e3f      	lsrs	r7, r7, #24
 800087c:	0fc6      	lsrs	r6, r0, #31
 800087e:	2f00      	cmp	r7, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_fdiv+0x1c>
 8000882:	e070      	b.n	8000966 <__aeabi_fdiv+0xfe>
 8000884:	2fff      	cmp	r7, #255	; 0xff
 8000886:	d100      	bne.n	800088a <__aeabi_fdiv+0x22>
 8000888:	e075      	b.n	8000976 <__aeabi_fdiv+0x10e>
 800088a:	00eb      	lsls	r3, r5, #3
 800088c:	2580      	movs	r5, #128	; 0x80
 800088e:	04ed      	lsls	r5, r5, #19
 8000890:	431d      	orrs	r5, r3
 8000892:	2300      	movs	r3, #0
 8000894:	4699      	mov	r9, r3
 8000896:	469a      	mov	sl, r3
 8000898:	3f7f      	subs	r7, #127	; 0x7f
 800089a:	0260      	lsls	r0, r4, #9
 800089c:	0a43      	lsrs	r3, r0, #9
 800089e:	4698      	mov	r8, r3
 80008a0:	0063      	lsls	r3, r4, #1
 80008a2:	0e1b      	lsrs	r3, r3, #24
 80008a4:	0fe4      	lsrs	r4, r4, #31
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d04e      	beq.n	8000948 <__aeabi_fdiv+0xe0>
 80008aa:	2bff      	cmp	r3, #255	; 0xff
 80008ac:	d046      	beq.n	800093c <__aeabi_fdiv+0xd4>
 80008ae:	4642      	mov	r2, r8
 80008b0:	00d0      	lsls	r0, r2, #3
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	04d2      	lsls	r2, r2, #19
 80008b6:	4302      	orrs	r2, r0
 80008b8:	4690      	mov	r8, r2
 80008ba:	2200      	movs	r2, #0
 80008bc:	3b7f      	subs	r3, #127	; 0x7f
 80008be:	0031      	movs	r1, r6
 80008c0:	1aff      	subs	r7, r7, r3
 80008c2:	464b      	mov	r3, r9
 80008c4:	4061      	eors	r1, r4
 80008c6:	b2c9      	uxtb	r1, r1
 80008c8:	4313      	orrs	r3, r2
 80008ca:	2b0f      	cmp	r3, #15
 80008cc:	d900      	bls.n	80008d0 <__aeabi_fdiv+0x68>
 80008ce:	e0b5      	b.n	8000a3c <__aeabi_fdiv+0x1d4>
 80008d0:	486e      	ldr	r0, [pc, #440]	; (8000a8c <__aeabi_fdiv+0x224>)
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	58c3      	ldr	r3, [r0, r3]
 80008d6:	469f      	mov	pc, r3
 80008d8:	2300      	movs	r3, #0
 80008da:	4698      	mov	r8, r3
 80008dc:	0026      	movs	r6, r4
 80008de:	4645      	mov	r5, r8
 80008e0:	4692      	mov	sl, r2
 80008e2:	4653      	mov	r3, sl
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d100      	bne.n	80008ea <__aeabi_fdiv+0x82>
 80008e8:	e089      	b.n	80009fe <__aeabi_fdiv+0x196>
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fdiv+0x88>
 80008ee:	e09e      	b.n	8000a2e <__aeabi_fdiv+0x1c6>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d018      	beq.n	8000926 <__aeabi_fdiv+0xbe>
 80008f4:	003b      	movs	r3, r7
 80008f6:	337f      	adds	r3, #127	; 0x7f
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dd69      	ble.n	80009d0 <__aeabi_fdiv+0x168>
 80008fc:	076a      	lsls	r2, r5, #29
 80008fe:	d004      	beq.n	800090a <__aeabi_fdiv+0xa2>
 8000900:	220f      	movs	r2, #15
 8000902:	402a      	ands	r2, r5
 8000904:	2a04      	cmp	r2, #4
 8000906:	d000      	beq.n	800090a <__aeabi_fdiv+0xa2>
 8000908:	3504      	adds	r5, #4
 800090a:	012a      	lsls	r2, r5, #4
 800090c:	d503      	bpl.n	8000916 <__aeabi_fdiv+0xae>
 800090e:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <__aeabi_fdiv+0x228>)
 8000910:	401d      	ands	r5, r3
 8000912:	003b      	movs	r3, r7
 8000914:	3380      	adds	r3, #128	; 0x80
 8000916:	2bfe      	cmp	r3, #254	; 0xfe
 8000918:	dd00      	ble.n	800091c <__aeabi_fdiv+0xb4>
 800091a:	e070      	b.n	80009fe <__aeabi_fdiv+0x196>
 800091c:	01ad      	lsls	r5, r5, #6
 800091e:	0a6d      	lsrs	r5, r5, #9
 8000920:	b2d8      	uxtb	r0, r3
 8000922:	e002      	b.n	800092a <__aeabi_fdiv+0xc2>
 8000924:	000e      	movs	r6, r1
 8000926:	2000      	movs	r0, #0
 8000928:	2500      	movs	r5, #0
 800092a:	05c0      	lsls	r0, r0, #23
 800092c:	4328      	orrs	r0, r5
 800092e:	07f6      	lsls	r6, r6, #31
 8000930:	4330      	orrs	r0, r6
 8000932:	bce0      	pop	{r5, r6, r7}
 8000934:	46ba      	mov	sl, r7
 8000936:	46b1      	mov	r9, r6
 8000938:	46a8      	mov	r8, r5
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093c:	4643      	mov	r3, r8
 800093e:	2b00      	cmp	r3, #0
 8000940:	d13f      	bne.n	80009c2 <__aeabi_fdiv+0x15a>
 8000942:	2202      	movs	r2, #2
 8000944:	3fff      	subs	r7, #255	; 0xff
 8000946:	e003      	b.n	8000950 <__aeabi_fdiv+0xe8>
 8000948:	4643      	mov	r3, r8
 800094a:	2b00      	cmp	r3, #0
 800094c:	d12d      	bne.n	80009aa <__aeabi_fdiv+0x142>
 800094e:	2201      	movs	r2, #1
 8000950:	0031      	movs	r1, r6
 8000952:	464b      	mov	r3, r9
 8000954:	4061      	eors	r1, r4
 8000956:	b2c9      	uxtb	r1, r1
 8000958:	4313      	orrs	r3, r2
 800095a:	2b0f      	cmp	r3, #15
 800095c:	d834      	bhi.n	80009c8 <__aeabi_fdiv+0x160>
 800095e:	484d      	ldr	r0, [pc, #308]	; (8000a94 <__aeabi_fdiv+0x22c>)
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	58c3      	ldr	r3, [r0, r3]
 8000964:	469f      	mov	pc, r3
 8000966:	2d00      	cmp	r5, #0
 8000968:	d113      	bne.n	8000992 <__aeabi_fdiv+0x12a>
 800096a:	2304      	movs	r3, #4
 800096c:	4699      	mov	r9, r3
 800096e:	3b03      	subs	r3, #3
 8000970:	2700      	movs	r7, #0
 8000972:	469a      	mov	sl, r3
 8000974:	e791      	b.n	800089a <__aeabi_fdiv+0x32>
 8000976:	2d00      	cmp	r5, #0
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x11e>
 800097a:	2308      	movs	r3, #8
 800097c:	4699      	mov	r9, r3
 800097e:	3b06      	subs	r3, #6
 8000980:	27ff      	movs	r7, #255	; 0xff
 8000982:	469a      	mov	sl, r3
 8000984:	e789      	b.n	800089a <__aeabi_fdiv+0x32>
 8000986:	230c      	movs	r3, #12
 8000988:	4699      	mov	r9, r3
 800098a:	3b09      	subs	r3, #9
 800098c:	27ff      	movs	r7, #255	; 0xff
 800098e:	469a      	mov	sl, r3
 8000990:	e783      	b.n	800089a <__aeabi_fdiv+0x32>
 8000992:	0028      	movs	r0, r5
 8000994:	f002 fb08 	bl	8002fa8 <__clzsi2>
 8000998:	2776      	movs	r7, #118	; 0x76
 800099a:	1f43      	subs	r3, r0, #5
 800099c:	409d      	lsls	r5, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	427f      	negs	r7, r7
 80009a2:	4699      	mov	r9, r3
 80009a4:	469a      	mov	sl, r3
 80009a6:	1a3f      	subs	r7, r7, r0
 80009a8:	e777      	b.n	800089a <__aeabi_fdiv+0x32>
 80009aa:	4640      	mov	r0, r8
 80009ac:	f002 fafc 	bl	8002fa8 <__clzsi2>
 80009b0:	4642      	mov	r2, r8
 80009b2:	1f43      	subs	r3, r0, #5
 80009b4:	409a      	lsls	r2, r3
 80009b6:	2376      	movs	r3, #118	; 0x76
 80009b8:	425b      	negs	r3, r3
 80009ba:	4690      	mov	r8, r2
 80009bc:	1a1b      	subs	r3, r3, r0
 80009be:	2200      	movs	r2, #0
 80009c0:	e77d      	b.n	80008be <__aeabi_fdiv+0x56>
 80009c2:	23ff      	movs	r3, #255	; 0xff
 80009c4:	2203      	movs	r2, #3
 80009c6:	e77a      	b.n	80008be <__aeabi_fdiv+0x56>
 80009c8:	000e      	movs	r6, r1
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	2500      	movs	r5, #0
 80009ce:	e7ac      	b.n	800092a <__aeabi_fdiv+0xc2>
 80009d0:	2001      	movs	r0, #1
 80009d2:	1ac0      	subs	r0, r0, r3
 80009d4:	281b      	cmp	r0, #27
 80009d6:	dca6      	bgt.n	8000926 <__aeabi_fdiv+0xbe>
 80009d8:	379e      	adds	r7, #158	; 0x9e
 80009da:	002a      	movs	r2, r5
 80009dc:	40bd      	lsls	r5, r7
 80009de:	40c2      	lsrs	r2, r0
 80009e0:	1e6b      	subs	r3, r5, #1
 80009e2:	419d      	sbcs	r5, r3
 80009e4:	4315      	orrs	r5, r2
 80009e6:	076b      	lsls	r3, r5, #29
 80009e8:	d004      	beq.n	80009f4 <__aeabi_fdiv+0x18c>
 80009ea:	230f      	movs	r3, #15
 80009ec:	402b      	ands	r3, r5
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d000      	beq.n	80009f4 <__aeabi_fdiv+0x18c>
 80009f2:	3504      	adds	r5, #4
 80009f4:	016b      	lsls	r3, r5, #5
 80009f6:	d544      	bpl.n	8000a82 <__aeabi_fdiv+0x21a>
 80009f8:	2001      	movs	r0, #1
 80009fa:	2500      	movs	r5, #0
 80009fc:	e795      	b.n	800092a <__aeabi_fdiv+0xc2>
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	2500      	movs	r5, #0
 8000a02:	e792      	b.n	800092a <__aeabi_fdiv+0xc2>
 8000a04:	2580      	movs	r5, #128	; 0x80
 8000a06:	2600      	movs	r6, #0
 8000a08:	20ff      	movs	r0, #255	; 0xff
 8000a0a:	03ed      	lsls	r5, r5, #15
 8000a0c:	e78d      	b.n	800092a <__aeabi_fdiv+0xc2>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	4698      	mov	r8, r3
 8000a12:	2080      	movs	r0, #128	; 0x80
 8000a14:	03c0      	lsls	r0, r0, #15
 8000a16:	4205      	tst	r5, r0
 8000a18:	d009      	beq.n	8000a2e <__aeabi_fdiv+0x1c6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	4203      	tst	r3, r0
 8000a1e:	d106      	bne.n	8000a2e <__aeabi_fdiv+0x1c6>
 8000a20:	4645      	mov	r5, r8
 8000a22:	4305      	orrs	r5, r0
 8000a24:	026d      	lsls	r5, r5, #9
 8000a26:	0026      	movs	r6, r4
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	0a6d      	lsrs	r5, r5, #9
 8000a2c:	e77d      	b.n	800092a <__aeabi_fdiv+0xc2>
 8000a2e:	2080      	movs	r0, #128	; 0x80
 8000a30:	03c0      	lsls	r0, r0, #15
 8000a32:	4305      	orrs	r5, r0
 8000a34:	026d      	lsls	r5, r5, #9
 8000a36:	20ff      	movs	r0, #255	; 0xff
 8000a38:	0a6d      	lsrs	r5, r5, #9
 8000a3a:	e776      	b.n	800092a <__aeabi_fdiv+0xc2>
 8000a3c:	4642      	mov	r2, r8
 8000a3e:	016b      	lsls	r3, r5, #5
 8000a40:	0150      	lsls	r0, r2, #5
 8000a42:	4283      	cmp	r3, r0
 8000a44:	d219      	bcs.n	8000a7a <__aeabi_fdiv+0x212>
 8000a46:	221b      	movs	r2, #27
 8000a48:	2500      	movs	r5, #0
 8000a4a:	3f01      	subs	r7, #1
 8000a4c:	2601      	movs	r6, #1
 8000a4e:	001c      	movs	r4, r3
 8000a50:	006d      	lsls	r5, r5, #1
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	db01      	blt.n	8000a5c <__aeabi_fdiv+0x1f4>
 8000a58:	4298      	cmp	r0, r3
 8000a5a:	d801      	bhi.n	8000a60 <__aeabi_fdiv+0x1f8>
 8000a5c:	1a1b      	subs	r3, r3, r0
 8000a5e:	4335      	orrs	r5, r6
 8000a60:	3a01      	subs	r2, #1
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d1f3      	bne.n	8000a4e <__aeabi_fdiv+0x1e6>
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	4193      	sbcs	r3, r2
 8000a6a:	431d      	orrs	r5, r3
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	337f      	adds	r3, #127	; 0x7f
 8000a70:	000e      	movs	r6, r1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dd00      	ble.n	8000a78 <__aeabi_fdiv+0x210>
 8000a76:	e741      	b.n	80008fc <__aeabi_fdiv+0x94>
 8000a78:	e7aa      	b.n	80009d0 <__aeabi_fdiv+0x168>
 8000a7a:	221a      	movs	r2, #26
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	1a1b      	subs	r3, r3, r0
 8000a80:	e7e4      	b.n	8000a4c <__aeabi_fdiv+0x1e4>
 8000a82:	01ad      	lsls	r5, r5, #6
 8000a84:	2000      	movs	r0, #0
 8000a86:	0a6d      	lsrs	r5, r5, #9
 8000a88:	e74f      	b.n	800092a <__aeabi_fdiv+0xc2>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	08012a30 	.word	0x08012a30
 8000a90:	f7ffffff 	.word	0xf7ffffff
 8000a94:	08012a70 	.word	0x08012a70

08000a98 <__eqsf2>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	0042      	lsls	r2, r0, #1
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	024e      	lsls	r6, r1, #9
 8000aa0:	004c      	lsls	r4, r1, #1
 8000aa2:	0fc3      	lsrs	r3, r0, #31
 8000aa4:	0a6d      	lsrs	r5, r5, #9
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	0e12      	lsrs	r2, r2, #24
 8000aaa:	0a76      	lsrs	r6, r6, #9
 8000aac:	0e24      	lsrs	r4, r4, #24
 8000aae:	0fc9      	lsrs	r1, r1, #31
 8000ab0:	2aff      	cmp	r2, #255	; 0xff
 8000ab2:	d006      	beq.n	8000ac2 <__eqsf2+0x2a>
 8000ab4:	2cff      	cmp	r4, #255	; 0xff
 8000ab6:	d003      	beq.n	8000ac0 <__eqsf2+0x28>
 8000ab8:	42a2      	cmp	r2, r4
 8000aba:	d101      	bne.n	8000ac0 <__eqsf2+0x28>
 8000abc:	42b5      	cmp	r5, r6
 8000abe:	d006      	beq.n	8000ace <__eqsf2+0x36>
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d1fc      	bne.n	8000ac0 <__eqsf2+0x28>
 8000ac6:	2cff      	cmp	r4, #255	; 0xff
 8000ac8:	d1fa      	bne.n	8000ac0 <__eqsf2+0x28>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d1f8      	bne.n	8000ac0 <__eqsf2+0x28>
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d006      	beq.n	8000ae0 <__eqsf2+0x48>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	d1f3      	bne.n	8000ac0 <__eqsf2+0x28>
 8000ad8:	0028      	movs	r0, r5
 8000ada:	1e43      	subs	r3, r0, #1
 8000adc:	4198      	sbcs	r0, r3
 8000ade:	e7ef      	b.n	8000ac0 <__eqsf2+0x28>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	e7ed      	b.n	8000ac0 <__eqsf2+0x28>

08000ae4 <__gesf2>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	0042      	lsls	r2, r0, #1
 8000ae8:	0245      	lsls	r5, r0, #9
 8000aea:	024e      	lsls	r6, r1, #9
 8000aec:	004c      	lsls	r4, r1, #1
 8000aee:	0fc3      	lsrs	r3, r0, #31
 8000af0:	0a6d      	lsrs	r5, r5, #9
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	0a76      	lsrs	r6, r6, #9
 8000af6:	0e24      	lsrs	r4, r4, #24
 8000af8:	0fc8      	lsrs	r0, r1, #31
 8000afa:	2aff      	cmp	r2, #255	; 0xff
 8000afc:	d01b      	beq.n	8000b36 <__gesf2+0x52>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d00e      	beq.n	8000b20 <__gesf2+0x3c>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d11b      	bne.n	8000b3e <__gesf2+0x5a>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d101      	bne.n	8000b0e <__gesf2+0x2a>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d01c      	beq.n	8000b48 <__gesf2+0x64>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d00c      	beq.n	8000b2c <__gesf2+0x48>
 8000b12:	4283      	cmp	r3, r0
 8000b14:	d01c      	beq.n	8000b50 <__gesf2+0x6c>
 8000b16:	2102      	movs	r1, #2
 8000b18:	1e58      	subs	r0, r3, #1
 8000b1a:	4008      	ands	r0, r1
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	2e00      	cmp	r6, #0
 8000b22:	d122      	bne.n	8000b6a <__gesf2+0x86>
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	d1f4      	bne.n	8000b12 <__gesf2+0x2e>
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d1f2      	bne.n	8000b12 <__gesf2+0x2e>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1f6      	bne.n	8000b1e <__gesf2+0x3a>
 8000b30:	2001      	movs	r0, #1
 8000b32:	4240      	negs	r0, r0
 8000b34:	e7f3      	b.n	8000b1e <__gesf2+0x3a>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d117      	bne.n	8000b6a <__gesf2+0x86>
 8000b3a:	2cff      	cmp	r4, #255	; 0xff
 8000b3c:	d0f0      	beq.n	8000b20 <__gesf2+0x3c>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d1e7      	bne.n	8000b12 <__gesf2+0x2e>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d1e5      	bne.n	8000b12 <__gesf2+0x2e>
 8000b46:	e7e6      	b.n	8000b16 <__gesf2+0x32>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d0e7      	beq.n	8000b1e <__gesf2+0x3a>
 8000b4e:	e7e2      	b.n	8000b16 <__gesf2+0x32>
 8000b50:	42a2      	cmp	r2, r4
 8000b52:	dc05      	bgt.n	8000b60 <__gesf2+0x7c>
 8000b54:	dbea      	blt.n	8000b2c <__gesf2+0x48>
 8000b56:	42b5      	cmp	r5, r6
 8000b58:	d802      	bhi.n	8000b60 <__gesf2+0x7c>
 8000b5a:	d3e7      	bcc.n	8000b2c <__gesf2+0x48>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e7de      	b.n	8000b1e <__gesf2+0x3a>
 8000b60:	4243      	negs	r3, r0
 8000b62:	4158      	adcs	r0, r3
 8000b64:	0040      	lsls	r0, r0, #1
 8000b66:	3801      	subs	r0, #1
 8000b68:	e7d9      	b.n	8000b1e <__gesf2+0x3a>
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	4240      	negs	r0, r0
 8000b6e:	e7d6      	b.n	8000b1e <__gesf2+0x3a>

08000b70 <__lesf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	0e12      	lsrs	r2, r2, #24
 8000b80:	0a76      	lsrs	r6, r6, #9
 8000b82:	0e24      	lsrs	r4, r4, #24
 8000b84:	0fc8      	lsrs	r0, r1, #31
 8000b86:	2aff      	cmp	r2, #255	; 0xff
 8000b88:	d00b      	beq.n	8000ba2 <__lesf2+0x32>
 8000b8a:	2cff      	cmp	r4, #255	; 0xff
 8000b8c:	d00d      	beq.n	8000baa <__lesf2+0x3a>
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d11f      	bne.n	8000bd2 <__lesf2+0x62>
 8000b92:	2c00      	cmp	r4, #0
 8000b94:	d116      	bne.n	8000bc4 <__lesf2+0x54>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d114      	bne.n	8000bc4 <__lesf2+0x54>
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d010      	beq.n	8000bc2 <__lesf2+0x52>
 8000ba0:	e009      	b.n	8000bb6 <__lesf2+0x46>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d10c      	bne.n	8000bc0 <__lesf2+0x50>
 8000ba6:	2cff      	cmp	r4, #255	; 0xff
 8000ba8:	d113      	bne.n	8000bd2 <__lesf2+0x62>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d108      	bne.n	8000bc0 <__lesf2+0x50>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d008      	beq.n	8000bc4 <__lesf2+0x54>
 8000bb2:	4283      	cmp	r3, r0
 8000bb4:	d012      	beq.n	8000bdc <__lesf2+0x6c>
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	1e58      	subs	r0, r3, #1
 8000bba:	4008      	ands	r0, r1
 8000bbc:	3801      	subs	r0, #1
 8000bbe:	e000      	b.n	8000bc2 <__lesf2+0x52>
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d1f4      	bne.n	8000bb2 <__lesf2+0x42>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d1fa      	bne.n	8000bc2 <__lesf2+0x52>
 8000bcc:	2001      	movs	r0, #1
 8000bce:	4240      	negs	r0, r0
 8000bd0:	e7f7      	b.n	8000bc2 <__lesf2+0x52>
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d1ed      	bne.n	8000bb2 <__lesf2+0x42>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d1eb      	bne.n	8000bb2 <__lesf2+0x42>
 8000bda:	e7ec      	b.n	8000bb6 <__lesf2+0x46>
 8000bdc:	42a2      	cmp	r2, r4
 8000bde:	dc05      	bgt.n	8000bec <__lesf2+0x7c>
 8000be0:	dbf2      	blt.n	8000bc8 <__lesf2+0x58>
 8000be2:	42b5      	cmp	r5, r6
 8000be4:	d802      	bhi.n	8000bec <__lesf2+0x7c>
 8000be6:	d3ef      	bcc.n	8000bc8 <__lesf2+0x58>
 8000be8:	2000      	movs	r0, #0
 8000bea:	e7ea      	b.n	8000bc2 <__lesf2+0x52>
 8000bec:	4243      	negs	r3, r0
 8000bee:	4158      	adcs	r0, r3
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	3801      	subs	r0, #1
 8000bf4:	e7e5      	b.n	8000bc2 <__lesf2+0x52>
 8000bf6:	46c0      	nop			; (mov r8, r8)

08000bf8 <__aeabi_fmul>:
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	464f      	mov	r7, r9
 8000bfc:	4646      	mov	r6, r8
 8000bfe:	46d6      	mov	lr, sl
 8000c00:	0244      	lsls	r4, r0, #9
 8000c02:	0045      	lsls	r5, r0, #1
 8000c04:	b5c0      	push	{r6, r7, lr}
 8000c06:	0a64      	lsrs	r4, r4, #9
 8000c08:	1c0f      	adds	r7, r1, #0
 8000c0a:	0e2d      	lsrs	r5, r5, #24
 8000c0c:	0fc6      	lsrs	r6, r0, #31
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fmul+0x1c>
 8000c12:	e08d      	b.n	8000d30 <__aeabi_fmul+0x138>
 8000c14:	2dff      	cmp	r5, #255	; 0xff
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fmul+0x22>
 8000c18:	e092      	b.n	8000d40 <__aeabi_fmul+0x148>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2080      	movs	r0, #128	; 0x80
 8000c1e:	4699      	mov	r9, r3
 8000c20:	469a      	mov	sl, r3
 8000c22:	00e4      	lsls	r4, r4, #3
 8000c24:	04c0      	lsls	r0, r0, #19
 8000c26:	4304      	orrs	r4, r0
 8000c28:	3d7f      	subs	r5, #127	; 0x7f
 8000c2a:	0278      	lsls	r0, r7, #9
 8000c2c:	0a43      	lsrs	r3, r0, #9
 8000c2e:	4698      	mov	r8, r3
 8000c30:	007b      	lsls	r3, r7, #1
 8000c32:	0e1b      	lsrs	r3, r3, #24
 8000c34:	0fff      	lsrs	r7, r7, #31
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fmul+0x44>
 8000c3a:	e070      	b.n	8000d1e <__aeabi_fmul+0x126>
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_fmul+0x4a>
 8000c40:	e086      	b.n	8000d50 <__aeabi_fmul+0x158>
 8000c42:	4642      	mov	r2, r8
 8000c44:	00d0      	lsls	r0, r2, #3
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	3b7f      	subs	r3, #127	; 0x7f
 8000c4a:	18ed      	adds	r5, r5, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	04d2      	lsls	r2, r2, #19
 8000c50:	4302      	orrs	r2, r0
 8000c52:	4690      	mov	r8, r2
 8000c54:	469c      	mov	ip, r3
 8000c56:	0031      	movs	r1, r6
 8000c58:	464b      	mov	r3, r9
 8000c5a:	4079      	eors	r1, r7
 8000c5c:	1c68      	adds	r0, r5, #1
 8000c5e:	2b0f      	cmp	r3, #15
 8000c60:	d81c      	bhi.n	8000c9c <__aeabi_fmul+0xa4>
 8000c62:	4a76      	ldr	r2, [pc, #472]	; (8000e3c <__aeabi_fmul+0x244>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	58d3      	ldr	r3, [r2, r3]
 8000c68:	469f      	mov	pc, r3
 8000c6a:	0039      	movs	r1, r7
 8000c6c:	4644      	mov	r4, r8
 8000c6e:	46e2      	mov	sl, ip
 8000c70:	4653      	mov	r3, sl
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d00f      	beq.n	8000c96 <__aeabi_fmul+0x9e>
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fmul+0x84>
 8000c7a:	e0d7      	b.n	8000e2c <__aeabi_fmul+0x234>
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d137      	bne.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c80:	2000      	movs	r0, #0
 8000c82:	2400      	movs	r4, #0
 8000c84:	05c0      	lsls	r0, r0, #23
 8000c86:	4320      	orrs	r0, r4
 8000c88:	07c9      	lsls	r1, r1, #31
 8000c8a:	4308      	orrs	r0, r1
 8000c8c:	bce0      	pop	{r5, r6, r7}
 8000c8e:	46ba      	mov	sl, r7
 8000c90:	46b1      	mov	r9, r6
 8000c92:	46a8      	mov	r8, r5
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c96:	20ff      	movs	r0, #255	; 0xff
 8000c98:	2400      	movs	r4, #0
 8000c9a:	e7f3      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000c9c:	0c26      	lsrs	r6, r4, #16
 8000c9e:	0424      	lsls	r4, r4, #16
 8000ca0:	0c22      	lsrs	r2, r4, #16
 8000ca2:	4644      	mov	r4, r8
 8000ca4:	0424      	lsls	r4, r4, #16
 8000ca6:	0c24      	lsrs	r4, r4, #16
 8000ca8:	4643      	mov	r3, r8
 8000caa:	0027      	movs	r7, r4
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	4357      	muls	r7, r2
 8000cb0:	4374      	muls	r4, r6
 8000cb2:	435a      	muls	r2, r3
 8000cb4:	435e      	muls	r6, r3
 8000cb6:	1912      	adds	r2, r2, r4
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	189b      	adds	r3, r3, r2
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	d903      	bls.n	8000cc8 <__aeabi_fmul+0xd0>
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	0252      	lsls	r2, r2, #9
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	4466      	add	r6, ip
 8000cc8:	043f      	lsls	r7, r7, #16
 8000cca:	041a      	lsls	r2, r3, #16
 8000ccc:	0c3f      	lsrs	r7, r7, #16
 8000cce:	19d2      	adds	r2, r2, r7
 8000cd0:	0194      	lsls	r4, r2, #6
 8000cd2:	1e67      	subs	r7, r4, #1
 8000cd4:	41bc      	sbcs	r4, r7
 8000cd6:	0c1b      	lsrs	r3, r3, #16
 8000cd8:	0e92      	lsrs	r2, r2, #26
 8000cda:	199b      	adds	r3, r3, r6
 8000cdc:	4314      	orrs	r4, r2
 8000cde:	019b      	lsls	r3, r3, #6
 8000ce0:	431c      	orrs	r4, r3
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	d400      	bmi.n	8000ce8 <__aeabi_fmul+0xf0>
 8000ce6:	e09b      	b.n	8000e20 <__aeabi_fmul+0x228>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	0862      	lsrs	r2, r4, #1
 8000cec:	401c      	ands	r4, r3
 8000cee:	4314      	orrs	r4, r2
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	327f      	adds	r2, #127	; 0x7f
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	dd64      	ble.n	8000dc2 <__aeabi_fmul+0x1ca>
 8000cf8:	0763      	lsls	r3, r4, #29
 8000cfa:	d004      	beq.n	8000d06 <__aeabi_fmul+0x10e>
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4023      	ands	r3, r4
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fmul+0x10e>
 8000d04:	3404      	adds	r4, #4
 8000d06:	0123      	lsls	r3, r4, #4
 8000d08:	d503      	bpl.n	8000d12 <__aeabi_fmul+0x11a>
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <__aeabi_fmul+0x248>)
 8000d0e:	3280      	adds	r2, #128	; 0x80
 8000d10:	401c      	ands	r4, r3
 8000d12:	2afe      	cmp	r2, #254	; 0xfe
 8000d14:	dcbf      	bgt.n	8000c96 <__aeabi_fmul+0x9e>
 8000d16:	01a4      	lsls	r4, r4, #6
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	b2d0      	uxtb	r0, r2
 8000d1c:	e7b2      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000d1e:	4643      	mov	r3, r8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d13d      	bne.n	8000da0 <__aeabi_fmul+0x1a8>
 8000d24:	464a      	mov	r2, r9
 8000d26:	3301      	adds	r3, #1
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4691      	mov	r9, r2
 8000d2c:	469c      	mov	ip, r3
 8000d2e:	e792      	b.n	8000c56 <__aeabi_fmul+0x5e>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d129      	bne.n	8000d88 <__aeabi_fmul+0x190>
 8000d34:	2304      	movs	r3, #4
 8000d36:	4699      	mov	r9, r3
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	469a      	mov	sl, r3
 8000d3e:	e774      	b.n	8000c2a <__aeabi_fmul+0x32>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d11b      	bne.n	8000d7c <__aeabi_fmul+0x184>
 8000d44:	2308      	movs	r3, #8
 8000d46:	4699      	mov	r9, r3
 8000d48:	3b06      	subs	r3, #6
 8000d4a:	25ff      	movs	r5, #255	; 0xff
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	e76c      	b.n	8000c2a <__aeabi_fmul+0x32>
 8000d50:	4643      	mov	r3, r8
 8000d52:	35ff      	adds	r5, #255	; 0xff
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10b      	bne.n	8000d70 <__aeabi_fmul+0x178>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4691      	mov	r9, r2
 8000d60:	469c      	mov	ip, r3
 8000d62:	e778      	b.n	8000c56 <__aeabi_fmul+0x5e>
 8000d64:	4653      	mov	r3, sl
 8000d66:	0031      	movs	r1, r6
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x176>
 8000d6c:	e783      	b.n	8000c76 <__aeabi_fmul+0x7e>
 8000d6e:	e792      	b.n	8000c96 <__aeabi_fmul+0x9e>
 8000d70:	2303      	movs	r3, #3
 8000d72:	464a      	mov	r2, r9
 8000d74:	431a      	orrs	r2, r3
 8000d76:	4691      	mov	r9, r2
 8000d78:	469c      	mov	ip, r3
 8000d7a:	e76c      	b.n	8000c56 <__aeabi_fmul+0x5e>
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	4699      	mov	r9, r3
 8000d80:	3b09      	subs	r3, #9
 8000d82:	25ff      	movs	r5, #255	; 0xff
 8000d84:	469a      	mov	sl, r3
 8000d86:	e750      	b.n	8000c2a <__aeabi_fmul+0x32>
 8000d88:	0020      	movs	r0, r4
 8000d8a:	f002 f90d 	bl	8002fa8 <__clzsi2>
 8000d8e:	2576      	movs	r5, #118	; 0x76
 8000d90:	1f43      	subs	r3, r0, #5
 8000d92:	409c      	lsls	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	426d      	negs	r5, r5
 8000d98:	4699      	mov	r9, r3
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	1a2d      	subs	r5, r5, r0
 8000d9e:	e744      	b.n	8000c2a <__aeabi_fmul+0x32>
 8000da0:	4640      	mov	r0, r8
 8000da2:	f002 f901 	bl	8002fa8 <__clzsi2>
 8000da6:	4642      	mov	r2, r8
 8000da8:	1f43      	subs	r3, r0, #5
 8000daa:	409a      	lsls	r2, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	1a2d      	subs	r5, r5, r0
 8000db0:	4690      	mov	r8, r2
 8000db2:	469c      	mov	ip, r3
 8000db4:	3d76      	subs	r5, #118	; 0x76
 8000db6:	e74e      	b.n	8000c56 <__aeabi_fmul+0x5e>
 8000db8:	2480      	movs	r4, #128	; 0x80
 8000dba:	2100      	movs	r1, #0
 8000dbc:	20ff      	movs	r0, #255	; 0xff
 8000dbe:	03e4      	lsls	r4, r4, #15
 8000dc0:	e760      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	2b1b      	cmp	r3, #27
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_fmul+0x1d4>
 8000dca:	e759      	b.n	8000c80 <__aeabi_fmul+0x88>
 8000dcc:	0022      	movs	r2, r4
 8000dce:	309e      	adds	r0, #158	; 0x9e
 8000dd0:	40da      	lsrs	r2, r3
 8000dd2:	4084      	lsls	r4, r0
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	1e62      	subs	r2, r4, #1
 8000dd8:	4194      	sbcs	r4, r2
 8000dda:	431c      	orrs	r4, r3
 8000ddc:	0763      	lsls	r3, r4, #29
 8000dde:	d004      	beq.n	8000dea <__aeabi_fmul+0x1f2>
 8000de0:	230f      	movs	r3, #15
 8000de2:	4023      	ands	r3, r4
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d000      	beq.n	8000dea <__aeabi_fmul+0x1f2>
 8000de8:	3404      	adds	r4, #4
 8000dea:	0163      	lsls	r3, r4, #5
 8000dec:	d51a      	bpl.n	8000e24 <__aeabi_fmul+0x22c>
 8000dee:	2001      	movs	r0, #1
 8000df0:	2400      	movs	r4, #0
 8000df2:	e747      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000df4:	2080      	movs	r0, #128	; 0x80
 8000df6:	03c0      	lsls	r0, r0, #15
 8000df8:	4204      	tst	r4, r0
 8000dfa:	d009      	beq.n	8000e10 <__aeabi_fmul+0x218>
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	4203      	tst	r3, r0
 8000e00:	d106      	bne.n	8000e10 <__aeabi_fmul+0x218>
 8000e02:	4644      	mov	r4, r8
 8000e04:	4304      	orrs	r4, r0
 8000e06:	0264      	lsls	r4, r4, #9
 8000e08:	0039      	movs	r1, r7
 8000e0a:	20ff      	movs	r0, #255	; 0xff
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	e739      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	03c0      	lsls	r0, r0, #15
 8000e14:	4304      	orrs	r4, r0
 8000e16:	0264      	lsls	r4, r4, #9
 8000e18:	0031      	movs	r1, r6
 8000e1a:	20ff      	movs	r0, #255	; 0xff
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	e731      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000e20:	0028      	movs	r0, r5
 8000e22:	e765      	b.n	8000cf0 <__aeabi_fmul+0xf8>
 8000e24:	01a4      	lsls	r4, r4, #6
 8000e26:	2000      	movs	r0, #0
 8000e28:	0a64      	lsrs	r4, r4, #9
 8000e2a:	e72b      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000e2c:	2080      	movs	r0, #128	; 0x80
 8000e2e:	03c0      	lsls	r0, r0, #15
 8000e30:	4304      	orrs	r4, r0
 8000e32:	0264      	lsls	r4, r4, #9
 8000e34:	20ff      	movs	r0, #255	; 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e724      	b.n	8000c84 <__aeabi_fmul+0x8c>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	08012ab0 	.word	0x08012ab0
 8000e40:	f7ffffff 	.word	0xf7ffffff

08000e44 <__aeabi_fsub>:
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	46ce      	mov	lr, r9
 8000e48:	4647      	mov	r7, r8
 8000e4a:	0243      	lsls	r3, r0, #9
 8000e4c:	0a5b      	lsrs	r3, r3, #9
 8000e4e:	024e      	lsls	r6, r1, #9
 8000e50:	00da      	lsls	r2, r3, #3
 8000e52:	4694      	mov	ip, r2
 8000e54:	0a72      	lsrs	r2, r6, #9
 8000e56:	4691      	mov	r9, r2
 8000e58:	0045      	lsls	r5, r0, #1
 8000e5a:	004a      	lsls	r2, r1, #1
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	0e2d      	lsrs	r5, r5, #24
 8000e60:	001f      	movs	r7, r3
 8000e62:	0fc4      	lsrs	r4, r0, #31
 8000e64:	0e12      	lsrs	r2, r2, #24
 8000e66:	0fc9      	lsrs	r1, r1, #31
 8000e68:	09b6      	lsrs	r6, r6, #6
 8000e6a:	2aff      	cmp	r2, #255	; 0xff
 8000e6c:	d05b      	beq.n	8000f26 <__aeabi_fsub+0xe2>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	4041      	eors	r1, r0
 8000e72:	428c      	cmp	r4, r1
 8000e74:	d039      	beq.n	8000eea <__aeabi_fsub+0xa6>
 8000e76:	1aa8      	subs	r0, r5, r2
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	dd5a      	ble.n	8000f32 <__aeabi_fsub+0xee>
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d06a      	beq.n	8000f56 <__aeabi_fsub+0x112>
 8000e80:	2dff      	cmp	r5, #255	; 0xff
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x42>
 8000e84:	e0d9      	b.n	800103a <__aeabi_fsub+0x1f6>
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	04d2      	lsls	r2, r2, #19
 8000e8a:	4316      	orrs	r6, r2
 8000e8c:	281b      	cmp	r0, #27
 8000e8e:	dc00      	bgt.n	8000e92 <__aeabi_fsub+0x4e>
 8000e90:	e0e9      	b.n	8001066 <__aeabi_fsub+0x222>
 8000e92:	2001      	movs	r0, #1
 8000e94:	4663      	mov	r3, ip
 8000e96:	1a18      	subs	r0, r3, r0
 8000e98:	0143      	lsls	r3, r0, #5
 8000e9a:	d400      	bmi.n	8000e9e <__aeabi_fsub+0x5a>
 8000e9c:	e0b4      	b.n	8001008 <__aeabi_fsub+0x1c4>
 8000e9e:	0180      	lsls	r0, r0, #6
 8000ea0:	0987      	lsrs	r7, r0, #6
 8000ea2:	0038      	movs	r0, r7
 8000ea4:	f002 f880 	bl	8002fa8 <__clzsi2>
 8000ea8:	3805      	subs	r0, #5
 8000eaa:	4087      	lsls	r7, r0
 8000eac:	4285      	cmp	r5, r0
 8000eae:	dc00      	bgt.n	8000eb2 <__aeabi_fsub+0x6e>
 8000eb0:	e0cc      	b.n	800104c <__aeabi_fsub+0x208>
 8000eb2:	1a2d      	subs	r5, r5, r0
 8000eb4:	48b5      	ldr	r0, [pc, #724]	; (800118c <__aeabi_fsub+0x348>)
 8000eb6:	4038      	ands	r0, r7
 8000eb8:	0743      	lsls	r3, r0, #29
 8000eba:	d004      	beq.n	8000ec6 <__aeabi_fsub+0x82>
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4003      	ands	r3, r0
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_fsub+0x82>
 8000ec4:	3004      	adds	r0, #4
 8000ec6:	0143      	lsls	r3, r0, #5
 8000ec8:	d400      	bmi.n	8000ecc <__aeabi_fsub+0x88>
 8000eca:	e0a0      	b.n	800100e <__aeabi_fsub+0x1ca>
 8000ecc:	1c6a      	adds	r2, r5, #1
 8000ece:	2dfe      	cmp	r5, #254	; 0xfe
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x90>
 8000ed2:	e08d      	b.n	8000ff0 <__aeabi_fsub+0x1ac>
 8000ed4:	0180      	lsls	r0, r0, #6
 8000ed6:	0a47      	lsrs	r7, r0, #9
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	05d0      	lsls	r0, r2, #23
 8000edc:	4338      	orrs	r0, r7
 8000ede:	07e4      	lsls	r4, r4, #31
 8000ee0:	4320      	orrs	r0, r4
 8000ee2:	bcc0      	pop	{r6, r7}
 8000ee4:	46b9      	mov	r9, r7
 8000ee6:	46b0      	mov	r8, r6
 8000ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eea:	1aa8      	subs	r0, r5, r2
 8000eec:	4680      	mov	r8, r0
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	dd45      	ble.n	8000f7e <__aeabi_fsub+0x13a>
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	d070      	beq.n	8000fd8 <__aeabi_fsub+0x194>
 8000ef6:	2dff      	cmp	r5, #255	; 0xff
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0xb8>
 8000efa:	e09e      	b.n	800103a <__aeabi_fsub+0x1f6>
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	04db      	lsls	r3, r3, #19
 8000f00:	431e      	orrs	r6, r3
 8000f02:	4643      	mov	r3, r8
 8000f04:	2b1b      	cmp	r3, #27
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_fsub+0xc6>
 8000f08:	e0d2      	b.n	80010b0 <__aeabi_fsub+0x26c>
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	4460      	add	r0, ip
 8000f0e:	0143      	lsls	r3, r0, #5
 8000f10:	d57a      	bpl.n	8001008 <__aeabi_fsub+0x1c4>
 8000f12:	3501      	adds	r5, #1
 8000f14:	2dff      	cmp	r5, #255	; 0xff
 8000f16:	d06b      	beq.n	8000ff0 <__aeabi_fsub+0x1ac>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	4a9d      	ldr	r2, [pc, #628]	; (8001190 <__aeabi_fsub+0x34c>)
 8000f1c:	4003      	ands	r3, r0
 8000f1e:	0840      	lsrs	r0, r0, #1
 8000f20:	4010      	ands	r0, r2
 8000f22:	4318      	orrs	r0, r3
 8000f24:	e7c8      	b.n	8000eb8 <__aeabi_fsub+0x74>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d020      	beq.n	8000f6c <__aeabi_fsub+0x128>
 8000f2a:	428c      	cmp	r4, r1
 8000f2c:	d023      	beq.n	8000f76 <__aeabi_fsub+0x132>
 8000f2e:	0028      	movs	r0, r5
 8000f30:	38ff      	subs	r0, #255	; 0xff
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d039      	beq.n	8000faa <__aeabi_fsub+0x166>
 8000f36:	1b57      	subs	r7, r2, r5
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0xfa>
 8000f3c:	e09d      	b.n	800107a <__aeabi_fsub+0x236>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fsub+0x102>
 8000f44:	e0db      	b.n	80010fe <__aeabi_fsub+0x2ba>
 8000f46:	1e7b      	subs	r3, r7, #1
 8000f48:	2f01      	cmp	r7, #1
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x10a>
 8000f4c:	e10d      	b.n	800116a <__aeabi_fsub+0x326>
 8000f4e:	2fff      	cmp	r7, #255	; 0xff
 8000f50:	d071      	beq.n	8001036 <__aeabi_fsub+0x1f2>
 8000f52:	001f      	movs	r7, r3
 8000f54:	e098      	b.n	8001088 <__aeabi_fsub+0x244>
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x118>
 8000f5a:	e0a7      	b.n	80010ac <__aeabi_fsub+0x268>
 8000f5c:	1e42      	subs	r2, r0, #1
 8000f5e:	2801      	cmp	r0, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x120>
 8000f62:	e0e6      	b.n	8001132 <__aeabi_fsub+0x2ee>
 8000f64:	28ff      	cmp	r0, #255	; 0xff
 8000f66:	d068      	beq.n	800103a <__aeabi_fsub+0x1f6>
 8000f68:	0010      	movs	r0, r2
 8000f6a:	e78f      	b.n	8000e8c <__aeabi_fsub+0x48>
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	4041      	eors	r1, r0
 8000f70:	42a1      	cmp	r1, r4
 8000f72:	d000      	beq.n	8000f76 <__aeabi_fsub+0x132>
 8000f74:	e77f      	b.n	8000e76 <__aeabi_fsub+0x32>
 8000f76:	20ff      	movs	r0, #255	; 0xff
 8000f78:	4240      	negs	r0, r0
 8000f7a:	4680      	mov	r8, r0
 8000f7c:	44a8      	add	r8, r5
 8000f7e:	4640      	mov	r0, r8
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d038      	beq.n	8000ff6 <__aeabi_fsub+0x1b2>
 8000f84:	1b51      	subs	r1, r2, r5
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	d100      	bne.n	8000f8c <__aeabi_fsub+0x148>
 8000f8a:	e0ae      	b.n	80010ea <__aeabi_fsub+0x2a6>
 8000f8c:	2aff      	cmp	r2, #255	; 0xff
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x14e>
 8000f90:	e0df      	b.n	8001152 <__aeabi_fsub+0x30e>
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	4660      	mov	r0, ip
 8000f96:	04db      	lsls	r3, r3, #19
 8000f98:	4318      	orrs	r0, r3
 8000f9a:	4684      	mov	ip, r0
 8000f9c:	291b      	cmp	r1, #27
 8000f9e:	dc00      	bgt.n	8000fa2 <__aeabi_fsub+0x15e>
 8000fa0:	e0d9      	b.n	8001156 <__aeabi_fsub+0x312>
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	0015      	movs	r5, r2
 8000fa6:	1980      	adds	r0, r0, r6
 8000fa8:	e7b1      	b.n	8000f0e <__aeabi_fsub+0xca>
 8000faa:	20fe      	movs	r0, #254	; 0xfe
 8000fac:	1c6a      	adds	r2, r5, #1
 8000fae:	4210      	tst	r0, r2
 8000fb0:	d171      	bne.n	8001096 <__aeabi_fsub+0x252>
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x174>
 8000fb6:	e0a6      	b.n	8001106 <__aeabi_fsub+0x2c2>
 8000fb8:	4663      	mov	r3, ip
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x17c>
 8000fbe:	e0d9      	b.n	8001174 <__aeabi_fsub+0x330>
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x184>
 8000fc6:	e788      	b.n	8000eda <__aeabi_fsub+0x96>
 8000fc8:	1b98      	subs	r0, r3, r6
 8000fca:	0143      	lsls	r3, r0, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x18c>
 8000fce:	e0e1      	b.n	8001194 <__aeabi_fsub+0x350>
 8000fd0:	4663      	mov	r3, ip
 8000fd2:	000c      	movs	r4, r1
 8000fd4:	1af0      	subs	r0, r6, r3
 8000fd6:	e76f      	b.n	8000eb8 <__aeabi_fsub+0x74>
 8000fd8:	2e00      	cmp	r6, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_fsub+0x19a>
 8000fdc:	e0b7      	b.n	800114e <__aeabi_fsub+0x30a>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	2801      	cmp	r0, #1
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x1a4>
 8000fe6:	e09c      	b.n	8001122 <__aeabi_fsub+0x2de>
 8000fe8:	28ff      	cmp	r0, #255	; 0xff
 8000fea:	d026      	beq.n	800103a <__aeabi_fsub+0x1f6>
 8000fec:	4690      	mov	r8, r2
 8000fee:	e788      	b.n	8000f02 <__aeabi_fsub+0xbe>
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	2700      	movs	r7, #0
 8000ff4:	e771      	b.n	8000eda <__aeabi_fsub+0x96>
 8000ff6:	20fe      	movs	r0, #254	; 0xfe
 8000ff8:	1c6a      	adds	r2, r5, #1
 8000ffa:	4210      	tst	r0, r2
 8000ffc:	d064      	beq.n	80010c8 <__aeabi_fsub+0x284>
 8000ffe:	2aff      	cmp	r2, #255	; 0xff
 8001000:	d0f6      	beq.n	8000ff0 <__aeabi_fsub+0x1ac>
 8001002:	0015      	movs	r5, r2
 8001004:	4466      	add	r6, ip
 8001006:	0870      	lsrs	r0, r6, #1
 8001008:	0743      	lsls	r3, r0, #29
 800100a:	d000      	beq.n	800100e <__aeabi_fsub+0x1ca>
 800100c:	e756      	b.n	8000ebc <__aeabi_fsub+0x78>
 800100e:	08c3      	lsrs	r3, r0, #3
 8001010:	2dff      	cmp	r5, #255	; 0xff
 8001012:	d012      	beq.n	800103a <__aeabi_fsub+0x1f6>
 8001014:	025b      	lsls	r3, r3, #9
 8001016:	0a5f      	lsrs	r7, r3, #9
 8001018:	b2ea      	uxtb	r2, r5
 800101a:	e75e      	b.n	8000eda <__aeabi_fsub+0x96>
 800101c:	4662      	mov	r2, ip
 800101e:	2a00      	cmp	r2, #0
 8001020:	d100      	bne.n	8001024 <__aeabi_fsub+0x1e0>
 8001022:	e096      	b.n	8001152 <__aeabi_fsub+0x30e>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d008      	beq.n	800103a <__aeabi_fsub+0x1f6>
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	03d2      	lsls	r2, r2, #15
 800102c:	4213      	tst	r3, r2
 800102e:	d004      	beq.n	800103a <__aeabi_fsub+0x1f6>
 8001030:	4648      	mov	r0, r9
 8001032:	4210      	tst	r0, r2
 8001034:	d101      	bne.n	800103a <__aeabi_fsub+0x1f6>
 8001036:	000c      	movs	r4, r1
 8001038:	464b      	mov	r3, r9
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0d8      	beq.n	8000ff0 <__aeabi_fsub+0x1ac>
 800103e:	2780      	movs	r7, #128	; 0x80
 8001040:	03ff      	lsls	r7, r7, #15
 8001042:	431f      	orrs	r7, r3
 8001044:	027f      	lsls	r7, r7, #9
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	0a7f      	lsrs	r7, r7, #9
 800104a:	e746      	b.n	8000eda <__aeabi_fsub+0x96>
 800104c:	2320      	movs	r3, #32
 800104e:	003a      	movs	r2, r7
 8001050:	1b45      	subs	r5, r0, r5
 8001052:	0038      	movs	r0, r7
 8001054:	3501      	adds	r5, #1
 8001056:	40ea      	lsrs	r2, r5
 8001058:	1b5d      	subs	r5, r3, r5
 800105a:	40a8      	lsls	r0, r5
 800105c:	1e43      	subs	r3, r0, #1
 800105e:	4198      	sbcs	r0, r3
 8001060:	2500      	movs	r5, #0
 8001062:	4310      	orrs	r0, r2
 8001064:	e728      	b.n	8000eb8 <__aeabi_fsub+0x74>
 8001066:	2320      	movs	r3, #32
 8001068:	1a1b      	subs	r3, r3, r0
 800106a:	0032      	movs	r2, r6
 800106c:	409e      	lsls	r6, r3
 800106e:	40c2      	lsrs	r2, r0
 8001070:	0030      	movs	r0, r6
 8001072:	1e43      	subs	r3, r0, #1
 8001074:	4198      	sbcs	r0, r3
 8001076:	4310      	orrs	r0, r2
 8001078:	e70c      	b.n	8000e94 <__aeabi_fsub+0x50>
 800107a:	2aff      	cmp	r2, #255	; 0xff
 800107c:	d0db      	beq.n	8001036 <__aeabi_fsub+0x1f2>
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	4660      	mov	r0, ip
 8001082:	04db      	lsls	r3, r3, #19
 8001084:	4318      	orrs	r0, r3
 8001086:	4684      	mov	ip, r0
 8001088:	2f1b      	cmp	r7, #27
 800108a:	dd56      	ble.n	800113a <__aeabi_fsub+0x2f6>
 800108c:	2001      	movs	r0, #1
 800108e:	000c      	movs	r4, r1
 8001090:	0015      	movs	r5, r2
 8001092:	1a30      	subs	r0, r6, r0
 8001094:	e700      	b.n	8000e98 <__aeabi_fsub+0x54>
 8001096:	4663      	mov	r3, ip
 8001098:	1b9f      	subs	r7, r3, r6
 800109a:	017b      	lsls	r3, r7, #5
 800109c:	d43d      	bmi.n	800111a <__aeabi_fsub+0x2d6>
 800109e:	2f00      	cmp	r7, #0
 80010a0:	d000      	beq.n	80010a4 <__aeabi_fsub+0x260>
 80010a2:	e6fe      	b.n	8000ea2 <__aeabi_fsub+0x5e>
 80010a4:	2400      	movs	r4, #0
 80010a6:	2200      	movs	r2, #0
 80010a8:	2700      	movs	r7, #0
 80010aa:	e716      	b.n	8000eda <__aeabi_fsub+0x96>
 80010ac:	0005      	movs	r5, r0
 80010ae:	e7af      	b.n	8001010 <__aeabi_fsub+0x1cc>
 80010b0:	0032      	movs	r2, r6
 80010b2:	4643      	mov	r3, r8
 80010b4:	4641      	mov	r1, r8
 80010b6:	40da      	lsrs	r2, r3
 80010b8:	2320      	movs	r3, #32
 80010ba:	1a5b      	subs	r3, r3, r1
 80010bc:	409e      	lsls	r6, r3
 80010be:	0030      	movs	r0, r6
 80010c0:	1e43      	subs	r3, r0, #1
 80010c2:	4198      	sbcs	r0, r3
 80010c4:	4310      	orrs	r0, r2
 80010c6:	e721      	b.n	8000f0c <__aeabi_fsub+0xc8>
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	d1a7      	bne.n	800101c <__aeabi_fsub+0x1d8>
 80010cc:	4663      	mov	r3, ip
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d059      	beq.n	8001186 <__aeabi_fsub+0x342>
 80010d2:	2200      	movs	r2, #0
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x296>
 80010d8:	e6ff      	b.n	8000eda <__aeabi_fsub+0x96>
 80010da:	0030      	movs	r0, r6
 80010dc:	4460      	add	r0, ip
 80010de:	0143      	lsls	r3, r0, #5
 80010e0:	d592      	bpl.n	8001008 <__aeabi_fsub+0x1c4>
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <__aeabi_fsub+0x348>)
 80010e4:	3501      	adds	r5, #1
 80010e6:	4018      	ands	r0, r3
 80010e8:	e78e      	b.n	8001008 <__aeabi_fsub+0x1c4>
 80010ea:	4663      	mov	r3, ip
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d047      	beq.n	8001180 <__aeabi_fsub+0x33c>
 80010f0:	1e4b      	subs	r3, r1, #1
 80010f2:	2901      	cmp	r1, #1
 80010f4:	d015      	beq.n	8001122 <__aeabi_fsub+0x2de>
 80010f6:	29ff      	cmp	r1, #255	; 0xff
 80010f8:	d02b      	beq.n	8001152 <__aeabi_fsub+0x30e>
 80010fa:	0019      	movs	r1, r3
 80010fc:	e74e      	b.n	8000f9c <__aeabi_fsub+0x158>
 80010fe:	000c      	movs	r4, r1
 8001100:	464b      	mov	r3, r9
 8001102:	003d      	movs	r5, r7
 8001104:	e784      	b.n	8001010 <__aeabi_fsub+0x1cc>
 8001106:	4662      	mov	r2, ip
 8001108:	2a00      	cmp	r2, #0
 800110a:	d18b      	bne.n	8001024 <__aeabi_fsub+0x1e0>
 800110c:	2e00      	cmp	r6, #0
 800110e:	d192      	bne.n	8001036 <__aeabi_fsub+0x1f2>
 8001110:	2780      	movs	r7, #128	; 0x80
 8001112:	2400      	movs	r4, #0
 8001114:	22ff      	movs	r2, #255	; 0xff
 8001116:	03ff      	lsls	r7, r7, #15
 8001118:	e6df      	b.n	8000eda <__aeabi_fsub+0x96>
 800111a:	4663      	mov	r3, ip
 800111c:	000c      	movs	r4, r1
 800111e:	1af7      	subs	r7, r6, r3
 8001120:	e6bf      	b.n	8000ea2 <__aeabi_fsub+0x5e>
 8001122:	0030      	movs	r0, r6
 8001124:	4460      	add	r0, ip
 8001126:	2501      	movs	r5, #1
 8001128:	0143      	lsls	r3, r0, #5
 800112a:	d400      	bmi.n	800112e <__aeabi_fsub+0x2ea>
 800112c:	e76c      	b.n	8001008 <__aeabi_fsub+0x1c4>
 800112e:	2502      	movs	r5, #2
 8001130:	e6f2      	b.n	8000f18 <__aeabi_fsub+0xd4>
 8001132:	4663      	mov	r3, ip
 8001134:	2501      	movs	r5, #1
 8001136:	1b98      	subs	r0, r3, r6
 8001138:	e6ae      	b.n	8000e98 <__aeabi_fsub+0x54>
 800113a:	2320      	movs	r3, #32
 800113c:	4664      	mov	r4, ip
 800113e:	4660      	mov	r0, ip
 8001140:	40fc      	lsrs	r4, r7
 8001142:	1bdf      	subs	r7, r3, r7
 8001144:	40b8      	lsls	r0, r7
 8001146:	1e43      	subs	r3, r0, #1
 8001148:	4198      	sbcs	r0, r3
 800114a:	4320      	orrs	r0, r4
 800114c:	e79f      	b.n	800108e <__aeabi_fsub+0x24a>
 800114e:	0005      	movs	r5, r0
 8001150:	e75e      	b.n	8001010 <__aeabi_fsub+0x1cc>
 8001152:	464b      	mov	r3, r9
 8001154:	e771      	b.n	800103a <__aeabi_fsub+0x1f6>
 8001156:	2320      	movs	r3, #32
 8001158:	4665      	mov	r5, ip
 800115a:	4660      	mov	r0, ip
 800115c:	40cd      	lsrs	r5, r1
 800115e:	1a59      	subs	r1, r3, r1
 8001160:	4088      	lsls	r0, r1
 8001162:	1e43      	subs	r3, r0, #1
 8001164:	4198      	sbcs	r0, r3
 8001166:	4328      	orrs	r0, r5
 8001168:	e71c      	b.n	8000fa4 <__aeabi_fsub+0x160>
 800116a:	4663      	mov	r3, ip
 800116c:	000c      	movs	r4, r1
 800116e:	2501      	movs	r5, #1
 8001170:	1af0      	subs	r0, r6, r3
 8001172:	e691      	b.n	8000e98 <__aeabi_fsub+0x54>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d095      	beq.n	80010a4 <__aeabi_fsub+0x260>
 8001178:	000c      	movs	r4, r1
 800117a:	464f      	mov	r7, r9
 800117c:	2200      	movs	r2, #0
 800117e:	e6ac      	b.n	8000eda <__aeabi_fsub+0x96>
 8001180:	464b      	mov	r3, r9
 8001182:	000d      	movs	r5, r1
 8001184:	e744      	b.n	8001010 <__aeabi_fsub+0x1cc>
 8001186:	464f      	mov	r7, r9
 8001188:	2200      	movs	r2, #0
 800118a:	e6a6      	b.n	8000eda <__aeabi_fsub+0x96>
 800118c:	fbffffff 	.word	0xfbffffff
 8001190:	7dffffff 	.word	0x7dffffff
 8001194:	2800      	cmp	r0, #0
 8001196:	d000      	beq.n	800119a <__aeabi_fsub+0x356>
 8001198:	e736      	b.n	8001008 <__aeabi_fsub+0x1c4>
 800119a:	2400      	movs	r4, #0
 800119c:	2700      	movs	r7, #0
 800119e:	e69c      	b.n	8000eda <__aeabi_fsub+0x96>

080011a0 <__aeabi_i2f>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d013      	beq.n	80011ce <__aeabi_i2f+0x2e>
 80011a6:	17c3      	asrs	r3, r0, #31
 80011a8:	18c6      	adds	r6, r0, r3
 80011aa:	405e      	eors	r6, r3
 80011ac:	0fc4      	lsrs	r4, r0, #31
 80011ae:	0030      	movs	r0, r6
 80011b0:	f001 fefa 	bl	8002fa8 <__clzsi2>
 80011b4:	239e      	movs	r3, #158	; 0x9e
 80011b6:	0005      	movs	r5, r0
 80011b8:	1a1b      	subs	r3, r3, r0
 80011ba:	2b96      	cmp	r3, #150	; 0x96
 80011bc:	dc0f      	bgt.n	80011de <__aeabi_i2f+0x3e>
 80011be:	2808      	cmp	r0, #8
 80011c0:	dd01      	ble.n	80011c6 <__aeabi_i2f+0x26>
 80011c2:	3d08      	subs	r5, #8
 80011c4:	40ae      	lsls	r6, r5
 80011c6:	0276      	lsls	r6, r6, #9
 80011c8:	0a76      	lsrs	r6, r6, #9
 80011ca:	b2d8      	uxtb	r0, r3
 80011cc:	e002      	b.n	80011d4 <__aeabi_i2f+0x34>
 80011ce:	2400      	movs	r4, #0
 80011d0:	2000      	movs	r0, #0
 80011d2:	2600      	movs	r6, #0
 80011d4:	05c0      	lsls	r0, r0, #23
 80011d6:	4330      	orrs	r0, r6
 80011d8:	07e4      	lsls	r4, r4, #31
 80011da:	4320      	orrs	r0, r4
 80011dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011de:	2b99      	cmp	r3, #153	; 0x99
 80011e0:	dd0c      	ble.n	80011fc <__aeabi_i2f+0x5c>
 80011e2:	2205      	movs	r2, #5
 80011e4:	0031      	movs	r1, r6
 80011e6:	1a12      	subs	r2, r2, r0
 80011e8:	40d1      	lsrs	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	0001      	movs	r1, r0
 80011ee:	0030      	movs	r0, r6
 80011f0:	311b      	adds	r1, #27
 80011f2:	4088      	lsls	r0, r1
 80011f4:	1e41      	subs	r1, r0, #1
 80011f6:	4188      	sbcs	r0, r1
 80011f8:	4302      	orrs	r2, r0
 80011fa:	0016      	movs	r6, r2
 80011fc:	2d05      	cmp	r5, #5
 80011fe:	dc12      	bgt.n	8001226 <__aeabi_i2f+0x86>
 8001200:	0031      	movs	r1, r6
 8001202:	4f0d      	ldr	r7, [pc, #52]	; (8001238 <__aeabi_i2f+0x98>)
 8001204:	4039      	ands	r1, r7
 8001206:	0772      	lsls	r2, r6, #29
 8001208:	d009      	beq.n	800121e <__aeabi_i2f+0x7e>
 800120a:	200f      	movs	r0, #15
 800120c:	4030      	ands	r0, r6
 800120e:	2804      	cmp	r0, #4
 8001210:	d005      	beq.n	800121e <__aeabi_i2f+0x7e>
 8001212:	3104      	adds	r1, #4
 8001214:	014a      	lsls	r2, r1, #5
 8001216:	d502      	bpl.n	800121e <__aeabi_i2f+0x7e>
 8001218:	239f      	movs	r3, #159	; 0x9f
 800121a:	4039      	ands	r1, r7
 800121c:	1b5b      	subs	r3, r3, r5
 800121e:	0189      	lsls	r1, r1, #6
 8001220:	0a4e      	lsrs	r6, r1, #9
 8001222:	b2d8      	uxtb	r0, r3
 8001224:	e7d6      	b.n	80011d4 <__aeabi_i2f+0x34>
 8001226:	1f6a      	subs	r2, r5, #5
 8001228:	4096      	lsls	r6, r2
 800122a:	0031      	movs	r1, r6
 800122c:	4f02      	ldr	r7, [pc, #8]	; (8001238 <__aeabi_i2f+0x98>)
 800122e:	4039      	ands	r1, r7
 8001230:	0772      	lsls	r2, r6, #29
 8001232:	d0f4      	beq.n	800121e <__aeabi_i2f+0x7e>
 8001234:	e7e9      	b.n	800120a <__aeabi_i2f+0x6a>
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	fbffffff 	.word	0xfbffffff

0800123c <__aeabi_dadd>:
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	464f      	mov	r7, r9
 8001240:	4646      	mov	r6, r8
 8001242:	46d6      	mov	lr, sl
 8001244:	000d      	movs	r5, r1
 8001246:	0004      	movs	r4, r0
 8001248:	b5c0      	push	{r6, r7, lr}
 800124a:	001f      	movs	r7, r3
 800124c:	0011      	movs	r1, r2
 800124e:	0328      	lsls	r0, r5, #12
 8001250:	0f62      	lsrs	r2, r4, #29
 8001252:	0a40      	lsrs	r0, r0, #9
 8001254:	4310      	orrs	r0, r2
 8001256:	007a      	lsls	r2, r7, #1
 8001258:	0d52      	lsrs	r2, r2, #21
 800125a:	00e3      	lsls	r3, r4, #3
 800125c:	033c      	lsls	r4, r7, #12
 800125e:	4691      	mov	r9, r2
 8001260:	0a64      	lsrs	r4, r4, #9
 8001262:	0ffa      	lsrs	r2, r7, #31
 8001264:	0f4f      	lsrs	r7, r1, #29
 8001266:	006e      	lsls	r6, r5, #1
 8001268:	4327      	orrs	r7, r4
 800126a:	4692      	mov	sl, r2
 800126c:	46b8      	mov	r8, r7
 800126e:	0d76      	lsrs	r6, r6, #21
 8001270:	0fed      	lsrs	r5, r5, #31
 8001272:	00c9      	lsls	r1, r1, #3
 8001274:	4295      	cmp	r5, r2
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x3e>
 8001278:	e099      	b.n	80013ae <__aeabi_dadd+0x172>
 800127a:	464c      	mov	r4, r9
 800127c:	1b34      	subs	r4, r6, r4
 800127e:	46a4      	mov	ip, r4
 8001280:	2c00      	cmp	r4, #0
 8001282:	dc00      	bgt.n	8001286 <__aeabi_dadd+0x4a>
 8001284:	e07c      	b.n	8001380 <__aeabi_dadd+0x144>
 8001286:	464a      	mov	r2, r9
 8001288:	2a00      	cmp	r2, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x52>
 800128c:	e0b8      	b.n	8001400 <__aeabi_dadd+0x1c4>
 800128e:	4ac5      	ldr	r2, [pc, #788]	; (80015a4 <__aeabi_dadd+0x368>)
 8001290:	4296      	cmp	r6, r2
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x5a>
 8001294:	e11c      	b.n	80014d0 <__aeabi_dadd+0x294>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	003c      	movs	r4, r7
 800129a:	0412      	lsls	r2, r2, #16
 800129c:	4314      	orrs	r4, r2
 800129e:	46a0      	mov	r8, r4
 80012a0:	4662      	mov	r2, ip
 80012a2:	2a38      	cmp	r2, #56	; 0x38
 80012a4:	dd00      	ble.n	80012a8 <__aeabi_dadd+0x6c>
 80012a6:	e161      	b.n	800156c <__aeabi_dadd+0x330>
 80012a8:	2a1f      	cmp	r2, #31
 80012aa:	dd00      	ble.n	80012ae <__aeabi_dadd+0x72>
 80012ac:	e1cc      	b.n	8001648 <__aeabi_dadd+0x40c>
 80012ae:	4664      	mov	r4, ip
 80012b0:	2220      	movs	r2, #32
 80012b2:	1b12      	subs	r2, r2, r4
 80012b4:	4644      	mov	r4, r8
 80012b6:	4094      	lsls	r4, r2
 80012b8:	000f      	movs	r7, r1
 80012ba:	46a1      	mov	r9, r4
 80012bc:	4664      	mov	r4, ip
 80012be:	4091      	lsls	r1, r2
 80012c0:	40e7      	lsrs	r7, r4
 80012c2:	464c      	mov	r4, r9
 80012c4:	1e4a      	subs	r2, r1, #1
 80012c6:	4191      	sbcs	r1, r2
 80012c8:	433c      	orrs	r4, r7
 80012ca:	4642      	mov	r2, r8
 80012cc:	4321      	orrs	r1, r4
 80012ce:	4664      	mov	r4, ip
 80012d0:	40e2      	lsrs	r2, r4
 80012d2:	1a80      	subs	r0, r0, r2
 80012d4:	1a5c      	subs	r4, r3, r1
 80012d6:	42a3      	cmp	r3, r4
 80012d8:	419b      	sbcs	r3, r3
 80012da:	425f      	negs	r7, r3
 80012dc:	1bc7      	subs	r7, r0, r7
 80012de:	023b      	lsls	r3, r7, #8
 80012e0:	d400      	bmi.n	80012e4 <__aeabi_dadd+0xa8>
 80012e2:	e0d0      	b.n	8001486 <__aeabi_dadd+0x24a>
 80012e4:	027f      	lsls	r7, r7, #9
 80012e6:	0a7f      	lsrs	r7, r7, #9
 80012e8:	2f00      	cmp	r7, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0xb2>
 80012ec:	e0ff      	b.n	80014ee <__aeabi_dadd+0x2b2>
 80012ee:	0038      	movs	r0, r7
 80012f0:	f001 fe5a 	bl	8002fa8 <__clzsi2>
 80012f4:	0001      	movs	r1, r0
 80012f6:	3908      	subs	r1, #8
 80012f8:	2320      	movs	r3, #32
 80012fa:	0022      	movs	r2, r4
 80012fc:	1a5b      	subs	r3, r3, r1
 80012fe:	408f      	lsls	r7, r1
 8001300:	40da      	lsrs	r2, r3
 8001302:	408c      	lsls	r4, r1
 8001304:	4317      	orrs	r7, r2
 8001306:	42b1      	cmp	r1, r6
 8001308:	da00      	bge.n	800130c <__aeabi_dadd+0xd0>
 800130a:	e0ff      	b.n	800150c <__aeabi_dadd+0x2d0>
 800130c:	1b89      	subs	r1, r1, r6
 800130e:	1c4b      	adds	r3, r1, #1
 8001310:	2b1f      	cmp	r3, #31
 8001312:	dd00      	ble.n	8001316 <__aeabi_dadd+0xda>
 8001314:	e0a8      	b.n	8001468 <__aeabi_dadd+0x22c>
 8001316:	2220      	movs	r2, #32
 8001318:	0039      	movs	r1, r7
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	0020      	movs	r0, r4
 800131e:	4094      	lsls	r4, r2
 8001320:	4091      	lsls	r1, r2
 8001322:	40d8      	lsrs	r0, r3
 8001324:	1e62      	subs	r2, r4, #1
 8001326:	4194      	sbcs	r4, r2
 8001328:	40df      	lsrs	r7, r3
 800132a:	2600      	movs	r6, #0
 800132c:	4301      	orrs	r1, r0
 800132e:	430c      	orrs	r4, r1
 8001330:	0763      	lsls	r3, r4, #29
 8001332:	d009      	beq.n	8001348 <__aeabi_dadd+0x10c>
 8001334:	230f      	movs	r3, #15
 8001336:	4023      	ands	r3, r4
 8001338:	2b04      	cmp	r3, #4
 800133a:	d005      	beq.n	8001348 <__aeabi_dadd+0x10c>
 800133c:	1d23      	adds	r3, r4, #4
 800133e:	42a3      	cmp	r3, r4
 8001340:	41a4      	sbcs	r4, r4
 8001342:	4264      	negs	r4, r4
 8001344:	193f      	adds	r7, r7, r4
 8001346:	001c      	movs	r4, r3
 8001348:	023b      	lsls	r3, r7, #8
 800134a:	d400      	bmi.n	800134e <__aeabi_dadd+0x112>
 800134c:	e09e      	b.n	800148c <__aeabi_dadd+0x250>
 800134e:	4b95      	ldr	r3, [pc, #596]	; (80015a4 <__aeabi_dadd+0x368>)
 8001350:	3601      	adds	r6, #1
 8001352:	429e      	cmp	r6, r3
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x11c>
 8001356:	e0b7      	b.n	80014c8 <__aeabi_dadd+0x28c>
 8001358:	4a93      	ldr	r2, [pc, #588]	; (80015a8 <__aeabi_dadd+0x36c>)
 800135a:	08e4      	lsrs	r4, r4, #3
 800135c:	4017      	ands	r7, r2
 800135e:	077b      	lsls	r3, r7, #29
 8001360:	0571      	lsls	r1, r6, #21
 8001362:	027f      	lsls	r7, r7, #9
 8001364:	4323      	orrs	r3, r4
 8001366:	0b3f      	lsrs	r7, r7, #12
 8001368:	0d4a      	lsrs	r2, r1, #21
 800136a:	0512      	lsls	r2, r2, #20
 800136c:	433a      	orrs	r2, r7
 800136e:	07ed      	lsls	r5, r5, #31
 8001370:	432a      	orrs	r2, r5
 8001372:	0018      	movs	r0, r3
 8001374:	0011      	movs	r1, r2
 8001376:	bce0      	pop	{r5, r6, r7}
 8001378:	46ba      	mov	sl, r7
 800137a:	46b1      	mov	r9, r6
 800137c:	46a8      	mov	r8, r5
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001380:	2c00      	cmp	r4, #0
 8001382:	d04b      	beq.n	800141c <__aeabi_dadd+0x1e0>
 8001384:	464c      	mov	r4, r9
 8001386:	1ba4      	subs	r4, r4, r6
 8001388:	46a4      	mov	ip, r4
 800138a:	2e00      	cmp	r6, #0
 800138c:	d000      	beq.n	8001390 <__aeabi_dadd+0x154>
 800138e:	e123      	b.n	80015d8 <__aeabi_dadd+0x39c>
 8001390:	0004      	movs	r4, r0
 8001392:	431c      	orrs	r4, r3
 8001394:	d100      	bne.n	8001398 <__aeabi_dadd+0x15c>
 8001396:	e1af      	b.n	80016f8 <__aeabi_dadd+0x4bc>
 8001398:	4662      	mov	r2, ip
 800139a:	1e54      	subs	r4, r2, #1
 800139c:	2a01      	cmp	r2, #1
 800139e:	d100      	bne.n	80013a2 <__aeabi_dadd+0x166>
 80013a0:	e215      	b.n	80017ce <__aeabi_dadd+0x592>
 80013a2:	4d80      	ldr	r5, [pc, #512]	; (80015a4 <__aeabi_dadd+0x368>)
 80013a4:	45ac      	cmp	ip, r5
 80013a6:	d100      	bne.n	80013aa <__aeabi_dadd+0x16e>
 80013a8:	e1c8      	b.n	800173c <__aeabi_dadd+0x500>
 80013aa:	46a4      	mov	ip, r4
 80013ac:	e11b      	b.n	80015e6 <__aeabi_dadd+0x3aa>
 80013ae:	464a      	mov	r2, r9
 80013b0:	1ab2      	subs	r2, r6, r2
 80013b2:	4694      	mov	ip, r2
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	dc00      	bgt.n	80013ba <__aeabi_dadd+0x17e>
 80013b8:	e0ac      	b.n	8001514 <__aeabi_dadd+0x2d8>
 80013ba:	464a      	mov	r2, r9
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d043      	beq.n	8001448 <__aeabi_dadd+0x20c>
 80013c0:	4a78      	ldr	r2, [pc, #480]	; (80015a4 <__aeabi_dadd+0x368>)
 80013c2:	4296      	cmp	r6, r2
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x18c>
 80013c6:	e1af      	b.n	8001728 <__aeabi_dadd+0x4ec>
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	003c      	movs	r4, r7
 80013cc:	0412      	lsls	r2, r2, #16
 80013ce:	4314      	orrs	r4, r2
 80013d0:	46a0      	mov	r8, r4
 80013d2:	4662      	mov	r2, ip
 80013d4:	2a38      	cmp	r2, #56	; 0x38
 80013d6:	dc67      	bgt.n	80014a8 <__aeabi_dadd+0x26c>
 80013d8:	2a1f      	cmp	r2, #31
 80013da:	dc00      	bgt.n	80013de <__aeabi_dadd+0x1a2>
 80013dc:	e15f      	b.n	800169e <__aeabi_dadd+0x462>
 80013de:	4647      	mov	r7, r8
 80013e0:	3a20      	subs	r2, #32
 80013e2:	40d7      	lsrs	r7, r2
 80013e4:	4662      	mov	r2, ip
 80013e6:	2a20      	cmp	r2, #32
 80013e8:	d005      	beq.n	80013f6 <__aeabi_dadd+0x1ba>
 80013ea:	4664      	mov	r4, ip
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	1b12      	subs	r2, r2, r4
 80013f0:	4644      	mov	r4, r8
 80013f2:	4094      	lsls	r4, r2
 80013f4:	4321      	orrs	r1, r4
 80013f6:	1e4a      	subs	r2, r1, #1
 80013f8:	4191      	sbcs	r1, r2
 80013fa:	000c      	movs	r4, r1
 80013fc:	433c      	orrs	r4, r7
 80013fe:	e057      	b.n	80014b0 <__aeabi_dadd+0x274>
 8001400:	003a      	movs	r2, r7
 8001402:	430a      	orrs	r2, r1
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x1cc>
 8001406:	e105      	b.n	8001614 <__aeabi_dadd+0x3d8>
 8001408:	0022      	movs	r2, r4
 800140a:	3a01      	subs	r2, #1
 800140c:	2c01      	cmp	r4, #1
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x1d6>
 8001410:	e182      	b.n	8001718 <__aeabi_dadd+0x4dc>
 8001412:	4c64      	ldr	r4, [pc, #400]	; (80015a4 <__aeabi_dadd+0x368>)
 8001414:	45a4      	cmp	ip, r4
 8001416:	d05b      	beq.n	80014d0 <__aeabi_dadd+0x294>
 8001418:	4694      	mov	ip, r2
 800141a:	e741      	b.n	80012a0 <__aeabi_dadd+0x64>
 800141c:	4c63      	ldr	r4, [pc, #396]	; (80015ac <__aeabi_dadd+0x370>)
 800141e:	1c77      	adds	r7, r6, #1
 8001420:	4227      	tst	r7, r4
 8001422:	d000      	beq.n	8001426 <__aeabi_dadd+0x1ea>
 8001424:	e0c4      	b.n	80015b0 <__aeabi_dadd+0x374>
 8001426:	0004      	movs	r4, r0
 8001428:	431c      	orrs	r4, r3
 800142a:	2e00      	cmp	r6, #0
 800142c:	d000      	beq.n	8001430 <__aeabi_dadd+0x1f4>
 800142e:	e169      	b.n	8001704 <__aeabi_dadd+0x4c8>
 8001430:	2c00      	cmp	r4, #0
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x1fa>
 8001434:	e1bf      	b.n	80017b6 <__aeabi_dadd+0x57a>
 8001436:	4644      	mov	r4, r8
 8001438:	430c      	orrs	r4, r1
 800143a:	d000      	beq.n	800143e <__aeabi_dadd+0x202>
 800143c:	e1d0      	b.n	80017e0 <__aeabi_dadd+0x5a4>
 800143e:	0742      	lsls	r2, r0, #29
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	4313      	orrs	r3, r2
 8001444:	08c0      	lsrs	r0, r0, #3
 8001446:	e029      	b.n	800149c <__aeabi_dadd+0x260>
 8001448:	003a      	movs	r2, r7
 800144a:	430a      	orrs	r2, r1
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x214>
 800144e:	e170      	b.n	8001732 <__aeabi_dadd+0x4f6>
 8001450:	4662      	mov	r2, ip
 8001452:	4664      	mov	r4, ip
 8001454:	3a01      	subs	r2, #1
 8001456:	2c01      	cmp	r4, #1
 8001458:	d100      	bne.n	800145c <__aeabi_dadd+0x220>
 800145a:	e0e0      	b.n	800161e <__aeabi_dadd+0x3e2>
 800145c:	4c51      	ldr	r4, [pc, #324]	; (80015a4 <__aeabi_dadd+0x368>)
 800145e:	45a4      	cmp	ip, r4
 8001460:	d100      	bne.n	8001464 <__aeabi_dadd+0x228>
 8001462:	e161      	b.n	8001728 <__aeabi_dadd+0x4ec>
 8001464:	4694      	mov	ip, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_dadd+0x196>
 8001468:	003a      	movs	r2, r7
 800146a:	391f      	subs	r1, #31
 800146c:	40ca      	lsrs	r2, r1
 800146e:	0011      	movs	r1, r2
 8001470:	2b20      	cmp	r3, #32
 8001472:	d003      	beq.n	800147c <__aeabi_dadd+0x240>
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	409f      	lsls	r7, r3
 800147a:	433c      	orrs	r4, r7
 800147c:	1e63      	subs	r3, r4, #1
 800147e:	419c      	sbcs	r4, r3
 8001480:	2700      	movs	r7, #0
 8001482:	2600      	movs	r6, #0
 8001484:	430c      	orrs	r4, r1
 8001486:	0763      	lsls	r3, r4, #29
 8001488:	d000      	beq.n	800148c <__aeabi_dadd+0x250>
 800148a:	e753      	b.n	8001334 <__aeabi_dadd+0xf8>
 800148c:	46b4      	mov	ip, r6
 800148e:	08e4      	lsrs	r4, r4, #3
 8001490:	077b      	lsls	r3, r7, #29
 8001492:	4323      	orrs	r3, r4
 8001494:	08f8      	lsrs	r0, r7, #3
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <__aeabi_dadd+0x368>)
 8001498:	4594      	cmp	ip, r2
 800149a:	d01d      	beq.n	80014d8 <__aeabi_dadd+0x29c>
 800149c:	4662      	mov	r2, ip
 800149e:	0307      	lsls	r7, r0, #12
 80014a0:	0552      	lsls	r2, r2, #21
 80014a2:	0b3f      	lsrs	r7, r7, #12
 80014a4:	0d52      	lsrs	r2, r2, #21
 80014a6:	e760      	b.n	800136a <__aeabi_dadd+0x12e>
 80014a8:	4644      	mov	r4, r8
 80014aa:	430c      	orrs	r4, r1
 80014ac:	1e62      	subs	r2, r4, #1
 80014ae:	4194      	sbcs	r4, r2
 80014b0:	18e4      	adds	r4, r4, r3
 80014b2:	429c      	cmp	r4, r3
 80014b4:	419b      	sbcs	r3, r3
 80014b6:	425f      	negs	r7, r3
 80014b8:	183f      	adds	r7, r7, r0
 80014ba:	023b      	lsls	r3, r7, #8
 80014bc:	d5e3      	bpl.n	8001486 <__aeabi_dadd+0x24a>
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <__aeabi_dadd+0x368>)
 80014c0:	3601      	adds	r6, #1
 80014c2:	429e      	cmp	r6, r3
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dadd+0x28c>
 80014c6:	e0b5      	b.n	8001634 <__aeabi_dadd+0x3f8>
 80014c8:	0032      	movs	r2, r6
 80014ca:	2700      	movs	r7, #0
 80014cc:	2300      	movs	r3, #0
 80014ce:	e74c      	b.n	800136a <__aeabi_dadd+0x12e>
 80014d0:	0742      	lsls	r2, r0, #29
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	08c0      	lsrs	r0, r0, #3
 80014d8:	001a      	movs	r2, r3
 80014da:	4302      	orrs	r2, r0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dadd+0x2a4>
 80014de:	e1e1      	b.n	80018a4 <__aeabi_dadd+0x668>
 80014e0:	2780      	movs	r7, #128	; 0x80
 80014e2:	033f      	lsls	r7, r7, #12
 80014e4:	4307      	orrs	r7, r0
 80014e6:	033f      	lsls	r7, r7, #12
 80014e8:	4a2e      	ldr	r2, [pc, #184]	; (80015a4 <__aeabi_dadd+0x368>)
 80014ea:	0b3f      	lsrs	r7, r7, #12
 80014ec:	e73d      	b.n	800136a <__aeabi_dadd+0x12e>
 80014ee:	0020      	movs	r0, r4
 80014f0:	f001 fd5a 	bl	8002fa8 <__clzsi2>
 80014f4:	0001      	movs	r1, r0
 80014f6:	3118      	adds	r1, #24
 80014f8:	291f      	cmp	r1, #31
 80014fa:	dc00      	bgt.n	80014fe <__aeabi_dadd+0x2c2>
 80014fc:	e6fc      	b.n	80012f8 <__aeabi_dadd+0xbc>
 80014fe:	3808      	subs	r0, #8
 8001500:	4084      	lsls	r4, r0
 8001502:	0027      	movs	r7, r4
 8001504:	2400      	movs	r4, #0
 8001506:	42b1      	cmp	r1, r6
 8001508:	db00      	blt.n	800150c <__aeabi_dadd+0x2d0>
 800150a:	e6ff      	b.n	800130c <__aeabi_dadd+0xd0>
 800150c:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <__aeabi_dadd+0x36c>)
 800150e:	1a76      	subs	r6, r6, r1
 8001510:	4017      	ands	r7, r2
 8001512:	e70d      	b.n	8001330 <__aeabi_dadd+0xf4>
 8001514:	2a00      	cmp	r2, #0
 8001516:	d02f      	beq.n	8001578 <__aeabi_dadd+0x33c>
 8001518:	464a      	mov	r2, r9
 800151a:	1b92      	subs	r2, r2, r6
 800151c:	4694      	mov	ip, r2
 800151e:	2e00      	cmp	r6, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x2e8>
 8001522:	e0ad      	b.n	8001680 <__aeabi_dadd+0x444>
 8001524:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <__aeabi_dadd+0x368>)
 8001526:	4591      	cmp	r9, r2
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x2f0>
 800152a:	e10f      	b.n	800174c <__aeabi_dadd+0x510>
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	0412      	lsls	r2, r2, #16
 8001530:	4310      	orrs	r0, r2
 8001532:	4662      	mov	r2, ip
 8001534:	2a38      	cmp	r2, #56	; 0x38
 8001536:	dd00      	ble.n	800153a <__aeabi_dadd+0x2fe>
 8001538:	e10f      	b.n	800175a <__aeabi_dadd+0x51e>
 800153a:	2a1f      	cmp	r2, #31
 800153c:	dd00      	ble.n	8001540 <__aeabi_dadd+0x304>
 800153e:	e180      	b.n	8001842 <__aeabi_dadd+0x606>
 8001540:	4664      	mov	r4, ip
 8001542:	2220      	movs	r2, #32
 8001544:	001e      	movs	r6, r3
 8001546:	1b12      	subs	r2, r2, r4
 8001548:	4667      	mov	r7, ip
 800154a:	0004      	movs	r4, r0
 800154c:	4093      	lsls	r3, r2
 800154e:	4094      	lsls	r4, r2
 8001550:	40fe      	lsrs	r6, r7
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	4193      	sbcs	r3, r2
 8001556:	40f8      	lsrs	r0, r7
 8001558:	4334      	orrs	r4, r6
 800155a:	431c      	orrs	r4, r3
 800155c:	4480      	add	r8, r0
 800155e:	1864      	adds	r4, r4, r1
 8001560:	428c      	cmp	r4, r1
 8001562:	41bf      	sbcs	r7, r7
 8001564:	427f      	negs	r7, r7
 8001566:	464e      	mov	r6, r9
 8001568:	4447      	add	r7, r8
 800156a:	e7a6      	b.n	80014ba <__aeabi_dadd+0x27e>
 800156c:	4642      	mov	r2, r8
 800156e:	430a      	orrs	r2, r1
 8001570:	0011      	movs	r1, r2
 8001572:	1e4a      	subs	r2, r1, #1
 8001574:	4191      	sbcs	r1, r2
 8001576:	e6ad      	b.n	80012d4 <__aeabi_dadd+0x98>
 8001578:	4c0c      	ldr	r4, [pc, #48]	; (80015ac <__aeabi_dadd+0x370>)
 800157a:	1c72      	adds	r2, r6, #1
 800157c:	4222      	tst	r2, r4
 800157e:	d000      	beq.n	8001582 <__aeabi_dadd+0x346>
 8001580:	e0a1      	b.n	80016c6 <__aeabi_dadd+0x48a>
 8001582:	0002      	movs	r2, r0
 8001584:	431a      	orrs	r2, r3
 8001586:	2e00      	cmp	r6, #0
 8001588:	d000      	beq.n	800158c <__aeabi_dadd+0x350>
 800158a:	e0fa      	b.n	8001782 <__aeabi_dadd+0x546>
 800158c:	2a00      	cmp	r2, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x356>
 8001590:	e145      	b.n	800181e <__aeabi_dadd+0x5e2>
 8001592:	003a      	movs	r2, r7
 8001594:	430a      	orrs	r2, r1
 8001596:	d000      	beq.n	800159a <__aeabi_dadd+0x35e>
 8001598:	e146      	b.n	8001828 <__aeabi_dadd+0x5ec>
 800159a:	0742      	lsls	r2, r0, #29
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	4313      	orrs	r3, r2
 80015a0:	08c0      	lsrs	r0, r0, #3
 80015a2:	e77b      	b.n	800149c <__aeabi_dadd+0x260>
 80015a4:	000007ff 	.word	0x000007ff
 80015a8:	ff7fffff 	.word	0xff7fffff
 80015ac:	000007fe 	.word	0x000007fe
 80015b0:	4647      	mov	r7, r8
 80015b2:	1a5c      	subs	r4, r3, r1
 80015b4:	1bc2      	subs	r2, r0, r7
 80015b6:	42a3      	cmp	r3, r4
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	427f      	negs	r7, r7
 80015bc:	46b9      	mov	r9, r7
 80015be:	0017      	movs	r7, r2
 80015c0:	464a      	mov	r2, r9
 80015c2:	1abf      	subs	r7, r7, r2
 80015c4:	023a      	lsls	r2, r7, #8
 80015c6:	d500      	bpl.n	80015ca <__aeabi_dadd+0x38e>
 80015c8:	e08d      	b.n	80016e6 <__aeabi_dadd+0x4aa>
 80015ca:	0023      	movs	r3, r4
 80015cc:	433b      	orrs	r3, r7
 80015ce:	d000      	beq.n	80015d2 <__aeabi_dadd+0x396>
 80015d0:	e68a      	b.n	80012e8 <__aeabi_dadd+0xac>
 80015d2:	2000      	movs	r0, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	e761      	b.n	800149c <__aeabi_dadd+0x260>
 80015d8:	4cb4      	ldr	r4, [pc, #720]	; (80018ac <__aeabi_dadd+0x670>)
 80015da:	45a1      	cmp	r9, r4
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dadd+0x3a4>
 80015de:	e0ad      	b.n	800173c <__aeabi_dadd+0x500>
 80015e0:	2480      	movs	r4, #128	; 0x80
 80015e2:	0424      	lsls	r4, r4, #16
 80015e4:	4320      	orrs	r0, r4
 80015e6:	4664      	mov	r4, ip
 80015e8:	2c38      	cmp	r4, #56	; 0x38
 80015ea:	dc3d      	bgt.n	8001668 <__aeabi_dadd+0x42c>
 80015ec:	4662      	mov	r2, ip
 80015ee:	2c1f      	cmp	r4, #31
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dadd+0x3b8>
 80015f2:	e0b7      	b.n	8001764 <__aeabi_dadd+0x528>
 80015f4:	2520      	movs	r5, #32
 80015f6:	001e      	movs	r6, r3
 80015f8:	1b2d      	subs	r5, r5, r4
 80015fa:	0004      	movs	r4, r0
 80015fc:	40ab      	lsls	r3, r5
 80015fe:	40ac      	lsls	r4, r5
 8001600:	40d6      	lsrs	r6, r2
 8001602:	40d0      	lsrs	r0, r2
 8001604:	4642      	mov	r2, r8
 8001606:	1e5d      	subs	r5, r3, #1
 8001608:	41ab      	sbcs	r3, r5
 800160a:	4334      	orrs	r4, r6
 800160c:	1a12      	subs	r2, r2, r0
 800160e:	4690      	mov	r8, r2
 8001610:	4323      	orrs	r3, r4
 8001612:	e02c      	b.n	800166e <__aeabi_dadd+0x432>
 8001614:	0742      	lsls	r2, r0, #29
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	4313      	orrs	r3, r2
 800161a:	08c0      	lsrs	r0, r0, #3
 800161c:	e73b      	b.n	8001496 <__aeabi_dadd+0x25a>
 800161e:	185c      	adds	r4, r3, r1
 8001620:	429c      	cmp	r4, r3
 8001622:	419b      	sbcs	r3, r3
 8001624:	4440      	add	r0, r8
 8001626:	425b      	negs	r3, r3
 8001628:	18c7      	adds	r7, r0, r3
 800162a:	2601      	movs	r6, #1
 800162c:	023b      	lsls	r3, r7, #8
 800162e:	d400      	bmi.n	8001632 <__aeabi_dadd+0x3f6>
 8001630:	e729      	b.n	8001486 <__aeabi_dadd+0x24a>
 8001632:	2602      	movs	r6, #2
 8001634:	4a9e      	ldr	r2, [pc, #632]	; (80018b0 <__aeabi_dadd+0x674>)
 8001636:	0863      	lsrs	r3, r4, #1
 8001638:	4017      	ands	r7, r2
 800163a:	2201      	movs	r2, #1
 800163c:	4014      	ands	r4, r2
 800163e:	431c      	orrs	r4, r3
 8001640:	07fb      	lsls	r3, r7, #31
 8001642:	431c      	orrs	r4, r3
 8001644:	087f      	lsrs	r7, r7, #1
 8001646:	e673      	b.n	8001330 <__aeabi_dadd+0xf4>
 8001648:	4644      	mov	r4, r8
 800164a:	3a20      	subs	r2, #32
 800164c:	40d4      	lsrs	r4, r2
 800164e:	4662      	mov	r2, ip
 8001650:	2a20      	cmp	r2, #32
 8001652:	d005      	beq.n	8001660 <__aeabi_dadd+0x424>
 8001654:	4667      	mov	r7, ip
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	1bd2      	subs	r2, r2, r7
 800165a:	4647      	mov	r7, r8
 800165c:	4097      	lsls	r7, r2
 800165e:	4339      	orrs	r1, r7
 8001660:	1e4a      	subs	r2, r1, #1
 8001662:	4191      	sbcs	r1, r2
 8001664:	4321      	orrs	r1, r4
 8001666:	e635      	b.n	80012d4 <__aeabi_dadd+0x98>
 8001668:	4303      	orrs	r3, r0
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	4183      	sbcs	r3, r0
 800166e:	1acc      	subs	r4, r1, r3
 8001670:	42a1      	cmp	r1, r4
 8001672:	41bf      	sbcs	r7, r7
 8001674:	4643      	mov	r3, r8
 8001676:	427f      	negs	r7, r7
 8001678:	4655      	mov	r5, sl
 800167a:	464e      	mov	r6, r9
 800167c:	1bdf      	subs	r7, r3, r7
 800167e:	e62e      	b.n	80012de <__aeabi_dadd+0xa2>
 8001680:	0002      	movs	r2, r0
 8001682:	431a      	orrs	r2, r3
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x44c>
 8001686:	e0bd      	b.n	8001804 <__aeabi_dadd+0x5c8>
 8001688:	4662      	mov	r2, ip
 800168a:	4664      	mov	r4, ip
 800168c:	3a01      	subs	r2, #1
 800168e:	2c01      	cmp	r4, #1
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x458>
 8001692:	e0e5      	b.n	8001860 <__aeabi_dadd+0x624>
 8001694:	4c85      	ldr	r4, [pc, #532]	; (80018ac <__aeabi_dadd+0x670>)
 8001696:	45a4      	cmp	ip, r4
 8001698:	d058      	beq.n	800174c <__aeabi_dadd+0x510>
 800169a:	4694      	mov	ip, r2
 800169c:	e749      	b.n	8001532 <__aeabi_dadd+0x2f6>
 800169e:	4664      	mov	r4, ip
 80016a0:	2220      	movs	r2, #32
 80016a2:	1b12      	subs	r2, r2, r4
 80016a4:	4644      	mov	r4, r8
 80016a6:	4094      	lsls	r4, r2
 80016a8:	000f      	movs	r7, r1
 80016aa:	46a1      	mov	r9, r4
 80016ac:	4664      	mov	r4, ip
 80016ae:	4091      	lsls	r1, r2
 80016b0:	40e7      	lsrs	r7, r4
 80016b2:	464c      	mov	r4, r9
 80016b4:	1e4a      	subs	r2, r1, #1
 80016b6:	4191      	sbcs	r1, r2
 80016b8:	433c      	orrs	r4, r7
 80016ba:	4642      	mov	r2, r8
 80016bc:	430c      	orrs	r4, r1
 80016be:	4661      	mov	r1, ip
 80016c0:	40ca      	lsrs	r2, r1
 80016c2:	1880      	adds	r0, r0, r2
 80016c4:	e6f4      	b.n	80014b0 <__aeabi_dadd+0x274>
 80016c6:	4c79      	ldr	r4, [pc, #484]	; (80018ac <__aeabi_dadd+0x670>)
 80016c8:	42a2      	cmp	r2, r4
 80016ca:	d100      	bne.n	80016ce <__aeabi_dadd+0x492>
 80016cc:	e6fd      	b.n	80014ca <__aeabi_dadd+0x28e>
 80016ce:	1859      	adds	r1, r3, r1
 80016d0:	4299      	cmp	r1, r3
 80016d2:	419b      	sbcs	r3, r3
 80016d4:	4440      	add	r0, r8
 80016d6:	425f      	negs	r7, r3
 80016d8:	19c7      	adds	r7, r0, r7
 80016da:	07fc      	lsls	r4, r7, #31
 80016dc:	0849      	lsrs	r1, r1, #1
 80016de:	0016      	movs	r6, r2
 80016e0:	430c      	orrs	r4, r1
 80016e2:	087f      	lsrs	r7, r7, #1
 80016e4:	e6cf      	b.n	8001486 <__aeabi_dadd+0x24a>
 80016e6:	1acc      	subs	r4, r1, r3
 80016e8:	42a1      	cmp	r1, r4
 80016ea:	41bf      	sbcs	r7, r7
 80016ec:	4643      	mov	r3, r8
 80016ee:	427f      	negs	r7, r7
 80016f0:	1a18      	subs	r0, r3, r0
 80016f2:	4655      	mov	r5, sl
 80016f4:	1bc7      	subs	r7, r0, r7
 80016f6:	e5f7      	b.n	80012e8 <__aeabi_dadd+0xac>
 80016f8:	08c9      	lsrs	r1, r1, #3
 80016fa:	077b      	lsls	r3, r7, #29
 80016fc:	4655      	mov	r5, sl
 80016fe:	430b      	orrs	r3, r1
 8001700:	08f8      	lsrs	r0, r7, #3
 8001702:	e6c8      	b.n	8001496 <__aeabi_dadd+0x25a>
 8001704:	2c00      	cmp	r4, #0
 8001706:	d000      	beq.n	800170a <__aeabi_dadd+0x4ce>
 8001708:	e081      	b.n	800180e <__aeabi_dadd+0x5d2>
 800170a:	4643      	mov	r3, r8
 800170c:	430b      	orrs	r3, r1
 800170e:	d115      	bne.n	800173c <__aeabi_dadd+0x500>
 8001710:	2080      	movs	r0, #128	; 0x80
 8001712:	2500      	movs	r5, #0
 8001714:	0300      	lsls	r0, r0, #12
 8001716:	e6e3      	b.n	80014e0 <__aeabi_dadd+0x2a4>
 8001718:	1a5c      	subs	r4, r3, r1
 800171a:	42a3      	cmp	r3, r4
 800171c:	419b      	sbcs	r3, r3
 800171e:	1bc7      	subs	r7, r0, r7
 8001720:	425b      	negs	r3, r3
 8001722:	2601      	movs	r6, #1
 8001724:	1aff      	subs	r7, r7, r3
 8001726:	e5da      	b.n	80012de <__aeabi_dadd+0xa2>
 8001728:	0742      	lsls	r2, r0, #29
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	4313      	orrs	r3, r2
 800172e:	08c0      	lsrs	r0, r0, #3
 8001730:	e6d2      	b.n	80014d8 <__aeabi_dadd+0x29c>
 8001732:	0742      	lsls	r2, r0, #29
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	4313      	orrs	r3, r2
 8001738:	08c0      	lsrs	r0, r0, #3
 800173a:	e6ac      	b.n	8001496 <__aeabi_dadd+0x25a>
 800173c:	4643      	mov	r3, r8
 800173e:	4642      	mov	r2, r8
 8001740:	08c9      	lsrs	r1, r1, #3
 8001742:	075b      	lsls	r3, r3, #29
 8001744:	4655      	mov	r5, sl
 8001746:	430b      	orrs	r3, r1
 8001748:	08d0      	lsrs	r0, r2, #3
 800174a:	e6c5      	b.n	80014d8 <__aeabi_dadd+0x29c>
 800174c:	4643      	mov	r3, r8
 800174e:	4642      	mov	r2, r8
 8001750:	075b      	lsls	r3, r3, #29
 8001752:	08c9      	lsrs	r1, r1, #3
 8001754:	430b      	orrs	r3, r1
 8001756:	08d0      	lsrs	r0, r2, #3
 8001758:	e6be      	b.n	80014d8 <__aeabi_dadd+0x29c>
 800175a:	4303      	orrs	r3, r0
 800175c:	001c      	movs	r4, r3
 800175e:	1e63      	subs	r3, r4, #1
 8001760:	419c      	sbcs	r4, r3
 8001762:	e6fc      	b.n	800155e <__aeabi_dadd+0x322>
 8001764:	0002      	movs	r2, r0
 8001766:	3c20      	subs	r4, #32
 8001768:	40e2      	lsrs	r2, r4
 800176a:	0014      	movs	r4, r2
 800176c:	4662      	mov	r2, ip
 800176e:	2a20      	cmp	r2, #32
 8001770:	d003      	beq.n	800177a <__aeabi_dadd+0x53e>
 8001772:	2540      	movs	r5, #64	; 0x40
 8001774:	1aad      	subs	r5, r5, r2
 8001776:	40a8      	lsls	r0, r5
 8001778:	4303      	orrs	r3, r0
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	4183      	sbcs	r3, r0
 800177e:	4323      	orrs	r3, r4
 8001780:	e775      	b.n	800166e <__aeabi_dadd+0x432>
 8001782:	2a00      	cmp	r2, #0
 8001784:	d0e2      	beq.n	800174c <__aeabi_dadd+0x510>
 8001786:	003a      	movs	r2, r7
 8001788:	430a      	orrs	r2, r1
 800178a:	d0cd      	beq.n	8001728 <__aeabi_dadd+0x4ec>
 800178c:	0742      	lsls	r2, r0, #29
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	4313      	orrs	r3, r2
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	08c0      	lsrs	r0, r0, #3
 8001796:	0312      	lsls	r2, r2, #12
 8001798:	4210      	tst	r0, r2
 800179a:	d006      	beq.n	80017aa <__aeabi_dadd+0x56e>
 800179c:	08fc      	lsrs	r4, r7, #3
 800179e:	4214      	tst	r4, r2
 80017a0:	d103      	bne.n	80017aa <__aeabi_dadd+0x56e>
 80017a2:	0020      	movs	r0, r4
 80017a4:	08cb      	lsrs	r3, r1, #3
 80017a6:	077a      	lsls	r2, r7, #29
 80017a8:	4313      	orrs	r3, r2
 80017aa:	0f5a      	lsrs	r2, r3, #29
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	0752      	lsls	r2, r2, #29
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	e690      	b.n	80014d8 <__aeabi_dadd+0x29c>
 80017b6:	4643      	mov	r3, r8
 80017b8:	430b      	orrs	r3, r1
 80017ba:	d100      	bne.n	80017be <__aeabi_dadd+0x582>
 80017bc:	e709      	b.n	80015d2 <__aeabi_dadd+0x396>
 80017be:	4643      	mov	r3, r8
 80017c0:	4642      	mov	r2, r8
 80017c2:	08c9      	lsrs	r1, r1, #3
 80017c4:	075b      	lsls	r3, r3, #29
 80017c6:	4655      	mov	r5, sl
 80017c8:	430b      	orrs	r3, r1
 80017ca:	08d0      	lsrs	r0, r2, #3
 80017cc:	e666      	b.n	800149c <__aeabi_dadd+0x260>
 80017ce:	1acc      	subs	r4, r1, r3
 80017d0:	42a1      	cmp	r1, r4
 80017d2:	4189      	sbcs	r1, r1
 80017d4:	1a3f      	subs	r7, r7, r0
 80017d6:	4249      	negs	r1, r1
 80017d8:	4655      	mov	r5, sl
 80017da:	2601      	movs	r6, #1
 80017dc:	1a7f      	subs	r7, r7, r1
 80017de:	e57e      	b.n	80012de <__aeabi_dadd+0xa2>
 80017e0:	4642      	mov	r2, r8
 80017e2:	1a5c      	subs	r4, r3, r1
 80017e4:	1a87      	subs	r7, r0, r2
 80017e6:	42a3      	cmp	r3, r4
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	4252      	negs	r2, r2
 80017ec:	1abf      	subs	r7, r7, r2
 80017ee:	023a      	lsls	r2, r7, #8
 80017f0:	d53d      	bpl.n	800186e <__aeabi_dadd+0x632>
 80017f2:	1acc      	subs	r4, r1, r3
 80017f4:	42a1      	cmp	r1, r4
 80017f6:	4189      	sbcs	r1, r1
 80017f8:	4643      	mov	r3, r8
 80017fa:	4249      	negs	r1, r1
 80017fc:	1a1f      	subs	r7, r3, r0
 80017fe:	4655      	mov	r5, sl
 8001800:	1a7f      	subs	r7, r7, r1
 8001802:	e595      	b.n	8001330 <__aeabi_dadd+0xf4>
 8001804:	077b      	lsls	r3, r7, #29
 8001806:	08c9      	lsrs	r1, r1, #3
 8001808:	430b      	orrs	r3, r1
 800180a:	08f8      	lsrs	r0, r7, #3
 800180c:	e643      	b.n	8001496 <__aeabi_dadd+0x25a>
 800180e:	4644      	mov	r4, r8
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	430c      	orrs	r4, r1
 8001814:	d130      	bne.n	8001878 <__aeabi_dadd+0x63c>
 8001816:	0742      	lsls	r2, r0, #29
 8001818:	4313      	orrs	r3, r2
 800181a:	08c0      	lsrs	r0, r0, #3
 800181c:	e65c      	b.n	80014d8 <__aeabi_dadd+0x29c>
 800181e:	077b      	lsls	r3, r7, #29
 8001820:	08c9      	lsrs	r1, r1, #3
 8001822:	430b      	orrs	r3, r1
 8001824:	08f8      	lsrs	r0, r7, #3
 8001826:	e639      	b.n	800149c <__aeabi_dadd+0x260>
 8001828:	185c      	adds	r4, r3, r1
 800182a:	429c      	cmp	r4, r3
 800182c:	419b      	sbcs	r3, r3
 800182e:	4440      	add	r0, r8
 8001830:	425b      	negs	r3, r3
 8001832:	18c7      	adds	r7, r0, r3
 8001834:	023b      	lsls	r3, r7, #8
 8001836:	d400      	bmi.n	800183a <__aeabi_dadd+0x5fe>
 8001838:	e625      	b.n	8001486 <__aeabi_dadd+0x24a>
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <__aeabi_dadd+0x674>)
 800183c:	2601      	movs	r6, #1
 800183e:	401f      	ands	r7, r3
 8001840:	e621      	b.n	8001486 <__aeabi_dadd+0x24a>
 8001842:	0004      	movs	r4, r0
 8001844:	3a20      	subs	r2, #32
 8001846:	40d4      	lsrs	r4, r2
 8001848:	4662      	mov	r2, ip
 800184a:	2a20      	cmp	r2, #32
 800184c:	d004      	beq.n	8001858 <__aeabi_dadd+0x61c>
 800184e:	2240      	movs	r2, #64	; 0x40
 8001850:	4666      	mov	r6, ip
 8001852:	1b92      	subs	r2, r2, r6
 8001854:	4090      	lsls	r0, r2
 8001856:	4303      	orrs	r3, r0
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	4193      	sbcs	r3, r2
 800185c:	431c      	orrs	r4, r3
 800185e:	e67e      	b.n	800155e <__aeabi_dadd+0x322>
 8001860:	185c      	adds	r4, r3, r1
 8001862:	428c      	cmp	r4, r1
 8001864:	4189      	sbcs	r1, r1
 8001866:	4440      	add	r0, r8
 8001868:	4249      	negs	r1, r1
 800186a:	1847      	adds	r7, r0, r1
 800186c:	e6dd      	b.n	800162a <__aeabi_dadd+0x3ee>
 800186e:	0023      	movs	r3, r4
 8001870:	433b      	orrs	r3, r7
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x63a>
 8001874:	e6ad      	b.n	80015d2 <__aeabi_dadd+0x396>
 8001876:	e606      	b.n	8001486 <__aeabi_dadd+0x24a>
 8001878:	0744      	lsls	r4, r0, #29
 800187a:	4323      	orrs	r3, r4
 800187c:	2480      	movs	r4, #128	; 0x80
 800187e:	08c0      	lsrs	r0, r0, #3
 8001880:	0324      	lsls	r4, r4, #12
 8001882:	4220      	tst	r0, r4
 8001884:	d008      	beq.n	8001898 <__aeabi_dadd+0x65c>
 8001886:	4642      	mov	r2, r8
 8001888:	08d6      	lsrs	r6, r2, #3
 800188a:	4226      	tst	r6, r4
 800188c:	d104      	bne.n	8001898 <__aeabi_dadd+0x65c>
 800188e:	4655      	mov	r5, sl
 8001890:	0030      	movs	r0, r6
 8001892:	08cb      	lsrs	r3, r1, #3
 8001894:	0751      	lsls	r1, r2, #29
 8001896:	430b      	orrs	r3, r1
 8001898:	0f5a      	lsrs	r2, r3, #29
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	0752      	lsls	r2, r2, #29
 80018a0:	4313      	orrs	r3, r2
 80018a2:	e619      	b.n	80014d8 <__aeabi_dadd+0x29c>
 80018a4:	2300      	movs	r3, #0
 80018a6:	4a01      	ldr	r2, [pc, #4]	; (80018ac <__aeabi_dadd+0x670>)
 80018a8:	001f      	movs	r7, r3
 80018aa:	e55e      	b.n	800136a <__aeabi_dadd+0x12e>
 80018ac:	000007ff 	.word	0x000007ff
 80018b0:	ff7fffff 	.word	0xff7fffff

080018b4 <__aeabi_ddiv>:
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	4657      	mov	r7, sl
 80018b8:	464e      	mov	r6, r9
 80018ba:	4645      	mov	r5, r8
 80018bc:	46de      	mov	lr, fp
 80018be:	b5e0      	push	{r5, r6, r7, lr}
 80018c0:	4681      	mov	r9, r0
 80018c2:	0005      	movs	r5, r0
 80018c4:	030c      	lsls	r4, r1, #12
 80018c6:	0048      	lsls	r0, r1, #1
 80018c8:	4692      	mov	sl, r2
 80018ca:	001f      	movs	r7, r3
 80018cc:	b085      	sub	sp, #20
 80018ce:	0b24      	lsrs	r4, r4, #12
 80018d0:	0d40      	lsrs	r0, r0, #21
 80018d2:	0fce      	lsrs	r6, r1, #31
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_ddiv+0x26>
 80018d8:	e156      	b.n	8001b88 <__aeabi_ddiv+0x2d4>
 80018da:	4bd4      	ldr	r3, [pc, #848]	; (8001c2c <__aeabi_ddiv+0x378>)
 80018dc:	4298      	cmp	r0, r3
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x2e>
 80018e0:	e172      	b.n	8001bc8 <__aeabi_ddiv+0x314>
 80018e2:	0f6b      	lsrs	r3, r5, #29
 80018e4:	00e4      	lsls	r4, r4, #3
 80018e6:	431c      	orrs	r4, r3
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	4323      	orrs	r3, r4
 80018ee:	4698      	mov	r8, r3
 80018f0:	4bcf      	ldr	r3, [pc, #828]	; (8001c30 <__aeabi_ddiv+0x37c>)
 80018f2:	00ed      	lsls	r5, r5, #3
 80018f4:	469b      	mov	fp, r3
 80018f6:	2300      	movs	r3, #0
 80018f8:	4699      	mov	r9, r3
 80018fa:	4483      	add	fp, r0
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	033c      	lsls	r4, r7, #12
 8001900:	007b      	lsls	r3, r7, #1
 8001902:	4650      	mov	r0, sl
 8001904:	0b24      	lsrs	r4, r4, #12
 8001906:	0d5b      	lsrs	r3, r3, #21
 8001908:	0fff      	lsrs	r7, r7, #31
 800190a:	2b00      	cmp	r3, #0
 800190c:	d100      	bne.n	8001910 <__aeabi_ddiv+0x5c>
 800190e:	e11f      	b.n	8001b50 <__aeabi_ddiv+0x29c>
 8001910:	4ac6      	ldr	r2, [pc, #792]	; (8001c2c <__aeabi_ddiv+0x378>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x64>
 8001916:	e162      	b.n	8001bde <__aeabi_ddiv+0x32a>
 8001918:	49c5      	ldr	r1, [pc, #788]	; (8001c30 <__aeabi_ddiv+0x37c>)
 800191a:	0f42      	lsrs	r2, r0, #29
 800191c:	468c      	mov	ip, r1
 800191e:	00e4      	lsls	r4, r4, #3
 8001920:	4659      	mov	r1, fp
 8001922:	4314      	orrs	r4, r2
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	4463      	add	r3, ip
 8001928:	0412      	lsls	r2, r2, #16
 800192a:	1acb      	subs	r3, r1, r3
 800192c:	4314      	orrs	r4, r2
 800192e:	469b      	mov	fp, r3
 8001930:	00c2      	lsls	r2, r0, #3
 8001932:	2000      	movs	r0, #0
 8001934:	0033      	movs	r3, r6
 8001936:	407b      	eors	r3, r7
 8001938:	469a      	mov	sl, r3
 800193a:	464b      	mov	r3, r9
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d827      	bhi.n	8001990 <__aeabi_ddiv+0xdc>
 8001940:	49bc      	ldr	r1, [pc, #752]	; (8001c34 <__aeabi_ddiv+0x380>)
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	58cb      	ldr	r3, [r1, r3]
 8001946:	469f      	mov	pc, r3
 8001948:	46b2      	mov	sl, r6
 800194a:	9b00      	ldr	r3, [sp, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d016      	beq.n	800197e <__aeabi_ddiv+0xca>
 8001950:	2b03      	cmp	r3, #3
 8001952:	d100      	bne.n	8001956 <__aeabi_ddiv+0xa2>
 8001954:	e28e      	b.n	8001e74 <__aeabi_ddiv+0x5c0>
 8001956:	2b01      	cmp	r3, #1
 8001958:	d000      	beq.n	800195c <__aeabi_ddiv+0xa8>
 800195a:	e0d9      	b.n	8001b10 <__aeabi_ddiv+0x25c>
 800195c:	2300      	movs	r3, #0
 800195e:	2400      	movs	r4, #0
 8001960:	2500      	movs	r5, #0
 8001962:	4652      	mov	r2, sl
 8001964:	051b      	lsls	r3, r3, #20
 8001966:	4323      	orrs	r3, r4
 8001968:	07d2      	lsls	r2, r2, #31
 800196a:	4313      	orrs	r3, r2
 800196c:	0028      	movs	r0, r5
 800196e:	0019      	movs	r1, r3
 8001970:	b005      	add	sp, #20
 8001972:	bcf0      	pop	{r4, r5, r6, r7}
 8001974:	46bb      	mov	fp, r7
 8001976:	46b2      	mov	sl, r6
 8001978:	46a9      	mov	r9, r5
 800197a:	46a0      	mov	r8, r4
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197e:	2400      	movs	r4, #0
 8001980:	2500      	movs	r5, #0
 8001982:	4baa      	ldr	r3, [pc, #680]	; (8001c2c <__aeabi_ddiv+0x378>)
 8001984:	e7ed      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001986:	46ba      	mov	sl, r7
 8001988:	46a0      	mov	r8, r4
 800198a:	0015      	movs	r5, r2
 800198c:	9000      	str	r0, [sp, #0]
 800198e:	e7dc      	b.n	800194a <__aeabi_ddiv+0x96>
 8001990:	4544      	cmp	r4, r8
 8001992:	d200      	bcs.n	8001996 <__aeabi_ddiv+0xe2>
 8001994:	e1c7      	b.n	8001d26 <__aeabi_ddiv+0x472>
 8001996:	d100      	bne.n	800199a <__aeabi_ddiv+0xe6>
 8001998:	e1c2      	b.n	8001d20 <__aeabi_ddiv+0x46c>
 800199a:	2301      	movs	r3, #1
 800199c:	425b      	negs	r3, r3
 800199e:	469c      	mov	ip, r3
 80019a0:	002e      	movs	r6, r5
 80019a2:	4640      	mov	r0, r8
 80019a4:	2500      	movs	r5, #0
 80019a6:	44e3      	add	fp, ip
 80019a8:	0223      	lsls	r3, r4, #8
 80019aa:	0e14      	lsrs	r4, r2, #24
 80019ac:	431c      	orrs	r4, r3
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	4699      	mov	r9, r3
 80019b2:	0423      	lsls	r3, r4, #16
 80019b4:	0c1f      	lsrs	r7, r3, #16
 80019b6:	0212      	lsls	r2, r2, #8
 80019b8:	4649      	mov	r1, r9
 80019ba:	9200      	str	r2, [sp, #0]
 80019bc:	9701      	str	r7, [sp, #4]
 80019be:	f7fe fc4d 	bl	800025c <__aeabi_uidivmod>
 80019c2:	0002      	movs	r2, r0
 80019c4:	437a      	muls	r2, r7
 80019c6:	040b      	lsls	r3, r1, #16
 80019c8:	0c31      	lsrs	r1, r6, #16
 80019ca:	4680      	mov	r8, r0
 80019cc:	4319      	orrs	r1, r3
 80019ce:	428a      	cmp	r2, r1
 80019d0:	d907      	bls.n	80019e2 <__aeabi_ddiv+0x12e>
 80019d2:	2301      	movs	r3, #1
 80019d4:	425b      	negs	r3, r3
 80019d6:	469c      	mov	ip, r3
 80019d8:	1909      	adds	r1, r1, r4
 80019da:	44e0      	add	r8, ip
 80019dc:	428c      	cmp	r4, r1
 80019de:	d800      	bhi.n	80019e2 <__aeabi_ddiv+0x12e>
 80019e0:	e207      	b.n	8001df2 <__aeabi_ddiv+0x53e>
 80019e2:	1a88      	subs	r0, r1, r2
 80019e4:	4649      	mov	r1, r9
 80019e6:	f7fe fc39 	bl	800025c <__aeabi_uidivmod>
 80019ea:	0409      	lsls	r1, r1, #16
 80019ec:	468c      	mov	ip, r1
 80019ee:	0431      	lsls	r1, r6, #16
 80019f0:	4666      	mov	r6, ip
 80019f2:	9a01      	ldr	r2, [sp, #4]
 80019f4:	0c09      	lsrs	r1, r1, #16
 80019f6:	4342      	muls	r2, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	4331      	orrs	r1, r6
 80019fc:	428a      	cmp	r2, r1
 80019fe:	d904      	bls.n	8001a0a <__aeabi_ddiv+0x156>
 8001a00:	1909      	adds	r1, r1, r4
 8001a02:	3b01      	subs	r3, #1
 8001a04:	428c      	cmp	r4, r1
 8001a06:	d800      	bhi.n	8001a0a <__aeabi_ddiv+0x156>
 8001a08:	e1ed      	b.n	8001de6 <__aeabi_ddiv+0x532>
 8001a0a:	1a88      	subs	r0, r1, r2
 8001a0c:	4642      	mov	r2, r8
 8001a0e:	0412      	lsls	r2, r2, #16
 8001a10:	431a      	orrs	r2, r3
 8001a12:	4690      	mov	r8, r2
 8001a14:	4641      	mov	r1, r8
 8001a16:	9b00      	ldr	r3, [sp, #0]
 8001a18:	040e      	lsls	r6, r1, #16
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	001f      	movs	r7, r3
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	9b00      	ldr	r3, [sp, #0]
 8001a22:	0c36      	lsrs	r6, r6, #16
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	0c19      	lsrs	r1, r3, #16
 8001a28:	000b      	movs	r3, r1
 8001a2a:	4373      	muls	r3, r6
 8001a2c:	0c12      	lsrs	r2, r2, #16
 8001a2e:	437e      	muls	r6, r7
 8001a30:	9103      	str	r1, [sp, #12]
 8001a32:	4351      	muls	r1, r2
 8001a34:	437a      	muls	r2, r7
 8001a36:	0c1f      	lsrs	r7, r3, #16
 8001a38:	46bc      	mov	ip, r7
 8001a3a:	1876      	adds	r6, r6, r1
 8001a3c:	4466      	add	r6, ip
 8001a3e:	42b1      	cmp	r1, r6
 8001a40:	d903      	bls.n	8001a4a <__aeabi_ddiv+0x196>
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	0249      	lsls	r1, r1, #9
 8001a46:	468c      	mov	ip, r1
 8001a48:	4462      	add	r2, ip
 8001a4a:	0c31      	lsrs	r1, r6, #16
 8001a4c:	188a      	adds	r2, r1, r2
 8001a4e:	0431      	lsls	r1, r6, #16
 8001a50:	041e      	lsls	r6, r3, #16
 8001a52:	0c36      	lsrs	r6, r6, #16
 8001a54:	198e      	adds	r6, r1, r6
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d302      	bcc.n	8001a60 <__aeabi_ddiv+0x1ac>
 8001a5a:	d112      	bne.n	8001a82 <__aeabi_ddiv+0x1ce>
 8001a5c:	42b5      	cmp	r5, r6
 8001a5e:	d210      	bcs.n	8001a82 <__aeabi_ddiv+0x1ce>
 8001a60:	4643      	mov	r3, r8
 8001a62:	1e59      	subs	r1, r3, #1
 8001a64:	9b00      	ldr	r3, [sp, #0]
 8001a66:	469c      	mov	ip, r3
 8001a68:	4465      	add	r5, ip
 8001a6a:	001f      	movs	r7, r3
 8001a6c:	429d      	cmp	r5, r3
 8001a6e:	419b      	sbcs	r3, r3
 8001a70:	425b      	negs	r3, r3
 8001a72:	191b      	adds	r3, r3, r4
 8001a74:	18c0      	adds	r0, r0, r3
 8001a76:	4284      	cmp	r4, r0
 8001a78:	d200      	bcs.n	8001a7c <__aeabi_ddiv+0x1c8>
 8001a7a:	e1a0      	b.n	8001dbe <__aeabi_ddiv+0x50a>
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_ddiv+0x1cc>
 8001a7e:	e19b      	b.n	8001db8 <__aeabi_ddiv+0x504>
 8001a80:	4688      	mov	r8, r1
 8001a82:	1bae      	subs	r6, r5, r6
 8001a84:	42b5      	cmp	r5, r6
 8001a86:	41ad      	sbcs	r5, r5
 8001a88:	1a80      	subs	r0, r0, r2
 8001a8a:	426d      	negs	r5, r5
 8001a8c:	1b40      	subs	r0, r0, r5
 8001a8e:	4284      	cmp	r4, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_ddiv+0x1e0>
 8001a92:	e1d5      	b.n	8001e40 <__aeabi_ddiv+0x58c>
 8001a94:	4649      	mov	r1, r9
 8001a96:	f7fe fbe1 	bl	800025c <__aeabi_uidivmod>
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	040b      	lsls	r3, r1, #16
 8001a9e:	4342      	muls	r2, r0
 8001aa0:	0c31      	lsrs	r1, r6, #16
 8001aa2:	0005      	movs	r5, r0
 8001aa4:	4319      	orrs	r1, r3
 8001aa6:	428a      	cmp	r2, r1
 8001aa8:	d900      	bls.n	8001aac <__aeabi_ddiv+0x1f8>
 8001aaa:	e16c      	b.n	8001d86 <__aeabi_ddiv+0x4d2>
 8001aac:	1a88      	subs	r0, r1, r2
 8001aae:	4649      	mov	r1, r9
 8001ab0:	f7fe fbd4 	bl	800025c <__aeabi_uidivmod>
 8001ab4:	9a01      	ldr	r2, [sp, #4]
 8001ab6:	0436      	lsls	r6, r6, #16
 8001ab8:	4342      	muls	r2, r0
 8001aba:	0409      	lsls	r1, r1, #16
 8001abc:	0c36      	lsrs	r6, r6, #16
 8001abe:	0003      	movs	r3, r0
 8001ac0:	430e      	orrs	r6, r1
 8001ac2:	42b2      	cmp	r2, r6
 8001ac4:	d900      	bls.n	8001ac8 <__aeabi_ddiv+0x214>
 8001ac6:	e153      	b.n	8001d70 <__aeabi_ddiv+0x4bc>
 8001ac8:	9803      	ldr	r0, [sp, #12]
 8001aca:	1ab6      	subs	r6, r6, r2
 8001acc:	0002      	movs	r2, r0
 8001ace:	042d      	lsls	r5, r5, #16
 8001ad0:	431d      	orrs	r5, r3
 8001ad2:	9f02      	ldr	r7, [sp, #8]
 8001ad4:	042b      	lsls	r3, r5, #16
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	435a      	muls	r2, r3
 8001ada:	437b      	muls	r3, r7
 8001adc:	469c      	mov	ip, r3
 8001ade:	0c29      	lsrs	r1, r5, #16
 8001ae0:	4348      	muls	r0, r1
 8001ae2:	0c13      	lsrs	r3, r2, #16
 8001ae4:	4484      	add	ip, r0
 8001ae6:	4463      	add	r3, ip
 8001ae8:	4379      	muls	r1, r7
 8001aea:	4298      	cmp	r0, r3
 8001aec:	d903      	bls.n	8001af6 <__aeabi_ddiv+0x242>
 8001aee:	2080      	movs	r0, #128	; 0x80
 8001af0:	0240      	lsls	r0, r0, #9
 8001af2:	4684      	mov	ip, r0
 8001af4:	4461      	add	r1, ip
 8001af6:	0c18      	lsrs	r0, r3, #16
 8001af8:	0412      	lsls	r2, r2, #16
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	0c12      	lsrs	r2, r2, #16
 8001afe:	1841      	adds	r1, r0, r1
 8001b00:	189b      	adds	r3, r3, r2
 8001b02:	428e      	cmp	r6, r1
 8001b04:	d200      	bcs.n	8001b08 <__aeabi_ddiv+0x254>
 8001b06:	e0ff      	b.n	8001d08 <__aeabi_ddiv+0x454>
 8001b08:	d100      	bne.n	8001b0c <__aeabi_ddiv+0x258>
 8001b0a:	e0fa      	b.n	8001d02 <__aeabi_ddiv+0x44e>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	4a49      	ldr	r2, [pc, #292]	; (8001c38 <__aeabi_ddiv+0x384>)
 8001b12:	445a      	add	r2, fp
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_ddiv+0x266>
 8001b18:	e0aa      	b.n	8001c70 <__aeabi_ddiv+0x3bc>
 8001b1a:	076b      	lsls	r3, r5, #29
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_ddiv+0x26c>
 8001b1e:	e13d      	b.n	8001d9c <__aeabi_ddiv+0x4e8>
 8001b20:	08ed      	lsrs	r5, r5, #3
 8001b22:	4643      	mov	r3, r8
 8001b24:	01db      	lsls	r3, r3, #7
 8001b26:	d506      	bpl.n	8001b36 <__aeabi_ddiv+0x282>
 8001b28:	4642      	mov	r2, r8
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <__aeabi_ddiv+0x388>)
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	4690      	mov	r8, r2
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	00d2      	lsls	r2, r2, #3
 8001b34:	445a      	add	r2, fp
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <__aeabi_ddiv+0x38c>)
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dd00      	ble.n	8001b3e <__aeabi_ddiv+0x28a>
 8001b3c:	e71f      	b.n	800197e <__aeabi_ddiv+0xca>
 8001b3e:	4643      	mov	r3, r8
 8001b40:	075b      	lsls	r3, r3, #29
 8001b42:	431d      	orrs	r5, r3
 8001b44:	4643      	mov	r3, r8
 8001b46:	0552      	lsls	r2, r2, #21
 8001b48:	025c      	lsls	r4, r3, #9
 8001b4a:	0b24      	lsrs	r4, r4, #12
 8001b4c:	0d53      	lsrs	r3, r2, #21
 8001b4e:	e708      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001b50:	4652      	mov	r2, sl
 8001b52:	4322      	orrs	r2, r4
 8001b54:	d100      	bne.n	8001b58 <__aeabi_ddiv+0x2a4>
 8001b56:	e07b      	b.n	8001c50 <__aeabi_ddiv+0x39c>
 8001b58:	2c00      	cmp	r4, #0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x2aa>
 8001b5c:	e0fa      	b.n	8001d54 <__aeabi_ddiv+0x4a0>
 8001b5e:	0020      	movs	r0, r4
 8001b60:	f001 fa22 	bl	8002fa8 <__clzsi2>
 8001b64:	0002      	movs	r2, r0
 8001b66:	3a0b      	subs	r2, #11
 8001b68:	231d      	movs	r3, #29
 8001b6a:	0001      	movs	r1, r0
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	4652      	mov	r2, sl
 8001b70:	3908      	subs	r1, #8
 8001b72:	40da      	lsrs	r2, r3
 8001b74:	408c      	lsls	r4, r1
 8001b76:	4314      	orrs	r4, r2
 8001b78:	4652      	mov	r2, sl
 8001b7a:	408a      	lsls	r2, r1
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <__aeabi_ddiv+0x390>)
 8001b7e:	4458      	add	r0, fp
 8001b80:	469b      	mov	fp, r3
 8001b82:	4483      	add	fp, r0
 8001b84:	2000      	movs	r0, #0
 8001b86:	e6d5      	b.n	8001934 <__aeabi_ddiv+0x80>
 8001b88:	464b      	mov	r3, r9
 8001b8a:	4323      	orrs	r3, r4
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	d044      	beq.n	8001c1a <__aeabi_ddiv+0x366>
 8001b90:	2c00      	cmp	r4, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x2e2>
 8001b94:	e0ce      	b.n	8001d34 <__aeabi_ddiv+0x480>
 8001b96:	0020      	movs	r0, r4
 8001b98:	f001 fa06 	bl	8002fa8 <__clzsi2>
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	390b      	subs	r1, #11
 8001ba2:	231d      	movs	r3, #29
 8001ba4:	1a5b      	subs	r3, r3, r1
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	0010      	movs	r0, r2
 8001baa:	40d9      	lsrs	r1, r3
 8001bac:	3808      	subs	r0, #8
 8001bae:	4084      	lsls	r4, r0
 8001bb0:	000b      	movs	r3, r1
 8001bb2:	464d      	mov	r5, r9
 8001bb4:	4323      	orrs	r3, r4
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	4085      	lsls	r5, r0
 8001bba:	4823      	ldr	r0, [pc, #140]	; (8001c48 <__aeabi_ddiv+0x394>)
 8001bbc:	1a83      	subs	r3, r0, r2
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e69a      	b.n	80018fe <__aeabi_ddiv+0x4a>
 8001bc8:	464b      	mov	r3, r9
 8001bca:	4323      	orrs	r3, r4
 8001bcc:	4698      	mov	r8, r3
 8001bce:	d11d      	bne.n	8001c0c <__aeabi_ddiv+0x358>
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	3b06      	subs	r3, #6
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	4683      	mov	fp, r0
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	e68f      	b.n	80018fe <__aeabi_ddiv+0x4a>
 8001bde:	4652      	mov	r2, sl
 8001be0:	4322      	orrs	r2, r4
 8001be2:	d109      	bne.n	8001bf8 <__aeabi_ddiv+0x344>
 8001be4:	2302      	movs	r3, #2
 8001be6:	4649      	mov	r1, r9
 8001be8:	4319      	orrs	r1, r3
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <__aeabi_ddiv+0x398>)
 8001bec:	4689      	mov	r9, r1
 8001bee:	469c      	mov	ip, r3
 8001bf0:	2400      	movs	r4, #0
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	44e3      	add	fp, ip
 8001bf6:	e69d      	b.n	8001934 <__aeabi_ddiv+0x80>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	464a      	mov	r2, r9
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <__aeabi_ddiv+0x398>)
 8001c00:	4691      	mov	r9, r2
 8001c02:	469c      	mov	ip, r3
 8001c04:	4652      	mov	r2, sl
 8001c06:	2003      	movs	r0, #3
 8001c08:	44e3      	add	fp, ip
 8001c0a:	e693      	b.n	8001934 <__aeabi_ddiv+0x80>
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	4699      	mov	r9, r3
 8001c10:	3b09      	subs	r3, #9
 8001c12:	46a0      	mov	r8, r4
 8001c14:	4683      	mov	fp, r0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	e671      	b.n	80018fe <__aeabi_ddiv+0x4a>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	469b      	mov	fp, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	2500      	movs	r5, #0
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	e669      	b.n	80018fe <__aeabi_ddiv+0x4a>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	000007ff 	.word	0x000007ff
 8001c30:	fffffc01 	.word	0xfffffc01
 8001c34:	08012af0 	.word	0x08012af0
 8001c38:	000003ff 	.word	0x000003ff
 8001c3c:	feffffff 	.word	0xfeffffff
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	000003f3 	.word	0x000003f3
 8001c48:	fffffc0d 	.word	0xfffffc0d
 8001c4c:	fffff801 	.word	0xfffff801
 8001c50:	4649      	mov	r1, r9
 8001c52:	2301      	movs	r3, #1
 8001c54:	4319      	orrs	r1, r3
 8001c56:	4689      	mov	r9, r1
 8001c58:	2400      	movs	r4, #0
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	e66a      	b.n	8001934 <__aeabi_ddiv+0x80>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2480      	movs	r4, #128	; 0x80
 8001c62:	469a      	mov	sl, r3
 8001c64:	2500      	movs	r5, #0
 8001c66:	4b8a      	ldr	r3, [pc, #552]	; (8001e90 <__aeabi_ddiv+0x5dc>)
 8001c68:	0324      	lsls	r4, r4, #12
 8001c6a:	e67a      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001c6c:	2501      	movs	r5, #1
 8001c6e:	426d      	negs	r5, r5
 8001c70:	2301      	movs	r3, #1
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	2b38      	cmp	r3, #56	; 0x38
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_ddiv+0x3c6>
 8001c78:	e670      	b.n	800195c <__aeabi_ddiv+0xa8>
 8001c7a:	2b1f      	cmp	r3, #31
 8001c7c:	dc00      	bgt.n	8001c80 <__aeabi_ddiv+0x3cc>
 8001c7e:	e0bf      	b.n	8001e00 <__aeabi_ddiv+0x54c>
 8001c80:	211f      	movs	r1, #31
 8001c82:	4249      	negs	r1, r1
 8001c84:	1a8a      	subs	r2, r1, r2
 8001c86:	4641      	mov	r1, r8
 8001c88:	40d1      	lsrs	r1, r2
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d004      	beq.n	8001c9a <__aeabi_ddiv+0x3e6>
 8001c90:	4641      	mov	r1, r8
 8001c92:	4b80      	ldr	r3, [pc, #512]	; (8001e94 <__aeabi_ddiv+0x5e0>)
 8001c94:	445b      	add	r3, fp
 8001c96:	4099      	lsls	r1, r3
 8001c98:	430d      	orrs	r5, r1
 8001c9a:	1e6b      	subs	r3, r5, #1
 8001c9c:	419d      	sbcs	r5, r3
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	432a      	orrs	r2, r5
 8001ca2:	001d      	movs	r5, r3
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	4015      	ands	r5, r2
 8001ca8:	4213      	tst	r3, r2
 8001caa:	d100      	bne.n	8001cae <__aeabi_ddiv+0x3fa>
 8001cac:	e0d4      	b.n	8001e58 <__aeabi_ddiv+0x5a4>
 8001cae:	210f      	movs	r1, #15
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	4011      	ands	r1, r2
 8001cb4:	2904      	cmp	r1, #4
 8001cb6:	d100      	bne.n	8001cba <__aeabi_ddiv+0x406>
 8001cb8:	e0cb      	b.n	8001e52 <__aeabi_ddiv+0x59e>
 8001cba:	1d11      	adds	r1, r2, #4
 8001cbc:	4291      	cmp	r1, r2
 8001cbe:	4192      	sbcs	r2, r2
 8001cc0:	4252      	negs	r2, r2
 8001cc2:	189b      	adds	r3, r3, r2
 8001cc4:	000a      	movs	r2, r1
 8001cc6:	0219      	lsls	r1, r3, #8
 8001cc8:	d400      	bmi.n	8001ccc <__aeabi_ddiv+0x418>
 8001cca:	e0c2      	b.n	8001e52 <__aeabi_ddiv+0x59e>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2400      	movs	r4, #0
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	e646      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	4641      	mov	r1, r8
 8001cd8:	031b      	lsls	r3, r3, #12
 8001cda:	4219      	tst	r1, r3
 8001cdc:	d008      	beq.n	8001cf0 <__aeabi_ddiv+0x43c>
 8001cde:	421c      	tst	r4, r3
 8001ce0:	d106      	bne.n	8001cf0 <__aeabi_ddiv+0x43c>
 8001ce2:	431c      	orrs	r4, r3
 8001ce4:	0324      	lsls	r4, r4, #12
 8001ce6:	46ba      	mov	sl, r7
 8001ce8:	0015      	movs	r5, r2
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <__aeabi_ddiv+0x5dc>)
 8001cec:	0b24      	lsrs	r4, r4, #12
 8001cee:	e638      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001cf0:	2480      	movs	r4, #128	; 0x80
 8001cf2:	4643      	mov	r3, r8
 8001cf4:	0324      	lsls	r4, r4, #12
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	0324      	lsls	r4, r4, #12
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <__aeabi_ddiv+0x5dc>)
 8001cfe:	0b24      	lsrs	r4, r4, #12
 8001d00:	e62f      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d100      	bne.n	8001d08 <__aeabi_ddiv+0x454>
 8001d06:	e703      	b.n	8001b10 <__aeabi_ddiv+0x25c>
 8001d08:	19a6      	adds	r6, r4, r6
 8001d0a:	1e68      	subs	r0, r5, #1
 8001d0c:	42a6      	cmp	r6, r4
 8001d0e:	d200      	bcs.n	8001d12 <__aeabi_ddiv+0x45e>
 8001d10:	e08d      	b.n	8001e2e <__aeabi_ddiv+0x57a>
 8001d12:	428e      	cmp	r6, r1
 8001d14:	d200      	bcs.n	8001d18 <__aeabi_ddiv+0x464>
 8001d16:	e0a3      	b.n	8001e60 <__aeabi_ddiv+0x5ac>
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x468>
 8001d1a:	e0b3      	b.n	8001e84 <__aeabi_ddiv+0x5d0>
 8001d1c:	0005      	movs	r5, r0
 8001d1e:	e6f5      	b.n	8001b0c <__aeabi_ddiv+0x258>
 8001d20:	42aa      	cmp	r2, r5
 8001d22:	d900      	bls.n	8001d26 <__aeabi_ddiv+0x472>
 8001d24:	e639      	b.n	800199a <__aeabi_ddiv+0xe6>
 8001d26:	4643      	mov	r3, r8
 8001d28:	07de      	lsls	r6, r3, #31
 8001d2a:	0858      	lsrs	r0, r3, #1
 8001d2c:	086b      	lsrs	r3, r5, #1
 8001d2e:	431e      	orrs	r6, r3
 8001d30:	07ed      	lsls	r5, r5, #31
 8001d32:	e639      	b.n	80019a8 <__aeabi_ddiv+0xf4>
 8001d34:	4648      	mov	r0, r9
 8001d36:	f001 f937 	bl	8002fa8 <__clzsi2>
 8001d3a:	0001      	movs	r1, r0
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	3115      	adds	r1, #21
 8001d40:	3220      	adds	r2, #32
 8001d42:	291c      	cmp	r1, #28
 8001d44:	dc00      	bgt.n	8001d48 <__aeabi_ddiv+0x494>
 8001d46:	e72c      	b.n	8001ba2 <__aeabi_ddiv+0x2ee>
 8001d48:	464b      	mov	r3, r9
 8001d4a:	3808      	subs	r0, #8
 8001d4c:	4083      	lsls	r3, r0
 8001d4e:	2500      	movs	r5, #0
 8001d50:	4698      	mov	r8, r3
 8001d52:	e732      	b.n	8001bba <__aeabi_ddiv+0x306>
 8001d54:	f001 f928 	bl	8002fa8 <__clzsi2>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	3215      	adds	r2, #21
 8001d5e:	3020      	adds	r0, #32
 8001d60:	2a1c      	cmp	r2, #28
 8001d62:	dc00      	bgt.n	8001d66 <__aeabi_ddiv+0x4b2>
 8001d64:	e700      	b.n	8001b68 <__aeabi_ddiv+0x2b4>
 8001d66:	4654      	mov	r4, sl
 8001d68:	3b08      	subs	r3, #8
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	409c      	lsls	r4, r3
 8001d6e:	e705      	b.n	8001b7c <__aeabi_ddiv+0x2c8>
 8001d70:	1936      	adds	r6, r6, r4
 8001d72:	3b01      	subs	r3, #1
 8001d74:	42b4      	cmp	r4, r6
 8001d76:	d900      	bls.n	8001d7a <__aeabi_ddiv+0x4c6>
 8001d78:	e6a6      	b.n	8001ac8 <__aeabi_ddiv+0x214>
 8001d7a:	42b2      	cmp	r2, r6
 8001d7c:	d800      	bhi.n	8001d80 <__aeabi_ddiv+0x4cc>
 8001d7e:	e6a3      	b.n	8001ac8 <__aeabi_ddiv+0x214>
 8001d80:	1e83      	subs	r3, r0, #2
 8001d82:	1936      	adds	r6, r6, r4
 8001d84:	e6a0      	b.n	8001ac8 <__aeabi_ddiv+0x214>
 8001d86:	1909      	adds	r1, r1, r4
 8001d88:	3d01      	subs	r5, #1
 8001d8a:	428c      	cmp	r4, r1
 8001d8c:	d900      	bls.n	8001d90 <__aeabi_ddiv+0x4dc>
 8001d8e:	e68d      	b.n	8001aac <__aeabi_ddiv+0x1f8>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d800      	bhi.n	8001d96 <__aeabi_ddiv+0x4e2>
 8001d94:	e68a      	b.n	8001aac <__aeabi_ddiv+0x1f8>
 8001d96:	1e85      	subs	r5, r0, #2
 8001d98:	1909      	adds	r1, r1, r4
 8001d9a:	e687      	b.n	8001aac <__aeabi_ddiv+0x1f8>
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	402b      	ands	r3, r5
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0x4f2>
 8001da4:	e6bc      	b.n	8001b20 <__aeabi_ddiv+0x26c>
 8001da6:	2305      	movs	r3, #5
 8001da8:	425b      	negs	r3, r3
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	419b      	sbcs	r3, r3
 8001dae:	3504      	adds	r5, #4
 8001db0:	425b      	negs	r3, r3
 8001db2:	08ed      	lsrs	r5, r5, #3
 8001db4:	4498      	add	r8, r3
 8001db6:	e6b4      	b.n	8001b22 <__aeabi_ddiv+0x26e>
 8001db8:	42af      	cmp	r7, r5
 8001dba:	d900      	bls.n	8001dbe <__aeabi_ddiv+0x50a>
 8001dbc:	e660      	b.n	8001a80 <__aeabi_ddiv+0x1cc>
 8001dbe:	4282      	cmp	r2, r0
 8001dc0:	d804      	bhi.n	8001dcc <__aeabi_ddiv+0x518>
 8001dc2:	d000      	beq.n	8001dc6 <__aeabi_ddiv+0x512>
 8001dc4:	e65c      	b.n	8001a80 <__aeabi_ddiv+0x1cc>
 8001dc6:	42ae      	cmp	r6, r5
 8001dc8:	d800      	bhi.n	8001dcc <__aeabi_ddiv+0x518>
 8001dca:	e659      	b.n	8001a80 <__aeabi_ddiv+0x1cc>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	425b      	negs	r3, r3
 8001dd0:	469c      	mov	ip, r3
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	44e0      	add	r8, ip
 8001dd6:	469c      	mov	ip, r3
 8001dd8:	4465      	add	r5, ip
 8001dda:	429d      	cmp	r5, r3
 8001ddc:	419b      	sbcs	r3, r3
 8001dde:	425b      	negs	r3, r3
 8001de0:	191b      	adds	r3, r3, r4
 8001de2:	18c0      	adds	r0, r0, r3
 8001de4:	e64d      	b.n	8001a82 <__aeabi_ddiv+0x1ce>
 8001de6:	428a      	cmp	r2, r1
 8001de8:	d800      	bhi.n	8001dec <__aeabi_ddiv+0x538>
 8001dea:	e60e      	b.n	8001a0a <__aeabi_ddiv+0x156>
 8001dec:	1e83      	subs	r3, r0, #2
 8001dee:	1909      	adds	r1, r1, r4
 8001df0:	e60b      	b.n	8001a0a <__aeabi_ddiv+0x156>
 8001df2:	428a      	cmp	r2, r1
 8001df4:	d800      	bhi.n	8001df8 <__aeabi_ddiv+0x544>
 8001df6:	e5f4      	b.n	80019e2 <__aeabi_ddiv+0x12e>
 8001df8:	1e83      	subs	r3, r0, #2
 8001dfa:	4698      	mov	r8, r3
 8001dfc:	1909      	adds	r1, r1, r4
 8001dfe:	e5f0      	b.n	80019e2 <__aeabi_ddiv+0x12e>
 8001e00:	4925      	ldr	r1, [pc, #148]	; (8001e98 <__aeabi_ddiv+0x5e4>)
 8001e02:	0028      	movs	r0, r5
 8001e04:	4459      	add	r1, fp
 8001e06:	408d      	lsls	r5, r1
 8001e08:	4642      	mov	r2, r8
 8001e0a:	408a      	lsls	r2, r1
 8001e0c:	1e69      	subs	r1, r5, #1
 8001e0e:	418d      	sbcs	r5, r1
 8001e10:	4641      	mov	r1, r8
 8001e12:	40d8      	lsrs	r0, r3
 8001e14:	40d9      	lsrs	r1, r3
 8001e16:	4302      	orrs	r2, r0
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	0751      	lsls	r1, r2, #29
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_ddiv+0x56e>
 8001e20:	e751      	b.n	8001cc6 <__aeabi_ddiv+0x412>
 8001e22:	210f      	movs	r1, #15
 8001e24:	4011      	ands	r1, r2
 8001e26:	2904      	cmp	r1, #4
 8001e28:	d000      	beq.n	8001e2c <__aeabi_ddiv+0x578>
 8001e2a:	e746      	b.n	8001cba <__aeabi_ddiv+0x406>
 8001e2c:	e74b      	b.n	8001cc6 <__aeabi_ddiv+0x412>
 8001e2e:	0005      	movs	r5, r0
 8001e30:	428e      	cmp	r6, r1
 8001e32:	d000      	beq.n	8001e36 <__aeabi_ddiv+0x582>
 8001e34:	e66a      	b.n	8001b0c <__aeabi_ddiv+0x258>
 8001e36:	9a00      	ldr	r2, [sp, #0]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_ddiv+0x58a>
 8001e3c:	e666      	b.n	8001b0c <__aeabi_ddiv+0x258>
 8001e3e:	e667      	b.n	8001b10 <__aeabi_ddiv+0x25c>
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <__aeabi_ddiv+0x5e8>)
 8001e42:	445a      	add	r2, fp
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	dc00      	bgt.n	8001e4a <__aeabi_ddiv+0x596>
 8001e48:	e710      	b.n	8001c6c <__aeabi_ddiv+0x3b8>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2500      	movs	r5, #0
 8001e4e:	4498      	add	r8, r3
 8001e50:	e667      	b.n	8001b22 <__aeabi_ddiv+0x26e>
 8001e52:	075d      	lsls	r5, r3, #29
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	0b1c      	lsrs	r4, r3, #12
 8001e58:	08d2      	lsrs	r2, r2, #3
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	4315      	orrs	r5, r2
 8001e5e:	e580      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001e60:	9800      	ldr	r0, [sp, #0]
 8001e62:	3d02      	subs	r5, #2
 8001e64:	0042      	lsls	r2, r0, #1
 8001e66:	4282      	cmp	r2, r0
 8001e68:	41bf      	sbcs	r7, r7
 8001e6a:	427f      	negs	r7, r7
 8001e6c:	193c      	adds	r4, r7, r4
 8001e6e:	1936      	adds	r6, r6, r4
 8001e70:	9200      	str	r2, [sp, #0]
 8001e72:	e7dd      	b.n	8001e30 <__aeabi_ddiv+0x57c>
 8001e74:	2480      	movs	r4, #128	; 0x80
 8001e76:	4643      	mov	r3, r8
 8001e78:	0324      	lsls	r4, r4, #12
 8001e7a:	431c      	orrs	r4, r3
 8001e7c:	0324      	lsls	r4, r4, #12
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__aeabi_ddiv+0x5dc>)
 8001e80:	0b24      	lsrs	r4, r4, #12
 8001e82:	e56e      	b.n	8001962 <__aeabi_ddiv+0xae>
 8001e84:	9a00      	ldr	r2, [sp, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d3ea      	bcc.n	8001e60 <__aeabi_ddiv+0x5ac>
 8001e8a:	0005      	movs	r5, r0
 8001e8c:	e7d3      	b.n	8001e36 <__aeabi_ddiv+0x582>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	000007ff 	.word	0x000007ff
 8001e94:	0000043e 	.word	0x0000043e
 8001e98:	0000041e 	.word	0x0000041e
 8001e9c:	000003ff 	.word	0x000003ff

08001ea0 <__eqdf2>:
 8001ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea2:	464e      	mov	r6, r9
 8001ea4:	4645      	mov	r5, r8
 8001ea6:	46de      	mov	lr, fp
 8001ea8:	4657      	mov	r7, sl
 8001eaa:	4690      	mov	r8, r2
 8001eac:	b5e0      	push	{r5, r6, r7, lr}
 8001eae:	0017      	movs	r7, r2
 8001eb0:	031a      	lsls	r2, r3, #12
 8001eb2:	0b12      	lsrs	r2, r2, #12
 8001eb4:	0005      	movs	r5, r0
 8001eb6:	4684      	mov	ip, r0
 8001eb8:	4819      	ldr	r0, [pc, #100]	; (8001f20 <__eqdf2+0x80>)
 8001eba:	030e      	lsls	r6, r1, #12
 8001ebc:	004c      	lsls	r4, r1, #1
 8001ebe:	4691      	mov	r9, r2
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	0fdb      	lsrs	r3, r3, #31
 8001ec4:	469b      	mov	fp, r3
 8001ec6:	0b36      	lsrs	r6, r6, #12
 8001ec8:	0d64      	lsrs	r4, r4, #21
 8001eca:	0fc9      	lsrs	r1, r1, #31
 8001ecc:	0d52      	lsrs	r2, r2, #21
 8001ece:	4284      	cmp	r4, r0
 8001ed0:	d019      	beq.n	8001f06 <__eqdf2+0x66>
 8001ed2:	4282      	cmp	r2, r0
 8001ed4:	d010      	beq.n	8001ef8 <__eqdf2+0x58>
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	4294      	cmp	r4, r2
 8001eda:	d10e      	bne.n	8001efa <__eqdf2+0x5a>
 8001edc:	454e      	cmp	r6, r9
 8001ede:	d10c      	bne.n	8001efa <__eqdf2+0x5a>
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	45c4      	cmp	ip, r8
 8001ee4:	d109      	bne.n	8001efa <__eqdf2+0x5a>
 8001ee6:	4559      	cmp	r1, fp
 8001ee8:	d017      	beq.n	8001f1a <__eqdf2+0x7a>
 8001eea:	2c00      	cmp	r4, #0
 8001eec:	d105      	bne.n	8001efa <__eqdf2+0x5a>
 8001eee:	0030      	movs	r0, r6
 8001ef0:	4328      	orrs	r0, r5
 8001ef2:	1e43      	subs	r3, r0, #1
 8001ef4:	4198      	sbcs	r0, r3
 8001ef6:	e000      	b.n	8001efa <__eqdf2+0x5a>
 8001ef8:	2001      	movs	r0, #1
 8001efa:	bcf0      	pop	{r4, r5, r6, r7}
 8001efc:	46bb      	mov	fp, r7
 8001efe:	46b2      	mov	sl, r6
 8001f00:	46a9      	mov	r9, r5
 8001f02:	46a0      	mov	r8, r4
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f06:	0033      	movs	r3, r6
 8001f08:	2001      	movs	r0, #1
 8001f0a:	432b      	orrs	r3, r5
 8001f0c:	d1f5      	bne.n	8001efa <__eqdf2+0x5a>
 8001f0e:	42a2      	cmp	r2, r4
 8001f10:	d1f3      	bne.n	8001efa <__eqdf2+0x5a>
 8001f12:	464b      	mov	r3, r9
 8001f14:	433b      	orrs	r3, r7
 8001f16:	d1f0      	bne.n	8001efa <__eqdf2+0x5a>
 8001f18:	e7e2      	b.n	8001ee0 <__eqdf2+0x40>
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	e7ed      	b.n	8001efa <__eqdf2+0x5a>
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	000007ff 	.word	0x000007ff

08001f24 <__gedf2>:
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	4647      	mov	r7, r8
 8001f28:	46ce      	mov	lr, r9
 8001f2a:	0004      	movs	r4, r0
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	0016      	movs	r6, r2
 8001f30:	031b      	lsls	r3, r3, #12
 8001f32:	0b1b      	lsrs	r3, r3, #12
 8001f34:	4d2d      	ldr	r5, [pc, #180]	; (8001fec <__gedf2+0xc8>)
 8001f36:	004a      	lsls	r2, r1, #1
 8001f38:	4699      	mov	r9, r3
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	0043      	lsls	r3, r0, #1
 8001f3e:	030f      	lsls	r7, r1, #12
 8001f40:	46a4      	mov	ip, r4
 8001f42:	46b0      	mov	r8, r6
 8001f44:	0b3f      	lsrs	r7, r7, #12
 8001f46:	0d52      	lsrs	r2, r2, #21
 8001f48:	0fc9      	lsrs	r1, r1, #31
 8001f4a:	0d5b      	lsrs	r3, r3, #21
 8001f4c:	0fc0      	lsrs	r0, r0, #31
 8001f4e:	42aa      	cmp	r2, r5
 8001f50:	d021      	beq.n	8001f96 <__gedf2+0x72>
 8001f52:	42ab      	cmp	r3, r5
 8001f54:	d013      	beq.n	8001f7e <__gedf2+0x5a>
 8001f56:	2a00      	cmp	r2, #0
 8001f58:	d122      	bne.n	8001fa0 <__gedf2+0x7c>
 8001f5a:	433c      	orrs	r4, r7
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <__gedf2+0x42>
 8001f60:	464d      	mov	r5, r9
 8001f62:	432e      	orrs	r6, r5
 8001f64:	d022      	beq.n	8001fac <__gedf2+0x88>
 8001f66:	2c00      	cmp	r4, #0
 8001f68:	d010      	beq.n	8001f8c <__gedf2+0x68>
 8001f6a:	4281      	cmp	r1, r0
 8001f6c:	d022      	beq.n	8001fb4 <__gedf2+0x90>
 8001f6e:	2002      	movs	r0, #2
 8001f70:	3901      	subs	r1, #1
 8001f72:	4008      	ands	r0, r1
 8001f74:	3801      	subs	r0, #1
 8001f76:	bcc0      	pop	{r6, r7}
 8001f78:	46b9      	mov	r9, r7
 8001f7a:	46b0      	mov	r8, r6
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7e:	464d      	mov	r5, r9
 8001f80:	432e      	orrs	r6, r5
 8001f82:	d129      	bne.n	8001fd8 <__gedf2+0xb4>
 8001f84:	2a00      	cmp	r2, #0
 8001f86:	d1f0      	bne.n	8001f6a <__gedf2+0x46>
 8001f88:	433c      	orrs	r4, r7
 8001f8a:	d1ee      	bne.n	8001f6a <__gedf2+0x46>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d1f2      	bne.n	8001f76 <__gedf2+0x52>
 8001f90:	2001      	movs	r0, #1
 8001f92:	4240      	negs	r0, r0
 8001f94:	e7ef      	b.n	8001f76 <__gedf2+0x52>
 8001f96:	003d      	movs	r5, r7
 8001f98:	4325      	orrs	r5, r4
 8001f9a:	d11d      	bne.n	8001fd8 <__gedf2+0xb4>
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d0ee      	beq.n	8001f7e <__gedf2+0x5a>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e2      	bne.n	8001f6a <__gedf2+0x46>
 8001fa4:	464c      	mov	r4, r9
 8001fa6:	4326      	orrs	r6, r4
 8001fa8:	d1df      	bne.n	8001f6a <__gedf2+0x46>
 8001faa:	e7e0      	b.n	8001f6e <__gedf2+0x4a>
 8001fac:	2000      	movs	r0, #0
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	d0e1      	beq.n	8001f76 <__gedf2+0x52>
 8001fb2:	e7dc      	b.n	8001f6e <__gedf2+0x4a>
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dc0a      	bgt.n	8001fce <__gedf2+0xaa>
 8001fb8:	dbe8      	blt.n	8001f8c <__gedf2+0x68>
 8001fba:	454f      	cmp	r7, r9
 8001fbc:	d8d7      	bhi.n	8001f6e <__gedf2+0x4a>
 8001fbe:	d00e      	beq.n	8001fde <__gedf2+0xba>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	454f      	cmp	r7, r9
 8001fc4:	d2d7      	bcs.n	8001f76 <__gedf2+0x52>
 8001fc6:	2900      	cmp	r1, #0
 8001fc8:	d0e2      	beq.n	8001f90 <__gedf2+0x6c>
 8001fca:	0008      	movs	r0, r1
 8001fcc:	e7d3      	b.n	8001f76 <__gedf2+0x52>
 8001fce:	4243      	negs	r3, r0
 8001fd0:	4158      	adcs	r0, r3
 8001fd2:	0040      	lsls	r0, r0, #1
 8001fd4:	3801      	subs	r0, #1
 8001fd6:	e7ce      	b.n	8001f76 <__gedf2+0x52>
 8001fd8:	2002      	movs	r0, #2
 8001fda:	4240      	negs	r0, r0
 8001fdc:	e7cb      	b.n	8001f76 <__gedf2+0x52>
 8001fde:	45c4      	cmp	ip, r8
 8001fe0:	d8c5      	bhi.n	8001f6e <__gedf2+0x4a>
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	45c4      	cmp	ip, r8
 8001fe6:	d2c6      	bcs.n	8001f76 <__gedf2+0x52>
 8001fe8:	e7ed      	b.n	8001fc6 <__gedf2+0xa2>
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	000007ff 	.word	0x000007ff

08001ff0 <__ledf2>:
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	4647      	mov	r7, r8
 8001ff4:	46ce      	mov	lr, r9
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	0016      	movs	r6, r2
 8001ffc:	031b      	lsls	r3, r3, #12
 8001ffe:	0b1b      	lsrs	r3, r3, #12
 8002000:	4d2c      	ldr	r5, [pc, #176]	; (80020b4 <__ledf2+0xc4>)
 8002002:	004a      	lsls	r2, r1, #1
 8002004:	4699      	mov	r9, r3
 8002006:	b580      	push	{r7, lr}
 8002008:	0043      	lsls	r3, r0, #1
 800200a:	030f      	lsls	r7, r1, #12
 800200c:	46a4      	mov	ip, r4
 800200e:	46b0      	mov	r8, r6
 8002010:	0b3f      	lsrs	r7, r7, #12
 8002012:	0d52      	lsrs	r2, r2, #21
 8002014:	0fc9      	lsrs	r1, r1, #31
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	0fc0      	lsrs	r0, r0, #31
 800201a:	42aa      	cmp	r2, r5
 800201c:	d00d      	beq.n	800203a <__ledf2+0x4a>
 800201e:	42ab      	cmp	r3, r5
 8002020:	d010      	beq.n	8002044 <__ledf2+0x54>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d127      	bne.n	8002076 <__ledf2+0x86>
 8002026:	433c      	orrs	r4, r7
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <__ledf2+0x60>
 800202c:	464d      	mov	r5, r9
 800202e:	432e      	orrs	r6, r5
 8002030:	d10e      	bne.n	8002050 <__ledf2+0x60>
 8002032:	2000      	movs	r0, #0
 8002034:	2c00      	cmp	r4, #0
 8002036:	d015      	beq.n	8002064 <__ledf2+0x74>
 8002038:	e00e      	b.n	8002058 <__ledf2+0x68>
 800203a:	003d      	movs	r5, r7
 800203c:	4325      	orrs	r5, r4
 800203e:	d110      	bne.n	8002062 <__ledf2+0x72>
 8002040:	4293      	cmp	r3, r2
 8002042:	d118      	bne.n	8002076 <__ledf2+0x86>
 8002044:	464d      	mov	r5, r9
 8002046:	432e      	orrs	r6, r5
 8002048:	d10b      	bne.n	8002062 <__ledf2+0x72>
 800204a:	2a00      	cmp	r2, #0
 800204c:	d102      	bne.n	8002054 <__ledf2+0x64>
 800204e:	433c      	orrs	r4, r7
 8002050:	2c00      	cmp	r4, #0
 8002052:	d00b      	beq.n	800206c <__ledf2+0x7c>
 8002054:	4281      	cmp	r1, r0
 8002056:	d014      	beq.n	8002082 <__ledf2+0x92>
 8002058:	2002      	movs	r0, #2
 800205a:	3901      	subs	r1, #1
 800205c:	4008      	ands	r0, r1
 800205e:	3801      	subs	r0, #1
 8002060:	e000      	b.n	8002064 <__ledf2+0x74>
 8002062:	2002      	movs	r0, #2
 8002064:	bcc0      	pop	{r6, r7}
 8002066:	46b9      	mov	r9, r7
 8002068:	46b0      	mov	r8, r6
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206c:	2800      	cmp	r0, #0
 800206e:	d1f9      	bne.n	8002064 <__ledf2+0x74>
 8002070:	2001      	movs	r0, #1
 8002072:	4240      	negs	r0, r0
 8002074:	e7f6      	b.n	8002064 <__ledf2+0x74>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ec      	bne.n	8002054 <__ledf2+0x64>
 800207a:	464c      	mov	r4, r9
 800207c:	4326      	orrs	r6, r4
 800207e:	d1e9      	bne.n	8002054 <__ledf2+0x64>
 8002080:	e7ea      	b.n	8002058 <__ledf2+0x68>
 8002082:	429a      	cmp	r2, r3
 8002084:	dd04      	ble.n	8002090 <__ledf2+0xa0>
 8002086:	4243      	negs	r3, r0
 8002088:	4158      	adcs	r0, r3
 800208a:	0040      	lsls	r0, r0, #1
 800208c:	3801      	subs	r0, #1
 800208e:	e7e9      	b.n	8002064 <__ledf2+0x74>
 8002090:	429a      	cmp	r2, r3
 8002092:	dbeb      	blt.n	800206c <__ledf2+0x7c>
 8002094:	454f      	cmp	r7, r9
 8002096:	d8df      	bhi.n	8002058 <__ledf2+0x68>
 8002098:	d006      	beq.n	80020a8 <__ledf2+0xb8>
 800209a:	2000      	movs	r0, #0
 800209c:	454f      	cmp	r7, r9
 800209e:	d2e1      	bcs.n	8002064 <__ledf2+0x74>
 80020a0:	2900      	cmp	r1, #0
 80020a2:	d0e5      	beq.n	8002070 <__ledf2+0x80>
 80020a4:	0008      	movs	r0, r1
 80020a6:	e7dd      	b.n	8002064 <__ledf2+0x74>
 80020a8:	45c4      	cmp	ip, r8
 80020aa:	d8d5      	bhi.n	8002058 <__ledf2+0x68>
 80020ac:	2000      	movs	r0, #0
 80020ae:	45c4      	cmp	ip, r8
 80020b0:	d2d8      	bcs.n	8002064 <__ledf2+0x74>
 80020b2:	e7f5      	b.n	80020a0 <__ledf2+0xb0>
 80020b4:	000007ff 	.word	0x000007ff

080020b8 <__aeabi_dmul>:
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	4657      	mov	r7, sl
 80020bc:	464e      	mov	r6, r9
 80020be:	4645      	mov	r5, r8
 80020c0:	46de      	mov	lr, fp
 80020c2:	b5e0      	push	{r5, r6, r7, lr}
 80020c4:	4698      	mov	r8, r3
 80020c6:	030c      	lsls	r4, r1, #12
 80020c8:	004b      	lsls	r3, r1, #1
 80020ca:	0006      	movs	r6, r0
 80020cc:	4692      	mov	sl, r2
 80020ce:	b087      	sub	sp, #28
 80020d0:	0b24      	lsrs	r4, r4, #12
 80020d2:	0d5b      	lsrs	r3, r3, #21
 80020d4:	0fcf      	lsrs	r7, r1, #31
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d100      	bne.n	80020dc <__aeabi_dmul+0x24>
 80020da:	e15c      	b.n	8002396 <__aeabi_dmul+0x2de>
 80020dc:	4ad9      	ldr	r2, [pc, #868]	; (8002444 <__aeabi_dmul+0x38c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dmul+0x2c>
 80020e2:	e175      	b.n	80023d0 <__aeabi_dmul+0x318>
 80020e4:	0f42      	lsrs	r2, r0, #29
 80020e6:	00e4      	lsls	r4, r4, #3
 80020e8:	4314      	orrs	r4, r2
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	0412      	lsls	r2, r2, #16
 80020ee:	4314      	orrs	r4, r2
 80020f0:	4ad5      	ldr	r2, [pc, #852]	; (8002448 <__aeabi_dmul+0x390>)
 80020f2:	00c5      	lsls	r5, r0, #3
 80020f4:	4694      	mov	ip, r2
 80020f6:	4463      	add	r3, ip
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2300      	movs	r3, #0
 80020fc:	4699      	mov	r9, r3
 80020fe:	469b      	mov	fp, r3
 8002100:	4643      	mov	r3, r8
 8002102:	4642      	mov	r2, r8
 8002104:	031e      	lsls	r6, r3, #12
 8002106:	0fd2      	lsrs	r2, r2, #31
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4650      	mov	r0, sl
 800210c:	4690      	mov	r8, r2
 800210e:	0b36      	lsrs	r6, r6, #12
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	d100      	bne.n	8002116 <__aeabi_dmul+0x5e>
 8002114:	e120      	b.n	8002358 <__aeabi_dmul+0x2a0>
 8002116:	4acb      	ldr	r2, [pc, #812]	; (8002444 <__aeabi_dmul+0x38c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d100      	bne.n	800211e <__aeabi_dmul+0x66>
 800211c:	e162      	b.n	80023e4 <__aeabi_dmul+0x32c>
 800211e:	49ca      	ldr	r1, [pc, #808]	; (8002448 <__aeabi_dmul+0x390>)
 8002120:	0f42      	lsrs	r2, r0, #29
 8002122:	468c      	mov	ip, r1
 8002124:	9900      	ldr	r1, [sp, #0]
 8002126:	4463      	add	r3, ip
 8002128:	00f6      	lsls	r6, r6, #3
 800212a:	468c      	mov	ip, r1
 800212c:	4316      	orrs	r6, r2
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	449c      	add	ip, r3
 8002132:	0412      	lsls	r2, r2, #16
 8002134:	4663      	mov	r3, ip
 8002136:	4316      	orrs	r6, r2
 8002138:	00c2      	lsls	r2, r0, #3
 800213a:	2000      	movs	r0, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	9900      	ldr	r1, [sp, #0]
 8002140:	4643      	mov	r3, r8
 8002142:	3101      	adds	r1, #1
 8002144:	468c      	mov	ip, r1
 8002146:	4649      	mov	r1, r9
 8002148:	407b      	eors	r3, r7
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	290f      	cmp	r1, #15
 800214e:	d826      	bhi.n	800219e <__aeabi_dmul+0xe6>
 8002150:	4bbe      	ldr	r3, [pc, #760]	; (800244c <__aeabi_dmul+0x394>)
 8002152:	0089      	lsls	r1, r1, #2
 8002154:	5859      	ldr	r1, [r3, r1]
 8002156:	468f      	mov	pc, r1
 8002158:	4643      	mov	r3, r8
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	0034      	movs	r4, r6
 800215e:	0015      	movs	r5, r2
 8002160:	4683      	mov	fp, r0
 8002162:	465b      	mov	r3, fp
 8002164:	2b02      	cmp	r3, #2
 8002166:	d016      	beq.n	8002196 <__aeabi_dmul+0xde>
 8002168:	2b03      	cmp	r3, #3
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0xb6>
 800216c:	e203      	b.n	8002576 <__aeabi_dmul+0x4be>
 800216e:	2b01      	cmp	r3, #1
 8002170:	d000      	beq.n	8002174 <__aeabi_dmul+0xbc>
 8002172:	e0cd      	b.n	8002310 <__aeabi_dmul+0x258>
 8002174:	2200      	movs	r2, #0
 8002176:	2400      	movs	r4, #0
 8002178:	2500      	movs	r5, #0
 800217a:	9b01      	ldr	r3, [sp, #4]
 800217c:	0512      	lsls	r2, r2, #20
 800217e:	4322      	orrs	r2, r4
 8002180:	07db      	lsls	r3, r3, #31
 8002182:	431a      	orrs	r2, r3
 8002184:	0028      	movs	r0, r5
 8002186:	0011      	movs	r1, r2
 8002188:	b007      	add	sp, #28
 800218a:	bcf0      	pop	{r4, r5, r6, r7}
 800218c:	46bb      	mov	fp, r7
 800218e:	46b2      	mov	sl, r6
 8002190:	46a9      	mov	r9, r5
 8002192:	46a0      	mov	r8, r4
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	2400      	movs	r4, #0
 8002198:	2500      	movs	r5, #0
 800219a:	4aaa      	ldr	r2, [pc, #680]	; (8002444 <__aeabi_dmul+0x38c>)
 800219c:	e7ed      	b.n	800217a <__aeabi_dmul+0xc2>
 800219e:	0c28      	lsrs	r0, r5, #16
 80021a0:	042d      	lsls	r5, r5, #16
 80021a2:	0c2d      	lsrs	r5, r5, #16
 80021a4:	002b      	movs	r3, r5
 80021a6:	0c11      	lsrs	r1, r2, #16
 80021a8:	0412      	lsls	r2, r2, #16
 80021aa:	0c12      	lsrs	r2, r2, #16
 80021ac:	4353      	muls	r3, r2
 80021ae:	4698      	mov	r8, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	002f      	movs	r7, r5
 80021b4:	4343      	muls	r3, r0
 80021b6:	4699      	mov	r9, r3
 80021b8:	434f      	muls	r7, r1
 80021ba:	444f      	add	r7, r9
 80021bc:	46bb      	mov	fp, r7
 80021be:	4647      	mov	r7, r8
 80021c0:	000b      	movs	r3, r1
 80021c2:	0c3f      	lsrs	r7, r7, #16
 80021c4:	46ba      	mov	sl, r7
 80021c6:	4343      	muls	r3, r0
 80021c8:	44da      	add	sl, fp
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	45d1      	cmp	r9, sl
 80021ce:	d904      	bls.n	80021da <__aeabi_dmul+0x122>
 80021d0:	2780      	movs	r7, #128	; 0x80
 80021d2:	027f      	lsls	r7, r7, #9
 80021d4:	46b9      	mov	r9, r7
 80021d6:	444b      	add	r3, r9
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	4653      	mov	r3, sl
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	469b      	mov	fp, r3
 80021e0:	4653      	mov	r3, sl
 80021e2:	041f      	lsls	r7, r3, #16
 80021e4:	4643      	mov	r3, r8
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	4698      	mov	r8, r3
 80021ec:	003b      	movs	r3, r7
 80021ee:	4443      	add	r3, r8
 80021f0:	9304      	str	r3, [sp, #16]
 80021f2:	0c33      	lsrs	r3, r6, #16
 80021f4:	0436      	lsls	r6, r6, #16
 80021f6:	0c36      	lsrs	r6, r6, #16
 80021f8:	4698      	mov	r8, r3
 80021fa:	0033      	movs	r3, r6
 80021fc:	4343      	muls	r3, r0
 80021fe:	4699      	mov	r9, r3
 8002200:	4643      	mov	r3, r8
 8002202:	4343      	muls	r3, r0
 8002204:	002f      	movs	r7, r5
 8002206:	469a      	mov	sl, r3
 8002208:	4643      	mov	r3, r8
 800220a:	4377      	muls	r7, r6
 800220c:	435d      	muls	r5, r3
 800220e:	0c38      	lsrs	r0, r7, #16
 8002210:	444d      	add	r5, r9
 8002212:	1945      	adds	r5, r0, r5
 8002214:	45a9      	cmp	r9, r5
 8002216:	d903      	bls.n	8002220 <__aeabi_dmul+0x168>
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	025b      	lsls	r3, r3, #9
 800221c:	4699      	mov	r9, r3
 800221e:	44ca      	add	sl, r9
 8002220:	043f      	lsls	r7, r7, #16
 8002222:	0c28      	lsrs	r0, r5, #16
 8002224:	0c3f      	lsrs	r7, r7, #16
 8002226:	042d      	lsls	r5, r5, #16
 8002228:	19ed      	adds	r5, r5, r7
 800222a:	0c27      	lsrs	r7, r4, #16
 800222c:	0424      	lsls	r4, r4, #16
 800222e:	0c24      	lsrs	r4, r4, #16
 8002230:	0003      	movs	r3, r0
 8002232:	0020      	movs	r0, r4
 8002234:	4350      	muls	r0, r2
 8002236:	437a      	muls	r2, r7
 8002238:	4691      	mov	r9, r2
 800223a:	003a      	movs	r2, r7
 800223c:	4453      	add	r3, sl
 800223e:	9305      	str	r3, [sp, #20]
 8002240:	0c03      	lsrs	r3, r0, #16
 8002242:	469a      	mov	sl, r3
 8002244:	434a      	muls	r2, r1
 8002246:	4361      	muls	r1, r4
 8002248:	4449      	add	r1, r9
 800224a:	4451      	add	r1, sl
 800224c:	44ab      	add	fp, r5
 800224e:	4589      	cmp	r9, r1
 8002250:	d903      	bls.n	800225a <__aeabi_dmul+0x1a2>
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	025b      	lsls	r3, r3, #9
 8002256:	4699      	mov	r9, r3
 8002258:	444a      	add	r2, r9
 800225a:	0400      	lsls	r0, r0, #16
 800225c:	0c0b      	lsrs	r3, r1, #16
 800225e:	0c00      	lsrs	r0, r0, #16
 8002260:	0409      	lsls	r1, r1, #16
 8002262:	1809      	adds	r1, r1, r0
 8002264:	0020      	movs	r0, r4
 8002266:	4699      	mov	r9, r3
 8002268:	4643      	mov	r3, r8
 800226a:	4370      	muls	r0, r6
 800226c:	435c      	muls	r4, r3
 800226e:	437e      	muls	r6, r7
 8002270:	435f      	muls	r7, r3
 8002272:	0c03      	lsrs	r3, r0, #16
 8002274:	4698      	mov	r8, r3
 8002276:	19a4      	adds	r4, r4, r6
 8002278:	4444      	add	r4, r8
 800227a:	444a      	add	r2, r9
 800227c:	9703      	str	r7, [sp, #12]
 800227e:	42a6      	cmp	r6, r4
 8002280:	d904      	bls.n	800228c <__aeabi_dmul+0x1d4>
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	025b      	lsls	r3, r3, #9
 8002286:	4698      	mov	r8, r3
 8002288:	4447      	add	r7, r8
 800228a:	9703      	str	r7, [sp, #12]
 800228c:	0423      	lsls	r3, r4, #16
 800228e:	9e02      	ldr	r6, [sp, #8]
 8002290:	469a      	mov	sl, r3
 8002292:	9b05      	ldr	r3, [sp, #20]
 8002294:	445e      	add	r6, fp
 8002296:	4698      	mov	r8, r3
 8002298:	42ae      	cmp	r6, r5
 800229a:	41ad      	sbcs	r5, r5
 800229c:	1876      	adds	r6, r6, r1
 800229e:	428e      	cmp	r6, r1
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	0400      	lsls	r0, r0, #16
 80022a4:	0c00      	lsrs	r0, r0, #16
 80022a6:	4450      	add	r0, sl
 80022a8:	4440      	add	r0, r8
 80022aa:	426d      	negs	r5, r5
 80022ac:	1947      	adds	r7, r0, r5
 80022ae:	46b8      	mov	r8, r7
 80022b0:	4693      	mov	fp, r2
 80022b2:	4249      	negs	r1, r1
 80022b4:	4689      	mov	r9, r1
 80022b6:	44c3      	add	fp, r8
 80022b8:	44d9      	add	r9, fp
 80022ba:	4298      	cmp	r0, r3
 80022bc:	4180      	sbcs	r0, r0
 80022be:	45a8      	cmp	r8, r5
 80022c0:	41ad      	sbcs	r5, r5
 80022c2:	4593      	cmp	fp, r2
 80022c4:	4192      	sbcs	r2, r2
 80022c6:	4589      	cmp	r9, r1
 80022c8:	4189      	sbcs	r1, r1
 80022ca:	426d      	negs	r5, r5
 80022cc:	4240      	negs	r0, r0
 80022ce:	4328      	orrs	r0, r5
 80022d0:	0c24      	lsrs	r4, r4, #16
 80022d2:	4252      	negs	r2, r2
 80022d4:	4249      	negs	r1, r1
 80022d6:	430a      	orrs	r2, r1
 80022d8:	9b03      	ldr	r3, [sp, #12]
 80022da:	1900      	adds	r0, r0, r4
 80022dc:	1880      	adds	r0, r0, r2
 80022de:	18c7      	adds	r7, r0, r3
 80022e0:	464b      	mov	r3, r9
 80022e2:	0ddc      	lsrs	r4, r3, #23
 80022e4:	9b04      	ldr	r3, [sp, #16]
 80022e6:	0275      	lsls	r5, r6, #9
 80022e8:	431d      	orrs	r5, r3
 80022ea:	1e6a      	subs	r2, r5, #1
 80022ec:	4195      	sbcs	r5, r2
 80022ee:	464b      	mov	r3, r9
 80022f0:	0df6      	lsrs	r6, r6, #23
 80022f2:	027f      	lsls	r7, r7, #9
 80022f4:	4335      	orrs	r5, r6
 80022f6:	025a      	lsls	r2, r3, #9
 80022f8:	433c      	orrs	r4, r7
 80022fa:	4315      	orrs	r5, r2
 80022fc:	01fb      	lsls	r3, r7, #7
 80022fe:	d400      	bmi.n	8002302 <__aeabi_dmul+0x24a>
 8002300:	e11c      	b.n	800253c <__aeabi_dmul+0x484>
 8002302:	2101      	movs	r1, #1
 8002304:	086a      	lsrs	r2, r5, #1
 8002306:	400d      	ands	r5, r1
 8002308:	4315      	orrs	r5, r2
 800230a:	07e2      	lsls	r2, r4, #31
 800230c:	4315      	orrs	r5, r2
 800230e:	0864      	lsrs	r4, r4, #1
 8002310:	494f      	ldr	r1, [pc, #316]	; (8002450 <__aeabi_dmul+0x398>)
 8002312:	4461      	add	r1, ip
 8002314:	2900      	cmp	r1, #0
 8002316:	dc00      	bgt.n	800231a <__aeabi_dmul+0x262>
 8002318:	e0b0      	b.n	800247c <__aeabi_dmul+0x3c4>
 800231a:	076b      	lsls	r3, r5, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_dmul+0x27a>
 800231e:	220f      	movs	r2, #15
 8002320:	402a      	ands	r2, r5
 8002322:	2a04      	cmp	r2, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_dmul+0x27a>
 8002326:	1d2a      	adds	r2, r5, #4
 8002328:	42aa      	cmp	r2, r5
 800232a:	41ad      	sbcs	r5, r5
 800232c:	426d      	negs	r5, r5
 800232e:	1964      	adds	r4, r4, r5
 8002330:	0015      	movs	r5, r2
 8002332:	01e3      	lsls	r3, r4, #7
 8002334:	d504      	bpl.n	8002340 <__aeabi_dmul+0x288>
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	4a46      	ldr	r2, [pc, #280]	; (8002454 <__aeabi_dmul+0x39c>)
 800233a:	00c9      	lsls	r1, r1, #3
 800233c:	4014      	ands	r4, r2
 800233e:	4461      	add	r1, ip
 8002340:	4a45      	ldr	r2, [pc, #276]	; (8002458 <__aeabi_dmul+0x3a0>)
 8002342:	4291      	cmp	r1, r2
 8002344:	dd00      	ble.n	8002348 <__aeabi_dmul+0x290>
 8002346:	e726      	b.n	8002196 <__aeabi_dmul+0xde>
 8002348:	0762      	lsls	r2, r4, #29
 800234a:	08ed      	lsrs	r5, r5, #3
 800234c:	0264      	lsls	r4, r4, #9
 800234e:	0549      	lsls	r1, r1, #21
 8002350:	4315      	orrs	r5, r2
 8002352:	0b24      	lsrs	r4, r4, #12
 8002354:	0d4a      	lsrs	r2, r1, #21
 8002356:	e710      	b.n	800217a <__aeabi_dmul+0xc2>
 8002358:	4652      	mov	r2, sl
 800235a:	4332      	orrs	r2, r6
 800235c:	d100      	bne.n	8002360 <__aeabi_dmul+0x2a8>
 800235e:	e07f      	b.n	8002460 <__aeabi_dmul+0x3a8>
 8002360:	2e00      	cmp	r6, #0
 8002362:	d100      	bne.n	8002366 <__aeabi_dmul+0x2ae>
 8002364:	e0dc      	b.n	8002520 <__aeabi_dmul+0x468>
 8002366:	0030      	movs	r0, r6
 8002368:	f000 fe1e 	bl	8002fa8 <__clzsi2>
 800236c:	0002      	movs	r2, r0
 800236e:	3a0b      	subs	r2, #11
 8002370:	231d      	movs	r3, #29
 8002372:	0001      	movs	r1, r0
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	4652      	mov	r2, sl
 8002378:	3908      	subs	r1, #8
 800237a:	40da      	lsrs	r2, r3
 800237c:	408e      	lsls	r6, r1
 800237e:	4316      	orrs	r6, r2
 8002380:	4652      	mov	r2, sl
 8002382:	408a      	lsls	r2, r1
 8002384:	9b00      	ldr	r3, [sp, #0]
 8002386:	4935      	ldr	r1, [pc, #212]	; (800245c <__aeabi_dmul+0x3a4>)
 8002388:	1a18      	subs	r0, r3, r0
 800238a:	0003      	movs	r3, r0
 800238c:	468c      	mov	ip, r1
 800238e:	4463      	add	r3, ip
 8002390:	2000      	movs	r0, #0
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	e6d3      	b.n	800213e <__aeabi_dmul+0x86>
 8002396:	0025      	movs	r5, r4
 8002398:	4305      	orrs	r5, r0
 800239a:	d04a      	beq.n	8002432 <__aeabi_dmul+0x37a>
 800239c:	2c00      	cmp	r4, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dmul+0x2ea>
 80023a0:	e0b0      	b.n	8002504 <__aeabi_dmul+0x44c>
 80023a2:	0020      	movs	r0, r4
 80023a4:	f000 fe00 	bl	8002fa8 <__clzsi2>
 80023a8:	0001      	movs	r1, r0
 80023aa:	0002      	movs	r2, r0
 80023ac:	390b      	subs	r1, #11
 80023ae:	231d      	movs	r3, #29
 80023b0:	0010      	movs	r0, r2
 80023b2:	1a5b      	subs	r3, r3, r1
 80023b4:	0031      	movs	r1, r6
 80023b6:	0035      	movs	r5, r6
 80023b8:	3808      	subs	r0, #8
 80023ba:	4084      	lsls	r4, r0
 80023bc:	40d9      	lsrs	r1, r3
 80023be:	4085      	lsls	r5, r0
 80023c0:	430c      	orrs	r4, r1
 80023c2:	4826      	ldr	r0, [pc, #152]	; (800245c <__aeabi_dmul+0x3a4>)
 80023c4:	1a83      	subs	r3, r0, r2
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	4699      	mov	r9, r3
 80023cc:	469b      	mov	fp, r3
 80023ce:	e697      	b.n	8002100 <__aeabi_dmul+0x48>
 80023d0:	0005      	movs	r5, r0
 80023d2:	4325      	orrs	r5, r4
 80023d4:	d126      	bne.n	8002424 <__aeabi_dmul+0x36c>
 80023d6:	2208      	movs	r2, #8
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2302      	movs	r3, #2
 80023dc:	2400      	movs	r4, #0
 80023de:	4691      	mov	r9, r2
 80023e0:	469b      	mov	fp, r3
 80023e2:	e68d      	b.n	8002100 <__aeabi_dmul+0x48>
 80023e4:	4652      	mov	r2, sl
 80023e6:	9b00      	ldr	r3, [sp, #0]
 80023e8:	4332      	orrs	r2, r6
 80023ea:	d110      	bne.n	800240e <__aeabi_dmul+0x356>
 80023ec:	4915      	ldr	r1, [pc, #84]	; (8002444 <__aeabi_dmul+0x38c>)
 80023ee:	2600      	movs	r6, #0
 80023f0:	468c      	mov	ip, r1
 80023f2:	4463      	add	r3, ip
 80023f4:	4649      	mov	r1, r9
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2302      	movs	r3, #2
 80023fa:	4319      	orrs	r1, r3
 80023fc:	4689      	mov	r9, r1
 80023fe:	2002      	movs	r0, #2
 8002400:	e69d      	b.n	800213e <__aeabi_dmul+0x86>
 8002402:	465b      	mov	r3, fp
 8002404:	9701      	str	r7, [sp, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d000      	beq.n	800240c <__aeabi_dmul+0x354>
 800240a:	e6ad      	b.n	8002168 <__aeabi_dmul+0xb0>
 800240c:	e6c3      	b.n	8002196 <__aeabi_dmul+0xde>
 800240e:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <__aeabi_dmul+0x38c>)
 8002410:	2003      	movs	r0, #3
 8002412:	4694      	mov	ip, r2
 8002414:	4463      	add	r3, ip
 8002416:	464a      	mov	r2, r9
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2303      	movs	r3, #3
 800241c:	431a      	orrs	r2, r3
 800241e:	4691      	mov	r9, r2
 8002420:	4652      	mov	r2, sl
 8002422:	e68c      	b.n	800213e <__aeabi_dmul+0x86>
 8002424:	220c      	movs	r2, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2303      	movs	r3, #3
 800242a:	0005      	movs	r5, r0
 800242c:	4691      	mov	r9, r2
 800242e:	469b      	mov	fp, r3
 8002430:	e666      	b.n	8002100 <__aeabi_dmul+0x48>
 8002432:	2304      	movs	r3, #4
 8002434:	4699      	mov	r9, r3
 8002436:	2300      	movs	r3, #0
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	2400      	movs	r4, #0
 800243e:	469b      	mov	fp, r3
 8002440:	e65e      	b.n	8002100 <__aeabi_dmul+0x48>
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	000007ff 	.word	0x000007ff
 8002448:	fffffc01 	.word	0xfffffc01
 800244c:	08012b30 	.word	0x08012b30
 8002450:	000003ff 	.word	0x000003ff
 8002454:	feffffff 	.word	0xfeffffff
 8002458:	000007fe 	.word	0x000007fe
 800245c:	fffffc0d 	.word	0xfffffc0d
 8002460:	4649      	mov	r1, r9
 8002462:	2301      	movs	r3, #1
 8002464:	4319      	orrs	r1, r3
 8002466:	4689      	mov	r9, r1
 8002468:	2600      	movs	r6, #0
 800246a:	2001      	movs	r0, #1
 800246c:	e667      	b.n	800213e <__aeabi_dmul+0x86>
 800246e:	2300      	movs	r3, #0
 8002470:	2480      	movs	r4, #128	; 0x80
 8002472:	2500      	movs	r5, #0
 8002474:	4a43      	ldr	r2, [pc, #268]	; (8002584 <__aeabi_dmul+0x4cc>)
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	0324      	lsls	r4, r4, #12
 800247a:	e67e      	b.n	800217a <__aeabi_dmul+0xc2>
 800247c:	2001      	movs	r0, #1
 800247e:	1a40      	subs	r0, r0, r1
 8002480:	2838      	cmp	r0, #56	; 0x38
 8002482:	dd00      	ble.n	8002486 <__aeabi_dmul+0x3ce>
 8002484:	e676      	b.n	8002174 <__aeabi_dmul+0xbc>
 8002486:	281f      	cmp	r0, #31
 8002488:	dd5b      	ble.n	8002542 <__aeabi_dmul+0x48a>
 800248a:	221f      	movs	r2, #31
 800248c:	0023      	movs	r3, r4
 800248e:	4252      	negs	r2, r2
 8002490:	1a51      	subs	r1, r2, r1
 8002492:	40cb      	lsrs	r3, r1
 8002494:	0019      	movs	r1, r3
 8002496:	2820      	cmp	r0, #32
 8002498:	d003      	beq.n	80024a2 <__aeabi_dmul+0x3ea>
 800249a:	4a3b      	ldr	r2, [pc, #236]	; (8002588 <__aeabi_dmul+0x4d0>)
 800249c:	4462      	add	r2, ip
 800249e:	4094      	lsls	r4, r2
 80024a0:	4325      	orrs	r5, r4
 80024a2:	1e6a      	subs	r2, r5, #1
 80024a4:	4195      	sbcs	r5, r2
 80024a6:	002a      	movs	r2, r5
 80024a8:	430a      	orrs	r2, r1
 80024aa:	2107      	movs	r1, #7
 80024ac:	000d      	movs	r5, r1
 80024ae:	2400      	movs	r4, #0
 80024b0:	4015      	ands	r5, r2
 80024b2:	4211      	tst	r1, r2
 80024b4:	d05b      	beq.n	800256e <__aeabi_dmul+0x4b6>
 80024b6:	210f      	movs	r1, #15
 80024b8:	2400      	movs	r4, #0
 80024ba:	4011      	ands	r1, r2
 80024bc:	2904      	cmp	r1, #4
 80024be:	d053      	beq.n	8002568 <__aeabi_dmul+0x4b0>
 80024c0:	1d11      	adds	r1, r2, #4
 80024c2:	4291      	cmp	r1, r2
 80024c4:	4192      	sbcs	r2, r2
 80024c6:	4252      	negs	r2, r2
 80024c8:	18a4      	adds	r4, r4, r2
 80024ca:	000a      	movs	r2, r1
 80024cc:	0223      	lsls	r3, r4, #8
 80024ce:	d54b      	bpl.n	8002568 <__aeabi_dmul+0x4b0>
 80024d0:	2201      	movs	r2, #1
 80024d2:	2400      	movs	r4, #0
 80024d4:	2500      	movs	r5, #0
 80024d6:	e650      	b.n	800217a <__aeabi_dmul+0xc2>
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	031b      	lsls	r3, r3, #12
 80024dc:	421c      	tst	r4, r3
 80024de:	d009      	beq.n	80024f4 <__aeabi_dmul+0x43c>
 80024e0:	421e      	tst	r6, r3
 80024e2:	d107      	bne.n	80024f4 <__aeabi_dmul+0x43c>
 80024e4:	4333      	orrs	r3, r6
 80024e6:	031c      	lsls	r4, r3, #12
 80024e8:	4643      	mov	r3, r8
 80024ea:	0015      	movs	r5, r2
 80024ec:	0b24      	lsrs	r4, r4, #12
 80024ee:	4a25      	ldr	r2, [pc, #148]	; (8002584 <__aeabi_dmul+0x4cc>)
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	e642      	b.n	800217a <__aeabi_dmul+0xc2>
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	0312      	lsls	r2, r2, #12
 80024f8:	4314      	orrs	r4, r2
 80024fa:	0324      	lsls	r4, r4, #12
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <__aeabi_dmul+0x4cc>)
 80024fe:	0b24      	lsrs	r4, r4, #12
 8002500:	9701      	str	r7, [sp, #4]
 8002502:	e63a      	b.n	800217a <__aeabi_dmul+0xc2>
 8002504:	f000 fd50 	bl	8002fa8 <__clzsi2>
 8002508:	0001      	movs	r1, r0
 800250a:	0002      	movs	r2, r0
 800250c:	3115      	adds	r1, #21
 800250e:	3220      	adds	r2, #32
 8002510:	291c      	cmp	r1, #28
 8002512:	dc00      	bgt.n	8002516 <__aeabi_dmul+0x45e>
 8002514:	e74b      	b.n	80023ae <__aeabi_dmul+0x2f6>
 8002516:	0034      	movs	r4, r6
 8002518:	3808      	subs	r0, #8
 800251a:	2500      	movs	r5, #0
 800251c:	4084      	lsls	r4, r0
 800251e:	e750      	b.n	80023c2 <__aeabi_dmul+0x30a>
 8002520:	f000 fd42 	bl	8002fa8 <__clzsi2>
 8002524:	0003      	movs	r3, r0
 8002526:	001a      	movs	r2, r3
 8002528:	3215      	adds	r2, #21
 800252a:	3020      	adds	r0, #32
 800252c:	2a1c      	cmp	r2, #28
 800252e:	dc00      	bgt.n	8002532 <__aeabi_dmul+0x47a>
 8002530:	e71e      	b.n	8002370 <__aeabi_dmul+0x2b8>
 8002532:	4656      	mov	r6, sl
 8002534:	3b08      	subs	r3, #8
 8002536:	2200      	movs	r2, #0
 8002538:	409e      	lsls	r6, r3
 800253a:	e723      	b.n	8002384 <__aeabi_dmul+0x2cc>
 800253c:	9b00      	ldr	r3, [sp, #0]
 800253e:	469c      	mov	ip, r3
 8002540:	e6e6      	b.n	8002310 <__aeabi_dmul+0x258>
 8002542:	4912      	ldr	r1, [pc, #72]	; (800258c <__aeabi_dmul+0x4d4>)
 8002544:	0022      	movs	r2, r4
 8002546:	4461      	add	r1, ip
 8002548:	002e      	movs	r6, r5
 800254a:	408d      	lsls	r5, r1
 800254c:	408a      	lsls	r2, r1
 800254e:	40c6      	lsrs	r6, r0
 8002550:	1e69      	subs	r1, r5, #1
 8002552:	418d      	sbcs	r5, r1
 8002554:	4332      	orrs	r2, r6
 8002556:	432a      	orrs	r2, r5
 8002558:	40c4      	lsrs	r4, r0
 800255a:	0753      	lsls	r3, r2, #29
 800255c:	d0b6      	beq.n	80024cc <__aeabi_dmul+0x414>
 800255e:	210f      	movs	r1, #15
 8002560:	4011      	ands	r1, r2
 8002562:	2904      	cmp	r1, #4
 8002564:	d1ac      	bne.n	80024c0 <__aeabi_dmul+0x408>
 8002566:	e7b1      	b.n	80024cc <__aeabi_dmul+0x414>
 8002568:	0765      	lsls	r5, r4, #29
 800256a:	0264      	lsls	r4, r4, #9
 800256c:	0b24      	lsrs	r4, r4, #12
 800256e:	08d2      	lsrs	r2, r2, #3
 8002570:	4315      	orrs	r5, r2
 8002572:	2200      	movs	r2, #0
 8002574:	e601      	b.n	800217a <__aeabi_dmul+0xc2>
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	0312      	lsls	r2, r2, #12
 800257a:	4314      	orrs	r4, r2
 800257c:	0324      	lsls	r4, r4, #12
 800257e:	4a01      	ldr	r2, [pc, #4]	; (8002584 <__aeabi_dmul+0x4cc>)
 8002580:	0b24      	lsrs	r4, r4, #12
 8002582:	e5fa      	b.n	800217a <__aeabi_dmul+0xc2>
 8002584:	000007ff 	.word	0x000007ff
 8002588:	0000043e 	.word	0x0000043e
 800258c:	0000041e 	.word	0x0000041e

08002590 <__aeabi_dsub>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	4657      	mov	r7, sl
 8002594:	464e      	mov	r6, r9
 8002596:	4645      	mov	r5, r8
 8002598:	46de      	mov	lr, fp
 800259a:	b5e0      	push	{r5, r6, r7, lr}
 800259c:	001e      	movs	r6, r3
 800259e:	0017      	movs	r7, r2
 80025a0:	004a      	lsls	r2, r1, #1
 80025a2:	030b      	lsls	r3, r1, #12
 80025a4:	0d52      	lsrs	r2, r2, #21
 80025a6:	0a5b      	lsrs	r3, r3, #9
 80025a8:	4690      	mov	r8, r2
 80025aa:	0f42      	lsrs	r2, r0, #29
 80025ac:	431a      	orrs	r2, r3
 80025ae:	0fcd      	lsrs	r5, r1, #31
 80025b0:	4ccd      	ldr	r4, [pc, #820]	; (80028e8 <__aeabi_dsub+0x358>)
 80025b2:	0331      	lsls	r1, r6, #12
 80025b4:	00c3      	lsls	r3, r0, #3
 80025b6:	4694      	mov	ip, r2
 80025b8:	0070      	lsls	r0, r6, #1
 80025ba:	0f7a      	lsrs	r2, r7, #29
 80025bc:	0a49      	lsrs	r1, r1, #9
 80025be:	00ff      	lsls	r7, r7, #3
 80025c0:	469a      	mov	sl, r3
 80025c2:	46b9      	mov	r9, r7
 80025c4:	0d40      	lsrs	r0, r0, #21
 80025c6:	0ff6      	lsrs	r6, r6, #31
 80025c8:	4311      	orrs	r1, r2
 80025ca:	42a0      	cmp	r0, r4
 80025cc:	d100      	bne.n	80025d0 <__aeabi_dsub+0x40>
 80025ce:	e0b1      	b.n	8002734 <__aeabi_dsub+0x1a4>
 80025d0:	2201      	movs	r2, #1
 80025d2:	4056      	eors	r6, r2
 80025d4:	46b3      	mov	fp, r6
 80025d6:	42b5      	cmp	r5, r6
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x4c>
 80025da:	e088      	b.n	80026ee <__aeabi_dsub+0x15e>
 80025dc:	4642      	mov	r2, r8
 80025de:	1a12      	subs	r2, r2, r0
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	dc00      	bgt.n	80025e6 <__aeabi_dsub+0x56>
 80025e4:	e0ae      	b.n	8002744 <__aeabi_dsub+0x1b4>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x5c>
 80025ea:	e0c1      	b.n	8002770 <__aeabi_dsub+0x1e0>
 80025ec:	48be      	ldr	r0, [pc, #760]	; (80028e8 <__aeabi_dsub+0x358>)
 80025ee:	4580      	cmp	r8, r0
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x64>
 80025f2:	e151      	b.n	8002898 <__aeabi_dsub+0x308>
 80025f4:	2080      	movs	r0, #128	; 0x80
 80025f6:	0400      	lsls	r0, r0, #16
 80025f8:	4301      	orrs	r1, r0
 80025fa:	2a38      	cmp	r2, #56	; 0x38
 80025fc:	dd00      	ble.n	8002600 <__aeabi_dsub+0x70>
 80025fe:	e17b      	b.n	80028f8 <__aeabi_dsub+0x368>
 8002600:	2a1f      	cmp	r2, #31
 8002602:	dd00      	ble.n	8002606 <__aeabi_dsub+0x76>
 8002604:	e1ee      	b.n	80029e4 <__aeabi_dsub+0x454>
 8002606:	2020      	movs	r0, #32
 8002608:	003e      	movs	r6, r7
 800260a:	1a80      	subs	r0, r0, r2
 800260c:	000c      	movs	r4, r1
 800260e:	40d6      	lsrs	r6, r2
 8002610:	40d1      	lsrs	r1, r2
 8002612:	4087      	lsls	r7, r0
 8002614:	4662      	mov	r2, ip
 8002616:	4084      	lsls	r4, r0
 8002618:	1a52      	subs	r2, r2, r1
 800261a:	1e78      	subs	r0, r7, #1
 800261c:	4187      	sbcs	r7, r0
 800261e:	4694      	mov	ip, r2
 8002620:	4334      	orrs	r4, r6
 8002622:	4327      	orrs	r7, r4
 8002624:	1bdc      	subs	r4, r3, r7
 8002626:	42a3      	cmp	r3, r4
 8002628:	419b      	sbcs	r3, r3
 800262a:	4662      	mov	r2, ip
 800262c:	425b      	negs	r3, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	4699      	mov	r9, r3
 8002632:	464b      	mov	r3, r9
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	d400      	bmi.n	800263a <__aeabi_dsub+0xaa>
 8002638:	e118      	b.n	800286c <__aeabi_dsub+0x2dc>
 800263a:	464b      	mov	r3, r9
 800263c:	0258      	lsls	r0, r3, #9
 800263e:	0a43      	lsrs	r3, r0, #9
 8002640:	4699      	mov	r9, r3
 8002642:	464b      	mov	r3, r9
 8002644:	2b00      	cmp	r3, #0
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0xba>
 8002648:	e137      	b.n	80028ba <__aeabi_dsub+0x32a>
 800264a:	4648      	mov	r0, r9
 800264c:	f000 fcac 	bl	8002fa8 <__clzsi2>
 8002650:	0001      	movs	r1, r0
 8002652:	3908      	subs	r1, #8
 8002654:	2320      	movs	r3, #32
 8002656:	0022      	movs	r2, r4
 8002658:	4648      	mov	r0, r9
 800265a:	1a5b      	subs	r3, r3, r1
 800265c:	40da      	lsrs	r2, r3
 800265e:	4088      	lsls	r0, r1
 8002660:	408c      	lsls	r4, r1
 8002662:	4643      	mov	r3, r8
 8002664:	4310      	orrs	r0, r2
 8002666:	4588      	cmp	r8, r1
 8002668:	dd00      	ble.n	800266c <__aeabi_dsub+0xdc>
 800266a:	e136      	b.n	80028da <__aeabi_dsub+0x34a>
 800266c:	1ac9      	subs	r1, r1, r3
 800266e:	1c4b      	adds	r3, r1, #1
 8002670:	2b1f      	cmp	r3, #31
 8002672:	dd00      	ble.n	8002676 <__aeabi_dsub+0xe6>
 8002674:	e0ea      	b.n	800284c <__aeabi_dsub+0x2bc>
 8002676:	2220      	movs	r2, #32
 8002678:	0026      	movs	r6, r4
 800267a:	1ad2      	subs	r2, r2, r3
 800267c:	0001      	movs	r1, r0
 800267e:	4094      	lsls	r4, r2
 8002680:	40de      	lsrs	r6, r3
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2300      	movs	r3, #0
 8002686:	4091      	lsls	r1, r2
 8002688:	1e62      	subs	r2, r4, #1
 800268a:	4194      	sbcs	r4, r2
 800268c:	4681      	mov	r9, r0
 800268e:	4698      	mov	r8, r3
 8002690:	4331      	orrs	r1, r6
 8002692:	430c      	orrs	r4, r1
 8002694:	0763      	lsls	r3, r4, #29
 8002696:	d009      	beq.n	80026ac <__aeabi_dsub+0x11c>
 8002698:	230f      	movs	r3, #15
 800269a:	4023      	ands	r3, r4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d005      	beq.n	80026ac <__aeabi_dsub+0x11c>
 80026a0:	1d23      	adds	r3, r4, #4
 80026a2:	42a3      	cmp	r3, r4
 80026a4:	41a4      	sbcs	r4, r4
 80026a6:	4264      	negs	r4, r4
 80026a8:	44a1      	add	r9, r4
 80026aa:	001c      	movs	r4, r3
 80026ac:	464b      	mov	r3, r9
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	d400      	bmi.n	80026b4 <__aeabi_dsub+0x124>
 80026b2:	e0de      	b.n	8002872 <__aeabi_dsub+0x2e2>
 80026b4:	4641      	mov	r1, r8
 80026b6:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <__aeabi_dsub+0x358>)
 80026b8:	3101      	adds	r1, #1
 80026ba:	4299      	cmp	r1, r3
 80026bc:	d100      	bne.n	80026c0 <__aeabi_dsub+0x130>
 80026be:	e0e7      	b.n	8002890 <__aeabi_dsub+0x300>
 80026c0:	464b      	mov	r3, r9
 80026c2:	488a      	ldr	r0, [pc, #552]	; (80028ec <__aeabi_dsub+0x35c>)
 80026c4:	08e4      	lsrs	r4, r4, #3
 80026c6:	4003      	ands	r3, r0
 80026c8:	0018      	movs	r0, r3
 80026ca:	0549      	lsls	r1, r1, #21
 80026cc:	075b      	lsls	r3, r3, #29
 80026ce:	0240      	lsls	r0, r0, #9
 80026d0:	4323      	orrs	r3, r4
 80026d2:	0d4a      	lsrs	r2, r1, #21
 80026d4:	0b04      	lsrs	r4, r0, #12
 80026d6:	0512      	lsls	r2, r2, #20
 80026d8:	07ed      	lsls	r5, r5, #31
 80026da:	4322      	orrs	r2, r4
 80026dc:	432a      	orrs	r2, r5
 80026de:	0018      	movs	r0, r3
 80026e0:	0011      	movs	r1, r2
 80026e2:	bcf0      	pop	{r4, r5, r6, r7}
 80026e4:	46bb      	mov	fp, r7
 80026e6:	46b2      	mov	sl, r6
 80026e8:	46a9      	mov	r9, r5
 80026ea:	46a0      	mov	r8, r4
 80026ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ee:	4642      	mov	r2, r8
 80026f0:	1a12      	subs	r2, r2, r0
 80026f2:	2a00      	cmp	r2, #0
 80026f4:	dd52      	ble.n	800279c <__aeabi_dsub+0x20c>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d100      	bne.n	80026fc <__aeabi_dsub+0x16c>
 80026fa:	e09c      	b.n	8002836 <__aeabi_dsub+0x2a6>
 80026fc:	45a0      	cmp	r8, r4
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x172>
 8002700:	e0ca      	b.n	8002898 <__aeabi_dsub+0x308>
 8002702:	2080      	movs	r0, #128	; 0x80
 8002704:	0400      	lsls	r0, r0, #16
 8002706:	4301      	orrs	r1, r0
 8002708:	2a38      	cmp	r2, #56	; 0x38
 800270a:	dd00      	ble.n	800270e <__aeabi_dsub+0x17e>
 800270c:	e149      	b.n	80029a2 <__aeabi_dsub+0x412>
 800270e:	2a1f      	cmp	r2, #31
 8002710:	dc00      	bgt.n	8002714 <__aeabi_dsub+0x184>
 8002712:	e197      	b.n	8002a44 <__aeabi_dsub+0x4b4>
 8002714:	0010      	movs	r0, r2
 8002716:	000e      	movs	r6, r1
 8002718:	3820      	subs	r0, #32
 800271a:	40c6      	lsrs	r6, r0
 800271c:	2a20      	cmp	r2, #32
 800271e:	d004      	beq.n	800272a <__aeabi_dsub+0x19a>
 8002720:	2040      	movs	r0, #64	; 0x40
 8002722:	1a82      	subs	r2, r0, r2
 8002724:	4091      	lsls	r1, r2
 8002726:	430f      	orrs	r7, r1
 8002728:	46b9      	mov	r9, r7
 800272a:	464c      	mov	r4, r9
 800272c:	1e62      	subs	r2, r4, #1
 800272e:	4194      	sbcs	r4, r2
 8002730:	4334      	orrs	r4, r6
 8002732:	e13a      	b.n	80029aa <__aeabi_dsub+0x41a>
 8002734:	000a      	movs	r2, r1
 8002736:	433a      	orrs	r2, r7
 8002738:	d028      	beq.n	800278c <__aeabi_dsub+0x1fc>
 800273a:	46b3      	mov	fp, r6
 800273c:	42b5      	cmp	r5, r6
 800273e:	d02b      	beq.n	8002798 <__aeabi_dsub+0x208>
 8002740:	4a6b      	ldr	r2, [pc, #428]	; (80028f0 <__aeabi_dsub+0x360>)
 8002742:	4442      	add	r2, r8
 8002744:	2a00      	cmp	r2, #0
 8002746:	d05d      	beq.n	8002804 <__aeabi_dsub+0x274>
 8002748:	4642      	mov	r2, r8
 800274a:	4644      	mov	r4, r8
 800274c:	1a82      	subs	r2, r0, r2
 800274e:	2c00      	cmp	r4, #0
 8002750:	d000      	beq.n	8002754 <__aeabi_dsub+0x1c4>
 8002752:	e0f5      	b.n	8002940 <__aeabi_dsub+0x3b0>
 8002754:	4665      	mov	r5, ip
 8002756:	431d      	orrs	r5, r3
 8002758:	d100      	bne.n	800275c <__aeabi_dsub+0x1cc>
 800275a:	e19c      	b.n	8002a96 <__aeabi_dsub+0x506>
 800275c:	1e55      	subs	r5, r2, #1
 800275e:	2a01      	cmp	r2, #1
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x1d4>
 8002762:	e1fb      	b.n	8002b5c <__aeabi_dsub+0x5cc>
 8002764:	4c60      	ldr	r4, [pc, #384]	; (80028e8 <__aeabi_dsub+0x358>)
 8002766:	42a2      	cmp	r2, r4
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x1dc>
 800276a:	e1bd      	b.n	8002ae8 <__aeabi_dsub+0x558>
 800276c:	002a      	movs	r2, r5
 800276e:	e0f0      	b.n	8002952 <__aeabi_dsub+0x3c2>
 8002770:	0008      	movs	r0, r1
 8002772:	4338      	orrs	r0, r7
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x1e8>
 8002776:	e0c3      	b.n	8002900 <__aeabi_dsub+0x370>
 8002778:	1e50      	subs	r0, r2, #1
 800277a:	2a01      	cmp	r2, #1
 800277c:	d100      	bne.n	8002780 <__aeabi_dsub+0x1f0>
 800277e:	e1a8      	b.n	8002ad2 <__aeabi_dsub+0x542>
 8002780:	4c59      	ldr	r4, [pc, #356]	; (80028e8 <__aeabi_dsub+0x358>)
 8002782:	42a2      	cmp	r2, r4
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x1f8>
 8002786:	e087      	b.n	8002898 <__aeabi_dsub+0x308>
 8002788:	0002      	movs	r2, r0
 800278a:	e736      	b.n	80025fa <__aeabi_dsub+0x6a>
 800278c:	2201      	movs	r2, #1
 800278e:	4056      	eors	r6, r2
 8002790:	46b3      	mov	fp, r6
 8002792:	42b5      	cmp	r5, r6
 8002794:	d000      	beq.n	8002798 <__aeabi_dsub+0x208>
 8002796:	e721      	b.n	80025dc <__aeabi_dsub+0x4c>
 8002798:	4a55      	ldr	r2, [pc, #340]	; (80028f0 <__aeabi_dsub+0x360>)
 800279a:	4442      	add	r2, r8
 800279c:	2a00      	cmp	r2, #0
 800279e:	d100      	bne.n	80027a2 <__aeabi_dsub+0x212>
 80027a0:	e0b5      	b.n	800290e <__aeabi_dsub+0x37e>
 80027a2:	4642      	mov	r2, r8
 80027a4:	4644      	mov	r4, r8
 80027a6:	1a82      	subs	r2, r0, r2
 80027a8:	2c00      	cmp	r4, #0
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x21e>
 80027ac:	e138      	b.n	8002a20 <__aeabi_dsub+0x490>
 80027ae:	4e4e      	ldr	r6, [pc, #312]	; (80028e8 <__aeabi_dsub+0x358>)
 80027b0:	42b0      	cmp	r0, r6
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x226>
 80027b4:	e1de      	b.n	8002b74 <__aeabi_dsub+0x5e4>
 80027b6:	2680      	movs	r6, #128	; 0x80
 80027b8:	4664      	mov	r4, ip
 80027ba:	0436      	lsls	r6, r6, #16
 80027bc:	4334      	orrs	r4, r6
 80027be:	46a4      	mov	ip, r4
 80027c0:	2a38      	cmp	r2, #56	; 0x38
 80027c2:	dd00      	ble.n	80027c6 <__aeabi_dsub+0x236>
 80027c4:	e196      	b.n	8002af4 <__aeabi_dsub+0x564>
 80027c6:	2a1f      	cmp	r2, #31
 80027c8:	dd00      	ble.n	80027cc <__aeabi_dsub+0x23c>
 80027ca:	e224      	b.n	8002c16 <__aeabi_dsub+0x686>
 80027cc:	2620      	movs	r6, #32
 80027ce:	1ab4      	subs	r4, r6, r2
 80027d0:	46a2      	mov	sl, r4
 80027d2:	4664      	mov	r4, ip
 80027d4:	4656      	mov	r6, sl
 80027d6:	40b4      	lsls	r4, r6
 80027d8:	46a1      	mov	r9, r4
 80027da:	001c      	movs	r4, r3
 80027dc:	464e      	mov	r6, r9
 80027de:	40d4      	lsrs	r4, r2
 80027e0:	4326      	orrs	r6, r4
 80027e2:	0034      	movs	r4, r6
 80027e4:	4656      	mov	r6, sl
 80027e6:	40b3      	lsls	r3, r6
 80027e8:	1e5e      	subs	r6, r3, #1
 80027ea:	41b3      	sbcs	r3, r6
 80027ec:	431c      	orrs	r4, r3
 80027ee:	4663      	mov	r3, ip
 80027f0:	40d3      	lsrs	r3, r2
 80027f2:	18c9      	adds	r1, r1, r3
 80027f4:	19e4      	adds	r4, r4, r7
 80027f6:	42bc      	cmp	r4, r7
 80027f8:	41bf      	sbcs	r7, r7
 80027fa:	427f      	negs	r7, r7
 80027fc:	46b9      	mov	r9, r7
 80027fe:	4680      	mov	r8, r0
 8002800:	4489      	add	r9, r1
 8002802:	e0d8      	b.n	80029b6 <__aeabi_dsub+0x426>
 8002804:	4640      	mov	r0, r8
 8002806:	4c3b      	ldr	r4, [pc, #236]	; (80028f4 <__aeabi_dsub+0x364>)
 8002808:	3001      	adds	r0, #1
 800280a:	4220      	tst	r0, r4
 800280c:	d000      	beq.n	8002810 <__aeabi_dsub+0x280>
 800280e:	e0b4      	b.n	800297a <__aeabi_dsub+0x3ea>
 8002810:	4640      	mov	r0, r8
 8002812:	2800      	cmp	r0, #0
 8002814:	d000      	beq.n	8002818 <__aeabi_dsub+0x288>
 8002816:	e144      	b.n	8002aa2 <__aeabi_dsub+0x512>
 8002818:	4660      	mov	r0, ip
 800281a:	4318      	orrs	r0, r3
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x290>
 800281e:	e190      	b.n	8002b42 <__aeabi_dsub+0x5b2>
 8002820:	0008      	movs	r0, r1
 8002822:	4338      	orrs	r0, r7
 8002824:	d000      	beq.n	8002828 <__aeabi_dsub+0x298>
 8002826:	e1aa      	b.n	8002b7e <__aeabi_dsub+0x5ee>
 8002828:	4661      	mov	r1, ip
 800282a:	08db      	lsrs	r3, r3, #3
 800282c:	0749      	lsls	r1, r1, #29
 800282e:	430b      	orrs	r3, r1
 8002830:	4661      	mov	r1, ip
 8002832:	08cc      	lsrs	r4, r1, #3
 8002834:	e027      	b.n	8002886 <__aeabi_dsub+0x2f6>
 8002836:	0008      	movs	r0, r1
 8002838:	4338      	orrs	r0, r7
 800283a:	d061      	beq.n	8002900 <__aeabi_dsub+0x370>
 800283c:	1e50      	subs	r0, r2, #1
 800283e:	2a01      	cmp	r2, #1
 8002840:	d100      	bne.n	8002844 <__aeabi_dsub+0x2b4>
 8002842:	e139      	b.n	8002ab8 <__aeabi_dsub+0x528>
 8002844:	42a2      	cmp	r2, r4
 8002846:	d027      	beq.n	8002898 <__aeabi_dsub+0x308>
 8002848:	0002      	movs	r2, r0
 800284a:	e75d      	b.n	8002708 <__aeabi_dsub+0x178>
 800284c:	0002      	movs	r2, r0
 800284e:	391f      	subs	r1, #31
 8002850:	40ca      	lsrs	r2, r1
 8002852:	0011      	movs	r1, r2
 8002854:	2b20      	cmp	r3, #32
 8002856:	d003      	beq.n	8002860 <__aeabi_dsub+0x2d0>
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	4098      	lsls	r0, r3
 800285e:	4304      	orrs	r4, r0
 8002860:	1e63      	subs	r3, r4, #1
 8002862:	419c      	sbcs	r4, r3
 8002864:	2300      	movs	r3, #0
 8002866:	4699      	mov	r9, r3
 8002868:	4698      	mov	r8, r3
 800286a:	430c      	orrs	r4, r1
 800286c:	0763      	lsls	r3, r4, #29
 800286e:	d000      	beq.n	8002872 <__aeabi_dsub+0x2e2>
 8002870:	e712      	b.n	8002698 <__aeabi_dsub+0x108>
 8002872:	464b      	mov	r3, r9
 8002874:	464a      	mov	r2, r9
 8002876:	08e4      	lsrs	r4, r4, #3
 8002878:	075b      	lsls	r3, r3, #29
 800287a:	4323      	orrs	r3, r4
 800287c:	08d4      	lsrs	r4, r2, #3
 800287e:	4642      	mov	r2, r8
 8002880:	4919      	ldr	r1, [pc, #100]	; (80028e8 <__aeabi_dsub+0x358>)
 8002882:	428a      	cmp	r2, r1
 8002884:	d00e      	beq.n	80028a4 <__aeabi_dsub+0x314>
 8002886:	0324      	lsls	r4, r4, #12
 8002888:	0552      	lsls	r2, r2, #21
 800288a:	0b24      	lsrs	r4, r4, #12
 800288c:	0d52      	lsrs	r2, r2, #21
 800288e:	e722      	b.n	80026d6 <__aeabi_dsub+0x146>
 8002890:	000a      	movs	r2, r1
 8002892:	2400      	movs	r4, #0
 8002894:	2300      	movs	r3, #0
 8002896:	e71e      	b.n	80026d6 <__aeabi_dsub+0x146>
 8002898:	08db      	lsrs	r3, r3, #3
 800289a:	4662      	mov	r2, ip
 800289c:	0752      	lsls	r2, r2, #29
 800289e:	4313      	orrs	r3, r2
 80028a0:	4662      	mov	r2, ip
 80028a2:	08d4      	lsrs	r4, r2, #3
 80028a4:	001a      	movs	r2, r3
 80028a6:	4322      	orrs	r2, r4
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x31c>
 80028aa:	e1fc      	b.n	8002ca6 <__aeabi_dsub+0x716>
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	0312      	lsls	r2, r2, #12
 80028b0:	4314      	orrs	r4, r2
 80028b2:	0324      	lsls	r4, r4, #12
 80028b4:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <__aeabi_dsub+0x358>)
 80028b6:	0b24      	lsrs	r4, r4, #12
 80028b8:	e70d      	b.n	80026d6 <__aeabi_dsub+0x146>
 80028ba:	0020      	movs	r0, r4
 80028bc:	f000 fb74 	bl	8002fa8 <__clzsi2>
 80028c0:	0001      	movs	r1, r0
 80028c2:	3118      	adds	r1, #24
 80028c4:	291f      	cmp	r1, #31
 80028c6:	dc00      	bgt.n	80028ca <__aeabi_dsub+0x33a>
 80028c8:	e6c4      	b.n	8002654 <__aeabi_dsub+0xc4>
 80028ca:	3808      	subs	r0, #8
 80028cc:	4084      	lsls	r4, r0
 80028ce:	4643      	mov	r3, r8
 80028d0:	0020      	movs	r0, r4
 80028d2:	2400      	movs	r4, #0
 80028d4:	4588      	cmp	r8, r1
 80028d6:	dc00      	bgt.n	80028da <__aeabi_dsub+0x34a>
 80028d8:	e6c8      	b.n	800266c <__aeabi_dsub+0xdc>
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <__aeabi_dsub+0x35c>)
 80028dc:	1a5b      	subs	r3, r3, r1
 80028de:	4010      	ands	r0, r2
 80028e0:	4698      	mov	r8, r3
 80028e2:	4681      	mov	r9, r0
 80028e4:	e6d6      	b.n	8002694 <__aeabi_dsub+0x104>
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	000007ff 	.word	0x000007ff
 80028ec:	ff7fffff 	.word	0xff7fffff
 80028f0:	fffff801 	.word	0xfffff801
 80028f4:	000007fe 	.word	0x000007fe
 80028f8:	430f      	orrs	r7, r1
 80028fa:	1e7a      	subs	r2, r7, #1
 80028fc:	4197      	sbcs	r7, r2
 80028fe:	e691      	b.n	8002624 <__aeabi_dsub+0x94>
 8002900:	4661      	mov	r1, ip
 8002902:	08db      	lsrs	r3, r3, #3
 8002904:	0749      	lsls	r1, r1, #29
 8002906:	430b      	orrs	r3, r1
 8002908:	4661      	mov	r1, ip
 800290a:	08cc      	lsrs	r4, r1, #3
 800290c:	e7b8      	b.n	8002880 <__aeabi_dsub+0x2f0>
 800290e:	4640      	mov	r0, r8
 8002910:	4cd3      	ldr	r4, [pc, #844]	; (8002c60 <__aeabi_dsub+0x6d0>)
 8002912:	3001      	adds	r0, #1
 8002914:	4220      	tst	r0, r4
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x38a>
 8002918:	e0a2      	b.n	8002a60 <__aeabi_dsub+0x4d0>
 800291a:	4640      	mov	r0, r8
 800291c:	2800      	cmp	r0, #0
 800291e:	d000      	beq.n	8002922 <__aeabi_dsub+0x392>
 8002920:	e101      	b.n	8002b26 <__aeabi_dsub+0x596>
 8002922:	4660      	mov	r0, ip
 8002924:	4318      	orrs	r0, r3
 8002926:	d100      	bne.n	800292a <__aeabi_dsub+0x39a>
 8002928:	e15e      	b.n	8002be8 <__aeabi_dsub+0x658>
 800292a:	0008      	movs	r0, r1
 800292c:	4338      	orrs	r0, r7
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x3a2>
 8002930:	e15f      	b.n	8002bf2 <__aeabi_dsub+0x662>
 8002932:	4661      	mov	r1, ip
 8002934:	08db      	lsrs	r3, r3, #3
 8002936:	0749      	lsls	r1, r1, #29
 8002938:	430b      	orrs	r3, r1
 800293a:	4661      	mov	r1, ip
 800293c:	08cc      	lsrs	r4, r1, #3
 800293e:	e7a2      	b.n	8002886 <__aeabi_dsub+0x2f6>
 8002940:	4dc8      	ldr	r5, [pc, #800]	; (8002c64 <__aeabi_dsub+0x6d4>)
 8002942:	42a8      	cmp	r0, r5
 8002944:	d100      	bne.n	8002948 <__aeabi_dsub+0x3b8>
 8002946:	e0cf      	b.n	8002ae8 <__aeabi_dsub+0x558>
 8002948:	2580      	movs	r5, #128	; 0x80
 800294a:	4664      	mov	r4, ip
 800294c:	042d      	lsls	r5, r5, #16
 800294e:	432c      	orrs	r4, r5
 8002950:	46a4      	mov	ip, r4
 8002952:	2a38      	cmp	r2, #56	; 0x38
 8002954:	dc56      	bgt.n	8002a04 <__aeabi_dsub+0x474>
 8002956:	2a1f      	cmp	r2, #31
 8002958:	dd00      	ble.n	800295c <__aeabi_dsub+0x3cc>
 800295a:	e0d1      	b.n	8002b00 <__aeabi_dsub+0x570>
 800295c:	2520      	movs	r5, #32
 800295e:	001e      	movs	r6, r3
 8002960:	1aad      	subs	r5, r5, r2
 8002962:	4664      	mov	r4, ip
 8002964:	40ab      	lsls	r3, r5
 8002966:	40ac      	lsls	r4, r5
 8002968:	40d6      	lsrs	r6, r2
 800296a:	1e5d      	subs	r5, r3, #1
 800296c:	41ab      	sbcs	r3, r5
 800296e:	4334      	orrs	r4, r6
 8002970:	4323      	orrs	r3, r4
 8002972:	4664      	mov	r4, ip
 8002974:	40d4      	lsrs	r4, r2
 8002976:	1b09      	subs	r1, r1, r4
 8002978:	e049      	b.n	8002a0e <__aeabi_dsub+0x47e>
 800297a:	4660      	mov	r0, ip
 800297c:	1bdc      	subs	r4, r3, r7
 800297e:	1a46      	subs	r6, r0, r1
 8002980:	42a3      	cmp	r3, r4
 8002982:	4180      	sbcs	r0, r0
 8002984:	4240      	negs	r0, r0
 8002986:	4681      	mov	r9, r0
 8002988:	0030      	movs	r0, r6
 800298a:	464e      	mov	r6, r9
 800298c:	1b80      	subs	r0, r0, r6
 800298e:	4681      	mov	r9, r0
 8002990:	0200      	lsls	r0, r0, #8
 8002992:	d476      	bmi.n	8002a82 <__aeabi_dsub+0x4f2>
 8002994:	464b      	mov	r3, r9
 8002996:	4323      	orrs	r3, r4
 8002998:	d000      	beq.n	800299c <__aeabi_dsub+0x40c>
 800299a:	e652      	b.n	8002642 <__aeabi_dsub+0xb2>
 800299c:	2400      	movs	r4, #0
 800299e:	2500      	movs	r5, #0
 80029a0:	e771      	b.n	8002886 <__aeabi_dsub+0x2f6>
 80029a2:	4339      	orrs	r1, r7
 80029a4:	000c      	movs	r4, r1
 80029a6:	1e62      	subs	r2, r4, #1
 80029a8:	4194      	sbcs	r4, r2
 80029aa:	18e4      	adds	r4, r4, r3
 80029ac:	429c      	cmp	r4, r3
 80029ae:	419b      	sbcs	r3, r3
 80029b0:	425b      	negs	r3, r3
 80029b2:	4463      	add	r3, ip
 80029b4:	4699      	mov	r9, r3
 80029b6:	464b      	mov	r3, r9
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	d400      	bmi.n	80029be <__aeabi_dsub+0x42e>
 80029bc:	e756      	b.n	800286c <__aeabi_dsub+0x2dc>
 80029be:	2301      	movs	r3, #1
 80029c0:	469c      	mov	ip, r3
 80029c2:	4ba8      	ldr	r3, [pc, #672]	; (8002c64 <__aeabi_dsub+0x6d4>)
 80029c4:	44e0      	add	r8, ip
 80029c6:	4598      	cmp	r8, r3
 80029c8:	d038      	beq.n	8002a3c <__aeabi_dsub+0x4ac>
 80029ca:	464b      	mov	r3, r9
 80029cc:	48a6      	ldr	r0, [pc, #664]	; (8002c68 <__aeabi_dsub+0x6d8>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	4003      	ands	r3, r0
 80029d2:	0018      	movs	r0, r3
 80029d4:	0863      	lsrs	r3, r4, #1
 80029d6:	4014      	ands	r4, r2
 80029d8:	431c      	orrs	r4, r3
 80029da:	07c3      	lsls	r3, r0, #31
 80029dc:	431c      	orrs	r4, r3
 80029de:	0843      	lsrs	r3, r0, #1
 80029e0:	4699      	mov	r9, r3
 80029e2:	e657      	b.n	8002694 <__aeabi_dsub+0x104>
 80029e4:	0010      	movs	r0, r2
 80029e6:	000e      	movs	r6, r1
 80029e8:	3820      	subs	r0, #32
 80029ea:	40c6      	lsrs	r6, r0
 80029ec:	2a20      	cmp	r2, #32
 80029ee:	d004      	beq.n	80029fa <__aeabi_dsub+0x46a>
 80029f0:	2040      	movs	r0, #64	; 0x40
 80029f2:	1a82      	subs	r2, r0, r2
 80029f4:	4091      	lsls	r1, r2
 80029f6:	430f      	orrs	r7, r1
 80029f8:	46b9      	mov	r9, r7
 80029fa:	464f      	mov	r7, r9
 80029fc:	1e7a      	subs	r2, r7, #1
 80029fe:	4197      	sbcs	r7, r2
 8002a00:	4337      	orrs	r7, r6
 8002a02:	e60f      	b.n	8002624 <__aeabi_dsub+0x94>
 8002a04:	4662      	mov	r2, ip
 8002a06:	431a      	orrs	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	1e5a      	subs	r2, r3, #1
 8002a0c:	4193      	sbcs	r3, r2
 8002a0e:	1afc      	subs	r4, r7, r3
 8002a10:	42a7      	cmp	r7, r4
 8002a12:	41bf      	sbcs	r7, r7
 8002a14:	427f      	negs	r7, r7
 8002a16:	1bcb      	subs	r3, r1, r7
 8002a18:	4699      	mov	r9, r3
 8002a1a:	465d      	mov	r5, fp
 8002a1c:	4680      	mov	r8, r0
 8002a1e:	e608      	b.n	8002632 <__aeabi_dsub+0xa2>
 8002a20:	4666      	mov	r6, ip
 8002a22:	431e      	orrs	r6, r3
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x498>
 8002a26:	e0be      	b.n	8002ba6 <__aeabi_dsub+0x616>
 8002a28:	1e56      	subs	r6, r2, #1
 8002a2a:	2a01      	cmp	r2, #1
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x4a0>
 8002a2e:	e109      	b.n	8002c44 <__aeabi_dsub+0x6b4>
 8002a30:	4c8c      	ldr	r4, [pc, #560]	; (8002c64 <__aeabi_dsub+0x6d4>)
 8002a32:	42a2      	cmp	r2, r4
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x4a8>
 8002a36:	e119      	b.n	8002c6c <__aeabi_dsub+0x6dc>
 8002a38:	0032      	movs	r2, r6
 8002a3a:	e6c1      	b.n	80027c0 <__aeabi_dsub+0x230>
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	2400      	movs	r4, #0
 8002a40:	2300      	movs	r3, #0
 8002a42:	e648      	b.n	80026d6 <__aeabi_dsub+0x146>
 8002a44:	2020      	movs	r0, #32
 8002a46:	000c      	movs	r4, r1
 8002a48:	1a80      	subs	r0, r0, r2
 8002a4a:	003e      	movs	r6, r7
 8002a4c:	4087      	lsls	r7, r0
 8002a4e:	4084      	lsls	r4, r0
 8002a50:	40d6      	lsrs	r6, r2
 8002a52:	1e78      	subs	r0, r7, #1
 8002a54:	4187      	sbcs	r7, r0
 8002a56:	40d1      	lsrs	r1, r2
 8002a58:	4334      	orrs	r4, r6
 8002a5a:	433c      	orrs	r4, r7
 8002a5c:	448c      	add	ip, r1
 8002a5e:	e7a4      	b.n	80029aa <__aeabi_dsub+0x41a>
 8002a60:	4a80      	ldr	r2, [pc, #512]	; (8002c64 <__aeabi_dsub+0x6d4>)
 8002a62:	4290      	cmp	r0, r2
 8002a64:	d100      	bne.n	8002a68 <__aeabi_dsub+0x4d8>
 8002a66:	e0e9      	b.n	8002c3c <__aeabi_dsub+0x6ac>
 8002a68:	19df      	adds	r7, r3, r7
 8002a6a:	429f      	cmp	r7, r3
 8002a6c:	419b      	sbcs	r3, r3
 8002a6e:	4461      	add	r1, ip
 8002a70:	425b      	negs	r3, r3
 8002a72:	18c9      	adds	r1, r1, r3
 8002a74:	07cc      	lsls	r4, r1, #31
 8002a76:	087f      	lsrs	r7, r7, #1
 8002a78:	084b      	lsrs	r3, r1, #1
 8002a7a:	4699      	mov	r9, r3
 8002a7c:	4680      	mov	r8, r0
 8002a7e:	433c      	orrs	r4, r7
 8002a80:	e6f4      	b.n	800286c <__aeabi_dsub+0x2dc>
 8002a82:	1afc      	subs	r4, r7, r3
 8002a84:	42a7      	cmp	r7, r4
 8002a86:	41bf      	sbcs	r7, r7
 8002a88:	4663      	mov	r3, ip
 8002a8a:	427f      	negs	r7, r7
 8002a8c:	1ac9      	subs	r1, r1, r3
 8002a8e:	1bcb      	subs	r3, r1, r7
 8002a90:	4699      	mov	r9, r3
 8002a92:	465d      	mov	r5, fp
 8002a94:	e5d5      	b.n	8002642 <__aeabi_dsub+0xb2>
 8002a96:	08ff      	lsrs	r7, r7, #3
 8002a98:	074b      	lsls	r3, r1, #29
 8002a9a:	465d      	mov	r5, fp
 8002a9c:	433b      	orrs	r3, r7
 8002a9e:	08cc      	lsrs	r4, r1, #3
 8002aa0:	e6ee      	b.n	8002880 <__aeabi_dsub+0x2f0>
 8002aa2:	4662      	mov	r2, ip
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	d000      	beq.n	8002aaa <__aeabi_dsub+0x51a>
 8002aa8:	e082      	b.n	8002bb0 <__aeabi_dsub+0x620>
 8002aaa:	000b      	movs	r3, r1
 8002aac:	433b      	orrs	r3, r7
 8002aae:	d11b      	bne.n	8002ae8 <__aeabi_dsub+0x558>
 8002ab0:	2480      	movs	r4, #128	; 0x80
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	0324      	lsls	r4, r4, #12
 8002ab6:	e6f9      	b.n	80028ac <__aeabi_dsub+0x31c>
 8002ab8:	19dc      	adds	r4, r3, r7
 8002aba:	429c      	cmp	r4, r3
 8002abc:	419b      	sbcs	r3, r3
 8002abe:	4461      	add	r1, ip
 8002ac0:	4689      	mov	r9, r1
 8002ac2:	425b      	negs	r3, r3
 8002ac4:	4499      	add	r9, r3
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	d444      	bmi.n	8002b56 <__aeabi_dsub+0x5c6>
 8002acc:	2301      	movs	r3, #1
 8002ace:	4698      	mov	r8, r3
 8002ad0:	e6cc      	b.n	800286c <__aeabi_dsub+0x2dc>
 8002ad2:	1bdc      	subs	r4, r3, r7
 8002ad4:	4662      	mov	r2, ip
 8002ad6:	42a3      	cmp	r3, r4
 8002ad8:	419b      	sbcs	r3, r3
 8002ada:	1a51      	subs	r1, r2, r1
 8002adc:	425b      	negs	r3, r3
 8002ade:	1acb      	subs	r3, r1, r3
 8002ae0:	4699      	mov	r9, r3
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4698      	mov	r8, r3
 8002ae6:	e5a4      	b.n	8002632 <__aeabi_dsub+0xa2>
 8002ae8:	08ff      	lsrs	r7, r7, #3
 8002aea:	074b      	lsls	r3, r1, #29
 8002aec:	465d      	mov	r5, fp
 8002aee:	433b      	orrs	r3, r7
 8002af0:	08cc      	lsrs	r4, r1, #3
 8002af2:	e6d7      	b.n	80028a4 <__aeabi_dsub+0x314>
 8002af4:	4662      	mov	r2, ip
 8002af6:	431a      	orrs	r2, r3
 8002af8:	0014      	movs	r4, r2
 8002afa:	1e63      	subs	r3, r4, #1
 8002afc:	419c      	sbcs	r4, r3
 8002afe:	e679      	b.n	80027f4 <__aeabi_dsub+0x264>
 8002b00:	0015      	movs	r5, r2
 8002b02:	4664      	mov	r4, ip
 8002b04:	3d20      	subs	r5, #32
 8002b06:	40ec      	lsrs	r4, r5
 8002b08:	46a0      	mov	r8, r4
 8002b0a:	2a20      	cmp	r2, #32
 8002b0c:	d005      	beq.n	8002b1a <__aeabi_dsub+0x58a>
 8002b0e:	2540      	movs	r5, #64	; 0x40
 8002b10:	4664      	mov	r4, ip
 8002b12:	1aaa      	subs	r2, r5, r2
 8002b14:	4094      	lsls	r4, r2
 8002b16:	4323      	orrs	r3, r4
 8002b18:	469a      	mov	sl, r3
 8002b1a:	4654      	mov	r4, sl
 8002b1c:	1e63      	subs	r3, r4, #1
 8002b1e:	419c      	sbcs	r4, r3
 8002b20:	4643      	mov	r3, r8
 8002b22:	4323      	orrs	r3, r4
 8002b24:	e773      	b.n	8002a0e <__aeabi_dsub+0x47e>
 8002b26:	4662      	mov	r2, ip
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	d023      	beq.n	8002b74 <__aeabi_dsub+0x5e4>
 8002b2c:	000a      	movs	r2, r1
 8002b2e:	433a      	orrs	r2, r7
 8002b30:	d000      	beq.n	8002b34 <__aeabi_dsub+0x5a4>
 8002b32:	e0a0      	b.n	8002c76 <__aeabi_dsub+0x6e6>
 8002b34:	4662      	mov	r2, ip
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	0752      	lsls	r2, r2, #29
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	4662      	mov	r2, ip
 8002b3e:	08d4      	lsrs	r4, r2, #3
 8002b40:	e6b0      	b.n	80028a4 <__aeabi_dsub+0x314>
 8002b42:	000b      	movs	r3, r1
 8002b44:	433b      	orrs	r3, r7
 8002b46:	d100      	bne.n	8002b4a <__aeabi_dsub+0x5ba>
 8002b48:	e728      	b.n	800299c <__aeabi_dsub+0x40c>
 8002b4a:	08ff      	lsrs	r7, r7, #3
 8002b4c:	074b      	lsls	r3, r1, #29
 8002b4e:	465d      	mov	r5, fp
 8002b50:	433b      	orrs	r3, r7
 8002b52:	08cc      	lsrs	r4, r1, #3
 8002b54:	e697      	b.n	8002886 <__aeabi_dsub+0x2f6>
 8002b56:	2302      	movs	r3, #2
 8002b58:	4698      	mov	r8, r3
 8002b5a:	e736      	b.n	80029ca <__aeabi_dsub+0x43a>
 8002b5c:	1afc      	subs	r4, r7, r3
 8002b5e:	42a7      	cmp	r7, r4
 8002b60:	41bf      	sbcs	r7, r7
 8002b62:	4663      	mov	r3, ip
 8002b64:	427f      	negs	r7, r7
 8002b66:	1ac9      	subs	r1, r1, r3
 8002b68:	1bcb      	subs	r3, r1, r7
 8002b6a:	4699      	mov	r9, r3
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	465d      	mov	r5, fp
 8002b70:	4698      	mov	r8, r3
 8002b72:	e55e      	b.n	8002632 <__aeabi_dsub+0xa2>
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	08ff      	lsrs	r7, r7, #3
 8002b78:	433b      	orrs	r3, r7
 8002b7a:	08cc      	lsrs	r4, r1, #3
 8002b7c:	e692      	b.n	80028a4 <__aeabi_dsub+0x314>
 8002b7e:	1bdc      	subs	r4, r3, r7
 8002b80:	4660      	mov	r0, ip
 8002b82:	42a3      	cmp	r3, r4
 8002b84:	41b6      	sbcs	r6, r6
 8002b86:	1a40      	subs	r0, r0, r1
 8002b88:	4276      	negs	r6, r6
 8002b8a:	1b80      	subs	r0, r0, r6
 8002b8c:	4681      	mov	r9, r0
 8002b8e:	0200      	lsls	r0, r0, #8
 8002b90:	d560      	bpl.n	8002c54 <__aeabi_dsub+0x6c4>
 8002b92:	1afc      	subs	r4, r7, r3
 8002b94:	42a7      	cmp	r7, r4
 8002b96:	41bf      	sbcs	r7, r7
 8002b98:	4663      	mov	r3, ip
 8002b9a:	427f      	negs	r7, r7
 8002b9c:	1ac9      	subs	r1, r1, r3
 8002b9e:	1bcb      	subs	r3, r1, r7
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	465d      	mov	r5, fp
 8002ba4:	e576      	b.n	8002694 <__aeabi_dsub+0x104>
 8002ba6:	08ff      	lsrs	r7, r7, #3
 8002ba8:	074b      	lsls	r3, r1, #29
 8002baa:	433b      	orrs	r3, r7
 8002bac:	08cc      	lsrs	r4, r1, #3
 8002bae:	e667      	b.n	8002880 <__aeabi_dsub+0x2f0>
 8002bb0:	000a      	movs	r2, r1
 8002bb2:	08db      	lsrs	r3, r3, #3
 8002bb4:	433a      	orrs	r2, r7
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x62a>
 8002bb8:	e66f      	b.n	800289a <__aeabi_dsub+0x30a>
 8002bba:	4662      	mov	r2, ip
 8002bbc:	0752      	lsls	r2, r2, #29
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	4662      	mov	r2, ip
 8002bc2:	08d4      	lsrs	r4, r2, #3
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	0312      	lsls	r2, r2, #12
 8002bc8:	4214      	tst	r4, r2
 8002bca:	d007      	beq.n	8002bdc <__aeabi_dsub+0x64c>
 8002bcc:	08c8      	lsrs	r0, r1, #3
 8002bce:	4210      	tst	r0, r2
 8002bd0:	d104      	bne.n	8002bdc <__aeabi_dsub+0x64c>
 8002bd2:	465d      	mov	r5, fp
 8002bd4:	0004      	movs	r4, r0
 8002bd6:	08fb      	lsrs	r3, r7, #3
 8002bd8:	0749      	lsls	r1, r1, #29
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	0f5a      	lsrs	r2, r3, #29
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	0752      	lsls	r2, r2, #29
 8002be4:	4313      	orrs	r3, r2
 8002be6:	e65d      	b.n	80028a4 <__aeabi_dsub+0x314>
 8002be8:	074b      	lsls	r3, r1, #29
 8002bea:	08ff      	lsrs	r7, r7, #3
 8002bec:	433b      	orrs	r3, r7
 8002bee:	08cc      	lsrs	r4, r1, #3
 8002bf0:	e649      	b.n	8002886 <__aeabi_dsub+0x2f6>
 8002bf2:	19dc      	adds	r4, r3, r7
 8002bf4:	429c      	cmp	r4, r3
 8002bf6:	419b      	sbcs	r3, r3
 8002bf8:	4461      	add	r1, ip
 8002bfa:	4689      	mov	r9, r1
 8002bfc:	425b      	negs	r3, r3
 8002bfe:	4499      	add	r9, r3
 8002c00:	464b      	mov	r3, r9
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	d400      	bmi.n	8002c08 <__aeabi_dsub+0x678>
 8002c06:	e631      	b.n	800286c <__aeabi_dsub+0x2dc>
 8002c08:	464a      	mov	r2, r9
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <__aeabi_dsub+0x6d8>)
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4691      	mov	r9, r2
 8002c12:	4698      	mov	r8, r3
 8002c14:	e62a      	b.n	800286c <__aeabi_dsub+0x2dc>
 8002c16:	0016      	movs	r6, r2
 8002c18:	4664      	mov	r4, ip
 8002c1a:	3e20      	subs	r6, #32
 8002c1c:	40f4      	lsrs	r4, r6
 8002c1e:	46a0      	mov	r8, r4
 8002c20:	2a20      	cmp	r2, #32
 8002c22:	d005      	beq.n	8002c30 <__aeabi_dsub+0x6a0>
 8002c24:	2640      	movs	r6, #64	; 0x40
 8002c26:	4664      	mov	r4, ip
 8002c28:	1ab2      	subs	r2, r6, r2
 8002c2a:	4094      	lsls	r4, r2
 8002c2c:	4323      	orrs	r3, r4
 8002c2e:	469a      	mov	sl, r3
 8002c30:	4654      	mov	r4, sl
 8002c32:	1e63      	subs	r3, r4, #1
 8002c34:	419c      	sbcs	r4, r3
 8002c36:	4643      	mov	r3, r8
 8002c38:	431c      	orrs	r4, r3
 8002c3a:	e5db      	b.n	80027f4 <__aeabi_dsub+0x264>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	2400      	movs	r4, #0
 8002c40:	2300      	movs	r3, #0
 8002c42:	e548      	b.n	80026d6 <__aeabi_dsub+0x146>
 8002c44:	19dc      	adds	r4, r3, r7
 8002c46:	42bc      	cmp	r4, r7
 8002c48:	41bf      	sbcs	r7, r7
 8002c4a:	4461      	add	r1, ip
 8002c4c:	4689      	mov	r9, r1
 8002c4e:	427f      	negs	r7, r7
 8002c50:	44b9      	add	r9, r7
 8002c52:	e738      	b.n	8002ac6 <__aeabi_dsub+0x536>
 8002c54:	464b      	mov	r3, r9
 8002c56:	4323      	orrs	r3, r4
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x6cc>
 8002c5a:	e69f      	b.n	800299c <__aeabi_dsub+0x40c>
 8002c5c:	e606      	b.n	800286c <__aeabi_dsub+0x2dc>
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	000007fe 	.word	0x000007fe
 8002c64:	000007ff 	.word	0x000007ff
 8002c68:	ff7fffff 	.word	0xff7fffff
 8002c6c:	08ff      	lsrs	r7, r7, #3
 8002c6e:	074b      	lsls	r3, r1, #29
 8002c70:	433b      	orrs	r3, r7
 8002c72:	08cc      	lsrs	r4, r1, #3
 8002c74:	e616      	b.n	80028a4 <__aeabi_dsub+0x314>
 8002c76:	4662      	mov	r2, ip
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	0752      	lsls	r2, r2, #29
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	4662      	mov	r2, ip
 8002c80:	08d4      	lsrs	r4, r2, #3
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	0312      	lsls	r2, r2, #12
 8002c86:	4214      	tst	r4, r2
 8002c88:	d007      	beq.n	8002c9a <__aeabi_dsub+0x70a>
 8002c8a:	08c8      	lsrs	r0, r1, #3
 8002c8c:	4210      	tst	r0, r2
 8002c8e:	d104      	bne.n	8002c9a <__aeabi_dsub+0x70a>
 8002c90:	465d      	mov	r5, fp
 8002c92:	0004      	movs	r4, r0
 8002c94:	08fb      	lsrs	r3, r7, #3
 8002c96:	0749      	lsls	r1, r1, #29
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	0f5a      	lsrs	r2, r3, #29
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	0752      	lsls	r2, r2, #29
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	e5fe      	b.n	80028a4 <__aeabi_dsub+0x314>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	4a01      	ldr	r2, [pc, #4]	; (8002cb0 <__aeabi_dsub+0x720>)
 8002caa:	001c      	movs	r4, r3
 8002cac:	e513      	b.n	80026d6 <__aeabi_dsub+0x146>
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff

08002cb4 <__aeabi_dcmpun>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	0005      	movs	r5, r0
 8002cb8:	480c      	ldr	r0, [pc, #48]	; (8002cec <__aeabi_dcmpun+0x38>)
 8002cba:	031c      	lsls	r4, r3, #12
 8002cbc:	0016      	movs	r6, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	030a      	lsls	r2, r1, #12
 8002cc2:	0049      	lsls	r1, r1, #1
 8002cc4:	0b12      	lsrs	r2, r2, #12
 8002cc6:	0d49      	lsrs	r1, r1, #21
 8002cc8:	0b24      	lsrs	r4, r4, #12
 8002cca:	0d5b      	lsrs	r3, r3, #21
 8002ccc:	4281      	cmp	r1, r0
 8002cce:	d008      	beq.n	8002ce2 <__aeabi_dcmpun+0x2e>
 8002cd0:	4a06      	ldr	r2, [pc, #24]	; (8002cec <__aeabi_dcmpun+0x38>)
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d103      	bne.n	8002ce0 <__aeabi_dcmpun+0x2c>
 8002cd8:	0020      	movs	r0, r4
 8002cda:	4330      	orrs	r0, r6
 8002cdc:	1e43      	subs	r3, r0, #1
 8002cde:	4198      	sbcs	r0, r3
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	432a      	orrs	r2, r5
 8002ce6:	d1fb      	bne.n	8002ce0 <__aeabi_dcmpun+0x2c>
 8002ce8:	e7f2      	b.n	8002cd0 <__aeabi_dcmpun+0x1c>
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	000007ff 	.word	0x000007ff

08002cf0 <__aeabi_d2iz>:
 8002cf0:	000a      	movs	r2, r1
 8002cf2:	b530      	push	{r4, r5, lr}
 8002cf4:	4c13      	ldr	r4, [pc, #76]	; (8002d44 <__aeabi_d2iz+0x54>)
 8002cf6:	0053      	lsls	r3, r2, #1
 8002cf8:	0309      	lsls	r1, r1, #12
 8002cfa:	0005      	movs	r5, r0
 8002cfc:	0b09      	lsrs	r1, r1, #12
 8002cfe:	2000      	movs	r0, #0
 8002d00:	0d5b      	lsrs	r3, r3, #21
 8002d02:	0fd2      	lsrs	r2, r2, #31
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	dd04      	ble.n	8002d12 <__aeabi_d2iz+0x22>
 8002d08:	480f      	ldr	r0, [pc, #60]	; (8002d48 <__aeabi_d2iz+0x58>)
 8002d0a:	4283      	cmp	r3, r0
 8002d0c:	dd02      	ble.n	8002d14 <__aeabi_d2iz+0x24>
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <__aeabi_d2iz+0x5c>)
 8002d10:	18d0      	adds	r0, r2, r3
 8002d12:	bd30      	pop	{r4, r5, pc}
 8002d14:	2080      	movs	r0, #128	; 0x80
 8002d16:	0340      	lsls	r0, r0, #13
 8002d18:	4301      	orrs	r1, r0
 8002d1a:	480d      	ldr	r0, [pc, #52]	; (8002d50 <__aeabi_d2iz+0x60>)
 8002d1c:	1ac0      	subs	r0, r0, r3
 8002d1e:	281f      	cmp	r0, #31
 8002d20:	dd08      	ble.n	8002d34 <__aeabi_d2iz+0x44>
 8002d22:	480c      	ldr	r0, [pc, #48]	; (8002d54 <__aeabi_d2iz+0x64>)
 8002d24:	1ac3      	subs	r3, r0, r3
 8002d26:	40d9      	lsrs	r1, r3
 8002d28:	000b      	movs	r3, r1
 8002d2a:	4258      	negs	r0, r3
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	d1f0      	bne.n	8002d12 <__aeabi_d2iz+0x22>
 8002d30:	0018      	movs	r0, r3
 8002d32:	e7ee      	b.n	8002d12 <__aeabi_d2iz+0x22>
 8002d34:	4c08      	ldr	r4, [pc, #32]	; (8002d58 <__aeabi_d2iz+0x68>)
 8002d36:	40c5      	lsrs	r5, r0
 8002d38:	46a4      	mov	ip, r4
 8002d3a:	4463      	add	r3, ip
 8002d3c:	4099      	lsls	r1, r3
 8002d3e:	000b      	movs	r3, r1
 8002d40:	432b      	orrs	r3, r5
 8002d42:	e7f2      	b.n	8002d2a <__aeabi_d2iz+0x3a>
 8002d44:	000003fe 	.word	0x000003fe
 8002d48:	0000041d 	.word	0x0000041d
 8002d4c:	7fffffff 	.word	0x7fffffff
 8002d50:	00000433 	.word	0x00000433
 8002d54:	00000413 	.word	0x00000413
 8002d58:	fffffbed 	.word	0xfffffbed

08002d5c <__aeabi_i2d>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d016      	beq.n	8002d90 <__aeabi_i2d+0x34>
 8002d62:	17c3      	asrs	r3, r0, #31
 8002d64:	18c5      	adds	r5, r0, r3
 8002d66:	405d      	eors	r5, r3
 8002d68:	0fc4      	lsrs	r4, r0, #31
 8002d6a:	0028      	movs	r0, r5
 8002d6c:	f000 f91c 	bl	8002fa8 <__clzsi2>
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <__aeabi_i2d+0x5c>)
 8002d72:	1a12      	subs	r2, r2, r0
 8002d74:	280a      	cmp	r0, #10
 8002d76:	dc16      	bgt.n	8002da6 <__aeabi_i2d+0x4a>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	002e      	movs	r6, r5
 8002d7c:	3315      	adds	r3, #21
 8002d7e:	409e      	lsls	r6, r3
 8002d80:	230b      	movs	r3, #11
 8002d82:	1a18      	subs	r0, r3, r0
 8002d84:	40c5      	lsrs	r5, r0
 8002d86:	0552      	lsls	r2, r2, #21
 8002d88:	032d      	lsls	r5, r5, #12
 8002d8a:	0b2d      	lsrs	r5, r5, #12
 8002d8c:	0d53      	lsrs	r3, r2, #21
 8002d8e:	e003      	b.n	8002d98 <__aeabi_i2d+0x3c>
 8002d90:	2400      	movs	r4, #0
 8002d92:	2300      	movs	r3, #0
 8002d94:	2500      	movs	r5, #0
 8002d96:	2600      	movs	r6, #0
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	432b      	orrs	r3, r5
 8002d9c:	07e4      	lsls	r4, r4, #31
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	0030      	movs	r0, r6
 8002da2:	0019      	movs	r1, r3
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
 8002da6:	380b      	subs	r0, #11
 8002da8:	4085      	lsls	r5, r0
 8002daa:	0552      	lsls	r2, r2, #21
 8002dac:	032d      	lsls	r5, r5, #12
 8002dae:	2600      	movs	r6, #0
 8002db0:	0b2d      	lsrs	r5, r5, #12
 8002db2:	0d53      	lsrs	r3, r2, #21
 8002db4:	e7f0      	b.n	8002d98 <__aeabi_i2d+0x3c>
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	0000041e 	.word	0x0000041e

08002dbc <__aeabi_ui2d>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	1e04      	subs	r4, r0, #0
 8002dc0:	d010      	beq.n	8002de4 <__aeabi_ui2d+0x28>
 8002dc2:	f000 f8f1 	bl	8002fa8 <__clzsi2>
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <__aeabi_ui2d+0x48>)
 8002dc8:	1a1b      	subs	r3, r3, r0
 8002dca:	280a      	cmp	r0, #10
 8002dcc:	dc11      	bgt.n	8002df2 <__aeabi_ui2d+0x36>
 8002dce:	220b      	movs	r2, #11
 8002dd0:	0021      	movs	r1, r4
 8002dd2:	1a12      	subs	r2, r2, r0
 8002dd4:	40d1      	lsrs	r1, r2
 8002dd6:	3015      	adds	r0, #21
 8002dd8:	030a      	lsls	r2, r1, #12
 8002dda:	055b      	lsls	r3, r3, #21
 8002ddc:	4084      	lsls	r4, r0
 8002dde:	0b12      	lsrs	r2, r2, #12
 8002de0:	0d5b      	lsrs	r3, r3, #21
 8002de2:	e001      	b.n	8002de8 <__aeabi_ui2d+0x2c>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2200      	movs	r2, #0
 8002de8:	051b      	lsls	r3, r3, #20
 8002dea:	4313      	orrs	r3, r2
 8002dec:	0020      	movs	r0, r4
 8002dee:	0019      	movs	r1, r3
 8002df0:	bd10      	pop	{r4, pc}
 8002df2:	0022      	movs	r2, r4
 8002df4:	380b      	subs	r0, #11
 8002df6:	4082      	lsls	r2, r0
 8002df8:	055b      	lsls	r3, r3, #21
 8002dfa:	0312      	lsls	r2, r2, #12
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	0b12      	lsrs	r2, r2, #12
 8002e00:	0d5b      	lsrs	r3, r3, #21
 8002e02:	e7f1      	b.n	8002de8 <__aeabi_ui2d+0x2c>
 8002e04:	0000041e 	.word	0x0000041e

08002e08 <__aeabi_f2d>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	0043      	lsls	r3, r0, #1
 8002e0c:	0246      	lsls	r6, r0, #9
 8002e0e:	0fc4      	lsrs	r4, r0, #31
 8002e10:	20fe      	movs	r0, #254	; 0xfe
 8002e12:	0e1b      	lsrs	r3, r3, #24
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	0a75      	lsrs	r5, r6, #9
 8002e18:	4208      	tst	r0, r1
 8002e1a:	d00c      	beq.n	8002e36 <__aeabi_f2d+0x2e>
 8002e1c:	22e0      	movs	r2, #224	; 0xe0
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	4694      	mov	ip, r2
 8002e22:	076d      	lsls	r5, r5, #29
 8002e24:	0b36      	lsrs	r6, r6, #12
 8002e26:	4463      	add	r3, ip
 8002e28:	051b      	lsls	r3, r3, #20
 8002e2a:	4333      	orrs	r3, r6
 8002e2c:	07e4      	lsls	r4, r4, #31
 8002e2e:	4323      	orrs	r3, r4
 8002e30:	0028      	movs	r0, r5
 8002e32:	0019      	movs	r1, r3
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d114      	bne.n	8002e64 <__aeabi_f2d+0x5c>
 8002e3a:	2d00      	cmp	r5, #0
 8002e3c:	d01b      	beq.n	8002e76 <__aeabi_f2d+0x6e>
 8002e3e:	0028      	movs	r0, r5
 8002e40:	f000 f8b2 	bl	8002fa8 <__clzsi2>
 8002e44:	280a      	cmp	r0, #10
 8002e46:	dc1c      	bgt.n	8002e82 <__aeabi_f2d+0x7a>
 8002e48:	230b      	movs	r3, #11
 8002e4a:	002e      	movs	r6, r5
 8002e4c:	1a1b      	subs	r3, r3, r0
 8002e4e:	40de      	lsrs	r6, r3
 8002e50:	0003      	movs	r3, r0
 8002e52:	3315      	adds	r3, #21
 8002e54:	409d      	lsls	r5, r3
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <__aeabi_f2d+0x88>)
 8002e58:	0336      	lsls	r6, r6, #12
 8002e5a:	1a12      	subs	r2, r2, r0
 8002e5c:	0552      	lsls	r2, r2, #21
 8002e5e:	0b36      	lsrs	r6, r6, #12
 8002e60:	0d53      	lsrs	r3, r2, #21
 8002e62:	e7e1      	b.n	8002e28 <__aeabi_f2d+0x20>
 8002e64:	2d00      	cmp	r5, #0
 8002e66:	d009      	beq.n	8002e7c <__aeabi_f2d+0x74>
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	0b36      	lsrs	r6, r6, #12
 8002e6c:	0312      	lsls	r2, r2, #12
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <__aeabi_f2d+0x8c>)
 8002e70:	076d      	lsls	r5, r5, #29
 8002e72:	4316      	orrs	r6, r2
 8002e74:	e7d8      	b.n	8002e28 <__aeabi_f2d+0x20>
 8002e76:	2300      	movs	r3, #0
 8002e78:	2600      	movs	r6, #0
 8002e7a:	e7d5      	b.n	8002e28 <__aeabi_f2d+0x20>
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <__aeabi_f2d+0x8c>)
 8002e80:	e7d2      	b.n	8002e28 <__aeabi_f2d+0x20>
 8002e82:	0003      	movs	r3, r0
 8002e84:	3b0b      	subs	r3, #11
 8002e86:	409d      	lsls	r5, r3
 8002e88:	002e      	movs	r6, r5
 8002e8a:	2500      	movs	r5, #0
 8002e8c:	e7e3      	b.n	8002e56 <__aeabi_f2d+0x4e>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	00000389 	.word	0x00000389
 8002e94:	000007ff 	.word	0x000007ff

08002e98 <__aeabi_d2f>:
 8002e98:	0002      	movs	r2, r0
 8002e9a:	004b      	lsls	r3, r1, #1
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	0d5b      	lsrs	r3, r3, #21
 8002ea0:	030c      	lsls	r4, r1, #12
 8002ea2:	4e3d      	ldr	r6, [pc, #244]	; (8002f98 <__aeabi_d2f+0x100>)
 8002ea4:	0a64      	lsrs	r4, r4, #9
 8002ea6:	0f40      	lsrs	r0, r0, #29
 8002ea8:	1c5f      	adds	r7, r3, #1
 8002eaa:	0fc9      	lsrs	r1, r1, #31
 8002eac:	4304      	orrs	r4, r0
 8002eae:	00d5      	lsls	r5, r2, #3
 8002eb0:	4237      	tst	r7, r6
 8002eb2:	d00a      	beq.n	8002eca <__aeabi_d2f+0x32>
 8002eb4:	4839      	ldr	r0, [pc, #228]	; (8002f9c <__aeabi_d2f+0x104>)
 8002eb6:	181e      	adds	r6, r3, r0
 8002eb8:	2efe      	cmp	r6, #254	; 0xfe
 8002eba:	dd16      	ble.n	8002eea <__aeabi_d2f+0x52>
 8002ebc:	20ff      	movs	r0, #255	; 0xff
 8002ebe:	2400      	movs	r4, #0
 8002ec0:	05c0      	lsls	r0, r0, #23
 8002ec2:	4320      	orrs	r0, r4
 8002ec4:	07c9      	lsls	r1, r1, #31
 8002ec6:	4308      	orrs	r0, r1
 8002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <__aeabi_d2f+0x44>
 8002ece:	432c      	orrs	r4, r5
 8002ed0:	d026      	beq.n	8002f20 <__aeabi_d2f+0x88>
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	0192      	lsls	r2, r2, #6
 8002ed6:	0a54      	lsrs	r4, r2, #9
 8002ed8:	b2d8      	uxtb	r0, r3
 8002eda:	e7f1      	b.n	8002ec0 <__aeabi_d2f+0x28>
 8002edc:	4325      	orrs	r5, r4
 8002ede:	d0ed      	beq.n	8002ebc <__aeabi_d2f+0x24>
 8002ee0:	2080      	movs	r0, #128	; 0x80
 8002ee2:	03c0      	lsls	r0, r0, #15
 8002ee4:	4304      	orrs	r4, r0
 8002ee6:	20ff      	movs	r0, #255	; 0xff
 8002ee8:	e7ea      	b.n	8002ec0 <__aeabi_d2f+0x28>
 8002eea:	2e00      	cmp	r6, #0
 8002eec:	dd1b      	ble.n	8002f26 <__aeabi_d2f+0x8e>
 8002eee:	0192      	lsls	r2, r2, #6
 8002ef0:	1e53      	subs	r3, r2, #1
 8002ef2:	419a      	sbcs	r2, r3
 8002ef4:	00e4      	lsls	r4, r4, #3
 8002ef6:	0f6d      	lsrs	r5, r5, #29
 8002ef8:	4322      	orrs	r2, r4
 8002efa:	432a      	orrs	r2, r5
 8002efc:	0753      	lsls	r3, r2, #29
 8002efe:	d048      	beq.n	8002f92 <__aeabi_d2f+0xfa>
 8002f00:	230f      	movs	r3, #15
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d000      	beq.n	8002f0a <__aeabi_d2f+0x72>
 8002f08:	3204      	adds	r2, #4
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	04db      	lsls	r3, r3, #19
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d03f      	beq.n	8002f92 <__aeabi_d2f+0xfa>
 8002f12:	1c70      	adds	r0, r6, #1
 8002f14:	2efe      	cmp	r6, #254	; 0xfe
 8002f16:	d0d1      	beq.n	8002ebc <__aeabi_d2f+0x24>
 8002f18:	0192      	lsls	r2, r2, #6
 8002f1a:	0a54      	lsrs	r4, r2, #9
 8002f1c:	b2c0      	uxtb	r0, r0
 8002f1e:	e7cf      	b.n	8002ec0 <__aeabi_d2f+0x28>
 8002f20:	2000      	movs	r0, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	e7cc      	b.n	8002ec0 <__aeabi_d2f+0x28>
 8002f26:	0032      	movs	r2, r6
 8002f28:	3217      	adds	r2, #23
 8002f2a:	db22      	blt.n	8002f72 <__aeabi_d2f+0xda>
 8002f2c:	2080      	movs	r0, #128	; 0x80
 8002f2e:	0400      	lsls	r0, r0, #16
 8002f30:	4320      	orrs	r0, r4
 8002f32:	241e      	movs	r4, #30
 8002f34:	1ba4      	subs	r4, r4, r6
 8002f36:	2c1f      	cmp	r4, #31
 8002f38:	dd1d      	ble.n	8002f76 <__aeabi_d2f+0xde>
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	4252      	negs	r2, r2
 8002f3e:	1b96      	subs	r6, r2, r6
 8002f40:	0002      	movs	r2, r0
 8002f42:	40f2      	lsrs	r2, r6
 8002f44:	0016      	movs	r6, r2
 8002f46:	2c20      	cmp	r4, #32
 8002f48:	d004      	beq.n	8002f54 <__aeabi_d2f+0xbc>
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <__aeabi_d2f+0x108>)
 8002f4c:	4694      	mov	ip, r2
 8002f4e:	4463      	add	r3, ip
 8002f50:	4098      	lsls	r0, r3
 8002f52:	4305      	orrs	r5, r0
 8002f54:	002a      	movs	r2, r5
 8002f56:	1e53      	subs	r3, r2, #1
 8002f58:	419a      	sbcs	r2, r3
 8002f5a:	4332      	orrs	r2, r6
 8002f5c:	2600      	movs	r6, #0
 8002f5e:	0753      	lsls	r3, r2, #29
 8002f60:	d1ce      	bne.n	8002f00 <__aeabi_d2f+0x68>
 8002f62:	2480      	movs	r4, #128	; 0x80
 8002f64:	0013      	movs	r3, r2
 8002f66:	04e4      	lsls	r4, r4, #19
 8002f68:	2001      	movs	r0, #1
 8002f6a:	4023      	ands	r3, r4
 8002f6c:	4222      	tst	r2, r4
 8002f6e:	d1d3      	bne.n	8002f18 <__aeabi_d2f+0x80>
 8002f70:	e7b0      	b.n	8002ed4 <__aeabi_d2f+0x3c>
 8002f72:	2300      	movs	r3, #0
 8002f74:	e7ad      	b.n	8002ed2 <__aeabi_d2f+0x3a>
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <__aeabi_d2f+0x10c>)
 8002f78:	4694      	mov	ip, r2
 8002f7a:	002a      	movs	r2, r5
 8002f7c:	40e2      	lsrs	r2, r4
 8002f7e:	0014      	movs	r4, r2
 8002f80:	002a      	movs	r2, r5
 8002f82:	4463      	add	r3, ip
 8002f84:	409a      	lsls	r2, r3
 8002f86:	4098      	lsls	r0, r3
 8002f88:	1e55      	subs	r5, r2, #1
 8002f8a:	41aa      	sbcs	r2, r5
 8002f8c:	4302      	orrs	r2, r0
 8002f8e:	4322      	orrs	r2, r4
 8002f90:	e7e4      	b.n	8002f5c <__aeabi_d2f+0xc4>
 8002f92:	0033      	movs	r3, r6
 8002f94:	e79e      	b.n	8002ed4 <__aeabi_d2f+0x3c>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	000007fe 	.word	0x000007fe
 8002f9c:	fffffc80 	.word	0xfffffc80
 8002fa0:	fffffca2 	.word	0xfffffca2
 8002fa4:	fffffc82 	.word	0xfffffc82

08002fa8 <__clzsi2>:
 8002fa8:	211c      	movs	r1, #28
 8002faa:	2301      	movs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	4298      	cmp	r0, r3
 8002fb0:	d301      	bcc.n	8002fb6 <__clzsi2+0xe>
 8002fb2:	0c00      	lsrs	r0, r0, #16
 8002fb4:	3910      	subs	r1, #16
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	4298      	cmp	r0, r3
 8002fba:	d301      	bcc.n	8002fc0 <__clzsi2+0x18>
 8002fbc:	0a00      	lsrs	r0, r0, #8
 8002fbe:	3908      	subs	r1, #8
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	4298      	cmp	r0, r3
 8002fc4:	d301      	bcc.n	8002fca <__clzsi2+0x22>
 8002fc6:	0900      	lsrs	r0, r0, #4
 8002fc8:	3904      	subs	r1, #4
 8002fca:	a202      	add	r2, pc, #8	; (adr r2, 8002fd4 <__clzsi2+0x2c>)
 8002fcc:	5c10      	ldrb	r0, [r2, r0]
 8002fce:	1840      	adds	r0, r0, r1
 8002fd0:	4770      	bx	lr
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	02020304 	.word	0x02020304
 8002fd8:	01010101 	.word	0x01010101
	...

08002fe4 <Get_BME280_in_all_readings>:

uint8_t tim3Flag = 0;
uint16_t myCnt[10] = {0};

void Get_BME280_in_all_readings()
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b093      	sub	sp, #76	; 0x4c
 8002fe8:	af12      	add	r7, sp, #72	; 0x48
	Sensors.BME280_Internal.Status = BME280_Get_ID(hi2c1, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 8002fea:	4c33      	ldr	r4, [pc, #204]	; (80030b8 <Get_BME280_in_all_readings+0xd4>)
 8002fec:	2314      	movs	r3, #20
 8002fee:	9310      	str	r3, [sp, #64]	; 0x40
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <Get_BME280_in_all_readings+0xd8>)
 8002ff2:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ff4:	466b      	mov	r3, sp
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	0023      	movs	r3, r4
 8002ffa:	3310      	adds	r3, #16
 8002ffc:	223c      	movs	r2, #60	; 0x3c
 8002ffe:	0019      	movs	r1, r3
 8003000:	f00b fbd6 	bl	800e7b0 <memcpy>
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	6861      	ldr	r1, [r4, #4]
 8003008:	68a2      	ldr	r2, [r4, #8]
 800300a:	68e3      	ldr	r3, [r4, #12]
 800300c:	f009 fd47 	bl	800ca9e <BME280_Get_ID>
 8003010:	0003      	movs	r3, r0
 8003012:	0019      	movs	r1, r3
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 8003016:	2230      	movs	r2, #48	; 0x30
 8003018:	5499      	strb	r1, [r3, r2]
	if(Sensors.BME280_Internal.Status != HAL_OK)
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 800301c:	2230      	movs	r2, #48	; 0x30
 800301e:	5c9b      	ldrb	r3, [r3, r2]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d143      	bne.n	80030ac <Get_BME280_in_all_readings+0xc8>
		return;
	Sensors.BME280_Internal.Status = BME280_Get_All(hi2c1, I2C_long_timeout);
 8003024:	4c24      	ldr	r4, [pc, #144]	; (80030b8 <Get_BME280_in_all_readings+0xd4>)
 8003026:	23c8      	movs	r3, #200	; 0xc8
 8003028:	930f      	str	r3, [sp, #60]	; 0x3c
 800302a:	466b      	mov	r3, sp
 800302c:	0018      	movs	r0, r3
 800302e:	0023      	movs	r3, r4
 8003030:	3310      	adds	r3, #16
 8003032:	223c      	movs	r2, #60	; 0x3c
 8003034:	0019      	movs	r1, r3
 8003036:	f00b fbbb 	bl	800e7b0 <memcpy>
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	6861      	ldr	r1, [r4, #4]
 800303e:	68a2      	ldr	r2, [r4, #8]
 8003040:	68e3      	ldr	r3, [r4, #12]
 8003042:	f009 ff2b 	bl	800ce9c <BME280_Get_All>
 8003046:	0003      	movs	r3, r0
 8003048:	0019      	movs	r1, r3
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 800304c:	2230      	movs	r2, #48	; 0x30
 800304e:	5499      	strb	r1, [r3, r2]
	if(Sensors.BME280_Internal.Status != HAL_OK)
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 8003052:	2230      	movs	r2, #48	; 0x30
 8003054:	5c9b      	ldrb	r3, [r3, r2]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d12a      	bne.n	80030b0 <Get_BME280_in_all_readings+0xcc>
		return;

	Sensors.BME280_Internal.Temperature = BME280_T_Double(&BME280_internal_Calib_Data);
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <Get_BME280_in_all_readings+0xe0>)
 800305c:	0018      	movs	r0, r3
 800305e:	f009 ff97 	bl	800cf90 <BME280_T_Double>
 8003062:	0002      	movs	r2, r0
 8003064:	000b      	movs	r3, r1
 8003066:	4916      	ldr	r1, [pc, #88]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 8003068:	638a      	str	r2, [r1, #56]	; 0x38
 800306a:	63cb      	str	r3, [r1, #60]	; 0x3c
	Sensors.BME280_Internal.Pressure = BME280_P_Double(&BME280_internal_Calib_Data);
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <Get_BME280_in_all_readings+0xe0>)
 800306e:	0018      	movs	r0, r3
 8003070:	f00a f84e 	bl	800d110 <BME280_P_Double>
 8003074:	0002      	movs	r2, r0
 8003076:	000b      	movs	r3, r1
 8003078:	4911      	ldr	r1, [pc, #68]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 800307a:	640a      	str	r2, [r1, #64]	; 0x40
 800307c:	644b      	str	r3, [r1, #68]	; 0x44
	Sensors.BME280_Internal.Humidity = BME280_H_Double(&BME280_internal_Calib_Data);
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <Get_BME280_in_all_readings+0xe0>)
 8003080:	0018      	movs	r0, r3
 8003082:	f00a f9db 	bl	800d43c <BME280_H_Double>
 8003086:	0002      	movs	r2, r0
 8003088:	000b      	movs	r3, r1
 800308a:	490d      	ldr	r1, [pc, #52]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 800308c:	650a      	str	r2, [r1, #80]	; 0x50
 800308e:	654b      	str	r3, [r1, #84]	; 0x54
	Sensors.BME280_Internal.Altitude = BME280_Altitude_Double(Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Pressure_ref);
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 8003092:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003094:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 8003098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	f00a fac6 	bl	800d62c <BME280_Altitude_Double>
 80030a0:	0002      	movs	r2, r0
 80030a2:	000b      	movs	r3, r1
 80030a4:	4906      	ldr	r1, [pc, #24]	; (80030c0 <Get_BME280_in_all_readings+0xdc>)
 80030a6:	658a      	str	r2, [r1, #88]	; 0x58
 80030a8:	65cb      	str	r3, [r1, #92]	; 0x5c
 80030aa:	e002      	b.n	80030b2 <Get_BME280_in_all_readings+0xce>
		return;
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	e000      	b.n	80030b2 <Get_BME280_in_all_readings+0xce>
		return;
 80030b0:	46c0      	nop			; (mov r8, r8)
}
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b001      	add	sp, #4
 80030b6:	bd90      	pop	{r4, r7, pc}
 80030b8:	20000214 	.word	0x20000214
 80030bc:	20000539 	.word	0x20000539
 80030c0:	20000508 	.word	0x20000508
 80030c4:	2000269c 	.word	0x2000269c

080030c8 <Get_MPU6050_all_readings>:
	Sensors.BME280_External.Humidity = BME280_H_Double(&BME280_external_Calib_Data);
	Sensors.BME280_External.Altitude = BME280_Altitude_Double(Sensors.BME280_External.Pressure, Sensors.BME280_External.Pressure_ref);
}
*/
void Get_MPU6050_all_readings()
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b093      	sub	sp, #76	; 0x4c
 80030cc:	af12      	add	r7, sp, #72	; 0x48
	Sensors.MPU6050.Status = MPU6050_read_ID(hi2c1, &Sensors.MPU6050.ID, I2C_short_timeout);
 80030ce:	4c2e      	ldr	r4, [pc, #184]	; (8003188 <Get_MPU6050_all_readings+0xc0>)
 80030d0:	2314      	movs	r3, #20
 80030d2:	9310      	str	r3, [sp, #64]	; 0x40
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <Get_MPU6050_all_readings+0xc4>)
 80030d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80030d8:	466b      	mov	r3, sp
 80030da:	0018      	movs	r0, r3
 80030dc:	0023      	movs	r3, r4
 80030de:	3310      	adds	r3, #16
 80030e0:	223c      	movs	r2, #60	; 0x3c
 80030e2:	0019      	movs	r1, r3
 80030e4:	f00b fb64 	bl	800e7b0 <memcpy>
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	6861      	ldr	r1, [r4, #4]
 80030ec:	68a2      	ldr	r2, [r4, #8]
 80030ee:	68e3      	ldr	r3, [r4, #12]
 80030f0:	f00a fb91 	bl	800d816 <MPU6050_read_ID>
 80030f4:	0003      	movs	r3, r0
 80030f6:	0019      	movs	r1, r3
 80030f8:	4b25      	ldr	r3, [pc, #148]	; (8003190 <Get_MPU6050_all_readings+0xc8>)
 80030fa:	2260      	movs	r2, #96	; 0x60
 80030fc:	5499      	strb	r1, [r3, r2]
	myCnt[2]++;
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <Get_MPU6050_all_readings+0xcc>)
 8003100:	889b      	ldrh	r3, [r3, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	4b23      	ldr	r3, [pc, #140]	; (8003194 <Get_MPU6050_all_readings+0xcc>)
 8003108:	809a      	strh	r2, [r3, #4]
	if(Sensors.MPU6050.Status != HAL_OK)
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <Get_MPU6050_all_readings+0xc8>)
 800310c:	2260      	movs	r2, #96	; 0x60
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d133      	bne.n	800317c <Get_MPU6050_all_readings+0xb4>
		return;
	Sensors.MPU6050.Status = MPU6050_read_All(hi2c1, I2C_long_timeout);
 8003114:	4c1c      	ldr	r4, [pc, #112]	; (8003188 <Get_MPU6050_all_readings+0xc0>)
 8003116:	23c8      	movs	r3, #200	; 0xc8
 8003118:	930f      	str	r3, [sp, #60]	; 0x3c
 800311a:	466b      	mov	r3, sp
 800311c:	0018      	movs	r0, r3
 800311e:	0023      	movs	r3, r4
 8003120:	3310      	adds	r3, #16
 8003122:	223c      	movs	r2, #60	; 0x3c
 8003124:	0019      	movs	r1, r3
 8003126:	f00b fb43 	bl	800e7b0 <memcpy>
 800312a:	6820      	ldr	r0, [r4, #0]
 800312c:	6861      	ldr	r1, [r4, #4]
 800312e:	68a2      	ldr	r2, [r4, #8]
 8003130:	68e3      	ldr	r3, [r4, #12]
 8003132:	f00a fb91 	bl	800d858 <MPU6050_read_All>
 8003136:	0003      	movs	r3, r0
 8003138:	0019      	movs	r1, r3
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <Get_MPU6050_all_readings+0xc8>)
 800313c:	2260      	movs	r2, #96	; 0x60
 800313e:	5499      	strb	r1, [r3, r2]
	myCnt[3]++;
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <Get_MPU6050_all_readings+0xcc>)
 8003142:	88db      	ldrh	r3, [r3, #6]
 8003144:	3301      	adds	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <Get_MPU6050_all_readings+0xcc>)
 800314a:	80da      	strh	r2, [r3, #6]
	if(Sensors.MPU6050.Status != HAL_OK)
 800314c:	4b10      	ldr	r3, [pc, #64]	; (8003190 <Get_MPU6050_all_readings+0xc8>)
 800314e:	2260      	movs	r2, #96	; 0x60
 8003150:	5c9b      	ldrb	r3, [r3, r2]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d114      	bne.n	8003180 <Get_MPU6050_all_readings+0xb8>
		return;

	MPU6050_Accel_double(&Sensors.MPU6050);
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <Get_MPU6050_all_readings+0xd0>)
 8003158:	0018      	movs	r0, r3
 800315a:	f00a fbff 	bl	800d95c <MPU6050_Accel_double>
	myCnt[4]++;
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <Get_MPU6050_all_readings+0xcc>)
 8003160:	891b      	ldrh	r3, [r3, #8]
 8003162:	3301      	adds	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <Get_MPU6050_all_readings+0xcc>)
 8003168:	811a      	strh	r2, [r3, #8]
	MPU6050_Gyro_double(&Sensors.MPU6050);
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <Get_MPU6050_all_readings+0xd0>)
 800316c:	0018      	movs	r0, r3
 800316e:	f00a fc57 	bl	800da20 <MPU6050_Gyro_double>
	MPU6050_Temp_double(&Sensors.MPU6050);
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <Get_MPU6050_all_readings+0xd0>)
 8003174:	0018      	movs	r0, r3
 8003176:	f00a fc2b 	bl	800d9d0 <MPU6050_Temp_double>
 800317a:	e002      	b.n	8003182 <Get_MPU6050_all_readings+0xba>
		return;
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	e000      	b.n	8003182 <Get_MPU6050_all_readings+0xba>
		return;
 8003180:	46c0      	nop			; (mov r8, r8)
}
 8003182:	46bd      	mov	sp, r7
 8003184:	b001      	add	sp, #4
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	20000214 	.word	0x20000214
 800318c:	20000569 	.word	0x20000569
 8003190:	20000508 	.word	0x20000508
 8003194:	200026c4 	.word	0x200026c4
 8003198:	20000568 	.word	0x20000568

0800319c <Get_QMC5883_all_readings>:




void Get_QMC5883_all_readings()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0

	if(QMC_read(&QMC_Data)==0)
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <Get_QMC5883_all_readings+0x24>)
 80031a2:	0018      	movs	r0, r3
 80031a4:	f00a fcea 	bl	800db7c <QMC_read>
 80031a8:	1e03      	subs	r3, r0, #0
 80031aa:	d103      	bne.n	80031b4 <Get_QMC5883_all_readings+0x18>
	{
		//HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
		Compas_Value=QMC_Data.heading;
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <Get_QMC5883_all_readings+0x24>)
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <Get_QMC5883_all_readings+0x28>)
 80031b2:	601a      	str	r2, [r3, #0]
	else
	{
		//HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
	}
	//HAL_Delay(50);
	HAL_Delay(I2C_long_timeout);
 80031b4:	20c8      	movs	r0, #200	; 0xc8
 80031b6:	f001 fa13 	bl	80045e0 <HAL_Delay>

}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200026d8 	.word	0x200026d8
 80031c4:	200026f4 	.word	0x200026f4

080031c8 <ClearBuffer>:


// Function to clear the buffer
void ClearBuffer(uint8_t *buffer, uint16_t size) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	000a      	movs	r2, r1
 80031d2:	1cbb      	adds	r3, r7, #2
 80031d4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80031d6:	230e      	movs	r3, #14
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]
 80031de:	e00b      	b.n	80031f8 <ClearBuffer+0x30>
        buffer[i] = '\0';
 80031e0:	210e      	movs	r1, #14
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	3201      	adds	r2, #1
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	230e      	movs	r3, #14
 80031fa:	18fa      	adds	r2, r7, r3
 80031fc:	1cbb      	adds	r3, r7, #2
 80031fe:	8812      	ldrh	r2, [r2, #0]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d3ec      	bcc.n	80031e0 <ClearBuffer+0x18>
    }
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b004      	add	sp, #16
 800320e:	bd80      	pop	{r7, pc}

08003210 <StartReception>:

// Make sure to call this function to start the first reception
void StartReception()
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
    ClearBuffer(USART1_RxBuffer, 6);
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <StartReception+0x20>)
 8003216:	2106      	movs	r1, #6
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff ffd5 	bl	80031c8 <ClearBuffer>
    HAL_UART_Receive_IT(&huart1, USART1_RxBuffer, 5);
 800321e:	4904      	ldr	r1, [pc, #16]	; (8003230 <StartReception+0x20>)
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <StartReception+0x24>)
 8003222:	2205      	movs	r2, #5
 8003224:	0018      	movs	r0, r3
 8003226:	f004 fe6b 	bl	8007f00 <HAL_UART_Receive_IT>
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200005d0 	.word	0x200005d0
 8003234:	20000378 	.word	0x20000378

08003238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323a:	46c6      	mov	lr, r8
 800323c:	b500      	push	{lr}
 800323e:	b0b6      	sub	sp, #216	; 0xd8
 8003240:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003242:	f001 f969 	bl	8004518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003246:	f000 f997 	bl	8003578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800324a:	f000 fc09 	bl	8003a60 <MX_GPIO_Init>
  MX_I2C1_Init();
 800324e:	f000 fa01 	bl	8003654 <MX_I2C1_Init>
  MX_RTC_Init();
 8003252:	f000 fa7f 	bl	8003754 <MX_RTC_Init>
  MX_TIM3_Init();
 8003256:	f000 fb1d 	bl	8003894 <MX_TIM3_Init>
  MX_I2C2_Init();
 800325a:	f000 fa3b 	bl	80036d4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800325e:	f000 fadb 	bl	8003818 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003262:	f006 f82f 	bl	80092c4 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8003266:	f000 fb6b 	bl	8003940 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800326a:	f000 fb99 	bl	80039a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800326e:	f000 fbc7 	bl	8003a00 <MX_USART3_UART_Init>
  /*------------------Sensors init-----------------------*/
//  	Sensors.BME280_Internal.Pressure_ref = PRESSURE_REFERENCE;
//	Sensors.BME280_External.Pressure_ref = PRESSURE_REFERENCE;

  	/* Wait for Sensor power-on */
  	HAL_Delay(1000);
 8003272:	23fa      	movs	r3, #250	; 0xfa
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	0018      	movs	r0, r3
 8003278:	f001 f9b2 	bl	80045e0 <HAL_Delay>

  	Sensors.BME280_Internal.Status = BME280_Get_ID(hi2c1, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 800327c:	4caa      	ldr	r4, [pc, #680]	; (8003528 <main+0x2f0>)
 800327e:	2314      	movs	r3, #20
 8003280:	9310      	str	r3, [sp, #64]	; 0x40
 8003282:	4baa      	ldr	r3, [pc, #680]	; (800352c <main+0x2f4>)
 8003284:	930f      	str	r3, [sp, #60]	; 0x3c
 8003286:	466b      	mov	r3, sp
 8003288:	0018      	movs	r0, r3
 800328a:	0023      	movs	r3, r4
 800328c:	3310      	adds	r3, #16
 800328e:	223c      	movs	r2, #60	; 0x3c
 8003290:	0019      	movs	r1, r3
 8003292:	f00b fa8d 	bl	800e7b0 <memcpy>
 8003296:	6820      	ldr	r0, [r4, #0]
 8003298:	6861      	ldr	r1, [r4, #4]
 800329a:	68a2      	ldr	r2, [r4, #8]
 800329c:	68e3      	ldr	r3, [r4, #12]
 800329e:	f009 fbfe 	bl	800ca9e <BME280_Get_ID>
 80032a2:	0003      	movs	r3, r0
 80032a4:	0019      	movs	r1, r3
 80032a6:	4ba2      	ldr	r3, [pc, #648]	; (8003530 <main+0x2f8>)
 80032a8:	2230      	movs	r2, #48	; 0x30
 80032aa:	5499      	strb	r1, [r3, r2]
  	if (Sensors.BME280_Internal.Status == HAL_OK)
 80032ac:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <main+0x2f8>)
 80032ae:	2230      	movs	r2, #48	; 0x30
 80032b0:	5c9b      	ldrb	r3, [r3, r2]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d12f      	bne.n	8003316 <main+0xde>
  	{
  		Sensors.BME280_Internal.Status = BME280_Init(hi2c1, I2C_short_timeout);
 80032b6:	4c9c      	ldr	r4, [pc, #624]	; (8003528 <main+0x2f0>)
 80032b8:	2314      	movs	r3, #20
 80032ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80032bc:	466b      	mov	r3, sp
 80032be:	0018      	movs	r0, r3
 80032c0:	0023      	movs	r3, r4
 80032c2:	3310      	adds	r3, #16
 80032c4:	223c      	movs	r2, #60	; 0x3c
 80032c6:	0019      	movs	r1, r3
 80032c8:	f00b fa72 	bl	800e7b0 <memcpy>
 80032cc:	6820      	ldr	r0, [r4, #0]
 80032ce:	6861      	ldr	r1, [r4, #4]
 80032d0:	68a2      	ldr	r2, [r4, #8]
 80032d2:	68e3      	ldr	r3, [r4, #12]
 80032d4:	f009 fb64 	bl	800c9a0 <BME280_Init>
 80032d8:	0003      	movs	r3, r0
 80032da:	0019      	movs	r1, r3
 80032dc:	4b94      	ldr	r3, [pc, #592]	; (8003530 <main+0x2f8>)
 80032de:	2230      	movs	r2, #48	; 0x30
 80032e0:	5499      	strb	r1, [r3, r2]
  		Sensors.BME280_Internal.Status = BME280_Calib_Read(hi2c1, &BME280_internal_Calib_Data, I2C_long_timeout);
 80032e2:	4c91      	ldr	r4, [pc, #580]	; (8003528 <main+0x2f0>)
 80032e4:	23c8      	movs	r3, #200	; 0xc8
 80032e6:	9310      	str	r3, [sp, #64]	; 0x40
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <main+0x2fc>)
 80032ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80032ec:	466b      	mov	r3, sp
 80032ee:	0018      	movs	r0, r3
 80032f0:	0023      	movs	r3, r4
 80032f2:	3310      	adds	r3, #16
 80032f4:	223c      	movs	r2, #60	; 0x3c
 80032f6:	0019      	movs	r1, r3
 80032f8:	f00b fa5a 	bl	800e7b0 <memcpy>
 80032fc:	6820      	ldr	r0, [r4, #0]
 80032fe:	6861      	ldr	r1, [r4, #4]
 8003300:	68a2      	ldr	r2, [r4, #8]
 8003302:	68e3      	ldr	r3, [r4, #12]
 8003304:	f009 fbec 	bl	800cae0 <BME280_Calib_Read>
 8003308:	0003      	movs	r3, r0
 800330a:	0019      	movs	r1, r3
 800330c:	4b88      	ldr	r3, [pc, #544]	; (8003530 <main+0x2f8>)
 800330e:	2230      	movs	r2, #48	; 0x30
 8003310:	5499      	strb	r1, [r3, r2]
  		Get_BME280_in_all_readings();
 8003312:	f7ff fe67 	bl	8002fe4 <Get_BME280_in_all_readings>
  		Sensors.BME280_External.Status = BME280_Init(hi2c2, I2C_short_timeout);
  		Sensors.BME280_External.Status = BME280_Calib_Read(hi2c2, &BME280_external_Calib_Data, I2C_long_timeout);
  		Get_BME280_ex_all_readings();
  	}
*/
  	Sensors.MPU6050.Status = MPU6050_read_ID(hi2c1, &Sensors.MPU6050.ID, I2C_short_timeout);
 8003316:	4c84      	ldr	r4, [pc, #528]	; (8003528 <main+0x2f0>)
 8003318:	2314      	movs	r3, #20
 800331a:	9310      	str	r3, [sp, #64]	; 0x40
 800331c:	4b86      	ldr	r3, [pc, #536]	; (8003538 <main+0x300>)
 800331e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003320:	466b      	mov	r3, sp
 8003322:	0018      	movs	r0, r3
 8003324:	0023      	movs	r3, r4
 8003326:	3310      	adds	r3, #16
 8003328:	223c      	movs	r2, #60	; 0x3c
 800332a:	0019      	movs	r1, r3
 800332c:	f00b fa40 	bl	800e7b0 <memcpy>
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	6861      	ldr	r1, [r4, #4]
 8003334:	68a2      	ldr	r2, [r4, #8]
 8003336:	68e3      	ldr	r3, [r4, #12]
 8003338:	f00a fa6d 	bl	800d816 <MPU6050_read_ID>
 800333c:	0003      	movs	r3, r0
 800333e:	0019      	movs	r1, r3
 8003340:	4b7b      	ldr	r3, [pc, #492]	; (8003530 <main+0x2f8>)
 8003342:	2260      	movs	r2, #96	; 0x60
 8003344:	5499      	strb	r1, [r3, r2]
  	if (Sensors.MPU6050.Status == HAL_OK)
 8003346:	4b7a      	ldr	r3, [pc, #488]	; (8003530 <main+0x2f8>)
 8003348:	2260      	movs	r2, #96	; 0x60
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d117      	bne.n	8003380 <main+0x148>
  	{
  		Sensors.MPU6050.Status = MPU6050_Init(hi2c1, I2C_short_timeout);
 8003350:	4c75      	ldr	r4, [pc, #468]	; (8003528 <main+0x2f0>)
 8003352:	2314      	movs	r3, #20
 8003354:	930f      	str	r3, [sp, #60]	; 0x3c
 8003356:	466b      	mov	r3, sp
 8003358:	0018      	movs	r0, r3
 800335a:	0023      	movs	r3, r4
 800335c:	3310      	adds	r3, #16
 800335e:	223c      	movs	r2, #60	; 0x3c
 8003360:	0019      	movs	r1, r3
 8003362:	f00b fa25 	bl	800e7b0 <memcpy>
 8003366:	6820      	ldr	r0, [r4, #0]
 8003368:	6861      	ldr	r1, [r4, #4]
 800336a:	68a2      	ldr	r2, [r4, #8]
 800336c:	68e3      	ldr	r3, [r4, #12]
 800336e:	f00a f993 	bl	800d698 <MPU6050_Init>
 8003372:	0003      	movs	r3, r0
 8003374:	0019      	movs	r1, r3
 8003376:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <main+0x2f8>)
 8003378:	2260      	movs	r2, #96	; 0x60
 800337a:	5499      	strb	r1, [r3, r2]
  		Get_MPU6050_all_readings();
 800337c:	f7ff fea4 	bl	80030c8 <Get_MPU6050_all_readings>
*/ //1.library




  	Sensors.QMC5883.Status = QMC_init(&QMC_Data, &hi2c1, 200);
 8003380:	4969      	ldr	r1, [pc, #420]	; (8003528 <main+0x2f0>)
 8003382:	4b6e      	ldr	r3, [pc, #440]	; (800353c <main+0x304>)
 8003384:	22c8      	movs	r2, #200	; 0xc8
 8003386:	0018      	movs	r0, r3
 8003388:	f00a fb84 	bl	800da94 <QMC_init>
 800338c:	0003      	movs	r3, r0
 800338e:	0019      	movs	r1, r3
 8003390:	4b67      	ldr	r3, [pc, #412]	; (8003530 <main+0x2f8>)
 8003392:	22a0      	movs	r2, #160	; 0xa0
 8003394:	5499      	strb	r1, [r3, r2]



  	Data = MY_SDCard_SetUp();
 8003396:	4c6a      	ldr	r4, [pc, #424]	; (8003540 <main+0x308>)
 8003398:	003b      	movs	r3, r7
 800339a:	0018      	movs	r0, r3
 800339c:	f000 fbe0 	bl	8003b60 <MY_SDCard_SetUp>
 80033a0:	003a      	movs	r2, r7
 80033a2:	0023      	movs	r3, r4
 80033a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033a6:	c313      	stmia	r3!, {r0, r1, r4}
 80033a8:	ca03      	ldmia	r2!, {r0, r1}
 80033aa:	c303      	stmia	r3!, {r0, r1}
  	HAL_TIM_Base_Start_IT(&htim3);
 80033ac:	4b65      	ldr	r3, [pc, #404]	; (8003544 <main+0x30c>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f004 f85a 	bl	8007468 <HAL_TIM_Base_Start_IT>
  	//HAL_UART_Receive_IT(&huart1, USART1_RxBuffer, 10);
  	//HAL_UART_Receive_IT(&huart3, Rx_command3, 1);
  	StartReception();
 80033b4:	f7ff ff2c 	bl	8003210 <StartReception>

    /* USER CODE BEGIN 3 */



	switch(SM.state){
 80033b8:	4b63      	ldr	r3, [pc, #396]	; (8003548 <main+0x310>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d100      	bne.n	80033c2 <main+0x18a>
 80033c0:	e082      	b.n	80034c8 <main+0x290>
 80033c2:	dd00      	ble.n	80033c6 <main+0x18e>
 80033c4:	e0a8      	b.n	8003518 <main+0x2e0>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <main+0x198>
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d029      	beq.n	8003422 <main+0x1ea>
 80033ce:	e0a3      	b.n	8003518 <main+0x2e0>
		case SM_STATE_READ_SENSORS:
			if(tim3Flag == 1){
 80033d0:	4b5e      	ldr	r3, [pc, #376]	; (800354c <main+0x314>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11c      	bne.n	8003412 <main+0x1da>
				Get_BME280_in_all_readings();
 80033d8:	f7ff fe04 	bl	8002fe4 <Get_BME280_in_all_readings>
				//Get_BME280_ex_all_readings();
	  	  		Get_MPU6050_all_readings();
 80033dc:	f7ff fe74 	bl	80030c8 <Get_MPU6050_all_readings>
	  	  		Get_QMC5883_all_readings();
 80033e0:	f7ff fedc 	bl	800319c <Get_QMC5883_all_readings>
	  	  		//QMC_read(&QMC_Data);

	  	  		//HAL_UART_Transmit(&huart1, (uint8_t *)tx_data, strlen(tx_data), HAL_MAX_DELAY);

	  	  		HAL_RTC_GetTime(&hrtc, &systemRTCTime, RTC_FORMAT_BIN);
 80033e4:	495a      	ldr	r1, [pc, #360]	; (8003550 <main+0x318>)
 80033e6:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <main+0x31c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	0018      	movs	r0, r3
 80033ec:	f003 f8aa 	bl	8006544 <HAL_RTC_GetTime>
	  	  		HAL_RTC_GetDate(&hrtc, &systemRTCDate, RTC_FORMAT_BIN);
 80033f0:	4959      	ldr	r1, [pc, #356]	; (8003558 <main+0x320>)
 80033f2:	4b58      	ldr	r3, [pc, #352]	; (8003554 <main+0x31c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	0018      	movs	r0, r3
 80033f8:	f003 f9a8 	bl	800674c <HAL_RTC_GetDate>
	  	  		tim3Flag = 0;
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <main+0x314>)
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
	  	  		SM.nextState= SM_STATE_WRITE_TO_SD_CARD;
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <main+0x310>)
 8003404:	2201      	movs	r2, #1
 8003406:	705a      	strb	r2, [r3, #1]
	  	  		SM.state = SM.nextState;
 8003408:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <main+0x310>)
 800340a:	785a      	ldrb	r2, [r3, #1]
 800340c:	4b4e      	ldr	r3, [pc, #312]	; (8003548 <main+0x310>)
 800340e:	701a      	strb	r2, [r3, #0]
	  	  		break;
 8003410:	e088      	b.n	8003524 <main+0x2ec>
	  	  	}
	  	  	//SM.nextState= SM_STATE_READ_SENSORS;
	  	  	SM.nextState= SM_STATE_WRITE_TO_SD_CARD;
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <main+0x310>)
 8003414:	2201      	movs	r2, #1
 8003416:	705a      	strb	r2, [r3, #1]
	  	  	SM.state = SM.nextState;
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <main+0x310>)
 800341a:	785a      	ldrb	r2, [r3, #1]
 800341c:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <main+0x310>)
 800341e:	701a      	strb	r2, [r3, #0]
	  	 break;
 8003420:	e080      	b.n	8003524 <main+0x2ec>
	  	 case SM_STATE_WRITE_TO_SD_CARD:
	  		 if((Data.statuss == 1) && (Data.statusSync == FR_OK)){
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <main+0x308>)
 8003424:	791b      	ldrb	r3, [r3, #4]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d145      	bne.n	80034b8 <main+0x280>
 800342c:	4b44      	ldr	r3, [pc, #272]	; (8003540 <main+0x308>)
 800342e:	78db      	ldrb	r3, [r3, #3]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d140      	bne.n	80034b8 <main+0x280>
	  			 char TempStr[100];
	  	  		 //sprintf(TempStr, "%9.2f  %9.2f  %9.2f  %9.2f  \n", Sensors.BME280_Internal.Temperature, Sensors.BME280_Internal.Humidity, Sensors.MPU650.Gyro_X, Sensors.MPU650.Gyro_Y);
	  			 sprintf(TempStr, "%d\t%d\t%d\t%3.2f\t%3.2f\n",systemRTCTime.Hours, systemRTCTime.Minutes, systemRTCTime.Seconds, Sensors.BME280_Internal.Temperature, Sensors.BME280_Internal.Pressure);
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <main+0x318>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	469c      	mov	ip, r3
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <main+0x318>)
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	4698      	mov	r8, r3
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <main+0x318>)
 8003444:	789b      	ldrb	r3, [r3, #2]
 8003446:	001e      	movs	r6, r3
 8003448:	4b39      	ldr	r3, [pc, #228]	; (8003530 <main+0x2f8>)
 800344a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	4938      	ldr	r1, [pc, #224]	; (8003530 <main+0x2f8>)
 8003450:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8003452:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003454:	4d41      	ldr	r5, [pc, #260]	; (800355c <main+0x324>)
 8003456:	2418      	movs	r4, #24
 8003458:	193c      	adds	r4, r7, r4
 800345a:	9004      	str	r0, [sp, #16]
 800345c:	9105      	str	r1, [sp, #20]
 800345e:	9202      	str	r2, [sp, #8]
 8003460:	9303      	str	r3, [sp, #12]
 8003462:	9600      	str	r6, [sp, #0]
 8003464:	4643      	mov	r3, r8
 8003466:	4662      	mov	r2, ip
 8003468:	0029      	movs	r1, r5
 800346a:	0020      	movs	r0, r4
 800346c:	f00b fe3a 	bl	800f0e4 <siprintf>
	  			 f_printf(&fil, TempStr);
 8003470:	2418      	movs	r4, #24
 8003472:	193a      	adds	r2, r7, r4
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <main+0x328>)
 8003476:	0011      	movs	r1, r2
 8003478:	0018      	movs	r0, r3
 800347a:	f008 fffd 	bl	800c478 <f_printf>
	  	  		 Data.statusSync = f_sync(&fil);
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <main+0x328>)
 8003480:	0018      	movs	r0, r3
 8003482:	f008 fdf9 	bl	800c078 <f_sync>
 8003486:	0003      	movs	r3, r0
 8003488:	001a      	movs	r2, r3
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <main+0x308>)
 800348c:	70da      	strb	r2, [r3, #3]
	  	  		 myCnt[1]++;
 800348e:	4b35      	ldr	r3, [pc, #212]	; (8003564 <main+0x32c>)
 8003490:	885b      	ldrh	r3, [r3, #2]
 8003492:	3301      	adds	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <main+0x32c>)
 8003498:	805a      	strh	r2, [r3, #2]
	  	  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	015b      	lsls	r3, r3, #5
 800349e:	4a32      	ldr	r2, [pc, #200]	; (8003568 <main+0x330>)
 80034a0:	0019      	movs	r1, r3
 80034a2:	0010      	movs	r0, r2
 80034a4:	f001 fba9 	bl	8004bfa <HAL_GPIO_TogglePin>
	  	  		 //SM.nextState= SM_STATE_SEND_DATA_TO_COM;
	  	  		 SM.nextState= SM_STATE_READ_SENSORS;
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <main+0x310>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	705a      	strb	r2, [r3, #1]
	  	  		 SM.state = SM.nextState;
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <main+0x310>)
 80034b0:	785a      	ldrb	r2, [r3, #1]
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <main+0x310>)
 80034b4:	701a      	strb	r2, [r3, #0]
	  	  		 break;
 80034b6:	e035      	b.n	8003524 <main+0x2ec>
	  	  	  }
	  	  	  //SM.nextState= SM_STATE_SEND_DATA_TO_COM;
	  		  SM.nextState= SM_STATE_READ_SENSORS;
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <main+0x310>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	705a      	strb	r2, [r3, #1]
	  	  	  SM.state = SM.nextState;
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <main+0x310>)
 80034c0:	785a      	ldrb	r2, [r3, #1]
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <main+0x310>)
 80034c4:	701a      	strb	r2, [r3, #0]
	  	 break;
 80034c6:	e02d      	b.n	8003524 <main+0x2ec>
	  	 case SM_STATE_SEND_DATA_TO_COM:
	  		 memset(Data_to_send, 0, sizeof(Data_to_send));
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <main+0x334>)
 80034ca:	2232      	movs	r2, #50	; 0x32
 80034cc:	2100      	movs	r1, #0
 80034ce:	0018      	movs	r0, r3
 80034d0:	f00b f977 	bl	800e7c2 <memset>
	  		 char TempStr[20];
	  		 sprintf(TempStr, "%.2f", Sensors.BME280_Internal.Temperature);
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <main+0x2f8>)
 80034d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	4925      	ldr	r1, [pc, #148]	; (8003570 <main+0x338>)
 80034dc:	247c      	movs	r4, #124	; 0x7c
 80034de:	1938      	adds	r0, r7, r4
 80034e0:	f00b fe00 	bl	800f0e4 <siprintf>
	  		 strcat(Data_to_send, TempStr);
 80034e4:	193a      	adds	r2, r7, r4
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <main+0x334>)
 80034e8:	0011      	movs	r1, r2
 80034ea:	0018      	movs	r0, r3
 80034ec:	f00b fe1a 	bl	800f124 <strcat>
	  		 HAL_UART_Transmit_IT(&huart1,Data_to_send, 5);
 80034f0:	491e      	ldr	r1, [pc, #120]	; (800356c <main+0x334>)
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <main+0x33c>)
 80034f4:	2205      	movs	r2, #5
 80034f6:	0018      	movs	r0, r3
 80034f8:	f004 fc82 	bl	8007e00 <HAL_UART_Transmit_IT>
	  		 SM.nextState= SM_STATE_READ_SENSORS;
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <main+0x310>)
 80034fe:	2200      	movs	r2, #0
 8003500:	705a      	strb	r2, [r3, #1]
	  		 SM.state = SM.nextState;
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <main+0x310>)
 8003504:	785a      	ldrb	r2, [r3, #1]
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <main+0x310>)
 8003508:	701a      	strb	r2, [r3, #0]
	  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <main+0x330>)
 8003510:	0019      	movs	r1, r3
 8003512:	0010      	movs	r0, r2
 8003514:	f001 fb71 	bl	8004bfa <HAL_GPIO_TogglePin>
	  	 default:
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <main+0x330>)
 800351a:	2201      	movs	r2, #1
 800351c:	2104      	movs	r1, #4
 800351e:	0018      	movs	r0, r3
 8003520:	f001 fb4e 	bl	8004bc0 <HAL_GPIO_WritePin>
	switch(SM.state){
 8003524:	e748      	b.n	80033b8 <main+0x180>
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000214 	.word	0x20000214
 800352c:	20000539 	.word	0x20000539
 8003530:	20000508 	.word	0x20000508
 8003534:	2000269c 	.word	0x2000269c
 8003538:	20000569 	.word	0x20000569
 800353c:	200026d8 	.word	0x200026d8
 8003540:	2000266c 	.word	0x2000266c
 8003544:	20000330 	.word	0x20000330
 8003548:	20002698 	.word	0x20002698
 800354c:	200026c0 	.word	0x200026c0
 8003550:	20002684 	.word	0x20002684
 8003554:	200002ac 	.word	0x200002ac
 8003558:	20002680 	.word	0x20002680
 800355c:	08012840 	.word	0x08012840
 8003560:	2000160c 	.word	0x2000160c
 8003564:	200026c4 	.word	0x200026c4
 8003568:	48000400 	.word	0x48000400
 800356c:	20002638 	.word	0x20002638
 8003570:	08012858 	.word	0x08012858
 8003574:	20000378 	.word	0x20000378

08003578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b095      	sub	sp, #84	; 0x54
 800357c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800357e:	2420      	movs	r4, #32
 8003580:	193b      	adds	r3, r7, r4
 8003582:	0018      	movs	r0, r3
 8003584:	2330      	movs	r3, #48	; 0x30
 8003586:	001a      	movs	r2, r3
 8003588:	2100      	movs	r1, #0
 800358a:	f00b f91a 	bl	800e7c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800358e:	2310      	movs	r3, #16
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	0018      	movs	r0, r3
 8003594:	2310      	movs	r3, #16
 8003596:	001a      	movs	r2, r3
 8003598:	2100      	movs	r1, #0
 800359a:	f00b f912 	bl	800e7c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800359e:	003b      	movs	r3, r7
 80035a0:	0018      	movs	r0, r3
 80035a2:	2310      	movs	r3, #16
 80035a4:	001a      	movs	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	f00b f90b 	bl	800e7c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80035ac:	0021      	movs	r1, r4
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	220a      	movs	r2, #10
 80035b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	2201      	movs	r2, #1
 80035b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	2210      	movs	r2, #16
 80035be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2201      	movs	r2, #1
 80035c4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2202      	movs	r2, #2
 80035ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	0212      	lsls	r2, r2, #8
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	0312      	lsls	r2, r2, #12
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	2200      	movs	r2, #0
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	0018      	movs	r0, r3
 80035e6:	f002 f921 	bl	800582c <HAL_RCC_OscConfig>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80035ee:	f000 fc39 	bl	8003e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035f2:	2110      	movs	r1, #16
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2207      	movs	r2, #7
 80035f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2202      	movs	r2, #2
 80035fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2101      	movs	r1, #1
 8003610:	0018      	movs	r0, r3
 8003612:	f002 fc29 	bl	8005e68 <HAL_RCC_ClockConfig>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d001      	beq.n	800361e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800361a:	f000 fc23 	bl	8003e64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800361e:	003b      	movs	r3, r7
 8003620:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <SystemClock_Config+0xd8>)
 8003622:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003624:	003b      	movs	r3, r7
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800362a:	003b      	movs	r3, r7
 800362c:	2210      	movs	r2, #16
 800362e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003630:	003b      	movs	r3, r7
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003638:	003b      	movs	r3, r7
 800363a:	0018      	movs	r0, r3
 800363c:	f002 fd64 	bl	8006108 <HAL_RCCEx_PeriphCLKConfig>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d001      	beq.n	8003648 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003644:	f000 fc0e 	bl	8003e64 <Error_Handler>
  }
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b015      	add	sp, #84	; 0x54
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	00010021 	.word	0x00010021

08003654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <MX_I2C1_Init+0x74>)
 800365a:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <MX_I2C1_Init+0x78>)
 800365c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800365e:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <MX_I2C1_Init+0x74>)
 8003660:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <MX_I2C1_Init+0x7c>)
 8003662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003664:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <MX_I2C1_Init+0x74>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <MX_I2C1_Init+0x74>)
 800366c:	2201      	movs	r2, #1
 800366e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003670:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <MX_I2C1_Init+0x74>)
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <MX_I2C1_Init+0x74>)
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <MX_I2C1_Init+0x74>)
 800367e:	2200      	movs	r2, #0
 8003680:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <MX_I2C1_Init+0x74>)
 8003684:	2200      	movs	r2, #0
 8003686:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <MX_I2C1_Init+0x74>)
 800368a:	2200      	movs	r2, #0
 800368c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <MX_I2C1_Init+0x74>)
 8003690:	0018      	movs	r0, r3
 8003692:	f001 fae9 	bl	8004c68 <HAL_I2C_Init>
 8003696:	1e03      	subs	r3, r0, #0
 8003698:	d001      	beq.n	800369e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800369a:	f000 fbe3 	bl	8003e64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <MX_I2C1_Init+0x74>)
 80036a0:	2100      	movs	r1, #0
 80036a2:	0018      	movs	r0, r3
 80036a4:	f002 f82a 	bl	80056fc <HAL_I2CEx_ConfigAnalogFilter>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d001      	beq.n	80036b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80036ac:	f000 fbda 	bl	8003e64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <MX_I2C1_Init+0x74>)
 80036b2:	2100      	movs	r1, #0
 80036b4:	0018      	movs	r0, r3
 80036b6:	f002 f86d 	bl	8005794 <HAL_I2CEx_ConfigDigitalFilter>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80036be:	f000 fbd1 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000214 	.word	0x20000214
 80036cc:	40005400 	.word	0x40005400
 80036d0:	00707cbb 	.word	0x00707cbb

080036d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <MX_I2C2_Init+0x74>)
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <MX_I2C2_Init+0x78>)
 80036dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x003038FF;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <MX_I2C2_Init+0x74>)
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <MX_I2C2_Init+0x7c>)
 80036e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <MX_I2C2_Init+0x74>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <MX_I2C2_Init+0x74>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <MX_I2C2_Init+0x74>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <MX_I2C2_Init+0x74>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <MX_I2C2_Init+0x74>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_I2C2_Init+0x74>)
 8003704:	2200      	movs	r2, #0
 8003706:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <MX_I2C2_Init+0x74>)
 800370a:	2200      	movs	r2, #0
 800370c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_I2C2_Init+0x74>)
 8003710:	0018      	movs	r0, r3
 8003712:	f001 faa9 	bl	8004c68 <HAL_I2C_Init>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d001      	beq.n	800371e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800371a:	f000 fba3 	bl	8003e64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <MX_I2C2_Init+0x74>)
 8003720:	2100      	movs	r1, #0
 8003722:	0018      	movs	r0, r3
 8003724:	f001 ffea 	bl	80056fc <HAL_I2CEx_ConfigAnalogFilter>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d001      	beq.n	8003730 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800372c:	f000 fb9a 	bl	8003e64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <MX_I2C2_Init+0x74>)
 8003732:	2100      	movs	r1, #0
 8003734:	0018      	movs	r0, r3
 8003736:	f002 f82d 	bl	8005794 <HAL_I2CEx_ConfigDigitalFilter>
 800373a:	1e03      	subs	r3, r0, #0
 800373c:	d001      	beq.n	8003742 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800373e:	f000 fb91 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000260 	.word	0x20000260
 800374c:	40005800 	.word	0x40005800
 8003750:	003038ff 	.word	0x003038ff

08003754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	0018      	movs	r0, r3
 800375e:	2314      	movs	r3, #20
 8003760:	001a      	movs	r2, r3
 8003762:	2100      	movs	r1, #0
 8003764:	f00b f82d 	bl	800e7c2 <memset>
  RTC_DateTypeDef sDate = {0};
 8003768:	003b      	movs	r3, r7
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800376e:	4b28      	ldr	r3, [pc, #160]	; (8003810 <MX_RTC_Init+0xbc>)
 8003770:	4a28      	ldr	r2, [pc, #160]	; (8003814 <MX_RTC_Init+0xc0>)
 8003772:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <MX_RTC_Init+0xbc>)
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800377a:	4b25      	ldr	r3, [pc, #148]	; (8003810 <MX_RTC_Init+0xbc>)
 800377c:	227f      	movs	r2, #127	; 0x7f
 800377e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003780:	4b23      	ldr	r3, [pc, #140]	; (8003810 <MX_RTC_Init+0xbc>)
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <MX_RTC_Init+0xbc>)
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800378c:	4b20      	ldr	r3, [pc, #128]	; (8003810 <MX_RTC_Init+0xbc>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <MX_RTC_Init+0xbc>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003798:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <MX_RTC_Init+0xbc>)
 800379a:	0018      	movs	r0, r3
 800379c:	f002 fd82 	bl	80062a4 <HAL_RTC_Init>
 80037a0:	1e03      	subs	r3, r0, #0
 80037a2:	d001      	beq.n	80037a8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80037a4:	f000 fb5e 	bl	8003e64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	2200      	movs	r2, #0
 80037b2:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	2200      	movs	r2, #0
 80037b8:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	2200      	movs	r2, #0
 80037be:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037c0:	1d3b      	adds	r3, r7, #4
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80037c6:	1d39      	adds	r1, r7, #4
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <MX_RTC_Init+0xbc>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	0018      	movs	r0, r3
 80037ce:	f002 fdfd 	bl	80063cc <HAL_RTC_SetTime>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80037d6:	f000 fb45 	bl	8003e64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80037da:	003b      	movs	r3, r7
 80037dc:	2206      	movs	r2, #6
 80037de:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80037e0:	003b      	movs	r3, r7
 80037e2:	2202      	movs	r2, #2
 80037e4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x25;
 80037e6:	003b      	movs	r3, r7
 80037e8:	2225      	movs	r2, #37	; 0x25
 80037ea:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 80037ec:	003b      	movs	r3, r7
 80037ee:	2223      	movs	r2, #35	; 0x23
 80037f0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80037f2:	0039      	movs	r1, r7
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <MX_RTC_Init+0xbc>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	0018      	movs	r0, r3
 80037fa:	f002 ff01 	bl	8006600 <HAL_RTC_SetDate>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8003802:	f000 fb2f 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b006      	add	sp, #24
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	200002ac 	.word	0x200002ac
 8003814:	40002800 	.word	0x40002800

08003818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <MX_SPI1_Init+0x74>)
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <MX_SPI1_Init+0x78>)
 8003820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <MX_SPI1_Init+0x74>)
 8003824:	2282      	movs	r2, #130	; 0x82
 8003826:	0052      	lsls	r2, r2, #1
 8003828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800382a:	4b18      	ldr	r3, [pc, #96]	; (800388c <MX_SPI1_Init+0x74>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003830:	4b16      	ldr	r3, [pc, #88]	; (800388c <MX_SPI1_Init+0x74>)
 8003832:	22e0      	movs	r2, #224	; 0xe0
 8003834:	00d2      	lsls	r2, r2, #3
 8003836:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <MX_SPI1_Init+0x74>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <MX_SPI1_Init+0x74>)
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <MX_SPI1_Init+0x74>)
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <MX_SPI1_Init+0x74>)
 800384e:	2220      	movs	r2, #32
 8003850:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <MX_SPI1_Init+0x74>)
 8003854:	2200      	movs	r2, #0
 8003856:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <MX_SPI1_Init+0x74>)
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <MX_SPI1_Init+0x74>)
 8003860:	2200      	movs	r2, #0
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <MX_SPI1_Init+0x74>)
 8003866:	2207      	movs	r2, #7
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <MX_SPI1_Init+0x74>)
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <MX_SPI1_Init+0x74>)
 8003872:	2208      	movs	r2, #8
 8003874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <MX_SPI1_Init+0x74>)
 8003878:	0018      	movs	r0, r3
 800387a:	f003 f84d 	bl	8006918 <HAL_SPI_Init>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d001      	beq.n	8003886 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003882:	f000 faef 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200002cc 	.word	0x200002cc
 8003890:	40013000 	.word	0x40013000

08003894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389a:	2308      	movs	r3, #8
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	0018      	movs	r0, r3
 80038a0:	2310      	movs	r3, #16
 80038a2:	001a      	movs	r2, r3
 80038a4:	2100      	movs	r1, #0
 80038a6:	f00a ff8c 	bl	800e7c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038aa:	003b      	movs	r3, r7
 80038ac:	0018      	movs	r0, r3
 80038ae:	2308      	movs	r3, #8
 80038b0:	001a      	movs	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	f00a ff85 	bl	800e7c2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038ba:	4a20      	ldr	r2, [pc, #128]	; (800393c <MX_TIM3_Init+0xa8>)
 80038bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038c0:	22fa      	movs	r2, #250	; 0xfa
 80038c2:	01d2      	lsls	r2, r2, #7
 80038c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038ce:	22fa      	movs	r2, #250	; 0xfa
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038e2:	0018      	movs	r0, r3
 80038e4:	f003 fd70 	bl	80073c8 <HAL_TIM_Base_Init>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d001      	beq.n	80038f0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80038ec:	f000 faba 	bl	8003e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f0:	2108      	movs	r1, #8
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	0152      	lsls	r2, r2, #5
 80038f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038fa:	187a      	adds	r2, r7, r1
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <MX_TIM3_Init+0xa4>)
 80038fe:	0011      	movs	r1, r2
 8003900:	0018      	movs	r0, r3
 8003902:	f003 ff13 	bl	800772c <HAL_TIM_ConfigClockSource>
 8003906:	1e03      	subs	r3, r0, #0
 8003908:	d001      	beq.n	800390e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800390a:	f000 faab 	bl	8003e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390e:	003b      	movs	r3, r7
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003914:	003b      	movs	r3, r7
 8003916:	2200      	movs	r2, #0
 8003918:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800391a:	003a      	movs	r2, r7
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <MX_TIM3_Init+0xa4>)
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f004 f907 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d001      	beq.n	800392e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800392a:	f000 fa9b 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b006      	add	sp, #24
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	20000330 	.word	0x20000330
 800393c:	40000400 	.word	0x40000400

08003940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <MX_USART1_UART_Init+0x58>)
 8003946:	4a15      	ldr	r2, [pc, #84]	; (800399c <MX_USART1_UART_Init+0x5c>)
 8003948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <MX_USART1_UART_Init+0x58>)
 800394c:	2296      	movs	r2, #150	; 0x96
 800394e:	0192      	lsls	r2, r2, #6
 8003950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <MX_USART1_UART_Init+0x58>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <MX_USART1_UART_Init+0x58>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <MX_USART1_UART_Init+0x58>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <MX_USART1_UART_Init+0x58>)
 8003966:	220c      	movs	r2, #12
 8003968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <MX_USART1_UART_Init+0x58>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <MX_USART1_UART_Init+0x58>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <MX_USART1_UART_Init+0x58>)
 8003978:	2200      	movs	r2, #0
 800397a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <MX_USART1_UART_Init+0x58>)
 800397e:	2200      	movs	r2, #0
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <MX_USART1_UART_Init+0x58>)
 8003984:	0018      	movs	r0, r3
 8003986:	f004 f93d 	bl	8007c04 <HAL_UART_Init>
 800398a:	1e03      	subs	r3, r0, #0
 800398c:	d001      	beq.n	8003992 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800398e:	f000 fa69 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000378 	.word	0x20000378
 800399c:	40013800 	.word	0x40013800

080039a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039a6:	4a15      	ldr	r2, [pc, #84]	; (80039fc <MX_USART2_UART_Init+0x5c>)
 80039a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039ac:	2296      	movs	r2, #150	; 0x96
 80039ae:	0192      	lsls	r2, r2, #6
 80039b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039c6:	220c      	movs	r2, #12
 80039c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <MX_USART2_UART_Init+0x58>)
 80039e4:	0018      	movs	r0, r3
 80039e6:	f004 f90d 	bl	8007c04 <HAL_UART_Init>
 80039ea:	1e03      	subs	r3, r0, #0
 80039ec:	d001      	beq.n	80039f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039ee:	f000 fa39 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200003fc 	.word	0x200003fc
 80039fc:	40004400 	.word	0x40004400

08003a00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <MX_USART3_UART_Init+0x5c>)
 8003a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a0c:	2296      	movs	r2, #150	; 0x96
 8003a0e:	0192      	lsls	r2, r2, #6
 8003a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a26:	220c      	movs	r2, #12
 8003a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a44:	0018      	movs	r0, r3
 8003a46:	f004 f8dd 	bl	8007c04 <HAL_UART_Init>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003a4e:	f000 fa09 	bl	8003e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000480 	.word	0x20000480
 8003a5c:	40004800 	.word	0x40004800

08003a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a66:	240c      	movs	r4, #12
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	2314      	movs	r3, #20
 8003a6e:	001a      	movs	r2, r3
 8003a70:	2100      	movs	r1, #0
 8003a72:	f00a fea6 	bl	800e7c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <MX_GPIO_Init+0xf4>)
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <MX_GPIO_Init+0xf4>)
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	0289      	lsls	r1, r1, #10
 8003a80:	430a      	orrs	r2, r1
 8003a82:	615a      	str	r2, [r3, #20]
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <MX_GPIO_Init+0xf4>)
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	029b      	lsls	r3, r3, #10
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <MX_GPIO_Init+0xf4>)
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <MX_GPIO_Init+0xf4>)
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	02c9      	lsls	r1, r1, #11
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	615a      	str	r2, [r3, #20]
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <MX_GPIO_Init+0xf4>)
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	02db      	lsls	r3, r3, #11
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LED4_Pin, GPIO_PIN_RESET);
 8003aae:	2388      	movs	r3, #136	; 0x88
 8003ab0:	0059      	lsls	r1, r3, #1
 8003ab2:	2390      	movs	r3, #144	; 0x90
 8003ab4:	05db      	lsls	r3, r3, #23
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f001 f881 	bl	8004bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|LED0_Pin|LED1_Pin|LED2_Pin
 8003abe:	4926      	ldr	r1, [pc, #152]	; (8003b58 <MX_GPIO_Init+0xf8>)
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <MX_GPIO_Init+0xfc>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f001 f87b 	bl	8004bc0 <HAL_GPIO_WritePin>
                          |LED3_Pin|GAS_VALVE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SD_CS_Pin LED4_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LED4_Pin;
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	2288      	movs	r2, #136	; 0x88
 8003ace:	0052      	lsls	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad2:	193b      	adds	r3, r7, r4
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	193b      	adds	r3, r7, r4
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	193a      	adds	r2, r7, r4
 8003ae6:	2390      	movs	r3, #144	; 0x90
 8003ae8:	05db      	lsls	r3, r3, #23
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 fef7 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003af2:	0021      	movs	r1, r4
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2201      	movs	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	2284      	movs	r2, #132	; 0x84
 8003afe:	0392      	lsls	r2, r2, #14
 8003b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b08:	000c      	movs	r4, r1
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <MX_GPIO_Init+0xfc>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	0010      	movs	r0, r2
 8003b12:	f000 fee5 	bl	80048e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin GAS_VALVE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED0_Pin|LED1_Pin|LED2_Pin
 8003b16:	0021      	movs	r1, r4
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	4a0f      	ldr	r2, [pc, #60]	; (8003b58 <MX_GPIO_Init+0xf8>)
 8003b1c:	601a      	str	r2, [r3, #0]
                          |LED3_Pin|GAS_VALVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	2201      	movs	r2, #1
 8003b22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <MX_GPIO_Init+0xfc>)
 8003b34:	0019      	movs	r1, r3
 8003b36:	0010      	movs	r0, r2
 8003b38:	f000 fed2 	bl	80048e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2100      	movs	r1, #0
 8003b40:	2005      	movs	r0, #5
 8003b42:	f000 fe1d 	bl	8004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003b46:	2005      	movs	r0, #5
 8003b48:	f000 fe2f 	bl	80047aa <HAL_NVIC_EnableIRQ>

}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b009      	add	sp, #36	; 0x24
 8003b52:	bd90      	pop	{r4, r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	0000f204 	.word	0x0000f204
 8003b5c:	48000400 	.word	0x48000400

08003b60 <MY_SDCard_SetUp>:

/* USER CODE BEGIN 4 */

MYfilResult MY_SDCard_SetUp()
{
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	6078      	str	r0, [r7, #4]
	MYfilResult SD_FR;

	SD_FR.mount = f_mount(&FS, "", 0);
 8003b68:	4948      	ldr	r1, [pc, #288]	; (8003c8c <MY_SDCard_SetUp+0x12c>)
 8003b6a:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <MY_SDCard_SetUp+0x130>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f007 fd86 	bl	800b680 <f_mount>
 8003b74:	0003      	movs	r3, r0
 8003b76:	001a      	movs	r2, r3
 8003b78:	240c      	movs	r4, #12
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	701a      	strb	r2, [r3, #0]
	SD_FR.open = f_open(&fil, "IRBEX.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8003b7e:	4945      	ldr	r1, [pc, #276]	; (8003c94 <MY_SDCard_SetUp+0x134>)
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <MY_SDCard_SetUp+0x138>)
 8003b82:	2212      	movs	r2, #18
 8003b84:	0018      	movs	r0, r3
 8003b86:	f007 fdcb 	bl	800b720 <f_open>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	705a      	strb	r2, [r3, #1]
	if((SD_FR.mount == FR_OK) && (SD_FR.open == FR_OK))
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d16c      	bne.n	8003c76 <MY_SDCard_SetUp+0x116>
 8003b9c:	193b      	adds	r3, r7, r4
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d167      	bne.n	8003c76 <MY_SDCard_SetUp+0x116>
	{
		SD_FR.freeSpace = f_getfree("", &SD_FR.freeCluster, &pFS);
 8003ba6:	4a3d      	ldr	r2, [pc, #244]	; (8003c9c <MY_SDCard_SetUp+0x13c>)
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	3310      	adds	r3, #16
 8003bac:	0019      	movs	r1, r3
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <MY_SDCard_SetUp+0x12c>)
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f008 fb3b 	bl	800c22c <f_getfree>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	001a      	movs	r2, r3
 8003bba:	0020      	movs	r0, r4
 8003bbc:	183b      	adds	r3, r7, r0
 8003bbe:	709a      	strb	r2, [r3, #2]
		if(SD_FR.freeSpace == FR_OK)
 8003bc0:	183b      	adds	r3, r7, r0
 8003bc2:	789b      	ldrb	r3, [r3, #2]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d117      	bne.n	8003bfa <MY_SDCard_SetUp+0x9a>
		{
			SD_FR.mytotalSpace = (pFS -> n_fatent - 2) * (pFS -> csize);
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <MY_SDCard_SetUp+0x13c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <MY_SDCard_SetUp+0x140>)
 8003bd0:	589b      	ldr	r3, [r3, r2]
 8003bd2:	1e9a      	subs	r2, r3, #2
 8003bd4:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <MY_SDCard_SetUp+0x13c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4932      	ldr	r1, [pc, #200]	; (8003ca4 <MY_SDCard_SetUp+0x144>)
 8003bda:	5c5b      	ldrb	r3, [r3, r1]
 8003bdc:	435a      	muls	r2, r3
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	609a      	str	r2, [r3, #8]
			SD_FR.myfreeSpace = SD_FR.freeCluster * (pFS -> csize);
 8003be2:	183b      	adds	r3, r7, r0
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <MY_SDCard_SetUp+0x13c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	492e      	ldr	r1, [pc, #184]	; (8003ca4 <MY_SDCard_SetUp+0x144>)
 8003bec:	5c5b      	ldrb	r3, [r3, r1]
 8003bee:	435a      	muls	r2, r3
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	60da      	str	r2, [r3, #12]

			SD_FR.statuss = 1;
 8003bf4:	183b      	adds	r3, r7, r0
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	711a      	strb	r2, [r3, #4]
		}

		if(SD_FR.statuss == 1)
 8003bfa:	250c      	movs	r5, #12
 8003bfc:	197b      	adds	r3, r7, r5
 8003bfe:	791b      	ldrb	r3, [r3, #4]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d137      	bne.n	8003c76 <MY_SDCard_SetUp+0x116>
		{
			//Write a meta date of data logger text fil
			f_printf(&fil, "IRBEX DATA LOGGER.\n");
 8003c06:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <MY_SDCard_SetUp+0x148>)
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <MY_SDCard_SetUp+0x138>)
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f008 fc33 	bl	800c478 <f_printf>
			HAL_RTC_GetDate(&hrtc, &systemRTCDate, RTC_FORMAT_BIN);
 8003c12:	4926      	ldr	r1, [pc, #152]	; (8003cac <MY_SDCard_SetUp+0x14c>)
 8003c14:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <MY_SDCard_SetUp+0x150>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f002 fd97 	bl	800674c <HAL_RTC_GetDate>
			f_printf(&fil, "Date: %d.%d.%d\n", systemRTCDate.Date, systemRTCDate.Month, systemRTCDate.Year);
 8003c1e:	4b23      	ldr	r3, [pc, #140]	; (8003cac <MY_SDCard_SetUp+0x14c>)
 8003c20:	789b      	ldrb	r3, [r3, #2]
 8003c22:	001a      	movs	r2, r3
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <MY_SDCard_SetUp+0x14c>)
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	001c      	movs	r4, r3
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <MY_SDCard_SetUp+0x14c>)
 8003c2c:	78db      	ldrb	r3, [r3, #3]
 8003c2e:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <MY_SDCard_SetUp+0x154>)
 8003c30:	4819      	ldr	r0, [pc, #100]	; (8003c98 <MY_SDCard_SetUp+0x138>)
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	0023      	movs	r3, r4
 8003c36:	f008 fc1f 	bl	800c478 <f_printf>
			f_printf(&fil, "SD Card memory total space = %d & free space = %d\n", SD_FR.mytotalSpace, SD_FR.myfreeSpace);
 8003c3a:	197b      	adds	r3, r7, r5
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	197b      	adds	r3, r7, r5
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	491d      	ldr	r1, [pc, #116]	; (8003cb8 <MY_SDCard_SetUp+0x158>)
 8003c44:	4814      	ldr	r0, [pc, #80]	; (8003c98 <MY_SDCard_SetUp+0x138>)
 8003c46:	f008 fc17 	bl	800c478 <f_printf>
			f_printf(&fil, "Hours\tMinutes\tSeconds\tInternal_Temp\tInternal_Pressure\t");
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <MY_SDCard_SetUp+0x15c>)
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MY_SDCard_SetUp+0x138>)
 8003c4e:	0011      	movs	r1, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	f008 fc11 	bl	800c478 <f_printf>
			SD_FR.statusSync = f_sync(&fil);
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <MY_SDCard_SetUp+0x138>)
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f008 fa0d 	bl	800c078 <f_sync>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	001a      	movs	r2, r3
 8003c62:	197b      	adds	r3, r7, r5
 8003c64:	70da      	strb	r2, [r3, #3]
			SD_FR.statusSync = f_sync(&fil);
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <MY_SDCard_SetUp+0x138>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f008 fa05 	bl	800c078 <f_sync>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	001a      	movs	r2, r3
 8003c72:	197b      	adds	r3, r7, r5
 8003c74:	70da      	strb	r2, [r3, #3]
		}
	}
	return SD_FR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	220c      	movs	r2, #12
 8003c7a:	18ba      	adds	r2, r7, r2
 8003c7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c7e:	c313      	stmia	r3!, {r0, r1, r4}
 8003c80:	ca03      	ldmia	r2!, {r0, r1}
 8003c82:	c303      	stmia	r3!, {r0, r1}
}
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b008      	add	sp, #32
 8003c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8c:	08012860 	.word	0x08012860
 8003c90:	200005d8 	.word	0x200005d8
 8003c94:	08012864 	.word	0x08012864
 8003c98:	2000160c 	.word	0x2000160c
 8003c9c:	20001608 	.word	0x20001608
 8003ca0:	00001014 	.word	0x00001014
 8003ca4:	00001002 	.word	0x00001002
 8003ca8:	08012870 	.word	0x08012870
 8003cac:	20002680 	.word	0x20002680
 8003cb0:	200002ac 	.word	0x200002ac
 8003cb4:	08012884 	.word	0x08012884
 8003cb8:	08012894 	.word	0x08012894
 8003cbc:	080128c8 	.word	0x080128c8

08003cc0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d108      	bne.n	8003ce2 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		tim3Flag = 1;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
		myCnt[0]++;
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003ce0:	801a      	strh	r2, [r3, #0]
	}
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	20000330 	.word	0x20000330
 8003cf0:	200026c0 	.word	0x200026c0
 8003cf4:	200026c4 	.word	0x200026c4

08003cf8 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
//	    }




	if (huart->Instance == USART1) {
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <HAL_UART_RxCpltCallback+0xf0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d16a      	bne.n	8003de0 <HAL_UART_RxCpltCallback+0xe8>
	        // Ensure the received buffer is null-terminated
	        USART1_RxBuffer[5] = '\0';
 8003d0a:	4b38      	ldr	r3, [pc, #224]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	715a      	strb	r2, [r3, #5]

	        // Debugging: Print the received message
	        printf("Received message: '%s'\n", (char*)USART1_RxBuffer);
 8003d10:	4a36      	ldr	r2, [pc, #216]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003d12:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <HAL_UART_RxCpltCallback+0xf8>)
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f00b f9ca 	bl	800f0b0 <iprintf>

	        // Process the received message
	        if (strcmp((char*)USART1_RxBuffer, "<IST>") == 0) {
 8003d1c:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <HAL_UART_RxCpltCallback+0xfc>)
 8003d1e:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003d20:	0011      	movs	r1, r2
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7fc f9ee 	bl	8000104 <strcmp>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d107      	bne.n	8003d3c <HAL_UART_RxCpltCallback+0x44>
	            HAL_UART_Transmit(&huart1, (uint8_t *)"<OK>", strlen("<OK>"), HAL_MAX_DELAY);
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	425b      	negs	r3, r3
 8003d30:	4931      	ldr	r1, [pc, #196]	; (8003df8 <HAL_UART_RxCpltCallback+0x100>)
 8003d32:	4832      	ldr	r0, [pc, #200]	; (8003dfc <HAL_UART_RxCpltCallback+0x104>)
 8003d34:	2204      	movs	r2, #4
 8003d36:	f003 ffb9 	bl	8007cac <HAL_UART_Transmit>
 8003d3a:	e046      	b.n	8003dca <HAL_UART_RxCpltCallback+0xd2>
	        }
	        else if (strcmp((char*)USART1_RxBuffer, "<MOV>") == 0) {
 8003d3c:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <HAL_UART_RxCpltCallback+0x108>)
 8003d3e:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7fc f9de 	bl	8000104 <strcmp>
 8003d48:	1e03      	subs	r3, r0, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_UART_RxCpltCallback+0x64>
	            HAL_UART_Transmit(&huart1, (uint8_t *)"<-0.19,-0.47,1.00,-93.65,-29.40,8.75,-116,-123,-1426,226.68,-133.32>", strlen("<-0.19,-0.47,1.00,-93.65,-29.40,8.75,-116,-123,-1426,226.68,-133.32>"), HAL_MAX_DELAY);
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	425b      	negs	r3, r3
 8003d50:	492c      	ldr	r1, [pc, #176]	; (8003e04 <HAL_UART_RxCpltCallback+0x10c>)
 8003d52:	482a      	ldr	r0, [pc, #168]	; (8003dfc <HAL_UART_RxCpltCallback+0x104>)
 8003d54:	2244      	movs	r2, #68	; 0x44
 8003d56:	f003 ffa9 	bl	8007cac <HAL_UART_Transmit>
 8003d5a:	e036      	b.n	8003dca <HAL_UART_RxCpltCallback+0xd2>
	            //<Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z,Magn_Xaxis,Magn_Yaxis,Magn_Zaxis,Magn_heading,Magn_compas>
	        }
	        else if (strcmp((char*)USART1_RxBuffer, "<ENI>") == 0) {
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <HAL_UART_RxCpltCallback+0x110>)
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003d60:	0011      	movs	r1, r2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fc f9ce 	bl	8000104 <strcmp>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d107      	bne.n	8003d7c <HAL_UART_RxCpltCallback+0x84>
	        	HAL_UART_Transmit(&huart1, (uint8_t *)"<27.3,101.2,52.9>", strlen("<27.3,101.2,52.9>"), HAL_MAX_DELAY);
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	425b      	negs	r3, r3
 8003d70:	4926      	ldr	r1, [pc, #152]	; (8003e0c <HAL_UART_RxCpltCallback+0x114>)
 8003d72:	4822      	ldr	r0, [pc, #136]	; (8003dfc <HAL_UART_RxCpltCallback+0x104>)
 8003d74:	2211      	movs	r2, #17
 8003d76:	f003 ff99 	bl	8007cac <HAL_UART_Transmit>
 8003d7a:	e026      	b.n	8003dca <HAL_UART_RxCpltCallback+0xd2>
	        	//<temperature,pressure,humidity>
	        }
	        else if (strcmp((char*)USART1_RxBuffer, "<ENE>") == 0) {
 8003d7c:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_UART_RxCpltCallback+0x118>)
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003d80:	0011      	movs	r1, r2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fc f9be 	bl	8000104 <strcmp>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_UART_RxCpltCallback+0xa4>
	        	HAL_UART_Transmit(&huart1, (uint8_t *)"<17.8,98.1,77.6>", strlen("<17.8,98.1,77.6>"), HAL_MAX_DELAY);
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	425b      	negs	r3, r3
 8003d90:	4920      	ldr	r1, [pc, #128]	; (8003e14 <HAL_UART_RxCpltCallback+0x11c>)
 8003d92:	481a      	ldr	r0, [pc, #104]	; (8003dfc <HAL_UART_RxCpltCallback+0x104>)
 8003d94:	2210      	movs	r2, #16
 8003d96:	f003 ff89 	bl	8007cac <HAL_UART_Transmit>
 8003d9a:	e016      	b.n	8003dca <HAL_UART_RxCpltCallback+0xd2>
	        	//<temperature,pressure,humidity>
	        }
	        else if (strcmp((char*)USART1_RxBuffer, "<STR>") == 0) {
 8003d9c:	4a1e      	ldr	r2, [pc, #120]	; (8003e18 <HAL_UART_RxCpltCallback+0x120>)
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fc f9ae 	bl	8000104 <strcmp>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_UART_RxCpltCallback+0xc4>
	        	HAL_UART_Transmit(&huart1, (uint8_t *)"<initiated>", strlen("<initiated>"), HAL_MAX_DELAY);
 8003dac:	2301      	movs	r3, #1
 8003dae:	425b      	negs	r3, r3
 8003db0:	491a      	ldr	r1, [pc, #104]	; (8003e1c <HAL_UART_RxCpltCallback+0x124>)
 8003db2:	4812      	ldr	r0, [pc, #72]	; (8003dfc <HAL_UART_RxCpltCallback+0x104>)
 8003db4:	220b      	movs	r2, #11
 8003db6:	f003 ff79 	bl	8007cac <HAL_UART_Transmit>
 8003dba:	e006      	b.n	8003dca <HAL_UART_RxCpltCallback+0xd2>
	        }
	        else {
	            HAL_UART_Transmit(&huart1, (uint8_t *)"<NOK>", strlen("<NOK>"), HAL_MAX_DELAY);
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	425b      	negs	r3, r3
 8003dc0:	4917      	ldr	r1, [pc, #92]	; (8003e20 <HAL_UART_RxCpltCallback+0x128>)
 8003dc2:	480e      	ldr	r0, [pc, #56]	; (8003dfc <HAL_UART_RxCpltCallback+0x104>)
 8003dc4:	2205      	movs	r2, #5
 8003dc6:	f003 ff71 	bl	8007cac <HAL_UART_Transmit>
	        }

	        // Clear the buffer for the next reception
	        ClearBuffer(USART1_RxBuffer, 6);
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003dcc:	2106      	movs	r1, #6
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7ff f9fa 	bl	80031c8 <ClearBuffer>

	        // Restart reception for the next message
	        HAL_UART_Receive_IT(&huart1, USART1_RxBuffer, 5);
 8003dd4:	4905      	ldr	r1, [pc, #20]	; (8003dec <HAL_UART_RxCpltCallback+0xf4>)
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_UART_RxCpltCallback+0x104>)
 8003dd8:	2205      	movs	r2, #5
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f004 f890 	bl	8007f00 <HAL_UART_Receive_IT>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
				}
	}
	*/

}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40013800 	.word	0x40013800
 8003dec:	200005d0 	.word	0x200005d0
 8003df0:	08012900 	.word	0x08012900
 8003df4:	08012918 	.word	0x08012918
 8003df8:	08012920 	.word	0x08012920
 8003dfc:	20000378 	.word	0x20000378
 8003e00:	08012928 	.word	0x08012928
 8003e04:	08012930 	.word	0x08012930
 8003e08:	08012978 	.word	0x08012978
 8003e0c:	08012980 	.word	0x08012980
 8003e10:	08012994 	.word	0x08012994
 8003e14:	0801299c 	.word	0x0801299c
 8003e18:	080129b0 	.word	0x080129b0
 8003e1c:	080129b8 	.word	0x080129b8
 8003e20:	080129c4 	.word	0x080129c4

08003e24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	1dbb      	adds	r3, r7, #6
 8003e2e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_0) {
 8003e30:	1dbb      	adds	r3, r7, #6
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	4a08      	ldr	r2, [pc, #32]	; (8003e60 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003e3e:	0019      	movs	r1, r3
 8003e40:	0010      	movs	r0, r2
 8003e42:	f000 feda 	bl	8004bfa <HAL_GPIO_TogglePin>
  } else {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
  }
}
 8003e46:	e006      	b.n	8003e56 <HAL_GPIO_EXTI_Callback+0x32>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	4804      	ldr	r0, [pc, #16]	; (8003e60 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	0019      	movs	r1, r3
 8003e52:	f000 feb5 	bl	8004bc0 <HAL_GPIO_WritePin>
}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	48000400 	.word	0x48000400

08003e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e68:	b672      	cpsid	i
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e6c:	e7fe      	b.n	8003e6c <Error_Handler+0x8>
	...

08003e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_MspInit+0x44>)
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <HAL_MspInit+0x44>)
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	619a      	str	r2, [r3, #24]
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_MspInit+0x44>)
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2201      	movs	r2, #1
 8003e88:	4013      	ands	r3, r2
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_MspInit+0x44>)
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_MspInit+0x44>)
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	0549      	lsls	r1, r1, #21
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	61da      	str	r2, [r3, #28]
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_MspInit+0x44>)
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	055b      	lsls	r3, r3, #21
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b002      	add	sp, #8
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b08d      	sub	sp, #52	; 0x34
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	241c      	movs	r4, #28
 8003ec2:	193b      	adds	r3, r7, r4
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	2314      	movs	r3, #20
 8003ec8:	001a      	movs	r2, r3
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f00a fc79 	bl	800e7c2 <memset>
  if(hi2c->Instance==I2C1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a39      	ldr	r2, [pc, #228]	; (8003fbc <HAL_I2C_MspInit+0x104>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d133      	bne.n	8003f42 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	02c9      	lsls	r1, r1, #11
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	615a      	str	r2, [r3, #20]
 8003ee8:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	02db      	lsls	r3, r3, #11
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003ef6:	193b      	adds	r3, r7, r4
 8003ef8:	22c0      	movs	r2, #192	; 0xc0
 8003efa:	0052      	lsls	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003efe:	0021      	movs	r1, r4
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2212      	movs	r2, #18
 8003f04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	2203      	movs	r2, #3
 8003f10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2201      	movs	r2, #1
 8003f16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <HAL_I2C_MspInit+0x10c>)
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	0010      	movs	r0, r2
 8003f20:	f000 fcde 	bl	80048e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f24:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0389      	lsls	r1, r1, #14
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	61da      	str	r2, [r3, #28]
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	039b      	lsls	r3, r3, #14
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f40:	e038      	b.n	8003fb4 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <HAL_I2C_MspInit+0x110>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d133      	bne.n	8003fb4 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	0289      	lsls	r1, r1, #10
 8003f56:	430a      	orrs	r2, r1
 8003f58:	615a      	str	r2, [r3, #20]
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003f68:	211c      	movs	r1, #28
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	22c0      	movs	r2, #192	; 0xc0
 8003f6e:	0152      	lsls	r2, r2, #5
 8003f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	2212      	movs	r2, #18
 8003f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	2203      	movs	r2, #3
 8003f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	2205      	movs	r2, #5
 8003f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8a:	187a      	adds	r2, r7, r1
 8003f8c:	2390      	movs	r3, #144	; 0x90
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	0011      	movs	r1, r2
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fca4 	bl	80048e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003f9e:	2180      	movs	r1, #128	; 0x80
 8003fa0:	03c9      	lsls	r1, r1, #15
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	61da      	str	r2, [r3, #28]
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_I2C_MspInit+0x108>)
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	03db      	lsls	r3, r3, #15
 8003fae:	4013      	ands	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b00d      	add	sp, #52	; 0x34
 8003fba:	bd90      	pop	{r4, r7, pc}
 8003fbc:	40005400 	.word	0x40005400
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	48000400 	.word	0x48000400
 8003fc8:	40005800 	.word	0x40005800

08003fcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a06      	ldr	r2, [pc, #24]	; (8003ff4 <HAL_RTC_MspInit+0x28>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d106      	bne.n	8003fec <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RTC_MspInit+0x2c>)
 8003fe0:	6a1a      	ldr	r2, [r3, #32]
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RTC_MspInit+0x2c>)
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	0209      	lsls	r1, r1, #8
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40002800 	.word	0x40002800
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b08b      	sub	sp, #44	; 0x2c
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	2414      	movs	r4, #20
 8004006:	193b      	adds	r3, r7, r4
 8004008:	0018      	movs	r0, r3
 800400a:	2314      	movs	r3, #20
 800400c:	001a      	movs	r2, r3
 800400e:	2100      	movs	r1, #0
 8004010:	f00a fbd7 	bl	800e7c2 <memset>
  if(hspi->Instance==SPI1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_SPI_MspInit+0x90>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d132      	bne.n	8004084 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <HAL_SPI_MspInit+0x94>)
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_SPI_MspInit+0x94>)
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	0149      	lsls	r1, r1, #5
 8004028:	430a      	orrs	r2, r1
 800402a:	619a      	str	r2, [r3, #24]
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <HAL_SPI_MspInit+0x94>)
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	015b      	lsls	r3, r3, #5
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <HAL_SPI_MspInit+0x94>)
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_SPI_MspInit+0x94>)
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	0289      	lsls	r1, r1, #10
 8004044:	430a      	orrs	r2, r1
 8004046:	615a      	str	r2, [r3, #20]
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_SPI_MspInit+0x94>)
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	029b      	lsls	r3, r3, #10
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004056:	0021      	movs	r1, r4
 8004058:	187b      	adds	r3, r7, r1
 800405a:	22e0      	movs	r2, #224	; 0xe0
 800405c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2202      	movs	r2, #2
 8004062:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	187b      	adds	r3, r7, r1
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800406a:	187b      	adds	r3, r7, r1
 800406c:	2203      	movs	r2, #3
 800406e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004070:	187b      	adds	r3, r7, r1
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004076:	187a      	adds	r2, r7, r1
 8004078:	2390      	movs	r3, #144	; 0x90
 800407a:	05db      	lsls	r3, r3, #23
 800407c:	0011      	movs	r1, r2
 800407e:	0018      	movs	r0, r3
 8004080:	f000 fc2e 	bl	80048e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b00b      	add	sp, #44	; 0x2c
 800408a:	bd90      	pop	{r4, r7, pc}
 800408c:	40013000 	.word	0x40013000
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0d      	ldr	r2, [pc, #52]	; (80040d8 <HAL_TIM_Base_MspInit+0x44>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d113      	bne.n	80040ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <HAL_TIM_Base_MspInit+0x48>)
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <HAL_TIM_Base_MspInit+0x48>)
 80040ac:	2102      	movs	r1, #2
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_TIM_Base_MspInit+0x48>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	2202      	movs	r2, #2
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2100      	movs	r1, #0
 80040c2:	2010      	movs	r0, #16
 80040c4:	f000 fb5c 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040c8:	2010      	movs	r0, #16
 80040ca:	f000 fb6e 	bl	80047aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40021000 	.word	0x40021000

080040e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b08f      	sub	sp, #60	; 0x3c
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	2424      	movs	r4, #36	; 0x24
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	0018      	movs	r0, r3
 80040ee:	2314      	movs	r3, #20
 80040f0:	001a      	movs	r2, r3
 80040f2:	2100      	movs	r1, #0
 80040f4:	f00a fb65 	bl	800e7c2 <memset>
  if(huart->Instance==USART1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a62      	ldr	r2, [pc, #392]	; (8004288 <HAL_UART_MspInit+0x1a8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d13c      	bne.n	800417c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004102:	4b62      	ldr	r3, [pc, #392]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	4b61      	ldr	r3, [pc, #388]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	01c9      	lsls	r1, r1, #7
 800410c:	430a      	orrs	r2, r1
 800410e:	619a      	str	r2, [r3, #24]
 8004110:	4b5e      	ldr	r3, [pc, #376]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	4013      	ands	r3, r2
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411e:	4b5b      	ldr	r3, [pc, #364]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	4b5a      	ldr	r3, [pc, #360]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004124:	2180      	movs	r1, #128	; 0x80
 8004126:	0289      	lsls	r1, r1, #10
 8004128:	430a      	orrs	r2, r1
 800412a:	615a      	str	r2, [r3, #20]
 800412c:	4b57      	ldr	r3, [pc, #348]	; (800428c <HAL_UART_MspInit+0x1ac>)
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	4013      	ands	r3, r2
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800413a:	193b      	adds	r3, r7, r4
 800413c:	22c0      	movs	r2, #192	; 0xc0
 800413e:	00d2      	lsls	r2, r2, #3
 8004140:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004142:	0021      	movs	r1, r4
 8004144:	187b      	adds	r3, r7, r1
 8004146:	2202      	movs	r2, #2
 8004148:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	187b      	adds	r3, r7, r1
 800414c:	2200      	movs	r2, #0
 800414e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004150:	187b      	adds	r3, r7, r1
 8004152:	2203      	movs	r2, #3
 8004154:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004156:	187b      	adds	r3, r7, r1
 8004158:	2201      	movs	r2, #1
 800415a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415c:	187a      	adds	r2, r7, r1
 800415e:	2390      	movs	r3, #144	; 0x90
 8004160:	05db      	lsls	r3, r3, #23
 8004162:	0011      	movs	r1, r2
 8004164:	0018      	movs	r0, r3
 8004166:	f000 fbbb 	bl	80048e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	201b      	movs	r0, #27
 8004170:	f000 fb06 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004174:	201b      	movs	r0, #27
 8004176:	f000 fb18 	bl	80047aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800417a:	e080      	b.n	800427e <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a43      	ldr	r2, [pc, #268]	; (8004290 <HAL_UART_MspInit+0x1b0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d13b      	bne.n	80041fe <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004186:	4b41      	ldr	r3, [pc, #260]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	4b40      	ldr	r3, [pc, #256]	; (800428c <HAL_UART_MspInit+0x1ac>)
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	0289      	lsls	r1, r1, #10
 8004190:	430a      	orrs	r2, r1
 8004192:	61da      	str	r2, [r3, #28]
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	029b      	lsls	r3, r3, #10
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a2:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_UART_MspInit+0x1ac>)
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <HAL_UART_MspInit+0x1ac>)
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	0289      	lsls	r1, r1, #10
 80041ac:	430a      	orrs	r2, r1
 80041ae:	615a      	str	r2, [r3, #20]
 80041b0:	4b36      	ldr	r3, [pc, #216]	; (800428c <HAL_UART_MspInit+0x1ac>)
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	029b      	lsls	r3, r3, #10
 80041b8:	4013      	ands	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80041be:	2124      	movs	r1, #36	; 0x24
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	220c      	movs	r2, #12
 80041c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	2202      	movs	r2, #2
 80041ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	2203      	movs	r2, #3
 80041d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	2201      	movs	r2, #1
 80041dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041de:	187a      	adds	r2, r7, r1
 80041e0:	2390      	movs	r3, #144	; 0x90
 80041e2:	05db      	lsls	r3, r3, #23
 80041e4:	0011      	movs	r1, r2
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fb7a 	bl	80048e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041ec:	2200      	movs	r2, #0
 80041ee:	2100      	movs	r1, #0
 80041f0:	201c      	movs	r0, #28
 80041f2:	f000 fac5 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041f6:	201c      	movs	r0, #28
 80041f8:	f000 fad7 	bl	80047aa <HAL_NVIC_EnableIRQ>
}
 80041fc:	e03f      	b.n	800427e <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_UART_MspInit+0x1b4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d13a      	bne.n	800427e <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004208:	4b20      	ldr	r3, [pc, #128]	; (800428c <HAL_UART_MspInit+0x1ac>)
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_UART_MspInit+0x1ac>)
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	02c9      	lsls	r1, r1, #11
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	02db      	lsls	r3, r3, #11
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <HAL_UART_MspInit+0x1ac>)
 800422a:	2180      	movs	r1, #128	; 0x80
 800422c:	02c9      	lsls	r1, r1, #11
 800422e:	430a      	orrs	r2, r1
 8004230:	615a      	str	r2, [r3, #20]
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <HAL_UART_MspInit+0x1ac>)
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	02db      	lsls	r3, r3, #11
 800423a:	4013      	ands	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004240:	2124      	movs	r1, #36	; 0x24
 8004242:	187b      	adds	r3, r7, r1
 8004244:	22c0      	movs	r2, #192	; 0xc0
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424a:	187b      	adds	r3, r7, r1
 800424c:	2202      	movs	r2, #2
 800424e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004250:	187b      	adds	r3, r7, r1
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004256:	187b      	adds	r3, r7, r1
 8004258:	2203      	movs	r2, #3
 800425a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800425c:	187b      	adds	r3, r7, r1
 800425e:	2204      	movs	r2, #4
 8004260:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004262:	187b      	adds	r3, r7, r1
 8004264:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <HAL_UART_MspInit+0x1b8>)
 8004266:	0019      	movs	r1, r3
 8004268:	0010      	movs	r0, r2
 800426a:	f000 fb39 	bl	80048e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	201d      	movs	r0, #29
 8004274:	f000 fa84 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8004278:	201d      	movs	r0, #29
 800427a:	f000 fa96 	bl	80047aa <HAL_NVIC_EnableIRQ>
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b00f      	add	sp, #60	; 0x3c
 8004284:	bd90      	pop	{r4, r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	40013800 	.word	0x40013800
 800428c:	40021000 	.word	0x40021000
 8004290:	40004400 	.word	0x40004400
 8004294:	40004800 	.word	0x40004800
 8004298:	48000400 	.word	0x48000400

0800429c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <NMI_Handler+0x4>

080042a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042a6:	e7fe      	b.n	80042a6 <HardFault_Handler+0x4>

080042a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c0:	f000 f972 	bl	80045a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80042ce:	2001      	movs	r0, #1
 80042d0:	f000 fcae 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <TIM3_IRQHandler+0x14>)
 80042e2:	0018      	movs	r0, r3
 80042e4:	f003 f90c 	bl	8007500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000330 	.word	0x20000330

080042f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <USART1_IRQHandler+0x14>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f003 fe62 	bl	8007fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	20000378 	.word	0x20000378

0800430c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <USART2_IRQHandler+0x14>)
 8004312:	0018      	movs	r0, r3
 8004314:	f003 fe56 	bl	8007fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	200003fc 	.word	0x200003fc

08004324 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <USART3_6_IRQHandler+0x14>)
 800432a:	0018      	movs	r0, r3
 800432c:	f003 fe4a 	bl	8007fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	20000480 	.word	0x20000480

0800433c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
	return 1;
 8004340:	2301      	movs	r3, #1
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_kill>:

int _kill(int pid, int sig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004352:	f00a fa03 	bl	800e75c <__errno>
 8004356:	0003      	movs	r3, r0
 8004358:	2216      	movs	r2, #22
 800435a:	601a      	str	r2, [r3, #0]
	return -1;
 800435c:	2301      	movs	r3, #1
 800435e:	425b      	negs	r3, r3
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <_exit>:

void _exit (int status)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004370:	2301      	movs	r3, #1
 8004372:	425a      	negs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	0011      	movs	r1, r2
 8004378:	0018      	movs	r0, r3
 800437a:	f7ff ffe5 	bl	8004348 <_kill>
	while (1) {}		/* Make sure we hang here */
 800437e:	e7fe      	b.n	800437e <_exit+0x16>

08004380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e00a      	b.n	80043a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004392:	e000      	b.n	8004396 <_read+0x16>
 8004394:	bf00      	nop
 8004396:	0001      	movs	r1, r0
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	60ba      	str	r2, [r7, #8]
 800439e:	b2ca      	uxtb	r2, r1
 80043a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3301      	adds	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	dbf0      	blt.n	8004392 <_read+0x12>
	}

return len;
 80043b0:	687b      	ldr	r3, [r7, #4]
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b006      	add	sp, #24
 80043b8:	bd80      	pop	{r7, pc}

080043ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b086      	sub	sp, #24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	e009      	b.n	80043e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	60ba      	str	r2, [r7, #8]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	0018      	movs	r0, r3
 80043d6:	e000      	b.n	80043da <_write+0x20>
 80043d8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3301      	adds	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	dbf1      	blt.n	80043cc <_write+0x12>
	}
	return len;
 80043e8:	687b      	ldr	r3, [r7, #4]
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b006      	add	sp, #24
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <_close>:

int _close(int file)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
	return -1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	425b      	negs	r3, r3
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}

08004406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	0192      	lsls	r2, r2, #6
 8004416:	605a      	str	r2, [r3, #4]
	return 0;
 8004418:	2300      	movs	r3, #0
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b002      	add	sp, #8
 8004420:	bd80      	pop	{r7, pc}

08004422 <_isatty>:

int _isatty(int file)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
	return 1;
 800442a:	2301      	movs	r3, #1
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}

08004434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	return 0;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b004      	add	sp, #16
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <_sbrk+0x5c>)
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <_sbrk+0x60>)
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <_sbrk+0x64>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <_sbrk+0x64>)
 800446a:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <_sbrk+0x68>)
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <_sbrk+0x64>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d207      	bcs.n	800448c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800447c:	f00a f96e 	bl	800e75c <__errno>
 8004480:	0003      	movs	r3, r0
 8004482:	220c      	movs	r2, #12
 8004484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004486:	2301      	movs	r3, #1
 8004488:	425b      	negs	r3, r3
 800448a:	e009      	b.n	80044a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <_sbrk+0x64>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <_sbrk+0x64>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	18d2      	adds	r2, r2, r3
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <_sbrk+0x64>)
 800449c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b006      	add	sp, #24
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20008000 	.word	0x20008000
 80044ac:	00000400 	.word	0x00000400
 80044b0:	200026f8 	.word	0x200026f8
 80044b4:	20002778 	.word	0x20002778

080044b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044c4:	480d      	ldr	r0, [pc, #52]	; (80044fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044c8:	480d      	ldr	r0, [pc, #52]	; (8004500 <LoopForever+0x6>)
  ldr r1, =_edata
 80044ca:	490e      	ldr	r1, [pc, #56]	; (8004504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044cc:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <LoopForever+0xe>)
  movs r3, #0
 80044ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d0:	e002      	b.n	80044d8 <LoopCopyDataInit>

080044d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044d6:	3304      	adds	r3, #4

080044d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044dc:	d3f9      	bcc.n	80044d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <LoopForever+0x12>)
  ldr r4, =_ebss
 80044e0:	4c0b      	ldr	r4, [pc, #44]	; (8004510 <LoopForever+0x16>)
  movs r3, #0
 80044e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e4:	e001      	b.n	80044ea <LoopFillZerobss>

080044e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044e8:	3204      	adds	r2, #4

080044ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044ec:	d3fb      	bcc.n	80044e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044ee:	f7ff ffe3 	bl	80044b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80044f2:	f00a f939 	bl	800e768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044f6:	f7fe fe9f 	bl	8003238 <main>

080044fa <LoopForever>:

LoopForever:
    b LoopForever
 80044fa:	e7fe      	b.n	80044fa <LoopForever>
  ldr   r0, =_estack
 80044fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004504:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004508:	080130e8 	.word	0x080130e8
  ldr r2, =_sbss
 800450c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004510:	20002774 	.word	0x20002774

08004514 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004514:	e7fe      	b.n	8004514 <ADC1_IRQHandler>
	...

08004518 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <HAL_Init+0x24>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_Init+0x24>)
 8004522:	2110      	movs	r1, #16
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004528:	2003      	movs	r0, #3
 800452a:	f000 f809 	bl	8004540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800452e:	f7ff fc9f 	bl	8003e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	40022000 	.word	0x40022000

08004540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004548:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_InitTick+0x5c>)
 800454a:	681c      	ldr	r4, [r3, #0]
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <HAL_InitTick+0x60>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	0019      	movs	r1, r3
 8004552:	23fa      	movs	r3, #250	; 0xfa
 8004554:	0098      	lsls	r0, r3, #2
 8004556:	f7fb fdfb 	bl	8000150 <__udivsi3>
 800455a:	0003      	movs	r3, r0
 800455c:	0019      	movs	r1, r3
 800455e:	0020      	movs	r0, r4
 8004560:	f7fb fdf6 	bl	8000150 <__udivsi3>
 8004564:	0003      	movs	r3, r0
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f92f 	bl	80047ca <HAL_SYSTICK_Config>
 800456c:	1e03      	subs	r3, r0, #0
 800456e:	d001      	beq.n	8004574 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e00f      	b.n	8004594 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d80b      	bhi.n	8004592 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	2301      	movs	r3, #1
 800457e:	425b      	negs	r3, r3
 8004580:	2200      	movs	r2, #0
 8004582:	0018      	movs	r0, r3
 8004584:	f000 f8fc 	bl	8004780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_InitTick+0x64>)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b003      	add	sp, #12
 800459a:	bd90      	pop	{r4, r7, pc}
 800459c:	20000000 	.word	0x20000000
 80045a0:	20000008 	.word	0x20000008
 80045a4:	20000004 	.word	0x20000004

080045a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_IncTick+0x1c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	001a      	movs	r2, r3
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_IncTick+0x20>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	18d2      	adds	r2, r2, r3
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <HAL_IncTick+0x20>)
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	20000008 	.word	0x20000008
 80045c8:	200026fc 	.word	0x200026fc

080045cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  return uwTick;
 80045d0:	4b02      	ldr	r3, [pc, #8]	; (80045dc <HAL_GetTick+0x10>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	200026fc 	.word	0x200026fc

080045e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff fff0 	bl	80045cc <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	d005      	beq.n	8004606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_Delay+0x44>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	001a      	movs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	189b      	adds	r3, r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	f7ff ffe0 	bl	80045cc <HAL_GetTick>
 800460c:	0002      	movs	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d8f7      	bhi.n	8004608 <HAL_Delay+0x28>
  {
  }
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b004      	add	sp, #16
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	20000008 	.word	0x20000008

08004628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	0002      	movs	r2, r0
 8004630:	1dfb      	adds	r3, r7, #7
 8004632:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004634:	1dfb      	adds	r3, r7, #7
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b7f      	cmp	r3, #127	; 0x7f
 800463a:	d809      	bhi.n	8004650 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	001a      	movs	r2, r3
 8004642:	231f      	movs	r3, #31
 8004644:	401a      	ands	r2, r3
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <__NVIC_EnableIRQ+0x30>)
 8004648:	2101      	movs	r1, #1
 800464a:	4091      	lsls	r1, r2
 800464c:	000a      	movs	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
  }
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b002      	add	sp, #8
 8004656:	bd80      	pop	{r7, pc}
 8004658:	e000e100 	.word	0xe000e100

0800465c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	0002      	movs	r2, r0
 8004664:	6039      	str	r1, [r7, #0]
 8004666:	1dfb      	adds	r3, r7, #7
 8004668:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b7f      	cmp	r3, #127	; 0x7f
 8004670:	d828      	bhi.n	80046c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004672:	4a2f      	ldr	r2, [pc, #188]	; (8004730 <__NVIC_SetPriority+0xd4>)
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	b25b      	sxtb	r3, r3
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	33c0      	adds	r3, #192	; 0xc0
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	589b      	ldr	r3, [r3, r2]
 8004682:	1dfa      	adds	r2, r7, #7
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	0011      	movs	r1, r2
 8004688:	2203      	movs	r2, #3
 800468a:	400a      	ands	r2, r1
 800468c:	00d2      	lsls	r2, r2, #3
 800468e:	21ff      	movs	r1, #255	; 0xff
 8004690:	4091      	lsls	r1, r2
 8004692:	000a      	movs	r2, r1
 8004694:	43d2      	mvns	r2, r2
 8004696:	401a      	ands	r2, r3
 8004698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	22ff      	movs	r2, #255	; 0xff
 80046a0:	401a      	ands	r2, r3
 80046a2:	1dfb      	adds	r3, r7, #7
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	0018      	movs	r0, r3
 80046a8:	2303      	movs	r3, #3
 80046aa:	4003      	ands	r3, r0
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046b0:	481f      	ldr	r0, [pc, #124]	; (8004730 <__NVIC_SetPriority+0xd4>)
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b25b      	sxtb	r3, r3
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	430a      	orrs	r2, r1
 80046bc:	33c0      	adds	r3, #192	; 0xc0
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046c2:	e031      	b.n	8004728 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <__NVIC_SetPriority+0xd8>)
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	0019      	movs	r1, r3
 80046cc:	230f      	movs	r3, #15
 80046ce:	400b      	ands	r3, r1
 80046d0:	3b08      	subs	r3, #8
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3306      	adds	r3, #6
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	18d3      	adds	r3, r2, r3
 80046da:	3304      	adds	r3, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	1dfa      	adds	r2, r7, #7
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	0011      	movs	r1, r2
 80046e4:	2203      	movs	r2, #3
 80046e6:	400a      	ands	r2, r1
 80046e8:	00d2      	lsls	r2, r2, #3
 80046ea:	21ff      	movs	r1, #255	; 0xff
 80046ec:	4091      	lsls	r1, r2
 80046ee:	000a      	movs	r2, r1
 80046f0:	43d2      	mvns	r2, r2
 80046f2:	401a      	ands	r2, r3
 80046f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	22ff      	movs	r2, #255	; 0xff
 80046fc:	401a      	ands	r2, r3
 80046fe:	1dfb      	adds	r3, r7, #7
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	0018      	movs	r0, r3
 8004704:	2303      	movs	r3, #3
 8004706:	4003      	ands	r3, r0
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800470c:	4809      	ldr	r0, [pc, #36]	; (8004734 <__NVIC_SetPriority+0xd8>)
 800470e:	1dfb      	adds	r3, r7, #7
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	001c      	movs	r4, r3
 8004714:	230f      	movs	r3, #15
 8004716:	4023      	ands	r3, r4
 8004718:	3b08      	subs	r3, #8
 800471a:	089b      	lsrs	r3, r3, #2
 800471c:	430a      	orrs	r2, r1
 800471e:	3306      	adds	r3, #6
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	18c3      	adds	r3, r0, r3
 8004724:	3304      	adds	r3, #4
 8004726:	601a      	str	r2, [r3, #0]
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b003      	add	sp, #12
 800472e:	bd90      	pop	{r4, r7, pc}
 8004730:	e000e100 	.word	0xe000e100
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	045b      	lsls	r3, r3, #17
 8004748:	429a      	cmp	r2, r3
 800474a:	d301      	bcc.n	8004750 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800474c:	2301      	movs	r3, #1
 800474e:	e010      	b.n	8004772 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <SysTick_Config+0x44>)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	3a01      	subs	r2, #1
 8004756:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004758:	2301      	movs	r3, #1
 800475a:	425b      	negs	r3, r3
 800475c:	2103      	movs	r1, #3
 800475e:	0018      	movs	r0, r3
 8004760:	f7ff ff7c 	bl	800465c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <SysTick_Config+0x44>)
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <SysTick_Config+0x44>)
 800476c:	2207      	movs	r2, #7
 800476e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004770:	2300      	movs	r3, #0
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b002      	add	sp, #8
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	e000e010 	.word	0xe000e010

08004780 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	210f      	movs	r1, #15
 800478c:	187b      	adds	r3, r7, r1
 800478e:	1c02      	adds	r2, r0, #0
 8004790:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	187b      	adds	r3, r7, r1
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b25b      	sxtb	r3, r3
 800479a:	0011      	movs	r1, r2
 800479c:	0018      	movs	r0, r3
 800479e:	f7ff ff5d 	bl	800465c <__NVIC_SetPriority>
}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b004      	add	sp, #16
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	0002      	movs	r2, r0
 80047b2:	1dfb      	adds	r3, r7, #7
 80047b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b6:	1dfb      	adds	r3, r7, #7
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff ff33 	bl	8004628 <__NVIC_EnableIRQ>
}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b002      	add	sp, #8
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7ff ffaf 	bl	8004738 <SysTick_Config>
 80047da:	0003      	movs	r3, r0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2221      	movs	r2, #33	; 0x21
 80047f0:	5c9b      	ldrb	r3, [r3, r2]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d008      	beq.n	800480a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2204      	movs	r2, #4
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e020      	b.n	800484c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	210e      	movs	r1, #14
 8004816:	438a      	bics	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2101      	movs	r1, #1
 8004826:	438a      	bics	r2, r1
 8004828:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	2101      	movs	r1, #1
 8004834:	4091      	lsls	r1, r2
 8004836:	000a      	movs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b002      	add	sp, #8
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800485c:	210f      	movs	r1, #15
 800485e:	187b      	adds	r3, r7, r1
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2221      	movs	r2, #33	; 0x21
 8004868:	5c9b      	ldrb	r3, [r3, r2]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d006      	beq.n	800487e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2204      	movs	r2, #4
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004876:	187b      	adds	r3, r7, r1
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e028      	b.n	80048d0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	210e      	movs	r1, #14
 800488a:	438a      	bics	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	438a      	bics	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	2101      	movs	r1, #1
 80048a8:	4091      	lsls	r1, r2
 80048aa:	000a      	movs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2221      	movs	r2, #33	; 0x21
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	0010      	movs	r0, r2
 80048ce:	4798      	blx	r3
    } 
  }
  return status;
 80048d0:	230f      	movs	r3, #15
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	781b      	ldrb	r3, [r3, #0]
}
 80048d6:	0018      	movs	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	b004      	add	sp, #16
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048ee:	e14f      	b.n	8004b90 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2101      	movs	r1, #1
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4091      	lsls	r1, r2
 80048fa:	000a      	movs	r2, r1
 80048fc:	4013      	ands	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d100      	bne.n	8004908 <HAL_GPIO_Init+0x28>
 8004906:	e140      	b.n	8004b8a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2203      	movs	r2, #3
 800490e:	4013      	ands	r3, r2
 8004910:	2b01      	cmp	r3, #1
 8004912:	d005      	beq.n	8004920 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2203      	movs	r2, #3
 800491a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800491c:	2b02      	cmp	r3, #2
 800491e:	d130      	bne.n	8004982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	2203      	movs	r2, #3
 800492c:	409a      	lsls	r2, r3
 800492e:	0013      	movs	r3, r2
 8004930:	43da      	mvns	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	409a      	lsls	r2, r3
 8004942:	0013      	movs	r3, r2
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004956:	2201      	movs	r2, #1
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	409a      	lsls	r2, r3
 800495c:	0013      	movs	r3, r2
 800495e:	43da      	mvns	r2, r3
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	2201      	movs	r2, #1
 800496e:	401a      	ands	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	409a      	lsls	r2, r3
 8004974:	0013      	movs	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2203      	movs	r2, #3
 8004988:	4013      	ands	r3, r2
 800498a:	2b03      	cmp	r3, #3
 800498c:	d017      	beq.n	80049be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2203      	movs	r2, #3
 800499a:	409a      	lsls	r2, r3
 800499c:	0013      	movs	r3, r2
 800499e:	43da      	mvns	r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4013      	ands	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	409a      	lsls	r2, r3
 80049b0:	0013      	movs	r3, r2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2203      	movs	r2, #3
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d123      	bne.n	8004a12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	08da      	lsrs	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3208      	adds	r2, #8
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	58d3      	ldr	r3, [r2, r3]
 80049d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2207      	movs	r2, #7
 80049dc:	4013      	ands	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	220f      	movs	r2, #15
 80049e2:	409a      	lsls	r2, r3
 80049e4:	0013      	movs	r3, r2
 80049e6:	43da      	mvns	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2107      	movs	r1, #7
 80049f6:	400b      	ands	r3, r1
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	409a      	lsls	r2, r3
 80049fc:	0013      	movs	r3, r2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	08da      	lsrs	r2, r3, #3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3208      	adds	r2, #8
 8004a0c:	0092      	lsls	r2, r2, #2
 8004a0e:	6939      	ldr	r1, [r7, #16]
 8004a10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	0013      	movs	r3, r2
 8004a22:	43da      	mvns	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4013      	ands	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	401a      	ands	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	409a      	lsls	r2, r3
 8004a38:	0013      	movs	r3, r2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	23c0      	movs	r3, #192	; 0xc0
 8004a4c:	029b      	lsls	r3, r3, #10
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d100      	bne.n	8004a54 <HAL_GPIO_Init+0x174>
 8004a52:	e09a      	b.n	8004b8a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a54:	4b54      	ldr	r3, [pc, #336]	; (8004ba8 <HAL_GPIO_Init+0x2c8>)
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <HAL_GPIO_Init+0x2c8>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	619a      	str	r2, [r3, #24]
 8004a60:	4b51      	ldr	r3, [pc, #324]	; (8004ba8 <HAL_GPIO_Init+0x2c8>)
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2201      	movs	r2, #1
 8004a66:	4013      	ands	r3, r2
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a6c:	4a4f      	ldr	r2, [pc, #316]	; (8004bac <HAL_GPIO_Init+0x2cc>)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	3302      	adds	r3, #2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	589b      	ldr	r3, [r3, r2]
 8004a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	4013      	ands	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	220f      	movs	r2, #15
 8004a84:	409a      	lsls	r2, r3
 8004a86:	0013      	movs	r3, r2
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	2390      	movs	r3, #144	; 0x90
 8004a94:	05db      	lsls	r3, r3, #23
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d013      	beq.n	8004ac2 <HAL_GPIO_Init+0x1e2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a44      	ldr	r2, [pc, #272]	; (8004bb0 <HAL_GPIO_Init+0x2d0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00d      	beq.n	8004abe <HAL_GPIO_Init+0x1de>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a43      	ldr	r2, [pc, #268]	; (8004bb4 <HAL_GPIO_Init+0x2d4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <HAL_GPIO_Init+0x1da>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a42      	ldr	r2, [pc, #264]	; (8004bb8 <HAL_GPIO_Init+0x2d8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_GPIO_Init+0x1d6>
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e006      	b.n	8004ac4 <HAL_GPIO_Init+0x1e4>
 8004ab6:	2305      	movs	r3, #5
 8004ab8:	e004      	b.n	8004ac4 <HAL_GPIO_Init+0x1e4>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e002      	b.n	8004ac4 <HAL_GPIO_Init+0x1e4>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_GPIO_Init+0x1e4>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	2103      	movs	r1, #3
 8004ac8:	400a      	ands	r2, r1
 8004aca:	0092      	lsls	r2, r2, #2
 8004acc:	4093      	lsls	r3, r2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ad4:	4935      	ldr	r1, [pc, #212]	; (8004bac <HAL_GPIO_Init+0x2cc>)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	3302      	adds	r3, #2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	43da      	mvns	r2, r3
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4013      	ands	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	4013      	ands	r3, r2
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004b0c:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	43da      	mvns	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	4013      	ands	r3, r2
 8004b26:	d003      	beq.n	8004b30 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b36:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	035b      	lsls	r3, r3, #13
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b5a:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b60:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	039b      	lsls	r3, r3, #14
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <HAL_GPIO_Init+0x2dc>)
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	40da      	lsrs	r2, r3
 8004b98:	1e13      	subs	r3, r2, #0
 8004b9a:	d000      	beq.n	8004b9e <HAL_GPIO_Init+0x2be>
 8004b9c:	e6a8      	b.n	80048f0 <HAL_GPIO_Init+0x10>
  } 
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b006      	add	sp, #24
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	48000400 	.word	0x48000400
 8004bb4:	48000800 	.word	0x48000800
 8004bb8:	48000c00 	.word	0x48000c00
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	0008      	movs	r0, r1
 8004bca:	0011      	movs	r1, r2
 8004bcc:	1cbb      	adds	r3, r7, #2
 8004bce:	1c02      	adds	r2, r0, #0
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	1c7b      	adds	r3, r7, #1
 8004bd4:	1c0a      	adds	r2, r1, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bd8:	1c7b      	adds	r3, r7, #1
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004be0:	1cbb      	adds	r3, r7, #2
 8004be2:	881a      	ldrh	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004be8:	e003      	b.n	8004bf2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bea:	1cbb      	adds	r3, r7, #2
 8004bec:	881a      	ldrh	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	000a      	movs	r2, r1
 8004c04:	1cbb      	adds	r3, r7, #2
 8004c06:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c0e:	1cbb      	adds	r3, r7, #2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	041a      	lsls	r2, r3, #16
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	1cb9      	adds	r1, r7, #2
 8004c1e:	8809      	ldrh	r1, [r1, #0]
 8004c20:	400b      	ands	r3, r1
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	619a      	str	r2, [r3, #24]
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b004      	add	sp, #16
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	0002      	movs	r2, r0
 8004c38:	1dbb      	adds	r3, r7, #6
 8004c3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	1dba      	adds	r2, r7, #6
 8004c42:	8812      	ldrh	r2, [r2, #0]
 8004c44:	4013      	ands	r3, r2
 8004c46:	d008      	beq.n	8004c5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004c4a:	1dba      	adds	r2, r7, #6
 8004c4c:	8812      	ldrh	r2, [r2, #0]
 8004c4e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c50:	1dbb      	adds	r3, r7, #6
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7ff f8e5 	bl	8003e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	40010400 	.word	0x40010400

08004c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e082      	b.n	8004d80 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2241      	movs	r2, #65	; 0x41
 8004c7e:	5c9b      	ldrb	r3, [r3, r2]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7ff f911 	bl	8003eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2241      	movs	r2, #65	; 0x41
 8004c9a:	2124      	movs	r1, #36	; 0x24
 8004c9c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2101      	movs	r1, #1
 8004caa:	438a      	bics	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4934      	ldr	r1, [pc, #208]	; (8004d88 <HAL_I2C_Init+0x120>)
 8004cb8:	400a      	ands	r2, r1
 8004cba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4931      	ldr	r1, [pc, #196]	; (8004d8c <HAL_I2C_Init+0x124>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d108      	bne.n	8004ce6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2180      	movs	r1, #128	; 0x80
 8004cde:	0209      	lsls	r1, r1, #8
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	e007      	b.n	8004cf6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2184      	movs	r1, #132	; 0x84
 8004cf0:	0209      	lsls	r1, r1, #8
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d104      	bne.n	8004d08 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	0112      	lsls	r2, r2, #4
 8004d06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	491f      	ldr	r1, [pc, #124]	; (8004d90 <HAL_I2C_Init+0x128>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	491a      	ldr	r1, [pc, #104]	; (8004d8c <HAL_I2C_Init+0x124>)
 8004d24:	400a      	ands	r2, r1
 8004d26:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69d9      	ldr	r1, [r3, #28]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2241      	movs	r2, #65	; 0x41
 8004d6c:	2120      	movs	r1, #32
 8004d6e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2242      	movs	r2, #66	; 0x42
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	f0ffffff 	.word	0xf0ffffff
 8004d8c:	ffff7fff 	.word	0xffff7fff
 8004d90:	02008000 	.word	0x02008000

08004d94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b089      	sub	sp, #36	; 0x24
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	000c      	movs	r4, r1
 8004d9e:	0010      	movs	r0, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	230a      	movs	r3, #10
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	1c22      	adds	r2, r4, #0
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	2308      	movs	r3, #8
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	1c02      	adds	r2, r0, #0
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	1dbb      	adds	r3, r7, #6
 8004db4:	1c0a      	adds	r2, r1, #0
 8004db6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2241      	movs	r2, #65	; 0x41
 8004dbc:	5c9b      	ldrb	r3, [r3, r2]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d000      	beq.n	8004dc6 <HAL_I2C_Mem_Write+0x32>
 8004dc4:	e10c      	b.n	8004fe0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d004      	beq.n	8004dd6 <HAL_I2C_Mem_Write+0x42>
 8004dcc:	232c      	movs	r3, #44	; 0x2c
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	0092      	lsls	r2, r2, #2
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0ff      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2240      	movs	r2, #64	; 0x40
 8004de6:	5c9b      	ldrb	r3, [r3, r2]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_I2C_Mem_Write+0x5c>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e0f8      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	2101      	movs	r1, #1
 8004df6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004df8:	f7ff fbe8 	bl	80045cc <HAL_GetTick>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	0219      	lsls	r1, r3, #8
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2319      	movs	r3, #25
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f000 fb0b 	bl	8005428 <I2C_WaitOnFlagUntilTimeout>
 8004e12:	1e03      	subs	r3, r0, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e0e3      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2241      	movs	r2, #65	; 0x41
 8004e1e:	2121      	movs	r1, #33	; 0x21
 8004e20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2242      	movs	r2, #66	; 0x42
 8004e26:	2140      	movs	r1, #64	; 0x40
 8004e28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	222c      	movs	r2, #44	; 0x2c
 8004e3a:	18ba      	adds	r2, r7, r2
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e46:	1dbb      	adds	r3, r7, #6
 8004e48:	881c      	ldrh	r4, [r3, #0]
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	230a      	movs	r3, #10
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	8819      	ldrh	r1, [r3, #0]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	0023      	movs	r3, r4
 8004e62:	f000 f9f9 	bl	8005258 <I2C_RequestMemoryWrite>
 8004e66:	1e03      	subs	r3, r0, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2240      	movs	r2, #64	; 0x40
 8004e6e:	2100      	movs	r1, #0
 8004e70:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0b5      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2bff      	cmp	r3, #255	; 0xff
 8004e7e:	d911      	bls.n	8004ea4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	22ff      	movs	r2, #255	; 0xff
 8004e84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	045c      	lsls	r4, r3, #17
 8004e90:	230a      	movs	r3, #10
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	8819      	ldrh	r1, [r3, #0]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	0023      	movs	r3, r4
 8004e9e:	f000 fbf7 	bl	8005690 <I2C_TransferConfig>
 8004ea2:	e012      	b.n	8004eca <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	049c      	lsls	r4, r3, #18
 8004eb8:	230a      	movs	r3, #10
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	8819      	ldrh	r1, [r3, #0]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	0023      	movs	r3, r4
 8004ec6:	f000 fbe3 	bl	8005690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 fae8 	bl	80054a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e081      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	781a      	ldrb	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d03a      	beq.n	8004f8e <HAL_I2C_Mem_Write+0x1fa>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d136      	bne.n	8004f8e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	0013      	movs	r3, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2180      	movs	r1, #128	; 0x80
 8004f2e:	f000 fa7b 	bl	8005428 <I2C_WaitOnFlagUntilTimeout>
 8004f32:	1e03      	subs	r3, r0, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e053      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2bff      	cmp	r3, #255	; 0xff
 8004f42:	d911      	bls.n	8004f68 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	045c      	lsls	r4, r3, #17
 8004f54:	230a      	movs	r3, #10
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	8819      	ldrh	r1, [r3, #0]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	0023      	movs	r3, r4
 8004f62:	f000 fb95 	bl	8005690 <I2C_TransferConfig>
 8004f66:	e012      	b.n	8004f8e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	049c      	lsls	r4, r3, #18
 8004f7c:	230a      	movs	r3, #10
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	8819      	ldrh	r1, [r3, #0]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	0023      	movs	r3, r4
 8004f8a:	f000 fb81 	bl	8005690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d198      	bne.n	8004eca <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fac0 	bl	8005524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fa4:	1e03      	subs	r3, r0, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e01a      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	490b      	ldr	r1, [pc, #44]	; (8004fec <HAL_I2C_Mem_Write+0x258>)
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2241      	movs	r2, #65	; 0x41
 8004fc8:	2120      	movs	r1, #32
 8004fca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2242      	movs	r2, #66	; 0x42
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	2100      	movs	r1, #0
 8004fda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b007      	add	sp, #28
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b089      	sub	sp, #36	; 0x24
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	000c      	movs	r4, r1
 8004ffa:	0010      	movs	r0, r2
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	230a      	movs	r3, #10
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	1c22      	adds	r2, r4, #0
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	2308      	movs	r3, #8
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	1c02      	adds	r2, r0, #0
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	1dbb      	adds	r3, r7, #6
 8005010:	1c0a      	adds	r2, r1, #0
 8005012:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2241      	movs	r2, #65	; 0x41
 8005018:	5c9b      	ldrb	r3, [r3, r2]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b20      	cmp	r3, #32
 800501e:	d000      	beq.n	8005022 <HAL_I2C_Mem_Read+0x32>
 8005020:	e110      	b.n	8005244 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	2b00      	cmp	r3, #0
 8005026:	d004      	beq.n	8005032 <HAL_I2C_Mem_Read+0x42>
 8005028:	232c      	movs	r3, #44	; 0x2c
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2280      	movs	r2, #128	; 0x80
 8005036:	0092      	lsls	r2, r2, #2
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e103      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2240      	movs	r2, #64	; 0x40
 8005042:	5c9b      	ldrb	r3, [r3, r2]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_I2C_Mem_Read+0x5c>
 8005048:	2302      	movs	r3, #2
 800504a:	e0fc      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2240      	movs	r2, #64	; 0x40
 8005050:	2101      	movs	r1, #1
 8005052:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005054:	f7ff faba 	bl	80045cc <HAL_GetTick>
 8005058:	0003      	movs	r3, r0
 800505a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	0219      	lsls	r1, r3, #8
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2319      	movs	r3, #25
 8005068:	2201      	movs	r2, #1
 800506a:	f000 f9dd 	bl	8005428 <I2C_WaitOnFlagUntilTimeout>
 800506e:	1e03      	subs	r3, r0, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0e7      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2241      	movs	r2, #65	; 0x41
 800507a:	2122      	movs	r1, #34	; 0x22
 800507c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2242      	movs	r2, #66	; 0x42
 8005082:	2140      	movs	r1, #64	; 0x40
 8005084:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	222c      	movs	r2, #44	; 0x2c
 8005096:	18ba      	adds	r2, r7, r2
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050a2:	1dbb      	adds	r3, r7, #6
 80050a4:	881c      	ldrh	r4, [r3, #0]
 80050a6:	2308      	movs	r3, #8
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	881a      	ldrh	r2, [r3, #0]
 80050ac:	230a      	movs	r3, #10
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	8819      	ldrh	r1, [r3, #0]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	0023      	movs	r3, r4
 80050be:	f000 f92f 	bl	8005320 <I2C_RequestMemoryRead>
 80050c2:	1e03      	subs	r3, r0, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2240      	movs	r2, #64	; 0x40
 80050ca:	2100      	movs	r1, #0
 80050cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0b9      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2bff      	cmp	r3, #255	; 0xff
 80050da:	d911      	bls.n	8005100 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	22ff      	movs	r2, #255	; 0xff
 80050e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	045c      	lsls	r4, r3, #17
 80050ec:	230a      	movs	r3, #10
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	8819      	ldrh	r1, [r3, #0]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	4b56      	ldr	r3, [pc, #344]	; (8005250 <HAL_I2C_Mem_Read+0x260>)
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	0023      	movs	r3, r4
 80050fa:	f000 fac9 	bl	8005690 <I2C_TransferConfig>
 80050fe:	e012      	b.n	8005126 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	b2da      	uxtb	r2, r3
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	049c      	lsls	r4, r3, #18
 8005114:	230a      	movs	r3, #10
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	8819      	ldrh	r1, [r3, #0]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	4b4c      	ldr	r3, [pc, #304]	; (8005250 <HAL_I2C_Mem_Read+0x260>)
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	0023      	movs	r3, r4
 8005122:	f000 fab5 	bl	8005690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	0013      	movs	r3, r2
 8005130:	2200      	movs	r2, #0
 8005132:	2104      	movs	r1, #4
 8005134:	f000 f978 	bl	8005428 <I2C_WaitOnFlagUntilTimeout>
 8005138:	1e03      	subs	r3, r0, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e082      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d03a      	beq.n	80051f2 <HAL_I2C_Mem_Read+0x202>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	d136      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	0013      	movs	r3, r2
 800518e:	2200      	movs	r2, #0
 8005190:	2180      	movs	r1, #128	; 0x80
 8005192:	f000 f949 	bl	8005428 <I2C_WaitOnFlagUntilTimeout>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e053      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2bff      	cmp	r3, #255	; 0xff
 80051a6:	d911      	bls.n	80051cc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	22ff      	movs	r2, #255	; 0xff
 80051ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	045c      	lsls	r4, r3, #17
 80051b8:	230a      	movs	r3, #10
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	8819      	ldrh	r1, [r3, #0]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	0023      	movs	r3, r4
 80051c6:	f000 fa63 	bl	8005690 <I2C_TransferConfig>
 80051ca:	e012      	b.n	80051f2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	049c      	lsls	r4, r3, #18
 80051e0:	230a      	movs	r3, #10
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	8819      	ldrh	r1, [r3, #0]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	2300      	movs	r3, #0
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	0023      	movs	r3, r4
 80051ee:	f000 fa4f 	bl	8005690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d194      	bne.n	8005126 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 f98e 	bl	8005524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005208:	1e03      	subs	r3, r0, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e01a      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2220      	movs	r2, #32
 8005216:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	490c      	ldr	r1, [pc, #48]	; (8005254 <HAL_I2C_Mem_Read+0x264>)
 8005224:	400a      	ands	r2, r1
 8005226:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2241      	movs	r2, #65	; 0x41
 800522c:	2120      	movs	r1, #32
 800522e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2242      	movs	r2, #66	; 0x42
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e000      	b.n	8005246 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
  }
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b007      	add	sp, #28
 800524c:	bd90      	pop	{r4, r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	80002400 	.word	0x80002400
 8005254:	fe00e800 	.word	0xfe00e800

08005258 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005258:	b5b0      	push	{r4, r5, r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	000c      	movs	r4, r1
 8005262:	0010      	movs	r0, r2
 8005264:	0019      	movs	r1, r3
 8005266:	250a      	movs	r5, #10
 8005268:	197b      	adds	r3, r7, r5
 800526a:	1c22      	adds	r2, r4, #0
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	2308      	movs	r3, #8
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	1c02      	adds	r2, r0, #0
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	1dbb      	adds	r3, r7, #6
 8005278:	1c0a      	adds	r2, r1, #0
 800527a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800527c:	1dbb      	adds	r3, r7, #6
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	045c      	lsls	r4, r3, #17
 8005286:	197b      	adds	r3, r7, r5
 8005288:	8819      	ldrh	r1, [r3, #0]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	4b23      	ldr	r3, [pc, #140]	; (800531c <I2C_RequestMemoryWrite+0xc4>)
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	0023      	movs	r3, r4
 8005292:	f000 f9fd 	bl	8005690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	6a39      	ldr	r1, [r7, #32]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 f902 	bl	80054a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80052a2:	1e03      	subs	r3, r0, #0
 80052a4:	d001      	beq.n	80052aa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e033      	b.n	8005312 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052aa:	1dbb      	adds	r3, r7, #6
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d107      	bne.n	80052c2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052b2:	2308      	movs	r3, #8
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28
 80052c0:	e019      	b.n	80052f6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052c2:	2308      	movs	r3, #8
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d6:	6a39      	ldr	r1, [r7, #32]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f8e3 	bl	80054a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80052e0:	1e03      	subs	r3, r0, #0
 80052e2:	d001      	beq.n	80052e8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e014      	b.n	8005312 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052e8:	2308      	movs	r3, #8
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	0013      	movs	r3, r2
 8005300:	2200      	movs	r2, #0
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	f000 f890 	bl	8005428 <I2C_WaitOnFlagUntilTimeout>
 8005308:	1e03      	subs	r3, r0, #0
 800530a:	d001      	beq.n	8005310 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	0018      	movs	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	b004      	add	sp, #16
 8005318:	bdb0      	pop	{r4, r5, r7, pc}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	80002000 	.word	0x80002000

08005320 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	000c      	movs	r4, r1
 800532a:	0010      	movs	r0, r2
 800532c:	0019      	movs	r1, r3
 800532e:	250a      	movs	r5, #10
 8005330:	197b      	adds	r3, r7, r5
 8005332:	1c22      	adds	r2, r4, #0
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	2308      	movs	r3, #8
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	1c02      	adds	r2, r0, #0
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	1dbb      	adds	r3, r7, #6
 8005340:	1c0a      	adds	r2, r1, #0
 8005342:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005344:	1dbb      	adds	r3, r7, #6
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b2da      	uxtb	r2, r3
 800534a:	197b      	adds	r3, r7, r5
 800534c:	8819      	ldrh	r1, [r3, #0]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <I2C_RequestMemoryRead+0xc0>)
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	f000 f99b 	bl	8005690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	0018      	movs	r0, r3
 8005362:	f000 f8a0 	bl	80054a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d001      	beq.n	800536e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e033      	b.n	80053d6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800536e:	1dbb      	adds	r3, r7, #6
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005376:	2308      	movs	r3, #8
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28
 8005384:	e019      	b.n	80053ba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005386:	2308      	movs	r3, #8
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	b29b      	uxth	r3, r3
 8005390:	b2da      	uxtb	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	6a39      	ldr	r1, [r7, #32]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 f881 	bl	80054a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80053a4:	1e03      	subs	r3, r0, #0
 80053a6:	d001      	beq.n	80053ac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e014      	b.n	80053d6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ac:	2308      	movs	r3, #8
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	0013      	movs	r3, r2
 80053c4:	2200      	movs	r2, #0
 80053c6:	2140      	movs	r1, #64	; 0x40
 80053c8:	f000 f82e 	bl	8005428 <I2C_WaitOnFlagUntilTimeout>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d001      	beq.n	80053d4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	0018      	movs	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	b004      	add	sp, #16
 80053dc:	bdb0      	pop	{r4, r5, r7, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	80002000 	.word	0x80002000

080053e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2202      	movs	r2, #2
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d103      	bne.n	8005402 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2201      	movs	r2, #1
 800540a:	4013      	ands	r3, r2
 800540c:	2b01      	cmp	r3, #1
 800540e:	d007      	beq.n	8005420 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2101      	movs	r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	619a      	str	r2, [r3, #24]
  }
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	1dfb      	adds	r3, r7, #7
 8005436:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005438:	e021      	b.n	800547e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	d01e      	beq.n	800547e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005440:	f7ff f8c4 	bl	80045cc <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d113      	bne.n	800547e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	2220      	movs	r2, #32
 800545c:	431a      	orrs	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2241      	movs	r2, #65	; 0x41
 8005466:	2120      	movs	r1, #32
 8005468:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2242      	movs	r2, #66	; 0x42
 800546e:	2100      	movs	r1, #0
 8005470:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2240      	movs	r2, #64	; 0x40
 8005476:	2100      	movs	r1, #0
 8005478:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e00f      	b.n	800549e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	4013      	ands	r3, r2
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	425a      	negs	r2, r3
 800548e:	4153      	adcs	r3, r2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	001a      	movs	r2, r3
 8005494:	1dfb      	adds	r3, r7, #7
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d0ce      	beq.n	800543a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b004      	add	sp, #16
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054b2:	e02b      	b.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 f86e 	bl	800559c <I2C_IsAcknowledgeFailed>
 80054c0:	1e03      	subs	r3, r0, #0
 80054c2:	d001      	beq.n	80054c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e029      	b.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	3301      	adds	r3, #1
 80054cc:	d01e      	beq.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7ff f87d 	bl	80045cc <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d113      	bne.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e8:	2220      	movs	r2, #32
 80054ea:	431a      	orrs	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2241      	movs	r2, #65	; 0x41
 80054f4:	2120      	movs	r1, #32
 80054f6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2242      	movs	r2, #66	; 0x42
 80054fc:	2100      	movs	r1, #0
 80054fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	2100      	movs	r1, #0
 8005506:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e007      	b.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2202      	movs	r2, #2
 8005514:	4013      	ands	r3, r2
 8005516:	2b02      	cmp	r3, #2
 8005518:	d1cc      	bne.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b004      	add	sp, #16
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005530:	e028      	b.n	8005584 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	0018      	movs	r0, r3
 800553a:	f000 f82f 	bl	800559c <I2C_IsAcknowledgeFailed>
 800553e:	1e03      	subs	r3, r0, #0
 8005540:	d001      	beq.n	8005546 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e026      	b.n	8005594 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005546:	f7ff f841 	bl	80045cc <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d113      	bne.n	8005584 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	2220      	movs	r2, #32
 8005562:	431a      	orrs	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2241      	movs	r2, #65	; 0x41
 800556c:	2120      	movs	r1, #32
 800556e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2242      	movs	r2, #66	; 0x42
 8005574:	2100      	movs	r1, #0
 8005576:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	2100      	movs	r1, #0
 800557e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e007      	b.n	8005594 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2220      	movs	r2, #32
 800558c:	4013      	ands	r3, r2
 800558e:	2b20      	cmp	r3, #32
 8005590:	d1cf      	bne.n	8005532 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	0018      	movs	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	b004      	add	sp, #16
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2210      	movs	r2, #16
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d164      	bne.n	8005680 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	049b      	lsls	r3, r3, #18
 80055c0:	401a      	ands	r2, r3
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	049b      	lsls	r3, r3, #18
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d02b      	beq.n	8005622 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2180      	movs	r1, #128	; 0x80
 80055d6:	01c9      	lsls	r1, r1, #7
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055dc:	e021      	b.n	8005622 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3301      	adds	r3, #1
 80055e2:	d01e      	beq.n	8005622 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e4:	f7fe fff2 	bl	80045cc <HAL_GetTick>
 80055e8:	0002      	movs	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <I2C_IsAcknowledgeFailed+0x5e>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d113      	bne.n	8005622 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	2220      	movs	r2, #32
 8005600:	431a      	orrs	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2241      	movs	r2, #65	; 0x41
 800560a:	2120      	movs	r1, #32
 800560c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2242      	movs	r2, #66	; 0x42
 8005612:	2100      	movs	r1, #0
 8005614:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2240      	movs	r2, #64	; 0x40
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e02f      	b.n	8005682 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2220      	movs	r2, #32
 800562a:	4013      	ands	r3, r2
 800562c:	2b20      	cmp	r3, #32
 800562e:	d1d6      	bne.n	80055de <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2210      	movs	r2, #16
 8005636:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2220      	movs	r2, #32
 800563e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	0018      	movs	r0, r3
 8005644:	f7ff fece 	bl	80053e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	490e      	ldr	r1, [pc, #56]	; (800568c <I2C_IsAcknowledgeFailed+0xf0>)
 8005654:	400a      	ands	r2, r1
 8005656:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	2204      	movs	r2, #4
 800565e:	431a      	orrs	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2241      	movs	r2, #65	; 0x41
 8005668:	2120      	movs	r1, #32
 800566a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2242      	movs	r2, #66	; 0x42
 8005670:	2100      	movs	r1, #0
 8005672:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	2100      	movs	r1, #0
 800567a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b004      	add	sp, #16
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	fe00e800 	.word	0xfe00e800

08005690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	0008      	movs	r0, r1
 800569a:	0011      	movs	r1, r2
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	240a      	movs	r4, #10
 80056a0:	193b      	adds	r3, r7, r4
 80056a2:	1c02      	adds	r2, r0, #0
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	2009      	movs	r0, #9
 80056a8:	183b      	adds	r3, r7, r0
 80056aa:	1c0a      	adds	r2, r1, #0
 80056ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	6a3a      	ldr	r2, [r7, #32]
 80056b6:	0d51      	lsrs	r1, r2, #21
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	00d2      	lsls	r2, r2, #3
 80056bc:	400a      	ands	r2, r1
 80056be:	490e      	ldr	r1, [pc, #56]	; (80056f8 <I2C_TransferConfig+0x68>)
 80056c0:	430a      	orrs	r2, r1
 80056c2:	43d2      	mvns	r2, r2
 80056c4:	401a      	ands	r2, r3
 80056c6:	0011      	movs	r1, r2
 80056c8:	193b      	adds	r3, r7, r4
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	059b      	lsls	r3, r3, #22
 80056ce:	0d9a      	lsrs	r2, r3, #22
 80056d0:	183b      	adds	r3, r7, r0
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	0418      	lsls	r0, r3, #16
 80056d6:	23ff      	movs	r3, #255	; 0xff
 80056d8:	041b      	lsls	r3, r3, #16
 80056da:	4003      	ands	r3, r0
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b005      	add	sp, #20
 80056f4:	bd90      	pop	{r4, r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	03ff63ff 	.word	0x03ff63ff

080056fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2241      	movs	r2, #65	; 0x41
 800570a:	5c9b      	ldrb	r3, [r3, r2]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b20      	cmp	r3, #32
 8005710:	d138      	bne.n	8005784 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	5c9b      	ldrb	r3, [r3, r2]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800571c:	2302      	movs	r3, #2
 800571e:	e032      	b.n	8005786 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2240      	movs	r2, #64	; 0x40
 8005724:	2101      	movs	r1, #1
 8005726:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2241      	movs	r2, #65	; 0x41
 800572c:	2124      	movs	r1, #36	; 0x24
 800572e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2101      	movs	r1, #1
 800573c:	438a      	bics	r2, r1
 800573e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4911      	ldr	r1, [pc, #68]	; (8005790 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800574c:	400a      	ands	r2, r1
 800574e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6819      	ldr	r1, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2101      	movs	r1, #1
 800576c:	430a      	orrs	r2, r1
 800576e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2241      	movs	r2, #65	; 0x41
 8005774:	2120      	movs	r1, #32
 8005776:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2240      	movs	r2, #64	; 0x40
 800577c:	2100      	movs	r1, #0
 800577e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	0018      	movs	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	b002      	add	sp, #8
 800578c:	bd80      	pop	{r7, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	ffffefff 	.word	0xffffefff

08005794 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2241      	movs	r2, #65	; 0x41
 80057a2:	5c9b      	ldrb	r3, [r3, r2]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d139      	bne.n	800581e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	5c9b      	ldrb	r3, [r3, r2]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e033      	b.n	8005820 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	2101      	movs	r1, #1
 80057be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2241      	movs	r2, #65	; 0x41
 80057c4:	2124      	movs	r1, #36	; 0x24
 80057c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2101      	movs	r1, #1
 80057d4:	438a      	bics	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4a11      	ldr	r2, [pc, #68]	; (8005828 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2101      	movs	r1, #1
 8005806:	430a      	orrs	r2, r1
 8005808:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2241      	movs	r2, #65	; 0x41
 800580e:	2120      	movs	r1, #32
 8005810:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2240      	movs	r2, #64	; 0x40
 8005816:	2100      	movs	r1, #0
 8005818:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e000      	b.n	8005820 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
  }
}
 8005820:	0018      	movs	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	b004      	add	sp, #16
 8005826:	bd80      	pop	{r7, pc}
 8005828:	fffff0ff 	.word	0xfffff0ff

0800582c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e305      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2201      	movs	r2, #1
 8005844:	4013      	ands	r3, r2
 8005846:	d100      	bne.n	800584a <HAL_RCC_OscConfig+0x1e>
 8005848:	e08d      	b.n	8005966 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800584a:	4bc5      	ldr	r3, [pc, #788]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	220c      	movs	r2, #12
 8005850:	4013      	ands	r3, r2
 8005852:	2b04      	cmp	r3, #4
 8005854:	d00e      	beq.n	8005874 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005856:	4bc2      	ldr	r3, [pc, #776]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	220c      	movs	r2, #12
 800585c:	4013      	ands	r3, r2
 800585e:	2b08      	cmp	r3, #8
 8005860:	d116      	bne.n	8005890 <HAL_RCC_OscConfig+0x64>
 8005862:	4bbf      	ldr	r3, [pc, #764]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	025b      	lsls	r3, r3, #9
 800586a:	401a      	ands	r2, r3
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	025b      	lsls	r3, r3, #9
 8005870:	429a      	cmp	r2, r3
 8005872:	d10d      	bne.n	8005890 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	4bba      	ldr	r3, [pc, #744]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	4013      	ands	r3, r2
 800587e:	d100      	bne.n	8005882 <HAL_RCC_OscConfig+0x56>
 8005880:	e070      	b.n	8005964 <HAL_RCC_OscConfig+0x138>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d000      	beq.n	800588c <HAL_RCC_OscConfig+0x60>
 800588a:	e06b      	b.n	8005964 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e2dc      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_OscConfig+0x7c>
 8005898:	4bb1      	ldr	r3, [pc, #708]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4bb0      	ldr	r3, [pc, #704]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 800589e:	2180      	movs	r1, #128	; 0x80
 80058a0:	0249      	lsls	r1, r1, #9
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e02f      	b.n	8005908 <HAL_RCC_OscConfig+0xdc>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10c      	bne.n	80058ca <HAL_RCC_OscConfig+0x9e>
 80058b0:	4bab      	ldr	r3, [pc, #684]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4baa      	ldr	r3, [pc, #680]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058b6:	49ab      	ldr	r1, [pc, #684]	; (8005b64 <HAL_RCC_OscConfig+0x338>)
 80058b8:	400a      	ands	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	4ba8      	ldr	r3, [pc, #672]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4ba7      	ldr	r3, [pc, #668]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058c2:	49a9      	ldr	r1, [pc, #676]	; (8005b68 <HAL_RCC_OscConfig+0x33c>)
 80058c4:	400a      	ands	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e01e      	b.n	8005908 <HAL_RCC_OscConfig+0xdc>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d10e      	bne.n	80058f0 <HAL_RCC_OscConfig+0xc4>
 80058d2:	4ba3      	ldr	r3, [pc, #652]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4ba2      	ldr	r3, [pc, #648]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	02c9      	lsls	r1, r1, #11
 80058dc:	430a      	orrs	r2, r1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	4b9f      	ldr	r3, [pc, #636]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b9e      	ldr	r3, [pc, #632]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	0249      	lsls	r1, r1, #9
 80058ea:	430a      	orrs	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e00b      	b.n	8005908 <HAL_RCC_OscConfig+0xdc>
 80058f0:	4b9b      	ldr	r3, [pc, #620]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4b9a      	ldr	r3, [pc, #616]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058f6:	499b      	ldr	r1, [pc, #620]	; (8005b64 <HAL_RCC_OscConfig+0x338>)
 80058f8:	400a      	ands	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	4b98      	ldr	r3, [pc, #608]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b97      	ldr	r3, [pc, #604]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005902:	4999      	ldr	r1, [pc, #612]	; (8005b68 <HAL_RCC_OscConfig+0x33c>)
 8005904:	400a      	ands	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d014      	beq.n	800593a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fe fe5c 	bl	80045cc <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800591a:	f7fe fe57 	bl	80045cc <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b64      	cmp	r3, #100	; 0x64
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e28e      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592c:	4b8c      	ldr	r3, [pc, #560]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	4013      	ands	r3, r2
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0xee>
 8005938:	e015      	b.n	8005966 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593a:	f7fe fe47 	bl	80045cc <HAL_GetTick>
 800593e:	0003      	movs	r3, r0
 8005940:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005944:	f7fe fe42 	bl	80045cc <HAL_GetTick>
 8005948:	0002      	movs	r2, r0
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b64      	cmp	r3, #100	; 0x64
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e279      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005956:	4b82      	ldr	r3, [pc, #520]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	4013      	ands	r3, r2
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x118>
 8005962:	e000      	b.n	8005966 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005964:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2202      	movs	r2, #2
 800596c:	4013      	ands	r3, r2
 800596e:	d100      	bne.n	8005972 <HAL_RCC_OscConfig+0x146>
 8005970:	e06c      	b.n	8005a4c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005972:	4b7b      	ldr	r3, [pc, #492]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	220c      	movs	r2, #12
 8005978:	4013      	ands	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800597c:	4b78      	ldr	r3, [pc, #480]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	220c      	movs	r2, #12
 8005982:	4013      	ands	r3, r2
 8005984:	2b08      	cmp	r3, #8
 8005986:	d11f      	bne.n	80059c8 <HAL_RCC_OscConfig+0x19c>
 8005988:	4b75      	ldr	r3, [pc, #468]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	025b      	lsls	r3, r3, #9
 8005990:	401a      	ands	r2, r3
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	429a      	cmp	r2, r3
 8005998:	d116      	bne.n	80059c8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599a:	4b71      	ldr	r3, [pc, #452]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2202      	movs	r2, #2
 80059a0:	4013      	ands	r3, r2
 80059a2:	d005      	beq.n	80059b0 <HAL_RCC_OscConfig+0x184>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e24c      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b0:	4b6b      	ldr	r3, [pc, #428]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	22f8      	movs	r2, #248	; 0xf8
 80059b6:	4393      	bics	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	00da      	lsls	r2, r3, #3
 80059c0:	4b67      	ldr	r3, [pc, #412]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80059c2:	430a      	orrs	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c6:	e041      	b.n	8005a4c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d024      	beq.n	8005a1a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d0:	4b63      	ldr	r3, [pc, #396]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b62      	ldr	r3, [pc, #392]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80059d6:	2101      	movs	r1, #1
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fe fdf6 	bl	80045cc <HAL_GetTick>
 80059e0:	0003      	movs	r3, r0
 80059e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e6:	f7fe fdf1 	bl	80045cc <HAL_GetTick>
 80059ea:	0002      	movs	r2, r0
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e228      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f8:	4b59      	ldr	r3, [pc, #356]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2202      	movs	r2, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	d0f1      	beq.n	80059e6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b57      	ldr	r3, [pc, #348]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	22f8      	movs	r2, #248	; 0xf8
 8005a08:	4393      	bics	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	00da      	lsls	r2, r3, #3
 8005a12:	4b53      	ldr	r3, [pc, #332]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a14:	430a      	orrs	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e018      	b.n	8005a4c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1a:	4b51      	ldr	r3, [pc, #324]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b50      	ldr	r3, [pc, #320]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a20:	2101      	movs	r1, #1
 8005a22:	438a      	bics	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fe fdd1 	bl	80045cc <HAL_GetTick>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fe fdcc 	bl	80045cc <HAL_GetTick>
 8005a34:	0002      	movs	r2, r0
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e203      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a42:	4b47      	ldr	r3, [pc, #284]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2202      	movs	r2, #2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d1f1      	bne.n	8005a30 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2208      	movs	r2, #8
 8005a52:	4013      	ands	r3, r2
 8005a54:	d036      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d019      	beq.n	8005a92 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a5e:	4b40      	ldr	r3, [pc, #256]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a62:	4b3f      	ldr	r3, [pc, #252]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a64:	2101      	movs	r1, #1
 8005a66:	430a      	orrs	r2, r1
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6a:	f7fe fdaf 	bl	80045cc <HAL_GetTick>
 8005a6e:	0003      	movs	r3, r0
 8005a70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fe fdaa 	bl	80045cc <HAL_GetTick>
 8005a78:	0002      	movs	r2, r0
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e1e1      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a86:	4b36      	ldr	r3, [pc, #216]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d0f1      	beq.n	8005a74 <HAL_RCC_OscConfig+0x248>
 8005a90:	e018      	b.n	8005ac4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a92:	4b33      	ldr	r3, [pc, #204]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a96:	4b32      	ldr	r3, [pc, #200]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005a98:	2101      	movs	r1, #1
 8005a9a:	438a      	bics	r2, r1
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9e:	f7fe fd95 	bl	80045cc <HAL_GetTick>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7fe fd90 	bl	80045cc <HAL_GetTick>
 8005aac:	0002      	movs	r2, r0
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e1c7      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aba:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2202      	movs	r2, #2
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d1f1      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2204      	movs	r2, #4
 8005aca:	4013      	ands	r3, r2
 8005acc:	d100      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x2a4>
 8005ace:	e0b5      	b.n	8005c3c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad0:	201f      	movs	r0, #31
 8005ad2:	183b      	adds	r3, r7, r0
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad8:	4b21      	ldr	r3, [pc, #132]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	055b      	lsls	r3, r3, #21
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d110      	bne.n	8005b06 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae4:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	0549      	lsls	r1, r1, #21
 8005aee:	430a      	orrs	r2, r1
 8005af0:	61da      	str	r2, [r3, #28]
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	055b      	lsls	r3, r3, #21
 8005afa:	4013      	ands	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b00:	183b      	adds	r3, r7, r0
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b06:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <HAL_RCC_OscConfig+0x340>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d11a      	bne.n	8005b48 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b12:	4b16      	ldr	r3, [pc, #88]	; (8005b6c <HAL_RCC_OscConfig+0x340>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <HAL_RCC_OscConfig+0x340>)
 8005b18:	2180      	movs	r1, #128	; 0x80
 8005b1a:	0049      	lsls	r1, r1, #1
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b20:	f7fe fd54 	bl	80045cc <HAL_GetTick>
 8005b24:	0003      	movs	r3, r0
 8005b26:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2a:	f7fe fd4f 	bl	80045cc <HAL_GetTick>
 8005b2e:	0002      	movs	r2, r0
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b64      	cmp	r3, #100	; 0x64
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e186      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCC_OscConfig+0x340>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4013      	ands	r3, r2
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10f      	bne.n	8005b70 <HAL_RCC_OscConfig+0x344>
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <HAL_RCC_OscConfig+0x334>)
 8005b56:	2101      	movs	r1, #1
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	621a      	str	r2, [r3, #32]
 8005b5c:	e036      	b.n	8005bcc <HAL_RCC_OscConfig+0x3a0>
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	40021000 	.word	0x40021000
 8005b64:	fffeffff 	.word	0xfffeffff
 8005b68:	fffbffff 	.word	0xfffbffff
 8005b6c:	40007000 	.word	0x40007000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10c      	bne.n	8005b92 <HAL_RCC_OscConfig+0x366>
 8005b78:	4bb6      	ldr	r3, [pc, #728]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005b7a:	6a1a      	ldr	r2, [r3, #32]
 8005b7c:	4bb5      	ldr	r3, [pc, #724]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005b7e:	2101      	movs	r1, #1
 8005b80:	438a      	bics	r2, r1
 8005b82:	621a      	str	r2, [r3, #32]
 8005b84:	4bb3      	ldr	r3, [pc, #716]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	4bb2      	ldr	r3, [pc, #712]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	438a      	bics	r2, r1
 8005b8e:	621a      	str	r2, [r3, #32]
 8005b90:	e01c      	b.n	8005bcc <HAL_RCC_OscConfig+0x3a0>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	d10c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x388>
 8005b9a:	4bae      	ldr	r3, [pc, #696]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	4bad      	ldr	r3, [pc, #692]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	621a      	str	r2, [r3, #32]
 8005ba6:	4bab      	ldr	r3, [pc, #684]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	4baa      	ldr	r3, [pc, #680]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005bac:	2101      	movs	r1, #1
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	621a      	str	r2, [r3, #32]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCC_OscConfig+0x3a0>
 8005bb4:	4ba7      	ldr	r3, [pc, #668]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	4ba6      	ldr	r3, [pc, #664]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005bba:	2101      	movs	r1, #1
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	621a      	str	r2, [r3, #32]
 8005bc0:	4ba4      	ldr	r3, [pc, #656]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	4ba3      	ldr	r3, [pc, #652]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	438a      	bics	r2, r1
 8005bca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d014      	beq.n	8005bfe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd4:	f7fe fcfa 	bl	80045cc <HAL_GetTick>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bdc:	e009      	b.n	8005bf2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bde:	f7fe fcf5 	bl	80045cc <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	4a9b      	ldr	r2, [pc, #620]	; (8005e58 <HAL_RCC_OscConfig+0x62c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e12b      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf2:	4b98      	ldr	r3, [pc, #608]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x3b2>
 8005bfc:	e013      	b.n	8005c26 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfe:	f7fe fce5 	bl	80045cc <HAL_GetTick>
 8005c02:	0003      	movs	r3, r0
 8005c04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c06:	e009      	b.n	8005c1c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c08:	f7fe fce0 	bl	80045cc <HAL_GetTick>
 8005c0c:	0002      	movs	r2, r0
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	4a91      	ldr	r2, [pc, #580]	; (8005e58 <HAL_RCC_OscConfig+0x62c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e116      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c1c:	4b8d      	ldr	r3, [pc, #564]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	2202      	movs	r2, #2
 8005c22:	4013      	ands	r3, r2
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c26:	231f      	movs	r3, #31
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d105      	bne.n	8005c3c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c30:	4b88      	ldr	r3, [pc, #544]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	4b87      	ldr	r3, [pc, #540]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c36:	4989      	ldr	r1, [pc, #548]	; (8005e5c <HAL_RCC_OscConfig+0x630>)
 8005c38:	400a      	ands	r2, r1
 8005c3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2210      	movs	r2, #16
 8005c42:	4013      	ands	r3, r2
 8005c44:	d063      	beq.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d12a      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005c4e:	4b81      	ldr	r3, [pc, #516]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c52:	4b80      	ldr	r3, [pc, #512]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c54:	2104      	movs	r1, #4
 8005c56:	430a      	orrs	r2, r1
 8005c58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005c5a:	4b7e      	ldr	r3, [pc, #504]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5e:	4b7d      	ldr	r3, [pc, #500]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c60:	2101      	movs	r1, #1
 8005c62:	430a      	orrs	r2, r1
 8005c64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c66:	f7fe fcb1 	bl	80045cc <HAL_GetTick>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005c70:	f7fe fcac 	bl	80045cc <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0e3      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c82:	4b74      	ldr	r3, [pc, #464]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	2202      	movs	r2, #2
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d0f1      	beq.n	8005c70 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005c8c:	4b71      	ldr	r3, [pc, #452]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	22f8      	movs	r2, #248	; 0xf8
 8005c92:	4393      	bics	r3, r2
 8005c94:	0019      	movs	r1, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	00da      	lsls	r2, r3, #3
 8005c9c:	4b6d      	ldr	r3, [pc, #436]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8005ca2:	e034      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	3305      	adds	r3, #5
 8005caa:	d111      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005cac:	4b69      	ldr	r3, [pc, #420]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb0:	4b68      	ldr	r3, [pc, #416]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	438a      	bics	r2, r1
 8005cb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005cb8:	4b66      	ldr	r3, [pc, #408]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	22f8      	movs	r2, #248	; 0xf8
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	00da      	lsls	r2, r3, #3
 8005cc8:	4b62      	ldr	r3, [pc, #392]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8005cce:	e01e      	b.n	8005d0e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005cd0:	4b60      	ldr	r3, [pc, #384]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd4:	4b5f      	ldr	r3, [pc, #380]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005cdc:	4b5d      	ldr	r3, [pc, #372]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce0:	4b5c      	ldr	r3, [pc, #368]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	438a      	bics	r2, r1
 8005ce6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce8:	f7fe fc70 	bl	80045cc <HAL_GetTick>
 8005cec:	0003      	movs	r3, r0
 8005cee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005cf2:	f7fe fc6b 	bl	80045cc <HAL_GetTick>
 8005cf6:	0002      	movs	r2, r0
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e0a2      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005d04:	4b53      	ldr	r3, [pc, #332]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	2202      	movs	r2, #2
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d1f1      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d100      	bne.n	8005d18 <HAL_RCC_OscConfig+0x4ec>
 8005d16:	e097      	b.n	8005e48 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d18:	4b4e      	ldr	r3, [pc, #312]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	220c      	movs	r2, #12
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d100      	bne.n	8005d26 <HAL_RCC_OscConfig+0x4fa>
 8005d24:	e06b      	b.n	8005dfe <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d14c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2e:	4b49      	ldr	r3, [pc, #292]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b48      	ldr	r3, [pc, #288]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d34:	494a      	ldr	r1, [pc, #296]	; (8005e60 <HAL_RCC_OscConfig+0x634>)
 8005d36:	400a      	ands	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3a:	f7fe fc47 	bl	80045cc <HAL_GetTick>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fe fc42 	bl	80045cc <HAL_GetTick>
 8005d48:	0002      	movs	r2, r0
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e079      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d56:	4b3f      	ldr	r3, [pc, #252]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	049b      	lsls	r3, r3, #18
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d62:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	220f      	movs	r2, #15
 8005d68:	4393      	bics	r3, r2
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d72:	430a      	orrs	r2, r1
 8005d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d76:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4a3a      	ldr	r2, [pc, #232]	; (8005e64 <HAL_RCC_OscConfig+0x638>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	4b32      	ldr	r3, [pc, #200]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d90:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b2f      	ldr	r3, [pc, #188]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005d96:	2180      	movs	r1, #128	; 0x80
 8005d98:	0449      	lsls	r1, r1, #17
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9e:	f7fe fc15 	bl	80045cc <HAL_GetTick>
 8005da2:	0003      	movs	r3, r0
 8005da4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fe fc10 	bl	80045cc <HAL_GetTick>
 8005dac:	0002      	movs	r2, r0
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e047      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dba:	4b26      	ldr	r3, [pc, #152]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	2380      	movs	r3, #128	; 0x80
 8005dc0:	049b      	lsls	r3, r3, #18
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x57c>
 8005dc6:	e03f      	b.n	8005e48 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc8:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b21      	ldr	r3, [pc, #132]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005dce:	4924      	ldr	r1, [pc, #144]	; (8005e60 <HAL_RCC_OscConfig+0x634>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fe fbfa 	bl	80045cc <HAL_GetTick>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fe fbf5 	bl	80045cc <HAL_GetTick>
 8005de2:	0002      	movs	r2, r0
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e02c      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df0:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	049b      	lsls	r3, r3, #18
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d1f0      	bne.n	8005dde <HAL_RCC_OscConfig+0x5b2>
 8005dfc:	e024      	b.n	8005e48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e01f      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005e10:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <HAL_RCC_OscConfig+0x628>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	025b      	lsls	r3, r3, #9
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d10e      	bne.n	8005e44 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	220f      	movs	r2, #15
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d107      	bne.n	8005e44 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	23f0      	movs	r3, #240	; 0xf0
 8005e38:	039b      	lsls	r3, r3, #14
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d001      	beq.n	8005e48 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b008      	add	sp, #32
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	40021000 	.word	0x40021000
 8005e58:	00001388 	.word	0x00001388
 8005e5c:	efffffff 	.word	0xefffffff
 8005e60:	feffffff 	.word	0xfeffffff
 8005e64:	ffc2ffff 	.word	0xffc2ffff

08005e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0b3      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b5b      	ldr	r3, [pc, #364]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d911      	bls.n	8005eae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b58      	ldr	r3, [pc, #352]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	4393      	bics	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	4b55      	ldr	r3, [pc, #340]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9c:	4b53      	ldr	r3, [pc, #332]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d001      	beq.n	8005eae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e09a      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d015      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d006      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ec2:	4b4b      	ldr	r3, [pc, #300]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005ec8:	21e0      	movs	r1, #224	; 0xe0
 8005eca:	00c9      	lsls	r1, r1, #3
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed0:	4b47      	ldr	r3, [pc, #284]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	22f0      	movs	r2, #240	; 0xf0
 8005ed6:	4393      	bics	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	4b44      	ldr	r3, [pc, #272]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	4013      	ands	r3, r2
 8005eec:	d040      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b3e      	ldr	r3, [pc, #248]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	2380      	movs	r3, #128	; 0x80
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	4013      	ands	r3, r2
 8005f00:	d114      	bne.n	8005f2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e06e      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0e:	4b38      	ldr	r3, [pc, #224]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	2380      	movs	r3, #128	; 0x80
 8005f14:	049b      	lsls	r3, r3, #18
 8005f16:	4013      	ands	r3, r2
 8005f18:	d108      	bne.n	8005f2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e062      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1e:	4b34      	ldr	r3, [pc, #208]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2202      	movs	r2, #2
 8005f24:	4013      	ands	r3, r2
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e05b      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f2c:	4b30      	ldr	r3, [pc, #192]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2203      	movs	r2, #3
 8005f32:	4393      	bics	r3, r2
 8005f34:	0019      	movs	r1, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f40:	f7fe fb44 	bl	80045cc <HAL_GetTick>
 8005f44:	0003      	movs	r3, r0
 8005f46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f48:	e009      	b.n	8005f5e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f4a:	f7fe fb3f 	bl	80045cc <HAL_GetTick>
 8005f4e:	0002      	movs	r2, r0
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <HAL_RCC_ClockConfig+0x18c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e042      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	220c      	movs	r2, #12
 8005f64:	401a      	ands	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d1ec      	bne.n	8005f4a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f70:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2201      	movs	r2, #1
 8005f76:	4013      	ands	r3, r2
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d211      	bcs.n	8005fa2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2201      	movs	r2, #1
 8005f84:	4393      	bics	r3, r2
 8005f86:	0019      	movs	r1, r3
 8005f88:	4b18      	ldr	r3, [pc, #96]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f90:	4b16      	ldr	r3, [pc, #88]	; (8005fec <HAL_RCC_ClockConfig+0x184>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2201      	movs	r2, #1
 8005f96:	4013      	ands	r3, r2
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d001      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e020      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005fac:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4a11      	ldr	r2, [pc, #68]	; (8005ff8 <HAL_RCC_ClockConfig+0x190>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	0019      	movs	r1, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005fc0:	f000 f820 	bl	8006004 <HAL_RCC_GetSysClockFreq>
 8005fc4:	0001      	movs	r1, r0
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <HAL_RCC_ClockConfig+0x188>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	220f      	movs	r2, #15
 8005fce:	4013      	ands	r3, r2
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <HAL_RCC_ClockConfig+0x194>)
 8005fd2:	5cd3      	ldrb	r3, [r2, r3]
 8005fd4:	000a      	movs	r2, r1
 8005fd6:	40da      	lsrs	r2, r3
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_RCC_ClockConfig+0x198>)
 8005fda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005fdc:	2003      	movs	r0, #3
 8005fde:	f7fe faaf 	bl	8004540 <HAL_InitTick>
  
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b004      	add	sp, #16
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40022000 	.word	0x40022000
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	00001388 	.word	0x00001388
 8005ff8:	fffff8ff 	.word	0xfffff8ff
 8005ffc:	08012b70 	.word	0x08012b70
 8006000:	20000000 	.word	0x20000000

08006004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b08f      	sub	sp, #60	; 0x3c
 8006008:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800600a:	2314      	movs	r3, #20
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	4a2a      	ldr	r2, [pc, #168]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006010:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006012:	c313      	stmia	r3!, {r0, r1, r4}
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	4a28      	ldr	r2, [pc, #160]	; (80060bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800601c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800601e:	c313      	stmia	r3!, {r0, r1, r4}
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006028:	2300      	movs	r3, #0
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
 800602c:	2300      	movs	r3, #0
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
 8006030:	2300      	movs	r3, #0
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006038:	4b21      	ldr	r3, [pc, #132]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	220c      	movs	r2, #12
 8006042:	4013      	ands	r3, r2
 8006044:	2b04      	cmp	r3, #4
 8006046:	d002      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x4a>
 8006048:	2b08      	cmp	r3, #8
 800604a:	d003      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x50>
 800604c:	e02c      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800604e:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006050:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006052:	e02c      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	0c9b      	lsrs	r3, r3, #18
 8006058:	220f      	movs	r2, #15
 800605a:	4013      	ands	r3, r2
 800605c:	2214      	movs	r2, #20
 800605e:	18ba      	adds	r2, r7, r2
 8006060:	5cd3      	ldrb	r3, [r2, r3]
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006064:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	220f      	movs	r2, #15
 800606a:	4013      	ands	r3, r2
 800606c:	1d3a      	adds	r2, r7, #4
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	025b      	lsls	r3, r3, #9
 8006078:	4013      	ands	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800607c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800607e:	4811      	ldr	r0, [pc, #68]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006080:	f7fa f866 	bl	8000150 <__udivsi3>
 8006084:	0003      	movs	r3, r0
 8006086:	001a      	movs	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	4353      	muls	r3, r2
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
 800608e:	e008      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006092:	480c      	ldr	r0, [pc, #48]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006094:	f7fa f85c 	bl	8000150 <__udivsi3>
 8006098:	0003      	movs	r3, r0
 800609a:	001a      	movs	r2, r3
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	4353      	muls	r3, r2
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060a6:	e002      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060a8:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060ac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b00f      	add	sp, #60	; 0x3c
 80060b6:	bd90      	pop	{r4, r7, pc}
 80060b8:	080129cc 	.word	0x080129cc
 80060bc:	080129dc 	.word	0x080129dc
 80060c0:	40021000 	.word	0x40021000
 80060c4:	007a1200 	.word	0x007a1200

080060c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060cc:	4b02      	ldr	r3, [pc, #8]	; (80060d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	0018      	movs	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	20000000 	.word	0x20000000

080060dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80060e0:	f7ff fff2 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 80060e4:	0001      	movs	r1, r0
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	2207      	movs	r2, #7
 80060ee:	4013      	ands	r3, r2
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060f2:	5cd3      	ldrb	r3, [r2, r3]
 80060f4:	40d9      	lsrs	r1, r3
 80060f6:	000b      	movs	r3, r1
}    
 80060f8:	0018      	movs	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	40021000 	.word	0x40021000
 8006104:	08012b80 	.word	0x08012b80

08006108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	025b      	lsls	r3, r3, #9
 8006120:	4013      	ands	r3, r2
 8006122:	d100      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006124:	e08e      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006126:	2017      	movs	r0, #23
 8006128:	183b      	adds	r3, r7, r0
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612e:	4b57      	ldr	r3, [pc, #348]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	055b      	lsls	r3, r3, #21
 8006136:	4013      	ands	r3, r2
 8006138:	d110      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	4b54      	ldr	r3, [pc, #336]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800613c:	69da      	ldr	r2, [r3, #28]
 800613e:	4b53      	ldr	r3, [pc, #332]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	0549      	lsls	r1, r1, #21
 8006144:	430a      	orrs	r2, r1
 8006146:	61da      	str	r2, [r3, #28]
 8006148:	4b50      	ldr	r3, [pc, #320]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	055b      	lsls	r3, r3, #21
 8006150:	4013      	ands	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006156:	183b      	adds	r3, r7, r0
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615c:	4b4c      	ldr	r3, [pc, #304]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4013      	ands	r3, r2
 8006166:	d11a      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006168:	4b49      	ldr	r3, [pc, #292]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b48      	ldr	r3, [pc, #288]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	0049      	lsls	r1, r1, #1
 8006172:	430a      	orrs	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006176:	f7fe fa29 	bl	80045cc <HAL_GetTick>
 800617a:	0003      	movs	r3, r0
 800617c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617e:	e008      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006180:	f7fe fa24 	bl	80045cc <HAL_GetTick>
 8006184:	0002      	movs	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b64      	cmp	r3, #100	; 0x64
 800618c:	d901      	bls.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e077      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006192:	4b3f      	ldr	r3, [pc, #252]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4013      	ands	r3, r2
 800619c:	d0f0      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800619e:	4b3b      	ldr	r3, [pc, #236]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	23c0      	movs	r3, #192	; 0xc0
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4013      	ands	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d034      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	23c0      	movs	r3, #192	; 0xc0
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4013      	ands	r3, r2
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d02c      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c0:	4b32      	ldr	r3, [pc, #200]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	4a33      	ldr	r2, [pc, #204]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ca:	4b30      	ldr	r3, [pc, #192]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	4b2f      	ldr	r3, [pc, #188]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061d0:	2180      	movs	r1, #128	; 0x80
 80061d2:	0249      	lsls	r1, r1, #9
 80061d4:	430a      	orrs	r2, r1
 80061d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d8:	4b2c      	ldr	r3, [pc, #176]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061de:	492e      	ldr	r1, [pc, #184]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80061e0:	400a      	ands	r2, r1
 80061e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061e4:	4b29      	ldr	r3, [pc, #164]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	4013      	ands	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fe f9eb 	bl	80045cc <HAL_GetTick>
 80061f6:	0003      	movs	r3, r0
 80061f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fa:	e009      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fc:	f7fe f9e6 	bl	80045cc <HAL_GetTick>
 8006200:	0002      	movs	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	4a25      	ldr	r2, [pc, #148]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d901      	bls.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e038      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006210:	4b1e      	ldr	r3, [pc, #120]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	2202      	movs	r2, #2
 8006216:	4013      	ands	r3, r2
 8006218:	d0f0      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621a:	4b1c      	ldr	r3, [pc, #112]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006220:	4013      	ands	r3, r2
 8006222:	0019      	movs	r1, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	4b18      	ldr	r3, [pc, #96]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800622a:	430a      	orrs	r2, r1
 800622c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800622e:	2317      	movs	r3, #23
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800623e:	4918      	ldr	r1, [pc, #96]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006240:	400a      	ands	r2, r1
 8006242:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2201      	movs	r2, #1
 800624a:	4013      	ands	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800624e:	4b0f      	ldr	r3, [pc, #60]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	2203      	movs	r2, #3
 8006254:	4393      	bics	r3, r2
 8006256:	0019      	movs	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800625e:	430a      	orrs	r2, r1
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2220      	movs	r2, #32
 8006268:	4013      	ands	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	2210      	movs	r2, #16
 8006272:	4393      	bics	r3, r2
 8006274:	0019      	movs	r1, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	4b04      	ldr	r3, [pc, #16]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800627c:	430a      	orrs	r2, r1
 800627e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b006      	add	sp, #24
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	40021000 	.word	0x40021000
 8006290:	40007000 	.word	0x40007000
 8006294:	fffffcff 	.word	0xfffffcff
 8006298:	fffeffff 	.word	0xfffeffff
 800629c:	00001388 	.word	0x00001388
 80062a0:	efffffff 	.word	0xefffffff

080062a4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e081      	b.n	80063ba <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	7f5b      	ldrb	r3, [r3, #29]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7fd fe7f 	bl	8003fcc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	22ca      	movs	r2, #202	; 0xca
 80062da:	625a      	str	r2, [r3, #36]	; 0x24
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2253      	movs	r2, #83	; 0x53
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	0018      	movs	r0, r3
 80062e8:	f000 faa9 	bl	800683e <RTC_EnterInitMode>
 80062ec:	1e03      	subs	r3, r0, #0
 80062ee:	d008      	beq.n	8006302 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2204      	movs	r2, #4
 80062fc:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e05b      	b.n	80063ba <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	492d      	ldr	r1, [pc, #180]	; (80063c4 <HAL_RTC_Init+0x120>)
 800630e:	400a      	ands	r2, r1
 8006310:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6899      	ldr	r1, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	68d2      	ldr	r2, [r2, #12]
 8006338:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6919      	ldr	r1, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	041a      	lsls	r2, r3, #16
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	438a      	bics	r2, r1
 800635c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2220      	movs	r2, #32
 8006366:	4013      	ands	r3, r2
 8006368:	d10e      	bne.n	8006388 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0018      	movs	r0, r3
 800636e:	f000 fa3d 	bl	80067ec <HAL_RTC_WaitForSynchro>
 8006372:	1e03      	subs	r3, r0, #0
 8006374:	d008      	beq.n	8006388 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	22ff      	movs	r2, #255	; 0xff
 800637c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2204      	movs	r2, #4
 8006382:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e018      	b.n	80063ba <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	490d      	ldr	r1, [pc, #52]	; (80063c8 <HAL_RTC_Init+0x124>)
 8006394:	400a      	ands	r2, r1
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	22ff      	movs	r2, #255	; 0xff
 80063b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
  }
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b002      	add	sp, #8
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	ff8fffbf 	.word	0xff8fffbf
 80063c8:	fffbffff 	.word	0xfffbffff

080063cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	7f1b      	ldrb	r3, [r3, #28]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_RTC_SetTime+0x1c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e0a5      	b.n	8006534 <HAL_RTC_SetTime+0x168>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2202      	movs	r2, #2
 80063f2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d125      	bne.n	8006446 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2240      	movs	r2, #64	; 0x40
 8006402:	4013      	ands	r3, r2
 8006404:	d102      	bne.n	800640c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	0018      	movs	r0, r3
 8006412:	f000 fa40 	bl	8006896 <RTC_ByteToBcd2>
 8006416:	0003      	movs	r3, r0
 8006418:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	0018      	movs	r0, r3
 8006420:	f000 fa39 	bl	8006896 <RTC_ByteToBcd2>
 8006424:	0003      	movs	r3, r0
 8006426:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006428:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	789b      	ldrb	r3, [r3, #2]
 800642e:	0018      	movs	r0, r3
 8006430:	f000 fa31 	bl	8006896 <RTC_ByteToBcd2>
 8006434:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006436:	0022      	movs	r2, r4
 8006438:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	78db      	ldrb	r3, [r3, #3]
 800643e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e017      	b.n	8006476 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	4013      	ands	r3, r2
 8006450:	d102      	bne.n	8006458 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006464:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800646a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	22ca      	movs	r2, #202	; 0xca
 800647c:	625a      	str	r2, [r3, #36]	; 0x24
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2253      	movs	r2, #83	; 0x53
 8006484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	0018      	movs	r0, r3
 800648a:	f000 f9d8 	bl	800683e <RTC_EnterInitMode>
 800648e:	1e03      	subs	r3, r0, #0
 8006490:	d00b      	beq.n	80064aa <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	22ff      	movs	r2, #255	; 0xff
 8006498:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2204      	movs	r2, #4
 800649e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e044      	b.n	8006534 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4922      	ldr	r1, [pc, #136]	; (800653c <HAL_RTC_SetTime+0x170>)
 80064b2:	400a      	ands	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	491f      	ldr	r1, [pc, #124]	; (8006540 <HAL_RTC_SetTime+0x174>)
 80064c2:	400a      	ands	r2, r1
 80064c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6899      	ldr	r1, [r3, #8]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2180      	movs	r1, #128	; 0x80
 80064ea:	438a      	bics	r2, r1
 80064ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2220      	movs	r2, #32
 80064f6:	4013      	ands	r3, r2
 80064f8:	d111      	bne.n	800651e <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	0018      	movs	r0, r3
 80064fe:	f000 f975 	bl	80067ec <HAL_RTC_WaitForSynchro>
 8006502:	1e03      	subs	r3, r0, #0
 8006504:	d00b      	beq.n	800651e <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2204      	movs	r2, #4
 8006512:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e00a      	b.n	8006534 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	22ff      	movs	r2, #255	; 0xff
 8006524:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006532:	2300      	movs	r3, #0
  }
}
 8006534:	0018      	movs	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	b007      	add	sp, #28
 800653a:	bd90      	pop	{r4, r7, pc}
 800653c:	007f7f7f 	.word	0x007f7f7f
 8006540:	fffbffff 	.word	0xfffbffff

08006544 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	045b      	lsls	r3, r3, #17
 8006566:	0c5a      	lsrs	r2, r3, #17
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a22      	ldr	r2, [pc, #136]	; (80065fc <HAL_RTC_GetTime+0xb8>)
 8006574:	4013      	ands	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	0c1b      	lsrs	r3, r3, #16
 800657c:	b2db      	uxtb	r3, r3
 800657e:	223f      	movs	r2, #63	; 0x3f
 8006580:	4013      	ands	r3, r2
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b2db      	uxtb	r3, r3
 800658e:	227f      	movs	r2, #127	; 0x7f
 8006590:	4013      	ands	r3, r2
 8006592:	b2da      	uxtb	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	227f      	movs	r2, #127	; 0x7f
 800659e:	4013      	ands	r3, r2
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2240      	movs	r2, #64	; 0x40
 80065ae:	4013      	ands	r3, r2
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d11a      	bne.n	80065f2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f000 f989 	bl	80068d8 <RTC_Bcd2ToByte>
 80065c6:	0003      	movs	r3, r0
 80065c8:	001a      	movs	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 f980 	bl	80068d8 <RTC_Bcd2ToByte>
 80065d8:	0003      	movs	r3, r0
 80065da:	001a      	movs	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	789b      	ldrb	r3, [r3, #2]
 80065e4:	0018      	movs	r0, r3
 80065e6:	f000 f977 	bl	80068d8 <RTC_Bcd2ToByte>
 80065ea:	0003      	movs	r3, r0
 80065ec:	001a      	movs	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	0018      	movs	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b006      	add	sp, #24
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	007f7f7f 	.word	0x007f7f7f

08006600 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	7f1b      	ldrb	r3, [r3, #28]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_RTC_SetDate+0x1c>
 8006618:	2302      	movs	r3, #2
 800661a:	e091      	b.n	8006740 <HAL_RTC_SetDate+0x140>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2202      	movs	r2, #2
 8006626:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10e      	bne.n	800664c <HAL_RTC_SetDate+0x4c>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	001a      	movs	r2, r3
 8006634:	2310      	movs	r3, #16
 8006636:	4013      	ands	r3, r2
 8006638:	d008      	beq.n	800664c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2210      	movs	r2, #16
 8006640:	4393      	bics	r3, r2
 8006642:	b2db      	uxtb	r3, r3
 8006644:	330a      	adds	r3, #10
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d11c      	bne.n	800668c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	78db      	ldrb	r3, [r3, #3]
 8006656:	0018      	movs	r0, r3
 8006658:	f000 f91d 	bl	8006896 <RTC_ByteToBcd2>
 800665c:	0003      	movs	r3, r0
 800665e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	0018      	movs	r0, r3
 8006666:	f000 f916 	bl	8006896 <RTC_ByteToBcd2>
 800666a:	0003      	movs	r3, r0
 800666c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800666e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	789b      	ldrb	r3, [r3, #2]
 8006674:	0018      	movs	r0, r3
 8006676:	f000 f90e 	bl	8006896 <RTC_ByteToBcd2>
 800667a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800667c:	0022      	movs	r2, r4
 800667e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e00e      	b.n	80066aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	78db      	ldrb	r3, [r3, #3]
 8006690:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006698:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800669e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	22ca      	movs	r2, #202	; 0xca
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2253      	movs	r2, #83	; 0x53
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	0018      	movs	r0, r3
 80066be:	f000 f8be 	bl	800683e <RTC_EnterInitMode>
 80066c2:	1e03      	subs	r3, r0, #0
 80066c4:	d00b      	beq.n	80066de <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	22ff      	movs	r2, #255	; 0xff
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2204      	movs	r2, #4
 80066d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e030      	b.n	8006740 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4918      	ldr	r1, [pc, #96]	; (8006748 <HAL_RTC_SetDate+0x148>)
 80066e6:	400a      	ands	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2180      	movs	r1, #128	; 0x80
 80066f6:	438a      	bics	r2, r1
 80066f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2220      	movs	r2, #32
 8006702:	4013      	ands	r3, r2
 8006704:	d111      	bne.n	800672a <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	0018      	movs	r0, r3
 800670a:	f000 f86f 	bl	80067ec <HAL_RTC_WaitForSynchro>
 800670e:	1e03      	subs	r3, r0, #0
 8006710:	d00b      	beq.n	800672a <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	22ff      	movs	r2, #255	; 0xff
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2204      	movs	r2, #4
 800671e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e00a      	b.n	8006740 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	22ff      	movs	r2, #255	; 0xff
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800673e:	2300      	movs	r3, #0
  }
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b007      	add	sp, #28
 8006746:	bd90      	pop	{r4, r7, pc}
 8006748:	00ffff3f 	.word	0x00ffff3f

0800674c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <HAL_RTC_GetDate+0x9c>)
 8006764:	4013      	ands	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	b2da      	uxtb	r2, r3
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	0a1b      	lsrs	r3, r3, #8
 8006776:	b2db      	uxtb	r3, r3
 8006778:	221f      	movs	r2, #31
 800677a:	4013      	ands	r3, r2
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	223f      	movs	r2, #63	; 0x3f
 8006788:	4013      	ands	r3, r2
 800678a:	b2da      	uxtb	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	0b5b      	lsrs	r3, r3, #13
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2207      	movs	r2, #7
 8006798:	4013      	ands	r3, r2
 800679a:	b2da      	uxtb	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11a      	bne.n	80067dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	78db      	ldrb	r3, [r3, #3]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f000 f894 	bl	80068d8 <RTC_Bcd2ToByte>
 80067b0:	0003      	movs	r3, r0
 80067b2:	001a      	movs	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	0018      	movs	r0, r3
 80067be:	f000 f88b 	bl	80068d8 <RTC_Bcd2ToByte>
 80067c2:	0003      	movs	r3, r0
 80067c4:	001a      	movs	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 f882 	bl	80068d8 <RTC_Bcd2ToByte>
 80067d4:	0003      	movs	r3, r0
 80067d6:	001a      	movs	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b006      	add	sp, #24
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	00ffff3f 	.word	0x00ffff3f

080067ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	21a0      	movs	r1, #160	; 0xa0
 8006804:	438a      	bics	r2, r1
 8006806:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006808:	f7fd fee0 	bl	80045cc <HAL_GetTick>
 800680c:	0003      	movs	r3, r0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006810:	e00a      	b.n	8006828 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006812:	f7fd fedb 	bl	80045cc <HAL_GetTick>
 8006816:	0002      	movs	r2, r0
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	1ad2      	subs	r2, r2, r3
 800681c:	23fa      	movs	r3, #250	; 0xfa
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	429a      	cmp	r2, r3
 8006822:	d901      	bls.n	8006828 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e006      	b.n	8006836 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	4013      	ands	r3, r2
 8006832:	d0ee      	beq.n	8006812 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	0018      	movs	r0, r3
 8006838:	46bd      	mov	sp, r7
 800683a:	b004      	add	sp, #16
 800683c:	bd80      	pop	{r7, pc}

0800683e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	2240      	movs	r2, #64	; 0x40
 8006852:	4013      	ands	r3, r2
 8006854:	d11a      	bne.n	800688c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2201      	movs	r2, #1
 800685c:	4252      	negs	r2, r2
 800685e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006860:	f7fd feb4 	bl	80045cc <HAL_GetTick>
 8006864:	0003      	movs	r3, r0
 8006866:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006868:	e00a      	b.n	8006880 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800686a:	f7fd feaf 	bl	80045cc <HAL_GetTick>
 800686e:	0002      	movs	r2, r0
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1ad2      	subs	r2, r2, r3
 8006874:	23fa      	movs	r3, #250	; 0xfa
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	429a      	cmp	r2, r3
 800687a:	d901      	bls.n	8006880 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e006      	b.n	800688e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2240      	movs	r2, #64	; 0x40
 8006888:	4013      	ands	r3, r2
 800688a:	d0ee      	beq.n	800686a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	0018      	movs	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	b004      	add	sp, #16
 8006894:	bd80      	pop	{r7, pc}

08006896 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	0002      	movs	r2, r0
 800689e:	1dfb      	adds	r3, r7, #7
 80068a0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80068a6:	e007      	b.n	80068b8 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80068ae:	1dfb      	adds	r3, r7, #7
 80068b0:	1dfa      	adds	r2, r7, #7
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	3a0a      	subs	r2, #10
 80068b6:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80068b8:	1dfb      	adds	r3, r7, #7
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d8f3      	bhi.n	80068a8 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	1dfb      	adds	r3, r7, #7
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	b2db      	uxtb	r3, r3
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b004      	add	sp, #16
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	0002      	movs	r2, r0
 80068e0:	1dfb      	adds	r3, r7, #7
 80068e2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80068e8:	1dfb      	adds	r3, r7, #7
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	001a      	movs	r2, r3
 80068f2:	0013      	movs	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	189b      	adds	r3, r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80068fc:	1dfb      	adds	r3, r7, #7
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	220f      	movs	r2, #15
 8006902:	4013      	ands	r3, r2
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	18d3      	adds	r3, r2, r3
 800690c:	b2db      	uxtb	r3, r3
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	b004      	add	sp, #16
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e0a8      	b.n	8006a7c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	2382      	movs	r3, #130	; 0x82
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	429a      	cmp	r2, r3
 800693c:	d009      	beq.n	8006952 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	61da      	str	r2, [r3, #28]
 8006944:	e005      	b.n	8006952 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	225d      	movs	r2, #93	; 0x5d
 800695c:	5c9b      	ldrb	r3, [r3, r2]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d107      	bne.n	8006974 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	225c      	movs	r2, #92	; 0x5c
 8006968:	2100      	movs	r1, #0
 800696a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	0018      	movs	r0, r3
 8006970:	f7fd fb44 	bl	8003ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	225d      	movs	r2, #93	; 0x5d
 8006978:	2102      	movs	r1, #2
 800697a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2140      	movs	r1, #64	; 0x40
 8006988:	438a      	bics	r2, r1
 800698a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	23e0      	movs	r3, #224	; 0xe0
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	429a      	cmp	r2, r3
 8006996:	d902      	bls.n	800699e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e002      	b.n	80069a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800699e:	2380      	movs	r3, #128	; 0x80
 80069a0:	015b      	lsls	r3, r3, #5
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	23f0      	movs	r3, #240	; 0xf0
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d008      	beq.n	80069c2 <HAL_SPI_Init+0xaa>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	23e0      	movs	r3, #224	; 0xe0
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d002      	beq.n	80069c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	2382      	movs	r3, #130	; 0x82
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	401a      	ands	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6899      	ldr	r1, [r3, #8]
 80069d0:	2384      	movs	r3, #132	; 0x84
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	400b      	ands	r3, r1
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2102      	movs	r1, #2
 80069de:	400b      	ands	r3, r1
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2101      	movs	r1, #1
 80069e8:	400b      	ands	r3, r1
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6999      	ldr	r1, [r3, #24]
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	400b      	ands	r3, r1
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	2138      	movs	r1, #56	; 0x38
 80069fe:	400b      	ands	r3, r1
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	2180      	movs	r1, #128	; 0x80
 8006a08:	400b      	ands	r3, r1
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	0011      	movs	r1, r2
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a12:	2380      	movs	r3, #128	; 0x80
 8006a14:	019b      	lsls	r3, r3, #6
 8006a16:	401a      	ands	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	2204      	movs	r2, #4
 8006a28:	401a      	ands	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	2110      	movs	r1, #16
 8006a30:	400b      	ands	r3, r1
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a38:	2108      	movs	r1, #8
 8006a3a:	400b      	ands	r3, r1
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68d9      	ldr	r1, [r3, #12]
 8006a42:	23f0      	movs	r3, #240	; 0xf0
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	400b      	ands	r3, r1
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	0011      	movs	r1, r2
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	2380      	movs	r3, #128	; 0x80
 8006a50:	015b      	lsls	r3, r3, #5
 8006a52:	401a      	ands	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4907      	ldr	r1, [pc, #28]	; (8006a84 <HAL_SPI_Init+0x16c>)
 8006a68:	400a      	ands	r2, r1
 8006a6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	225d      	movs	r2, #93	; 0x5d
 8006a76:	2101      	movs	r1, #1
 8006a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b004      	add	sp, #16
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	fffff7ff 	.word	0xfffff7ff

08006a88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	1dbb      	adds	r3, r7, #6
 8006a96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a98:	231f      	movs	r3, #31
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	225c      	movs	r2, #92	; 0x5c
 8006aa4:	5c9b      	ldrb	r3, [r3, r2]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_SPI_Transmit+0x26>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e140      	b.n	8006d30 <HAL_SPI_Transmit+0x2a8>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	225c      	movs	r2, #92	; 0x5c
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ab6:	f7fd fd89 	bl	80045cc <HAL_GetTick>
 8006aba:	0003      	movs	r3, r0
 8006abc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006abe:	2316      	movs	r3, #22
 8006ac0:	18fb      	adds	r3, r7, r3
 8006ac2:	1dba      	adds	r2, r7, #6
 8006ac4:	8812      	ldrh	r2, [r2, #0]
 8006ac6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	225d      	movs	r2, #93	; 0x5d
 8006acc:	5c9b      	ldrb	r3, [r3, r2]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d004      	beq.n	8006ade <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006ad4:	231f      	movs	r3, #31
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	2202      	movs	r2, #2
 8006ada:	701a      	strb	r2, [r3, #0]
    goto error;
 8006adc:	e11d      	b.n	8006d1a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_SPI_Transmit+0x64>
 8006ae4:	1dbb      	adds	r3, r7, #6
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006aec:	231f      	movs	r3, #31
 8006aee:	18fb      	adds	r3, r7, r3
 8006af0:	2201      	movs	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006af4:	e111      	b.n	8006d1a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	225d      	movs	r2, #93	; 0x5d
 8006afa:	2103      	movs	r1, #3
 8006afc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1dba      	adds	r2, r7, #6
 8006b0e:	8812      	ldrh	r2, [r2, #0]
 8006b10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1dba      	adds	r2, r7, #6
 8006b16:	8812      	ldrh	r2, [r2, #0]
 8006b18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2244      	movs	r2, #68	; 0x44
 8006b24:	2100      	movs	r1, #0
 8006b26:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2246      	movs	r2, #70	; 0x46
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d110      	bne.n	8006b6a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2140      	movs	r1, #64	; 0x40
 8006b54:	438a      	bics	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2180      	movs	r1, #128	; 0x80
 8006b64:	01c9      	lsls	r1, r1, #7
 8006b66:	430a      	orrs	r2, r1
 8006b68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2240      	movs	r2, #64	; 0x40
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d007      	beq.n	8006b88 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2140      	movs	r1, #64	; 0x40
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	23e0      	movs	r3, #224	; 0xe0
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d94e      	bls.n	8006c32 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <HAL_SPI_Transmit+0x11e>
 8006b9c:	2316      	movs	r3, #22
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d13f      	bne.n	8006c26 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	881a      	ldrh	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	1c9a      	adds	r2, r3, #2
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bca:	e02c      	b.n	8006c26 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d112      	bne.n	8006c00 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	881a      	ldrh	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bfe:	e012      	b.n	8006c26 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c00:	f7fd fce4 	bl	80045cc <HAL_GetTick>
 8006c04:	0002      	movs	r2, r0
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d802      	bhi.n	8006c16 <HAL_SPI_Transmit+0x18e>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	3301      	adds	r3, #1
 8006c14:	d102      	bne.n	8006c1c <HAL_SPI_Transmit+0x194>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006c1c:	231f      	movs	r3, #31
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	2203      	movs	r2, #3
 8006c22:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c24:	e079      	b.n	8006d1a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1cd      	bne.n	8006bcc <HAL_SPI_Transmit+0x144>
 8006c30:	e04f      	b.n	8006cd2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <HAL_SPI_Transmit+0x1bc>
 8006c3a:	2316      	movs	r3, #22
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d141      	bne.n	8006cc8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	7812      	ldrb	r2, [r2, #0]
 8006c50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006c6a:	e02d      	b.n	8006cc8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2202      	movs	r2, #2
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d113      	bne.n	8006ca2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ca0:	e012      	b.n	8006cc8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ca2:	f7fd fc93 	bl	80045cc <HAL_GetTick>
 8006ca6:	0002      	movs	r2, r0
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d802      	bhi.n	8006cb8 <HAL_SPI_Transmit+0x230>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	d102      	bne.n	8006cbe <HAL_SPI_Transmit+0x236>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006cbe:	231f      	movs	r3, #31
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	701a      	strb	r2, [r3, #0]
          goto error;
 8006cc6:	e028      	b.n	8006d1a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1cc      	bne.n	8006c6c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f000 fb2f 	bl	800733c <SPI_EndRxTxTransaction>
 8006cde:	1e03      	subs	r3, r0, #0
 8006ce0:	d002      	beq.n	8006ce8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006d0e:	231f      	movs	r3, #31
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	2201      	movs	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e000      	b.n	8006d1a <HAL_SPI_Transmit+0x292>
  }

error:
 8006d18:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	225d      	movs	r2, #93	; 0x5d
 8006d1e:	2101      	movs	r1, #1
 8006d20:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	225c      	movs	r2, #92	; 0x5c
 8006d26:	2100      	movs	r1, #0
 8006d28:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006d2a:	231f      	movs	r3, #31
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	781b      	ldrb	r3, [r3, #0]
}
 8006d30:	0018      	movs	r0, r3
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b008      	add	sp, #32
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	001a      	movs	r2, r3
 8006d46:	1cbb      	adds	r3, r7, #2
 8006d48:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d4e:	2323      	movs	r3, #35	; 0x23
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	225c      	movs	r2, #92	; 0x5c
 8006d5a:	5c9b      	ldrb	r3, [r3, r2]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x2c>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e1b5      	b.n	80070d0 <HAL_SPI_TransmitReceive+0x398>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	225c      	movs	r2, #92	; 0x5c
 8006d68:	2101      	movs	r1, #1
 8006d6a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d6c:	f7fd fc2e 	bl	80045cc <HAL_GetTick>
 8006d70:	0003      	movs	r3, r0
 8006d72:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d74:	201b      	movs	r0, #27
 8006d76:	183b      	adds	r3, r7, r0
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	215d      	movs	r1, #93	; 0x5d
 8006d7c:	5c52      	ldrb	r2, [r2, r1]
 8006d7e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d86:	2312      	movs	r3, #18
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	1cba      	adds	r2, r7, #2
 8006d8c:	8812      	ldrh	r2, [r2, #0]
 8006d8e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d90:	183b      	adds	r3, r7, r0
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d011      	beq.n	8006dbc <HAL_SPI_TransmitReceive+0x84>
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	2382      	movs	r3, #130	; 0x82
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d107      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x7a>
 8006daa:	183b      	adds	r3, r7, r0
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d004      	beq.n	8006dbc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006db2:	2323      	movs	r3, #35	; 0x23
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
    goto error;
 8006dba:	e17e      	b.n	80070ba <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <HAL_SPI_TransmitReceive+0x98>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_SPI_TransmitReceive+0x98>
 8006dc8:	1cbb      	adds	r3, r7, #2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006dd0:	2323      	movs	r3, #35	; 0x23
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8006dd8:	e16f      	b.n	80070ba <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	225d      	movs	r2, #93	; 0x5d
 8006dde:	5c9b      	ldrb	r3, [r3, r2]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d003      	beq.n	8006dee <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	225d      	movs	r2, #93	; 0x5d
 8006dea:	2105      	movs	r1, #5
 8006dec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1cba      	adds	r2, r7, #2
 8006dfe:	2146      	movs	r1, #70	; 0x46
 8006e00:	8812      	ldrh	r2, [r2, #0]
 8006e02:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1cba      	adds	r2, r7, #2
 8006e08:	2144      	movs	r1, #68	; 0x44
 8006e0a:	8812      	ldrh	r2, [r2, #0]
 8006e0c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1cba      	adds	r2, r7, #2
 8006e18:	8812      	ldrh	r2, [r2, #0]
 8006e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1cba      	adds	r2, r7, #2
 8006e20:	8812      	ldrh	r2, [r2, #0]
 8006e22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	23e0      	movs	r3, #224	; 0xe0
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d908      	bls.n	8006e4e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	49a4      	ldr	r1, [pc, #656]	; (80070d8 <HAL_SPI_TransmitReceive+0x3a0>)
 8006e48:	400a      	ands	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
 8006e4c:	e008      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2180      	movs	r1, #128	; 0x80
 8006e5a:	0149      	lsls	r1, r1, #5
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2240      	movs	r2, #64	; 0x40
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b40      	cmp	r3, #64	; 0x40
 8006e6c:	d007      	beq.n	8006e7e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2140      	movs	r1, #64	; 0x40
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	23e0      	movs	r3, #224	; 0xe0
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d800      	bhi.n	8006e8c <HAL_SPI_TransmitReceive+0x154>
 8006e8a:	e07f      	b.n	8006f8c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x168>
 8006e94:	2312      	movs	r3, #18
 8006e96:	18fb      	adds	r3, r7, r3
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d000      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x168>
 8006e9e:	e069      	b.n	8006f74 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	881a      	ldrh	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	1c9a      	adds	r2, r3, #2
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec4:	e056      	b.n	8006f74 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	4013      	ands	r3, r2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d11b      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x1d4>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d016      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x1d4>
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d113      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	881a      	ldrh	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	1c9a      	adds	r2, r3, #2
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2201      	movs	r2, #1
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d11c      	bne.n	8006f54 <HAL_SPI_TransmitReceive+0x21c>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2246      	movs	r2, #70	; 0x46
 8006f1e:	5a9b      	ldrh	r3, [r3, r2]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d016      	beq.n	8006f54 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	b292      	uxth	r2, r2
 8006f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	1c9a      	adds	r2, r3, #2
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2246      	movs	r2, #70	; 0x46
 8006f42:	5a9b      	ldrh	r3, [r3, r2]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b299      	uxth	r1, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2246      	movs	r2, #70	; 0x46
 8006f4e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f50:	2301      	movs	r3, #1
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f54:	f7fd fb3a 	bl	80045cc <HAL_GetTick>
 8006f58:	0002      	movs	r2, r0
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d807      	bhi.n	8006f74 <HAL_SPI_TransmitReceive+0x23c>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	3301      	adds	r3, #1
 8006f68:	d004      	beq.n	8006f74 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006f6a:	2323      	movs	r3, #35	; 0x23
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	2203      	movs	r2, #3
 8006f70:	701a      	strb	r2, [r3, #0]
        goto error;
 8006f72:	e0a2      	b.n	80070ba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1a3      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x18e>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2246      	movs	r2, #70	; 0x46
 8006f82:	5a9b      	ldrh	r3, [r3, r2]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d19d      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x18e>
 8006f8a:	e085      	b.n	8007098 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0x268>
 8006f94:	2312      	movs	r3, #18
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d000      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0x268>
 8006f9e:	e070      	b.n	8007082 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	330c      	adds	r3, #12
 8006faa:	7812      	ldrb	r2, [r2, #0]
 8006fac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fc6:	e05c      	b.n	8007082 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d11c      	bne.n	8007010 <HAL_SPI_TransmitReceive+0x2d8>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d017      	beq.n	8007010 <HAL_SPI_TransmitReceive+0x2d8>
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d114      	bne.n	8007010 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330c      	adds	r3, #12
 8006ff0:	7812      	ldrb	r2, [r2, #0]
 8006ff2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2201      	movs	r2, #1
 8007018:	4013      	ands	r3, r2
 800701a:	2b01      	cmp	r3, #1
 800701c:	d11e      	bne.n	800705c <HAL_SPI_TransmitReceive+0x324>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2246      	movs	r2, #70	; 0x46
 8007022:	5a9b      	ldrh	r3, [r3, r2]
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d018      	beq.n	800705c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	330c      	adds	r3, #12
 8007030:	001a      	movs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2246      	movs	r2, #70	; 0x46
 800704a:	5a9b      	ldrh	r3, [r3, r2]
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b299      	uxth	r1, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2246      	movs	r2, #70	; 0x46
 8007056:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007058:	2301      	movs	r3, #1
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800705c:	f7fd fab6 	bl	80045cc <HAL_GetTick>
 8007060:	0002      	movs	r2, r0
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007068:	429a      	cmp	r2, r3
 800706a:	d802      	bhi.n	8007072 <HAL_SPI_TransmitReceive+0x33a>
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	3301      	adds	r3, #1
 8007070:	d102      	bne.n	8007078 <HAL_SPI_TransmitReceive+0x340>
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007078:	2323      	movs	r3, #35	; 0x23
 800707a:	18fb      	adds	r3, r7, r3
 800707c:	2203      	movs	r2, #3
 800707e:	701a      	strb	r2, [r3, #0]
        goto error;
 8007080:	e01b      	b.n	80070ba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d19d      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x290>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2246      	movs	r2, #70	; 0x46
 8007090:	5a9b      	ldrh	r3, [r3, r2]
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d197      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	0018      	movs	r0, r3
 80070a0:	f000 f94c 	bl	800733c <SPI_EndRxTxTransaction>
 80070a4:	1e03      	subs	r3, r0, #0
 80070a6:	d007      	beq.n	80070b8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80070a8:	2323      	movs	r3, #35	; 0x23
 80070aa:	18fb      	adds	r3, r7, r3
 80070ac:	2201      	movs	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	661a      	str	r2, [r3, #96]	; 0x60
 80070b6:	e000      	b.n	80070ba <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80070b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	225d      	movs	r2, #93	; 0x5d
 80070be:	2101      	movs	r1, #1
 80070c0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	225c      	movs	r2, #92	; 0x5c
 80070c6:	2100      	movs	r1, #0
 80070c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80070ca:	2323      	movs	r3, #35	; 0x23
 80070cc:	18fb      	adds	r3, r7, r3
 80070ce:	781b      	ldrb	r3, [r3, #0]
}
 80070d0:	0018      	movs	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b00a      	add	sp, #40	; 0x28
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	ffffefff 	.word	0xffffefff

080070dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	1dfb      	adds	r3, r7, #7
 80070ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070ec:	f7fd fa6e 	bl	80045cc <HAL_GetTick>
 80070f0:	0002      	movs	r2, r0
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	18d3      	adds	r3, r2, r3
 80070fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070fc:	f7fd fa66 	bl	80045cc <HAL_GetTick>
 8007100:	0003      	movs	r3, r0
 8007102:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007104:	4b3a      	ldr	r3, [pc, #232]	; (80071f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	015b      	lsls	r3, r3, #5
 800710a:	0d1b      	lsrs	r3, r3, #20
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	4353      	muls	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007112:	e058      	b.n	80071c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	d055      	beq.n	80071c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800711a:	f7fd fa57 	bl	80045cc <HAL_GetTick>
 800711e:	0002      	movs	r2, r0
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	429a      	cmp	r2, r3
 8007128:	d902      	bls.n	8007130 <SPI_WaitFlagStateUntilTimeout+0x54>
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d142      	bne.n	80071b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	21e0      	movs	r1, #224	; 0xe0
 800713c:	438a      	bics	r2, r1
 800713e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	2382      	movs	r3, #130	; 0x82
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	429a      	cmp	r2, r3
 800714a:	d113      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0x98>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	2380      	movs	r3, #128	; 0x80
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	429a      	cmp	r2, r3
 8007156:	d005      	beq.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	429a      	cmp	r2, r3
 8007162:	d107      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2140      	movs	r1, #64	; 0x40
 8007170:	438a      	bics	r2, r1
 8007172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	019b      	lsls	r3, r3, #6
 800717c:	429a      	cmp	r2, r3
 800717e:	d110      	bne.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	491a      	ldr	r1, [pc, #104]	; (80071f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800718c:	400a      	ands	r2, r1
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	0189      	lsls	r1, r1, #6
 800719e:	430a      	orrs	r2, r1
 80071a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	225d      	movs	r2, #93	; 0x5d
 80071a6:	2101      	movs	r1, #1
 80071a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	225c      	movs	r2, #92	; 0x5c
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e017      	b.n	80071e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	425a      	negs	r2, r3
 80071d6:	4153      	adcs	r3, r2
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	001a      	movs	r2, r3
 80071dc:	1dfb      	adds	r3, r7, #7
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d197      	bne.n	8007114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	0018      	movs	r0, r3
 80071e8:	46bd      	mov	sp, r7
 80071ea:	b008      	add	sp, #32
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	20000000 	.word	0x20000000
 80071f4:	ffffdfff 	.word	0xffffdfff

080071f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007206:	2317      	movs	r3, #23
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800720e:	f7fd f9dd 	bl	80045cc <HAL_GetTick>
 8007212:	0002      	movs	r2, r0
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	18d3      	adds	r3, r2, r3
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800721e:	f7fd f9d5 	bl	80045cc <HAL_GetTick>
 8007222:	0003      	movs	r3, r0
 8007224:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800722e:	4b41      	ldr	r3, [pc, #260]	; (8007334 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	0013      	movs	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	189b      	adds	r3, r3, r2
 8007238:	00da      	lsls	r2, r3, #3
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	0d1b      	lsrs	r3, r3, #20
 800723e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007240:	4353      	muls	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007244:	e068      	b.n	8007318 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	23c0      	movs	r3, #192	; 0xc0
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	429a      	cmp	r2, r3
 800724e:	d10a      	bne.n	8007266 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d107      	bne.n	8007266 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	b2da      	uxtb	r2, r3
 800725c:	2117      	movs	r1, #23
 800725e:	187b      	adds	r3, r7, r1
 8007260:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007262:	187b      	adds	r3, r7, r1
 8007264:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	3301      	adds	r3, #1
 800726a:	d055      	beq.n	8007318 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800726c:	f7fd f9ae 	bl	80045cc <HAL_GetTick>
 8007270:	0002      	movs	r2, r0
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007278:	429a      	cmp	r2, r3
 800727a:	d902      	bls.n	8007282 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d142      	bne.n	8007308 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	21e0      	movs	r1, #224	; 0xe0
 800728e:	438a      	bics	r2, r1
 8007290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	2382      	movs	r3, #130	; 0x82
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	429a      	cmp	r2, r3
 800729c:	d113      	bne.n	80072c6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	2380      	movs	r3, #128	; 0x80
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d005      	beq.n	80072b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	2380      	movs	r3, #128	; 0x80
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d107      	bne.n	80072c6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2140      	movs	r1, #64	; 0x40
 80072c2:	438a      	bics	r2, r1
 80072c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ca:	2380      	movs	r3, #128	; 0x80
 80072cc:	019b      	lsls	r3, r3, #6
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d110      	bne.n	80072f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4916      	ldr	r1, [pc, #88]	; (8007338 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80072de:	400a      	ands	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	0189      	lsls	r1, r1, #6
 80072f0:	430a      	orrs	r2, r1
 80072f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	225d      	movs	r2, #93	; 0x5d
 80072f8:	2101      	movs	r1, #1
 80072fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	225c      	movs	r2, #92	; 0x5c
 8007300:	2100      	movs	r1, #0
 8007302:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e010      	b.n	800732a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	3b01      	subs	r3, #1
 8007316:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4013      	ands	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d18e      	bne.n	8007246 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	0018      	movs	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	b00a      	add	sp, #40	; 0x28
 8007330:	bd80      	pop	{r7, pc}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	20000000 	.word	0x20000000
 8007338:	ffffdfff 	.word	0xffffdfff

0800733c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	23c0      	movs	r3, #192	; 0xc0
 800734c:	0159      	lsls	r1, r3, #5
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	0013      	movs	r3, r2
 8007356:	2200      	movs	r2, #0
 8007358:	f7ff ff4e 	bl	80071f8 <SPI_WaitFifoStateUntilTimeout>
 800735c:	1e03      	subs	r3, r0, #0
 800735e:	d007      	beq.n	8007370 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007364:	2220      	movs	r2, #32
 8007366:	431a      	orrs	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e027      	b.n	80073c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	0013      	movs	r3, r2
 800737a:	2200      	movs	r2, #0
 800737c:	2180      	movs	r1, #128	; 0x80
 800737e:	f7ff fead 	bl	80070dc <SPI_WaitFlagStateUntilTimeout>
 8007382:	1e03      	subs	r3, r0, #0
 8007384:	d007      	beq.n	8007396 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738a:	2220      	movs	r2, #32
 800738c:	431a      	orrs	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e014      	b.n	80073c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	23c0      	movs	r3, #192	; 0xc0
 800739a:	00d9      	lsls	r1, r3, #3
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	0013      	movs	r3, r2
 80073a4:	2200      	movs	r2, #0
 80073a6:	f7ff ff27 	bl	80071f8 <SPI_WaitFifoStateUntilTimeout>
 80073aa:	1e03      	subs	r3, r0, #0
 80073ac:	d007      	beq.n	80073be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b2:	2220      	movs	r2, #32
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e000      	b.n	80073c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b004      	add	sp, #16
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e042      	b.n	8007460 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	223d      	movs	r2, #61	; 0x3d
 80073de:	5c9b      	ldrb	r3, [r3, r2]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d107      	bne.n	80073f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	223c      	movs	r2, #60	; 0x3c
 80073ea:	2100      	movs	r1, #0
 80073ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	0018      	movs	r0, r3
 80073f2:	f7fc fe4f 	bl	8004094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	223d      	movs	r2, #61	; 0x3d
 80073fa:	2102      	movs	r1, #2
 80073fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	0019      	movs	r1, r3
 8007408:	0010      	movs	r0, r2
 800740a:	f000 fa83 	bl	8007914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2246      	movs	r2, #70	; 0x46
 8007412:	2101      	movs	r1, #1
 8007414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	223e      	movs	r2, #62	; 0x3e
 800741a:	2101      	movs	r1, #1
 800741c:	5499      	strb	r1, [r3, r2]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	223f      	movs	r2, #63	; 0x3f
 8007422:	2101      	movs	r1, #1
 8007424:	5499      	strb	r1, [r3, r2]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2240      	movs	r2, #64	; 0x40
 800742a:	2101      	movs	r1, #1
 800742c:	5499      	strb	r1, [r3, r2]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2241      	movs	r2, #65	; 0x41
 8007432:	2101      	movs	r1, #1
 8007434:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2242      	movs	r2, #66	; 0x42
 800743a:	2101      	movs	r1, #1
 800743c:	5499      	strb	r1, [r3, r2]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2243      	movs	r2, #67	; 0x43
 8007442:	2101      	movs	r1, #1
 8007444:	5499      	strb	r1, [r3, r2]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2244      	movs	r2, #68	; 0x44
 800744a:	2101      	movs	r1, #1
 800744c:	5499      	strb	r1, [r3, r2]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2245      	movs	r2, #69	; 0x45
 8007452:	2101      	movs	r1, #1
 8007454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	223d      	movs	r2, #61	; 0x3d
 800745a:	2101      	movs	r1, #1
 800745c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	223d      	movs	r2, #61	; 0x3d
 8007474:	5c9b      	ldrb	r3, [r3, r2]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d001      	beq.n	8007480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e035      	b.n	80074ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	223d      	movs	r2, #61	; 0x3d
 8007484:	2102      	movs	r1, #2
 8007486:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2101      	movs	r1, #1
 8007494:	430a      	orrs	r2, r1
 8007496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <HAL_TIM_Base_Start_IT+0x8c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_TIM_Base_Start_IT+0x4e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a14      	ldr	r2, [pc, #80]	; (80074f8 <HAL_TIM_Base_Start_IT+0x90>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIM_Base_Start_IT+0x4e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a12      	ldr	r2, [pc, #72]	; (80074fc <HAL_TIM_Base_Start_IT+0x94>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d111      	bne.n	80074da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2207      	movs	r2, #7
 80074be:	4013      	ands	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d010      	beq.n	80074ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2101      	movs	r1, #1
 80074d4:	430a      	orrs	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d8:	e007      	b.n	80074ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2101      	movs	r1, #1
 80074e6:	430a      	orrs	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	0018      	movs	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b004      	add	sp, #16
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40012c00 	.word	0x40012c00
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40014000 	.word	0x40014000

08007500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2202      	movs	r2, #2
 8007510:	4013      	ands	r3, r2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d124      	bne.n	8007560 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2202      	movs	r2, #2
 800751e:	4013      	ands	r3, r2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d11d      	bne.n	8007560 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2203      	movs	r2, #3
 800752a:	4252      	negs	r2, r2
 800752c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	2203      	movs	r2, #3
 800753c:	4013      	ands	r3, r2
 800753e:	d004      	beq.n	800754a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0018      	movs	r0, r3
 8007544:	f000 f9ce 	bl	80078e4 <HAL_TIM_IC_CaptureCallback>
 8007548:	e007      	b.n	800755a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0018      	movs	r0, r3
 800754e:	f000 f9c1 	bl	80078d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	0018      	movs	r0, r3
 8007556:	f000 f9cd 	bl	80078f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2204      	movs	r2, #4
 8007568:	4013      	ands	r3, r2
 800756a:	2b04      	cmp	r3, #4
 800756c:	d125      	bne.n	80075ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	2204      	movs	r2, #4
 8007576:	4013      	ands	r3, r2
 8007578:	2b04      	cmp	r3, #4
 800757a:	d11e      	bne.n	80075ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2205      	movs	r2, #5
 8007582:	4252      	negs	r2, r2
 8007584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	23c0      	movs	r3, #192	; 0xc0
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4013      	ands	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0018      	movs	r0, r3
 800759e:	f000 f9a1 	bl	80078e4 <HAL_TIM_IC_CaptureCallback>
 80075a2:	e007      	b.n	80075b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	0018      	movs	r0, r3
 80075a8:	f000 f994 	bl	80078d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	0018      	movs	r0, r3
 80075b0:	f000 f9a0 	bl	80078f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2208      	movs	r2, #8
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d124      	bne.n	8007612 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2208      	movs	r2, #8
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d11d      	bne.n	8007612 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2209      	movs	r2, #9
 80075dc:	4252      	negs	r2, r2
 80075de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2204      	movs	r2, #4
 80075e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	2203      	movs	r2, #3
 80075ee:	4013      	ands	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	0018      	movs	r0, r3
 80075f6:	f000 f975 	bl	80078e4 <HAL_TIM_IC_CaptureCallback>
 80075fa:	e007      	b.n	800760c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	0018      	movs	r0, r3
 8007600:	f000 f968 	bl	80078d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f974 	bl	80078f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2210      	movs	r2, #16
 800761a:	4013      	ands	r3, r2
 800761c:	2b10      	cmp	r3, #16
 800761e:	d125      	bne.n	800766c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2210      	movs	r2, #16
 8007628:	4013      	ands	r3, r2
 800762a:	2b10      	cmp	r3, #16
 800762c:	d11e      	bne.n	800766c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2211      	movs	r2, #17
 8007634:	4252      	negs	r2, r2
 8007636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2208      	movs	r2, #8
 800763c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	23c0      	movs	r3, #192	; 0xc0
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4013      	ands	r3, r2
 800764a:	d004      	beq.n	8007656 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	0018      	movs	r0, r3
 8007650:	f000 f948 	bl	80078e4 <HAL_TIM_IC_CaptureCallback>
 8007654:	e007      	b.n	8007666 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	0018      	movs	r0, r3
 800765a:	f000 f93b 	bl	80078d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	0018      	movs	r0, r3
 8007662:	f000 f947 	bl	80078f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2201      	movs	r2, #1
 8007674:	4013      	ands	r3, r2
 8007676:	2b01      	cmp	r3, #1
 8007678:	d10f      	bne.n	800769a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	4013      	ands	r3, r2
 8007684:	2b01      	cmp	r3, #1
 8007686:	d108      	bne.n	800769a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2202      	movs	r2, #2
 800768e:	4252      	negs	r2, r2
 8007690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0018      	movs	r0, r3
 8007696:	f7fc fb13 	bl	8003cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	2280      	movs	r2, #128	; 0x80
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b80      	cmp	r3, #128	; 0x80
 80076a6:	d10f      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	2280      	movs	r2, #128	; 0x80
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d108      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2281      	movs	r2, #129	; 0x81
 80076bc:	4252      	negs	r2, r2
 80076be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	0018      	movs	r0, r3
 80076c4:	f000 fa96 	bl	8007bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2240      	movs	r2, #64	; 0x40
 80076d0:	4013      	ands	r3, r2
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d10f      	bne.n	80076f6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2240      	movs	r2, #64	; 0x40
 80076de:	4013      	ands	r3, r2
 80076e0:	2b40      	cmp	r3, #64	; 0x40
 80076e2:	d108      	bne.n	80076f6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2241      	movs	r2, #65	; 0x41
 80076ea:	4252      	negs	r2, r2
 80076ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	0018      	movs	r0, r3
 80076f2:	f000 f907 	bl	8007904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2220      	movs	r2, #32
 80076fe:	4013      	ands	r3, r2
 8007700:	2b20      	cmp	r3, #32
 8007702:	d10f      	bne.n	8007724 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	4013      	ands	r3, r2
 800770e:	2b20      	cmp	r3, #32
 8007710:	d108      	bne.n	8007724 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2221      	movs	r2, #33	; 0x21
 8007718:	4252      	negs	r2, r2
 800771a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	0018      	movs	r0, r3
 8007720:	f000 fa60 	bl	8007be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007724:	46c0      	nop			; (mov r8, r8)
 8007726:	46bd      	mov	sp, r7
 8007728:	b002      	add	sp, #8
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007736:	230f      	movs	r3, #15
 8007738:	18fb      	adds	r3, r7, r3
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	223c      	movs	r2, #60	; 0x3c
 8007742:	5c9b      	ldrb	r3, [r3, r2]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_TIM_ConfigClockSource+0x20>
 8007748:	2302      	movs	r3, #2
 800774a:	e0bc      	b.n	80078c6 <HAL_TIM_ConfigClockSource+0x19a>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	223c      	movs	r2, #60	; 0x3c
 8007750:	2101      	movs	r1, #1
 8007752:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	223d      	movs	r2, #61	; 0x3d
 8007758:	2102      	movs	r1, #2
 800775a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2277      	movs	r2, #119	; 0x77
 8007768:	4393      	bics	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4a58      	ldr	r2, [pc, #352]	; (80078d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007770:	4013      	ands	r3, r2
 8007772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2280      	movs	r2, #128	; 0x80
 8007782:	0192      	lsls	r2, r2, #6
 8007784:	4293      	cmp	r3, r2
 8007786:	d040      	beq.n	800780a <HAL_TIM_ConfigClockSource+0xde>
 8007788:	2280      	movs	r2, #128	; 0x80
 800778a:	0192      	lsls	r2, r2, #6
 800778c:	4293      	cmp	r3, r2
 800778e:	d900      	bls.n	8007792 <HAL_TIM_ConfigClockSource+0x66>
 8007790:	e088      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 8007792:	2280      	movs	r2, #128	; 0x80
 8007794:	0152      	lsls	r2, r2, #5
 8007796:	4293      	cmp	r3, r2
 8007798:	d100      	bne.n	800779c <HAL_TIM_ConfigClockSource+0x70>
 800779a:	e088      	b.n	80078ae <HAL_TIM_ConfigClockSource+0x182>
 800779c:	2280      	movs	r2, #128	; 0x80
 800779e:	0152      	lsls	r2, r2, #5
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d900      	bls.n	80077a6 <HAL_TIM_ConfigClockSource+0x7a>
 80077a4:	e07e      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 80077a6:	2b70      	cmp	r3, #112	; 0x70
 80077a8:	d018      	beq.n	80077dc <HAL_TIM_ConfigClockSource+0xb0>
 80077aa:	d900      	bls.n	80077ae <HAL_TIM_ConfigClockSource+0x82>
 80077ac:	e07a      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 80077ae:	2b60      	cmp	r3, #96	; 0x60
 80077b0:	d04f      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x126>
 80077b2:	d900      	bls.n	80077b6 <HAL_TIM_ConfigClockSource+0x8a>
 80077b4:	e076      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 80077b6:	2b50      	cmp	r3, #80	; 0x50
 80077b8:	d03b      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x106>
 80077ba:	d900      	bls.n	80077be <HAL_TIM_ConfigClockSource+0x92>
 80077bc:	e072      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d057      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x146>
 80077c2:	d900      	bls.n	80077c6 <HAL_TIM_ConfigClockSource+0x9a>
 80077c4:	e06e      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 80077c6:	2b30      	cmp	r3, #48	; 0x30
 80077c8:	d063      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x166>
 80077ca:	d86b      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d060      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x166>
 80077d0:	d868      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d05d      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x166>
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d05b      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x166>
 80077da:	e063      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	6899      	ldr	r1, [r3, #8]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f000 f982 	bl	8007af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2277      	movs	r2, #119	; 0x77
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	609a      	str	r2, [r3, #8]
      break;
 8007808:	e052      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6899      	ldr	r1, [r3, #8]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f000 f96b 	bl	8007af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	01c9      	lsls	r1, r1, #7
 800782c:	430a      	orrs	r2, r1
 800782e:	609a      	str	r2, [r3, #8]
      break;
 8007830:	e03e      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	001a      	movs	r2, r3
 8007840:	f000 f8de 	bl	8007a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2150      	movs	r1, #80	; 0x50
 800784a:	0018      	movs	r0, r3
 800784c:	f000 f938 	bl	8007ac0 <TIM_ITRx_SetConfig>
      break;
 8007850:	e02e      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6859      	ldr	r1, [r3, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	001a      	movs	r2, r3
 8007860:	f000 f8fc 	bl	8007a5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2160      	movs	r1, #96	; 0x60
 800786a:	0018      	movs	r0, r3
 800786c:	f000 f928 	bl	8007ac0 <TIM_ITRx_SetConfig>
      break;
 8007870:	e01e      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6859      	ldr	r1, [r3, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	001a      	movs	r2, r3
 8007880:	f000 f8be 	bl	8007a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2140      	movs	r1, #64	; 0x40
 800788a:	0018      	movs	r0, r3
 800788c:	f000 f918 	bl	8007ac0 <TIM_ITRx_SetConfig>
      break;
 8007890:	e00e      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	0019      	movs	r1, r3
 800789c:	0010      	movs	r0, r2
 800789e:	f000 f90f 	bl	8007ac0 <TIM_ITRx_SetConfig>
      break;
 80078a2:	e005      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80078a4:	230f      	movs	r3, #15
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
      break;
 80078ac:	e000      	b.n	80078b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80078ae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	223d      	movs	r2, #61	; 0x3d
 80078b4:	2101      	movs	r1, #1
 80078b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	223c      	movs	r2, #60	; 0x3c
 80078bc:	2100      	movs	r1, #0
 80078be:	5499      	strb	r1, [r3, r2]

  return status;
 80078c0:	230f      	movs	r3, #15
 80078c2:	18fb      	adds	r3, r7, r3
 80078c4:	781b      	ldrb	r3, [r3, #0]
}
 80078c6:	0018      	movs	r0, r3
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b004      	add	sp, #16
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	ffff00ff 	.word	0xffff00ff

080078d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	46bd      	mov	sp, r7
 80078f0:	b002      	add	sp, #8
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078fc:	46c0      	nop			; (mov r8, r8)
 80078fe:	46bd      	mov	sp, r7
 8007900:	b002      	add	sp, #8
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b002      	add	sp, #8
 8007912:	bd80      	pop	{r7, pc}

08007914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a2f      	ldr	r2, [pc, #188]	; (80079e4 <TIM_Base_SetConfig+0xd0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d003      	beq.n	8007934 <TIM_Base_SetConfig+0x20>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a2e      	ldr	r2, [pc, #184]	; (80079e8 <TIM_Base_SetConfig+0xd4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d108      	bne.n	8007946 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2270      	movs	r2, #112	; 0x70
 8007938:	4393      	bics	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a26      	ldr	r2, [pc, #152]	; (80079e4 <TIM_Base_SetConfig+0xd0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a25      	ldr	r2, [pc, #148]	; (80079e8 <TIM_Base_SetConfig+0xd4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00f      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a24      	ldr	r2, [pc, #144]	; (80079ec <TIM_Base_SetConfig+0xd8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00b      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a23      	ldr	r2, [pc, #140]	; (80079f0 <TIM_Base_SetConfig+0xdc>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d007      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a22      	ldr	r2, [pc, #136]	; (80079f4 <TIM_Base_SetConfig+0xe0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a21      	ldr	r2, [pc, #132]	; (80079f8 <TIM_Base_SetConfig+0xe4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d108      	bne.n	8007988 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a20      	ldr	r2, [pc, #128]	; (80079fc <TIM_Base_SetConfig+0xe8>)
 800797a:	4013      	ands	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2280      	movs	r2, #128	; 0x80
 800798c:	4393      	bics	r3, r2
 800798e:	001a      	movs	r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a0c      	ldr	r2, [pc, #48]	; (80079e4 <TIM_Base_SetConfig+0xd0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00b      	beq.n	80079ce <TIM_Base_SetConfig+0xba>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a0d      	ldr	r2, [pc, #52]	; (80079f0 <TIM_Base_SetConfig+0xdc>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d007      	beq.n	80079ce <TIM_Base_SetConfig+0xba>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a0c      	ldr	r2, [pc, #48]	; (80079f4 <TIM_Base_SetConfig+0xe0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d003      	beq.n	80079ce <TIM_Base_SetConfig+0xba>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a0b      	ldr	r2, [pc, #44]	; (80079f8 <TIM_Base_SetConfig+0xe4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d103      	bne.n	80079d6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	615a      	str	r2, [r3, #20]
}
 80079dc:	46c0      	nop			; (mov r8, r8)
 80079de:	46bd      	mov	sp, r7
 80079e0:	b004      	add	sp, #16
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40002000 	.word	0x40002000
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800
 80079fc:	fffffcff 	.word	0xfffffcff

08007a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	2201      	movs	r2, #1
 8007a18:	4393      	bics	r3, r2
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	22f0      	movs	r2, #240	; 0xf0
 8007a2a:	4393      	bics	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	220a      	movs	r2, #10
 8007a3c:	4393      	bics	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	621a      	str	r2, [r3, #32]
}
 8007a54:	46c0      	nop			; (mov r8, r8)
 8007a56:	46bd      	mov	sp, r7
 8007a58:	b006      	add	sp, #24
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	4393      	bics	r3, r2
 8007a70:	001a      	movs	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	4a0d      	ldr	r2, [pc, #52]	; (8007abc <TIM_TI2_ConfigInputStage+0x60>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	031b      	lsls	r3, r3, #12
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	22a0      	movs	r2, #160	; 0xa0
 8007a98:	4393      	bics	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	621a      	str	r2, [r3, #32]
}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	b006      	add	sp, #24
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	ffff0fff 	.word	0xffff0fff

08007ac0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2270      	movs	r2, #112	; 0x70
 8007ad4:	4393      	bics	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	2207      	movs	r2, #7
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	609a      	str	r2, [r3, #8]
}
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b004      	add	sp, #16
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <TIM_ETR_SetConfig+0x3c>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	021a      	lsls	r2, r3, #8
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	609a      	str	r2, [r3, #8]
}
 8007b28:	46c0      	nop			; (mov r8, r8)
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b006      	add	sp, #24
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	ffff00ff 	.word	0xffff00ff

08007b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	223c      	movs	r2, #60	; 0x3c
 8007b42:	5c9b      	ldrb	r3, [r3, r2]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e041      	b.n	8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	223c      	movs	r2, #60	; 0x3c
 8007b50:	2101      	movs	r1, #1
 8007b52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	223d      	movs	r2, #61	; 0x3d
 8007b58:	2102      	movs	r1, #2
 8007b5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2270      	movs	r2, #112	; 0x70
 8007b70:	4393      	bics	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a13      	ldr	r2, [pc, #76]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d009      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a11      	ldr	r2, [pc, #68]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a10      	ldr	r2, [pc, #64]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d10c      	bne.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2280      	movs	r2, #128	; 0x80
 8007ba8:	4393      	bics	r3, r2
 8007baa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	223d      	movs	r2, #61	; 0x3d
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	223c      	movs	r2, #60	; 0x3c
 8007bca:	2100      	movs	r1, #0
 8007bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	b004      	add	sp, #16
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40014000 	.word	0x40014000

08007be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bec:	46c0      	nop			; (mov r8, r8)
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b002      	add	sp, #8
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b002      	add	sp, #8
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e044      	b.n	8007ca0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d107      	bne.n	8007c2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2274      	movs	r2, #116	; 0x74
 8007c22:	2100      	movs	r1, #0
 8007c24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	0018      	movs	r0, r3
 8007c2a:	f7fc fa59 	bl	80040e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2224      	movs	r2, #36	; 0x24
 8007c32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2101      	movs	r1, #1
 8007c40:	438a      	bics	r2, r1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	0018      	movs	r0, r3
 8007c48:	f000 fc98 	bl	800857c <UART_SetConfig>
 8007c4c:	0003      	movs	r3, r0
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e024      	b.n	8007ca0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	0018      	movs	r0, r3
 8007c62:	f000 fdfb 	bl	800885c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	490d      	ldr	r1, [pc, #52]	; (8007ca8 <HAL_UART_Init+0xa4>)
 8007c72:	400a      	ands	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2108      	movs	r1, #8
 8007c82:	438a      	bics	r2, r1
 8007c84:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2101      	movs	r1, #1
 8007c92:	430a      	orrs	r2, r1
 8007c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f000 fe93 	bl	80089c4 <UART_CheckIdleState>
 8007c9e:	0003      	movs	r3, r0
}
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b002      	add	sp, #8
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	fffff7ff 	.word	0xfffff7ff

08007cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08a      	sub	sp, #40	; 0x28
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	603b      	str	r3, [r7, #0]
 8007cb8:	1dbb      	adds	r3, r7, #6
 8007cba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d000      	beq.n	8007cc6 <HAL_UART_Transmit+0x1a>
 8007cc4:	e096      	b.n	8007df4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_UART_Transmit+0x28>
 8007ccc:	1dbb      	adds	r3, r7, #6
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e08e      	b.n	8007df6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	015b      	lsls	r3, r3, #5
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d109      	bne.n	8007cf8 <HAL_UART_Transmit+0x4c>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	d001      	beq.n	8007cf8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e07e      	b.n	8007df6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2274      	movs	r2, #116	; 0x74
 8007cfc:	5c9b      	ldrb	r3, [r3, r2]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d101      	bne.n	8007d06 <HAL_UART_Transmit+0x5a>
 8007d02:	2302      	movs	r3, #2
 8007d04:	e077      	b.n	8007df6 <HAL_UART_Transmit+0x14a>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2274      	movs	r2, #116	; 0x74
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2280      	movs	r2, #128	; 0x80
 8007d12:	2100      	movs	r1, #0
 8007d14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2221      	movs	r2, #33	; 0x21
 8007d1a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d1c:	f7fc fc56 	bl	80045cc <HAL_GetTick>
 8007d20:	0003      	movs	r3, r0
 8007d22:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	1dba      	adds	r2, r7, #6
 8007d28:	2150      	movs	r1, #80	; 0x50
 8007d2a:	8812      	ldrh	r2, [r2, #0]
 8007d2c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1dba      	adds	r2, r7, #6
 8007d32:	2152      	movs	r1, #82	; 0x52
 8007d34:	8812      	ldrh	r2, [r2, #0]
 8007d36:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	2380      	movs	r3, #128	; 0x80
 8007d3e:	015b      	lsls	r3, r3, #5
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d108      	bne.n	8007d56 <HAL_UART_Transmit+0xaa>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d104      	bne.n	8007d56 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	61bb      	str	r3, [r7, #24]
 8007d54:	e003      	b.n	8007d5e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2274      	movs	r2, #116	; 0x74
 8007d62:	2100      	movs	r1, #0
 8007d64:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007d66:	e02d      	b.n	8007dc4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	0013      	movs	r3, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	2180      	movs	r1, #128	; 0x80
 8007d76:	f000 fe6d 	bl	8008a54 <UART_WaitOnFlagUntilTimeout>
 8007d7a:	1e03      	subs	r3, r0, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e039      	b.n	8007df6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10b      	bne.n	8007da0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	881a      	ldrh	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	05d2      	lsls	r2, r2, #23
 8007d92:	0dd2      	lsrs	r2, r2, #23
 8007d94:	b292      	uxth	r2, r2
 8007d96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	3302      	adds	r3, #2
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	e008      	b.n	8007db2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	781a      	ldrb	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	b292      	uxth	r2, r2
 8007daa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	3301      	adds	r3, #1
 8007db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2252      	movs	r2, #82	; 0x52
 8007db6:	5a9b      	ldrh	r3, [r3, r2]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b299      	uxth	r1, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2252      	movs	r2, #82	; 0x52
 8007dc2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2252      	movs	r2, #82	; 0x52
 8007dc8:	5a9b      	ldrh	r3, [r3, r2]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1cb      	bne.n	8007d68 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	0013      	movs	r3, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2140      	movs	r1, #64	; 0x40
 8007dde:	f000 fe39 	bl	8008a54 <UART_WaitOnFlagUntilTimeout>
 8007de2:	1e03      	subs	r3, r0, #0
 8007de4:	d001      	beq.n	8007dea <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e005      	b.n	8007df6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	0018      	movs	r0, r3
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	b008      	add	sp, #32
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	1dbb      	adds	r3, r7, #6
 8007e0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d000      	beq.n	8007e18 <HAL_UART_Transmit_IT+0x18>
 8007e16:	e06a      	b.n	8007eee <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_UART_Transmit_IT+0x26>
 8007e1e:	1dbb      	adds	r3, r7, #6
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e062      	b.n	8007ef0 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	2380      	movs	r3, #128	; 0x80
 8007e30:	015b      	lsls	r3, r3, #5
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d109      	bne.n	8007e4a <HAL_UART_Transmit_IT+0x4a>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2201      	movs	r2, #1
 8007e42:	4013      	ands	r3, r2
 8007e44:	d001      	beq.n	8007e4a <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e052      	b.n	8007ef0 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2274      	movs	r2, #116	; 0x74
 8007e4e:	5c9b      	ldrb	r3, [r3, r2]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_UART_Transmit_IT+0x58>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e04b      	b.n	8007ef0 <HAL_UART_Transmit_IT+0xf0>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2274      	movs	r2, #116	; 0x74
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	1dba      	adds	r2, r7, #6
 8007e6a:	2150      	movs	r1, #80	; 0x50
 8007e6c:	8812      	ldrh	r2, [r2, #0]
 8007e6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	1dba      	adds	r2, r7, #6
 8007e74:	2152      	movs	r1, #82	; 0x52
 8007e76:	8812      	ldrh	r2, [r2, #0]
 8007e78:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2280      	movs	r2, #128	; 0x80
 8007e84:	2100      	movs	r1, #0
 8007e86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2221      	movs	r2, #33	; 0x21
 8007e8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	2380      	movs	r3, #128	; 0x80
 8007e94:	015b      	lsls	r3, r3, #5
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d107      	bne.n	8007eaa <HAL_UART_Transmit_IT+0xaa>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a14      	ldr	r2, [pc, #80]	; (8007ef8 <HAL_UART_Transmit_IT+0xf8>)
 8007ea6:	669a      	str	r2, [r3, #104]	; 0x68
 8007ea8:	e002      	b.n	8007eb0 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a13      	ldr	r2, [pc, #76]	; (8007efc <HAL_UART_Transmit_IT+0xfc>)
 8007eae:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2274      	movs	r2, #116	; 0x74
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8007ebe:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007ec0:	61fb      	str	r3, [r7, #28]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2180      	movs	r1, #128	; 0x80
 8007eda:	430a      	orrs	r2, r1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	f383 8810 	msr	PRIMASK, r3
}
 8007ee8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e000      	b.n	8007ef0 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
  }
}
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b008      	add	sp, #32
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	08008ee3 	.word	0x08008ee3
 8007efc:	08008e2f 	.word	0x08008e2f

08007f00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	1dbb      	adds	r3, r7, #6
 8007f0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d150      	bne.n	8007fb8 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_UART_Receive_IT+0x24>
 8007f1c:	1dbb      	adds	r3, r7, #6
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e048      	b.n	8007fba <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	015b      	lsls	r3, r3, #5
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d109      	bne.n	8007f48 <HAL_UART_Receive_IT+0x48>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d105      	bne.n	8007f48 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4013      	ands	r3, r2
 8007f42:	d001      	beq.n	8007f48 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e038      	b.n	8007fba <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2274      	movs	r2, #116	; 0x74
 8007f4c:	5c9b      	ldrb	r3, [r3, r2]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Receive_IT+0x56>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e031      	b.n	8007fba <HAL_UART_Receive_IT+0xba>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2274      	movs	r2, #116	; 0x74
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	2380      	movs	r3, #128	; 0x80
 8007f6c:	041b      	lsls	r3, r3, #16
 8007f6e:	4013      	ands	r3, r2
 8007f70:	d019      	beq.n	8007fa6 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f72:	f3ef 8310 	mrs	r3, PRIMASK
 8007f76:	613b      	str	r3, [r7, #16]
  return(result);
 8007f78:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f7a:	61fb      	str	r3, [r7, #28]
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f383 8810 	msr	PRIMASK, r3
}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2180      	movs	r1, #128	; 0x80
 8007f94:	04c9      	lsls	r1, r1, #19
 8007f96:	430a      	orrs	r2, r1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f383 8810 	msr	PRIMASK, r3
}
 8007fa4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fa6:	1dbb      	adds	r3, r7, #6
 8007fa8:	881a      	ldrh	r2, [r3, #0]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f000 fe14 	bl	8008bdc <UART_Start_Receive_IT>
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	e000      	b.n	8007fba <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007fb8:	2302      	movs	r3, #2
  }
}
 8007fba:	0018      	movs	r0, r3
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	b008      	add	sp, #32
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b0ab      	sub	sp, #172	; 0xac
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	22a4      	movs	r2, #164	; 0xa4
 8007fd4:	18b9      	adds	r1, r7, r2
 8007fd6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	20a0      	movs	r0, #160	; 0xa0
 8007fe0:	1839      	adds	r1, r7, r0
 8007fe2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	219c      	movs	r1, #156	; 0x9c
 8007fec:	1879      	adds	r1, r7, r1
 8007fee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ff0:	0011      	movs	r1, r2
 8007ff2:	18bb      	adds	r3, r7, r2
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a99      	ldr	r2, [pc, #612]	; (800825c <HAL_UART_IRQHandler+0x298>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	2298      	movs	r2, #152	; 0x98
 8007ffc:	18bc      	adds	r4, r7, r2
 8007ffe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008000:	18bb      	adds	r3, r7, r2
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d114      	bne.n	8008032 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008008:	187b      	adds	r3, r7, r1
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2220      	movs	r2, #32
 800800e:	4013      	ands	r3, r2
 8008010:	d00f      	beq.n	8008032 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008012:	183b      	adds	r3, r7, r0
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2220      	movs	r2, #32
 8008018:	4013      	ands	r3, r2
 800801a:	d00a      	beq.n	8008032 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008020:	2b00      	cmp	r3, #0
 8008022:	d100      	bne.n	8008026 <HAL_UART_IRQHandler+0x62>
 8008024:	e27e      	b.n	8008524 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	0010      	movs	r0, r2
 800802e:	4798      	blx	r3
      }
      return;
 8008030:	e278      	b.n	8008524 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008032:	2398      	movs	r3, #152	; 0x98
 8008034:	18fb      	adds	r3, r7, r3
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d100      	bne.n	800803e <HAL_UART_IRQHandler+0x7a>
 800803c:	e114      	b.n	8008268 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800803e:	239c      	movs	r3, #156	; 0x9c
 8008040:	18fb      	adds	r3, r7, r3
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2201      	movs	r2, #1
 8008046:	4013      	ands	r3, r2
 8008048:	d106      	bne.n	8008058 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800804a:	23a0      	movs	r3, #160	; 0xa0
 800804c:	18fb      	adds	r3, r7, r3
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a83      	ldr	r2, [pc, #524]	; (8008260 <HAL_UART_IRQHandler+0x29c>)
 8008052:	4013      	ands	r3, r2
 8008054:	d100      	bne.n	8008058 <HAL_UART_IRQHandler+0x94>
 8008056:	e107      	b.n	8008268 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008058:	23a4      	movs	r3, #164	; 0xa4
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2201      	movs	r2, #1
 8008060:	4013      	ands	r3, r2
 8008062:	d012      	beq.n	800808a <HAL_UART_IRQHandler+0xc6>
 8008064:	23a0      	movs	r3, #160	; 0xa0
 8008066:	18fb      	adds	r3, r7, r3
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	2380      	movs	r3, #128	; 0x80
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	4013      	ands	r3, r2
 8008070:	d00b      	beq.n	800808a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2201      	movs	r2, #1
 8008078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2280      	movs	r2, #128	; 0x80
 800807e:	589b      	ldr	r3, [r3, r2]
 8008080:	2201      	movs	r2, #1
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2180      	movs	r1, #128	; 0x80
 8008088:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800808a:	23a4      	movs	r3, #164	; 0xa4
 800808c:	18fb      	adds	r3, r7, r3
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2202      	movs	r2, #2
 8008092:	4013      	ands	r3, r2
 8008094:	d011      	beq.n	80080ba <HAL_UART_IRQHandler+0xf6>
 8008096:	239c      	movs	r3, #156	; 0x9c
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2201      	movs	r2, #1
 800809e:	4013      	ands	r3, r2
 80080a0:	d00b      	beq.n	80080ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2202      	movs	r2, #2
 80080a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2280      	movs	r2, #128	; 0x80
 80080ae:	589b      	ldr	r3, [r3, r2]
 80080b0:	2204      	movs	r2, #4
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ba:	23a4      	movs	r3, #164	; 0xa4
 80080bc:	18fb      	adds	r3, r7, r3
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2204      	movs	r2, #4
 80080c2:	4013      	ands	r3, r2
 80080c4:	d011      	beq.n	80080ea <HAL_UART_IRQHandler+0x126>
 80080c6:	239c      	movs	r3, #156	; 0x9c
 80080c8:	18fb      	adds	r3, r7, r3
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2201      	movs	r2, #1
 80080ce:	4013      	ands	r3, r2
 80080d0:	d00b      	beq.n	80080ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2204      	movs	r2, #4
 80080d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2280      	movs	r2, #128	; 0x80
 80080de:	589b      	ldr	r3, [r3, r2]
 80080e0:	2202      	movs	r2, #2
 80080e2:	431a      	orrs	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2180      	movs	r1, #128	; 0x80
 80080e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080ea:	23a4      	movs	r3, #164	; 0xa4
 80080ec:	18fb      	adds	r3, r7, r3
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	4013      	ands	r3, r2
 80080f4:	d017      	beq.n	8008126 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080f6:	23a0      	movs	r3, #160	; 0xa0
 80080f8:	18fb      	adds	r3, r7, r3
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2220      	movs	r2, #32
 80080fe:	4013      	ands	r3, r2
 8008100:	d105      	bne.n	800810e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008102:	239c      	movs	r3, #156	; 0x9c
 8008104:	18fb      	adds	r3, r7, r3
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2201      	movs	r2, #1
 800810a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800810c:	d00b      	beq.n	8008126 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2208      	movs	r2, #8
 8008114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2280      	movs	r2, #128	; 0x80
 800811a:	589b      	ldr	r3, [r3, r2]
 800811c:	2208      	movs	r2, #8
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2180      	movs	r1, #128	; 0x80
 8008124:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008126:	23a4      	movs	r3, #164	; 0xa4
 8008128:	18fb      	adds	r3, r7, r3
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	2380      	movs	r3, #128	; 0x80
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	4013      	ands	r3, r2
 8008132:	d013      	beq.n	800815c <HAL_UART_IRQHandler+0x198>
 8008134:	23a0      	movs	r3, #160	; 0xa0
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	2380      	movs	r3, #128	; 0x80
 800813c:	04db      	lsls	r3, r3, #19
 800813e:	4013      	ands	r3, r2
 8008140:	d00c      	beq.n	800815c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2280      	movs	r2, #128	; 0x80
 8008148:	0112      	lsls	r2, r2, #4
 800814a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2280      	movs	r2, #128	; 0x80
 8008150:	589b      	ldr	r3, [r3, r2]
 8008152:	2220      	movs	r2, #32
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2280      	movs	r2, #128	; 0x80
 8008160:	589b      	ldr	r3, [r3, r2]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d100      	bne.n	8008168 <HAL_UART_IRQHandler+0x1a4>
 8008166:	e1df      	b.n	8008528 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008168:	23a4      	movs	r3, #164	; 0xa4
 800816a:	18fb      	adds	r3, r7, r3
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2220      	movs	r2, #32
 8008170:	4013      	ands	r3, r2
 8008172:	d00e      	beq.n	8008192 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008174:	23a0      	movs	r3, #160	; 0xa0
 8008176:	18fb      	adds	r3, r7, r3
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2220      	movs	r2, #32
 800817c:	4013      	ands	r3, r2
 800817e:	d008      	beq.n	8008192 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	0010      	movs	r0, r2
 8008190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2280      	movs	r2, #128	; 0x80
 8008196:	589b      	ldr	r3, [r3, r2]
 8008198:	2194      	movs	r1, #148	; 0x94
 800819a:	187a      	adds	r2, r7, r1
 800819c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2240      	movs	r2, #64	; 0x40
 80081a6:	4013      	ands	r3, r2
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d004      	beq.n	80081b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081ac:	187b      	adds	r3, r7, r1
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2228      	movs	r2, #40	; 0x28
 80081b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081b4:	d047      	beq.n	8008246 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 fdbf 	bl	8008d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2240      	movs	r2, #64	; 0x40
 80081c6:	4013      	ands	r3, r2
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	d137      	bne.n	800823c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081cc:	f3ef 8310 	mrs	r3, PRIMASK
 80081d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80081d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d4:	2090      	movs	r0, #144	; 0x90
 80081d6:	183a      	adds	r2, r7, r0
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	2301      	movs	r3, #1
 80081dc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e0:	f383 8810 	msr	PRIMASK, r3
}
 80081e4:	46c0      	nop			; (mov r8, r8)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2140      	movs	r1, #64	; 0x40
 80081f2:	438a      	bics	r2, r1
 80081f4:	609a      	str	r2, [r3, #8]
 80081f6:	183b      	adds	r3, r7, r0
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081fe:	f383 8810 	msr	PRIMASK, r3
}
 8008202:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008208:	2b00      	cmp	r3, #0
 800820a:	d012      	beq.n	8008232 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008210:	4a14      	ldr	r2, [pc, #80]	; (8008264 <HAL_UART_IRQHandler+0x2a0>)
 8008212:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008218:	0018      	movs	r0, r3
 800821a:	f7fc fb1b 	bl	8004854 <HAL_DMA_Abort_IT>
 800821e:	1e03      	subs	r3, r0, #0
 8008220:	d01a      	beq.n	8008258 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822c:	0018      	movs	r0, r3
 800822e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008230:	e012      	b.n	8008258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	0018      	movs	r0, r3
 8008236:	f000 f98d 	bl	8008554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823a:	e00d      	b.n	8008258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	0018      	movs	r0, r3
 8008240:	f000 f988 	bl	8008554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	e008      	b.n	8008258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	0018      	movs	r0, r3
 800824a:	f000 f983 	bl	8008554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	2100      	movs	r1, #0
 8008254:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008256:	e167      	b.n	8008528 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	46c0      	nop			; (mov r8, r8)
    return;
 800825a:	e165      	b.n	8008528 <HAL_UART_IRQHandler+0x564>
 800825c:	0000080f 	.word	0x0000080f
 8008260:	04000120 	.word	0x04000120
 8008264:	08008e01 	.word	0x08008e01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826c:	2b01      	cmp	r3, #1
 800826e:	d000      	beq.n	8008272 <HAL_UART_IRQHandler+0x2ae>
 8008270:	e131      	b.n	80084d6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008272:	23a4      	movs	r3, #164	; 0xa4
 8008274:	18fb      	adds	r3, r7, r3
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2210      	movs	r2, #16
 800827a:	4013      	ands	r3, r2
 800827c:	d100      	bne.n	8008280 <HAL_UART_IRQHandler+0x2bc>
 800827e:	e12a      	b.n	80084d6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008280:	23a0      	movs	r3, #160	; 0xa0
 8008282:	18fb      	adds	r3, r7, r3
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2210      	movs	r2, #16
 8008288:	4013      	ands	r3, r2
 800828a:	d100      	bne.n	800828e <HAL_UART_IRQHandler+0x2ca>
 800828c:	e123      	b.n	80084d6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2210      	movs	r2, #16
 8008294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	2240      	movs	r2, #64	; 0x40
 800829e:	4013      	ands	r3, r2
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d000      	beq.n	80082a6 <HAL_UART_IRQHandler+0x2e2>
 80082a4:	e09b      	b.n	80083de <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	217e      	movs	r1, #126	; 0x7e
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80082b4:	187b      	adds	r3, r7, r1
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d100      	bne.n	80082be <HAL_UART_IRQHandler+0x2fa>
 80082bc:	e136      	b.n	800852c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2258      	movs	r2, #88	; 0x58
 80082c2:	5a9b      	ldrh	r3, [r3, r2]
 80082c4:	187a      	adds	r2, r7, r1
 80082c6:	8812      	ldrh	r2, [r2, #0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d300      	bcc.n	80082ce <HAL_UART_IRQHandler+0x30a>
 80082cc:	e12e      	b.n	800852c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	187a      	adds	r2, r7, r1
 80082d2:	215a      	movs	r1, #90	; 0x5a
 80082d4:	8812      	ldrh	r2, [r2, #0]
 80082d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d06e      	beq.n	80083c0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082e2:	f3ef 8310 	mrs	r3, PRIMASK
 80082e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ec:	2301      	movs	r3, #1
 80082ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	f383 8810 	msr	PRIMASK, r3
}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	498e      	ldr	r1, [pc, #568]	; (800853c <HAL_UART_IRQHandler+0x578>)
 8008304:	400a      	ands	r2, r1
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	f383 8810 	msr	PRIMASK, r3
}
 8008312:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008314:	f3ef 8310 	mrs	r3, PRIMASK
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800831a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831c:	677b      	str	r3, [r7, #116]	; 0x74
 800831e:	2301      	movs	r3, #1
 8008320:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008324:	f383 8810 	msr	PRIMASK, r3
}
 8008328:	46c0      	nop			; (mov r8, r8)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2101      	movs	r1, #1
 8008336:	438a      	bics	r2, r1
 8008338:	609a      	str	r2, [r3, #8]
 800833a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800833c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008340:	f383 8810 	msr	PRIMASK, r3
}
 8008344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008346:	f3ef 8310 	mrs	r3, PRIMASK
 800834a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800834c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800834e:	673b      	str	r3, [r7, #112]	; 0x70
 8008350:	2301      	movs	r3, #1
 8008352:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008356:	f383 8810 	msr	PRIMASK, r3
}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2140      	movs	r1, #64	; 0x40
 8008368:	438a      	bics	r2, r1
 800836a:	609a      	str	r2, [r3, #8]
 800836c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800836e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008372:	f383 8810 	msr	PRIMASK, r3
}
 8008376:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008384:	f3ef 8310 	mrs	r3, PRIMASK
 8008388:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800838a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800838c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800838e:	2301      	movs	r3, #1
 8008390:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008394:	f383 8810 	msr	PRIMASK, r3
}
 8008398:	46c0      	nop			; (mov r8, r8)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2110      	movs	r1, #16
 80083a6:	438a      	bics	r2, r1
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b0:	f383 8810 	msr	PRIMASK, r3
}
 80083b4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ba:	0018      	movs	r0, r3
 80083bc:	f7fc fa12 	bl	80047e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2258      	movs	r2, #88	; 0x58
 80083c4:	5a9a      	ldrh	r2, [r3, r2]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	215a      	movs	r1, #90	; 0x5a
 80083ca:	5a5b      	ldrh	r3, [r3, r1]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	0011      	movs	r1, r2
 80083d6:	0018      	movs	r0, r3
 80083d8:	f000 f8c4 	bl	8008564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083dc:	e0a6      	b.n	800852c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2258      	movs	r2, #88	; 0x58
 80083e2:	5a99      	ldrh	r1, [r3, r2]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	225a      	movs	r2, #90	; 0x5a
 80083e8:	5a9b      	ldrh	r3, [r3, r2]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	208e      	movs	r0, #142	; 0x8e
 80083ee:	183b      	adds	r3, r7, r0
 80083f0:	1a8a      	subs	r2, r1, r2
 80083f2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	225a      	movs	r2, #90	; 0x5a
 80083f8:	5a9b      	ldrh	r3, [r3, r2]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d100      	bne.n	8008402 <HAL_UART_IRQHandler+0x43e>
 8008400:	e096      	b.n	8008530 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8008402:	183b      	adds	r3, r7, r0
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d100      	bne.n	800840c <HAL_UART_IRQHandler+0x448>
 800840a:	e091      	b.n	8008530 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840c:	f3ef 8310 	mrs	r3, PRIMASK
 8008410:	60fb      	str	r3, [r7, #12]
  return(result);
 8008412:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008414:	2488      	movs	r4, #136	; 0x88
 8008416:	193a      	adds	r2, r7, r4
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	2301      	movs	r3, #1
 800841c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f383 8810 	msr	PRIMASK, r3
}
 8008424:	46c0      	nop			; (mov r8, r8)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4943      	ldr	r1, [pc, #268]	; (8008540 <HAL_UART_IRQHandler+0x57c>)
 8008432:	400a      	ands	r2, r1
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	193b      	adds	r3, r7, r4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f383 8810 	msr	PRIMASK, r3
}
 8008442:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008444:	f3ef 8310 	mrs	r3, PRIMASK
 8008448:	61bb      	str	r3, [r7, #24]
  return(result);
 800844a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844c:	2484      	movs	r4, #132	; 0x84
 800844e:	193a      	adds	r2, r7, r4
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	2301      	movs	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	f383 8810 	msr	PRIMASK, r3
}
 800845c:	46c0      	nop			; (mov r8, r8)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2101      	movs	r1, #1
 800846a:	438a      	bics	r2, r1
 800846c:	609a      	str	r2, [r3, #8]
 800846e:	193b      	adds	r3, r7, r4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	f383 8810 	msr	PRIMASK, r3
}
 800847a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800848e:	f3ef 8310 	mrs	r3, PRIMASK
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008496:	2480      	movs	r4, #128	; 0x80
 8008498:	193a      	adds	r2, r7, r4
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	2301      	movs	r3, #1
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	f383 8810 	msr	PRIMASK, r3
}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2110      	movs	r1, #16
 80084b4:	438a      	bics	r2, r1
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	193b      	adds	r3, r7, r4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	f383 8810 	msr	PRIMASK, r3
}
 80084c4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084c6:	183b      	adds	r3, r7, r0
 80084c8:	881a      	ldrh	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	0011      	movs	r1, r2
 80084ce:	0018      	movs	r0, r3
 80084d0:	f000 f848 	bl	8008564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084d4:	e02c      	b.n	8008530 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084d6:	23a4      	movs	r3, #164	; 0xa4
 80084d8:	18fb      	adds	r3, r7, r3
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2280      	movs	r2, #128	; 0x80
 80084de:	4013      	ands	r3, r2
 80084e0:	d00f      	beq.n	8008502 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084e2:	23a0      	movs	r3, #160	; 0xa0
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2280      	movs	r2, #128	; 0x80
 80084ea:	4013      	ands	r3, r2
 80084ec:	d009      	beq.n	8008502 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d01e      	beq.n	8008534 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	0010      	movs	r0, r2
 80084fe:	4798      	blx	r3
    }
    return;
 8008500:	e018      	b.n	8008534 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008502:	23a4      	movs	r3, #164	; 0xa4
 8008504:	18fb      	adds	r3, r7, r3
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2240      	movs	r2, #64	; 0x40
 800850a:	4013      	ands	r3, r2
 800850c:	d013      	beq.n	8008536 <HAL_UART_IRQHandler+0x572>
 800850e:	23a0      	movs	r3, #160	; 0xa0
 8008510:	18fb      	adds	r3, r7, r3
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2240      	movs	r2, #64	; 0x40
 8008516:	4013      	ands	r3, r2
 8008518:	d00d      	beq.n	8008536 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0018      	movs	r0, r3
 800851e:	f000 fd3e 	bl	8008f9e <UART_EndTransmit_IT>
    return;
 8008522:	e008      	b.n	8008536 <HAL_UART_IRQHandler+0x572>
      return;
 8008524:	46c0      	nop			; (mov r8, r8)
 8008526:	e006      	b.n	8008536 <HAL_UART_IRQHandler+0x572>
    return;
 8008528:	46c0      	nop			; (mov r8, r8)
 800852a:	e004      	b.n	8008536 <HAL_UART_IRQHandler+0x572>
      return;
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	e002      	b.n	8008536 <HAL_UART_IRQHandler+0x572>
      return;
 8008530:	46c0      	nop			; (mov r8, r8)
 8008532:	e000      	b.n	8008536 <HAL_UART_IRQHandler+0x572>
    return;
 8008534:	46c0      	nop			; (mov r8, r8)
  }

}
 8008536:	46bd      	mov	sp, r7
 8008538:	b02b      	add	sp, #172	; 0xac
 800853a:	bd90      	pop	{r4, r7, pc}
 800853c:	fffffeff 	.word	0xfffffeff
 8008540:	fffffedf 	.word	0xfffffedf

08008544 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800854c:	46c0      	nop			; (mov r8, r8)
 800854e:	46bd      	mov	sp, r7
 8008550:	b002      	add	sp, #8
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800855c:	46c0      	nop			; (mov r8, r8)
 800855e:	46bd      	mov	sp, r7
 8008560:	b002      	add	sp, #8
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	000a      	movs	r2, r1
 800856e:	1cbb      	adds	r3, r7, #2
 8008570:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b002      	add	sp, #8
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008584:	231e      	movs	r3, #30
 8008586:	18fb      	adds	r3, r7, r3
 8008588:	2200      	movs	r2, #0
 800858a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4aa1      	ldr	r2, [pc, #644]	; (8008830 <UART_SetConfig+0x2b4>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	0019      	movs	r1, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a9c      	ldr	r2, [pc, #624]	; (8008834 <UART_SetConfig+0x2b8>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	0019      	movs	r1, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a93      	ldr	r2, [pc, #588]	; (8008838 <UART_SetConfig+0x2bc>)
 80085ea:	4013      	ands	r3, r2
 80085ec:	0019      	movs	r1, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a8f      	ldr	r2, [pc, #572]	; (800883c <UART_SetConfig+0x2c0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d127      	bne.n	8008652 <UART_SetConfig+0xd6>
 8008602:	4b8f      	ldr	r3, [pc, #572]	; (8008840 <UART_SetConfig+0x2c4>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	2203      	movs	r2, #3
 8008608:	4013      	ands	r3, r2
 800860a:	2b03      	cmp	r3, #3
 800860c:	d00d      	beq.n	800862a <UART_SetConfig+0xae>
 800860e:	d81b      	bhi.n	8008648 <UART_SetConfig+0xcc>
 8008610:	2b02      	cmp	r3, #2
 8008612:	d014      	beq.n	800863e <UART_SetConfig+0xc2>
 8008614:	d818      	bhi.n	8008648 <UART_SetConfig+0xcc>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <UART_SetConfig+0xa4>
 800861a:	2b01      	cmp	r3, #1
 800861c:	d00a      	beq.n	8008634 <UART_SetConfig+0xb8>
 800861e:	e013      	b.n	8008648 <UART_SetConfig+0xcc>
 8008620:	231f      	movs	r3, #31
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	2200      	movs	r2, #0
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e049      	b.n	80086be <UART_SetConfig+0x142>
 800862a:	231f      	movs	r3, #31
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	2202      	movs	r2, #2
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	e044      	b.n	80086be <UART_SetConfig+0x142>
 8008634:	231f      	movs	r3, #31
 8008636:	18fb      	adds	r3, r7, r3
 8008638:	2204      	movs	r2, #4
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	e03f      	b.n	80086be <UART_SetConfig+0x142>
 800863e:	231f      	movs	r3, #31
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	2208      	movs	r2, #8
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	e03a      	b.n	80086be <UART_SetConfig+0x142>
 8008648:	231f      	movs	r3, #31
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	2210      	movs	r2, #16
 800864e:	701a      	strb	r2, [r3, #0]
 8008650:	e035      	b.n	80086be <UART_SetConfig+0x142>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a7b      	ldr	r2, [pc, #492]	; (8008844 <UART_SetConfig+0x2c8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d104      	bne.n	8008666 <UART_SetConfig+0xea>
 800865c:	231f      	movs	r3, #31
 800865e:	18fb      	adds	r3, r7, r3
 8008660:	2200      	movs	r2, #0
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e02b      	b.n	80086be <UART_SetConfig+0x142>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a77      	ldr	r2, [pc, #476]	; (8008848 <UART_SetConfig+0x2cc>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d104      	bne.n	800867a <UART_SetConfig+0xfe>
 8008670:	231f      	movs	r3, #31
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e021      	b.n	80086be <UART_SetConfig+0x142>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a73      	ldr	r2, [pc, #460]	; (800884c <UART_SetConfig+0x2d0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d104      	bne.n	800868e <UART_SetConfig+0x112>
 8008684:	231f      	movs	r3, #31
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e017      	b.n	80086be <UART_SetConfig+0x142>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a6f      	ldr	r2, [pc, #444]	; (8008850 <UART_SetConfig+0x2d4>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d104      	bne.n	80086a2 <UART_SetConfig+0x126>
 8008698:	231f      	movs	r3, #31
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e00d      	b.n	80086be <UART_SetConfig+0x142>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a6b      	ldr	r2, [pc, #428]	; (8008854 <UART_SetConfig+0x2d8>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d104      	bne.n	80086b6 <UART_SetConfig+0x13a>
 80086ac:	231f      	movs	r3, #31
 80086ae:	18fb      	adds	r3, r7, r3
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	e003      	b.n	80086be <UART_SetConfig+0x142>
 80086b6:	231f      	movs	r3, #31
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	2210      	movs	r2, #16
 80086bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	69da      	ldr	r2, [r3, #28]
 80086c2:	2380      	movs	r3, #128	; 0x80
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d15d      	bne.n	8008786 <UART_SetConfig+0x20a>
  {
    switch (clocksource)
 80086ca:	231f      	movs	r3, #31
 80086cc:	18fb      	adds	r3, r7, r3
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d015      	beq.n	8008700 <UART_SetConfig+0x184>
 80086d4:	dc18      	bgt.n	8008708 <UART_SetConfig+0x18c>
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d00d      	beq.n	80086f6 <UART_SetConfig+0x17a>
 80086da:	dc15      	bgt.n	8008708 <UART_SetConfig+0x18c>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <UART_SetConfig+0x16a>
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d005      	beq.n	80086f0 <UART_SetConfig+0x174>
 80086e4:	e010      	b.n	8008708 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086e6:	f7fd fcf9 	bl	80060dc <HAL_RCC_GetPCLK1Freq>
 80086ea:	0003      	movs	r3, r0
 80086ec:	61bb      	str	r3, [r7, #24]
        break;
 80086ee:	e012      	b.n	8008716 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086f0:	4b59      	ldr	r3, [pc, #356]	; (8008858 <UART_SetConfig+0x2dc>)
 80086f2:	61bb      	str	r3, [r7, #24]
        break;
 80086f4:	e00f      	b.n	8008716 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086f6:	f7fd fc85 	bl	8006004 <HAL_RCC_GetSysClockFreq>
 80086fa:	0003      	movs	r3, r0
 80086fc:	61bb      	str	r3, [r7, #24]
        break;
 80086fe:	e00a      	b.n	8008716 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008700:	2380      	movs	r3, #128	; 0x80
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	61bb      	str	r3, [r7, #24]
        break;
 8008706:	e006      	b.n	8008716 <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800870c:	231e      	movs	r3, #30
 800870e:	18fb      	adds	r3, r7, r3
 8008710:	2201      	movs	r2, #1
 8008712:	701a      	strb	r2, [r3, #0]
        break;
 8008714:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d100      	bne.n	800871e <UART_SetConfig+0x1a2>
 800871c:	e07b      	b.n	8008816 <UART_SetConfig+0x29a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	005a      	lsls	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	18d2      	adds	r2, r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	0019      	movs	r1, r3
 8008730:	0010      	movs	r0, r2
 8008732:	f7f7 fd0d 	bl	8000150 <__udivsi3>
 8008736:	0003      	movs	r3, r0
 8008738:	b29b      	uxth	r3, r3
 800873a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b0f      	cmp	r3, #15
 8008740:	d91c      	bls.n	800877c <UART_SetConfig+0x200>
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	2380      	movs	r3, #128	; 0x80
 8008746:	025b      	lsls	r3, r3, #9
 8008748:	429a      	cmp	r2, r3
 800874a:	d217      	bcs.n	800877c <UART_SetConfig+0x200>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	b29a      	uxth	r2, r3
 8008750:	200e      	movs	r0, #14
 8008752:	183b      	adds	r3, r7, r0
 8008754:	210f      	movs	r1, #15
 8008756:	438a      	bics	r2, r1
 8008758:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	b29b      	uxth	r3, r3
 8008760:	2207      	movs	r2, #7
 8008762:	4013      	ands	r3, r2
 8008764:	b299      	uxth	r1, r3
 8008766:	183b      	adds	r3, r7, r0
 8008768:	183a      	adds	r2, r7, r0
 800876a:	8812      	ldrh	r2, [r2, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	183a      	adds	r2, r7, r0
 8008776:	8812      	ldrh	r2, [r2, #0]
 8008778:	60da      	str	r2, [r3, #12]
 800877a:	e04c      	b.n	8008816 <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 800877c:	231e      	movs	r3, #30
 800877e:	18fb      	adds	r3, r7, r3
 8008780:	2201      	movs	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e047      	b.n	8008816 <UART_SetConfig+0x29a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008786:	231f      	movs	r3, #31
 8008788:	18fb      	adds	r3, r7, r3
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b08      	cmp	r3, #8
 800878e:	d015      	beq.n	80087bc <UART_SetConfig+0x240>
 8008790:	dc18      	bgt.n	80087c4 <UART_SetConfig+0x248>
 8008792:	2b04      	cmp	r3, #4
 8008794:	d00d      	beq.n	80087b2 <UART_SetConfig+0x236>
 8008796:	dc15      	bgt.n	80087c4 <UART_SetConfig+0x248>
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <UART_SetConfig+0x226>
 800879c:	2b02      	cmp	r3, #2
 800879e:	d005      	beq.n	80087ac <UART_SetConfig+0x230>
 80087a0:	e010      	b.n	80087c4 <UART_SetConfig+0x248>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087a2:	f7fd fc9b 	bl	80060dc <HAL_RCC_GetPCLK1Freq>
 80087a6:	0003      	movs	r3, r0
 80087a8:	61bb      	str	r3, [r7, #24]
        break;
 80087aa:	e012      	b.n	80087d2 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087ac:	4b2a      	ldr	r3, [pc, #168]	; (8008858 <UART_SetConfig+0x2dc>)
 80087ae:	61bb      	str	r3, [r7, #24]
        break;
 80087b0:	e00f      	b.n	80087d2 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087b2:	f7fd fc27 	bl	8006004 <HAL_RCC_GetSysClockFreq>
 80087b6:	0003      	movs	r3, r0
 80087b8:	61bb      	str	r3, [r7, #24]
        break;
 80087ba:	e00a      	b.n	80087d2 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087bc:	2380      	movs	r3, #128	; 0x80
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	61bb      	str	r3, [r7, #24]
        break;
 80087c2:	e006      	b.n	80087d2 <UART_SetConfig+0x256>
      default:
        pclk = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087c8:	231e      	movs	r3, #30
 80087ca:	18fb      	adds	r3, r7, r3
 80087cc:	2201      	movs	r2, #1
 80087ce:	701a      	strb	r2, [r3, #0]
        break;
 80087d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01e      	beq.n	8008816 <UART_SetConfig+0x29a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	085a      	lsrs	r2, r3, #1
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	18d2      	adds	r2, r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	0019      	movs	r1, r3
 80087e8:	0010      	movs	r0, r2
 80087ea:	f7f7 fcb1 	bl	8000150 <__udivsi3>
 80087ee:	0003      	movs	r3, r0
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b0f      	cmp	r3, #15
 80087f8:	d909      	bls.n	800880e <UART_SetConfig+0x292>
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	025b      	lsls	r3, r3, #9
 8008800:	429a      	cmp	r2, r3
 8008802:	d204      	bcs.n	800880e <UART_SetConfig+0x292>
      {
        huart->Instance->BRR = usartdiv;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	60da      	str	r2, [r3, #12]
 800880c:	e003      	b.n	8008816 <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 800880e:	231e      	movs	r3, #30
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	2201      	movs	r2, #1
 8008814:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008822:	231e      	movs	r3, #30
 8008824:	18fb      	adds	r3, r7, r3
 8008826:	781b      	ldrb	r3, [r3, #0]
}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b008      	add	sp, #32
 800882e:	bd80      	pop	{r7, pc}
 8008830:	efff69f3 	.word	0xefff69f3
 8008834:	ffffcfff 	.word	0xffffcfff
 8008838:	fffff4ff 	.word	0xfffff4ff
 800883c:	40013800 	.word	0x40013800
 8008840:	40021000 	.word	0x40021000
 8008844:	40004400 	.word	0x40004400
 8008848:	40004800 	.word	0x40004800
 800884c:	40004c00 	.word	0x40004c00
 8008850:	40005000 	.word	0x40005000
 8008854:	40011400 	.word	0x40011400
 8008858:	007a1200 	.word	0x007a1200

0800885c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2201      	movs	r2, #1
 800886a:	4013      	ands	r3, r2
 800886c:	d00b      	beq.n	8008886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	4a4a      	ldr	r2, [pc, #296]	; (80089a0 <UART_AdvFeatureConfig+0x144>)
 8008876:	4013      	ands	r3, r2
 8008878:	0019      	movs	r1, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	2202      	movs	r2, #2
 800888c:	4013      	ands	r3, r2
 800888e:	d00b      	beq.n	80088a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4a43      	ldr	r2, [pc, #268]	; (80089a4 <UART_AdvFeatureConfig+0x148>)
 8008898:	4013      	ands	r3, r2
 800889a:	0019      	movs	r1, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2204      	movs	r2, #4
 80088ae:	4013      	ands	r3, r2
 80088b0:	d00b      	beq.n	80088ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a3b      	ldr	r2, [pc, #236]	; (80089a8 <UART_AdvFeatureConfig+0x14c>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	0019      	movs	r1, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2208      	movs	r2, #8
 80088d0:	4013      	ands	r3, r2
 80088d2:	d00b      	beq.n	80088ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4a34      	ldr	r2, [pc, #208]	; (80089ac <UART_AdvFeatureConfig+0x150>)
 80088dc:	4013      	ands	r3, r2
 80088de:	0019      	movs	r1, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2210      	movs	r2, #16
 80088f2:	4013      	ands	r3, r2
 80088f4:	d00b      	beq.n	800890e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	4a2c      	ldr	r2, [pc, #176]	; (80089b0 <UART_AdvFeatureConfig+0x154>)
 80088fe:	4013      	ands	r3, r2
 8008900:	0019      	movs	r1, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	2220      	movs	r2, #32
 8008914:	4013      	ands	r3, r2
 8008916:	d00b      	beq.n	8008930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	4a25      	ldr	r2, [pc, #148]	; (80089b4 <UART_AdvFeatureConfig+0x158>)
 8008920:	4013      	ands	r3, r2
 8008922:	0019      	movs	r1, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2240      	movs	r2, #64	; 0x40
 8008936:	4013      	ands	r3, r2
 8008938:	d01d      	beq.n	8008976 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <UART_AdvFeatureConfig+0x15c>)
 8008942:	4013      	ands	r3, r2
 8008944:	0019      	movs	r1, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008956:	2380      	movs	r3, #128	; 0x80
 8008958:	035b      	lsls	r3, r3, #13
 800895a:	429a      	cmp	r2, r3
 800895c:	d10b      	bne.n	8008976 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	4a15      	ldr	r2, [pc, #84]	; (80089bc <UART_AdvFeatureConfig+0x160>)
 8008966:	4013      	ands	r3, r2
 8008968:	0019      	movs	r1, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2280      	movs	r2, #128	; 0x80
 800897c:	4013      	ands	r3, r2
 800897e:	d00b      	beq.n	8008998 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	4a0e      	ldr	r2, [pc, #56]	; (80089c0 <UART_AdvFeatureConfig+0x164>)
 8008988:	4013      	ands	r3, r2
 800898a:	0019      	movs	r1, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	605a      	str	r2, [r3, #4]
  }
}
 8008998:	46c0      	nop			; (mov r8, r8)
 800899a:	46bd      	mov	sp, r7
 800899c:	b002      	add	sp, #8
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	fffdffff 	.word	0xfffdffff
 80089a4:	fffeffff 	.word	0xfffeffff
 80089a8:	fffbffff 	.word	0xfffbffff
 80089ac:	ffff7fff 	.word	0xffff7fff
 80089b0:	ffffefff 	.word	0xffffefff
 80089b4:	ffffdfff 	.word	0xffffdfff
 80089b8:	ffefffff 	.word	0xffefffff
 80089bc:	ff9fffff 	.word	0xff9fffff
 80089c0:	fff7ffff 	.word	0xfff7ffff

080089c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2280      	movs	r2, #128	; 0x80
 80089d0:	2100      	movs	r1, #0
 80089d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089d4:	f7fb fdfa 	bl	80045cc <HAL_GetTick>
 80089d8:	0003      	movs	r3, r0
 80089da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2208      	movs	r2, #8
 80089e4:	4013      	ands	r3, r2
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d10c      	bne.n	8008a04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2280      	movs	r2, #128	; 0x80
 80089ee:	0391      	lsls	r1, r2, #14
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4a17      	ldr	r2, [pc, #92]	; (8008a50 <UART_CheckIdleState+0x8c>)
 80089f4:	9200      	str	r2, [sp, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f000 f82c 	bl	8008a54 <UART_WaitOnFlagUntilTimeout>
 80089fc:	1e03      	subs	r3, r0, #0
 80089fe:	d001      	beq.n	8008a04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e021      	b.n	8008a48 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2204      	movs	r2, #4
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d10c      	bne.n	8008a2c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2280      	movs	r2, #128	; 0x80
 8008a16:	03d1      	lsls	r1, r2, #15
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	4a0d      	ldr	r2, [pc, #52]	; (8008a50 <UART_CheckIdleState+0x8c>)
 8008a1c:	9200      	str	r2, [sp, #0]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f000 f818 	bl	8008a54 <UART_WaitOnFlagUntilTimeout>
 8008a24:	1e03      	subs	r3, r0, #0
 8008a26:	d001      	beq.n	8008a2c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e00d      	b.n	8008a48 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2274      	movs	r2, #116	; 0x74
 8008a42:	2100      	movs	r1, #0
 8008a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	0018      	movs	r0, r3
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	b004      	add	sp, #16
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	01ffffff 	.word	0x01ffffff

08008a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b094      	sub	sp, #80	; 0x50
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	1dfb      	adds	r3, r7, #7
 8008a62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a64:	e0a3      	b.n	8008bae <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a68:	3301      	adds	r3, #1
 8008a6a:	d100      	bne.n	8008a6e <UART_WaitOnFlagUntilTimeout+0x1a>
 8008a6c:	e09f      	b.n	8008bae <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a6e:	f7fb fdad 	bl	80045cc <HAL_GetTick>
 8008a72:	0002      	movs	r2, r0
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d302      	bcc.n	8008a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d13d      	bne.n	8008b00 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a84:	f3ef 8310 	mrs	r3, PRIMASK
 8008a88:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8e:	2301      	movs	r3, #1
 8008a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	f383 8810 	msr	PRIMASK, r3
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	494c      	ldr	r1, [pc, #304]	; (8008bd8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008aa6:	400a      	ands	r2, r1
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	f383 8810 	msr	PRIMASK, r3
}
 8008ab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abe:	643b      	str	r3, [r7, #64]	; 0x40
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	f383 8810 	msr	PRIMASK, r3
}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	438a      	bics	r2, r1
 8008ada:	609a      	str	r2, [r3, #8]
 8008adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae2:	f383 8810 	msr	PRIMASK, r3
}
 8008ae6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2274      	movs	r2, #116	; 0x74
 8008af8:	2100      	movs	r1, #0
 8008afa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e067      	b.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2204      	movs	r2, #4
 8008b08:	4013      	ands	r3, r2
 8008b0a:	d050      	beq.n	8008bae <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	69da      	ldr	r2, [r3, #28]
 8008b12:	2380      	movs	r3, #128	; 0x80
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	401a      	ands	r2, r3
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d146      	bne.n	8008bae <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2280      	movs	r2, #128	; 0x80
 8008b26:	0112      	lsls	r2, r2, #4
 8008b28:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b2e:	613b      	str	r3, [r7, #16]
  return(result);
 8008b30:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b34:	2301      	movs	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f383 8810 	msr	PRIMASK, r3
}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4923      	ldr	r1, [pc, #140]	; (8008bd8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008b4c:	400a      	ands	r2, r1
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	f383 8810 	msr	PRIMASK, r3
}
 8008b5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b60:	61fb      	str	r3, [r7, #28]
  return(result);
 8008b62:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b66:	2301      	movs	r3, #1
 8008b68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	f383 8810 	msr	PRIMASK, r3
}
 8008b70:	46c0      	nop			; (mov r8, r8)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	438a      	bics	r2, r1
 8008b80:	609a      	str	r2, [r3, #8]
 8008b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	f383 8810 	msr	PRIMASK, r3
}
 8008b8c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2280      	movs	r2, #128	; 0x80
 8008b9e:	2120      	movs	r1, #32
 8008ba0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2274      	movs	r2, #116	; 0x74
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e010      	b.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	425a      	negs	r2, r3
 8008bbe:	4153      	adcs	r3, r2
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	001a      	movs	r2, r3
 8008bc4:	1dfb      	adds	r3, r7, #7
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d100      	bne.n	8008bce <UART_WaitOnFlagUntilTimeout+0x17a>
 8008bcc:	e74b      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b014      	add	sp, #80	; 0x50
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	fffffe5f 	.word	0xfffffe5f

08008bdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08c      	sub	sp, #48	; 0x30
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	1dbb      	adds	r3, r7, #6
 8008be8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	1dba      	adds	r2, r7, #6
 8008bf4:	2158      	movs	r1, #88	; 0x58
 8008bf6:	8812      	ldrh	r2, [r2, #0]
 8008bf8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	1dba      	adds	r2, r7, #6
 8008bfe:	215a      	movs	r1, #90	; 0x5a
 8008c00:	8812      	ldrh	r2, [r2, #0]
 8008c02:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	2380      	movs	r3, #128	; 0x80
 8008c10:	015b      	lsls	r3, r3, #5
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d10d      	bne.n	8008c32 <UART_Start_Receive_IT+0x56>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <UART_Start_Receive_IT+0x4c>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	225c      	movs	r2, #92	; 0x5c
 8008c22:	4943      	ldr	r1, [pc, #268]	; (8008d30 <UART_Start_Receive_IT+0x154>)
 8008c24:	5299      	strh	r1, [r3, r2]
 8008c26:	e02e      	b.n	8008c86 <UART_Start_Receive_IT+0xaa>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	225c      	movs	r2, #92	; 0x5c
 8008c2c:	21ff      	movs	r1, #255	; 0xff
 8008c2e:	5299      	strh	r1, [r3, r2]
 8008c30:	e029      	b.n	8008c86 <UART_Start_Receive_IT+0xaa>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10d      	bne.n	8008c56 <UART_Start_Receive_IT+0x7a>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <UART_Start_Receive_IT+0x70>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	225c      	movs	r2, #92	; 0x5c
 8008c46:	21ff      	movs	r1, #255	; 0xff
 8008c48:	5299      	strh	r1, [r3, r2]
 8008c4a:	e01c      	b.n	8008c86 <UART_Start_Receive_IT+0xaa>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	225c      	movs	r2, #92	; 0x5c
 8008c50:	217f      	movs	r1, #127	; 0x7f
 8008c52:	5299      	strh	r1, [r3, r2]
 8008c54:	e017      	b.n	8008c86 <UART_Start_Receive_IT+0xaa>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	2380      	movs	r3, #128	; 0x80
 8008c5c:	055b      	lsls	r3, r3, #21
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d10d      	bne.n	8008c7e <UART_Start_Receive_IT+0xa2>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <UART_Start_Receive_IT+0x98>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	225c      	movs	r2, #92	; 0x5c
 8008c6e:	217f      	movs	r1, #127	; 0x7f
 8008c70:	5299      	strh	r1, [r3, r2]
 8008c72:	e008      	b.n	8008c86 <UART_Start_Receive_IT+0xaa>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	225c      	movs	r2, #92	; 0x5c
 8008c78:	213f      	movs	r1, #63	; 0x3f
 8008c7a:	5299      	strh	r1, [r3, r2]
 8008c7c:	e003      	b.n	8008c86 <UART_Start_Receive_IT+0xaa>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	225c      	movs	r2, #92	; 0x5c
 8008c82:	2100      	movs	r1, #0
 8008c84:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2280      	movs	r2, #128	; 0x80
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2222      	movs	r2, #34	; 0x22
 8008c92:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c94:	f3ef 8310 	mrs	r3, PRIMASK
 8008c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c9a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	f383 8810 	msr	PRIMASK, r3
}
 8008ca8:	46c0      	nop			; (mov r8, r8)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	609a      	str	r2, [r3, #8]
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	f383 8810 	msr	PRIMASK, r3
}
 8008cc4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	2380      	movs	r3, #128	; 0x80
 8008ccc:	015b      	lsls	r3, r3, #5
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d107      	bne.n	8008ce2 <UART_Start_Receive_IT+0x106>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d103      	bne.n	8008ce2 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4a15      	ldr	r2, [pc, #84]	; (8008d34 <UART_Start_Receive_IT+0x158>)
 8008cde:	665a      	str	r2, [r3, #100]	; 0x64
 8008ce0:	e002      	b.n	8008ce8 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4a14      	ldr	r2, [pc, #80]	; (8008d38 <UART_Start_Receive_IT+0x15c>)
 8008ce6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2274      	movs	r2, #116	; 0x74
 8008cec:	2100      	movs	r1, #0
 8008cee:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8008cf4:	613b      	str	r3, [r7, #16]
  return(result);
 8008cf6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f383 8810 	msr	PRIMASK, r3
}
 8008d04:	46c0      	nop			; (mov r8, r8)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2190      	movs	r1, #144	; 0x90
 8008d12:	0049      	lsls	r1, r1, #1
 8008d14:	430a      	orrs	r2, r1
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	f383 8810 	msr	PRIMASK, r3
}
 8008d22:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	0018      	movs	r0, r3
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	b00c      	add	sp, #48	; 0x30
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	46c0      	nop			; (mov r8, r8)
 8008d30:	000001ff 	.word	0x000001ff
 8008d34:	0800915d 	.word	0x0800915d
 8008d38:	08008ff5 	.word	0x08008ff5

08008d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08e      	sub	sp, #56	; 0x38
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d44:	f3ef 8310 	mrs	r3, PRIMASK
 8008d48:	617b      	str	r3, [r7, #20]
  return(result);
 8008d4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4e:	2301      	movs	r3, #1
 8008d50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f383 8810 	msr	PRIMASK, r3
}
 8008d58:	46c0      	nop			; (mov r8, r8)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4925      	ldr	r1, [pc, #148]	; (8008dfc <UART_EndRxTransfer+0xc0>)
 8008d66:	400a      	ands	r2, r1
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	f383 8810 	msr	PRIMASK, r3
}
 8008d74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d76:	f3ef 8310 	mrs	r3, PRIMASK
 8008d7a:	623b      	str	r3, [r7, #32]
  return(result);
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d80:	2301      	movs	r3, #1
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	f383 8810 	msr	PRIMASK, r3
}
 8008d8a:	46c0      	nop			; (mov r8, r8)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2101      	movs	r1, #1
 8008d98:	438a      	bics	r2, r1
 8008d9a:	609a      	str	r2, [r3, #8]
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	f383 8810 	msr	PRIMASK, r3
}
 8008da6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d118      	bne.n	8008de2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db0:	f3ef 8310 	mrs	r3, PRIMASK
 8008db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008db6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dba:	2301      	movs	r3, #1
 8008dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f383 8810 	msr	PRIMASK, r3
}
 8008dc4:	46c0      	nop			; (mov r8, r8)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2110      	movs	r1, #16
 8008dd2:	438a      	bics	r2, r1
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f383 8810 	msr	PRIMASK, r3
}
 8008de0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008df4:	46c0      	nop			; (mov r8, r8)
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b00e      	add	sp, #56	; 0x38
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	fffffedf 	.word	0xfffffedf

08008e00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	225a      	movs	r2, #90	; 0x5a
 8008e12:	2100      	movs	r1, #0
 8008e14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2252      	movs	r2, #82	; 0x52
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	0018      	movs	r0, r3
 8008e22:	f7ff fb97 	bl	8008554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	b004      	add	sp, #16
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b08a      	sub	sp, #40	; 0x28
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3a:	2b21      	cmp	r3, #33	; 0x21
 8008e3c:	d14d      	bne.n	8008eda <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2252      	movs	r2, #82	; 0x52
 8008e42:	5a9b      	ldrh	r3, [r3, r2]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d132      	bne.n	8008eb0 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e50:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
 8008e54:	2301      	movs	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f383 8810 	msr	PRIMASK, r3
}
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2180      	movs	r1, #128	; 0x80
 8008e6c:	438a      	bics	r2, r1
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f383 8810 	msr	PRIMASK, r3
}
 8008e7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e80:	617b      	str	r3, [r7, #20]
  return(result);
 8008e82:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	2301      	movs	r3, #1
 8008e88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	f383 8810 	msr	PRIMASK, r3
}
 8008e90:	46c0      	nop			; (mov r8, r8)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2140      	movs	r1, #64	; 0x40
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	f383 8810 	msr	PRIMASK, r3
}
 8008eac:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008eae:	e014      	b.n	8008eda <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	b292      	uxth	r2, r2
 8008ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2252      	movs	r2, #82	; 0x52
 8008ecc:	5a9b      	ldrh	r3, [r3, r2]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b299      	uxth	r1, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2252      	movs	r2, #82	; 0x52
 8008ed8:	5299      	strh	r1, [r3, r2]
}
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	46bd      	mov	sp, r7
 8008ede:	b00a      	add	sp, #40	; 0x28
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b08c      	sub	sp, #48	; 0x30
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eee:	2b21      	cmp	r3, #33	; 0x21
 8008ef0:	d151      	bne.n	8008f96 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2252      	movs	r2, #82	; 0x52
 8008ef6:	5a9b      	ldrh	r3, [r3, r2]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d132      	bne.n	8008f64 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efe:	f3ef 8310 	mrs	r3, PRIMASK
 8008f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f04:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f08:	2301      	movs	r3, #1
 8008f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f383 8810 	msr	PRIMASK, r3
}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2180      	movs	r1, #128	; 0x80
 8008f20:	438a      	bics	r2, r1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f383 8810 	msr	PRIMASK, r3
}
 8008f2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f30:	f3ef 8310 	mrs	r3, PRIMASK
 8008f34:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f36:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	f383 8810 	msr	PRIMASK, r3
}
 8008f44:	46c0      	nop			; (mov r8, r8)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2140      	movs	r1, #64	; 0x40
 8008f52:	430a      	orrs	r2, r1
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	f383 8810 	msr	PRIMASK, r3
}
 8008f60:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008f62:	e018      	b.n	8008f96 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	881a      	ldrh	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	05d2      	lsls	r2, r2, #23
 8008f74:	0dd2      	lsrs	r2, r2, #23
 8008f76:	b292      	uxth	r2, r2
 8008f78:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	1c9a      	adds	r2, r3, #2
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2252      	movs	r2, #82	; 0x52
 8008f88:	5a9b      	ldrh	r3, [r3, r2]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b299      	uxth	r1, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2252      	movs	r2, #82	; 0x52
 8008f94:	5299      	strh	r1, [r3, r2]
}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	b00c      	add	sp, #48	; 0x30
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b086      	sub	sp, #24
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8008faa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f383 8810 	msr	PRIMASK, r3
}
 8008fba:	46c0      	nop			; (mov r8, r8)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2140      	movs	r1, #64	; 0x40
 8008fc8:	438a      	bics	r2, r1
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f383 8810 	msr	PRIMASK, r3
}
 8008fd6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f7ff faac 	bl	8008544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fec:	46c0      	nop			; (mov r8, r8)
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	b006      	add	sp, #24
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b090      	sub	sp, #64	; 0x40
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ffc:	203e      	movs	r0, #62	; 0x3e
 8008ffe:	183b      	adds	r3, r7, r0
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	215c      	movs	r1, #92	; 0x5c
 8009004:	5a52      	ldrh	r2, [r2, r1]
 8009006:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800900c:	2b22      	cmp	r3, #34	; 0x22
 800900e:	d000      	beq.n	8009012 <UART_RxISR_8BIT+0x1e>
 8009010:	e095      	b.n	800913e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	213c      	movs	r1, #60	; 0x3c
 8009018:	187b      	adds	r3, r7, r1
 800901a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800901c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800901e:	187b      	adds	r3, r7, r1
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	b2da      	uxtb	r2, r3
 8009024:	183b      	adds	r3, r7, r0
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	b2d9      	uxtb	r1, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902e:	400a      	ands	r2, r1
 8009030:	b2d2      	uxtb	r2, r2
 8009032:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	225a      	movs	r2, #90	; 0x5a
 8009042:	5a9b      	ldrh	r3, [r3, r2]
 8009044:	b29b      	uxth	r3, r3
 8009046:	3b01      	subs	r3, #1
 8009048:	b299      	uxth	r1, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	225a      	movs	r2, #90	; 0x5a
 800904e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	225a      	movs	r2, #90	; 0x5a
 8009054:	5a9b      	ldrh	r3, [r3, r2]
 8009056:	b29b      	uxth	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d178      	bne.n	800914e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800905c:	f3ef 8310 	mrs	r3, PRIMASK
 8009060:	61bb      	str	r3, [r7, #24]
  return(result);
 8009062:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009064:	63bb      	str	r3, [r7, #56]	; 0x38
 8009066:	2301      	movs	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	f383 8810 	msr	PRIMASK, r3
}
 8009070:	46c0      	nop			; (mov r8, r8)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4936      	ldr	r1, [pc, #216]	; (8009158 <UART_RxISR_8BIT+0x164>)
 800907e:	400a      	ands	r2, r1
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	f383 8810 	msr	PRIMASK, r3
}
 800908c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800908e:	f3ef 8310 	mrs	r3, PRIMASK
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	637b      	str	r3, [r7, #52]	; 0x34
 8009098:	2301      	movs	r3, #1
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f383 8810 	msr	PRIMASK, r3
}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2101      	movs	r1, #1
 80090b0:	438a      	bics	r2, r1
 80090b2:	609a      	str	r2, [r3, #8]
 80090b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	f383 8810 	msr	PRIMASK, r3
}
 80090be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d12f      	bne.n	8009134 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090da:	f3ef 8310 	mrs	r3, PRIMASK
 80090de:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e2:	633b      	str	r3, [r7, #48]	; 0x30
 80090e4:	2301      	movs	r3, #1
 80090e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f383 8810 	msr	PRIMASK, r3
}
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2110      	movs	r1, #16
 80090fc:	438a      	bics	r2, r1
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f383 8810 	msr	PRIMASK, r3
}
 800910a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	2210      	movs	r2, #16
 8009114:	4013      	ands	r3, r2
 8009116:	2b10      	cmp	r3, #16
 8009118:	d103      	bne.n	8009122 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2210      	movs	r2, #16
 8009120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2258      	movs	r2, #88	; 0x58
 8009126:	5a9a      	ldrh	r2, [r3, r2]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	0011      	movs	r1, r2
 800912c:	0018      	movs	r0, r3
 800912e:	f7ff fa19 	bl	8008564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009132:	e00c      	b.n	800914e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	0018      	movs	r0, r3
 8009138:	f7fa fdde 	bl	8003cf8 <HAL_UART_RxCpltCallback>
}
 800913c:	e007      	b.n	800914e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2108      	movs	r1, #8
 800914a:	430a      	orrs	r2, r1
 800914c:	619a      	str	r2, [r3, #24]
}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	46bd      	mov	sp, r7
 8009152:	b010      	add	sp, #64	; 0x40
 8009154:	bd80      	pop	{r7, pc}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	fffffedf 	.word	0xfffffedf

0800915c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b090      	sub	sp, #64	; 0x40
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009164:	203e      	movs	r0, #62	; 0x3e
 8009166:	183b      	adds	r3, r7, r0
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	215c      	movs	r1, #92	; 0x5c
 800916c:	5a52      	ldrh	r2, [r2, r1]
 800916e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009174:	2b22      	cmp	r3, #34	; 0x22
 8009176:	d000      	beq.n	800917a <UART_RxISR_16BIT+0x1e>
 8009178:	e095      	b.n	80092a6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	213c      	movs	r1, #60	; 0x3c
 8009180:	187b      	adds	r3, r7, r1
 8009182:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8009184:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800918c:	187b      	adds	r3, r7, r1
 800918e:	183a      	adds	r2, r7, r0
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	8812      	ldrh	r2, [r2, #0]
 8009194:	4013      	ands	r3, r2
 8009196:	b29a      	uxth	r2, r3
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a0:	1c9a      	adds	r2, r3, #2
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	225a      	movs	r2, #90	; 0x5a
 80091aa:	5a9b      	ldrh	r3, [r3, r2]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b299      	uxth	r1, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	225a      	movs	r2, #90	; 0x5a
 80091b6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	225a      	movs	r2, #90	; 0x5a
 80091bc:	5a9b      	ldrh	r3, [r3, r2]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d178      	bne.n	80092b6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c4:	f3ef 8310 	mrs	r3, PRIMASK
 80091c8:	617b      	str	r3, [r7, #20]
  return(result);
 80091ca:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
 80091ce:	2301      	movs	r3, #1
 80091d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	f383 8810 	msr	PRIMASK, r3
}
 80091d8:	46c0      	nop			; (mov r8, r8)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4936      	ldr	r1, [pc, #216]	; (80092c0 <UART_RxISR_16BIT+0x164>)
 80091e6:	400a      	ands	r2, r1
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	f383 8810 	msr	PRIMASK, r3
}
 80091f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f6:	f3ef 8310 	mrs	r3, PRIMASK
 80091fa:	623b      	str	r3, [r7, #32]
  return(result);
 80091fc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009200:	2301      	movs	r3, #1
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	f383 8810 	msr	PRIMASK, r3
}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2101      	movs	r1, #1
 8009218:	438a      	bics	r2, r1
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	f383 8810 	msr	PRIMASK, r3
}
 8009226:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2220      	movs	r2, #32
 800922c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009238:	2b01      	cmp	r3, #1
 800923a:	d12f      	bne.n	800929c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009242:	f3ef 8310 	mrs	r3, PRIMASK
 8009246:	60bb      	str	r3, [r7, #8]
  return(result);
 8009248:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924c:	2301      	movs	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f383 8810 	msr	PRIMASK, r3
}
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2110      	movs	r1, #16
 8009264:	438a      	bics	r2, r1
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f383 8810 	msr	PRIMASK, r3
}
 8009272:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	2210      	movs	r2, #16
 800927c:	4013      	ands	r3, r2
 800927e:	2b10      	cmp	r3, #16
 8009280:	d103      	bne.n	800928a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2210      	movs	r2, #16
 8009288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2258      	movs	r2, #88	; 0x58
 800928e:	5a9a      	ldrh	r2, [r3, r2]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	0011      	movs	r1, r2
 8009294:	0018      	movs	r0, r3
 8009296:	f7ff f965 	bl	8008564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800929a:	e00c      	b.n	80092b6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	0018      	movs	r0, r3
 80092a0:	f7fa fd2a 	bl	8003cf8 <HAL_UART_RxCpltCallback>
}
 80092a4:	e007      	b.n	80092b6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2108      	movs	r1, #8
 80092b2:	430a      	orrs	r2, r1
 80092b4:	619a      	str	r2, [r3, #24]
}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b010      	add	sp, #64	; 0x40
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	fffffedf 	.word	0xfffffedf

080092c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80092c8:	4a06      	ldr	r2, [pc, #24]	; (80092e4 <MX_FATFS_Init+0x20>)
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <MX_FATFS_Init+0x24>)
 80092cc:	0011      	movs	r1, r2
 80092ce:	0018      	movs	r0, r3
 80092d0:	f003 fb56 	bl	800c980 <FATFS_LinkDriver>
 80092d4:	0003      	movs	r3, r0
 80092d6:	001a      	movs	r2, r3
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <MX_FATFS_Init+0x28>)
 80092da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80092dc:	46c0      	nop			; (mov r8, r8)
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	20002704 	.word	0x20002704
 80092e8:	2000000c 	.word	0x2000000c
 80092ec:	20002700 	.word	0x20002700

080092f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80092f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	0002      	movs	r2, r0
 8009304:	1dfb      	adds	r3, r7, #7
 8009306:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 8009308:	1dfb      	adds	r3, r7, #7
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	0018      	movs	r0, r3
 800930e:	f004 fec5 	bl	800e09c <SD_disk_initialize>
 8009312:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	b002      	add	sp, #8
 800931a:	bd80      	pop	{r7, pc}

0800931c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	0002      	movs	r2, r0
 8009324:	1dfb      	adds	r3, r7, #7
 8009326:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 8009328:	1dfb      	adds	r3, r7, #7
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	0018      	movs	r0, r3
 800932e:	f004 ffd1 	bl	800e2d4 <SD_disk_status>
 8009332:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8009334:	0018      	movs	r0, r3
 8009336:	46bd      	mov	sp, r7
 8009338:	b002      	add	sp, #8
 800933a:	bd80      	pop	{r7, pc}

0800933c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800933c:	b5b0      	push	{r4, r5, r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	250f      	movs	r5, #15
 800934a:	197b      	adds	r3, r7, r5
 800934c:	1c02      	adds	r2, r0, #0
 800934e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8009350:	683c      	ldr	r4, [r7, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	197b      	adds	r3, r7, r5
 8009358:	7818      	ldrb	r0, [r3, #0]
 800935a:	0023      	movs	r3, r4
 800935c:	f004 ffd0 	bl	800e300 <SD_disk_read>
 8009360:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8009362:	0018      	movs	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	b004      	add	sp, #16
 8009368:	bdb0      	pop	{r4, r5, r7, pc}

0800936a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800936a:	b5b0      	push	{r4, r5, r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
 8009376:	250f      	movs	r5, #15
 8009378:	197b      	adds	r3, r7, r5
 800937a:	1c02      	adds	r2, r0, #0
 800937c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800937e:	683c      	ldr	r4, [r7, #0]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	197b      	adds	r3, r7, r5
 8009386:	7818      	ldrb	r0, [r3, #0]
 8009388:	0023      	movs	r3, r4
 800938a:	f005 f829 	bl	800e3e0 <SD_disk_write>
 800938e:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	b004      	add	sp, #16
 8009396:	bdb0      	pop	{r4, r5, r7, pc}

08009398 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	603a      	str	r2, [r7, #0]
 80093a0:	1dfb      	adds	r3, r7, #7
 80093a2:	1c02      	adds	r2, r0, #0
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	1dbb      	adds	r3, r7, #6
 80093a8:	1c0a      	adds	r2, r1, #0
 80093aa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	1dbb      	adds	r3, r7, #6
 80093b0:	7819      	ldrb	r1, [r3, #0]
 80093b2:	1dfb      	adds	r3, r7, #7
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	0018      	movs	r0, r3
 80093b8:	f005 f89a 	bl	800e4f0 <SD_disk_ioctl>
 80093bc:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80093be:	0018      	movs	r0, r3
 80093c0:	46bd      	mov	sp, r7
 80093c2:	b002      	add	sp, #8
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80093c8:	b5b0      	push	{r4, r5, r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	0002      	movs	r2, r0
 80093d0:	1dfb      	adds	r3, r7, #7
 80093d2:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80093d4:	1dfb      	adds	r3, r7, #7
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	4a0b      	ldr	r2, [pc, #44]	; (8009408 <disk_status+0x40>)
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	18d3      	adds	r3, r2, r3
 80093de:	3304      	adds	r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	1dfa      	adds	r2, r7, #7
 80093e6:	7812      	ldrb	r2, [r2, #0]
 80093e8:	4907      	ldr	r1, [pc, #28]	; (8009408 <disk_status+0x40>)
 80093ea:	188a      	adds	r2, r1, r2
 80093ec:	7a12      	ldrb	r2, [r2, #8]
 80093ee:	250f      	movs	r5, #15
 80093f0:	197c      	adds	r4, r7, r5
 80093f2:	0010      	movs	r0, r2
 80093f4:	4798      	blx	r3
 80093f6:	0003      	movs	r3, r0
 80093f8:	7023      	strb	r3, [r4, #0]
  return stat;
 80093fa:	197b      	adds	r3, r7, r5
 80093fc:	781b      	ldrb	r3, [r3, #0]
}
 80093fe:	0018      	movs	r0, r3
 8009400:	46bd      	mov	sp, r7
 8009402:	b004      	add	sp, #16
 8009404:	bdb0      	pop	{r4, r5, r7, pc}
 8009406:	46c0      	nop			; (mov r8, r8)
 8009408:	20002728 	.word	0x20002728

0800940c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	0002      	movs	r2, r0
 8009414:	1dfb      	adds	r3, r7, #7
 8009416:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8009418:	200f      	movs	r0, #15
 800941a:	183b      	adds	r3, r7, r0
 800941c:	2200      	movs	r2, #0
 800941e:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8009420:	1dfb      	adds	r3, r7, #7
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	4a10      	ldr	r2, [pc, #64]	; (8009468 <disk_initialize+0x5c>)
 8009426:	5cd3      	ldrb	r3, [r2, r3]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d116      	bne.n	800945a <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 800942c:	1dfb      	adds	r3, r7, #7
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	4a0d      	ldr	r2, [pc, #52]	; (8009468 <disk_initialize+0x5c>)
 8009432:	2101      	movs	r1, #1
 8009434:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009436:	1dfb      	adds	r3, r7, #7
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	4a0b      	ldr	r2, [pc, #44]	; (8009468 <disk_initialize+0x5c>)
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	18d3      	adds	r3, r2, r3
 8009440:	3304      	adds	r3, #4
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	1dfa      	adds	r2, r7, #7
 8009448:	7812      	ldrb	r2, [r2, #0]
 800944a:	4907      	ldr	r1, [pc, #28]	; (8009468 <disk_initialize+0x5c>)
 800944c:	188a      	adds	r2, r1, r2
 800944e:	7a12      	ldrb	r2, [r2, #8]
 8009450:	183c      	adds	r4, r7, r0
 8009452:	0010      	movs	r0, r2
 8009454:	4798      	blx	r3
 8009456:	0003      	movs	r3, r0
 8009458:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800945a:	230f      	movs	r3, #15
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	781b      	ldrb	r3, [r3, #0]
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b005      	add	sp, #20
 8009466:	bd90      	pop	{r4, r7, pc}
 8009468:	20002728 	.word	0x20002728

0800946c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800946c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	210f      	movs	r1, #15
 800947a:	187b      	adds	r3, r7, r1
 800947c:	1c02      	adds	r2, r0, #0
 800947e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009480:	187b      	adds	r3, r7, r1
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <disk_read+0x4c>)
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	18d3      	adds	r3, r2, r3
 800948a:	3304      	adds	r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689d      	ldr	r5, [r3, #8]
 8009490:	187b      	adds	r3, r7, r1
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	4a08      	ldr	r2, [pc, #32]	; (80094b8 <disk_read+0x4c>)
 8009496:	18d3      	adds	r3, r2, r3
 8009498:	7a18      	ldrb	r0, [r3, #8]
 800949a:	2617      	movs	r6, #23
 800949c:	19bc      	adds	r4, r7, r6
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	47a8      	blx	r5
 80094a6:	0003      	movs	r3, r0
 80094a8:	7023      	strb	r3, [r4, #0]
  return res;
 80094aa:	19bb      	adds	r3, r7, r6
 80094ac:	781b      	ldrb	r3, [r3, #0]
}
 80094ae:	0018      	movs	r0, r3
 80094b0:	46bd      	mov	sp, r7
 80094b2:	b007      	add	sp, #28
 80094b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b6:	46c0      	nop			; (mov r8, r8)
 80094b8:	20002728 	.word	0x20002728

080094bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80094bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	210f      	movs	r1, #15
 80094ca:	187b      	adds	r3, r7, r1
 80094cc:	1c02      	adds	r2, r0, #0
 80094ce:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	4a0c      	ldr	r2, [pc, #48]	; (8009508 <disk_write+0x4c>)
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	18d3      	adds	r3, r2, r3
 80094da:	3304      	adds	r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68dd      	ldr	r5, [r3, #12]
 80094e0:	187b      	adds	r3, r7, r1
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	4a08      	ldr	r2, [pc, #32]	; (8009508 <disk_write+0x4c>)
 80094e6:	18d3      	adds	r3, r2, r3
 80094e8:	7a18      	ldrb	r0, [r3, #8]
 80094ea:	2617      	movs	r6, #23
 80094ec:	19bc      	adds	r4, r7, r6
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	47a8      	blx	r5
 80094f6:	0003      	movs	r3, r0
 80094f8:	7023      	strb	r3, [r4, #0]
  return res;
 80094fa:	19bb      	adds	r3, r7, r6
 80094fc:	781b      	ldrb	r3, [r3, #0]
}
 80094fe:	0018      	movs	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	b007      	add	sp, #28
 8009504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	20002728 	.word	0x20002728

0800950c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800950c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	603a      	str	r2, [r7, #0]
 8009514:	1dfb      	adds	r3, r7, #7
 8009516:	1c02      	adds	r2, r0, #0
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	1dbb      	adds	r3, r7, #6
 800951c:	1c0a      	adds	r2, r1, #0
 800951e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009520:	1dfb      	adds	r3, r7, #7
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	4a0c      	ldr	r2, [pc, #48]	; (8009558 <disk_ioctl+0x4c>)
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	18d3      	adds	r3, r2, r3
 800952a:	3304      	adds	r3, #4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	1dfa      	adds	r2, r7, #7
 8009532:	7812      	ldrb	r2, [r2, #0]
 8009534:	4908      	ldr	r1, [pc, #32]	; (8009558 <disk_ioctl+0x4c>)
 8009536:	188a      	adds	r2, r1, r2
 8009538:	7a10      	ldrb	r0, [r2, #8]
 800953a:	260f      	movs	r6, #15
 800953c:	19bc      	adds	r4, r7, r6
 800953e:	683d      	ldr	r5, [r7, #0]
 8009540:	1dba      	adds	r2, r7, #6
 8009542:	7811      	ldrb	r1, [r2, #0]
 8009544:	002a      	movs	r2, r5
 8009546:	4798      	blx	r3
 8009548:	0003      	movs	r3, r0
 800954a:	7023      	strb	r3, [r4, #0]
  return res;
 800954c:	19bb      	adds	r3, r7, r6
 800954e:	781b      	ldrb	r3, [r3, #0]
}
 8009550:	0018      	movs	r0, r3
 8009552:	46bd      	mov	sp, r7
 8009554:	b005      	add	sp, #20
 8009556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009558:	20002728 	.word	0x20002728

0800955c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009570:	e007      	b.n	8009582 <mem_cpy+0x26>
		*d++ = *s++;
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	1c53      	adds	r3, r2, #1
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	1c59      	adds	r1, r3, #1
 800957c:	6179      	str	r1, [r7, #20]
 800957e:	7812      	ldrb	r2, [r2, #0]
 8009580:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	1e5a      	subs	r2, r3, #1
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1f2      	bne.n	8009572 <mem_cpy+0x16>
}
 800958c:	46c0      	nop			; (mov r8, r8)
 800958e:	46c0      	nop			; (mov r8, r8)
 8009590:	46bd      	mov	sp, r7
 8009592:	b006      	add	sp, #24
 8009594:	bd80      	pop	{r7, pc}

08009596 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009596:	b580      	push	{r7, lr}
 8009598:	b086      	sub	sp, #24
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80095a6:	e005      	b.n	80095b4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	617a      	str	r2, [r7, #20]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	1e5a      	subs	r2, r3, #1
 80095b8:	607a      	str	r2, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f4      	bne.n	80095a8 <mem_set+0x12>
}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	46c0      	nop			; (mov r8, r8)
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b006      	add	sp, #24
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	61fb      	str	r3, [r7, #28]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80095e0:	46c0      	nop			; (mov r8, r8)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	1e5a      	subs	r2, r3, #1
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00d      	beq.n	8009608 <mem_cmp+0x40>
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	61fa      	str	r2, [r7, #28]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	0019      	movs	r1, r3
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	61ba      	str	r2, [r7, #24]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	1acb      	subs	r3, r1, r3
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0ec      	beq.n	80095e2 <mem_cmp+0x1a>
	return r;
 8009608:	697b      	ldr	r3, [r7, #20]
}
 800960a:	0018      	movs	r0, r3
 800960c:	46bd      	mov	sp, r7
 800960e:	b008      	add	sp, #32
 8009610:	bd80      	pop	{r7, pc}

08009612 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800961c:	e002      	b.n	8009624 <chk_chr+0x12>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3301      	adds	r3, #1
 8009622:	607b      	str	r3, [r7, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <chk_chr+0x26>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	001a      	movs	r2, r3
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	4293      	cmp	r3, r2
 8009636:	d1f2      	bne.n	800961e <chk_chr+0xc>
	return *str;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	781b      	ldrb	r3, [r3, #0]
}
 800963c:	0018      	movs	r0, r3
 800963e:	46bd      	mov	sp, r7
 8009640:	b002      	add	sp, #8
 8009642:	bd80      	pop	{r7, pc}

08009644 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e037      	b.n	80096c8 <chk_lock+0x84>
		if (Files[i].fs) {	/* Existing entry */
 8009658:	492f      	ldr	r1, [pc, #188]	; (8009718 <chk_lock+0xd4>)
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	0013      	movs	r3, r2
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	189b      	adds	r3, r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	585b      	ldr	r3, [r3, r1]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d029      	beq.n	80096be <chk_lock+0x7a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800966a:	492b      	ldr	r1, [pc, #172]	; (8009718 <chk_lock+0xd4>)
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	0013      	movs	r3, r2
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	189b      	adds	r3, r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	585a      	ldr	r2, [r3, r1]
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	2380      	movs	r3, #128	; 0x80
 800967c:	015b      	lsls	r3, r3, #5
 800967e:	58cb      	ldr	r3, [r1, r3]
 8009680:	429a      	cmp	r2, r3
 8009682:	d11e      	bne.n	80096c2 <chk_lock+0x7e>
				Files[i].clu == dp->sclust &&
 8009684:	4924      	ldr	r1, [pc, #144]	; (8009718 <chk_lock+0xd4>)
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	0013      	movs	r3, r2
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	189b      	adds	r3, r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	18cb      	adds	r3, r1, r3
 8009692:	3304      	adds	r3, #4
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4920      	ldr	r1, [pc, #128]	; (800971c <chk_lock+0xd8>)
 800969a:	585b      	ldr	r3, [r3, r1]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800969c:	429a      	cmp	r2, r3
 800969e:	d110      	bne.n	80096c2 <chk_lock+0x7e>
				Files[i].idx == dp->index) break;
 80096a0:	491d      	ldr	r1, [pc, #116]	; (8009718 <chk_lock+0xd4>)
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	0013      	movs	r3, r2
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	189b      	adds	r3, r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	18cb      	adds	r3, r1, r3
 80096ae:	3308      	adds	r3, #8
 80096b0:	881a      	ldrh	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	491a      	ldr	r1, [pc, #104]	; (8009720 <chk_lock+0xdc>)
 80096b6:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d102      	bne.n	80096c2 <chk_lock+0x7e>
				Files[i].idx == dp->index) break;
 80096bc:	e007      	b.n	80096ce <chk_lock+0x8a>
		} else {			/* Blank entry */
			be = 1;
 80096be:	2301      	movs	r3, #1
 80096c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3301      	adds	r3, #1
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d9c4      	bls.n	8009658 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d109      	bne.n	80096e8 <chk_lock+0xa4>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d102      	bne.n	80096e0 <chk_lock+0x9c>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d101      	bne.n	80096e4 <chk_lock+0xa0>
 80096e0:	2300      	movs	r3, #0
 80096e2:	e014      	b.n	800970e <chk_lock+0xca>
 80096e4:	2312      	movs	r3, #18
 80096e6:	e012      	b.n	800970e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10c      	bne.n	8009708 <chk_lock+0xc4>
 80096ee:	490a      	ldr	r1, [pc, #40]	; (8009718 <chk_lock+0xd4>)
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	0013      	movs	r3, r2
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	189b      	adds	r3, r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	18cb      	adds	r3, r1, r3
 80096fc:	330a      	adds	r3, #10
 80096fe:	881a      	ldrh	r2, [r3, #0]
 8009700:	2380      	movs	r3, #128	; 0x80
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	429a      	cmp	r2, r3
 8009706:	d101      	bne.n	800970c <chk_lock+0xc8>
 8009708:	2310      	movs	r3, #16
 800970a:	e000      	b.n	800970e <chk_lock+0xca>
 800970c:	2300      	movs	r3, #0
}
 800970e:	0018      	movs	r0, r3
 8009710:	46bd      	mov	sp, r7
 8009712:	b004      	add	sp, #16
 8009714:	bd80      	pop	{r7, pc}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	20002710 	.word	0x20002710
 800971c:	00001008 	.word	0x00001008
 8009720:	00001006 	.word	0x00001006

08009724 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800972a:	2300      	movs	r3, #0
 800972c:	607b      	str	r3, [r7, #4]
 800972e:	e002      	b.n	8009736 <enq_lock+0x12>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3301      	adds	r3, #1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d808      	bhi.n	800974e <enq_lock+0x2a>
 800973c:	4908      	ldr	r1, [pc, #32]	; (8009760 <enq_lock+0x3c>)
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	0013      	movs	r3, r2
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	189b      	adds	r3, r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	585b      	ldr	r3, [r3, r1]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1f0      	bne.n	8009730 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3b02      	subs	r3, #2
 8009752:	1e5a      	subs	r2, r3, #1
 8009754:	4193      	sbcs	r3, r2
 8009756:	b2db      	uxtb	r3, r3
}
 8009758:	0018      	movs	r0, r3
 800975a:	46bd      	mov	sp, r7
 800975c:	b002      	add	sp, #8
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20002710 	.word	0x20002710

08009764 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	e02b      	b.n	80097cc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009774:	4954      	ldr	r1, [pc, #336]	; (80098c8 <inc_lock+0x164>)
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	0013      	movs	r3, r2
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	189b      	adds	r3, r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	585a      	ldr	r2, [r3, r1]
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	2380      	movs	r3, #128	; 0x80
 8009786:	015b      	lsls	r3, r3, #5
 8009788:	58cb      	ldr	r3, [r1, r3]
 800978a:	429a      	cmp	r2, r3
 800978c:	d11b      	bne.n	80097c6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800978e:	494e      	ldr	r1, [pc, #312]	; (80098c8 <inc_lock+0x164>)
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	0013      	movs	r3, r2
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	189b      	adds	r3, r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	18cb      	adds	r3, r1, r3
 800979c:	3304      	adds	r3, #4
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	494a      	ldr	r1, [pc, #296]	; (80098cc <inc_lock+0x168>)
 80097a4:	585b      	ldr	r3, [r3, r1]
		if (Files[i].fs == dp->fs &&
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d10d      	bne.n	80097c6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80097aa:	4947      	ldr	r1, [pc, #284]	; (80098c8 <inc_lock+0x164>)
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	0013      	movs	r3, r2
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	189b      	adds	r3, r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	18cb      	adds	r3, r1, r3
 80097b8:	3308      	adds	r3, #8
 80097ba:	881a      	ldrh	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4944      	ldr	r1, [pc, #272]	; (80098d0 <inc_lock+0x16c>)
 80097c0:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d006      	beq.n	80097d4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d9d0      	bls.n	8009774 <inc_lock+0x10>
 80097d2:	e000      	b.n	80097d6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80097d4:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d144      	bne.n	8009866 <inc_lock+0x102>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097dc:	2300      	movs	r3, #0
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	e002      	b.n	80097e8 <inc_lock+0x84>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d808      	bhi.n	8009800 <inc_lock+0x9c>
 80097ee:	4936      	ldr	r1, [pc, #216]	; (80098c8 <inc_lock+0x164>)
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	0013      	movs	r3, r2
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	585b      	ldr	r3, [r3, r1]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1f0      	bne.n	80097e2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d101      	bne.n	800980a <inc_lock+0xa6>
 8009806:	2300      	movs	r3, #0
 8009808:	e059      	b.n	80098be <inc_lock+0x15a>
		Files[i].fs = dp->fs;
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	015b      	lsls	r3, r3, #5
 8009810:	58d0      	ldr	r0, [r2, r3]
 8009812:	492d      	ldr	r1, [pc, #180]	; (80098c8 <inc_lock+0x164>)
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	0013      	movs	r3, r2
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	189b      	adds	r3, r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a2a      	ldr	r2, [pc, #168]	; (80098cc <inc_lock+0x168>)
 8009824:	5899      	ldr	r1, [r3, r2]
 8009826:	4828      	ldr	r0, [pc, #160]	; (80098c8 <inc_lock+0x164>)
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	0013      	movs	r3, r2
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	189b      	adds	r3, r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	18c3      	adds	r3, r0, r3
 8009834:	3304      	adds	r3, #4
 8009836:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a25      	ldr	r2, [pc, #148]	; (80098d0 <inc_lock+0x16c>)
 800983c:	5a98      	ldrh	r0, [r3, r2]
 800983e:	4922      	ldr	r1, [pc, #136]	; (80098c8 <inc_lock+0x164>)
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	0013      	movs	r3, r2
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	189b      	adds	r3, r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	18cb      	adds	r3, r1, r3
 800984c:	3308      	adds	r3, #8
 800984e:	1c02      	adds	r2, r0, #0
 8009850:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009852:	491d      	ldr	r1, [pc, #116]	; (80098c8 <inc_lock+0x164>)
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	0013      	movs	r3, r2
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	189b      	adds	r3, r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	18cb      	adds	r3, r1, r3
 8009860:	330a      	adds	r3, #10
 8009862:	2200      	movs	r2, #0
 8009864:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00c      	beq.n	8009886 <inc_lock+0x122>
 800986c:	4916      	ldr	r1, [pc, #88]	; (80098c8 <inc_lock+0x164>)
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	0013      	movs	r3, r2
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	189b      	adds	r3, r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	18cb      	adds	r3, r1, r3
 800987a:	330a      	adds	r3, #10
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <inc_lock+0x122>
 8009882:	2300      	movs	r3, #0
 8009884:	e01b      	b.n	80098be <inc_lock+0x15a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10b      	bne.n	80098a4 <inc_lock+0x140>
 800988c:	490e      	ldr	r1, [pc, #56]	; (80098c8 <inc_lock+0x164>)
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	0013      	movs	r3, r2
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	189b      	adds	r3, r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	18cb      	adds	r3, r1, r3
 800989a:	330a      	adds	r3, #10
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	3301      	adds	r3, #1
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	e001      	b.n	80098a8 <inc_lock+0x144>
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	005a      	lsls	r2, r3, #1
 80098a8:	4807      	ldr	r0, [pc, #28]	; (80098c8 <inc_lock+0x164>)
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	000b      	movs	r3, r1
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	185b      	adds	r3, r3, r1
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	18c3      	adds	r3, r0, r3
 80098b6:	330a      	adds	r3, #10
 80098b8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3301      	adds	r3, #1
}
 80098be:	0018      	movs	r0, r3
 80098c0:	46bd      	mov	sp, r7
 80098c2:	b004      	add	sp, #16
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	20002710 	.word	0x20002710
 80098cc:	00001008 	.word	0x00001008
 80098d0:	00001006 	.word	0x00001006

080098d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e014      	b.n	800990c <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80098e2:	490e      	ldr	r1, [pc, #56]	; (800991c <clear_lock+0x48>)
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	0013      	movs	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	189b      	adds	r3, r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	585b      	ldr	r3, [r3, r1]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d107      	bne.n	8009906 <clear_lock+0x32>
 80098f6:	4909      	ldr	r1, [pc, #36]	; (800991c <clear_lock+0x48>)
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	0013      	movs	r3, r2
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	189b      	adds	r3, r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	2200      	movs	r2, #0
 8009904:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d9e7      	bls.n	80098e2 <clear_lock+0xe>
	}
}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	46c0      	nop			; (mov r8, r8)
 8009916:	46bd      	mov	sp, r7
 8009918:	b004      	add	sp, #16
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20002710 	.word	0x20002710

08009920 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009920:	b590      	push	{r4, r7, lr}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009928:	240f      	movs	r4, #15
 800992a:	193b      	adds	r3, r7, r4
 800992c:	2200      	movs	r2, #0
 800992e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a22      	ldr	r2, [pc, #136]	; (80099bc <sync_window+0x9c>)
 8009934:	5c9b      	ldrb	r3, [r3, r2]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d039      	beq.n	80099ae <sync_window+0x8e>
		wsect = fs->winsect;	/* Current sector number */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a20      	ldr	r2, [pc, #128]	; (80099c0 <sync_window+0xa0>)
 800993e:	589b      	ldr	r3, [r3, r2]
 8009940:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a1f      	ldr	r2, [pc, #124]	; (80099c4 <sync_window+0xa4>)
 8009946:	5c98      	ldrb	r0, [r3, r2]
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	2301      	movs	r3, #1
 800994e:	f7ff fdb5 	bl	80094bc <disk_write>
 8009952:	1e03      	subs	r3, r0, #0
 8009954:	d003      	beq.n	800995e <sync_window+0x3e>
			res = FR_DISK_ERR;
 8009956:	193b      	adds	r3, r7, r4
 8009958:	2201      	movs	r2, #1
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	e027      	b.n	80099ae <sync_window+0x8e>
		} else {
			fs->wflag = 0;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a16      	ldr	r2, [pc, #88]	; (80099bc <sync_window+0x9c>)
 8009962:	2100      	movs	r1, #0
 8009964:	5499      	strb	r1, [r3, r2]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	2381      	movs	r3, #129	; 0x81
 800996a:	015b      	lsls	r3, r3, #5
 800996c:	58d3      	ldr	r3, [r2, r3]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	1ad2      	subs	r2, r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4914      	ldr	r1, [pc, #80]	; (80099c8 <sync_window+0xa8>)
 8009976:	585b      	ldr	r3, [r3, r1]
 8009978:	429a      	cmp	r2, r3
 800997a:	d218      	bcs.n	80099ae <sync_window+0x8e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a13      	ldr	r2, [pc, #76]	; (80099cc <sync_window+0xac>)
 8009980:	5c9b      	ldrb	r3, [r3, r2]
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	e010      	b.n	80099a8 <sync_window+0x88>
					wsect += fs->fsize;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a0f      	ldr	r2, [pc, #60]	; (80099c8 <sync_window+0xa8>)
 800998a:	589b      	ldr	r3, [r3, r2]
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	18d3      	adds	r3, r2, r3
 8009990:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a0b      	ldr	r2, [pc, #44]	; (80099c4 <sync_window+0xa4>)
 8009996:	5c98      	ldrb	r0, [r3, r2]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	2301      	movs	r3, #1
 800999e:	f7ff fd8d 	bl	80094bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	613b      	str	r3, [r7, #16]
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d8eb      	bhi.n	8009986 <sync_window+0x66>
				}
			}
		}
	}
	return res;
 80099ae:	230f      	movs	r3, #15
 80099b0:	18fb      	adds	r3, r7, r3
 80099b2:	781b      	ldrb	r3, [r3, #0]
}
 80099b4:	0018      	movs	r0, r3
 80099b6:	46bd      	mov	sp, r7
 80099b8:	b007      	add	sp, #28
 80099ba:	bd90      	pop	{r4, r7, pc}
 80099bc:	00001004 	.word	0x00001004
 80099c0:	0000102c 	.word	0x0000102c
 80099c4:	00001001 	.word	0x00001001
 80099c8:	00001018 	.word	0x00001018
 80099cc:	00001003 	.word	0x00001003

080099d0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80099d0:	b5b0      	push	{r4, r5, r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80099da:	250f      	movs	r5, #15
 80099dc:	197b      	adds	r3, r7, r5
 80099de:	2200      	movs	r2, #0
 80099e0:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <move_window+0x6c>)
 80099e6:	589b      	ldr	r3, [r3, r2]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d01f      	beq.n	8009a2e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80099ee:	197c      	adds	r4, r7, r5
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	0018      	movs	r0, r3
 80099f4:	f7ff ff94 	bl	8009920 <sync_window>
 80099f8:	0003      	movs	r3, r0
 80099fa:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80099fc:	002c      	movs	r4, r5
 80099fe:	193b      	adds	r3, r7, r4
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d113      	bne.n	8009a2e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a0d      	ldr	r2, [pc, #52]	; (8009a40 <move_window+0x70>)
 8009a0a:	5c98      	ldrb	r0, [r3, r2]
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	2301      	movs	r3, #1
 8009a12:	f7ff fd2b 	bl	800946c <disk_read>
 8009a16:	1e03      	subs	r3, r0, #0
 8009a18:	d005      	beq.n	8009a26 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	425b      	negs	r3, r3
 8009a1e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009a20:	193b      	adds	r3, r7, r4
 8009a22:	2201      	movs	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4904      	ldr	r1, [pc, #16]	; (8009a3c <move_window+0x6c>)
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	505a      	str	r2, [r3, r1]
		}
	}
	return res;
 8009a2e:	230f      	movs	r3, #15
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	781b      	ldrb	r3, [r3, #0]
}
 8009a34:	0018      	movs	r0, r3
 8009a36:	46bd      	mov	sp, r7
 8009a38:	b004      	add	sp, #16
 8009a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a3c:	0000102c 	.word	0x0000102c
 8009a40:	00001001 	.word	0x00001001

08009a44 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009a44:	b5b0      	push	{r4, r5, r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009a4c:	250f      	movs	r5, #15
 8009a4e:	197c      	adds	r4, r7, r5
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	0018      	movs	r0, r3
 8009a54:	f7ff ff64 	bl	8009920 <sync_window>
 8009a58:	0003      	movs	r3, r0
 8009a5a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009a5c:	197b      	adds	r3, r7, r5
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d000      	beq.n	8009a66 <sync_fs+0x22>
 8009a64:	e0aa      	b.n	8009bbc <sync_fs+0x178>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	2380      	movs	r3, #128	; 0x80
 8009a6a:	015b      	lsls	r3, r3, #5
 8009a6c:	5cd3      	ldrb	r3, [r2, r3]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d000      	beq.n	8009a74 <sync_fs+0x30>
 8009a72:	e095      	b.n	8009ba0 <sync_fs+0x15c>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a55      	ldr	r2, [pc, #340]	; (8009bcc <sync_fs+0x188>)
 8009a78:	5c9b      	ldrb	r3, [r3, r2]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d000      	beq.n	8009a80 <sync_fs+0x3c>
 8009a7e:	e08f      	b.n	8009ba0 <sync_fs+0x15c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a52      	ldr	r2, [pc, #328]	; (8009bd0 <sync_fs+0x18c>)
 8009a86:	5a9b      	ldrh	r3, [r3, r2]
 8009a88:	001a      	movs	r2, r3
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	f7ff fd83 	bl	8009596 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	23ff      	movs	r3, #255	; 0xff
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	2155      	movs	r1, #85	; 0x55
 8009a98:	54d1      	strb	r1, [r2, r3]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a4d      	ldr	r2, [pc, #308]	; (8009bd4 <sync_fs+0x190>)
 8009a9e:	21aa      	movs	r1, #170	; 0xaa
 8009aa0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2252      	movs	r2, #82	; 0x52
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2252      	movs	r2, #82	; 0x52
 8009aac:	705a      	strb	r2, [r3, #1]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2261      	movs	r2, #97	; 0x61
 8009ab2:	709a      	strb	r2, [r3, #2]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2241      	movs	r2, #65	; 0x41
 8009ab8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	23f2      	movs	r3, #242	; 0xf2
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	2172      	movs	r1, #114	; 0x72
 8009ac2:	54d1      	strb	r1, [r2, r3]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	23e6      	movs	r3, #230	; 0xe6
 8009ac8:	33ff      	adds	r3, #255	; 0xff
 8009aca:	2172      	movs	r1, #114	; 0x72
 8009acc:	54d1      	strb	r1, [r2, r3]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	23f3      	movs	r3, #243	; 0xf3
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	2141      	movs	r1, #65	; 0x41
 8009ad6:	54d1      	strb	r1, [r2, r3]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	23e8      	movs	r3, #232	; 0xe8
 8009adc:	33ff      	adds	r3, #255	; 0xff
 8009ade:	2161      	movs	r1, #97	; 0x61
 8009ae0:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a3c      	ldr	r2, [pc, #240]	; (8009bd8 <sync_fs+0x194>)
 8009ae6:	589b      	ldr	r3, [r3, r2]
 8009ae8:	b2d9      	uxtb	r1, r3
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	23f4      	movs	r3, #244	; 0xf4
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	54d1      	strb	r1, [r2, r3]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a38      	ldr	r2, [pc, #224]	; (8009bd8 <sync_fs+0x194>)
 8009af6:	589b      	ldr	r3, [r3, r2]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	b2d9      	uxtb	r1, r3
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	23ea      	movs	r3, #234	; 0xea
 8009b04:	33ff      	adds	r3, #255	; 0xff
 8009b06:	54d1      	strb	r1, [r2, r3]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a33      	ldr	r2, [pc, #204]	; (8009bd8 <sync_fs+0x194>)
 8009b0c:	589b      	ldr	r3, [r3, r2]
 8009b0e:	0c1b      	lsrs	r3, r3, #16
 8009b10:	b2d9      	uxtb	r1, r3
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	23f5      	movs	r3, #245	; 0xf5
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	54d1      	strb	r1, [r2, r3]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a2e      	ldr	r2, [pc, #184]	; (8009bd8 <sync_fs+0x194>)
 8009b1e:	589b      	ldr	r3, [r3, r2]
 8009b20:	0e1b      	lsrs	r3, r3, #24
 8009b22:	b2d9      	uxtb	r1, r3
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	23ec      	movs	r3, #236	; 0xec
 8009b28:	33ff      	adds	r3, #255	; 0xff
 8009b2a:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a2b      	ldr	r2, [pc, #172]	; (8009bdc <sync_fs+0x198>)
 8009b30:	589b      	ldr	r3, [r3, r2]
 8009b32:	b2d9      	uxtb	r1, r3
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	23f6      	movs	r3, #246	; 0xf6
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	54d1      	strb	r1, [r2, r3]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a27      	ldr	r2, [pc, #156]	; (8009bdc <sync_fs+0x198>)
 8009b40:	589b      	ldr	r3, [r3, r2]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	b2d9      	uxtb	r1, r3
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	23ee      	movs	r3, #238	; 0xee
 8009b4e:	33ff      	adds	r3, #255	; 0xff
 8009b50:	54d1      	strb	r1, [r2, r3]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a21      	ldr	r2, [pc, #132]	; (8009bdc <sync_fs+0x198>)
 8009b56:	589b      	ldr	r3, [r3, r2]
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	b2d9      	uxtb	r1, r3
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	23f7      	movs	r3, #247	; 0xf7
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	54d1      	strb	r1, [r2, r3]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a1d      	ldr	r2, [pc, #116]	; (8009bdc <sync_fs+0x198>)
 8009b68:	589b      	ldr	r3, [r3, r2]
 8009b6a:	0e1b      	lsrs	r3, r3, #24
 8009b6c:	b2d9      	uxtb	r1, r3
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	23f0      	movs	r3, #240	; 0xf0
 8009b72:	33ff      	adds	r3, #255	; 0xff
 8009b74:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a19      	ldr	r2, [pc, #100]	; (8009be0 <sync_fs+0x19c>)
 8009b7a:	589b      	ldr	r3, [r3, r2]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4918      	ldr	r1, [pc, #96]	; (8009be4 <sync_fs+0x1a0>)
 8009b82:	505a      	str	r2, [r3, r1]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <sync_fs+0x1a4>)
 8009b88:	5c98      	ldrb	r0, [r3, r2]
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a15      	ldr	r2, [pc, #84]	; (8009be4 <sync_fs+0x1a0>)
 8009b90:	589a      	ldr	r2, [r3, r2]
 8009b92:	2301      	movs	r3, #1
 8009b94:	f7ff fc92 	bl	80094bc <disk_write>
			fs->fsi_flag = 0;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a0c      	ldr	r2, [pc, #48]	; (8009bcc <sync_fs+0x188>)
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a11      	ldr	r2, [pc, #68]	; (8009be8 <sync_fs+0x1a4>)
 8009ba4:	5c9b      	ldrb	r3, [r3, r2]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2100      	movs	r1, #0
 8009baa:	0018      	movs	r0, r3
 8009bac:	f7ff fcae 	bl	800950c <disk_ioctl>
 8009bb0:	1e03      	subs	r3, r0, #0
 8009bb2:	d003      	beq.n	8009bbc <sync_fs+0x178>
			res = FR_DISK_ERR;
 8009bb4:	230f      	movs	r3, #15
 8009bb6:	18fb      	adds	r3, r7, r3
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8009bbc:	230f      	movs	r3, #15
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	781b      	ldrb	r3, [r3, #0]
}
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	b004      	add	sp, #16
 8009bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	00001005 	.word	0x00001005
 8009bd0:	0000100a 	.word	0x0000100a
 8009bd4:	000001ff 	.word	0x000001ff
 8009bd8:	00001010 	.word	0x00001010
 8009bdc:	0000100c 	.word	0x0000100c
 8009be0:	0000101c 	.word	0x0000101c
 8009be4:	0000102c 	.word	0x0000102c
 8009be8:	00001001 	.word	0x00001001

08009bec <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	3b02      	subs	r3, #2
 8009bfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a0b      	ldr	r2, [pc, #44]	; (8009c2c <clust2sect+0x40>)
 8009c00:	589b      	ldr	r3, [r3, r2]
 8009c02:	3b02      	subs	r3, #2
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d301      	bcc.n	8009c0e <clust2sect+0x22>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e009      	b.n	8009c22 <clust2sect+0x36>
	return clst * fs->csize + fs->database;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a07      	ldr	r2, [pc, #28]	; (8009c30 <clust2sect+0x44>)
 8009c12:	5c9b      	ldrb	r3, [r3, r2]
 8009c14:	001a      	movs	r2, r3
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	435a      	muls	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4905      	ldr	r1, [pc, #20]	; (8009c34 <clust2sect+0x48>)
 8009c1e:	585b      	ldr	r3, [r3, r1]
 8009c20:	18d3      	adds	r3, r2, r3
}
 8009c22:	0018      	movs	r0, r3
 8009c24:	46bd      	mov	sp, r7
 8009c26:	b002      	add	sp, #8
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	46c0      	nop			; (mov r8, r8)
 8009c2c:	00001014 	.word	0x00001014
 8009c30:	00001002 	.word	0x00001002
 8009c34:	00001028 	.word	0x00001028

08009c38 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009c38:	b590      	push	{r4, r7, lr}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d905      	bls.n	8009c54 <get_fat+0x1c>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a78      	ldr	r2, [pc, #480]	; (8009e2c <get_fat+0x1f4>)
 8009c4c:	589b      	ldr	r3, [r3, r2]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d302      	bcc.n	8009c5a <get_fat+0x22>
		val = 1;	/* Internal error */
 8009c54:	2301      	movs	r3, #1
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	e0e2      	b.n	8009e20 <get_fat+0x1e8>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	425b      	negs	r3, r3
 8009c5e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	2380      	movs	r3, #128	; 0x80
 8009c64:	015b      	lsls	r3, r3, #5
 8009c66:	5cd3      	ldrb	r3, [r2, r3]
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d100      	bne.n	8009c6e <get_fat+0x36>
 8009c6c:	e095      	b.n	8009d9a <get_fat+0x162>
 8009c6e:	dd00      	ble.n	8009c72 <get_fat+0x3a>
 8009c70:	e0cc      	b.n	8009e0c <get_fat+0x1d4>
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d002      	beq.n	8009c7c <get_fat+0x44>
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d05e      	beq.n	8009d38 <get_fat+0x100>
 8009c7a:	e0c7      	b.n	8009e0c <get_fat+0x1d4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	18d3      	adds	r3, r2, r3
 8009c88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	2381      	movs	r3, #129	; 0x81
 8009c8e:	015b      	lsls	r3, r3, #5
 8009c90:	58d4      	ldr	r4, [r2, r3]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a66      	ldr	r2, [pc, #408]	; (8009e30 <get_fat+0x1f8>)
 8009c96:	5a9b      	ldrh	r3, [r3, r2]
 8009c98:	0019      	movs	r1, r3
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7f6 fa58 	bl	8000150 <__udivsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	18e2      	adds	r2, r4, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	0011      	movs	r1, r2
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f7ff fe91 	bl	80099d0 <move_window>
 8009cae:	1e03      	subs	r3, r0, #0
 8009cb0:	d000      	beq.n	8009cb4 <get_fat+0x7c>
 8009cb2:	e0ae      	b.n	8009e12 <get_fat+0x1da>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	60fa      	str	r2, [r7, #12]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	495c      	ldr	r1, [pc, #368]	; (8009e30 <get_fat+0x1f8>)
 8009cbe:	5a52      	ldrh	r2, [r2, r1]
 8009cc0:	0011      	movs	r1, r2
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f7f6 faca 	bl	800025c <__aeabi_uidivmod>
 8009cc8:	000b      	movs	r3, r1
 8009cca:	001a      	movs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	5c9b      	ldrb	r3, [r3, r2]
 8009cd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	2381      	movs	r3, #129	; 0x81
 8009cd6:	015b      	lsls	r3, r3, #5
 8009cd8:	58d4      	ldr	r4, [r2, r3]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a54      	ldr	r2, [pc, #336]	; (8009e30 <get_fat+0x1f8>)
 8009cde:	5a9b      	ldrh	r3, [r3, r2]
 8009ce0:	0019      	movs	r1, r3
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7f6 fa34 	bl	8000150 <__udivsi3>
 8009ce8:	0003      	movs	r3, r0
 8009cea:	18e2      	adds	r2, r4, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	0011      	movs	r1, r2
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	f7ff fe6d 	bl	80099d0 <move_window>
 8009cf6:	1e03      	subs	r3, r0, #0
 8009cf8:	d000      	beq.n	8009cfc <get_fat+0xc4>
 8009cfa:	e08c      	b.n	8009e16 <get_fat+0x1de>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a4c      	ldr	r2, [pc, #304]	; (8009e30 <get_fat+0x1f8>)
 8009d00:	5a9b      	ldrh	r3, [r3, r2]
 8009d02:	001a      	movs	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0011      	movs	r1, r2
 8009d08:	0018      	movs	r0, r3
 8009d0a:	f7f6 faa7 	bl	800025c <__aeabi_uidivmod>
 8009d0e:	000b      	movs	r3, r1
 8009d10:	001a      	movs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	5c9b      	ldrb	r3, [r3, r2]
 8009d16:	021b      	lsls	r3, r3, #8
 8009d18:	001a      	movs	r2, r3
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2201      	movs	r2, #1
 8009d24:	4013      	ands	r3, r2
 8009d26:	d002      	beq.n	8009d2e <get_fat+0xf6>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	091b      	lsrs	r3, r3, #4
 8009d2c:	e002      	b.n	8009d34 <get_fat+0xfc>
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	051b      	lsls	r3, r3, #20
 8009d32:	0d1b      	lsrs	r3, r3, #20
 8009d34:	617b      	str	r3, [r7, #20]
			break;
 8009d36:	e073      	b.n	8009e20 <get_fat+0x1e8>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	2381      	movs	r3, #129	; 0x81
 8009d3c:	015b      	lsls	r3, r3, #5
 8009d3e:	58d4      	ldr	r4, [r2, r3]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a3b      	ldr	r2, [pc, #236]	; (8009e30 <get_fat+0x1f8>)
 8009d44:	5a9b      	ldrh	r3, [r3, r2]
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	0019      	movs	r1, r3
 8009d4c:	6838      	ldr	r0, [r7, #0]
 8009d4e:	f7f6 f9ff 	bl	8000150 <__udivsi3>
 8009d52:	0003      	movs	r3, r0
 8009d54:	18e2      	adds	r2, r4, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	0011      	movs	r1, r2
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f7ff fe38 	bl	80099d0 <move_window>
 8009d60:	1e03      	subs	r3, r0, #0
 8009d62:	d15a      	bne.n	8009e1a <get_fat+0x1e2>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	005a      	lsls	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4931      	ldr	r1, [pc, #196]	; (8009e30 <get_fat+0x1f8>)
 8009d6c:	5a5b      	ldrh	r3, [r3, r1]
 8009d6e:	0019      	movs	r1, r3
 8009d70:	0010      	movs	r0, r2
 8009d72:	f7f6 fa73 	bl	800025c <__aeabi_uidivmod>
 8009d76:	000b      	movs	r3, r1
 8009d78:	001a      	movs	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	189b      	adds	r3, r3, r2
 8009d7e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	3301      	adds	r3, #1
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	b21a      	sxth	r2, r3
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	b21b      	sxth	r3, r3
 8009d90:	4313      	orrs	r3, r2
 8009d92:	b21b      	sxth	r3, r3
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	617b      	str	r3, [r7, #20]
			break;
 8009d98:	e042      	b.n	8009e20 <get_fat+0x1e8>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	2381      	movs	r3, #129	; 0x81
 8009d9e:	015b      	lsls	r3, r3, #5
 8009da0:	58d4      	ldr	r4, [r2, r3]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a22      	ldr	r2, [pc, #136]	; (8009e30 <get_fat+0x1f8>)
 8009da6:	5a9b      	ldrh	r3, [r3, r2]
 8009da8:	089b      	lsrs	r3, r3, #2
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	0019      	movs	r1, r3
 8009dae:	6838      	ldr	r0, [r7, #0]
 8009db0:	f7f6 f9ce 	bl	8000150 <__udivsi3>
 8009db4:	0003      	movs	r3, r0
 8009db6:	18e2      	adds	r2, r4, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	0011      	movs	r1, r2
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7ff fe07 	bl	80099d0 <move_window>
 8009dc2:	1e03      	subs	r3, r0, #0
 8009dc4:	d12b      	bne.n	8009e1e <get_fat+0x1e6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	009a      	lsls	r2, r3, #2
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4918      	ldr	r1, [pc, #96]	; (8009e30 <get_fat+0x1f8>)
 8009dce:	5a5b      	ldrh	r3, [r3, r1]
 8009dd0:	0019      	movs	r1, r3
 8009dd2:	0010      	movs	r0, r2
 8009dd4:	f7f6 fa42 	bl	800025c <__aeabi_uidivmod>
 8009dd8:	000b      	movs	r3, r1
 8009dda:	001a      	movs	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	189b      	adds	r3, r3, r2
 8009de0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	3303      	adds	r3, #3
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	061a      	lsls	r2, r3, #24
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	3302      	adds	r3, #2
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	041b      	lsls	r3, r3, #16
 8009df2:	4313      	orrs	r3, r2
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	3201      	adds	r2, #1
 8009df8:	7812      	ldrb	r2, [r2, #0]
 8009dfa:	0212      	lsls	r2, r2, #8
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	7812      	ldrb	r2, [r2, #0]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	091b      	lsrs	r3, r3, #4
 8009e08:	617b      	str	r3, [r7, #20]
			break;
 8009e0a:	e009      	b.n	8009e20 <get_fat+0x1e8>

		default:
			val = 1;	/* Internal error */
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	e006      	b.n	8009e20 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	e004      	b.n	8009e20 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	e002      	b.n	8009e20 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	e000      	b.n	8009e20 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e1e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8009e20:	697b      	ldr	r3, [r7, #20]
}
 8009e22:	0018      	movs	r0, r3
 8009e24:	46bd      	mov	sp, r7
 8009e26:	b007      	add	sp, #28
 8009e28:	bd90      	pop	{r4, r7, pc}
 8009e2a:	46c0      	nop			; (mov r8, r8)
 8009e2c:	00001014 	.word	0x00001014
 8009e30:	0000100a 	.word	0x0000100a

08009e34 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8009e34:	b5b0      	push	{r4, r5, r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d905      	bls.n	8009e52 <put_fat+0x1e>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	4aab      	ldr	r2, [pc, #684]	; (800a0f8 <put_fat+0x2c4>)
 8009e4a:	589b      	ldr	r3, [r3, r2]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d304      	bcc.n	8009e5c <put_fat+0x28>
		res = FR_INT_ERR;
 8009e52:	231f      	movs	r3, #31
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	2202      	movs	r2, #2
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e145      	b.n	800a0e8 <put_fat+0x2b4>

	} else {
		switch (fs->fs_type) {
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	2380      	movs	r3, #128	; 0x80
 8009e60:	015b      	lsls	r3, r3, #5
 8009e62:	5cd3      	ldrb	r3, [r2, r3]
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d100      	bne.n	8009e6a <put_fat+0x36>
 8009e68:	e0d5      	b.n	800a016 <put_fat+0x1e2>
 8009e6a:	dd00      	ble.n	8009e6e <put_fat+0x3a>
 8009e6c:	e130      	b.n	800a0d0 <put_fat+0x29c>
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d003      	beq.n	8009e7a <put_fat+0x46>
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d100      	bne.n	8009e78 <put_fat+0x44>
 8009e76:	e092      	b.n	8009f9e <put_fat+0x16a>
 8009e78:	e12a      	b.n	800a0d0 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	18d3      	adds	r3, r2, r3
 8009e86:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	2381      	movs	r3, #129	; 0x81
 8009e8c:	015b      	lsls	r3, r3, #5
 8009e8e:	58d4      	ldr	r4, [r2, r3]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a9a      	ldr	r2, [pc, #616]	; (800a0fc <put_fat+0x2c8>)
 8009e94:	5a9b      	ldrh	r3, [r3, r2]
 8009e96:	0019      	movs	r1, r3
 8009e98:	6978      	ldr	r0, [r7, #20]
 8009e9a:	f7f6 f959 	bl	8000150 <__udivsi3>
 8009e9e:	0003      	movs	r3, r0
 8009ea0:	18e2      	adds	r2, r4, r3
 8009ea2:	251f      	movs	r5, #31
 8009ea4:	197c      	adds	r4, r7, r5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	0011      	movs	r1, r2
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f7ff fd90 	bl	80099d0 <move_window>
 8009eb0:	0003      	movs	r3, r0
 8009eb2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009eb4:	197b      	adds	r3, r7, r5
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d000      	beq.n	8009ebe <put_fat+0x8a>
 8009ebc:	e10d      	b.n	800a0da <put_fat+0x2a6>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	617a      	str	r2, [r7, #20]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	498d      	ldr	r1, [pc, #564]	; (800a0fc <put_fat+0x2c8>)
 8009ec8:	5a52      	ldrh	r2, [r2, r1]
 8009eca:	0011      	movs	r1, r2
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f7f6 f9c5 	bl	800025c <__aeabi_uidivmod>
 8009ed2:	000b      	movs	r3, r1
 8009ed4:	001a      	movs	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	189b      	adds	r3, r3, r2
 8009eda:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	d00d      	beq.n	8009f00 <put_fat+0xcc>
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	b25b      	sxtb	r3, r3
 8009eea:	220f      	movs	r2, #15
 8009eec:	4013      	ands	r3, r2
 8009eee:	b25a      	sxtb	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	011b      	lsls	r3, r3, #4
 8009ef6:	b25b      	sxtb	r3, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b25b      	sxtb	r3, r3
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	e001      	b.n	8009f04 <put_fat+0xd0>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a7d      	ldr	r2, [pc, #500]	; (800a100 <put_fat+0x2cc>)
 8009f0c:	2101      	movs	r1, #1
 8009f0e:	5499      	strb	r1, [r3, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	2381      	movs	r3, #129	; 0x81
 8009f14:	015b      	lsls	r3, r3, #5
 8009f16:	58d4      	ldr	r4, [r2, r3]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4a78      	ldr	r2, [pc, #480]	; (800a0fc <put_fat+0x2c8>)
 8009f1c:	5a9b      	ldrh	r3, [r3, r2]
 8009f1e:	0019      	movs	r1, r3
 8009f20:	6978      	ldr	r0, [r7, #20]
 8009f22:	f7f6 f915 	bl	8000150 <__udivsi3>
 8009f26:	0003      	movs	r3, r0
 8009f28:	18e2      	adds	r2, r4, r3
 8009f2a:	251f      	movs	r5, #31
 8009f2c:	197c      	adds	r4, r7, r5
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	0011      	movs	r1, r2
 8009f32:	0018      	movs	r0, r3
 8009f34:	f7ff fd4c 	bl	80099d0 <move_window>
 8009f38:	0003      	movs	r3, r0
 8009f3a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009f3c:	197b      	adds	r3, r7, r5
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d000      	beq.n	8009f46 <put_fat+0x112>
 8009f44:	e0cb      	b.n	800a0de <put_fat+0x2aa>
			p = &fs->win.d8[bc % SS(fs)];
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4a6c      	ldr	r2, [pc, #432]	; (800a0fc <put_fat+0x2c8>)
 8009f4a:	5a9b      	ldrh	r3, [r3, r2]
 8009f4c:	001a      	movs	r2, r3
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	0011      	movs	r1, r2
 8009f52:	0018      	movs	r0, r3
 8009f54:	f7f6 f982 	bl	800025c <__aeabi_uidivmod>
 8009f58:	000b      	movs	r3, r1
 8009f5a:	001a      	movs	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	189b      	adds	r3, r3, r2
 8009f60:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2201      	movs	r2, #1
 8009f66:	4013      	ands	r3, r2
 8009f68:	d003      	beq.n	8009f72 <put_fat+0x13e>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	091b      	lsrs	r3, r3, #4
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	e00e      	b.n	8009f90 <put_fat+0x15c>
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	b25b      	sxtb	r3, r3
 8009f78:	220f      	movs	r2, #15
 8009f7a:	4393      	bics	r3, r2
 8009f7c:	b25a      	sxtb	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	0a1b      	lsrs	r3, r3, #8
 8009f82:	b25b      	sxtb	r3, r3
 8009f84:	210f      	movs	r1, #15
 8009f86:	400b      	ands	r3, r1
 8009f88:	b25b      	sxtb	r3, r3
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	b25b      	sxtb	r3, r3
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4a5a      	ldr	r2, [pc, #360]	; (800a100 <put_fat+0x2cc>)
 8009f98:	2101      	movs	r1, #1
 8009f9a:	5499      	strb	r1, [r3, r2]
			break;
 8009f9c:	e0a4      	b.n	800a0e8 <put_fat+0x2b4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	2381      	movs	r3, #129	; 0x81
 8009fa2:	015b      	lsls	r3, r3, #5
 8009fa4:	58d4      	ldr	r4, [r2, r3]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a54      	ldr	r2, [pc, #336]	; (800a0fc <put_fat+0x2c8>)
 8009faa:	5a9b      	ldrh	r3, [r3, r2]
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	0019      	movs	r1, r3
 8009fb2:	68b8      	ldr	r0, [r7, #8]
 8009fb4:	f7f6 f8cc 	bl	8000150 <__udivsi3>
 8009fb8:	0003      	movs	r3, r0
 8009fba:	18e2      	adds	r2, r4, r3
 8009fbc:	251f      	movs	r5, #31
 8009fbe:	197c      	adds	r4, r7, r5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	0011      	movs	r1, r2
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f7ff fd03 	bl	80099d0 <move_window>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8009fce:	197b      	adds	r3, r7, r5
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d000      	beq.n	8009fd8 <put_fat+0x1a4>
 8009fd6:	e084      	b.n	800a0e2 <put_fat+0x2ae>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	005a      	lsls	r2, r3, #1
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4947      	ldr	r1, [pc, #284]	; (800a0fc <put_fat+0x2c8>)
 8009fe0:	5a5b      	ldrh	r3, [r3, r1]
 8009fe2:	0019      	movs	r1, r3
 8009fe4:	0010      	movs	r0, r2
 8009fe6:	f7f6 f939 	bl	800025c <__aeabi_uidivmod>
 8009fea:	000b      	movs	r3, r1
 8009fec:	001a      	movs	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	189b      	adds	r3, r3, r2
 8009ff2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	0a1b      	lsrs	r3, r3, #8
 800a002:	b29a      	uxth	r2, r3
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	3301      	adds	r3, #1
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a3c      	ldr	r2, [pc, #240]	; (800a100 <put_fat+0x2cc>)
 800a010:	2101      	movs	r1, #1
 800a012:	5499      	strb	r1, [r3, r2]
			break;
 800a014:	e068      	b.n	800a0e8 <put_fat+0x2b4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	2381      	movs	r3, #129	; 0x81
 800a01a:	015b      	lsls	r3, r3, #5
 800a01c:	58d4      	ldr	r4, [r2, r3]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4a36      	ldr	r2, [pc, #216]	; (800a0fc <put_fat+0x2c8>)
 800a022:	5a9b      	ldrh	r3, [r3, r2]
 800a024:	089b      	lsrs	r3, r3, #2
 800a026:	b29b      	uxth	r3, r3
 800a028:	0019      	movs	r1, r3
 800a02a:	68b8      	ldr	r0, [r7, #8]
 800a02c:	f7f6 f890 	bl	8000150 <__udivsi3>
 800a030:	0003      	movs	r3, r0
 800a032:	18e2      	adds	r2, r4, r3
 800a034:	251f      	movs	r5, #31
 800a036:	197c      	adds	r4, r7, r5
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	0011      	movs	r1, r2
 800a03c:	0018      	movs	r0, r3
 800a03e:	f7ff fcc7 	bl	80099d0 <move_window>
 800a042:	0003      	movs	r3, r0
 800a044:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a046:	197b      	adds	r3, r7, r5
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d14b      	bne.n	800a0e6 <put_fat+0x2b2>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	009a      	lsls	r2, r3, #2
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4929      	ldr	r1, [pc, #164]	; (800a0fc <put_fat+0x2c8>)
 800a056:	5a5b      	ldrh	r3, [r3, r1]
 800a058:	0019      	movs	r1, r3
 800a05a:	0010      	movs	r0, r2
 800a05c:	f7f6 f8fe 	bl	800025c <__aeabi_uidivmod>
 800a060:	000b      	movs	r3, r1
 800a062:	001a      	movs	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	189b      	adds	r3, r3, r2
 800a068:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	3303      	adds	r3, #3
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	061a      	lsls	r2, r3, #24
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	3302      	adds	r3, #2
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	4313      	orrs	r3, r2
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	3201      	adds	r2, #1
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	0212      	lsls	r2, r2, #8
 800a084:	4313      	orrs	r3, r2
 800a086:	69ba      	ldr	r2, [r7, #24]
 800a088:	7812      	ldrb	r2, [r2, #0]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	0f1b      	lsrs	r3, r3, #28
 800a08e:	071b      	lsls	r3, r3, #28
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	4313      	orrs	r3, r2
 800a094:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	0a1b      	lsrs	r3, r3, #8
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	701a      	strb	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	0c1a      	lsrs	r2, r3, #16
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	b2d2      	uxtb	r2, r2
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	0e1a      	lsrs	r2, r3, #24
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	3303      	adds	r3, #3
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	4a0d      	ldr	r2, [pc, #52]	; (800a100 <put_fat+0x2cc>)
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	5499      	strb	r1, [r3, r2]
			break;
 800a0ce:	e00b      	b.n	800a0e8 <put_fat+0x2b4>

		default :
			res = FR_INT_ERR;
 800a0d0:	231f      	movs	r3, #31
 800a0d2:	18fb      	adds	r3, r7, r3
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	e006      	b.n	800a0e8 <put_fat+0x2b4>
			if (res != FR_OK) break;
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	e004      	b.n	800a0e8 <put_fat+0x2b4>
			if (res != FR_OK) break;
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	e002      	b.n	800a0e8 <put_fat+0x2b4>
			if (res != FR_OK) break;
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	e000      	b.n	800a0e8 <put_fat+0x2b4>
			if (res != FR_OK) break;
 800a0e6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800a0e8:	231f      	movs	r3, #31
 800a0ea:	18fb      	adds	r3, r7, r3
 800a0ec:	781b      	ldrb	r3, [r3, #0]
}
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	b008      	add	sp, #32
 800a0f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	00001014 	.word	0x00001014
 800a0fc:	0000100a 	.word	0x0000100a
 800a100:	00001004 	.word	0x00001004

0800a104 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a104:	b5b0      	push	{r4, r5, r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d905      	bls.n	800a120 <remove_chain+0x1c>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a30      	ldr	r2, [pc, #192]	; (800a1d8 <remove_chain+0xd4>)
 800a118:	589b      	ldr	r3, [r3, r2]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d304      	bcc.n	800a12a <remove_chain+0x26>
		res = FR_INT_ERR;
 800a120:	230f      	movs	r3, #15
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	2202      	movs	r2, #2
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	e04e      	b.n	800a1c8 <remove_chain+0xc4>

	} else {
		res = FR_OK;
 800a12a:	230f      	movs	r3, #15
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a132:	e03f      	b.n	800a1b4 <remove_chain+0xb0>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	0011      	movs	r1, r2
 800a13a:	0018      	movs	r0, r3
 800a13c:	f7ff fd7c 	bl	8009c38 <get_fat>
 800a140:	0003      	movs	r3, r0
 800a142:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d03b      	beq.n	800a1c2 <remove_chain+0xbe>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d104      	bne.n	800a15a <remove_chain+0x56>
 800a150:	230f      	movs	r3, #15
 800a152:	18fb      	adds	r3, r7, r3
 800a154:	2202      	movs	r2, #2
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	e036      	b.n	800a1c8 <remove_chain+0xc4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	3301      	adds	r3, #1
 800a15e:	d104      	bne.n	800a16a <remove_chain+0x66>
 800a160:	230f      	movs	r3, #15
 800a162:	18fb      	adds	r3, r7, r3
 800a164:	2201      	movs	r2, #1
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	e02e      	b.n	800a1c8 <remove_chain+0xc4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a16a:	250f      	movs	r5, #15
 800a16c:	197c      	adds	r4, r7, r5
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	0018      	movs	r0, r3
 800a176:	f7ff fe5d 	bl	8009e34 <put_fat>
 800a17a:	0003      	movs	r3, r0
 800a17c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a17e:	197b      	adds	r3, r7, r5
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d11f      	bne.n	800a1c6 <remove_chain+0xc2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a14      	ldr	r2, [pc, #80]	; (800a1dc <remove_chain+0xd8>)
 800a18a:	589b      	ldr	r3, [r3, r2]
 800a18c:	3301      	adds	r3, #1
 800a18e:	d00f      	beq.n	800a1b0 <remove_chain+0xac>
				fs->free_clust++;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a12      	ldr	r2, [pc, #72]	; (800a1dc <remove_chain+0xd8>)
 800a194:	589b      	ldr	r3, [r3, r2]
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4910      	ldr	r1, [pc, #64]	; (800a1dc <remove_chain+0xd8>)
 800a19c:	505a      	str	r2, [r3, r1]
				fs->fsi_flag |= 1;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a0f      	ldr	r2, [pc, #60]	; (800a1e0 <remove_chain+0xdc>)
 800a1a2:	5c9b      	ldrb	r3, [r3, r2]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	b2d9      	uxtb	r1, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a0c      	ldr	r2, [pc, #48]	; (800a1e0 <remove_chain+0xdc>)
 800a1ae:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a08      	ldr	r2, [pc, #32]	; (800a1d8 <remove_chain+0xd4>)
 800a1b8:	589b      	ldr	r3, [r3, r2]
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d3b9      	bcc.n	800a134 <remove_chain+0x30>
 800a1c0:	e002      	b.n	800a1c8 <remove_chain+0xc4>
			if (nxt == 0) break;				/* Empty cluster? */
 800a1c2:	46c0      	nop			; (mov r8, r8)
 800a1c4:	e000      	b.n	800a1c8 <remove_chain+0xc4>
			if (res != FR_OK) break;
 800a1c6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800a1c8:	230f      	movs	r3, #15
 800a1ca:	18fb      	adds	r3, r7, r3
 800a1cc:	781b      	ldrb	r3, [r3, #0]
}
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	b004      	add	sp, #16
 800a1d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	00001014 	.word	0x00001014
 800a1dc:	00001010 	.word	0x00001010
 800a1e0:	00001005 	.word	0x00001005

0800a1e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a1e4:	b5b0      	push	{r4, r5, r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10f      	bne.n	800a214 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a50      	ldr	r2, [pc, #320]	; (800a338 <create_chain+0x154>)
 800a1f8:	589b      	ldr	r3, [r3, r2]
 800a1fa:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d005      	beq.n	800a20e <create_chain+0x2a>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a4d      	ldr	r2, [pc, #308]	; (800a33c <create_chain+0x158>)
 800a206:	589b      	ldr	r3, [r3, r2]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d31e      	bcc.n	800a24c <create_chain+0x68>
 800a20e:	2301      	movs	r3, #1
 800a210:	613b      	str	r3, [r7, #16]
 800a212:	e01b      	b.n	800a24c <create_chain+0x68>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	0011      	movs	r1, r2
 800a21a:	0018      	movs	r0, r3
 800a21c:	f7ff fd0c 	bl	8009c38 <get_fat>
 800a220:	0003      	movs	r3, r0
 800a222:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d801      	bhi.n	800a22e <create_chain+0x4a>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e07f      	b.n	800a32e <create_chain+0x14a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	3301      	adds	r3, #1
 800a232:	d101      	bne.n	800a238 <create_chain+0x54>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	e07a      	b.n	800a32e <create_chain+0x14a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a40      	ldr	r2, [pc, #256]	; (800a33c <create_chain+0x158>)
 800a23c:	589b      	ldr	r3, [r3, r2]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	429a      	cmp	r2, r3
 800a242:	d201      	bcs.n	800a248 <create_chain+0x64>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	e072      	b.n	800a32e <create_chain+0x14a>
		scl = clst;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	3301      	adds	r3, #1
 800a254:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a38      	ldr	r2, [pc, #224]	; (800a33c <create_chain+0x158>)
 800a25a:	589b      	ldr	r3, [r3, r2]
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d307      	bcc.n	800a272 <create_chain+0x8e>
			ncl = 2;
 800a262:	2302      	movs	r3, #2
 800a264:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d901      	bls.n	800a272 <create_chain+0x8e>
 800a26e:	2300      	movs	r3, #0
 800a270:	e05d      	b.n	800a32e <create_chain+0x14a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	0011      	movs	r1, r2
 800a278:	0018      	movs	r0, r3
 800a27a:	f7ff fcdd 	bl	8009c38 <get_fat>
 800a27e:	0003      	movs	r3, r0
 800a280:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00d      	beq.n	800a2a4 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	3301      	adds	r3, #1
 800a28c:	d002      	beq.n	800a294 <create_chain+0xb0>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <create_chain+0xb4>
			return cs;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	e04a      	b.n	800a32e <create_chain+0x14a>
		if (ncl == scl) return 0;		/* No free cluster */
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d1d7      	bne.n	800a250 <create_chain+0x6c>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e044      	b.n	800a32e <create_chain+0x14a>
		if (cs == 0) break;				/* Found a free cluster */
 800a2a4:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a2a6:	250f      	movs	r5, #15
 800a2a8:	197c      	adds	r4, r7, r5
 800a2aa:	4a25      	ldr	r2, [pc, #148]	; (800a340 <create_chain+0x15c>)
 800a2ac:	6979      	ldr	r1, [r7, #20]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	f7ff fdbf 	bl	8009e34 <put_fat>
 800a2b6:	0003      	movs	r3, r0
 800a2b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 800a2ba:	197b      	adds	r3, r7, r5
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10b      	bne.n	800a2da <create_chain+0xf6>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d008      	beq.n	800a2da <create_chain+0xf6>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a2c8:	197c      	adds	r4, r7, r5
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f7ff fdaf 	bl	8009e34 <put_fat>
 800a2d6:	0003      	movs	r3, r0
 800a2d8:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 800a2da:	230f      	movs	r3, #15
 800a2dc:	18fb      	adds	r3, r7, r3
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d119      	bne.n	800a318 <create_chain+0x134>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4914      	ldr	r1, [pc, #80]	; (800a338 <create_chain+0x154>)
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	505a      	str	r2, [r3, r1]
		if (fs->free_clust != 0xFFFFFFFF) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a15      	ldr	r2, [pc, #84]	; (800a344 <create_chain+0x160>)
 800a2f0:	589b      	ldr	r3, [r3, r2]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	d01a      	beq.n	800a32c <create_chain+0x148>
			fs->free_clust--;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a12      	ldr	r2, [pc, #72]	; (800a344 <create_chain+0x160>)
 800a2fa:	589b      	ldr	r3, [r3, r2]
 800a2fc:	1e5a      	subs	r2, r3, #1
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4910      	ldr	r1, [pc, #64]	; (800a344 <create_chain+0x160>)
 800a302:	505a      	str	r2, [r3, r1]
			fs->fsi_flag |= 1;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a10      	ldr	r2, [pc, #64]	; (800a348 <create_chain+0x164>)
 800a308:	5c9b      	ldrb	r3, [r3, r2]
 800a30a:	2201      	movs	r2, #1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	b2d9      	uxtb	r1, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a0d      	ldr	r2, [pc, #52]	; (800a348 <create_chain+0x164>)
 800a314:	5499      	strb	r1, [r3, r2]
 800a316:	e009      	b.n	800a32c <create_chain+0x148>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a318:	230f      	movs	r3, #15
 800a31a:	18fb      	adds	r3, r7, r3
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d102      	bne.n	800a328 <create_chain+0x144>
 800a322:	2301      	movs	r3, #1
 800a324:	425b      	negs	r3, r3
 800a326:	e000      	b.n	800a32a <create_chain+0x146>
 800a328:	2301      	movs	r3, #1
 800a32a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a32c:	697b      	ldr	r3, [r7, #20]
}
 800a32e:	0018      	movs	r0, r3
 800a330:	46bd      	mov	sp, r7
 800a332:	b006      	add	sp, #24
 800a334:	bdb0      	pop	{r4, r5, r7, pc}
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	0000100c 	.word	0x0000100c
 800a33c:	00001014 	.word	0x00001014
 800a340:	0fffffff 	.word	0x0fffffff
 800a344:	00001010 	.word	0x00001010
 800a348:	00001005 	.word	0x00001005

0800a34c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a1c      	ldr	r2, [pc, #112]	; (800a3cc <clmt_clust+0x80>)
 800a35a:	589b      	ldr	r3, [r3, r2]
 800a35c:	3304      	adds	r3, #4
 800a35e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	2380      	movs	r3, #128	; 0x80
 800a364:	015b      	lsls	r3, r3, #5
 800a366:	58d3      	ldr	r3, [r2, r3]
 800a368:	4a19      	ldr	r2, [pc, #100]	; (800a3d0 <clmt_clust+0x84>)
 800a36a:	5a9b      	ldrh	r3, [r3, r2]
 800a36c:	0019      	movs	r1, r3
 800a36e:	6838      	ldr	r0, [r7, #0]
 800a370:	f7f5 feee 	bl	8000150 <__udivsi3>
 800a374:	0003      	movs	r3, r0
 800a376:	0018      	movs	r0, r3
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	2380      	movs	r3, #128	; 0x80
 800a37c:	015b      	lsls	r3, r3, #5
 800a37e:	58d3      	ldr	r3, [r2, r3]
 800a380:	4a14      	ldr	r2, [pc, #80]	; (800a3d4 <clmt_clust+0x88>)
 800a382:	5c9b      	ldrb	r3, [r3, r2]
 800a384:	0019      	movs	r1, r3
 800a386:	f7f5 fee3 	bl	8000150 <__udivsi3>
 800a38a:	0003      	movs	r3, r0
 800a38c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	613a      	str	r2, [r7, #16]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <clmt_clust+0x56>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e010      	b.n	800a3c4 <clmt_clust+0x78>
		if (cl < ncl) break;	/* In this fragment? */
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d307      	bcc.n	800a3ba <clmt_clust+0x6e>
		cl -= ncl; tbl++;		/* Next fragment */
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a3b8:	e7e9      	b.n	800a38e <clmt_clust+0x42>
		if (cl < ncl) break;	/* In this fragment? */
 800a3ba:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	18d3      	adds	r3, r2, r3
}
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	b006      	add	sp, #24
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	00001024 	.word	0x00001024
 800a3d0:	0000100a 	.word	0x0000100a
 800a3d4:	00001002 	.word	0x00001002

0800a3d8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	b299      	uxth	r1, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a5d      	ldr	r2, [pc, #372]	; (800a560 <dir_sdi+0x188>)
 800a3ea:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a5d      	ldr	r2, [pc, #372]	; (800a564 <dir_sdi+0x18c>)
 800a3f0:	589b      	ldr	r3, [r3, r2]
 800a3f2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d008      	beq.n	800a40c <dir_sdi+0x34>
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	2380      	movs	r3, #128	; 0x80
 800a3fe:	015b      	lsls	r3, r3, #5
 800a400:	58d3      	ldr	r3, [r2, r3]
 800a402:	4a59      	ldr	r2, [pc, #356]	; (800a568 <dir_sdi+0x190>)
 800a404:	589b      	ldr	r3, [r3, r2]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d301      	bcc.n	800a410 <dir_sdi+0x38>
		return FR_INT_ERR;
 800a40c:	2302      	movs	r3, #2
 800a40e:	e0a2      	b.n	800a556 <dir_sdi+0x17e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10f      	bne.n	800a436 <dir_sdi+0x5e>
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	2380      	movs	r3, #128	; 0x80
 800a41a:	015b      	lsls	r3, r3, #5
 800a41c:	58d2      	ldr	r2, [r2, r3]
 800a41e:	2380      	movs	r3, #128	; 0x80
 800a420:	015b      	lsls	r3, r3, #5
 800a422:	5cd3      	ldrb	r3, [r2, r3]
 800a424:	2b03      	cmp	r3, #3
 800a426:	d106      	bne.n	800a436 <dir_sdi+0x5e>
		clst = dp->fs->dirbase;
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	2380      	movs	r3, #128	; 0x80
 800a42c:	015b      	lsls	r3, r3, #5
 800a42e:	58d3      	ldr	r3, [r2, r3]
 800a430:	4a4e      	ldr	r2, [pc, #312]	; (800a56c <dir_sdi+0x194>)
 800a432:	589b      	ldr	r3, [r3, r2]
 800a434:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d113      	bne.n	800a464 <dir_sdi+0x8c>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	2380      	movs	r3, #128	; 0x80
 800a440:	015b      	lsls	r3, r3, #5
 800a442:	58d3      	ldr	r3, [r2, r3]
 800a444:	4a47      	ldr	r2, [pc, #284]	; (800a564 <dir_sdi+0x18c>)
 800a446:	5a9b      	ldrh	r3, [r3, r2]
 800a448:	001a      	movs	r2, r3
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d301      	bcc.n	800a454 <dir_sdi+0x7c>
			return FR_INT_ERR;
 800a450:	2302      	movs	r3, #2
 800a452:	e080      	b.n	800a556 <dir_sdi+0x17e>
		sect = dp->fs->dirbase;
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	2380      	movs	r3, #128	; 0x80
 800a458:	015b      	lsls	r3, r3, #5
 800a45a:	58d3      	ldr	r3, [r2, r3]
 800a45c:	4a43      	ldr	r2, [pc, #268]	; (800a56c <dir_sdi+0x194>)
 800a45e:	589b      	ldr	r3, [r3, r2]
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	e042      	b.n	800a4ea <dir_sdi+0x112>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	2380      	movs	r3, #128	; 0x80
 800a468:	015b      	lsls	r3, r3, #5
 800a46a:	58d3      	ldr	r3, [r2, r3]
 800a46c:	4a40      	ldr	r2, [pc, #256]	; (800a570 <dir_sdi+0x198>)
 800a46e:	5a9b      	ldrh	r3, [r3, r2]
 800a470:	095b      	lsrs	r3, r3, #5
 800a472:	b29b      	uxth	r3, r3
 800a474:	0019      	movs	r1, r3
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	2380      	movs	r3, #128	; 0x80
 800a47a:	015b      	lsls	r3, r3, #5
 800a47c:	58d3      	ldr	r3, [r2, r3]
 800a47e:	4a3d      	ldr	r2, [pc, #244]	; (800a574 <dir_sdi+0x19c>)
 800a480:	5c9b      	ldrb	r3, [r3, r2]
 800a482:	434b      	muls	r3, r1
 800a484:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a486:	e021      	b.n	800a4cc <dir_sdi+0xf4>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	2380      	movs	r3, #128	; 0x80
 800a48c:	015b      	lsls	r3, r3, #5
 800a48e:	58d3      	ldr	r3, [r2, r3]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	0011      	movs	r1, r2
 800a494:	0018      	movs	r0, r3
 800a496:	f7ff fbcf 	bl	8009c38 <get_fat>
 800a49a:	0003      	movs	r3, r0
 800a49c:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	d101      	bne.n	800a4a8 <dir_sdi+0xd0>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e056      	b.n	800a556 <dir_sdi+0x17e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d908      	bls.n	800a4c0 <dir_sdi+0xe8>
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	2380      	movs	r3, #128	; 0x80
 800a4b2:	015b      	lsls	r3, r3, #5
 800a4b4:	58d3      	ldr	r3, [r2, r3]
 800a4b6:	4a2c      	ldr	r2, [pc, #176]	; (800a568 <dir_sdi+0x190>)
 800a4b8:	589b      	ldr	r3, [r3, r2]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d301      	bcc.n	800a4c4 <dir_sdi+0xec>
				return FR_INT_ERR;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e048      	b.n	800a556 <dir_sdi+0x17e>
			idx -= ic;
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d2d9      	bcs.n	800a488 <dir_sdi+0xb0>
		}
		sect = clust2sect(dp->fs, clst);
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	2380      	movs	r3, #128	; 0x80
 800a4d8:	015b      	lsls	r3, r3, #5
 800a4da:	58d3      	ldr	r3, [r2, r3]
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	0011      	movs	r1, r2
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f7ff fb83 	bl	8009bec <clust2sect>
 800a4e6:	0003      	movs	r3, r0
 800a4e8:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4922      	ldr	r1, [pc, #136]	; (800a578 <dir_sdi+0x1a0>)
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	505a      	str	r2, [r3, r1]
	if (!sect) return FR_INT_ERR;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <dir_sdi+0x124>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e02c      	b.n	800a556 <dir_sdi+0x17e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	2380      	movs	r3, #128	; 0x80
 800a500:	015b      	lsls	r3, r3, #5
 800a502:	58d3      	ldr	r3, [r2, r3]
 800a504:	4a1a      	ldr	r2, [pc, #104]	; (800a570 <dir_sdi+0x198>)
 800a506:	5a9b      	ldrh	r3, [r3, r2]
 800a508:	095b      	lsrs	r3, r3, #5
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	0019      	movs	r1, r3
 800a50e:	6838      	ldr	r0, [r7, #0]
 800a510:	f7f5 fe1e 	bl	8000150 <__udivsi3>
 800a514:	0003      	movs	r3, r0
 800a516:	001a      	movs	r2, r3
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	18d2      	adds	r2, r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4917      	ldr	r1, [pc, #92]	; (800a57c <dir_sdi+0x1a4>)
 800a520:	505a      	str	r2, [r3, r1]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	2380      	movs	r3, #128	; 0x80
 800a526:	015b      	lsls	r3, r3, #5
 800a528:	58d3      	ldr	r3, [r2, r3]
 800a52a:	001c      	movs	r4, r3
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	2380      	movs	r3, #128	; 0x80
 800a530:	015b      	lsls	r3, r3, #5
 800a532:	58d3      	ldr	r3, [r2, r3]
 800a534:	4a0e      	ldr	r2, [pc, #56]	; (800a570 <dir_sdi+0x198>)
 800a536:	5a9b      	ldrh	r3, [r3, r2]
 800a538:	095b      	lsrs	r3, r3, #5
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	001a      	movs	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	0011      	movs	r1, r2
 800a542:	0018      	movs	r0, r3
 800a544:	f7f5 fe8a 	bl	800025c <__aeabi_uidivmod>
 800a548:	000b      	movs	r3, r1
 800a54a:	015b      	lsls	r3, r3, #5
 800a54c:	18e2      	adds	r2, r4, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4905      	ldr	r1, [pc, #20]	; (800a568 <dir_sdi+0x190>)
 800a552:	505a      	str	r2, [r3, r1]

	return FR_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	0018      	movs	r0, r3
 800a558:	46bd      	mov	sp, r7
 800a55a:	b007      	add	sp, #28
 800a55c:	bd90      	pop	{r4, r7, pc}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	00001006 	.word	0x00001006
 800a564:	00001008 	.word	0x00001008
 800a568:	00001014 	.word	0x00001014
 800a56c:	00001024 	.word	0x00001024
 800a570:	0000100a 	.word	0x0000100a
 800a574:	00001002 	.word	0x00001002
 800a578:	0000100c 	.word	0x0000100c
 800a57c:	00001010 	.word	0x00001010

0800a580 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a580:	b590      	push	{r4, r7, lr}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a94      	ldr	r2, [pc, #592]	; (800a7e0 <dir_next+0x260>)
 800a58e:	5a9b      	ldrh	r3, [r3, r2]
 800a590:	3301      	adds	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	041b      	lsls	r3, r3, #16
 800a598:	0c1b      	lsrs	r3, r3, #16
 800a59a:	d004      	beq.n	800a5a6 <dir_next+0x26>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a91      	ldr	r2, [pc, #580]	; (800a7e4 <dir_next+0x264>)
 800a5a0:	589b      	ldr	r3, [r3, r2]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <dir_next+0x2a>
		return FR_NO_FILE;
 800a5a6:	2304      	movs	r3, #4
 800a5a8:	e115      	b.n	800a7d6 <dir_next+0x256>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	2380      	movs	r3, #128	; 0x80
 800a5ae:	015b      	lsls	r3, r3, #5
 800a5b0:	58d3      	ldr	r3, [r2, r3]
 800a5b2:	4a8d      	ldr	r2, [pc, #564]	; (800a7e8 <dir_next+0x268>)
 800a5b4:	5a9b      	ldrh	r3, [r3, r2]
 800a5b6:	095b      	lsrs	r3, r3, #5
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	001a      	movs	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	0011      	movs	r1, r2
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f7f5 fe4b 	bl	800025c <__aeabi_uidivmod>
 800a5c6:	1e0b      	subs	r3, r1, #0
 800a5c8:	d000      	beq.n	800a5cc <dir_next+0x4c>
 800a5ca:	e0e5      	b.n	800a798 <dir_next+0x218>
		dp->sect++;					/* Next sector */
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a85      	ldr	r2, [pc, #532]	; (800a7e4 <dir_next+0x264>)
 800a5d0:	589b      	ldr	r3, [r3, r2]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4983      	ldr	r1, [pc, #524]	; (800a7e4 <dir_next+0x264>)
 800a5d8:	505a      	str	r2, [r3, r1]

		if (!dp->clust) {		/* Static table */
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a83      	ldr	r2, [pc, #524]	; (800a7ec <dir_next+0x26c>)
 800a5de:	589b      	ldr	r3, [r3, r2]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10c      	bne.n	800a5fe <dir_next+0x7e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	2380      	movs	r3, #128	; 0x80
 800a5e8:	015b      	lsls	r3, r3, #5
 800a5ea:	58d3      	ldr	r3, [r2, r3]
 800a5ec:	4a80      	ldr	r2, [pc, #512]	; (800a7f0 <dir_next+0x270>)
 800a5ee:	5a9b      	ldrh	r3, [r3, r2]
 800a5f0:	001a      	movs	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d200      	bcs.n	800a5fa <dir_next+0x7a>
 800a5f8:	e0ce      	b.n	800a798 <dir_next+0x218>
				return FR_NO_FILE;
 800a5fa:	2304      	movs	r3, #4
 800a5fc:	e0eb      	b.n	800a7d6 <dir_next+0x256>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	2380      	movs	r3, #128	; 0x80
 800a602:	015b      	lsls	r3, r3, #5
 800a604:	58d3      	ldr	r3, [r2, r3]
 800a606:	4a78      	ldr	r2, [pc, #480]	; (800a7e8 <dir_next+0x268>)
 800a608:	5a9b      	ldrh	r3, [r3, r2]
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	0019      	movs	r1, r3
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7f5 fd9d 	bl	8000150 <__udivsi3>
 800a616:	0003      	movs	r3, r0
 800a618:	0019      	movs	r1, r3
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	2380      	movs	r3, #128	; 0x80
 800a61e:	015b      	lsls	r3, r3, #5
 800a620:	58d3      	ldr	r3, [r2, r3]
 800a622:	4a74      	ldr	r2, [pc, #464]	; (800a7f4 <dir_next+0x274>)
 800a624:	5c9b      	ldrb	r3, [r3, r2]
 800a626:	3b01      	subs	r3, #1
 800a628:	400b      	ands	r3, r1
 800a62a:	d000      	beq.n	800a62e <dir_next+0xae>
 800a62c:	e0b4      	b.n	800a798 <dir_next+0x218>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	015b      	lsls	r3, r3, #5
 800a634:	58d2      	ldr	r2, [r2, r3]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	496c      	ldr	r1, [pc, #432]	; (800a7ec <dir_next+0x26c>)
 800a63a:	585b      	ldr	r3, [r3, r1]
 800a63c:	0019      	movs	r1, r3
 800a63e:	0010      	movs	r0, r2
 800a640:	f7ff fafa 	bl	8009c38 <get_fat>
 800a644:	0003      	movs	r3, r0
 800a646:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d801      	bhi.n	800a652 <dir_next+0xd2>
 800a64e:	2302      	movs	r3, #2
 800a650:	e0c1      	b.n	800a7d6 <dir_next+0x256>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	3301      	adds	r3, #1
 800a656:	d101      	bne.n	800a65c <dir_next+0xdc>
 800a658:	2301      	movs	r3, #1
 800a65a:	e0bc      	b.n	800a7d6 <dir_next+0x256>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	2380      	movs	r3, #128	; 0x80
 800a660:	015b      	lsls	r3, r3, #5
 800a662:	58d3      	ldr	r3, [r2, r3]
 800a664:	4a64      	ldr	r2, [pc, #400]	; (800a7f8 <dir_next+0x278>)
 800a666:	589b      	ldr	r3, [r3, r2]
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d200      	bcs.n	800a670 <dir_next+0xf0>
 800a66e:	e082      	b.n	800a776 <dir_next+0x1f6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <dir_next+0xfa>
 800a676:	2304      	movs	r3, #4
 800a678:	e0ad      	b.n	800a7d6 <dir_next+0x256>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	015b      	lsls	r3, r3, #5
 800a680:	58d2      	ldr	r2, [r2, r3]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4959      	ldr	r1, [pc, #356]	; (800a7ec <dir_next+0x26c>)
 800a686:	585b      	ldr	r3, [r3, r1]
 800a688:	0019      	movs	r1, r3
 800a68a:	0010      	movs	r0, r2
 800a68c:	f7ff fdaa 	bl	800a1e4 <create_chain>
 800a690:	0003      	movs	r3, r0
 800a692:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <dir_next+0x11e>
 800a69a:	2307      	movs	r3, #7
 800a69c:	e09b      	b.n	800a7d6 <dir_next+0x256>
					if (clst == 1) return FR_INT_ERR;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d101      	bne.n	800a6a8 <dir_next+0x128>
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	e096      	b.n	800a7d6 <dir_next+0x256>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <dir_next+0x132>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e091      	b.n	800a7d6 <dir_next+0x256>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	2380      	movs	r3, #128	; 0x80
 800a6b6:	015b      	lsls	r3, r3, #5
 800a6b8:	58d3      	ldr	r3, [r2, r3]
 800a6ba:	0018      	movs	r0, r3
 800a6bc:	f7ff f930 	bl	8009920 <sync_window>
 800a6c0:	1e03      	subs	r3, r0, #0
 800a6c2:	d001      	beq.n	800a6c8 <dir_next+0x148>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e086      	b.n	800a7d6 <dir_next+0x256>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	2380      	movs	r3, #128	; 0x80
 800a6cc:	015b      	lsls	r3, r3, #5
 800a6ce:	58d3      	ldr	r3, [r2, r3]
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	015b      	lsls	r3, r3, #5
 800a6d8:	58d3      	ldr	r3, [r2, r3]
 800a6da:	4a43      	ldr	r2, [pc, #268]	; (800a7e8 <dir_next+0x268>)
 800a6dc:	5a9b      	ldrh	r3, [r3, r2]
 800a6de:	001a      	movs	r2, r3
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	f7fe ff58 	bl	8009596 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	015b      	lsls	r3, r3, #5
 800a6ec:	58d0      	ldr	r0, [r2, r3]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	2380      	movs	r3, #128	; 0x80
 800a6f2:	015b      	lsls	r3, r3, #5
 800a6f4:	58d4      	ldr	r4, [r2, r3]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	0019      	movs	r1, r3
 800a6fa:	f7ff fa77 	bl	8009bec <clust2sect>
 800a6fe:	0003      	movs	r3, r0
 800a700:	4a3e      	ldr	r2, [pc, #248]	; (800a7fc <dir_next+0x27c>)
 800a702:	50a3      	str	r3, [r4, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a704:	2300      	movs	r3, #0
 800a706:	613b      	str	r3, [r7, #16]
 800a708:	e01d      	b.n	800a746 <dir_next+0x1c6>
						dp->fs->wflag = 1;
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	2380      	movs	r3, #128	; 0x80
 800a70e:	015b      	lsls	r3, r3, #5
 800a710:	58d3      	ldr	r3, [r2, r3]
 800a712:	4a3b      	ldr	r2, [pc, #236]	; (800a800 <dir_next+0x280>)
 800a714:	2101      	movs	r1, #1
 800a716:	5499      	strb	r1, [r3, r2]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	2380      	movs	r3, #128	; 0x80
 800a71c:	015b      	lsls	r3, r3, #5
 800a71e:	58d3      	ldr	r3, [r2, r3]
 800a720:	0018      	movs	r0, r3
 800a722:	f7ff f8fd 	bl	8009920 <sync_window>
 800a726:	1e03      	subs	r3, r0, #0
 800a728:	d001      	beq.n	800a72e <dir_next+0x1ae>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e053      	b.n	800a7d6 <dir_next+0x256>
						dp->fs->winsect++;
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	2380      	movs	r3, #128	; 0x80
 800a732:	015b      	lsls	r3, r3, #5
 800a734:	58d3      	ldr	r3, [r2, r3]
 800a736:	4a31      	ldr	r2, [pc, #196]	; (800a7fc <dir_next+0x27c>)
 800a738:	589a      	ldr	r2, [r3, r2]
 800a73a:	3201      	adds	r2, #1
 800a73c:	492f      	ldr	r1, [pc, #188]	; (800a7fc <dir_next+0x27c>)
 800a73e:	505a      	str	r2, [r3, r1]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	3301      	adds	r3, #1
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	2380      	movs	r3, #128	; 0x80
 800a74a:	015b      	lsls	r3, r3, #5
 800a74c:	58d3      	ldr	r3, [r2, r3]
 800a74e:	4a29      	ldr	r2, [pc, #164]	; (800a7f4 <dir_next+0x274>)
 800a750:	5c9b      	ldrb	r3, [r3, r2]
 800a752:	001a      	movs	r2, r3
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	4293      	cmp	r3, r2
 800a758:	d3d7      	bcc.n	800a70a <dir_next+0x18a>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	2380      	movs	r3, #128	; 0x80
 800a75e:	015b      	lsls	r3, r3, #5
 800a760:	58d3      	ldr	r3, [r2, r3]
 800a762:	4a26      	ldr	r2, [pc, #152]	; (800a7fc <dir_next+0x27c>)
 800a764:	5899      	ldr	r1, [r3, r2]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	2380      	movs	r3, #128	; 0x80
 800a76a:	015b      	lsls	r3, r3, #5
 800a76c:	58d3      	ldr	r3, [r2, r3]
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	1a8a      	subs	r2, r1, r2
 800a772:	4922      	ldr	r1, [pc, #136]	; (800a7fc <dir_next+0x27c>)
 800a774:	505a      	str	r2, [r3, r1]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	491c      	ldr	r1, [pc, #112]	; (800a7ec <dir_next+0x26c>)
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	505a      	str	r2, [r3, r1]
				dp->sect = clust2sect(dp->fs, clst);
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	2380      	movs	r3, #128	; 0x80
 800a782:	015b      	lsls	r3, r3, #5
 800a784:	58d3      	ldr	r3, [r2, r3]
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	0011      	movs	r1, r2
 800a78a:	0018      	movs	r0, r3
 800a78c:	f7ff fa2e 	bl	8009bec <clust2sect>
 800a790:	0002      	movs	r2, r0
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4913      	ldr	r1, [pc, #76]	; (800a7e4 <dir_next+0x264>)
 800a796:	505a      	str	r2, [r3, r1]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	b299      	uxth	r1, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a10      	ldr	r2, [pc, #64]	; (800a7e0 <dir_next+0x260>)
 800a7a0:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	2380      	movs	r3, #128	; 0x80
 800a7a6:	015b      	lsls	r3, r3, #5
 800a7a8:	58d3      	ldr	r3, [r2, r3]
 800a7aa:	001c      	movs	r4, r3
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	2380      	movs	r3, #128	; 0x80
 800a7b0:	015b      	lsls	r3, r3, #5
 800a7b2:	58d3      	ldr	r3, [r2, r3]
 800a7b4:	4a0c      	ldr	r2, [pc, #48]	; (800a7e8 <dir_next+0x268>)
 800a7b6:	5a9b      	ldrh	r3, [r3, r2]
 800a7b8:	095b      	lsrs	r3, r3, #5
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	001a      	movs	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	0011      	movs	r1, r2
 800a7c2:	0018      	movs	r0, r3
 800a7c4:	f7f5 fd4a 	bl	800025c <__aeabi_uidivmod>
 800a7c8:	000b      	movs	r3, r1
 800a7ca:	015b      	lsls	r3, r3, #5
 800a7cc:	18e2      	adds	r2, r4, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4909      	ldr	r1, [pc, #36]	; (800a7f8 <dir_next+0x278>)
 800a7d2:	505a      	str	r2, [r3, r1]

	return FR_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	b007      	add	sp, #28
 800a7dc:	bd90      	pop	{r4, r7, pc}
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	00001006 	.word	0x00001006
 800a7e4:	00001010 	.word	0x00001010
 800a7e8:	0000100a 	.word	0x0000100a
 800a7ec:	0000100c 	.word	0x0000100c
 800a7f0:	00001008 	.word	0x00001008
 800a7f4:	00001002 	.word	0x00001002
 800a7f8:	00001014 	.word	0x00001014
 800a7fc:	0000102c 	.word	0x0000102c
 800a800:	00001004 	.word	0x00001004

0800a804 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a804:	b5b0      	push	{r4, r5, r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a80e:	250f      	movs	r5, #15
 800a810:	197c      	adds	r4, r7, r5
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2100      	movs	r1, #0
 800a816:	0018      	movs	r0, r3
 800a818:	f7ff fdde 	bl	800a3d8 <dir_sdi>
 800a81c:	0003      	movs	r3, r0
 800a81e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a820:	197b      	adds	r3, r7, r5
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d139      	bne.n	800a89c <dir_alloc+0x98>
		n = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	2380      	movs	r3, #128	; 0x80
 800a830:	015b      	lsls	r3, r3, #5
 800a832:	58d2      	ldr	r2, [r2, r3]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4921      	ldr	r1, [pc, #132]	; (800a8bc <dir_alloc+0xb8>)
 800a838:	585b      	ldr	r3, [r3, r1]
 800a83a:	250f      	movs	r5, #15
 800a83c:	197c      	adds	r4, r7, r5
 800a83e:	0019      	movs	r1, r3
 800a840:	0010      	movs	r0, r2
 800a842:	f7ff f8c5 	bl	80099d0 <move_window>
 800a846:	0003      	movs	r3, r0
 800a848:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800a84a:	197b      	adds	r3, r7, r5
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d123      	bne.n	800a89a <dir_alloc+0x96>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a1a      	ldr	r2, [pc, #104]	; (800a8c0 <dir_alloc+0xbc>)
 800a856:	589b      	ldr	r3, [r3, r2]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2be5      	cmp	r3, #229	; 0xe5
 800a85c:	d005      	beq.n	800a86a <dir_alloc+0x66>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <dir_alloc+0xbc>)
 800a862:	589b      	ldr	r3, [r3, r2]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d107      	bne.n	800a87a <dir_alloc+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60bb      	str	r3, [r7, #8]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d102      	bne.n	800a87e <dir_alloc+0x7a>
 800a878:	e010      	b.n	800a89c <dir_alloc+0x98>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a87a:	2300      	movs	r3, #0
 800a87c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a87e:	250f      	movs	r5, #15
 800a880:	197c      	adds	r4, r7, r5
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2101      	movs	r1, #1
 800a886:	0018      	movs	r0, r3
 800a888:	f7ff fe7a 	bl	800a580 <dir_next>
 800a88c:	0003      	movs	r3, r0
 800a88e:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 800a890:	197b      	adds	r3, r7, r5
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0c9      	beq.n	800a82c <dir_alloc+0x28>
 800a898:	e000      	b.n	800a89c <dir_alloc+0x98>
			if (res != FR_OK) break;
 800a89a:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a89c:	220f      	movs	r2, #15
 800a89e:	18bb      	adds	r3, r7, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d102      	bne.n	800a8ac <dir_alloc+0xa8>
 800a8a6:	18bb      	adds	r3, r7, r2
 800a8a8:	2207      	movs	r2, #7
 800a8aa:	701a      	strb	r2, [r3, #0]
	return res;
 800a8ac:	230f      	movs	r3, #15
 800a8ae:	18fb      	adds	r3, r7, r3
 800a8b0:	781b      	ldrb	r3, [r3, #0]
}
 800a8b2:	0018      	movs	r0, r3
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	b004      	add	sp, #16
 800a8b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	00001010 	.word	0x00001010
 800a8c0:	00001014 	.word	0x00001014

0800a8c4 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	331b      	adds	r3, #27
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	b21a      	sxth	r2, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	331a      	adds	r3, #26
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b21b      	sxth	r3, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	b21b      	sxth	r3, r3
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	2380      	movs	r3, #128	; 0x80
 800a8ec:	015b      	lsls	r3, r3, #5
 800a8ee:	5cd3      	ldrb	r3, [r2, r3]
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d10f      	bne.n	800a914 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	3315      	adds	r3, #21
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	021b      	lsls	r3, r3, #8
 800a8fc:	b21a      	sxth	r2, r3
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	3314      	adds	r3, #20
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b21b      	sxth	r3, r3
 800a906:	4313      	orrs	r3, r2
 800a908:	b21b      	sxth	r3, r3
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	041b      	lsls	r3, r3, #16
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

	return cl;
 800a914:	68fb      	ldr	r3, [r7, #12]
}
 800a916:	0018      	movs	r0, r3
 800a918:	46bd      	mov	sp, r7
 800a91a:	b004      	add	sp, #16
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	331a      	adds	r3, #26
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	b29b      	uxth	r3, r3
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	b29a      	uxth	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	331b      	adds	r3, #27
 800a93e:	b2d2      	uxtb	r2, r2
 800a940:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	0c1a      	lsrs	r2, r3, #16
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3314      	adds	r3, #20
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	0c1b      	lsrs	r3, r3, #16
 800a952:	b29b      	uxth	r3, r3
 800a954:	0a1b      	lsrs	r3, r3, #8
 800a956:	b29a      	uxth	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3315      	adds	r3, #21
 800a95c:	b2d2      	uxtb	r2, r2
 800a95e:	701a      	strb	r2, [r3, #0]
}
 800a960:	46c0      	nop			; (mov r8, r8)
 800a962:	46bd      	mov	sp, r7
 800a964:	b002      	add	sp, #8
 800a966:	bd80      	pop	{r7, pc}

0800a968 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a968:	b5b0      	push	{r4, r5, r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a970:	2517      	movs	r5, #23
 800a972:	197c      	adds	r4, r7, r5
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2100      	movs	r1, #0
 800a978:	0018      	movs	r0, r3
 800a97a:	f7ff fd2d 	bl	800a3d8 <dir_sdi>
 800a97e:	0003      	movs	r3, r0
 800a980:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800a982:	197b      	adds	r3, r7, r5
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <dir_find+0x28>
 800a98a:	197b      	adds	r3, r7, r5
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	e049      	b.n	800aa24 <dir_find+0xbc>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	2380      	movs	r3, #128	; 0x80
 800a994:	015b      	lsls	r3, r3, #5
 800a996:	58d2      	ldr	r2, [r2, r3]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4924      	ldr	r1, [pc, #144]	; (800aa2c <dir_find+0xc4>)
 800a99c:	585b      	ldr	r3, [r3, r1]
 800a99e:	2517      	movs	r5, #23
 800a9a0:	197c      	adds	r4, r7, r5
 800a9a2:	0019      	movs	r1, r3
 800a9a4:	0010      	movs	r0, r2
 800a9a6:	f7ff f813 	bl	80099d0 <move_window>
 800a9aa:	0003      	movs	r3, r0
 800a9ac:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800a9ae:	0029      	movs	r1, r5
 800a9b0:	187b      	adds	r3, r7, r1
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d12f      	bne.n	800aa18 <dir_find+0xb0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a1d      	ldr	r2, [pc, #116]	; (800aa30 <dir_find+0xc8>)
 800a9bc:	589b      	ldr	r3, [r3, r2]
 800a9be:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a9c0:	200f      	movs	r0, #15
 800a9c2:	183b      	adds	r3, r7, r0
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	7812      	ldrb	r2, [r2, #0]
 800a9c8:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a9ca:	183b      	adds	r3, r7, r0
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <dir_find+0x72>
 800a9d2:	187b      	adds	r3, r7, r1
 800a9d4:	2204      	movs	r2, #4
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	e021      	b.n	800aa1e <dir_find+0xb6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	330b      	adds	r3, #11
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	001a      	movs	r2, r3
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	d109      	bne.n	800a9fc <dir_find+0x94>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a12      	ldr	r2, [pc, #72]	; (800aa34 <dir_find+0xcc>)
 800a9ec:	5899      	ldr	r1, [r3, r2]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	220b      	movs	r2, #11
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f7fe fde8 	bl	80095c8 <mem_cmp>
 800a9f8:	1e03      	subs	r3, r0, #0
 800a9fa:	d00f      	beq.n	800aa1c <dir_find+0xb4>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a9fc:	2517      	movs	r5, #23
 800a9fe:	197c      	adds	r4, r7, r5
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2100      	movs	r1, #0
 800aa04:	0018      	movs	r0, r3
 800aa06:	f7ff fdbb 	bl	800a580 <dir_next>
 800aa0a:	0003      	movs	r3, r0
 800aa0c:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800aa0e:	197b      	adds	r3, r7, r5
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0bc      	beq.n	800a990 <dir_find+0x28>
 800aa16:	e002      	b.n	800aa1e <dir_find+0xb6>
		if (res != FR_OK) break;
 800aa18:	46c0      	nop			; (mov r8, r8)
 800aa1a:	e000      	b.n	800aa1e <dir_find+0xb6>
			break;
 800aa1c:	46c0      	nop			; (mov r8, r8)

	return res;
 800aa1e:	2317      	movs	r3, #23
 800aa20:	18fb      	adds	r3, r7, r3
 800aa22:	781b      	ldrb	r3, [r3, #0]
}
 800aa24:	0018      	movs	r0, r3
 800aa26:	46bd      	mov	sp, r7
 800aa28:	b006      	add	sp, #24
 800aa2a:	bdb0      	pop	{r4, r5, r7, pc}
 800aa2c:	00001010 	.word	0x00001010
 800aa30:	00001014 	.word	0x00001014
 800aa34:	00001018 	.word	0x00001018

0800aa38 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa38:	b5b0      	push	{r4, r5, r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa40:	250f      	movs	r5, #15
 800aa42:	197c      	adds	r4, r7, r5
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2101      	movs	r1, #1
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f7ff fedb 	bl	800a804 <dir_alloc>
 800aa4e:	0003      	movs	r3, r0
 800aa50:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800aa52:	0028      	movs	r0, r5
 800aa54:	183b      	adds	r3, r7, r0
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d12b      	bne.n	800aab4 <dir_register+0x7c>
		res = move_window(dp->fs, dp->sect);
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	2380      	movs	r3, #128	; 0x80
 800aa60:	015b      	lsls	r3, r3, #5
 800aa62:	58d2      	ldr	r2, [r2, r3]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4917      	ldr	r1, [pc, #92]	; (800aac4 <dir_register+0x8c>)
 800aa68:	585b      	ldr	r3, [r3, r1]
 800aa6a:	0005      	movs	r5, r0
 800aa6c:	183c      	adds	r4, r7, r0
 800aa6e:	0019      	movs	r1, r3
 800aa70:	0010      	movs	r0, r2
 800aa72:	f7fe ffad 	bl	80099d0 <move_window>
 800aa76:	0003      	movs	r3, r0
 800aa78:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800aa7a:	197b      	adds	r3, r7, r5
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d118      	bne.n	800aab4 <dir_register+0x7c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a10      	ldr	r2, [pc, #64]	; (800aac8 <dir_register+0x90>)
 800aa86:	589b      	ldr	r3, [r3, r2]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f7fe fd82 	bl	8009596 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a0c      	ldr	r2, [pc, #48]	; (800aac8 <dir_register+0x90>)
 800aa96:	5898      	ldr	r0, [r3, r2]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a0c      	ldr	r2, [pc, #48]	; (800aacc <dir_register+0x94>)
 800aa9c:	589b      	ldr	r3, [r3, r2]
 800aa9e:	220b      	movs	r2, #11
 800aaa0:	0019      	movs	r1, r3
 800aaa2:	f7fe fd5b 	bl	800955c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	2380      	movs	r3, #128	; 0x80
 800aaaa:	015b      	lsls	r3, r3, #5
 800aaac:	58d3      	ldr	r3, [r2, r3]
 800aaae:	4a08      	ldr	r2, [pc, #32]	; (800aad0 <dir_register+0x98>)
 800aab0:	2101      	movs	r1, #1
 800aab2:	5499      	strb	r1, [r3, r2]
		}
	}

	return res;
 800aab4:	230f      	movs	r3, #15
 800aab6:	18fb      	adds	r3, r7, r3
 800aab8:	781b      	ldrb	r3, [r3, #0]
}
 800aaba:	0018      	movs	r0, r3
 800aabc:	46bd      	mov	sp, r7
 800aabe:	b004      	add	sp, #16
 800aac0:	bdb0      	pop	{r4, r5, r7, pc}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	00001010 	.word	0x00001010
 800aac8:	00001014 	.word	0x00001014
 800aacc:	00001018 	.word	0x00001018
 800aad0:	00001004 	.word	0x00001004

0800aad4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e002      	b.n	800aaec <create_name+0x18>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	3301      	adds	r3, #1
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b2f      	cmp	r3, #47	; 0x2f
 800aaf2:	d0f8      	beq.n	800aae6 <create_name+0x12>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b5c      	cmp	r3, #92	; 0x5c
 800aafa:	d0f4      	beq.n	800aae6 <create_name+0x12>
	sfn = dp->fn;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a73      	ldr	r2, [pc, #460]	; (800accc <create_name+0x1f8>)
 800ab00:	589b      	ldr	r3, [r3, r2]
 800ab02:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	220b      	movs	r2, #11
 800ab08:	2120      	movs	r1, #32
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f7fe fd43 	bl	8009596 <mem_set>
	si = i = b = 0; ni = 8;
 800ab10:	231f      	movs	r3, #31
 800ab12:	18fb      	adds	r3, r7, r3
 800ab14:	2200      	movs	r2, #0
 800ab16:	701a      	strb	r2, [r3, #0]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	2308      	movs	r3, #8
 800ab22:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	617a      	str	r2, [r7, #20]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	18d2      	adds	r2, r2, r3
 800ab2e:	211e      	movs	r1, #30
 800ab30:	187b      	adds	r3, r7, r1
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800ab36:	000a      	movs	r2, r1
 800ab38:	18bb      	adds	r3, r7, r2
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d800      	bhi.n	800ab42 <create_name+0x6e>
 800ab40:	e077      	b.n	800ac32 <create_name+0x15e>
 800ab42:	18bb      	adds	r3, r7, r2
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b2f      	cmp	r3, #47	; 0x2f
 800ab48:	d100      	bne.n	800ab4c <create_name+0x78>
 800ab4a:	e072      	b.n	800ac32 <create_name+0x15e>
 800ab4c:	18bb      	adds	r3, r7, r2
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	2b5c      	cmp	r3, #92	; 0x5c
 800ab52:	d100      	bne.n	800ab56 <create_name+0x82>
 800ab54:	e06d      	b.n	800ac32 <create_name+0x15e>
		if (c == '.' || i >= ni) {
 800ab56:	18bb      	adds	r3, r7, r2
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab5c:	d003      	beq.n	800ab66 <create_name+0x92>
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d314      	bcc.n	800ab90 <create_name+0xbc>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b08      	cmp	r3, #8
 800ab6a:	d104      	bne.n	800ab76 <create_name+0xa2>
 800ab6c:	231e      	movs	r3, #30
 800ab6e:	18fb      	adds	r3, r7, r3
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	2b2e      	cmp	r3, #46	; 0x2e
 800ab74:	d001      	beq.n	800ab7a <create_name+0xa6>
 800ab76:	2306      	movs	r3, #6
 800ab78:	e0a3      	b.n	800acc2 <create_name+0x1ee>
			i = 8; ni = 11;
 800ab7a:	2308      	movs	r3, #8
 800ab7c:	613b      	str	r3, [r7, #16]
 800ab7e:	230b      	movs	r3, #11
 800ab80:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800ab82:	221f      	movs	r2, #31
 800ab84:	18bb      	adds	r3, r7, r2
 800ab86:	18ba      	adds	r2, r7, r2
 800ab88:	7812      	ldrb	r2, [r2, #0]
 800ab8a:	0092      	lsls	r2, r2, #2
 800ab8c:	701a      	strb	r2, [r3, #0]
 800ab8e:	e04f      	b.n	800ac30 <create_name+0x15c>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ab90:	201e      	movs	r0, #30
 800ab92:	183b      	adds	r3, r7, r0
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	b25b      	sxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	da0e      	bge.n	800abba <create_name+0xe6>
			b |= 3;						/* Eliminate NT flag */
 800ab9c:	221f      	movs	r2, #31
 800ab9e:	18bb      	adds	r3, r7, r2
 800aba0:	18ba      	adds	r2, r7, r2
 800aba2:	7812      	ldrb	r2, [r2, #0]
 800aba4:	2103      	movs	r1, #3
 800aba6:	430a      	orrs	r2, r1
 800aba8:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800abaa:	183b      	adds	r3, r7, r0
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	3b80      	subs	r3, #128	; 0x80
 800abb0:	001a      	movs	r2, r3
 800abb2:	183b      	adds	r3, r7, r0
 800abb4:	4946      	ldr	r1, [pc, #280]	; (800acd0 <create_name+0x1fc>)
 800abb6:	5c8a      	ldrb	r2, [r1, r2]
 800abb8:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800abba:	231e      	movs	r3, #30
 800abbc:	18fb      	adds	r3, r7, r3
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	4b44      	ldr	r3, [pc, #272]	; (800acd4 <create_name+0x200>)
 800abc2:	0011      	movs	r1, r2
 800abc4:	0018      	movs	r0, r3
 800abc6:	f7fe fd24 	bl	8009612 <chk_chr>
 800abca:	1e03      	subs	r3, r0, #0
 800abcc:	d001      	beq.n	800abd2 <create_name+0xfe>
				return FR_INVALID_NAME;
 800abce:	2306      	movs	r3, #6
 800abd0:	e077      	b.n	800acc2 <create_name+0x1ee>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800abd2:	221e      	movs	r2, #30
 800abd4:	18bb      	adds	r3, r7, r2
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b40      	cmp	r3, #64	; 0x40
 800abda:	d90b      	bls.n	800abf4 <create_name+0x120>
 800abdc:	18bb      	adds	r3, r7, r2
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b5a      	cmp	r3, #90	; 0x5a
 800abe2:	d807      	bhi.n	800abf4 <create_name+0x120>
				b |= 2;
 800abe4:	221f      	movs	r2, #31
 800abe6:	18bb      	adds	r3, r7, r2
 800abe8:	18ba      	adds	r2, r7, r2
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	2102      	movs	r1, #2
 800abee:	430a      	orrs	r2, r1
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e014      	b.n	800ac1e <create_name+0x14a>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800abf4:	201e      	movs	r0, #30
 800abf6:	183b      	adds	r3, r7, r0
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b60      	cmp	r3, #96	; 0x60
 800abfc:	d90f      	bls.n	800ac1e <create_name+0x14a>
 800abfe:	183b      	adds	r3, r7, r0
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b7a      	cmp	r3, #122	; 0x7a
 800ac04:	d80b      	bhi.n	800ac1e <create_name+0x14a>
					b |= 1; c -= 0x20;
 800ac06:	221f      	movs	r2, #31
 800ac08:	18bb      	adds	r3, r7, r2
 800ac0a:	18ba      	adds	r2, r7, r2
 800ac0c:	7812      	ldrb	r2, [r2, #0]
 800ac0e:	2101      	movs	r1, #1
 800ac10:	430a      	orrs	r2, r1
 800ac12:	701a      	strb	r2, [r3, #0]
 800ac14:	183b      	adds	r3, r7, r0
 800ac16:	183a      	adds	r2, r7, r0
 800ac18:	7812      	ldrb	r2, [r2, #0]
 800ac1a:	3a20      	subs	r2, #32
 800ac1c:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	613a      	str	r2, [r7, #16]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	18d3      	adds	r3, r2, r3
 800ac28:	221e      	movs	r2, #30
 800ac2a:	18ba      	adds	r2, r7, r2
 800ac2c:	7812      	ldrb	r2, [r2, #0]
 800ac2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac30:	e778      	b.n	800ab24 <create_name+0x50>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	18d2      	adds	r2, r2, r3
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ac3c:	231e      	movs	r3, #30
 800ac3e:	18fb      	adds	r3, r7, r3
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	d801      	bhi.n	800ac4a <create_name+0x176>
 800ac46:	2204      	movs	r2, #4
 800ac48:	e000      	b.n	800ac4c <create_name+0x178>
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	231e      	movs	r3, #30
 800ac4e:	18fb      	adds	r3, r7, r3
 800ac50:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <create_name+0x188>
 800ac58:	2306      	movs	r3, #6
 800ac5a:	e032      	b.n	800acc2 <create_name+0x1ee>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	2be5      	cmp	r3, #229	; 0xe5
 800ac62:	d102      	bne.n	800ac6a <create_name+0x196>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2205      	movs	r2, #5
 800ac68:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	2b08      	cmp	r3, #8
 800ac6e:	d105      	bne.n	800ac7c <create_name+0x1a8>
 800ac70:	221f      	movs	r2, #31
 800ac72:	18bb      	adds	r3, r7, r2
 800ac74:	18ba      	adds	r2, r7, r2
 800ac76:	7812      	ldrb	r2, [r2, #0]
 800ac78:	0092      	lsls	r2, r2, #2
 800ac7a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800ac7c:	231f      	movs	r3, #31
 800ac7e:	18fb      	adds	r3, r7, r3
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2203      	movs	r2, #3
 800ac84:	4013      	ands	r3, r2
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d106      	bne.n	800ac98 <create_name+0x1c4>
 800ac8a:	221e      	movs	r2, #30
 800ac8c:	18bb      	adds	r3, r7, r2
 800ac8e:	18ba      	adds	r2, r7, r2
 800ac90:	7812      	ldrb	r2, [r2, #0]
 800ac92:	2110      	movs	r1, #16
 800ac94:	430a      	orrs	r2, r1
 800ac96:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800ac98:	231f      	movs	r3, #31
 800ac9a:	18fb      	adds	r3, r7, r3
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	220c      	movs	r2, #12
 800aca0:	4013      	ands	r3, r2
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	d106      	bne.n	800acb4 <create_name+0x1e0>
 800aca6:	221e      	movs	r2, #30
 800aca8:	18bb      	adds	r3, r7, r2
 800acaa:	18ba      	adds	r2, r7, r2
 800acac:	7812      	ldrb	r2, [r2, #0]
 800acae:	2108      	movs	r1, #8
 800acb0:	430a      	orrs	r2, r1
 800acb2:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	330b      	adds	r3, #11
 800acb8:	221e      	movs	r2, #30
 800acba:	18ba      	adds	r2, r7, r2
 800acbc:	7812      	ldrb	r2, [r2, #0]
 800acbe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800acc0:	2300      	movs	r3, #0
#endif
}
 800acc2:	0018      	movs	r0, r3
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b008      	add	sp, #32
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	46c0      	nop			; (mov r8, r8)
 800accc:	00001018 	.word	0x00001018
 800acd0:	08012b88 	.word	0x08012b88
 800acd4:	080129ec 	.word	0x080129ec

0800acd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800acd8:	b5b0      	push	{r4, r5, r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b2f      	cmp	r3, #47	; 0x2f
 800ace8:	d003      	beq.n	800acf2 <follow_path+0x1a>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b5c      	cmp	r3, #92	; 0x5c
 800acf0:	d102      	bne.n	800acf8 <follow_path+0x20>
		path++;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	3301      	adds	r3, #1
 800acf6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a39      	ldr	r2, [pc, #228]	; (800ade0 <follow_path+0x108>)
 800acfc:	2100      	movs	r1, #0
 800acfe:	5099      	str	r1, [r3, r2]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b1f      	cmp	r3, #31
 800ad06:	d80d      	bhi.n	800ad24 <follow_path+0x4c>
		res = dir_sdi(dp, 0);
 800ad08:	230f      	movs	r3, #15
 800ad0a:	18fc      	adds	r4, r7, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2100      	movs	r1, #0
 800ad10:	0018      	movs	r0, r3
 800ad12:	f7ff fb61 	bl	800a3d8 <dir_sdi>
 800ad16:	0003      	movs	r3, r0
 800ad18:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a31      	ldr	r2, [pc, #196]	; (800ade4 <follow_path+0x10c>)
 800ad1e:	2100      	movs	r1, #0
 800ad20:	5099      	str	r1, [r3, r2]
 800ad22:	e055      	b.n	800add0 <follow_path+0xf8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad24:	250f      	movs	r5, #15
 800ad26:	197c      	adds	r4, r7, r5
 800ad28:	003a      	movs	r2, r7
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	0011      	movs	r1, r2
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f7ff fed0 	bl	800aad4 <create_name>
 800ad34:	0003      	movs	r3, r0
 800ad36:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800ad38:	197b      	adds	r3, r7, r5
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d142      	bne.n	800adc6 <follow_path+0xee>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800ad40:	197c      	adds	r4, r7, r5
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	0018      	movs	r0, r3
 800ad46:	f7ff fe0f 	bl	800a968 <dir_find>
 800ad4a:	0003      	movs	r3, r0
 800ad4c:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a25      	ldr	r2, [pc, #148]	; (800ade8 <follow_path+0x110>)
 800ad52:	589a      	ldr	r2, [r3, r2]
 800ad54:	210e      	movs	r1, #14
 800ad56:	187b      	adds	r3, r7, r1
 800ad58:	7ad2      	ldrb	r2, [r2, #11]
 800ad5a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800ad5c:	197b      	adds	r3, r7, r5
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00c      	beq.n	800ad7e <follow_path+0xa6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ad64:	197b      	adds	r3, r7, r5
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d12e      	bne.n	800adca <follow_path+0xf2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad6c:	187b      	adds	r3, r7, r1
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	2204      	movs	r2, #4
 800ad72:	4013      	ands	r3, r2
 800ad74:	d129      	bne.n	800adca <follow_path+0xf2>
 800ad76:	197b      	adds	r3, r7, r5
 800ad78:	2205      	movs	r2, #5
 800ad7a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800ad7c:	e025      	b.n	800adca <follow_path+0xf2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad7e:	230e      	movs	r3, #14
 800ad80:	18fb      	adds	r3, r7, r3
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2204      	movs	r2, #4
 800ad86:	4013      	ands	r3, r2
 800ad88:	d121      	bne.n	800adce <follow_path+0xf6>
			dir = dp->dir;						/* Follow the sub-directory */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a15      	ldr	r2, [pc, #84]	; (800ade4 <follow_path+0x10c>)
 800ad8e:	589b      	ldr	r3, [r3, r2]
 800ad90:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	330b      	adds	r3, #11
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	001a      	movs	r2, r3
 800ad9a:	2310      	movs	r3, #16
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	d104      	bne.n	800adaa <follow_path+0xd2>
				res = FR_NO_PATH; break;
 800ada0:	230f      	movs	r3, #15
 800ada2:	18fb      	adds	r3, r7, r3
 800ada4:	2205      	movs	r2, #5
 800ada6:	701a      	strb	r2, [r3, #0]
 800ada8:	e012      	b.n	800add0 <follow_path+0xf8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	2380      	movs	r3, #128	; 0x80
 800adae:	015b      	lsls	r3, r3, #5
 800adb0:	58d3      	ldr	r3, [r2, r3]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	0011      	movs	r1, r2
 800adb6:	0018      	movs	r0, r3
 800adb8:	f7ff fd84 	bl	800a8c4 <ld_clust>
 800adbc:	0002      	movs	r2, r0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4907      	ldr	r1, [pc, #28]	; (800ade0 <follow_path+0x108>)
 800adc2:	505a      	str	r2, [r3, r1]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800adc4:	e7ae      	b.n	800ad24 <follow_path+0x4c>
			if (res != FR_OK) break;
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	e002      	b.n	800add0 <follow_path+0xf8>
				break;
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	e000      	b.n	800add0 <follow_path+0xf8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adce:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800add0:	230f      	movs	r3, #15
 800add2:	18fb      	adds	r3, r7, r3
 800add4:	781b      	ldrb	r3, [r3, #0]
}
 800add6:	0018      	movs	r0, r3
 800add8:	46bd      	mov	sp, r7
 800adda:	b004      	add	sp, #16
 800addc:	bdb0      	pop	{r4, r5, r7, pc}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	00001008 	.word	0x00001008
 800ade4:	00001014 	.word	0x00001014
 800ade8:	00001018 	.word	0x00001018

0800adec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800adf4:	2301      	movs	r3, #1
 800adf6:	425b      	negs	r3, r3
 800adf8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d031      	beq.n	800ae66 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	e002      	b.n	800ae10 <get_ldnumber+0x24>
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	617b      	str	r3, [r7, #20]
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b20      	cmp	r3, #32
 800ae16:	d903      	bls.n	800ae20 <get_ldnumber+0x34>
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b3a      	cmp	r3, #58	; 0x3a
 800ae1e:	d1f4      	bne.n	800ae0a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b3a      	cmp	r3, #58	; 0x3a
 800ae26:	d11c      	bne.n	800ae62 <get_ldnumber+0x76>
			tp = *path;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1c5a      	adds	r2, r3, #1
 800ae32:	60fa      	str	r2, [r7, #12]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b09      	cmp	r3, #9
 800ae3e:	d80e      	bhi.n	800ae5e <get_ldnumber+0x72>
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d10a      	bne.n	800ae5e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d107      	bne.n	800ae5e <get_ldnumber+0x72>
					vol = (int)i;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	3301      	adds	r3, #1
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	e002      	b.n	800ae68 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae62:	2300      	movs	r3, #0
 800ae64:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae66:	693b      	ldr	r3, [r7, #16]
}
 800ae68:	0018      	movs	r0, r3
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b006      	add	sp, #24
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a30      	ldr	r2, [pc, #192]	; (800af40 <check_fs+0xd0>)
 800ae7e:	2100      	movs	r1, #0
 800ae80:	5499      	strb	r1, [r3, r2]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	492f      	ldr	r1, [pc, #188]	; (800af44 <check_fs+0xd4>)
 800ae86:	2201      	movs	r2, #1
 800ae88:	4252      	negs	r2, r2
 800ae8a:	505a      	str	r2, [r3, r1]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	0011      	movs	r1, r2
 800ae92:	0018      	movs	r0, r3
 800ae94:	f7fe fd9c 	bl	80099d0 <move_window>
 800ae98:	1e03      	subs	r3, r0, #0
 800ae9a:	d001      	beq.n	800aea0 <check_fs+0x30>
		return 3;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e04b      	b.n	800af38 <check_fs+0xc8>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	33ff      	adds	r3, #255	; 0xff
 800aea4:	33ff      	adds	r3, #255	; 0xff
 800aea6:	3301      	adds	r3, #1
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	021b      	lsls	r3, r3, #8
 800aeac:	b21a      	sxth	r2, r3
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	23ff      	movs	r3, #255	; 0xff
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	5ccb      	ldrb	r3, [r1, r3]
 800aeb6:	b21b      	sxth	r3, r3
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	b21b      	sxth	r3, r3
 800aebc:	4a22      	ldr	r2, [pc, #136]	; (800af48 <check_fs+0xd8>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d001      	beq.n	800aec6 <check_fs+0x56>
		return 2;
 800aec2:	2302      	movs	r3, #2
 800aec4:	e038      	b.n	800af38 <check_fs+0xc8>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3336      	adds	r3, #54	; 0x36
 800aeca:	3303      	adds	r3, #3
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	061a      	lsls	r2, r3, #24
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3336      	adds	r3, #54	; 0x36
 800aed4:	3302      	adds	r3, #2
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	041b      	lsls	r3, r3, #16
 800aeda:	4313      	orrs	r3, r2
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	3236      	adds	r2, #54	; 0x36
 800aee0:	3201      	adds	r2, #1
 800aee2:	7812      	ldrb	r2, [r2, #0]
 800aee4:	0212      	lsls	r2, r2, #8
 800aee6:	4313      	orrs	r3, r2
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	2136      	movs	r1, #54	; 0x36
 800aeec:	5c52      	ldrb	r2, [r2, r1]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	0a1b      	lsrs	r3, r3, #8
 800aef4:	4a15      	ldr	r2, [pc, #84]	; (800af4c <check_fs+0xdc>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d101      	bne.n	800aefe <check_fs+0x8e>
		return 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	e01c      	b.n	800af38 <check_fs+0xc8>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3352      	adds	r3, #82	; 0x52
 800af02:	3303      	adds	r3, #3
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	061a      	lsls	r2, r3, #24
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3352      	adds	r3, #82	; 0x52
 800af0c:	3302      	adds	r3, #2
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	041b      	lsls	r3, r3, #16
 800af12:	4313      	orrs	r3, r2
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	3252      	adds	r2, #82	; 0x52
 800af18:	3201      	adds	r2, #1
 800af1a:	7812      	ldrb	r2, [r2, #0]
 800af1c:	0212      	lsls	r2, r2, #8
 800af1e:	4313      	orrs	r3, r2
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	2152      	movs	r1, #82	; 0x52
 800af24:	5c52      	ldrb	r2, [r2, r1]
 800af26:	4313      	orrs	r3, r2
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	4a07      	ldr	r2, [pc, #28]	; (800af4c <check_fs+0xdc>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d101      	bne.n	800af36 <check_fs+0xc6>
		return 0;
 800af32:	2300      	movs	r3, #0
 800af34:	e000      	b.n	800af38 <check_fs+0xc8>

	return 1;
 800af36:	2301      	movs	r3, #1
}
 800af38:	0018      	movs	r0, r3
 800af3a:	46bd      	mov	sp, r7
 800af3c:	b002      	add	sp, #8
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	00001004 	.word	0x00001004
 800af44:	0000102c 	.word	0x0000102c
 800af48:	ffffaa55 	.word	0xffffaa55
 800af4c:	00544146 	.word	0x00544146

0800af50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800af50:	b5b0      	push	{r4, r5, r7, lr}
 800af52:	b096      	sub	sp, #88	; 0x58
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	1dfb      	adds	r3, r7, #7
 800af5c:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	0018      	movs	r0, r3
 800af68:	f7ff ff40 	bl	800adec <get_ldnumber>
 800af6c:	0003      	movs	r3, r0
 800af6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af72:	2b00      	cmp	r3, #0
 800af74:	da01      	bge.n	800af7a <find_volume+0x2a>
 800af76:	230b      	movs	r3, #11
 800af78:	e31a      	b.n	800b5b0 <find_volume+0x660>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af7a:	4bcf      	ldr	r3, [pc, #828]	; (800b2b8 <find_volume+0x368>)
 800af7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af7e:	0092      	lsls	r2, r2, #2
 800af80:	58d3      	ldr	r3, [r2, r3]
 800af82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <find_volume+0x3e>
 800af8a:	230c      	movs	r3, #12
 800af8c:	e310      	b.n	800b5b0 <find_volume+0x660>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af92:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800af94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af96:	2380      	movs	r3, #128	; 0x80
 800af98:	015b      	lsls	r3, r3, #5
 800af9a:	5cd3      	ldrb	r3, [r2, r3]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d01c      	beq.n	800afda <find_volume+0x8a>
		stat = disk_status(fs->drv);
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	4ac6      	ldr	r2, [pc, #792]	; (800b2bc <find_volume+0x36c>)
 800afa4:	5c9b      	ldrb	r3, [r3, r2]
 800afa6:	2537      	movs	r5, #55	; 0x37
 800afa8:	197c      	adds	r4, r7, r5
 800afaa:	0018      	movs	r0, r3
 800afac:	f7fe fa0c 	bl	80093c8 <disk_status>
 800afb0:	0003      	movs	r3, r0
 800afb2:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afb4:	0029      	movs	r1, r5
 800afb6:	187b      	adds	r3, r7, r1
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2201      	movs	r2, #1
 800afbc:	4013      	ands	r3, r2
 800afbe:	d10c      	bne.n	800afda <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800afc0:	1dfb      	adds	r3, r7, #7
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d006      	beq.n	800afd6 <find_volume+0x86>
 800afc8:	187b      	adds	r3, r7, r1
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2204      	movs	r2, #4
 800afce:	4013      	ands	r3, r2
 800afd0:	d001      	beq.n	800afd6 <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 800afd2:	230a      	movs	r3, #10
 800afd4:	e2ec      	b.n	800b5b0 <find_volume+0x660>
			return FR_OK;				/* The file system object is valid */
 800afd6:	2300      	movs	r3, #0
 800afd8:	e2ea      	b.n	800b5b0 <find_volume+0x660>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800afda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afdc:	2380      	movs	r3, #128	; 0x80
 800afde:	015b      	lsls	r3, r3, #5
 800afe0:	2100      	movs	r1, #0
 800afe2:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	b2d9      	uxtb	r1, r3
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	4ab4      	ldr	r2, [pc, #720]	; (800b2bc <find_volume+0x36c>)
 800afec:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	4ab2      	ldr	r2, [pc, #712]	; (800b2bc <find_volume+0x36c>)
 800aff2:	5c9b      	ldrb	r3, [r3, r2]
 800aff4:	2537      	movs	r5, #55	; 0x37
 800aff6:	197c      	adds	r4, r7, r5
 800aff8:	0018      	movs	r0, r3
 800affa:	f7fe fa07 	bl	800940c <disk_initialize>
 800affe:	0003      	movs	r3, r0
 800b000:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b002:	197b      	adds	r3, r7, r5
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	2201      	movs	r2, #1
 800b008:	4013      	ands	r3, r2
 800b00a:	d001      	beq.n	800b010 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b00c:	2303      	movs	r3, #3
 800b00e:	e2cf      	b.n	800b5b0 <find_volume+0x660>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b010:	1dfb      	adds	r3, r7, #7
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d007      	beq.n	800b028 <find_volume+0xd8>
 800b018:	2337      	movs	r3, #55	; 0x37
 800b01a:	18fb      	adds	r3, r7, r3
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2204      	movs	r2, #4
 800b020:	4013      	ands	r3, r2
 800b022:	d001      	beq.n	800b028 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 800b024:	230a      	movs	r3, #10
 800b026:	e2c3      	b.n	800b5b0 <find_volume+0x660>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	4aa4      	ldr	r2, [pc, #656]	; (800b2bc <find_volume+0x36c>)
 800b02c:	5c98      	ldrb	r0, [r3, r2]
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	4aa3      	ldr	r2, [pc, #652]	; (800b2c0 <find_volume+0x370>)
 800b032:	4694      	mov	ip, r2
 800b034:	4463      	add	r3, ip
 800b036:	001a      	movs	r2, r3
 800b038:	2102      	movs	r1, #2
 800b03a:	f7fe fa67 	bl	800950c <disk_ioctl>
 800b03e:	1e03      	subs	r3, r0, #0
 800b040:	d10d      	bne.n	800b05e <find_volume+0x10e>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	4a9e      	ldr	r2, [pc, #632]	; (800b2c0 <find_volume+0x370>)
 800b046:	5a9a      	ldrh	r2, [r3, r2]
 800b048:	2380      	movs	r3, #128	; 0x80
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d306      	bcc.n	800b05e <find_volume+0x10e>
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	4a9b      	ldr	r2, [pc, #620]	; (800b2c0 <find_volume+0x370>)
 800b054:	5a9a      	ldrh	r2, [r3, r2]
 800b056:	2380      	movs	r3, #128	; 0x80
 800b058:	015b      	lsls	r3, r3, #5
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d901      	bls.n	800b062 <find_volume+0x112>
 800b05e:	2301      	movs	r3, #1
 800b060:	e2a6      	b.n	800b5b0 <find_volume+0x660>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b066:	2557      	movs	r5, #87	; 0x57
 800b068:	197c      	adds	r4, r7, r5
 800b06a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	0011      	movs	r1, r2
 800b070:	0018      	movs	r0, r3
 800b072:	f7ff fefd 	bl	800ae70 <check_fs>
 800b076:	0003      	movs	r3, r0
 800b078:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b07a:	197b      	adds	r3, r7, r5
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d155      	bne.n	800b12e <find_volume+0x1de>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b082:	2300      	movs	r3, #0
 800b084:	643b      	str	r3, [r7, #64]	; 0x40
 800b086:	e027      	b.n	800b0d8 <find_volume+0x188>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	33bf      	adds	r3, #191	; 0xbf
 800b090:	33ff      	adds	r3, #255	; 0xff
 800b092:	18d3      	adds	r3, r2, r3
 800b094:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	3304      	adds	r3, #4
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d012      	beq.n	800b0c6 <find_volume+0x176>
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	330b      	adds	r3, #11
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	061a      	lsls	r2, r3, #24
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	330a      	adds	r3, #10
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	041b      	lsls	r3, r3, #16
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b4:	3209      	adds	r2, #9
 800b0b6:	7812      	ldrb	r2, [r2, #0]
 800b0b8:	0212      	lsls	r2, r2, #8
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0be:	3208      	adds	r2, #8
 800b0c0:	7812      	ldrb	r2, [r2, #0]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	e000      	b.n	800b0c8 <find_volume+0x178>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2214      	movs	r2, #20
 800b0ca:	18ba      	adds	r2, r7, r2
 800b0cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0ce:	0089      	lsls	r1, r1, #2
 800b0d0:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	643b      	str	r3, [r7, #64]	; 0x40
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d9d4      	bls.n	800b088 <find_volume+0x138>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b0de:	2300      	movs	r3, #0
 800b0e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <find_volume+0x19e>
 800b0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b0ee:	2314      	movs	r3, #20
 800b0f0:	18fb      	adds	r3, r7, r3
 800b0f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0f4:	0092      	lsls	r2, r2, #2
 800b0f6:	58d3      	ldr	r3, [r2, r3]
 800b0f8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d008      	beq.n	800b112 <find_volume+0x1c2>
 800b100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	0011      	movs	r1, r2
 800b106:	0018      	movs	r0, r3
 800b108:	f7ff feb2 	bl	800ae70 <check_fs>
 800b10c:	0003      	movs	r3, r0
 800b10e:	001a      	movs	r2, r3
 800b110:	e000      	b.n	800b114 <find_volume+0x1c4>
 800b112:	2202      	movs	r2, #2
 800b114:	2157      	movs	r1, #87	; 0x57
 800b116:	187b      	adds	r3, r7, r1
 800b118:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b11a:	187b      	adds	r3, r7, r1
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <find_volume+0x1de>
 800b122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b124:	3301      	adds	r3, #1
 800b126:	643b      	str	r3, [r7, #64]	; 0x40
 800b128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d9df      	bls.n	800b0ee <find_volume+0x19e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b12e:	2357      	movs	r3, #87	; 0x57
 800b130:	18fb      	adds	r3, r7, r3
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b03      	cmp	r3, #3
 800b136:	d101      	bne.n	800b13c <find_volume+0x1ec>
 800b138:	2301      	movs	r3, #1
 800b13a:	e239      	b.n	800b5b0 <find_volume+0x660>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b13c:	2357      	movs	r3, #87	; 0x57
 800b13e:	18fb      	adds	r3, r7, r3
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <find_volume+0x1fa>
 800b146:	230d      	movs	r3, #13
 800b148:	e232      	b.n	800b5b0 <find_volume+0x660>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	7b1b      	ldrb	r3, [r3, #12]
 800b14e:	021b      	lsls	r3, r3, #8
 800b150:	b21a      	sxth	r2, r3
 800b152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b154:	7adb      	ldrb	r3, [r3, #11]
 800b156:	b21b      	sxth	r3, r3
 800b158:	4313      	orrs	r3, r2
 800b15a:	b21a      	sxth	r2, r3
 800b15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15e:	4958      	ldr	r1, [pc, #352]	; (800b2c0 <find_volume+0x370>)
 800b160:	5a5b      	ldrh	r3, [r3, r1]
 800b162:	b21b      	sxth	r3, r3
 800b164:	429a      	cmp	r2, r3
 800b166:	d001      	beq.n	800b16c <find_volume+0x21c>
		return FR_NO_FILESYSTEM;
 800b168:	230d      	movs	r3, #13
 800b16a:	e221      	b.n	800b5b0 <find_volume+0x660>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	7ddb      	ldrb	r3, [r3, #23]
 800b170:	021b      	lsls	r3, r3, #8
 800b172:	b21a      	sxth	r2, r3
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	7d9b      	ldrb	r3, [r3, #22]
 800b178:	b21b      	sxth	r3, r3
 800b17a:	4313      	orrs	r3, r2
 800b17c:	b21b      	sxth	r3, r3
 800b17e:	b29b      	uxth	r3, r3
 800b180:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b184:	2b00      	cmp	r3, #0
 800b186:	d112      	bne.n	800b1ae <find_volume+0x25e>
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	2227      	movs	r2, #39	; 0x27
 800b18c:	5c9b      	ldrb	r3, [r3, r2]
 800b18e:	061a      	lsls	r2, r3, #24
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	2126      	movs	r1, #38	; 0x26
 800b194:	5c5b      	ldrb	r3, [r3, r1]
 800b196:	041b      	lsls	r3, r3, #16
 800b198:	4313      	orrs	r3, r2
 800b19a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b19c:	2125      	movs	r1, #37	; 0x25
 800b19e:	5c52      	ldrb	r2, [r2, r1]
 800b1a0:	0212      	lsls	r2, r2, #8
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a6:	2124      	movs	r1, #36	; 0x24
 800b1a8:	5c52      	ldrb	r2, [r2, r1]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	4944      	ldr	r1, [pc, #272]	; (800b2c4 <find_volume+0x374>)
 800b1b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1b4:	505a      	str	r2, [r3, r1]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	7c19      	ldrb	r1, [r3, #16]
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	4a42      	ldr	r2, [pc, #264]	; (800b2c8 <find_volume+0x378>)
 800b1be:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	4a41      	ldr	r2, [pc, #260]	; (800b2c8 <find_volume+0x378>)
 800b1c4:	5c9b      	ldrb	r3, [r3, r2]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d006      	beq.n	800b1d8 <find_volume+0x288>
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	4a3e      	ldr	r2, [pc, #248]	; (800b2c8 <find_volume+0x378>)
 800b1ce:	5c9b      	ldrb	r3, [r3, r2]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d001      	beq.n	800b1d8 <find_volume+0x288>
		return FR_NO_FILESYSTEM;
 800b1d4:	230d      	movs	r3, #13
 800b1d6:	e1eb      	b.n	800b5b0 <find_volume+0x660>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	4a3b      	ldr	r2, [pc, #236]	; (800b2c8 <find_volume+0x378>)
 800b1dc:	5c9b      	ldrb	r3, [r3, r2]
 800b1de:	001a      	movs	r2, r3
 800b1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e2:	4353      	muls	r3, r2
 800b1e4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	7b59      	ldrb	r1, [r3, #13]
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	4a37      	ldr	r2, [pc, #220]	; (800b2cc <find_volume+0x37c>)
 800b1ee:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	4a36      	ldr	r2, [pc, #216]	; (800b2cc <find_volume+0x37c>)
 800b1f4:	5c9b      	ldrb	r3, [r3, r2]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d009      	beq.n	800b20e <find_volume+0x2be>
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	4a33      	ldr	r2, [pc, #204]	; (800b2cc <find_volume+0x37c>)
 800b1fe:	5c9b      	ldrb	r3, [r3, r2]
 800b200:	0019      	movs	r1, r3
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	4a31      	ldr	r2, [pc, #196]	; (800b2cc <find_volume+0x37c>)
 800b206:	5c9b      	ldrb	r3, [r3, r2]
 800b208:	3b01      	subs	r3, #1
 800b20a:	400b      	ands	r3, r1
 800b20c:	d001      	beq.n	800b212 <find_volume+0x2c2>
		return FR_NO_FILESYSTEM;
 800b20e:	230d      	movs	r3, #13
 800b210:	e1ce      	b.n	800b5b0 <find_volume+0x660>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	7c9b      	ldrb	r3, [r3, #18]
 800b216:	021b      	lsls	r3, r3, #8
 800b218:	b21a      	sxth	r2, r3
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	7c5b      	ldrb	r3, [r3, #17]
 800b21e:	b21b      	sxth	r3, r3
 800b220:	4313      	orrs	r3, r2
 800b222:	b21b      	sxth	r3, r3
 800b224:	b299      	uxth	r1, r3
 800b226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b228:	4a29      	ldr	r2, [pc, #164]	; (800b2d0 <find_volume+0x380>)
 800b22a:	5299      	strh	r1, [r3, r2]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	4a28      	ldr	r2, [pc, #160]	; (800b2d0 <find_volume+0x380>)
 800b230:	5a9a      	ldrh	r2, [r3, r2]
 800b232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b234:	4922      	ldr	r1, [pc, #136]	; (800b2c0 <find_volume+0x370>)
 800b236:	5a5b      	ldrh	r3, [r3, r1]
 800b238:	095b      	lsrs	r3, r3, #5
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	0019      	movs	r1, r3
 800b23e:	0010      	movs	r0, r2
 800b240:	f7f5 f80c 	bl	800025c <__aeabi_uidivmod>
 800b244:	000b      	movs	r3, r1
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <find_volume+0x300>
		return FR_NO_FILESYSTEM;
 800b24c:	230d      	movs	r3, #13
 800b24e:	e1af      	b.n	800b5b0 <find_volume+0x660>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	7d1b      	ldrb	r3, [r3, #20]
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	b21a      	sxth	r2, r3
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	7cdb      	ldrb	r3, [r3, #19]
 800b25c:	b21b      	sxth	r3, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	b21b      	sxth	r3, r3
 800b262:	b29b      	uxth	r3, r3
 800b264:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d112      	bne.n	800b292 <find_volume+0x342>
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	2223      	movs	r2, #35	; 0x23
 800b270:	5c9b      	ldrb	r3, [r3, r2]
 800b272:	061a      	lsls	r2, r3, #24
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	2122      	movs	r1, #34	; 0x22
 800b278:	5c5b      	ldrb	r3, [r3, r1]
 800b27a:	041b      	lsls	r3, r3, #16
 800b27c:	4313      	orrs	r3, r2
 800b27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b280:	2121      	movs	r1, #33	; 0x21
 800b282:	5c52      	ldrb	r2, [r2, r1]
 800b284:	0212      	lsls	r2, r2, #8
 800b286:	4313      	orrs	r3, r2
 800b288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b28a:	2120      	movs	r1, #32
 800b28c:	5c52      	ldrb	r2, [r2, r1]
 800b28e:	4313      	orrs	r3, r2
 800b290:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	7bdb      	ldrb	r3, [r3, #15]
 800b296:	021b      	lsls	r3, r3, #8
 800b298:	b21a      	sxth	r2, r3
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	7b9b      	ldrb	r3, [r3, #14]
 800b29e:	b21b      	sxth	r3, r3
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	b21a      	sxth	r2, r3
 800b2a4:	212e      	movs	r1, #46	; 0x2e
 800b2a6:	187b      	adds	r3, r7, r1
 800b2a8:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b2aa:	187b      	adds	r3, r7, r1
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d110      	bne.n	800b2d4 <find_volume+0x384>
 800b2b2:	230d      	movs	r3, #13
 800b2b4:	e17c      	b.n	800b5b0 <find_volume+0x660>
 800b2b6:	46c0      	nop			; (mov r8, r8)
 800b2b8:	20002708 	.word	0x20002708
 800b2bc:	00001001 	.word	0x00001001
 800b2c0:	0000100a 	.word	0x0000100a
 800b2c4:	00001018 	.word	0x00001018
 800b2c8:	00001003 	.word	0x00001003
 800b2cc:	00001002 	.word	0x00001002
 800b2d0:	00001008 	.word	0x00001008

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b2d4:	232e      	movs	r3, #46	; 0x2e
 800b2d6:	18fb      	adds	r3, r7, r3
 800b2d8:	881a      	ldrh	r2, [r3, #0]
 800b2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2dc:	18d4      	adds	r4, r2, r3
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	4ab5      	ldr	r2, [pc, #724]	; (800b5b8 <find_volume+0x668>)
 800b2e2:	5a9a      	ldrh	r2, [r3, r2]
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	49b5      	ldr	r1, [pc, #724]	; (800b5bc <find_volume+0x66c>)
 800b2e8:	5a5b      	ldrh	r3, [r3, r1]
 800b2ea:	095b      	lsrs	r3, r3, #5
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	0019      	movs	r1, r3
 800b2f0:	0010      	movs	r0, r2
 800b2f2:	f7f4 ff2d 	bl	8000150 <__udivsi3>
 800b2f6:	0003      	movs	r3, r0
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	18e3      	adds	r3, r4, r3
 800b2fc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	429a      	cmp	r2, r3
 800b304:	d201      	bcs.n	800b30a <find_volume+0x3ba>
 800b306:	230d      	movs	r3, #13
 800b308:	e152      	b.n	800b5b0 <find_volume+0x660>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b30a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	1ad2      	subs	r2, r2, r3
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	49ab      	ldr	r1, [pc, #684]	; (800b5c0 <find_volume+0x670>)
 800b314:	5c5b      	ldrb	r3, [r3, r1]
 800b316:	0019      	movs	r1, r3
 800b318:	0010      	movs	r0, r2
 800b31a:	f7f4 ff19 	bl	8000150 <__udivsi3>
 800b31e:	0003      	movs	r3, r0
 800b320:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <find_volume+0x3dc>
 800b328:	230d      	movs	r3, #13
 800b32a:	e141      	b.n	800b5b0 <find_volume+0x660>
	fmt = FS_FAT12;
 800b32c:	2157      	movs	r1, #87	; 0x57
 800b32e:	187b      	adds	r3, r7, r1
 800b330:	2201      	movs	r2, #1
 800b332:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	4aa3      	ldr	r2, [pc, #652]	; (800b5c4 <find_volume+0x674>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d902      	bls.n	800b342 <find_volume+0x3f2>
 800b33c:	187b      	adds	r3, r7, r1
 800b33e:	2202      	movs	r2, #2
 800b340:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	4aa0      	ldr	r2, [pc, #640]	; (800b5c8 <find_volume+0x678>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d903      	bls.n	800b352 <find_volume+0x402>
 800b34a:	2357      	movs	r3, #87	; 0x57
 800b34c:	18fb      	adds	r3, r7, r3
 800b34e:	2203      	movs	r2, #3
 800b350:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b354:	1c9a      	adds	r2, r3, #2
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	499c      	ldr	r1, [pc, #624]	; (800b5cc <find_volume+0x67c>)
 800b35a:	505a      	str	r2, [r3, r1]
	fs->volbase = bsect;								/* Volume start sector */
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	499c      	ldr	r1, [pc, #624]	; (800b5d0 <find_volume+0x680>)
 800b360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b362:	505a      	str	r2, [r3, r1]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b364:	232e      	movs	r3, #46	; 0x2e
 800b366:	18fb      	adds	r3, r7, r3
 800b368:	881a      	ldrh	r2, [r3, #0]
 800b36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b36c:	18d1      	adds	r1, r2, r3
 800b36e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b370:	2381      	movs	r3, #129	; 0x81
 800b372:	015b      	lsls	r3, r3, #5
 800b374:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 800b376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	18d2      	adds	r2, r2, r3
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	4995      	ldr	r1, [pc, #596]	; (800b5d4 <find_volume+0x684>)
 800b380:	505a      	str	r2, [r3, r1]
	if (fmt == FS_FAT32) {
 800b382:	2357      	movs	r3, #87	; 0x57
 800b384:	18fb      	adds	r3, r7, r3
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d121      	bne.n	800b3d0 <find_volume+0x480>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	4a8a      	ldr	r2, [pc, #552]	; (800b5b8 <find_volume+0x668>)
 800b390:	5a9b      	ldrh	r3, [r3, r2]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <find_volume+0x44a>
 800b396:	230d      	movs	r3, #13
 800b398:	e10a      	b.n	800b5b0 <find_volume+0x660>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39c:	222f      	movs	r2, #47	; 0x2f
 800b39e:	5c9b      	ldrb	r3, [r3, r2]
 800b3a0:	061a      	lsls	r2, r3, #24
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a4:	212e      	movs	r1, #46	; 0x2e
 800b3a6:	5c5b      	ldrb	r3, [r3, r1]
 800b3a8:	041b      	lsls	r3, r3, #16
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3ae:	212d      	movs	r1, #45	; 0x2d
 800b3b0:	5c52      	ldrb	r2, [r2, r1]
 800b3b2:	0212      	lsls	r2, r2, #8
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3b8:	212c      	movs	r1, #44	; 0x2c
 800b3ba:	5c52      	ldrb	r2, [r2, r1]
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	4985      	ldr	r1, [pc, #532]	; (800b5d8 <find_volume+0x688>)
 800b3c2:	505a      	str	r2, [r3, r1]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	4a81      	ldr	r2, [pc, #516]	; (800b5cc <find_volume+0x67c>)
 800b3c8:	589b      	ldr	r3, [r3, r2]
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	647b      	str	r3, [r7, #68]	; 0x44
 800b3ce:	e027      	b.n	800b420 <find_volume+0x4d0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	4a79      	ldr	r2, [pc, #484]	; (800b5b8 <find_volume+0x668>)
 800b3d4:	5a9b      	ldrh	r3, [r3, r2]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <find_volume+0x48e>
 800b3da:	230d      	movs	r3, #13
 800b3dc:	e0e8      	b.n	800b5b0 <find_volume+0x660>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3e0:	2381      	movs	r3, #129	; 0x81
 800b3e2:	015b      	lsls	r3, r3, #5
 800b3e4:	58d2      	ldr	r2, [r2, r3]
 800b3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e8:	18d2      	adds	r2, r2, r3
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	497a      	ldr	r1, [pc, #488]	; (800b5d8 <find_volume+0x688>)
 800b3ee:	505a      	str	r2, [r3, r1]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b3f0:	2357      	movs	r3, #87	; 0x57
 800b3f2:	18fb      	adds	r3, r7, r3
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d104      	bne.n	800b404 <find_volume+0x4b4>
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	4a73      	ldr	r2, [pc, #460]	; (800b5cc <find_volume+0x67c>)
 800b3fe:	589b      	ldr	r3, [r3, r2]
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	e00c      	b.n	800b41e <find_volume+0x4ce>
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	4a71      	ldr	r2, [pc, #452]	; (800b5cc <find_volume+0x67c>)
 800b408:	589a      	ldr	r2, [r3, r2]
 800b40a:	0013      	movs	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	189b      	adds	r3, r3, r2
 800b410:	085a      	lsrs	r2, r3, #1
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	496d      	ldr	r1, [pc, #436]	; (800b5cc <find_volume+0x67c>)
 800b416:	585b      	ldr	r3, [r3, r1]
 800b418:	2101      	movs	r1, #1
 800b41a:	400b      	ands	r3, r1
 800b41c:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b41e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	4a6e      	ldr	r2, [pc, #440]	; (800b5dc <find_volume+0x68c>)
 800b424:	589c      	ldr	r4, [r3, r2]
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	4a64      	ldr	r2, [pc, #400]	; (800b5bc <find_volume+0x66c>)
 800b42a:	5a9b      	ldrh	r3, [r3, r2]
 800b42c:	001a      	movs	r2, r3
 800b42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b430:	18d3      	adds	r3, r2, r3
 800b432:	1e5a      	subs	r2, r3, #1
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	4961      	ldr	r1, [pc, #388]	; (800b5bc <find_volume+0x66c>)
 800b438:	5a5b      	ldrh	r3, [r3, r1]
 800b43a:	0019      	movs	r1, r3
 800b43c:	0010      	movs	r0, r2
 800b43e:	f7f4 fe87 	bl	8000150 <__udivsi3>
 800b442:	0003      	movs	r3, r0
 800b444:	429c      	cmp	r4, r3
 800b446:	d201      	bcs.n	800b44c <find_volume+0x4fc>
		return FR_NO_FILESYSTEM;
 800b448:	230d      	movs	r3, #13
 800b44a:	e0b1      	b.n	800b5b0 <find_volume+0x660>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	4964      	ldr	r1, [pc, #400]	; (800b5e0 <find_volume+0x690>)
 800b450:	2201      	movs	r2, #1
 800b452:	4252      	negs	r2, r2
 800b454:	505a      	str	r2, [r3, r1]
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	4a61      	ldr	r2, [pc, #388]	; (800b5e0 <find_volume+0x690>)
 800b45a:	589a      	ldr	r2, [r3, r2]
 800b45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45e:	4961      	ldr	r1, [pc, #388]	; (800b5e4 <find_volume+0x694>)
 800b460:	505a      	str	r2, [r3, r1]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	4a60      	ldr	r2, [pc, #384]	; (800b5e8 <find_volume+0x698>)
 800b466:	2180      	movs	r1, #128	; 0x80
 800b468:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b46a:	2357      	movs	r3, #87	; 0x57
 800b46c:	18fb      	adds	r3, r7, r3
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b03      	cmp	r3, #3
 800b472:	d000      	beq.n	800b476 <find_volume+0x526>
 800b474:	e085      	b.n	800b582 <find_volume+0x632>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	2231      	movs	r2, #49	; 0x31
 800b47a:	5c9b      	ldrb	r3, [r3, r2]
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	b21a      	sxth	r2, r3
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	2130      	movs	r1, #48	; 0x30
 800b484:	5c5b      	ldrb	r3, [r3, r1]
 800b486:	b21b      	sxth	r3, r3
 800b488:	4313      	orrs	r3, r2
 800b48a:	b21b      	sxth	r3, r3
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d000      	beq.n	800b492 <find_volume+0x542>
 800b490:	e077      	b.n	800b582 <find_volume+0x632>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	0011      	movs	r1, r2
 800b49a:	0018      	movs	r0, r3
 800b49c:	f7fe fa98 	bl	80099d0 <move_window>
 800b4a0:	1e03      	subs	r3, r0, #0
 800b4a2:	d16e      	bne.n	800b582 <find_volume+0x632>
	{
		fs->fsi_flag = 0;
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	4a50      	ldr	r2, [pc, #320]	; (800b5e8 <find_volume+0x698>)
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	4a4f      	ldr	r2, [pc, #316]	; (800b5ec <find_volume+0x69c>)
 800b4b0:	5c9b      	ldrb	r3, [r3, r2]
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	b21a      	sxth	r2, r3
 800b4b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4b8:	23ff      	movs	r3, #255	; 0xff
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	5ccb      	ldrb	r3, [r1, r3]
 800b4be:	b21b      	sxth	r3, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	b21b      	sxth	r3, r3
 800b4c4:	4a4a      	ldr	r2, [pc, #296]	; (800b5f0 <find_volume+0x6a0>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d15b      	bne.n	800b582 <find_volume+0x632>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	78db      	ldrb	r3, [r3, #3]
 800b4ce:	061a      	lsls	r2, r3, #24
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d2:	789b      	ldrb	r3, [r3, #2]
 800b4d4:	041b      	lsls	r3, r3, #16
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4da:	7852      	ldrb	r2, [r2, #1]
 800b4dc:	0212      	lsls	r2, r2, #8
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e2:	7812      	ldrb	r2, [r2, #0]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	4a43      	ldr	r2, [pc, #268]	; (800b5f4 <find_volume+0x6a4>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d14a      	bne.n	800b582 <find_volume+0x632>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4ee:	23e8      	movs	r3, #232	; 0xe8
 800b4f0:	33ff      	adds	r3, #255	; 0xff
 800b4f2:	5cd3      	ldrb	r3, [r2, r3]
 800b4f4:	061a      	lsls	r2, r3, #24
 800b4f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4f8:	23f3      	movs	r3, #243	; 0xf3
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	5ccb      	ldrb	r3, [r1, r3]
 800b4fe:	041b      	lsls	r3, r3, #16
 800b500:	4313      	orrs	r3, r2
 800b502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b504:	22e6      	movs	r2, #230	; 0xe6
 800b506:	32ff      	adds	r2, #255	; 0xff
 800b508:	5c8a      	ldrb	r2, [r1, r2]
 800b50a:	0212      	lsls	r2, r2, #8
 800b50c:	4313      	orrs	r3, r2
 800b50e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b510:	22f2      	movs	r2, #242	; 0xf2
 800b512:	0052      	lsls	r2, r2, #1
 800b514:	5c8a      	ldrb	r2, [r1, r2]
 800b516:	4313      	orrs	r3, r2
 800b518:	4a37      	ldr	r2, [pc, #220]	; (800b5f8 <find_volume+0x6a8>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d131      	bne.n	800b582 <find_volume+0x632>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b51e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b520:	23ec      	movs	r3, #236	; 0xec
 800b522:	33ff      	adds	r3, #255	; 0xff
 800b524:	5cd3      	ldrb	r3, [r2, r3]
 800b526:	061a      	lsls	r2, r3, #24
 800b528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b52a:	23f5      	movs	r3, #245	; 0xf5
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	5ccb      	ldrb	r3, [r1, r3]
 800b530:	041b      	lsls	r3, r3, #16
 800b532:	4313      	orrs	r3, r2
 800b534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b536:	22ea      	movs	r2, #234	; 0xea
 800b538:	32ff      	adds	r2, #255	; 0xff
 800b53a:	5c8a      	ldrb	r2, [r1, r2]
 800b53c:	0212      	lsls	r2, r2, #8
 800b53e:	4313      	orrs	r3, r2
 800b540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b542:	22f4      	movs	r2, #244	; 0xf4
 800b544:	0052      	lsls	r2, r2, #1
 800b546:	5c8a      	ldrb	r2, [r1, r2]
 800b548:	431a      	orrs	r2, r3
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	4924      	ldr	r1, [pc, #144]	; (800b5e0 <find_volume+0x690>)
 800b54e:	505a      	str	r2, [r3, r1]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b552:	23f0      	movs	r3, #240	; 0xf0
 800b554:	33ff      	adds	r3, #255	; 0xff
 800b556:	5cd3      	ldrb	r3, [r2, r3]
 800b558:	061a      	lsls	r2, r3, #24
 800b55a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b55c:	23f7      	movs	r3, #247	; 0xf7
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	5ccb      	ldrb	r3, [r1, r3]
 800b562:	041b      	lsls	r3, r3, #16
 800b564:	4313      	orrs	r3, r2
 800b566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b568:	22ee      	movs	r2, #238	; 0xee
 800b56a:	32ff      	adds	r2, #255	; 0xff
 800b56c:	5c8a      	ldrb	r2, [r1, r2]
 800b56e:	0212      	lsls	r2, r2, #8
 800b570:	4313      	orrs	r3, r2
 800b572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b574:	22f6      	movs	r2, #246	; 0xf6
 800b576:	0052      	lsls	r2, r2, #1
 800b578:	5c8a      	ldrb	r2, [r1, r2]
 800b57a:	431a      	orrs	r2, r3
 800b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57e:	4919      	ldr	r1, [pc, #100]	; (800b5e4 <find_volume+0x694>)
 800b580:	505a      	str	r2, [r3, r1]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b584:	2357      	movs	r3, #87	; 0x57
 800b586:	18f9      	adds	r1, r7, r3
 800b588:	2380      	movs	r3, #128	; 0x80
 800b58a:	015b      	lsls	r3, r3, #5
 800b58c:	7809      	ldrb	r1, [r1, #0]
 800b58e:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <find_volume+0x6ac>)
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	3301      	adds	r3, #1
 800b596:	b29a      	uxth	r2, r3
 800b598:	4b18      	ldr	r3, [pc, #96]	; (800b5fc <find_volume+0x6ac>)
 800b59a:	801a      	strh	r2, [r3, #0]
 800b59c:	4b17      	ldr	r3, [pc, #92]	; (800b5fc <find_volume+0x6ac>)
 800b59e:	8819      	ldrh	r1, [r3, #0]
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	4a17      	ldr	r2, [pc, #92]	; (800b600 <find_volume+0x6b0>)
 800b5a4:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a8:	0018      	movs	r0, r3
 800b5aa:	f7fe f993 	bl	80098d4 <clear_lock>
#endif

	return FR_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b016      	add	sp, #88	; 0x58
 800b5b6:	bdb0      	pop	{r4, r5, r7, pc}
 800b5b8:	00001008 	.word	0x00001008
 800b5bc:	0000100a 	.word	0x0000100a
 800b5c0:	00001002 	.word	0x00001002
 800b5c4:	00000ff5 	.word	0x00000ff5
 800b5c8:	0000fff5 	.word	0x0000fff5
 800b5cc:	00001014 	.word	0x00001014
 800b5d0:	0000101c 	.word	0x0000101c
 800b5d4:	00001028 	.word	0x00001028
 800b5d8:	00001024 	.word	0x00001024
 800b5dc:	00001018 	.word	0x00001018
 800b5e0:	00001010 	.word	0x00001010
 800b5e4:	0000100c 	.word	0x0000100c
 800b5e8:	00001005 	.word	0x00001005
 800b5ec:	000001ff 	.word	0x000001ff
 800b5f0:	ffffaa55 	.word	0xffffaa55
 800b5f4:	41615252 	.word	0x41615252
 800b5f8:	61417272 	.word	0x61417272
 800b5fc:	2000270c 	.word	0x2000270c
 800b600:	00001006 	.word	0x00001006

0800b604 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d027      	beq.n	800b666 <validate+0x62>
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	015b      	lsls	r3, r3, #5
 800b61c:	58d3      	ldr	r3, [r2, r3]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d021      	beq.n	800b666 <validate+0x62>
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	2380      	movs	r3, #128	; 0x80
 800b626:	015b      	lsls	r3, r3, #5
 800b628:	58d2      	ldr	r2, [r2, r3]
 800b62a:	2380      	movs	r3, #128	; 0x80
 800b62c:	015b      	lsls	r3, r3, #5
 800b62e:	5cd3      	ldrb	r3, [r2, r3]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d018      	beq.n	800b666 <validate+0x62>
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	2380      	movs	r3, #128	; 0x80
 800b638:	015b      	lsls	r3, r3, #5
 800b63a:	58d3      	ldr	r3, [r2, r3]
 800b63c:	4a0d      	ldr	r2, [pc, #52]	; (800b674 <validate+0x70>)
 800b63e:	5a9a      	ldrh	r2, [r3, r2]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	490d      	ldr	r1, [pc, #52]	; (800b678 <validate+0x74>)
 800b644:	5a5b      	ldrh	r3, [r3, r1]
 800b646:	429a      	cmp	r2, r3
 800b648:	d10d      	bne.n	800b666 <validate+0x62>
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	2380      	movs	r3, #128	; 0x80
 800b64e:	015b      	lsls	r3, r3, #5
 800b650:	58d3      	ldr	r3, [r2, r3]
 800b652:	4a0a      	ldr	r2, [pc, #40]	; (800b67c <validate+0x78>)
 800b654:	5c9b      	ldrb	r3, [r3, r2]
 800b656:	0018      	movs	r0, r3
 800b658:	f7fd feb6 	bl	80093c8 <disk_status>
 800b65c:	0003      	movs	r3, r0
 800b65e:	001a      	movs	r2, r3
 800b660:	2301      	movs	r3, #1
 800b662:	4013      	ands	r3, r2
 800b664:	d001      	beq.n	800b66a <validate+0x66>
		return FR_INVALID_OBJECT;
 800b666:	2309      	movs	r3, #9
 800b668:	e000      	b.n	800b66c <validate+0x68>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	0018      	movs	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	b004      	add	sp, #16
 800b672:	bd80      	pop	{r7, pc}
 800b674:	00001006 	.word	0x00001006
 800b678:	00001004 	.word	0x00001004
 800b67c:	00001001 	.word	0x00001001

0800b680 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b680:	b5b0      	push	{r4, r5, r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	1dfb      	adds	r3, r7, #7
 800b68c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b692:	2310      	movs	r3, #16
 800b694:	18fb      	adds	r3, r7, r3
 800b696:	0018      	movs	r0, r3
 800b698:	f7ff fba8 	bl	800adec <get_ldnumber>
 800b69c:	0003      	movs	r3, r0
 800b69e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	da01      	bge.n	800b6aa <f_mount+0x2a>
 800b6a6:	230b      	movs	r3, #11
 800b6a8:	e034      	b.n	800b714 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b6aa:	4b1c      	ldr	r3, [pc, #112]	; (800b71c <f_mount+0x9c>)
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	0092      	lsls	r2, r2, #2
 800b6b0:	58d3      	ldr	r3, [r2, r3]
 800b6b2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d008      	beq.n	800b6cc <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f7fe f909 	bl	80098d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b6c2:	69ba      	ldr	r2, [r7, #24]
 800b6c4:	2380      	movs	r3, #128	; 0x80
 800b6c6:	015b      	lsls	r3, r3, #5
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d004      	beq.n	800b6dc <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	2380      	movs	r3, #128	; 0x80
 800b6d6:	015b      	lsls	r3, r3, #5
 800b6d8:	2100      	movs	r1, #0
 800b6da:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b6dc:	68f9      	ldr	r1, [r7, #12]
 800b6de:	4b0f      	ldr	r3, [pc, #60]	; (800b71c <f_mount+0x9c>)
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	0092      	lsls	r2, r2, #2
 800b6e4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d003      	beq.n	800b6f4 <f_mount+0x74>
 800b6ec:	1dfb      	adds	r3, r7, #7
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d001      	beq.n	800b6f8 <f_mount+0x78>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	e00d      	b.n	800b714 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b6f8:	2517      	movs	r5, #23
 800b6fa:	197c      	adds	r4, r7, r5
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	18f9      	adds	r1, r7, r3
 800b700:	230c      	movs	r3, #12
 800b702:	18fb      	adds	r3, r7, r3
 800b704:	2200      	movs	r2, #0
 800b706:	0018      	movs	r0, r3
 800b708:	f7ff fc22 	bl	800af50 <find_volume>
 800b70c:	0003      	movs	r3, r0
 800b70e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800b710:	197b      	adds	r3, r7, r5
 800b712:	781b      	ldrb	r3, [r3, #0]
}
 800b714:	0018      	movs	r0, r3
 800b716:	46bd      	mov	sp, r7
 800b718:	b008      	add	sp, #32
 800b71a:	bdb0      	pop	{r4, r5, r7, pc}
 800b71c:	20002708 	.word	0x20002708

0800b720 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b722:	4cc5      	ldr	r4, [pc, #788]	; (800ba38 <f_open+0x318>)
 800b724:	44a5      	add	sp, r4
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	4bc3      	ldr	r3, [pc, #780]	; (800ba3c <f_open+0x31c>)
 800b72e:	49c4      	ldr	r1, [pc, #784]	; (800ba40 <f_open+0x320>)
 800b730:	185b      	adds	r3, r3, r1
 800b732:	19db      	adds	r3, r3, r7
 800b734:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <f_open+0x20>
 800b73c:	2309      	movs	r3, #9
 800b73e:	e24d      	b.n	800bbdc <f_open+0x4bc>
	fp->fs = 0;			/* Clear file object */
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	2380      	movs	r3, #128	; 0x80
 800b744:	015b      	lsls	r3, r3, #5
 800b746:	2100      	movs	r1, #0
 800b748:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b74a:	4bbc      	ldr	r3, [pc, #752]	; (800ba3c <f_open+0x31c>)
 800b74c:	4dbc      	ldr	r5, [pc, #752]	; (800ba40 <f_open+0x320>)
 800b74e:	195b      	adds	r3, r3, r5
 800b750:	19db      	adds	r3, r3, r7
 800b752:	4aba      	ldr	r2, [pc, #744]	; (800ba3c <f_open+0x31c>)
 800b754:	1952      	adds	r2, r2, r5
 800b756:	19d2      	adds	r2, r2, r7
 800b758:	7812      	ldrb	r2, [r2, #0]
 800b75a:	211f      	movs	r1, #31
 800b75c:	400a      	ands	r2, r1
 800b75e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b760:	4bb6      	ldr	r3, [pc, #728]	; (800ba3c <f_open+0x31c>)
 800b762:	195b      	adds	r3, r3, r5
 800b764:	19db      	adds	r3, r3, r7
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2201      	movs	r2, #1
 800b76a:	4393      	bics	r3, r2
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	4eb5      	ldr	r6, [pc, #724]	; (800ba44 <f_open+0x324>)
 800b770:	19bc      	adds	r4, r7, r6
 800b772:	2308      	movs	r3, #8
 800b774:	18f9      	adds	r1, r7, r3
 800b776:	2320      	movs	r3, #32
 800b778:	18fb      	adds	r3, r7, r3
 800b77a:	2080      	movs	r0, #128	; 0x80
 800b77c:	0140      	lsls	r0, r0, #5
 800b77e:	4684      	mov	ip, r0
 800b780:	4463      	add	r3, ip
 800b782:	0018      	movs	r0, r3
 800b784:	f7ff fbe4 	bl	800af50 <find_volume>
 800b788:	0003      	movs	r3, r0
 800b78a:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b78c:	19bb      	adds	r3, r7, r6
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d000      	beq.n	800b796 <f_open+0x76>
 800b794:	e21f      	b.n	800bbd6 <f_open+0x4b6>
		INIT_BUF(dj);
 800b796:	4bac      	ldr	r3, [pc, #688]	; (800ba48 <f_open+0x328>)
 800b798:	195a      	adds	r2, r3, r5
 800b79a:	19d3      	adds	r3, r2, r7
 800b79c:	49ab      	ldr	r1, [pc, #684]	; (800ba4c <f_open+0x32c>)
 800b79e:	2214      	movs	r2, #20
 800b7a0:	18ba      	adds	r2, r7, r2
 800b7a2:	505a      	str	r2, [r3, r1]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	19bc      	adds	r4, r7, r6
 800b7a8:	2320      	movs	r3, #32
 800b7aa:	18fb      	adds	r3, r7, r3
 800b7ac:	0011      	movs	r1, r2
 800b7ae:	0018      	movs	r0, r3
 800b7b0:	f7ff fa92 	bl	800acd8 <follow_path>
 800b7b4:	0003      	movs	r3, r0
 800b7b6:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 800b7b8:	4ba3      	ldr	r3, [pc, #652]	; (800ba48 <f_open+0x328>)
 800b7ba:	195b      	adds	r3, r3, r5
 800b7bc:	19db      	adds	r3, r3, r7
 800b7be:	4aa4      	ldr	r2, [pc, #656]	; (800ba50 <f_open+0x330>)
 800b7c0:	589b      	ldr	r3, [r3, r2]
 800b7c2:	4aa4      	ldr	r2, [pc, #656]	; (800ba54 <f_open+0x334>)
 800b7c4:	18b9      	adds	r1, r7, r2
 800b7c6:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b7c8:	19bb      	adds	r3, r7, r6
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d11c      	bne.n	800b80a <f_open+0xea>
			if (!dir)	/* Default directory itself */
 800b7d0:	18bb      	adds	r3, r7, r2
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d103      	bne.n	800b7e0 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800b7d8:	19bb      	adds	r3, r7, r6
 800b7da:	2206      	movs	r2, #6
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	e014      	b.n	800b80a <f_open+0xea>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7e0:	4b96      	ldr	r3, [pc, #600]	; (800ba3c <f_open+0x31c>)
 800b7e2:	4a97      	ldr	r2, [pc, #604]	; (800ba40 <f_open+0x320>)
 800b7e4:	189b      	adds	r3, r3, r2
 800b7e6:	19db      	adds	r3, r3, r7
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4393      	bics	r3, r2
 800b7ee:	1e5a      	subs	r2, r3, #1
 800b7f0:	4193      	sbcs	r3, r2
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	001a      	movs	r2, r3
 800b7f6:	4b93      	ldr	r3, [pc, #588]	; (800ba44 <f_open+0x324>)
 800b7f8:	18fc      	adds	r4, r7, r3
 800b7fa:	2320      	movs	r3, #32
 800b7fc:	18fb      	adds	r3, r7, r3
 800b7fe:	0011      	movs	r1, r2
 800b800:	0018      	movs	r0, r3
 800b802:	f7fd ff1f 	bl	8009644 <chk_lock>
 800b806:	0003      	movs	r3, r0
 800b808:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b80a:	4b8c      	ldr	r3, [pc, #560]	; (800ba3c <f_open+0x31c>)
 800b80c:	4a8c      	ldr	r2, [pc, #560]	; (800ba40 <f_open+0x320>)
 800b80e:	189b      	adds	r3, r3, r2
 800b810:	19db      	adds	r3, r3, r7
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	221c      	movs	r2, #28
 800b816:	4013      	ands	r3, r2
 800b818:	d100      	bne.n	800b81c <f_open+0xfc>
 800b81a:	e0fb      	b.n	800ba14 <f_open+0x2f4>
			if (res != FR_OK) {					/* No file, create new */
 800b81c:	4a89      	ldr	r2, [pc, #548]	; (800ba44 <f_open+0x324>)
 800b81e:	18bb      	adds	r3, r7, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d027      	beq.n	800b876 <f_open+0x156>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b826:	18bb      	adds	r3, r7, r2
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b04      	cmp	r3, #4
 800b82c:	d10f      	bne.n	800b84e <f_open+0x12e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b82e:	f7fd ff79 	bl	8009724 <enq_lock>
 800b832:	1e03      	subs	r3, r0, #0
 800b834:	d007      	beq.n	800b846 <f_open+0x126>
 800b836:	2320      	movs	r3, #32
 800b838:	18fb      	adds	r3, r7, r3
 800b83a:	0018      	movs	r0, r3
 800b83c:	f7ff f8fc 	bl	800aa38 <dir_register>
 800b840:	0003      	movs	r3, r0
 800b842:	001a      	movs	r2, r3
 800b844:	e000      	b.n	800b848 <f_open+0x128>
 800b846:	2212      	movs	r2, #18
 800b848:	4b7e      	ldr	r3, [pc, #504]	; (800ba44 <f_open+0x324>)
 800b84a:	18fb      	adds	r3, r7, r3
 800b84c:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b84e:	4b7b      	ldr	r3, [pc, #492]	; (800ba3c <f_open+0x31c>)
 800b850:	487b      	ldr	r0, [pc, #492]	; (800ba40 <f_open+0x320>)
 800b852:	181b      	adds	r3, r3, r0
 800b854:	19db      	adds	r3, r3, r7
 800b856:	4a79      	ldr	r2, [pc, #484]	; (800ba3c <f_open+0x31c>)
 800b858:	1812      	adds	r2, r2, r0
 800b85a:	19d2      	adds	r2, r2, r7
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	2108      	movs	r1, #8
 800b860:	430a      	orrs	r2, r1
 800b862:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b864:	4b78      	ldr	r3, [pc, #480]	; (800ba48 <f_open+0x328>)
 800b866:	181b      	adds	r3, r3, r0
 800b868:	19db      	adds	r3, r3, r7
 800b86a:	4a79      	ldr	r2, [pc, #484]	; (800ba50 <f_open+0x330>)
 800b86c:	589b      	ldr	r3, [r3, r2]
 800b86e:	4a79      	ldr	r2, [pc, #484]	; (800ba54 <f_open+0x334>)
 800b870:	18ba      	adds	r2, r7, r2
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	e019      	b.n	800b8aa <f_open+0x18a>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b876:	4b77      	ldr	r3, [pc, #476]	; (800ba54 <f_open+0x334>)
 800b878:	18fb      	adds	r3, r7, r3
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	330b      	adds	r3, #11
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	001a      	movs	r2, r3
 800b882:	2311      	movs	r3, #17
 800b884:	4013      	ands	r3, r2
 800b886:	d004      	beq.n	800b892 <f_open+0x172>
					res = FR_DENIED;
 800b888:	4b6e      	ldr	r3, [pc, #440]	; (800ba44 <f_open+0x324>)
 800b88a:	18fb      	adds	r3, r7, r3
 800b88c:	2207      	movs	r2, #7
 800b88e:	701a      	strb	r2, [r3, #0]
 800b890:	e00b      	b.n	800b8aa <f_open+0x18a>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b892:	4b6a      	ldr	r3, [pc, #424]	; (800ba3c <f_open+0x31c>)
 800b894:	4a6a      	ldr	r2, [pc, #424]	; (800ba40 <f_open+0x320>)
 800b896:	189b      	adds	r3, r3, r2
 800b898:	19db      	adds	r3, r3, r7
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2204      	movs	r2, #4
 800b89e:	4013      	ands	r3, r2
 800b8a0:	d003      	beq.n	800b8aa <f_open+0x18a>
						res = FR_EXIST;
 800b8a2:	4b68      	ldr	r3, [pc, #416]	; (800ba44 <f_open+0x324>)
 800b8a4:	18fb      	adds	r3, r7, r3
 800b8a6:	2208      	movs	r2, #8
 800b8a8:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b8aa:	4866      	ldr	r0, [pc, #408]	; (800ba44 <f_open+0x324>)
 800b8ac:	183b      	adds	r3, r7, r0
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d000      	beq.n	800b8b6 <f_open+0x196>
 800b8b4:	e0ed      	b.n	800ba92 <f_open+0x372>
 800b8b6:	4b61      	ldr	r3, [pc, #388]	; (800ba3c <f_open+0x31c>)
 800b8b8:	4c61      	ldr	r4, [pc, #388]	; (800ba40 <f_open+0x320>)
 800b8ba:	191b      	adds	r3, r3, r4
 800b8bc:	19db      	adds	r3, r3, r7
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2208      	movs	r2, #8
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	d100      	bne.n	800b8c8 <f_open+0x1a8>
 800b8c6:	e0e4      	b.n	800ba92 <f_open+0x372>
				dw = GET_FATTIME();				/* Created time */
 800b8c8:	f7fd fd12 	bl	80092f0 <get_fattime>
 800b8cc:	0003      	movs	r3, r0
 800b8ce:	4e62      	ldr	r6, [pc, #392]	; (800ba58 <f_open+0x338>)
 800b8d0:	19ba      	adds	r2, r7, r6
 800b8d2:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b8d4:	495f      	ldr	r1, [pc, #380]	; (800ba54 <f_open+0x334>)
 800b8d6:	187b      	adds	r3, r7, r1
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	330e      	adds	r3, #14
 800b8dc:	19ba      	adds	r2, r7, r6
 800b8de:	6812      	ldr	r2, [r2, #0]
 800b8e0:	b2d2      	uxtb	r2, r2
 800b8e2:	701a      	strb	r2, [r3, #0]
 800b8e4:	19bb      	adds	r3, r7, r6
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	0a1b      	lsrs	r3, r3, #8
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	187b      	adds	r3, r7, r1
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	330f      	adds	r3, #15
 800b8f4:	b2d2      	uxtb	r2, r2
 800b8f6:	701a      	strb	r2, [r3, #0]
 800b8f8:	19bb      	adds	r3, r7, r6
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	0c1a      	lsrs	r2, r3, #16
 800b8fe:	187b      	adds	r3, r7, r1
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3310      	adds	r3, #16
 800b904:	b2d2      	uxtb	r2, r2
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	19bb      	adds	r3, r7, r6
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	0e1a      	lsrs	r2, r3, #24
 800b90e:	187b      	adds	r3, r7, r1
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3311      	adds	r3, #17
 800b914:	b2d2      	uxtb	r2, r2
 800b916:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b918:	187b      	adds	r3, r7, r1
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	330b      	adds	r3, #11
 800b91e:	2200      	movs	r2, #0
 800b920:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b922:	187b      	adds	r3, r7, r1
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	331c      	adds	r3, #28
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
 800b92c:	187b      	adds	r3, r7, r1
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	331d      	adds	r3, #29
 800b932:	2200      	movs	r2, #0
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	187b      	adds	r3, r7, r1
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	331e      	adds	r3, #30
 800b93c:	2200      	movs	r2, #0
 800b93e:	701a      	strb	r2, [r3, #0]
 800b940:	187b      	adds	r3, r7, r1
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	331f      	adds	r3, #31
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b94a:	4b3f      	ldr	r3, [pc, #252]	; (800ba48 <f_open+0x328>)
 800b94c:	0025      	movs	r5, r4
 800b94e:	191b      	adds	r3, r3, r4
 800b950:	19da      	adds	r2, r3, r7
 800b952:	2380      	movs	r3, #128	; 0x80
 800b954:	015b      	lsls	r3, r3, #5
 800b956:	58d3      	ldr	r3, [r2, r3]
 800b958:	000c      	movs	r4, r1
 800b95a:	187a      	adds	r2, r7, r1
 800b95c:	6812      	ldr	r2, [r2, #0]
 800b95e:	0011      	movs	r1, r2
 800b960:	0018      	movs	r0, r3
 800b962:	f7fe ffaf 	bl	800a8c4 <ld_clust>
 800b966:	0003      	movs	r3, r0
 800b968:	2182      	movs	r1, #130	; 0x82
 800b96a:	0149      	lsls	r1, r1, #5
 800b96c:	187a      	adds	r2, r7, r1
 800b96e:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800b970:	193b      	adds	r3, r7, r4
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2100      	movs	r1, #0
 800b976:	0018      	movs	r0, r3
 800b978:	f7fe ffd1 	bl	800a91e <st_clust>
				dj.fs->wflag = 1;
 800b97c:	4b32      	ldr	r3, [pc, #200]	; (800ba48 <f_open+0x328>)
 800b97e:	195b      	adds	r3, r3, r5
 800b980:	19da      	adds	r2, r3, r7
 800b982:	2380      	movs	r3, #128	; 0x80
 800b984:	015b      	lsls	r3, r3, #5
 800b986:	58d3      	ldr	r3, [r2, r3]
 800b988:	4a34      	ldr	r2, [pc, #208]	; (800ba5c <f_open+0x33c>)
 800b98a:	2101      	movs	r1, #1
 800b98c:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 800b98e:	2182      	movs	r1, #130	; 0x82
 800b990:	0149      	lsls	r1, r1, #5
 800b992:	187b      	adds	r3, r7, r1
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d100      	bne.n	800b99c <f_open+0x27c>
 800b99a:	e07a      	b.n	800ba92 <f_open+0x372>
					dw = dj.fs->winsect;
 800b99c:	4b2a      	ldr	r3, [pc, #168]	; (800ba48 <f_open+0x328>)
 800b99e:	195b      	adds	r3, r3, r5
 800b9a0:	19da      	adds	r2, r3, r7
 800b9a2:	2380      	movs	r3, #128	; 0x80
 800b9a4:	015b      	lsls	r3, r3, #5
 800b9a6:	58d3      	ldr	r3, [r2, r3]
 800b9a8:	4a2d      	ldr	r2, [pc, #180]	; (800ba60 <f_open+0x340>)
 800b9aa:	589b      	ldr	r3, [r3, r2]
 800b9ac:	19ba      	adds	r2, r7, r6
 800b9ae:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800b9b0:	4b25      	ldr	r3, [pc, #148]	; (800ba48 <f_open+0x328>)
 800b9b2:	195b      	adds	r3, r3, r5
 800b9b4:	19da      	adds	r2, r3, r7
 800b9b6:	2380      	movs	r3, #128	; 0x80
 800b9b8:	015b      	lsls	r3, r3, #5
 800b9ba:	58d3      	ldr	r3, [r2, r3]
 800b9bc:	4821      	ldr	r0, [pc, #132]	; (800ba44 <f_open+0x324>)
 800b9be:	183c      	adds	r4, r7, r0
 800b9c0:	187a      	adds	r2, r7, r1
 800b9c2:	6812      	ldr	r2, [r2, #0]
 800b9c4:	0011      	movs	r1, r2
 800b9c6:	0018      	movs	r0, r3
 800b9c8:	f7fe fb9c 	bl	800a104 <remove_chain>
 800b9cc:	0003      	movs	r3, r0
 800b9ce:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 800b9d0:	481c      	ldr	r0, [pc, #112]	; (800ba44 <f_open+0x324>)
 800b9d2:	183b      	adds	r3, r7, r0
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d15b      	bne.n	800ba92 <f_open+0x372>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b9da:	4b1b      	ldr	r3, [pc, #108]	; (800ba48 <f_open+0x328>)
 800b9dc:	195b      	adds	r3, r3, r5
 800b9de:	19da      	adds	r2, r3, r7
 800b9e0:	2380      	movs	r3, #128	; 0x80
 800b9e2:	015b      	lsls	r3, r3, #5
 800b9e4:	58d3      	ldr	r3, [r2, r3]
 800b9e6:	2182      	movs	r1, #130	; 0x82
 800b9e8:	0149      	lsls	r1, r1, #5
 800b9ea:	187a      	adds	r2, r7, r1
 800b9ec:	6812      	ldr	r2, [r2, #0]
 800b9ee:	3a01      	subs	r2, #1
 800b9f0:	491c      	ldr	r1, [pc, #112]	; (800ba64 <f_open+0x344>)
 800b9f2:	505a      	str	r2, [r3, r1]
						res = move_window(dj.fs, dw);
 800b9f4:	4b14      	ldr	r3, [pc, #80]	; (800ba48 <f_open+0x328>)
 800b9f6:	195b      	adds	r3, r3, r5
 800b9f8:	19da      	adds	r2, r3, r7
 800b9fa:	2380      	movs	r3, #128	; 0x80
 800b9fc:	015b      	lsls	r3, r3, #5
 800b9fe:	58d3      	ldr	r3, [r2, r3]
 800ba00:	183c      	adds	r4, r7, r0
 800ba02:	19ba      	adds	r2, r7, r6
 800ba04:	6812      	ldr	r2, [r2, #0]
 800ba06:	0011      	movs	r1, r2
 800ba08:	0018      	movs	r0, r3
 800ba0a:	f7fd ffe1 	bl	80099d0 <move_window>
 800ba0e:	0003      	movs	r3, r0
 800ba10:	7023      	strb	r3, [r4, #0]
 800ba12:	e03e      	b.n	800ba92 <f_open+0x372>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ba14:	490b      	ldr	r1, [pc, #44]	; (800ba44 <f_open+0x324>)
 800ba16:	187b      	adds	r3, r7, r1
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d139      	bne.n	800ba92 <f_open+0x372>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ba1e:	4b0d      	ldr	r3, [pc, #52]	; (800ba54 <f_open+0x334>)
 800ba20:	18fb      	adds	r3, r7, r3
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	330b      	adds	r3, #11
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	001a      	movs	r2, r3
 800ba2a:	2310      	movs	r3, #16
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	d01b      	beq.n	800ba68 <f_open+0x348>
					res = FR_NO_FILE;
 800ba30:	187b      	adds	r3, r7, r1
 800ba32:	2204      	movs	r2, #4
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	e02c      	b.n	800ba92 <f_open+0x372>
 800ba38:	ffffefac 	.word	0xffffefac
 800ba3c:	ffffefb7 	.word	0xffffefb7
 800ba40:	00001050 	.word	0x00001050
 800ba44:	0000104f 	.word	0x0000104f
 800ba48:	ffffefd0 	.word	0xffffefd0
 800ba4c:	00001018 	.word	0x00001018
 800ba50:	00001014 	.word	0x00001014
 800ba54:	00001048 	.word	0x00001048
 800ba58:	00001044 	.word	0x00001044
 800ba5c:	00001004 	.word	0x00001004
 800ba60:	0000102c 	.word	0x0000102c
 800ba64:	0000100c 	.word	0x0000100c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ba68:	4b5f      	ldr	r3, [pc, #380]	; (800bbe8 <f_open+0x4c8>)
 800ba6a:	4a60      	ldr	r2, [pc, #384]	; (800bbec <f_open+0x4cc>)
 800ba6c:	189b      	adds	r3, r3, r2
 800ba6e:	19db      	adds	r3, r3, r7
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	2202      	movs	r2, #2
 800ba74:	4013      	ands	r3, r2
 800ba76:	d00c      	beq.n	800ba92 <f_open+0x372>
 800ba78:	4b5d      	ldr	r3, [pc, #372]	; (800bbf0 <f_open+0x4d0>)
 800ba7a:	18fb      	adds	r3, r7, r3
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	330b      	adds	r3, #11
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	001a      	movs	r2, r3
 800ba84:	2301      	movs	r3, #1
 800ba86:	4013      	ands	r3, r2
 800ba88:	d003      	beq.n	800ba92 <f_open+0x372>
						res = FR_DENIED;
 800ba8a:	4b5a      	ldr	r3, [pc, #360]	; (800bbf4 <f_open+0x4d4>)
 800ba8c:	18fb      	adds	r3, r7, r3
 800ba8e:	2207      	movs	r2, #7
 800ba90:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 800ba92:	4b58      	ldr	r3, [pc, #352]	; (800bbf4 <f_open+0x4d4>)
 800ba94:	18fb      	adds	r3, r7, r3
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d141      	bne.n	800bb20 <f_open+0x400>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ba9c:	4b52      	ldr	r3, [pc, #328]	; (800bbe8 <f_open+0x4c8>)
 800ba9e:	4953      	ldr	r1, [pc, #332]	; (800bbec <f_open+0x4cc>)
 800baa0:	185b      	adds	r3, r3, r1
 800baa2:	19db      	adds	r3, r3, r7
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2208      	movs	r2, #8
 800baa8:	4013      	ands	r3, r2
 800baaa:	d009      	beq.n	800bac0 <f_open+0x3a0>
				mode |= FA__WRITTEN;
 800baac:	4b4e      	ldr	r3, [pc, #312]	; (800bbe8 <f_open+0x4c8>)
 800baae:	185b      	adds	r3, r3, r1
 800bab0:	19db      	adds	r3, r3, r7
 800bab2:	4a4d      	ldr	r2, [pc, #308]	; (800bbe8 <f_open+0x4c8>)
 800bab4:	1852      	adds	r2, r2, r1
 800bab6:	19d2      	adds	r2, r2, r7
 800bab8:	7812      	ldrb	r2, [r2, #0]
 800baba:	2120      	movs	r1, #32
 800babc:	430a      	orrs	r2, r1
 800babe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bac0:	4b4d      	ldr	r3, [pc, #308]	; (800bbf8 <f_open+0x4d8>)
 800bac2:	484a      	ldr	r0, [pc, #296]	; (800bbec <f_open+0x4cc>)
 800bac4:	181b      	adds	r3, r3, r0
 800bac6:	19da      	adds	r2, r3, r7
 800bac8:	2380      	movs	r3, #128	; 0x80
 800baca:	015b      	lsls	r3, r3, #5
 800bacc:	58d3      	ldr	r3, [r2, r3]
 800bace:	4a4b      	ldr	r2, [pc, #300]	; (800bbfc <f_open+0x4dc>)
 800bad0:	589a      	ldr	r2, [r3, r2]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	494a      	ldr	r1, [pc, #296]	; (800bc00 <f_open+0x4e0>)
 800bad6:	505a      	str	r2, [r3, r1]
			fp->dir_ptr = dir;
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	2381      	movs	r3, #129	; 0x81
 800badc:	015b      	lsls	r3, r3, #5
 800bade:	4944      	ldr	r1, [pc, #272]	; (800bbf0 <f_open+0x4d0>)
 800bae0:	1879      	adds	r1, r7, r1
 800bae2:	6809      	ldr	r1, [r1, #0]
 800bae4:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bae6:	4b40      	ldr	r3, [pc, #256]	; (800bbe8 <f_open+0x4c8>)
 800bae8:	181b      	adds	r3, r3, r0
 800baea:	19db      	adds	r3, r3, r7
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2201      	movs	r2, #1
 800baf0:	4393      	bics	r3, r2
 800baf2:	1e5a      	subs	r2, r3, #1
 800baf4:	4193      	sbcs	r3, r2
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	001a      	movs	r2, r3
 800bafa:	2320      	movs	r3, #32
 800bafc:	18fb      	adds	r3, r7, r3
 800bafe:	0011      	movs	r1, r2
 800bb00:	0018      	movs	r0, r3
 800bb02:	f7fd fe2f 	bl	8009764 <inc_lock>
 800bb06:	0002      	movs	r2, r0
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	493e      	ldr	r1, [pc, #248]	; (800bc04 <f_open+0x4e4>)
 800bb0c:	505a      	str	r2, [r3, r1]
			if (!fp->lockid) res = FR_INT_ERR;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4a3c      	ldr	r2, [pc, #240]	; (800bc04 <f_open+0x4e4>)
 800bb12:	589b      	ldr	r3, [r3, r2]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d103      	bne.n	800bb20 <f_open+0x400>
 800bb18:	4b36      	ldr	r3, [pc, #216]	; (800bbf4 <f_open+0x4d4>)
 800bb1a:	18fb      	adds	r3, r7, r3
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bb20:	4b34      	ldr	r3, [pc, #208]	; (800bbf4 <f_open+0x4d4>)
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d155      	bne.n	800bbd6 <f_open+0x4b6>
			fp->flag = mode;					/* File access mode */
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4a2e      	ldr	r2, [pc, #184]	; (800bbe8 <f_open+0x4c8>)
 800bb2e:	4d2f      	ldr	r5, [pc, #188]	; (800bbec <f_open+0x4cc>)
 800bb30:	1952      	adds	r2, r2, r5
 800bb32:	19d2      	adds	r2, r2, r7
 800bb34:	4934      	ldr	r1, [pc, #208]	; (800bc08 <f_open+0x4e8>)
 800bb36:	7812      	ldrb	r2, [r2, #0]
 800bb38:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	4a33      	ldr	r2, [pc, #204]	; (800bc0c <f_open+0x4ec>)
 800bb3e:	2100      	movs	r1, #0
 800bb40:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bb42:	4b2d      	ldr	r3, [pc, #180]	; (800bbf8 <f_open+0x4d8>)
 800bb44:	195b      	adds	r3, r3, r5
 800bb46:	19da      	adds	r2, r3, r7
 800bb48:	2380      	movs	r3, #128	; 0x80
 800bb4a:	015b      	lsls	r3, r3, #5
 800bb4c:	58d3      	ldr	r3, [r2, r3]
 800bb4e:	4c28      	ldr	r4, [pc, #160]	; (800bbf0 <f_open+0x4d0>)
 800bb50:	193a      	adds	r2, r7, r4
 800bb52:	6812      	ldr	r2, [r2, #0]
 800bb54:	0011      	movs	r1, r2
 800bb56:	0018      	movs	r0, r3
 800bb58:	f7fe feb4 	bl	800a8c4 <ld_clust>
 800bb5c:	0002      	movs	r2, r0
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	492b      	ldr	r1, [pc, #172]	; (800bc10 <f_open+0x4f0>)
 800bb62:	505a      	str	r2, [r3, r1]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bb64:	0021      	movs	r1, r4
 800bb66:	187b      	adds	r3, r7, r1
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	331f      	adds	r3, #31
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	061a      	lsls	r2, r3, #24
 800bb70:	187b      	adds	r3, r7, r1
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	331e      	adds	r3, #30
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	041b      	lsls	r3, r3, #16
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	187a      	adds	r2, r7, r1
 800bb7e:	6812      	ldr	r2, [r2, #0]
 800bb80:	321d      	adds	r2, #29
 800bb82:	7812      	ldrb	r2, [r2, #0]
 800bb84:	0212      	lsls	r2, r2, #8
 800bb86:	4313      	orrs	r3, r2
 800bb88:	187a      	adds	r2, r7, r1
 800bb8a:	6812      	ldr	r2, [r2, #0]
 800bb8c:	321c      	adds	r2, #28
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	431a      	orrs	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	491f      	ldr	r1, [pc, #124]	; (800bc14 <f_open+0x4f4>)
 800bb96:	505a      	str	r2, [r3, r1]
			fp->fptr = 0;						/* File pointer */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4a1f      	ldr	r2, [pc, #124]	; (800bc18 <f_open+0x4f8>)
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	5099      	str	r1, [r3, r2]
			fp->dsect = 0;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4a1e      	ldr	r2, [pc, #120]	; (800bc1c <f_open+0x4fc>)
 800bba4:	2100      	movs	r1, #0
 800bba6:	5099      	str	r1, [r3, r2]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	4a1d      	ldr	r2, [pc, #116]	; (800bc20 <f_open+0x500>)
 800bbac:	2100      	movs	r1, #0
 800bbae:	5099      	str	r1, [r3, r2]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bbb0:	4b11      	ldr	r3, [pc, #68]	; (800bbf8 <f_open+0x4d8>)
 800bbb2:	195b      	adds	r3, r3, r5
 800bbb4:	19da      	adds	r2, r3, r7
 800bbb6:	2380      	movs	r3, #128	; 0x80
 800bbb8:	015b      	lsls	r3, r3, #5
 800bbba:	58d1      	ldr	r1, [r2, r3]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	2380      	movs	r3, #128	; 0x80
 800bbc0:	015b      	lsls	r3, r3, #5
 800bbc2:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	2380      	movs	r3, #128	; 0x80
 800bbc8:	015b      	lsls	r3, r3, #5
 800bbca:	58d3      	ldr	r3, [r2, r3]
 800bbcc:	4a0e      	ldr	r2, [pc, #56]	; (800bc08 <f_open+0x4e8>)
 800bbce:	5a99      	ldrh	r1, [r3, r2]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a14      	ldr	r2, [pc, #80]	; (800bc24 <f_open+0x504>)
 800bbd4:	5299      	strh	r1, [r3, r2]
		}
	}

	LEAVE_FF(dj.fs, res);
 800bbd6:	4b07      	ldr	r3, [pc, #28]	; (800bbf4 <f_open+0x4d4>)
 800bbd8:	18fb      	adds	r3, r7, r3
 800bbda:	781b      	ldrb	r3, [r3, #0]
}
 800bbdc:	0018      	movs	r0, r3
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	4b11      	ldr	r3, [pc, #68]	; (800bc28 <f_open+0x508>)
 800bbe2:	449d      	add	sp, r3
 800bbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbe6:	46c0      	nop			; (mov r8, r8)
 800bbe8:	ffffefb7 	.word	0xffffefb7
 800bbec:	00001050 	.word	0x00001050
 800bbf0:	00001048 	.word	0x00001048
 800bbf4:	0000104f 	.word	0x0000104f
 800bbf8:	ffffefd0 	.word	0xffffefd0
 800bbfc:	0000102c 	.word	0x0000102c
 800bc00:	0000101c 	.word	0x0000101c
 800bc04:	00001028 	.word	0x00001028
 800bc08:	00001006 	.word	0x00001006
 800bc0c:	00001007 	.word	0x00001007
 800bc10:	00001010 	.word	0x00001010
 800bc14:	0000100c 	.word	0x0000100c
 800bc18:	00001008 	.word	0x00001008
 800bc1c:	00001018 	.word	0x00001018
 800bc20:	00001024 	.word	0x00001024
 800bc24:	00001004 	.word	0x00001004
 800bc28:	00001054 	.word	0x00001054

0800bc2c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bc2c:	b5b0      	push	{r4, r5, r7, lr}
 800bc2e:	b08a      	sub	sp, #40	; 0x28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800bc44:	2517      	movs	r5, #23
 800bc46:	197c      	adds	r4, r7, r5
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	f7ff fcda 	bl	800b604 <validate>
 800bc50:	0003      	movs	r3, r0
 800bc52:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bc54:	197b      	adds	r3, r7, r5
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <f_write+0x36>
 800bc5c:	197b      	adds	r3, r7, r5
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	e1fc      	b.n	800c05c <f_write+0x430>
	if (fp->err)							/* Check error */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4ab9      	ldr	r2, [pc, #740]	; (800bf4c <f_write+0x320>)
 800bc66:	5c9b      	ldrb	r3, [r3, r2]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4ab7      	ldr	r2, [pc, #732]	; (800bf4c <f_write+0x320>)
 800bc70:	5c9b      	ldrb	r3, [r3, r2]
 800bc72:	e1f3      	b.n	800c05c <f_write+0x430>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4ab6      	ldr	r2, [pc, #728]	; (800bf50 <f_write+0x324>)
 800bc78:	5c9b      	ldrb	r3, [r3, r2]
 800bc7a:	001a      	movs	r2, r3
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	4013      	ands	r3, r2
 800bc80:	d101      	bne.n	800bc86 <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800bc82:	2307      	movs	r3, #7
 800bc84:	e1ea      	b.n	800c05c <f_write+0x430>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4ab2      	ldr	r2, [pc, #712]	; (800bf54 <f_write+0x328>)
 800bc8a:	589a      	ldr	r2, [r3, r2]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	18d2      	adds	r2, r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	49b0      	ldr	r1, [pc, #704]	; (800bf54 <f_write+0x328>)
 800bc94:	585b      	ldr	r3, [r3, r1]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d300      	bcc.n	800bc9c <f_write+0x70>
 800bc9a:	e1c1      	b.n	800c020 <f_write+0x3f4>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800bca0:	e1be      	b.n	800c020 <f_write+0x3f4>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4aab      	ldr	r2, [pc, #684]	; (800bf54 <f_write+0x328>)
 800bca6:	5898      	ldr	r0, [r3, r2]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	2380      	movs	r3, #128	; 0x80
 800bcac:	015b      	lsls	r3, r3, #5
 800bcae:	58d3      	ldr	r3, [r2, r3]
 800bcb0:	4aa9      	ldr	r2, [pc, #676]	; (800bf58 <f_write+0x32c>)
 800bcb2:	5a9b      	ldrh	r3, [r3, r2]
 800bcb4:	0019      	movs	r1, r3
 800bcb6:	f7f4 fad1 	bl	800025c <__aeabi_uidivmod>
 800bcba:	1e0b      	subs	r3, r1, #0
 800bcbc:	d000      	beq.n	800bcc0 <f_write+0x94>
 800bcbe:	e15f      	b.n	800bf80 <f_write+0x354>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4aa4      	ldr	r2, [pc, #656]	; (800bf54 <f_write+0x328>)
 800bcc4:	5898      	ldr	r0, [r3, r2]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	2380      	movs	r3, #128	; 0x80
 800bcca:	015b      	lsls	r3, r3, #5
 800bccc:	58d3      	ldr	r3, [r2, r3]
 800bcce:	4aa2      	ldr	r2, [pc, #648]	; (800bf58 <f_write+0x32c>)
 800bcd0:	5a9b      	ldrh	r3, [r3, r2]
 800bcd2:	0019      	movs	r1, r3
 800bcd4:	f7f4 fa3c 	bl	8000150 <__udivsi3>
 800bcd8:	0003      	movs	r3, r0
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	68f9      	ldr	r1, [r7, #12]
 800bcde:	2380      	movs	r3, #128	; 0x80
 800bce0:	015b      	lsls	r3, r3, #5
 800bce2:	58cb      	ldr	r3, [r1, r3]
 800bce4:	499d      	ldr	r1, [pc, #628]	; (800bf5c <f_write+0x330>)
 800bce6:	5c5b      	ldrb	r3, [r3, r1]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	b2d9      	uxtb	r1, r3
 800bcec:	2016      	movs	r0, #22
 800bcee:	183b      	adds	r3, r7, r0
 800bcf0:	400a      	ands	r2, r1
 800bcf2:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 800bcf4:	183b      	adds	r3, r7, r0
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d156      	bne.n	800bdaa <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4a95      	ldr	r2, [pc, #596]	; (800bf54 <f_write+0x328>)
 800bd00:	589b      	ldr	r3, [r3, r2]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d111      	bne.n	800bd2a <f_write+0xfe>
					clst = fp->sclust;		/* Follow from the origin */
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4a95      	ldr	r2, [pc, #596]	; (800bf60 <f_write+0x334>)
 800bd0a:	589b      	ldr	r3, [r3, r2]
 800bd0c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d127      	bne.n	800bd64 <f_write+0x138>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	2380      	movs	r3, #128	; 0x80
 800bd18:	015b      	lsls	r3, r3, #5
 800bd1a:	58d3      	ldr	r3, [r2, r3]
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f7fe fa60 	bl	800a1e4 <create_chain>
 800bd24:	0003      	movs	r3, r0
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
 800bd28:	e01c      	b.n	800bd64 <f_write+0x138>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4a8d      	ldr	r2, [pc, #564]	; (800bf64 <f_write+0x338>)
 800bd2e:	589b      	ldr	r3, [r3, r2]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00a      	beq.n	800bd4a <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	4a87      	ldr	r2, [pc, #540]	; (800bf54 <f_write+0x328>)
 800bd38:	589a      	ldr	r2, [r3, r2]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	0011      	movs	r1, r2
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f7fe fb04 	bl	800a34c <clmt_clust>
 800bd44:	0003      	movs	r3, r0
 800bd46:	627b      	str	r3, [r7, #36]	; 0x24
 800bd48:	e00c      	b.n	800bd64 <f_write+0x138>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	2380      	movs	r3, #128	; 0x80
 800bd4e:	015b      	lsls	r3, r3, #5
 800bd50:	58d2      	ldr	r2, [r2, r3]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	4984      	ldr	r1, [pc, #528]	; (800bf68 <f_write+0x33c>)
 800bd56:	585b      	ldr	r3, [r3, r1]
 800bd58:	0019      	movs	r1, r3
 800bd5a:	0010      	movs	r0, r2
 800bd5c:	f7fe fa42 	bl	800a1e4 <create_chain>
 800bd60:	0003      	movs	r3, r0
 800bd62:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d100      	bne.n	800bd6c <f_write+0x140>
 800bd6a:	e15e      	b.n	800c02a <f_write+0x3fe>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d105      	bne.n	800bd7e <f_write+0x152>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4a75      	ldr	r2, [pc, #468]	; (800bf4c <f_write+0x320>)
 800bd76:	2102      	movs	r1, #2
 800bd78:	5499      	strb	r1, [r3, r2]
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e16e      	b.n	800c05c <f_write+0x430>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	3301      	adds	r3, #1
 800bd82:	d105      	bne.n	800bd90 <f_write+0x164>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4a71      	ldr	r2, [pc, #452]	; (800bf4c <f_write+0x320>)
 800bd88:	2101      	movs	r1, #1
 800bd8a:	5499      	strb	r1, [r3, r2]
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e165      	b.n	800c05c <f_write+0x430>
				fp->clust = clst;			/* Update current cluster */
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4975      	ldr	r1, [pc, #468]	; (800bf68 <f_write+0x33c>)
 800bd94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd96:	505a      	str	r2, [r3, r1]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4a71      	ldr	r2, [pc, #452]	; (800bf60 <f_write+0x334>)
 800bd9c:	589b      	ldr	r3, [r3, r2]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d103      	bne.n	800bdaa <f_write+0x17e>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	496e      	ldr	r1, [pc, #440]	; (800bf60 <f_write+0x334>)
 800bda6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda8:	505a      	str	r2, [r3, r1]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	4a68      	ldr	r2, [pc, #416]	; (800bf50 <f_write+0x324>)
 800bdae:	5c9b      	ldrb	r3, [r3, r2]
 800bdb0:	001a      	movs	r2, r3
 800bdb2:	2340      	movs	r3, #64	; 0x40
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	d01d      	beq.n	800bdf4 <f_write+0x1c8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	2380      	movs	r3, #128	; 0x80
 800bdbc:	015b      	lsls	r3, r3, #5
 800bdbe:	58d3      	ldr	r3, [r2, r3]
 800bdc0:	4a6a      	ldr	r2, [pc, #424]	; (800bf6c <f_write+0x340>)
 800bdc2:	5c98      	ldrb	r0, [r3, r2]
 800bdc4:	68f9      	ldr	r1, [r7, #12]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	4a69      	ldr	r2, [pc, #420]	; (800bf70 <f_write+0x344>)
 800bdca:	589a      	ldr	r2, [r3, r2]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	f7fd fb75 	bl	80094bc <disk_write>
 800bdd2:	1e03      	subs	r3, r0, #0
 800bdd4:	d005      	beq.n	800bde2 <f_write+0x1b6>
					ABORT(fp->fs, FR_DISK_ERR);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4a5c      	ldr	r2, [pc, #368]	; (800bf4c <f_write+0x320>)
 800bdda:	2101      	movs	r1, #1
 800bddc:	5499      	strb	r1, [r3, r2]
 800bdde:	2301      	movs	r3, #1
 800bde0:	e13c      	b.n	800c05c <f_write+0x430>
				fp->flag &= ~FA__DIRTY;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4a5a      	ldr	r2, [pc, #360]	; (800bf50 <f_write+0x324>)
 800bde6:	5c9b      	ldrb	r3, [r3, r2]
 800bde8:	2240      	movs	r2, #64	; 0x40
 800bdea:	4393      	bics	r3, r2
 800bdec:	b2d9      	uxtb	r1, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	4a57      	ldr	r2, [pc, #348]	; (800bf50 <f_write+0x324>)
 800bdf2:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	2380      	movs	r3, #128	; 0x80
 800bdf8:	015b      	lsls	r3, r3, #5
 800bdfa:	58d2      	ldr	r2, [r2, r3]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	495a      	ldr	r1, [pc, #360]	; (800bf68 <f_write+0x33c>)
 800be00:	585b      	ldr	r3, [r3, r1]
 800be02:	0019      	movs	r1, r3
 800be04:	0010      	movs	r0, r2
 800be06:	f7fd fef1 	bl	8009bec <clust2sect>
 800be0a:	0003      	movs	r3, r0
 800be0c:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d105      	bne.n	800be20 <f_write+0x1f4>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	4a4d      	ldr	r2, [pc, #308]	; (800bf4c <f_write+0x320>)
 800be18:	2102      	movs	r1, #2
 800be1a:	5499      	strb	r1, [r3, r2]
 800be1c:	2302      	movs	r3, #2
 800be1e:	e11d      	b.n	800c05c <f_write+0x430>
			sect += csect;
 800be20:	2416      	movs	r4, #22
 800be22:	193b      	adds	r3, r7, r4
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	18d3      	adds	r3, r2, r3
 800be2a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	2380      	movs	r3, #128	; 0x80
 800be30:	015b      	lsls	r3, r3, #5
 800be32:	58d3      	ldr	r3, [r2, r3]
 800be34:	4a48      	ldr	r2, [pc, #288]	; (800bf58 <f_write+0x32c>)
 800be36:	5a9b      	ldrh	r3, [r3, r2]
 800be38:	0019      	movs	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7f4 f988 	bl	8000150 <__udivsi3>
 800be40:	0003      	movs	r3, r0
 800be42:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d05e      	beq.n	800bf08 <f_write+0x2dc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800be4a:	0020      	movs	r0, r4
 800be4c:	183b      	adds	r3, r7, r0
 800be4e:	781a      	ldrb	r2, [r3, #0]
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	18d3      	adds	r3, r2, r3
 800be54:	68f9      	ldr	r1, [r7, #12]
 800be56:	2280      	movs	r2, #128	; 0x80
 800be58:	0152      	lsls	r2, r2, #5
 800be5a:	588a      	ldr	r2, [r1, r2]
 800be5c:	493f      	ldr	r1, [pc, #252]	; (800bf5c <f_write+0x330>)
 800be5e:	5c52      	ldrb	r2, [r2, r1]
 800be60:	4293      	cmp	r3, r2
 800be62:	d90a      	bls.n	800be7a <f_write+0x24e>
					cc = fp->fs->csize - csect;
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	2380      	movs	r3, #128	; 0x80
 800be68:	015b      	lsls	r3, r3, #5
 800be6a:	58d3      	ldr	r3, [r2, r3]
 800be6c:	4a3b      	ldr	r2, [pc, #236]	; (800bf5c <f_write+0x330>)
 800be6e:	5c9b      	ldrb	r3, [r3, r2]
 800be70:	001a      	movs	r2, r3
 800be72:	183b      	adds	r3, r7, r0
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	2380      	movs	r3, #128	; 0x80
 800be7e:	015b      	lsls	r3, r3, #5
 800be80:	58d3      	ldr	r3, [r2, r3]
 800be82:	4a3a      	ldr	r2, [pc, #232]	; (800bf6c <f_write+0x340>)
 800be84:	5c98      	ldrb	r0, [r3, r2]
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	69b9      	ldr	r1, [r7, #24]
 800be8c:	f7fd fb16 	bl	80094bc <disk_write>
 800be90:	1e03      	subs	r3, r0, #0
 800be92:	d005      	beq.n	800bea0 <f_write+0x274>
					ABORT(fp->fs, FR_DISK_ERR);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4a2d      	ldr	r2, [pc, #180]	; (800bf4c <f_write+0x320>)
 800be98:	2101      	movs	r1, #1
 800be9a:	5499      	strb	r1, [r3, r2]
 800be9c:	2301      	movs	r3, #1
 800be9e:	e0dd      	b.n	800c05c <f_write+0x430>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	4a33      	ldr	r2, [pc, #204]	; (800bf70 <f_write+0x344>)
 800bea4:	589a      	ldr	r2, [r3, r2]
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	69fa      	ldr	r2, [r7, #28]
 800beac:	429a      	cmp	r2, r3
 800beae:	d920      	bls.n	800bef2 <f_write+0x2c6>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4a2e      	ldr	r2, [pc, #184]	; (800bf70 <f_write+0x344>)
 800beb6:	589a      	ldr	r2, [r3, r2]
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	68f9      	ldr	r1, [r7, #12]
 800bebe:	2280      	movs	r2, #128	; 0x80
 800bec0:	0152      	lsls	r2, r2, #5
 800bec2:	588a      	ldr	r2, [r1, r2]
 800bec4:	4924      	ldr	r1, [pc, #144]	; (800bf58 <f_write+0x32c>)
 800bec6:	5a52      	ldrh	r2, [r2, r1]
 800bec8:	4353      	muls	r3, r2
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	18d1      	adds	r1, r2, r3
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	2380      	movs	r3, #128	; 0x80
 800bed2:	015b      	lsls	r3, r3, #5
 800bed4:	58d3      	ldr	r3, [r2, r3]
 800bed6:	4a20      	ldr	r2, [pc, #128]	; (800bf58 <f_write+0x32c>)
 800bed8:	5a9b      	ldrh	r3, [r3, r2]
 800beda:	001a      	movs	r2, r3
 800bedc:	f7fd fb3e 	bl	800955c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4a1b      	ldr	r2, [pc, #108]	; (800bf50 <f_write+0x324>)
 800bee4:	5c9b      	ldrb	r3, [r3, r2]
 800bee6:	2240      	movs	r2, #64	; 0x40
 800bee8:	4393      	bics	r3, r2
 800beea:	b2d9      	uxtb	r1, r3
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	4a18      	ldr	r2, [pc, #96]	; (800bf50 <f_write+0x324>)
 800bef0:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	2380      	movs	r3, #128	; 0x80
 800bef6:	015b      	lsls	r3, r3, #5
 800bef8:	58d3      	ldr	r3, [r2, r3]
 800befa:	4a17      	ldr	r2, [pc, #92]	; (800bf58 <f_write+0x32c>)
 800befc:	5a9b      	ldrh	r3, [r3, r2]
 800befe:	001a      	movs	r2, r3
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	4353      	muls	r3, r2
 800bf04:	623b      	str	r3, [r7, #32]
				continue;
 800bf06:	e075      	b.n	800bff4 <f_write+0x3c8>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4a19      	ldr	r2, [pc, #100]	; (800bf70 <f_write+0x344>)
 800bf0c:	589b      	ldr	r3, [r3, r2]
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d031      	beq.n	800bf78 <f_write+0x34c>
				if (fp->fptr < fp->fsize &&
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4a0f      	ldr	r2, [pc, #60]	; (800bf54 <f_write+0x328>)
 800bf18:	589a      	ldr	r2, [r3, r2]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	4915      	ldr	r1, [pc, #84]	; (800bf74 <f_write+0x348>)
 800bf1e:	585b      	ldr	r3, [r3, r1]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d229      	bcs.n	800bf78 <f_write+0x34c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	2380      	movs	r3, #128	; 0x80
 800bf28:	015b      	lsls	r3, r3, #5
 800bf2a:	58d3      	ldr	r3, [r2, r3]
 800bf2c:	4a0f      	ldr	r2, [pc, #60]	; (800bf6c <f_write+0x340>)
 800bf2e:	5c98      	ldrb	r0, [r3, r2]
 800bf30:	68f9      	ldr	r1, [r7, #12]
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	2301      	movs	r3, #1
 800bf36:	f7fd fa99 	bl	800946c <disk_read>
 800bf3a:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 800bf3c:	d01c      	beq.n	800bf78 <f_write+0x34c>
						ABORT(fp->fs, FR_DISK_ERR);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	4a02      	ldr	r2, [pc, #8]	; (800bf4c <f_write+0x320>)
 800bf42:	2101      	movs	r1, #1
 800bf44:	5499      	strb	r1, [r3, r2]
 800bf46:	2301      	movs	r3, #1
 800bf48:	e088      	b.n	800c05c <f_write+0x430>
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	00001007 	.word	0x00001007
 800bf50:	00001006 	.word	0x00001006
 800bf54:	00001008 	.word	0x00001008
 800bf58:	0000100a 	.word	0x0000100a
 800bf5c:	00001002 	.word	0x00001002
 800bf60:	00001010 	.word	0x00001010
 800bf64:	00001024 	.word	0x00001024
 800bf68:	00001014 	.word	0x00001014
 800bf6c:	00001001 	.word	0x00001001
 800bf70:	00001018 	.word	0x00001018
 800bf74:	0000100c 	.word	0x0000100c
			}
#endif
			fp->dsect = sect;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	493a      	ldr	r1, [pc, #232]	; (800c064 <f_write+0x438>)
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	505a      	str	r2, [r3, r1]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	2380      	movs	r3, #128	; 0x80
 800bf84:	015b      	lsls	r3, r3, #5
 800bf86:	58d3      	ldr	r3, [r2, r3]
 800bf88:	4a37      	ldr	r2, [pc, #220]	; (800c068 <f_write+0x43c>)
 800bf8a:	5a9b      	ldrh	r3, [r3, r2]
 800bf8c:	001c      	movs	r4, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	4a36      	ldr	r2, [pc, #216]	; (800c06c <f_write+0x440>)
 800bf92:	5898      	ldr	r0, [r3, r2]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	2380      	movs	r3, #128	; 0x80
 800bf98:	015b      	lsls	r3, r3, #5
 800bf9a:	58d3      	ldr	r3, [r2, r3]
 800bf9c:	4a32      	ldr	r2, [pc, #200]	; (800c068 <f_write+0x43c>)
 800bf9e:	5a9b      	ldrh	r3, [r3, r2]
 800bfa0:	0019      	movs	r1, r3
 800bfa2:	f7f4 f95b 	bl	800025c <__aeabi_uidivmod>
 800bfa6:	000b      	movs	r3, r1
 800bfa8:	1ae3      	subs	r3, r4, r3
 800bfaa:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bfac:	6a3a      	ldr	r2, [r7, #32]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d901      	bls.n	800bfb8 <f_write+0x38c>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a2c      	ldr	r2, [pc, #176]	; (800c06c <f_write+0x440>)
 800bfbc:	5898      	ldr	r0, [r3, r2]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	2380      	movs	r3, #128	; 0x80
 800bfc2:	015b      	lsls	r3, r3, #5
 800bfc4:	58d3      	ldr	r3, [r2, r3]
 800bfc6:	4a28      	ldr	r2, [pc, #160]	; (800c068 <f_write+0x43c>)
 800bfc8:	5a9b      	ldrh	r3, [r3, r2]
 800bfca:	0019      	movs	r1, r3
 800bfcc:	f7f4 f946 	bl	800025c <__aeabi_uidivmod>
 800bfd0:	000b      	movs	r3, r1
 800bfd2:	001a      	movs	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	189b      	adds	r3, r3, r2
 800bfd8:	6a3a      	ldr	r2, [r7, #32]
 800bfda:	69b9      	ldr	r1, [r7, #24]
 800bfdc:	0018      	movs	r0, r3
 800bfde:	f7fd fabd 	bl	800955c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	4a22      	ldr	r2, [pc, #136]	; (800c070 <f_write+0x444>)
 800bfe6:	5c9b      	ldrb	r3, [r3, r2]
 800bfe8:	2240      	movs	r2, #64	; 0x40
 800bfea:	4313      	orrs	r3, r2
 800bfec:	b2d9      	uxtb	r1, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	4a1f      	ldr	r2, [pc, #124]	; (800c070 <f_write+0x444>)
 800bff2:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	18d3      	adds	r3, r2, r3
 800bffa:	61bb      	str	r3, [r7, #24]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4a1b      	ldr	r2, [pc, #108]	; (800c06c <f_write+0x440>)
 800c000:	589a      	ldr	r2, [r3, r2]
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	18d2      	adds	r2, r2, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	4918      	ldr	r1, [pc, #96]	; (800c06c <f_write+0x440>)
 800c00a:	505a      	str	r2, [r3, r1]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	18d2      	adds	r2, r2, r3
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d000      	beq.n	800c028 <f_write+0x3fc>
 800c026:	e63c      	b.n	800bca2 <f_write+0x76>
 800c028:	e000      	b.n	800c02c <f_write+0x400>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c02a:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	4a0f      	ldr	r2, [pc, #60]	; (800c06c <f_write+0x440>)
 800c030:	589a      	ldr	r2, [r3, r2]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	490f      	ldr	r1, [pc, #60]	; (800c074 <f_write+0x448>)
 800c036:	585b      	ldr	r3, [r3, r1]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d905      	bls.n	800c048 <f_write+0x41c>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4a0b      	ldr	r2, [pc, #44]	; (800c06c <f_write+0x440>)
 800c040:	589a      	ldr	r2, [r3, r2]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	490b      	ldr	r1, [pc, #44]	; (800c074 <f_write+0x448>)
 800c046:	505a      	str	r2, [r3, r1]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	4a09      	ldr	r2, [pc, #36]	; (800c070 <f_write+0x444>)
 800c04c:	5c9b      	ldrb	r3, [r3, r2]
 800c04e:	2220      	movs	r2, #32
 800c050:	4313      	orrs	r3, r2
 800c052:	b2d9      	uxtb	r1, r3
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4a06      	ldr	r2, [pc, #24]	; (800c070 <f_write+0x444>)
 800c058:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	0018      	movs	r0, r3
 800c05e:	46bd      	mov	sp, r7
 800c060:	b00a      	add	sp, #40	; 0x28
 800c062:	bdb0      	pop	{r4, r5, r7, pc}
 800c064:	00001018 	.word	0x00001018
 800c068:	0000100a 	.word	0x0000100a
 800c06c:	00001008 	.word	0x00001008
 800c070:	00001006 	.word	0x00001006
 800c074:	0000100c 	.word	0x0000100c

0800c078 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c078:	b5b0      	push	{r4, r5, r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c080:	2517      	movs	r5, #23
 800c082:	197c      	adds	r4, r7, r5
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	0018      	movs	r0, r3
 800c088:	f7ff fabc 	bl	800b604 <validate>
 800c08c:	0003      	movs	r3, r0
 800c08e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800c090:	197b      	adds	r3, r7, r5
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d000      	beq.n	800c09a <f_sync+0x22>
 800c098:	e0b2      	b.n	800c200 <f_sync+0x188>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a5c      	ldr	r2, [pc, #368]	; (800c210 <f_sync+0x198>)
 800c09e:	5c9b      	ldrb	r3, [r3, r2]
 800c0a0:	001a      	movs	r2, r3
 800c0a2:	2320      	movs	r3, #32
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	d100      	bne.n	800c0aa <f_sync+0x32>
 800c0a8:	e0aa      	b.n	800c200 <f_sync+0x188>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a58      	ldr	r2, [pc, #352]	; (800c210 <f_sync+0x198>)
 800c0ae:	5c9b      	ldrb	r3, [r3, r2]
 800c0b0:	001a      	movs	r2, r3
 800c0b2:	2340      	movs	r3, #64	; 0x40
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	d019      	beq.n	800c0ec <f_sync+0x74>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	2380      	movs	r3, #128	; 0x80
 800c0bc:	015b      	lsls	r3, r3, #5
 800c0be:	58d3      	ldr	r3, [r2, r3]
 800c0c0:	4a54      	ldr	r2, [pc, #336]	; (800c214 <f_sync+0x19c>)
 800c0c2:	5c98      	ldrb	r0, [r3, r2]
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a53      	ldr	r2, [pc, #332]	; (800c218 <f_sync+0x1a0>)
 800c0ca:	589a      	ldr	r2, [r3, r2]
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	f7fd f9f5 	bl	80094bc <disk_write>
 800c0d2:	1e03      	subs	r3, r0, #0
 800c0d4:	d001      	beq.n	800c0da <f_sync+0x62>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e095      	b.n	800c206 <f_sync+0x18e>
				fp->flag &= ~FA__DIRTY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a4c      	ldr	r2, [pc, #304]	; (800c210 <f_sync+0x198>)
 800c0de:	5c9b      	ldrb	r3, [r3, r2]
 800c0e0:	2240      	movs	r2, #64	; 0x40
 800c0e2:	4393      	bics	r3, r2
 800c0e4:	b2d9      	uxtb	r1, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a49      	ldr	r2, [pc, #292]	; (800c210 <f_sync+0x198>)
 800c0ea:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	2380      	movs	r3, #128	; 0x80
 800c0f0:	015b      	lsls	r3, r3, #5
 800c0f2:	58d2      	ldr	r2, [r2, r3]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4949      	ldr	r1, [pc, #292]	; (800c21c <f_sync+0x1a4>)
 800c0f8:	585b      	ldr	r3, [r3, r1]
 800c0fa:	2517      	movs	r5, #23
 800c0fc:	197c      	adds	r4, r7, r5
 800c0fe:	0019      	movs	r1, r3
 800c100:	0010      	movs	r0, r2
 800c102:	f7fd fc65 	bl	80099d0 <move_window>
 800c106:	0003      	movs	r3, r0
 800c108:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 800c10a:	002c      	movs	r4, r5
 800c10c:	193b      	adds	r3, r7, r4
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d175      	bne.n	800c200 <f_sync+0x188>
				dir = fp->dir_ptr;
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	2381      	movs	r3, #129	; 0x81
 800c118:	015b      	lsls	r3, r3, #5
 800c11a:	58d3      	ldr	r3, [r2, r3]
 800c11c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	330b      	adds	r3, #11
 800c122:	781a      	ldrb	r2, [r3, #0]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	330b      	adds	r3, #11
 800c128:	2120      	movs	r1, #32
 800c12a:	430a      	orrs	r2, r1
 800c12c:	b2d2      	uxtb	r2, r2
 800c12e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a3b      	ldr	r2, [pc, #236]	; (800c220 <f_sync+0x1a8>)
 800c134:	589a      	ldr	r2, [r3, r2]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	331c      	adds	r3, #28
 800c13a:	b2d2      	uxtb	r2, r2
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a37      	ldr	r2, [pc, #220]	; (800c220 <f_sync+0x1a8>)
 800c142:	589b      	ldr	r3, [r3, r2]
 800c144:	b29b      	uxth	r3, r3
 800c146:	0a1b      	lsrs	r3, r3, #8
 800c148:	b29a      	uxth	r2, r3
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	331d      	adds	r3, #29
 800c14e:	b2d2      	uxtb	r2, r2
 800c150:	701a      	strb	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a32      	ldr	r2, [pc, #200]	; (800c220 <f_sync+0x1a8>)
 800c156:	589b      	ldr	r3, [r3, r2]
 800c158:	0c1a      	lsrs	r2, r3, #16
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	331e      	adds	r3, #30
 800c15e:	b2d2      	uxtb	r2, r2
 800c160:	701a      	strb	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a2e      	ldr	r2, [pc, #184]	; (800c220 <f_sync+0x1a8>)
 800c166:	589b      	ldr	r3, [r3, r2]
 800c168:	0e1a      	lsrs	r2, r3, #24
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	331f      	adds	r3, #31
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a2b      	ldr	r2, [pc, #172]	; (800c224 <f_sync+0x1ac>)
 800c176:	589a      	ldr	r2, [r3, r2]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	0011      	movs	r1, r2
 800c17c:	0018      	movs	r0, r3
 800c17e:	f7fe fbce 	bl	800a91e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c182:	f7fd f8b5 	bl	80092f0 <get_fattime>
 800c186:	0003      	movs	r3, r0
 800c188:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	3316      	adds	r3, #22
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	b2d2      	uxtb	r2, r2
 800c192:	701a      	strb	r2, [r3, #0]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	b29b      	uxth	r3, r3
 800c198:	0a1b      	lsrs	r3, r3, #8
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	3317      	adds	r3, #23
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	0c1a      	lsrs	r2, r3, #16
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	3318      	adds	r3, #24
 800c1ac:	b2d2      	uxtb	r2, r2
 800c1ae:	701a      	strb	r2, [r3, #0]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	0e1a      	lsrs	r2, r3, #24
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	3319      	adds	r3, #25
 800c1b8:	b2d2      	uxtb	r2, r2
 800c1ba:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	3312      	adds	r3, #18
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	701a      	strb	r2, [r3, #0]
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	3313      	adds	r3, #19
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a10      	ldr	r2, [pc, #64]	; (800c210 <f_sync+0x198>)
 800c1d0:	5c9b      	ldrb	r3, [r3, r2]
 800c1d2:	2220      	movs	r2, #32
 800c1d4:	4393      	bics	r3, r2
 800c1d6:	b2d9      	uxtb	r1, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a0d      	ldr	r2, [pc, #52]	; (800c210 <f_sync+0x198>)
 800c1dc:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	2380      	movs	r3, #128	; 0x80
 800c1e2:	015b      	lsls	r3, r3, #5
 800c1e4:	58d3      	ldr	r3, [r2, r3]
 800c1e6:	4a10      	ldr	r2, [pc, #64]	; (800c228 <f_sync+0x1b0>)
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	5499      	strb	r1, [r3, r2]
				res = sync_fs(fp->fs);
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	2380      	movs	r3, #128	; 0x80
 800c1f0:	015b      	lsls	r3, r3, #5
 800c1f2:	58d3      	ldr	r3, [r2, r3]
 800c1f4:	193c      	adds	r4, r7, r4
 800c1f6:	0018      	movs	r0, r3
 800c1f8:	f7fd fc24 	bl	8009a44 <sync_fs>
 800c1fc:	0003      	movs	r3, r0
 800c1fe:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c200:	2317      	movs	r3, #23
 800c202:	18fb      	adds	r3, r7, r3
 800c204:	781b      	ldrb	r3, [r3, #0]
}
 800c206:	0018      	movs	r0, r3
 800c208:	46bd      	mov	sp, r7
 800c20a:	b006      	add	sp, #24
 800c20c:	bdb0      	pop	{r4, r5, r7, pc}
 800c20e:	46c0      	nop			; (mov r8, r8)
 800c210:	00001006 	.word	0x00001006
 800c214:	00001001 	.word	0x00001001
 800c218:	00001018 	.word	0x00001018
 800c21c:	0000101c 	.word	0x0000101c
 800c220:	0000100c 	.word	0x0000100c
 800c224:	00001010 	.word	0x00001010
 800c228:	00001004 	.word	0x00001004

0800c22c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c22c:	b5b0      	push	{r4, r5, r7, lr}
 800c22e:	b08e      	sub	sp, #56	; 0x38
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800c238:	2537      	movs	r5, #55	; 0x37
 800c23a:	197c      	adds	r4, r7, r5
 800c23c:	230c      	movs	r3, #12
 800c23e:	18f9      	adds	r1, r7, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	0018      	movs	r0, r3
 800c246:	f7fe fe83 	bl	800af50 <find_volume>
 800c24a:	0003      	movs	r3, r0
 800c24c:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800c254:	197b      	adds	r3, r7, r5
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d000      	beq.n	800c25e <f_getfree+0x32>
 800c25c:	e0bb      	b.n	800c3d6 <f_getfree+0x1aa>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	4a60      	ldr	r2, [pc, #384]	; (800c3e4 <f_getfree+0x1b8>)
 800c262:	589a      	ldr	r2, [r3, r2]
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	4960      	ldr	r1, [pc, #384]	; (800c3e8 <f_getfree+0x1bc>)
 800c268:	585b      	ldr	r3, [r3, r1]
 800c26a:	3b02      	subs	r3, #2
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d805      	bhi.n	800c27c <f_getfree+0x50>
			*nclst = fs->free_clust;
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	4a5c      	ldr	r2, [pc, #368]	; (800c3e4 <f_getfree+0x1b8>)
 800c274:	589a      	ldr	r2, [r3, r2]
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	e0ac      	b.n	800c3d6 <f_getfree+0x1aa>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800c27c:	201b      	movs	r0, #27
 800c27e:	183b      	adds	r3, r7, r0
 800c280:	69f9      	ldr	r1, [r7, #28]
 800c282:	2280      	movs	r2, #128	; 0x80
 800c284:	0152      	lsls	r2, r2, #5
 800c286:	5c8a      	ldrb	r2, [r1, r2]
 800c288:	701a      	strb	r2, [r3, #0]
			n = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800c28e:	183b      	adds	r3, r7, r0
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d129      	bne.n	800c2ea <f_getfree+0xbe>
				clst = 2;
 800c296:	2302      	movs	r3, #2
 800c298:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800c29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	0011      	movs	r1, r2
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	f7fd fcc9 	bl	8009c38 <get_fat>
 800c2a6:	0003      	movs	r3, r0
 800c2a8:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	d104      	bne.n	800c2ba <f_getfree+0x8e>
 800c2b0:	2337      	movs	r3, #55	; 0x37
 800c2b2:	18fb      	adds	r3, r7, r3
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	701a      	strb	r2, [r3, #0]
 800c2b8:	e07d      	b.n	800c3b6 <f_getfree+0x18a>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d104      	bne.n	800c2ca <f_getfree+0x9e>
 800c2c0:	2337      	movs	r3, #55	; 0x37
 800c2c2:	18fb      	adds	r3, r7, r3
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	701a      	strb	r2, [r3, #0]
 800c2c8:	e075      	b.n	800c3b6 <f_getfree+0x18a>
					if (stat == 0) n++;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <f_getfree+0xaa>
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800c2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d8:	3301      	adds	r3, #1
 800c2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	4a42      	ldr	r2, [pc, #264]	; (800c3e8 <f_getfree+0x1bc>)
 800c2e0:	589b      	ldr	r3, [r3, r2]
 800c2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d3d8      	bcc.n	800c29a <f_getfree+0x6e>
 800c2e8:	e065      	b.n	800c3b6 <f_getfree+0x18a>
			} else {
				clst = fs->n_fatent;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	4a3e      	ldr	r2, [pc, #248]	; (800c3e8 <f_getfree+0x1bc>)
 800c2ee:	589b      	ldr	r3, [r3, r2]
 800c2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	2381      	movs	r3, #129	; 0x81
 800c2f6:	015b      	lsls	r3, r3, #5
 800c2f8:	58d3      	ldr	r3, [r2, r3]
 800c2fa:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c300:	2300      	movs	r3, #0
 800c302:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	2b00      	cmp	r3, #0
 800c308:	d115      	bne.n	800c336 <f_getfree+0x10a>
						res = move_window(fs, sect++);
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	1c5a      	adds	r2, r3, #1
 800c30e:	62ba      	str	r2, [r7, #40]	; 0x28
 800c310:	2537      	movs	r5, #55	; 0x37
 800c312:	197c      	adds	r4, r7, r5
 800c314:	69fa      	ldr	r2, [r7, #28]
 800c316:	0019      	movs	r1, r3
 800c318:	0010      	movs	r0, r2
 800c31a:	f7fd fb59 	bl	80099d0 <move_window>
 800c31e:	0003      	movs	r3, r0
 800c320:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 800c322:	197b      	adds	r3, r7, r5
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d144      	bne.n	800c3b4 <f_getfree+0x188>
						p = fs->win.d8;
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	4a2e      	ldr	r2, [pc, #184]	; (800c3ec <f_getfree+0x1c0>)
 800c332:	5a9b      	ldrh	r3, [r3, r2]
 800c334:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800c336:	231b      	movs	r3, #27
 800c338:	18fb      	adds	r3, r7, r3
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d115      	bne.n	800c36c <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	3301      	adds	r3, #1
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	021b      	lsls	r3, r3, #8
 800c348:	b21a      	sxth	r2, r3
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b21b      	sxth	r3, r3
 800c350:	4313      	orrs	r3, r2
 800c352:	b21b      	sxth	r3, r3
 800c354:	2b00      	cmp	r3, #0
 800c356:	d102      	bne.n	800c35e <f_getfree+0x132>
 800c358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35a:	3301      	adds	r3, #1
 800c35c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	3302      	adds	r3, #2
 800c362:	623b      	str	r3, [r7, #32]
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	3b02      	subs	r3, #2
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
 800c36a:	e01c      	b.n	800c3a6 <f_getfree+0x17a>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	3303      	adds	r3, #3
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	061a      	lsls	r2, r3, #24
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	3302      	adds	r3, #2
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	041b      	lsls	r3, r3, #16
 800c37c:	4313      	orrs	r3, r2
 800c37e:	6a3a      	ldr	r2, [r7, #32]
 800c380:	3201      	adds	r2, #1
 800c382:	7812      	ldrb	r2, [r2, #0]
 800c384:	0212      	lsls	r2, r2, #8
 800c386:	4313      	orrs	r3, r2
 800c388:	6a3a      	ldr	r2, [r7, #32]
 800c38a:	7812      	ldrb	r2, [r2, #0]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	011b      	lsls	r3, r3, #4
 800c390:	091b      	lsrs	r3, r3, #4
 800c392:	d102      	bne.n	800c39a <f_getfree+0x16e>
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	3301      	adds	r3, #1
 800c398:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	3304      	adds	r3, #4
 800c39e:	623b      	str	r3, [r7, #32]
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	3b04      	subs	r3, #4
 800c3a4:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1a8      	bne.n	800c304 <f_getfree+0xd8>
 800c3b2:	e000      	b.n	800c3b6 <f_getfree+0x18a>
						if (res != FR_OK) break;
 800c3b4:	46c0      	nop			; (mov r8, r8)
			}
			fs->free_clust = n;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	490a      	ldr	r1, [pc, #40]	; (800c3e4 <f_getfree+0x1b8>)
 800c3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3bc:	505a      	str	r2, [r3, r1]
			fs->fsi_flag |= 1;
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	4a0b      	ldr	r2, [pc, #44]	; (800c3f0 <f_getfree+0x1c4>)
 800c3c2:	5c9b      	ldrb	r3, [r3, r2]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	b2d9      	uxtb	r1, r3
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4a08      	ldr	r2, [pc, #32]	; (800c3f0 <f_getfree+0x1c4>)
 800c3ce:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3d4:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800c3d6:	2337      	movs	r3, #55	; 0x37
 800c3d8:	18fb      	adds	r3, r7, r3
 800c3da:	781b      	ldrb	r3, [r3, #0]
}
 800c3dc:	0018      	movs	r0, r3
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	b00e      	add	sp, #56	; 0x38
 800c3e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c3e4:	00001010 	.word	0x00001010
 800c3e8:	00001014 	.word	0x00001014
 800c3ec:	0000100a 	.word	0x0000100a
 800c3f0:	00001005 	.word	0x00001005

0800c3f4 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	000a      	movs	r2, r1
 800c3fe:	1cfb      	adds	r3, r7, #3
 800c400:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800c402:	1cfb      	adds	r3, r7, #3
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	2b0a      	cmp	r3, #10
 800c408:	d104      	bne.n	800c414 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	210d      	movs	r1, #13
 800c40e:	0018      	movs	r0, r3
 800c410:	f7ff fff0 	bl	800c3f4 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	db26      	blt.n	800c46e <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	60fa      	str	r2, [r7, #12]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	18d3      	adds	r3, r2, r3
 800c42a:	1cfa      	adds	r2, r7, #3
 800c42c:	7812      	ldrb	r2, [r2, #0]
 800c42e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b3c      	cmp	r3, #60	; 0x3c
 800c434:	dd12      	ble.n	800c45c <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	330c      	adds	r3, #12
 800c43e:	0019      	movs	r1, r3
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	2308      	movs	r3, #8
 800c444:	18fb      	adds	r3, r7, r3
 800c446:	f7ff fbf1 	bl	800bc2c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d101      	bne.n	800c456 <putc_bfd+0x62>
 800c452:	2300      	movs	r3, #0
 800c454:	e001      	b.n	800c45a <putc_bfd+0x66>
 800c456:	2301      	movs	r3, #1
 800c458:	425b      	negs	r3, r3
 800c45a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	1c5a      	adds	r2, r3, #1
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	609a      	str	r2, [r3, #8]
 800c46c:	e000      	b.n	800c470 <putc_bfd+0x7c>
	if (i < 0) return;
 800c46e:	46c0      	nop			; (mov r8, r8)
}
 800c470:	46bd      	mov	sp, r7
 800c472:	b004      	add	sp, #16
 800c474:	bd80      	pop	{r7, pc}
	...

0800c478 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800c478:	b40e      	push	{r1, r2, r3}
 800c47a:	b5b0      	push	{r4, r5, r7, lr}
 800c47c:	b0a3      	sub	sp, #140	; 0x8c
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 800c482:	2108      	movs	r1, #8
 800c484:	187b      	adds	r3, r7, r1
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	601a      	str	r2, [r3, #0]
	pb.nchr = pb.idx = 0;
 800c48a:	187b      	adds	r3, r7, r1
 800c48c:	2200      	movs	r2, #0
 800c48e:	605a      	str	r2, [r3, #4]
 800c490:	187b      	adds	r3, r7, r1
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	187b      	adds	r3, r7, r1
 800c496:	609a      	str	r2, [r3, #8]

	va_start(arp, fmt);
 800c498:	2398      	movs	r3, #152	; 0x98
 800c49a:	2208      	movs	r2, #8
 800c49c:	189b      	adds	r3, r3, r2
 800c49e:	19db      	adds	r3, r3, r7
 800c4a0:	66bb      	str	r3, [r7, #104]	; 0x68

	for (;;) {
		c = *fmt++;
 800c4a2:	2194      	movs	r1, #148	; 0x94
 800c4a4:	2008      	movs	r0, #8
 800c4a6:	180b      	adds	r3, r1, r0
 800c4a8:	19db      	adds	r3, r3, r7
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	1c5a      	adds	r2, r3, #1
 800c4ae:	1809      	adds	r1, r1, r0
 800c4b0:	19c9      	adds	r1, r1, r7
 800c4b2:	600a      	str	r2, [r1, #0]
 800c4b4:	2173      	movs	r1, #115	; 0x73
 800c4b6:	187a      	adds	r2, r7, r1
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	7013      	strb	r3, [r2, #0]
		if (c == 0) break;			/* End of string */
 800c4bc:	000a      	movs	r2, r1
 800c4be:	18bb      	adds	r3, r7, r2
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d100      	bne.n	800c4c8 <f_printf+0x50>
 800c4c6:	e1dc      	b.n	800c882 <f_printf+0x40a>
		if (c != '%') {				/* Non escape character */
 800c4c8:	18bb      	adds	r3, r7, r2
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b25      	cmp	r3, #37	; 0x25
 800c4ce:	d008      	beq.n	800c4e2 <f_printf+0x6a>
			putc_bfd(&pb, c);
 800c4d0:	18bb      	adds	r3, r7, r2
 800c4d2:	781a      	ldrb	r2, [r3, #0]
 800c4d4:	0003      	movs	r3, r0
 800c4d6:	18fb      	adds	r3, r7, r3
 800c4d8:	0011      	movs	r1, r2
 800c4da:	0018      	movs	r0, r3
 800c4dc:	f7ff ff8a 	bl	800c3f4 <putc_bfd>
			continue;
 800c4e0:	e1ce      	b.n	800c880 <f_printf+0x408>
		}
		w = f = 0;
 800c4e2:	2487      	movs	r4, #135	; 0x87
 800c4e4:	193b      	adds	r3, r7, r4
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	67bb      	str	r3, [r7, #120]	; 0x78
		c = *fmt++;
 800c4ee:	2194      	movs	r1, #148	; 0x94
 800c4f0:	2508      	movs	r5, #8
 800c4f2:	194b      	adds	r3, r1, r5
 800c4f4:	19db      	adds	r3, r3, r7
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	1948      	adds	r0, r1, r5
 800c4fc:	19c0      	adds	r0, r0, r7
 800c4fe:	6002      	str	r2, [r0, #0]
 800c500:	2073      	movs	r0, #115	; 0x73
 800c502:	183a      	adds	r2, r7, r0
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padding */
 800c508:	183b      	adds	r3, r7, r0
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b30      	cmp	r3, #48	; 0x30
 800c50e:	d10d      	bne.n	800c52c <f_printf+0xb4>
			f = 1; c = *fmt++;
 800c510:	193b      	adds	r3, r7, r4
 800c512:	2201      	movs	r2, #1
 800c514:	701a      	strb	r2, [r3, #0]
 800c516:	194b      	adds	r3, r1, r5
 800c518:	19db      	adds	r3, r3, r7
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	1c5a      	adds	r2, r3, #1
 800c51e:	1949      	adds	r1, r1, r5
 800c520:	19c9      	adds	r1, r1, r7
 800c522:	600a      	str	r2, [r1, #0]
 800c524:	183a      	adds	r2, r7, r0
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	7013      	strb	r3, [r2, #0]
 800c52a:	e02d      	b.n	800c588 <f_printf+0x110>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800c52c:	2173      	movs	r1, #115	; 0x73
 800c52e:	187b      	adds	r3, r7, r1
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b2d      	cmp	r3, #45	; 0x2d
 800c534:	d128      	bne.n	800c588 <f_printf+0x110>
				f = 2; c = *fmt++;
 800c536:	2387      	movs	r3, #135	; 0x87
 800c538:	18fb      	adds	r3, r7, r3
 800c53a:	2202      	movs	r2, #2
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	2094      	movs	r0, #148	; 0x94
 800c540:	2408      	movs	r4, #8
 800c542:	1903      	adds	r3, r0, r4
 800c544:	19db      	adds	r3, r3, r7
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	1900      	adds	r0, r0, r4
 800c54c:	19c0      	adds	r0, r0, r7
 800c54e:	6002      	str	r2, [r0, #0]
 800c550:	187a      	adds	r2, r7, r1
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	7013      	strb	r3, [r2, #0]
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800c556:	e017      	b.n	800c588 <f_printf+0x110>
			w = w * 10 + c - '0';
 800c558:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c55a:	0013      	movs	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	189b      	adds	r3, r3, r2
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	001a      	movs	r2, r3
 800c564:	2173      	movs	r1, #115	; 0x73
 800c566:	187b      	adds	r3, r7, r1
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	18d3      	adds	r3, r2, r3
 800c56c:	3b30      	subs	r3, #48	; 0x30
 800c56e:	67bb      	str	r3, [r7, #120]	; 0x78
			c = *fmt++;
 800c570:	2094      	movs	r0, #148	; 0x94
 800c572:	2408      	movs	r4, #8
 800c574:	1903      	adds	r3, r0, r4
 800c576:	19db      	adds	r3, r3, r7
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	1900      	adds	r0, r0, r4
 800c57e:	19c0      	adds	r0, r0, r7
 800c580:	6002      	str	r2, [r0, #0]
 800c582:	187a      	adds	r2, r7, r1
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	7013      	strb	r3, [r2, #0]
		while (IsDigit(c)) {		/* Precision */
 800c588:	2273      	movs	r2, #115	; 0x73
 800c58a:	18bb      	adds	r3, r7, r2
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b2f      	cmp	r3, #47	; 0x2f
 800c590:	d903      	bls.n	800c59a <f_printf+0x122>
 800c592:	18bb      	adds	r3, r7, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b39      	cmp	r3, #57	; 0x39
 800c598:	d9de      	bls.n	800c558 <f_printf+0xe0>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800c59a:	2273      	movs	r2, #115	; 0x73
 800c59c:	18bb      	adds	r3, r7, r2
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b6c      	cmp	r3, #108	; 0x6c
 800c5a2:	d003      	beq.n	800c5ac <f_printf+0x134>
 800c5a4:	18bb      	adds	r3, r7, r2
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b4c      	cmp	r3, #76	; 0x4c
 800c5aa:	d113      	bne.n	800c5d4 <f_printf+0x15c>
			f |= 4; c = *fmt++;
 800c5ac:	2287      	movs	r2, #135	; 0x87
 800c5ae:	18bb      	adds	r3, r7, r2
 800c5b0:	18ba      	adds	r2, r7, r2
 800c5b2:	7812      	ldrb	r2, [r2, #0]
 800c5b4:	2104      	movs	r1, #4
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	701a      	strb	r2, [r3, #0]
 800c5ba:	2194      	movs	r1, #148	; 0x94
 800c5bc:	2008      	movs	r0, #8
 800c5be:	180b      	adds	r3, r1, r0
 800c5c0:	19db      	adds	r3, r3, r7
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	1809      	adds	r1, r1, r0
 800c5c8:	19c9      	adds	r1, r1, r7
 800c5ca:	600a      	str	r2, [r1, #0]
 800c5cc:	2273      	movs	r2, #115	; 0x73
 800c5ce:	18ba      	adds	r2, r7, r2
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;
 800c5d4:	2273      	movs	r2, #115	; 0x73
 800c5d6:	18bb      	adds	r3, r7, r2
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d100      	bne.n	800c5e0 <f_printf+0x168>
 800c5de:	e152      	b.n	800c886 <f_printf+0x40e>
		d = c;
 800c5e0:	2172      	movs	r1, #114	; 0x72
 800c5e2:	187b      	adds	r3, r7, r1
 800c5e4:	18ba      	adds	r2, r7, r2
 800c5e6:	7812      	ldrb	r2, [r2, #0]
 800c5e8:	701a      	strb	r2, [r3, #0]
		if (IsLower(d)) d -= 0x20;
 800c5ea:	187b      	adds	r3, r7, r1
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2b60      	cmp	r3, #96	; 0x60
 800c5f0:	d908      	bls.n	800c604 <f_printf+0x18c>
 800c5f2:	187b      	adds	r3, r7, r1
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	2b7a      	cmp	r3, #122	; 0x7a
 800c5f8:	d804      	bhi.n	800c604 <f_printf+0x18c>
 800c5fa:	187b      	adds	r3, r7, r1
 800c5fc:	187a      	adds	r2, r7, r1
 800c5fe:	7812      	ldrb	r2, [r2, #0]
 800c600:	3a20      	subs	r2, #32
 800c602:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800c604:	2372      	movs	r3, #114	; 0x72
 800c606:	18fb      	adds	r3, r7, r3
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	3b42      	subs	r3, #66	; 0x42
 800c60c:	2b16      	cmp	r3, #22
 800c60e:	d865      	bhi.n	800c6dc <f_printf+0x264>
 800c610:	009a      	lsls	r2, r3, #2
 800c612:	4bb0      	ldr	r3, [pc, #704]	; (800c8d4 <f_printf+0x45c>)
 800c614:	18d3      	adds	r3, r2, r3
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800c61a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c61c:	1d1a      	adds	r2, r3, #4
 800c61e:	66ba      	str	r2, [r7, #104]	; 0x68
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	66fb      	str	r3, [r7, #108]	; 0x6c
			for (j = 0; p[j]; j++) ;
 800c624:	2300      	movs	r3, #0
 800c626:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c628:	e002      	b.n	800c630 <f_printf+0x1b8>
 800c62a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c62c:	3301      	adds	r3, #1
 800c62e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c630:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c634:	18d3      	adds	r3, r2, r3
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f6      	bne.n	800c62a <f_printf+0x1b2>
			if (!(f & 2)) {
 800c63c:	2387      	movs	r3, #135	; 0x87
 800c63e:	18fb      	adds	r3, r7, r3
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2202      	movs	r2, #2
 800c644:	4013      	ands	r3, r2
 800c646:	d117      	bne.n	800c678 <f_printf+0x200>
				while (j++ < w) putc_bfd(&pb, ' ');
 800c648:	e005      	b.n	800c656 <f_printf+0x1de>
 800c64a:	2308      	movs	r3, #8
 800c64c:	18fb      	adds	r3, r7, r3
 800c64e:	2120      	movs	r1, #32
 800c650:	0018      	movs	r0, r3
 800c652:	f7ff fecf 	bl	800c3f4 <putc_bfd>
 800c656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c65c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c65e:	429a      	cmp	r2, r3
 800c660:	d8f3      	bhi.n	800c64a <f_printf+0x1d2>
			}
			while (*p) putc_bfd(&pb, *p++);
 800c662:	e009      	b.n	800c678 <f_printf+0x200>
 800c664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c666:	1c5a      	adds	r2, r3, #1
 800c668:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c66a:	781a      	ldrb	r2, [r3, #0]
 800c66c:	2308      	movs	r3, #8
 800c66e:	18fb      	adds	r3, r7, r3
 800c670:	0011      	movs	r1, r2
 800c672:	0018      	movs	r0, r3
 800c674:	f7ff febe 	bl	800c3f4 <putc_bfd>
 800c678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1f1      	bne.n	800c664 <f_printf+0x1ec>
			while (j++ < w) putc_bfd(&pb, ' ');
 800c680:	e005      	b.n	800c68e <f_printf+0x216>
 800c682:	2308      	movs	r3, #8
 800c684:	18fb      	adds	r3, r7, r3
 800c686:	2120      	movs	r1, #32
 800c688:	0018      	movs	r0, r3
 800c68a:	f7ff feb3 	bl	800c3f4 <putc_bfd>
 800c68e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c696:	429a      	cmp	r2, r3
 800c698:	d8f3      	bhi.n	800c682 <f_printf+0x20a>
			continue;
 800c69a:	e0f1      	b.n	800c880 <f_printf+0x408>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800c69c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c69e:	1d1a      	adds	r2, r3, #4
 800c6a0:	66ba      	str	r2, [r7, #104]	; 0x68
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	2308      	movs	r3, #8
 800c6a8:	18fb      	adds	r3, r7, r3
 800c6aa:	0011      	movs	r1, r2
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	f7ff fea1 	bl	800c3f4 <putc_bfd>
 800c6b2:	e0e5      	b.n	800c880 <f_printf+0x408>
		case 'B' :					/* Binary */
			r = 2; break;
 800c6b4:	2386      	movs	r3, #134	; 0x86
 800c6b6:	18fb      	adds	r3, r7, r3
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	e018      	b.n	800c6f0 <f_printf+0x278>
		case 'O' :					/* Octal */
			r = 8; break;
 800c6be:	2386      	movs	r3, #134	; 0x86
 800c6c0:	18fb      	adds	r3, r7, r3
 800c6c2:	2208      	movs	r2, #8
 800c6c4:	701a      	strb	r2, [r3, #0]
 800c6c6:	e013      	b.n	800c6f0 <f_printf+0x278>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800c6c8:	2386      	movs	r3, #134	; 0x86
 800c6ca:	18fb      	adds	r3, r7, r3
 800c6cc:	220a      	movs	r2, #10
 800c6ce:	701a      	strb	r2, [r3, #0]
 800c6d0:	e00e      	b.n	800c6f0 <f_printf+0x278>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800c6d2:	2386      	movs	r3, #134	; 0x86
 800c6d4:	18fb      	adds	r3, r7, r3
 800c6d6:	2210      	movs	r2, #16
 800c6d8:	701a      	strb	r2, [r3, #0]
 800c6da:	e009      	b.n	800c6f0 <f_printf+0x278>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800c6dc:	2373      	movs	r3, #115	; 0x73
 800c6de:	18fb      	adds	r3, r7, r3
 800c6e0:	781a      	ldrb	r2, [r3, #0]
 800c6e2:	2308      	movs	r3, #8
 800c6e4:	18fb      	adds	r3, r7, r3
 800c6e6:	0011      	movs	r1, r2
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	f7ff fe83 	bl	800c3f4 <putc_bfd>
 800c6ee:	e0c7      	b.n	800c880 <f_printf+0x408>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800c6f0:	2387      	movs	r3, #135	; 0x87
 800c6f2:	18fb      	adds	r3, r7, r3
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	2204      	movs	r2, #4
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	d004      	beq.n	800c706 <f_printf+0x28e>
 800c6fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6fe:	1d1a      	adds	r2, r3, #4
 800c700:	66ba      	str	r2, [r7, #104]	; 0x68
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	e00d      	b.n	800c722 <f_printf+0x2aa>
 800c706:	2372      	movs	r3, #114	; 0x72
 800c708:	18fb      	adds	r3, r7, r3
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b44      	cmp	r3, #68	; 0x44
 800c70e:	d104      	bne.n	800c71a <f_printf+0x2a2>
 800c710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c712:	1d1a      	adds	r2, r3, #4
 800c714:	66ba      	str	r2, [r7, #104]	; 0x68
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	e003      	b.n	800c722 <f_printf+0x2aa>
 800c71a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c71c:	1d1a      	adds	r2, r3, #4
 800c71e:	66ba      	str	r2, [r7, #104]	; 0x68
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	677b      	str	r3, [r7, #116]	; 0x74
		if (d == 'D' && (v & 0x80000000)) {
 800c724:	2372      	movs	r3, #114	; 0x72
 800c726:	18fb      	adds	r3, r7, r3
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	2b44      	cmp	r3, #68	; 0x44
 800c72c:	d10c      	bne.n	800c748 <f_printf+0x2d0>
 800c72e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c730:	2b00      	cmp	r3, #0
 800c732:	da09      	bge.n	800c748 <f_printf+0x2d0>
			v = 0 - v;
 800c734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c736:	425b      	negs	r3, r3
 800c738:	677b      	str	r3, [r7, #116]	; 0x74
			f |= 8;
 800c73a:	2287      	movs	r2, #135	; 0x87
 800c73c:	18bb      	adds	r3, r7, r2
 800c73e:	18ba      	adds	r2, r7, r2
 800c740:	7812      	ldrb	r2, [r2, #0]
 800c742:	2108      	movs	r1, #8
 800c744:	430a      	orrs	r2, r1
 800c746:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	2280      	movs	r2, #128	; 0x80
 800c74c:	18ba      	adds	r2, r7, r2
 800c74e:	6013      	str	r3, [r2, #0]
		do {
			d = (TCHAR)(v % r); v /= r;
 800c750:	2486      	movs	r4, #134	; 0x86
 800c752:	193b      	adds	r3, r7, r4
 800c754:	781a      	ldrb	r2, [r3, #0]
 800c756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c758:	0011      	movs	r1, r2
 800c75a:	0018      	movs	r0, r3
 800c75c:	f7f3 fd7e 	bl	800025c <__aeabi_uidivmod>
 800c760:	000b      	movs	r3, r1
 800c762:	001a      	movs	r2, r3
 800c764:	2572      	movs	r5, #114	; 0x72
 800c766:	197b      	adds	r3, r7, r5
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	193b      	adds	r3, r7, r4
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	0019      	movs	r1, r3
 800c770:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c772:	f7f3 fced 	bl	8000150 <__udivsi3>
 800c776:	0003      	movs	r3, r0
 800c778:	677b      	str	r3, [r7, #116]	; 0x74
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800c77a:	197b      	adds	r3, r7, r5
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b09      	cmp	r3, #9
 800c780:	d90d      	bls.n	800c79e <f_printf+0x326>
 800c782:	2373      	movs	r3, #115	; 0x73
 800c784:	18fb      	adds	r3, r7, r3
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b78      	cmp	r3, #120	; 0x78
 800c78a:	d101      	bne.n	800c790 <f_printf+0x318>
 800c78c:	2327      	movs	r3, #39	; 0x27
 800c78e:	e000      	b.n	800c792 <f_printf+0x31a>
 800c790:	2307      	movs	r3, #7
 800c792:	2172      	movs	r1, #114	; 0x72
 800c794:	187a      	adds	r2, r7, r1
 800c796:	1879      	adds	r1, r7, r1
 800c798:	7809      	ldrb	r1, [r1, #0]
 800c79a:	185b      	adds	r3, r3, r1
 800c79c:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800c79e:	2080      	movs	r0, #128	; 0x80
 800c7a0:	183b      	adds	r3, r7, r0
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	1839      	adds	r1, r7, r0
 800c7a8:	600a      	str	r2, [r1, #0]
 800c7aa:	2272      	movs	r2, #114	; 0x72
 800c7ac:	18ba      	adds	r2, r7, r2
 800c7ae:	7812      	ldrb	r2, [r2, #0]
 800c7b0:	3230      	adds	r2, #48	; 0x30
 800c7b2:	b2d1      	uxtb	r1, r2
 800c7b4:	2254      	movs	r2, #84	; 0x54
 800c7b6:	18ba      	adds	r2, r7, r2
 800c7b8:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof s / sizeof s[0]);
 800c7ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d003      	beq.n	800c7c8 <f_printf+0x350>
 800c7c0:	183b      	adds	r3, r7, r0
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b0f      	cmp	r3, #15
 800c7c6:	d9c3      	bls.n	800c750 <f_printf+0x2d8>
		if (f & 8) s[i++] = '-';
 800c7c8:	2387      	movs	r3, #135	; 0x87
 800c7ca:	18fb      	adds	r3, r7, r3
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2208      	movs	r2, #8
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	d009      	beq.n	800c7e8 <f_printf+0x370>
 800c7d4:	2180      	movs	r1, #128	; 0x80
 800c7d6:	187b      	adds	r3, r7, r1
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	1879      	adds	r1, r7, r1
 800c7de:	600a      	str	r2, [r1, #0]
 800c7e0:	2254      	movs	r2, #84	; 0x54
 800c7e2:	18ba      	adds	r2, r7, r2
 800c7e4:	212d      	movs	r1, #45	; 0x2d
 800c7e6:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 800c7e8:	2380      	movs	r3, #128	; 0x80
 800c7ea:	18fb      	adds	r3, r7, r3
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7f0:	2387      	movs	r3, #135	; 0x87
 800c7f2:	18fb      	adds	r3, r7, r3
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	d001      	beq.n	800c800 <f_printf+0x388>
 800c7fc:	2230      	movs	r2, #48	; 0x30
 800c7fe:	e000      	b.n	800c802 <f_printf+0x38a>
 800c800:	2220      	movs	r2, #32
 800c802:	2372      	movs	r3, #114	; 0x72
 800c804:	18fb      	adds	r3, r7, r3
 800c806:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800c808:	e008      	b.n	800c81c <f_printf+0x3a4>
 800c80a:	2372      	movs	r3, #114	; 0x72
 800c80c:	18fb      	adds	r3, r7, r3
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	2308      	movs	r3, #8
 800c812:	18fb      	adds	r3, r7, r3
 800c814:	0011      	movs	r1, r2
 800c816:	0018      	movs	r0, r3
 800c818:	f7ff fdec 	bl	800c3f4 <putc_bfd>
 800c81c:	2387      	movs	r3, #135	; 0x87
 800c81e:	18fb      	adds	r3, r7, r3
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	2202      	movs	r2, #2
 800c824:	4013      	ands	r3, r2
 800c826:	d105      	bne.n	800c834 <f_printf+0x3bc>
 800c828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c82e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c830:	429a      	cmp	r2, r3
 800c832:	d8ea      	bhi.n	800c80a <f_printf+0x392>
		do putc_bfd(&pb, s[--i]); while (i);
 800c834:	2480      	movs	r4, #128	; 0x80
 800c836:	193b      	adds	r3, r7, r4
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3b01      	subs	r3, #1
 800c83c:	193a      	adds	r2, r7, r4
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	2354      	movs	r3, #84	; 0x54
 800c842:	18fa      	adds	r2, r7, r3
 800c844:	193b      	adds	r3, r7, r4
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	18d3      	adds	r3, r2, r3
 800c84a:	781a      	ldrb	r2, [r3, #0]
 800c84c:	2308      	movs	r3, #8
 800c84e:	18fb      	adds	r3, r7, r3
 800c850:	0011      	movs	r1, r2
 800c852:	0018      	movs	r0, r3
 800c854:	f7ff fdce 	bl	800c3f4 <putc_bfd>
 800c858:	193b      	adds	r3, r7, r4
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e9      	bne.n	800c834 <f_printf+0x3bc>
		while (j++ < w) putc_bfd(&pb, d);
 800c860:	e008      	b.n	800c874 <f_printf+0x3fc>
 800c862:	2372      	movs	r3, #114	; 0x72
 800c864:	18fb      	adds	r3, r7, r3
 800c866:	781a      	ldrb	r2, [r3, #0]
 800c868:	2308      	movs	r3, #8
 800c86a:	18fb      	adds	r3, r7, r3
 800c86c:	0011      	movs	r1, r2
 800c86e:	0018      	movs	r0, r3
 800c870:	f7ff fdc0 	bl	800c3f4 <putc_bfd>
 800c874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c87a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d8f0      	bhi.n	800c862 <f_printf+0x3ea>
		c = *fmt++;
 800c880:	e60f      	b.n	800c4a2 <f_printf+0x2a>
		if (c == 0) break;			/* End of string */
 800c882:	46c0      	nop			; (mov r8, r8)
 800c884:	e000      	b.n	800c888 <f_printf+0x410>
		if (!c) break;
 800c886:	46c0      	nop			; (mov r8, r8)
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800c888:	2508      	movs	r5, #8
 800c88a:	197b      	adds	r3, r7, r5
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	db17      	blt.n	800c8c2 <f_printf+0x44a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800c892:	197b      	adds	r3, r7, r5
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	197b      	adds	r3, r7, r5
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	001c      	movs	r4, r3
 800c89c:	2364      	movs	r3, #100	; 0x64
 800c89e:	18fa      	adds	r2, r7, r3
 800c8a0:	197b      	adds	r3, r7, r5
 800c8a2:	330c      	adds	r3, #12
 800c8a4:	0019      	movs	r1, r3
 800c8a6:	0013      	movs	r3, r2
 800c8a8:	0022      	movs	r2, r4
 800c8aa:	f7ff f9bf 	bl	800bc2c <f_write>
 800c8ae:	1e03      	subs	r3, r0, #0
 800c8b0:	d107      	bne.n	800c8c2 <f_printf+0x44a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800c8b2:	197b      	adds	r3, r7, r5
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d102      	bne.n	800c8c2 <f_printf+0x44a>
 800c8bc:	197b      	adds	r3, r7, r5
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	e001      	b.n	800c8c6 <f_printf+0x44e>
	return EOF;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	425b      	negs	r3, r3
}
 800c8c6:	0018      	movs	r0, r3
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	b023      	add	sp, #140	; 0x8c
 800c8cc:	bcb0      	pop	{r4, r5, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	b003      	add	sp, #12
 800c8d2:	4718      	bx	r3
 800c8d4:	08012c08 	.word	0x08012c08

0800c8d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c8d8:	b590      	push	{r4, r7, lr}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	1dfb      	adds	r3, r7, #7
 800c8e4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800c8e6:	2417      	movs	r4, #23
 800c8e8:	193b      	adds	r3, r7, r4
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800c8ee:	2016      	movs	r0, #22
 800c8f0:	183b      	adds	r3, r7, r0
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 800c8f6:	4b21      	ldr	r3, [pc, #132]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c8f8:	7a5b      	ldrb	r3, [r3, #9]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d836      	bhi.n	800c96e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c900:	4b1e      	ldr	r3, [pc, #120]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c902:	7a5b      	ldrb	r3, [r3, #9]
 800c904:	b2db      	uxtb	r3, r3
 800c906:	001a      	movs	r2, r3
 800c908:	4b1c      	ldr	r3, [pc, #112]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c90a:	2100      	movs	r1, #0
 800c90c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c90e:	4b1b      	ldr	r3, [pc, #108]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c910:	7a5b      	ldrb	r3, [r3, #9]
 800c912:	b2db      	uxtb	r3, r3
 800c914:	4a19      	ldr	r2, [pc, #100]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	18d3      	adds	r3, r2, r3
 800c91a:	3304      	adds	r3, #4
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 800c920:	4b16      	ldr	r3, [pc, #88]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c922:	7a5b      	ldrb	r3, [r3, #9]
 800c924:	b2db      	uxtb	r3, r3
 800c926:	001a      	movs	r2, r3
 800c928:	4b14      	ldr	r3, [pc, #80]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c92a:	189b      	adds	r3, r3, r2
 800c92c:	1dfa      	adds	r2, r7, #7
 800c92e:	7812      	ldrb	r2, [r2, #0]
 800c930:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c932:	4b12      	ldr	r3, [pc, #72]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c934:	7a5b      	ldrb	r3, [r3, #9]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	b2d1      	uxtb	r1, r2
 800c93c:	4a0f      	ldr	r2, [pc, #60]	; (800c97c <FATFS_LinkDriverEx+0xa4>)
 800c93e:	7251      	strb	r1, [r2, #9]
 800c940:	183a      	adds	r2, r7, r0
 800c942:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800c944:	183b      	adds	r3, r7, r0
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	3330      	adds	r3, #48	; 0x30
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	3301      	adds	r3, #1
 800c954:	223a      	movs	r2, #58	; 0x3a
 800c956:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	3302      	adds	r3, #2
 800c95c:	222f      	movs	r2, #47	; 0x2f
 800c95e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	3303      	adds	r3, #3
 800c964:	2200      	movs	r2, #0
 800c966:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c968:	193b      	adds	r3, r7, r4
 800c96a:	2200      	movs	r2, #0
 800c96c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800c96e:	2317      	movs	r3, #23
 800c970:	18fb      	adds	r3, r7, r3
 800c972:	781b      	ldrb	r3, [r3, #0]
}
 800c974:	0018      	movs	r0, r3
 800c976:	46bd      	mov	sp, r7
 800c978:	b007      	add	sp, #28
 800c97a:	bd90      	pop	{r4, r7, pc}
 800c97c:	20002728 	.word	0x20002728

0800c980 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	0018      	movs	r0, r3
 800c992:	f7ff ffa1 	bl	800c8d8 <FATFS_LinkDriverEx>
 800c996:	0003      	movs	r3, r0
}
 800c998:	0018      	movs	r0, r3
 800c99a:	46bd      	mov	sp, r7
 800c99c:	b002      	add	sp, #8
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <BME280_Init>:
struct BME280_temperature_data_struct Temperature_Data;
struct BME280_humidity_data_struct Humidity_Data;


HAL_StatusTypeDef BME280_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	b5b0      	push	{r4, r5, r7, lr}
 800c9a4:	b086      	sub	sp, #24
 800c9a6:	af04      	add	r7, sp, #16
 800c9a8:	2518      	movs	r5, #24
 800c9aa:	197c      	adds	r4, r7, r5
 800c9ac:	6020      	str	r0, [r4, #0]
 800c9ae:	6061      	str	r1, [r4, #4]
 800c9b0:	60a2      	str	r2, [r4, #8]
 800c9b2:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t data;

	// RESET
	data = 0xB6;
 800c9b4:	1dbb      	adds	r3, r7, #6
 800c9b6:	22b6      	movs	r2, #182	; 0xb6
 800c9b8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_reset, 1, &data, 1, Timeout);
 800c9ba:	234c      	movs	r3, #76	; 0x4c
 800c9bc:	195b      	adds	r3, r3, r5
 800c9be:	19db      	adds	r3, r3, r7
 800c9c0:	881b      	ldrh	r3, [r3, #0]
 800c9c2:	1dfc      	adds	r4, r7, #7
 800c9c4:	1978      	adds	r0, r7, r5
 800c9c6:	9302      	str	r3, [sp, #8]
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	9301      	str	r3, [sp, #4]
 800c9cc:	1dbb      	adds	r3, r7, #6
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	22e0      	movs	r2, #224	; 0xe0
 800c9d4:	21ec      	movs	r1, #236	; 0xec
 800c9d6:	f7f8 f9dd 	bl	8004d94 <HAL_I2C_Mem_Write>
 800c9da:	0003      	movs	r3, r0
 800c9dc:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800c9de:	1dfb      	adds	r3, r7, #7
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <BME280_Init+0x4c>
		return status;
 800c9e6:	1dfb      	adds	r3, r7, #7
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	e051      	b.n	800ca90 <BME280_Init+0xf0>

	// Config data
	data = 0b10000000;
 800c9ec:	1dbb      	adds	r3, r7, #6
 800c9ee:	2280      	movs	r2, #128	; 0x80
 800c9f0:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_config, 1, &data, 1, Timeout);
 800c9f2:	234c      	movs	r3, #76	; 0x4c
 800c9f4:	2218      	movs	r2, #24
 800c9f6:	189b      	adds	r3, r3, r2
 800c9f8:	19db      	adds	r3, r3, r7
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	1dfc      	adds	r4, r7, #7
 800c9fe:	18b8      	adds	r0, r7, r2
 800ca00:	9302      	str	r3, [sp, #8]
 800ca02:	2301      	movs	r3, #1
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	1dbb      	adds	r3, r7, #6
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	22f5      	movs	r2, #245	; 0xf5
 800ca0e:	21ec      	movs	r1, #236	; 0xec
 800ca10:	f7f8 f9c0 	bl	8004d94 <HAL_I2C_Mem_Write>
 800ca14:	0003      	movs	r3, r0
 800ca16:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800ca18:	1dfb      	adds	r3, r7, #7
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <BME280_Init+0x86>
		return status;
 800ca20:	1dfb      	adds	r3, r7, #7
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	e034      	b.n	800ca90 <BME280_Init+0xf0>

	// Humidity measure settings
	data = 0b00000011;
 800ca26:	1dbb      	adds	r3, r7, #6
 800ca28:	2203      	movs	r2, #3
 800ca2a:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_hum, 1, &data, 1, Timeout);
 800ca2c:	234c      	movs	r3, #76	; 0x4c
 800ca2e:	2218      	movs	r2, #24
 800ca30:	189b      	adds	r3, r3, r2
 800ca32:	19db      	adds	r3, r3, r7
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	1dfc      	adds	r4, r7, #7
 800ca38:	18b8      	adds	r0, r7, r2
 800ca3a:	9302      	str	r3, [sp, #8]
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	1dbb      	adds	r3, r7, #6
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	2301      	movs	r3, #1
 800ca46:	22f2      	movs	r2, #242	; 0xf2
 800ca48:	21ec      	movs	r1, #236	; 0xec
 800ca4a:	f7f8 f9a3 	bl	8004d94 <HAL_I2C_Mem_Write>
 800ca4e:	0003      	movs	r3, r0
 800ca50:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800ca52:	1dfb      	adds	r3, r7, #7
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <BME280_Init+0xc0>
		return status;
 800ca5a:	1dfb      	adds	r3, r7, #7
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	e017      	b.n	800ca90 <BME280_Init+0xf0>

	// Temperature/Pressure measure settings
	data = 0b10001111;
 800ca60:	1dbb      	adds	r3, r7, #6
 800ca62:	228f      	movs	r2, #143	; 0x8f
 800ca64:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
 800ca66:	234c      	movs	r3, #76	; 0x4c
 800ca68:	2218      	movs	r2, #24
 800ca6a:	189b      	adds	r3, r3, r2
 800ca6c:	19db      	adds	r3, r3, r7
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	1dfc      	adds	r4, r7, #7
 800ca72:	18b8      	adds	r0, r7, r2
 800ca74:	9302      	str	r3, [sp, #8]
 800ca76:	2301      	movs	r3, #1
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	1dbb      	adds	r3, r7, #6
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	2301      	movs	r3, #1
 800ca80:	22f4      	movs	r2, #244	; 0xf4
 800ca82:	21ec      	movs	r1, #236	; 0xec
 800ca84:	f7f8 f986 	bl	8004d94 <HAL_I2C_Mem_Write>
 800ca88:	0003      	movs	r3, r0
 800ca8a:	7023      	strb	r3, [r4, #0]
	return status;
 800ca8c:	1dfb      	adds	r3, r7, #7
 800ca8e:	781b      	ldrb	r3, [r3, #0]
}
 800ca90:	0018      	movs	r0, r3
 800ca92:	46bd      	mov	sp, r7
 800ca94:	b002      	add	sp, #8
 800ca96:	bcb0      	pop	{r4, r5, r7}
 800ca98:	bc08      	pop	{r3}
 800ca9a:	b004      	add	sp, #16
 800ca9c:	4718      	bx	r3

0800ca9e <BME280_Get_ID>:


HAL_StatusTypeDef BME280_Get_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 800ca9e:	b084      	sub	sp, #16
 800caa0:	b5b0      	push	{r4, r5, r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af04      	add	r7, sp, #16
 800caa6:	2510      	movs	r5, #16
 800caa8:	197c      	adds	r4, r7, r5
 800caaa:	6020      	str	r0, [r4, #0]
 800caac:	6061      	str	r1, [r4, #4]
 800caae:	60a2      	str	r2, [r4, #8]
 800cab0:	60e3      	str	r3, [r4, #12]
	return HAL_I2C_Mem_Read(&handle, BME280_address, BME280_ID, 1, ptr_ID, 1, Timeout);
 800cab2:	2350      	movs	r3, #80	; 0x50
 800cab4:	002a      	movs	r2, r5
 800cab6:	189b      	adds	r3, r3, r2
 800cab8:	19db      	adds	r3, r3, r7
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	18b8      	adds	r0, r7, r2
 800cabe:	9302      	str	r3, [sp, #8]
 800cac0:	2301      	movs	r3, #1
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	2301      	movs	r3, #1
 800caca:	22d0      	movs	r2, #208	; 0xd0
 800cacc:	21ec      	movs	r1, #236	; 0xec
 800cace:	f7f8 fa8f 	bl	8004ff0 <HAL_I2C_Mem_Read>
 800cad2:	0003      	movs	r3, r0
}
 800cad4:	0018      	movs	r0, r3
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bcb0      	pop	{r4, r5, r7}
 800cada:	bc08      	pop	{r3}
 800cadc:	b004      	add	sp, #16
 800cade:	4718      	bx	r3

0800cae0 <BME280_Calib_Read>:


HAL_StatusTypeDef BME280_Calib_Read(I2C_HandleTypeDef handle, BME280_Calib_Data_struct *Calib_data, uint16_t Timeout)
{
 800cae0:	b084      	sub	sp, #16
 800cae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae4:	b091      	sub	sp, #68	; 0x44
 800cae6:	af04      	add	r7, sp, #16
 800cae8:	2540      	movs	r5, #64	; 0x40
 800caea:	2408      	movs	r4, #8
 800caec:	192e      	adds	r6, r5, r4
 800caee:	19f4      	adds	r4, r6, r7
 800caf0:	6020      	str	r0, [r4, #0]
 800caf2:	6061      	str	r1, [r4, #4]
 800caf4:	60a2      	str	r2, [r4, #8]
 800caf6:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t calib0[26];
	uint8_t calib1[16];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib1, 1, calib0, 26, Timeout);
 800caf8:	2350      	movs	r3, #80	; 0x50
 800cafa:	195b      	adds	r3, r3, r5
 800cafc:	2108      	movs	r1, #8
 800cafe:	468c      	mov	ip, r1
 800cb00:	44bc      	add	ip, r7
 800cb02:	4463      	add	r3, ip
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	262f      	movs	r6, #47	; 0x2f
 800cb08:	19bc      	adds	r4, r7, r6
 800cb0a:	2208      	movs	r2, #8
 800cb0c:	18a9      	adds	r1, r5, r2
 800cb0e:	19c8      	adds	r0, r1, r7
 800cb10:	9302      	str	r3, [sp, #8]
 800cb12:	231a      	movs	r3, #26
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	2314      	movs	r3, #20
 800cb18:	18fb      	adds	r3, r7, r3
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	2288      	movs	r2, #136	; 0x88
 800cb20:	21ec      	movs	r1, #236	; 0xec
 800cb22:	f7f8 fa65 	bl	8004ff0 <HAL_I2C_Mem_Read>
 800cb26:	0003      	movs	r3, r0
 800cb28:	7023      	strb	r3, [r4, #0]
	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib2, 1, calib1, 16, Timeout);
 800cb2a:	2350      	movs	r3, #80	; 0x50
 800cb2c:	195b      	adds	r3, r3, r5
 800cb2e:	2108      	movs	r1, #8
 800cb30:	468c      	mov	ip, r1
 800cb32:	44bc      	add	ip, r7
 800cb34:	4463      	add	r3, ip
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	19bc      	adds	r4, r7, r6
 800cb3a:	2208      	movs	r2, #8
 800cb3c:	18aa      	adds	r2, r5, r2
 800cb3e:	19d0      	adds	r0, r2, r7
 800cb40:	9302      	str	r3, [sp, #8]
 800cb42:	2310      	movs	r3, #16
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	1d3b      	adds	r3, r7, #4
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	22e1      	movs	r2, #225	; 0xe1
 800cb4e:	21ec      	movs	r1, #236	; 0xec
 800cb50:	f7f8 fa4e 	bl	8004ff0 <HAL_I2C_Mem_Read>
 800cb54:	0003      	movs	r3, r0
 800cb56:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800cb58:	19bb      	adds	r3, r7, r6
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <BME280_Calib_Read+0x86>
		return status;
 800cb60:	19bb      	adds	r3, r7, r6
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	e193      	b.n	800ce8e <BME280_Calib_Read+0x3ae>

	Calib_data->dig_T1 = calib0[0];
 800cb66:	2014      	movs	r0, #20
 800cb68:	183b      	adds	r3, r7, r0
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	218c      	movs	r1, #140	; 0x8c
 800cb70:	2408      	movs	r4, #8
 800cb72:	190b      	adds	r3, r1, r4
 800cb74:	19db      	adds	r3, r3, r7
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	801a      	strh	r2, [r3, #0]
	Calib_data->dig_T1 += calib0[1] << 8;
 800cb7a:	190b      	adds	r3, r1, r4
 800cb7c:	19db      	adds	r3, r3, r7
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	881a      	ldrh	r2, [r3, #0]
 800cb82:	183b      	adds	r3, r7, r0
 800cb84:	785b      	ldrb	r3, [r3, #1]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	021b      	lsls	r3, r3, #8
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	18d3      	adds	r3, r2, r3
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	190b      	adds	r3, r1, r4
 800cb92:	19db      	adds	r3, r3, r7
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	801a      	strh	r2, [r3, #0]

	Calib_data->dig_T2 = calib0[2];
 800cb98:	183b      	adds	r3, r7, r0
 800cb9a:	789b      	ldrb	r3, [r3, #2]
 800cb9c:	b21a      	sxth	r2, r3
 800cb9e:	190b      	adds	r3, r1, r4
 800cba0:	19db      	adds	r3, r3, r7
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	805a      	strh	r2, [r3, #2]
	Calib_data->dig_T2 += calib0[3] << 8;
 800cba6:	190b      	adds	r3, r1, r4
 800cba8:	19db      	adds	r3, r3, r7
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2202      	movs	r2, #2
 800cbae:	5e9b      	ldrsh	r3, [r3, r2]
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	183b      	adds	r3, r7, r0
 800cbb4:	78db      	ldrb	r3, [r3, #3]
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	021b      	lsls	r3, r3, #8
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	18d3      	adds	r3, r2, r3
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	b21a      	sxth	r2, r3
 800cbc2:	190b      	adds	r3, r1, r4
 800cbc4:	19db      	adds	r3, r3, r7
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	805a      	strh	r2, [r3, #2]

	Calib_data->dig_T3 = calib0[4];
 800cbca:	183b      	adds	r3, r7, r0
 800cbcc:	791b      	ldrb	r3, [r3, #4]
 800cbce:	b21a      	sxth	r2, r3
 800cbd0:	190b      	adds	r3, r1, r4
 800cbd2:	19db      	adds	r3, r3, r7
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	809a      	strh	r2, [r3, #4]
	Calib_data->dig_T3 += calib0[5] << 8;
 800cbd8:	190b      	adds	r3, r1, r4
 800cbda:	19db      	adds	r3, r3, r7
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2204      	movs	r2, #4
 800cbe0:	5e9b      	ldrsh	r3, [r3, r2]
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	183b      	adds	r3, r7, r0
 800cbe6:	795b      	ldrb	r3, [r3, #5]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	18d3      	adds	r3, r2, r3
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	b21a      	sxth	r2, r3
 800cbf4:	190b      	adds	r3, r1, r4
 800cbf6:	19db      	adds	r3, r3, r7
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	809a      	strh	r2, [r3, #4]

	Calib_data->dig_P1 = calib0[6];
 800cbfc:	183b      	adds	r3, r7, r0
 800cbfe:	799b      	ldrb	r3, [r3, #6]
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	190b      	adds	r3, r1, r4
 800cc04:	19db      	adds	r3, r3, r7
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	80da      	strh	r2, [r3, #6]
	Calib_data->dig_P1 += calib0[7] << 8;
 800cc0a:	190b      	adds	r3, r1, r4
 800cc0c:	19db      	adds	r3, r3, r7
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	88da      	ldrh	r2, [r3, #6]
 800cc12:	183b      	adds	r3, r7, r0
 800cc14:	79db      	ldrb	r3, [r3, #7]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	021b      	lsls	r3, r3, #8
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	18d3      	adds	r3, r2, r3
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	190b      	adds	r3, r1, r4
 800cc22:	19db      	adds	r3, r3, r7
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	80da      	strh	r2, [r3, #6]

	Calib_data->dig_P2 = calib0[8];
 800cc28:	183b      	adds	r3, r7, r0
 800cc2a:	7a1b      	ldrb	r3, [r3, #8]
 800cc2c:	b21a      	sxth	r2, r3
 800cc2e:	190b      	adds	r3, r1, r4
 800cc30:	19db      	adds	r3, r3, r7
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	811a      	strh	r2, [r3, #8]
	Calib_data->dig_P2 += calib0[9] << 8;
 800cc36:	190b      	adds	r3, r1, r4
 800cc38:	19db      	adds	r3, r3, r7
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2208      	movs	r2, #8
 800cc3e:	5e9b      	ldrsh	r3, [r3, r2]
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	183b      	adds	r3, r7, r0
 800cc44:	7a5b      	ldrb	r3, [r3, #9]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	021b      	lsls	r3, r3, #8
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	18d3      	adds	r3, r2, r3
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	b21a      	sxth	r2, r3
 800cc52:	190b      	adds	r3, r1, r4
 800cc54:	19db      	adds	r3, r3, r7
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	811a      	strh	r2, [r3, #8]

	Calib_data->dig_P3 = calib0[10];
 800cc5a:	183b      	adds	r3, r7, r0
 800cc5c:	7a9b      	ldrb	r3, [r3, #10]
 800cc5e:	b21a      	sxth	r2, r3
 800cc60:	190b      	adds	r3, r1, r4
 800cc62:	19db      	adds	r3, r3, r7
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	815a      	strh	r2, [r3, #10]
	Calib_data->dig_P3 += calib0[11] << 8;
 800cc68:	190b      	adds	r3, r1, r4
 800cc6a:	19db      	adds	r3, r3, r7
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	220a      	movs	r2, #10
 800cc70:	5e9b      	ldrsh	r3, [r3, r2]
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	183b      	adds	r3, r7, r0
 800cc76:	7adb      	ldrb	r3, [r3, #11]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	18d3      	adds	r3, r2, r3
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	b21a      	sxth	r2, r3
 800cc84:	190b      	adds	r3, r1, r4
 800cc86:	19db      	adds	r3, r3, r7
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	815a      	strh	r2, [r3, #10]

	Calib_data->dig_P4 = calib0[12];
 800cc8c:	183b      	adds	r3, r7, r0
 800cc8e:	7b1b      	ldrb	r3, [r3, #12]
 800cc90:	b21a      	sxth	r2, r3
 800cc92:	190b      	adds	r3, r1, r4
 800cc94:	19db      	adds	r3, r3, r7
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	819a      	strh	r2, [r3, #12]
	Calib_data->dig_P4 += calib0[13] << 8;
 800cc9a:	190b      	adds	r3, r1, r4
 800cc9c:	19db      	adds	r3, r3, r7
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	220c      	movs	r2, #12
 800cca2:	5e9b      	ldrsh	r3, [r3, r2]
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	183b      	adds	r3, r7, r0
 800cca8:	7b5b      	ldrb	r3, [r3, #13]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	18d3      	adds	r3, r2, r3
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	b21a      	sxth	r2, r3
 800ccb6:	190b      	adds	r3, r1, r4
 800ccb8:	19db      	adds	r3, r3, r7
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	819a      	strh	r2, [r3, #12]

	Calib_data->dig_P5 = calib0[14];
 800ccbe:	183b      	adds	r3, r7, r0
 800ccc0:	7b9b      	ldrb	r3, [r3, #14]
 800ccc2:	b21a      	sxth	r2, r3
 800ccc4:	190b      	adds	r3, r1, r4
 800ccc6:	19db      	adds	r3, r3, r7
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	81da      	strh	r2, [r3, #14]
	Calib_data->dig_P5 += calib0[15] << 8;
 800cccc:	190b      	adds	r3, r1, r4
 800ccce:	19db      	adds	r3, r3, r7
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	220e      	movs	r2, #14
 800ccd4:	5e9b      	ldrsh	r3, [r3, r2]
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	183b      	adds	r3, r7, r0
 800ccda:	7bdb      	ldrb	r3, [r3, #15]
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	021b      	lsls	r3, r3, #8
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	18d3      	adds	r3, r2, r3
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	b21a      	sxth	r2, r3
 800cce8:	190b      	adds	r3, r1, r4
 800ccea:	19db      	adds	r3, r3, r7
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	81da      	strh	r2, [r3, #14]

	Calib_data->dig_P6 = calib0[16];
 800ccf0:	183b      	adds	r3, r7, r0
 800ccf2:	7c1b      	ldrb	r3, [r3, #16]
 800ccf4:	b21a      	sxth	r2, r3
 800ccf6:	190b      	adds	r3, r1, r4
 800ccf8:	19db      	adds	r3, r3, r7
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	821a      	strh	r2, [r3, #16]
	Calib_data->dig_P6 += calib0[17] << 8;
 800ccfe:	190b      	adds	r3, r1, r4
 800cd00:	19db      	adds	r3, r3, r7
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2210      	movs	r2, #16
 800cd06:	5e9b      	ldrsh	r3, [r3, r2]
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	183b      	adds	r3, r7, r0
 800cd0c:	7c5b      	ldrb	r3, [r3, #17]
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	021b      	lsls	r3, r3, #8
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	18d3      	adds	r3, r2, r3
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	b21a      	sxth	r2, r3
 800cd1a:	190b      	adds	r3, r1, r4
 800cd1c:	19db      	adds	r3, r3, r7
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	821a      	strh	r2, [r3, #16]

	Calib_data->dig_P7 = calib0[18];
 800cd22:	183b      	adds	r3, r7, r0
 800cd24:	7c9b      	ldrb	r3, [r3, #18]
 800cd26:	b21a      	sxth	r2, r3
 800cd28:	190b      	adds	r3, r1, r4
 800cd2a:	19db      	adds	r3, r3, r7
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	825a      	strh	r2, [r3, #18]
	Calib_data->dig_P7 += calib0[19] << 8;
 800cd30:	190b      	adds	r3, r1, r4
 800cd32:	19db      	adds	r3, r3, r7
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2212      	movs	r2, #18
 800cd38:	5e9b      	ldrsh	r3, [r3, r2]
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	183b      	adds	r3, r7, r0
 800cd3e:	7cdb      	ldrb	r3, [r3, #19]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	021b      	lsls	r3, r3, #8
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	18d3      	adds	r3, r2, r3
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	b21a      	sxth	r2, r3
 800cd4c:	190b      	adds	r3, r1, r4
 800cd4e:	19db      	adds	r3, r3, r7
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	825a      	strh	r2, [r3, #18]

	Calib_data->dig_P8 = calib0[20];
 800cd54:	183b      	adds	r3, r7, r0
 800cd56:	7d1b      	ldrb	r3, [r3, #20]
 800cd58:	b21a      	sxth	r2, r3
 800cd5a:	190b      	adds	r3, r1, r4
 800cd5c:	19db      	adds	r3, r3, r7
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	829a      	strh	r2, [r3, #20]
	Calib_data->dig_P8 += calib0[21] << 8;
 800cd62:	190b      	adds	r3, r1, r4
 800cd64:	19db      	adds	r3, r3, r7
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2214      	movs	r2, #20
 800cd6a:	5e9b      	ldrsh	r3, [r3, r2]
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	183b      	adds	r3, r7, r0
 800cd70:	7d5b      	ldrb	r3, [r3, #21]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	021b      	lsls	r3, r3, #8
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	18d3      	adds	r3, r2, r3
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	b21a      	sxth	r2, r3
 800cd7e:	190b      	adds	r3, r1, r4
 800cd80:	19db      	adds	r3, r3, r7
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	829a      	strh	r2, [r3, #20]

	Calib_data->dig_P9 = calib0[22];
 800cd86:	183b      	adds	r3, r7, r0
 800cd88:	7d9b      	ldrb	r3, [r3, #22]
 800cd8a:	b21a      	sxth	r2, r3
 800cd8c:	190b      	adds	r3, r1, r4
 800cd8e:	19db      	adds	r3, r3, r7
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	82da      	strh	r2, [r3, #22]
	Calib_data->dig_P9 += calib0[23] << 8;
 800cd94:	190b      	adds	r3, r1, r4
 800cd96:	19db      	adds	r3, r3, r7
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2216      	movs	r2, #22
 800cd9c:	5e9b      	ldrsh	r3, [r3, r2]
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	183b      	adds	r3, r7, r0
 800cda2:	7ddb      	ldrb	r3, [r3, #23]
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	021b      	lsls	r3, r3, #8
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	18d3      	adds	r3, r2, r3
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	b21a      	sxth	r2, r3
 800cdb0:	190b      	adds	r3, r1, r4
 800cdb2:	19db      	adds	r3, r3, r7
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	82da      	strh	r2, [r3, #22]

	Calib_data->dig_H1 = calib0[25];
 800cdb8:	183b      	adds	r3, r7, r0
 800cdba:	7e5a      	ldrb	r2, [r3, #25]
 800cdbc:	0020      	movs	r0, r4
 800cdbe:	190b      	adds	r3, r1, r4
 800cdc0:	19db      	adds	r3, r3, r7
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	761a      	strb	r2, [r3, #24]

	Calib_data->dig_H2 = calib1[0];
 800cdc6:	1d3b      	adds	r3, r7, #4
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	b21a      	sxth	r2, r3
 800cdcc:	180b      	adds	r3, r1, r0
 800cdce:	19db      	adds	r3, r3, r7
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	835a      	strh	r2, [r3, #26]
	Calib_data->dig_H2 += calib1[1] << 8;
 800cdd4:	180b      	adds	r3, r1, r0
 800cdd6:	19db      	adds	r3, r3, r7
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	221a      	movs	r2, #26
 800cddc:	5e9b      	ldrsh	r3, [r3, r2]
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	1d3b      	adds	r3, r7, #4
 800cde2:	785b      	ldrb	r3, [r3, #1]
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	021b      	lsls	r3, r3, #8
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	18d3      	adds	r3, r2, r3
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	b21a      	sxth	r2, r3
 800cdf0:	180b      	adds	r3, r1, r0
 800cdf2:	19db      	adds	r3, r3, r7
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	835a      	strh	r2, [r3, #26]

	Calib_data->dig_H3 = calib1[2];
 800cdf8:	1d3b      	adds	r3, r7, #4
 800cdfa:	789a      	ldrb	r2, [r3, #2]
 800cdfc:	180b      	adds	r3, r1, r0
 800cdfe:	19db      	adds	r3, r3, r7
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	771a      	strb	r2, [r3, #28]

	Calib_data->dig_H4 = calib1[3] << 4;
 800ce04:	1d3b      	adds	r3, r7, #4
 800ce06:	78db      	ldrb	r3, [r3, #3]
 800ce08:	011b      	lsls	r3, r3, #4
 800ce0a:	b21a      	sxth	r2, r3
 800ce0c:	0004      	movs	r4, r0
 800ce0e:	190b      	adds	r3, r1, r4
 800ce10:	19db      	adds	r3, r3, r7
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	83da      	strh	r2, [r3, #30]
	Calib_data->dig_H4 += calib1[4] & 0b00001111;
 800ce16:	0008      	movs	r0, r1
 800ce18:	190b      	adds	r3, r1, r4
 800ce1a:	19db      	adds	r3, r3, r7
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	221e      	movs	r2, #30
 800ce20:	5e9b      	ldrsh	r3, [r3, r2]
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	1d3b      	adds	r3, r7, #4
 800ce26:	791b      	ldrb	r3, [r3, #4]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	210f      	movs	r1, #15
 800ce2c:	400b      	ands	r3, r1
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	18d3      	adds	r3, r2, r3
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	b21a      	sxth	r2, r3
 800ce36:	1903      	adds	r3, r0, r4
 800ce38:	19db      	adds	r3, r3, r7
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	83da      	strh	r2, [r3, #30]

	Calib_data->dig_H5 = calib1[4] >> 4;
 800ce3e:	1d3b      	adds	r3, r7, #4
 800ce40:	791b      	ldrb	r3, [r3, #4]
 800ce42:	091b      	lsrs	r3, r3, #4
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	b21a      	sxth	r2, r3
 800ce48:	1903      	adds	r3, r0, r4
 800ce4a:	19db      	adds	r3, r3, r7
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	841a      	strh	r2, [r3, #32]
	Calib_data->dig_H5 += calib1[5] << 4;
 800ce50:	0001      	movs	r1, r0
 800ce52:	1903      	adds	r3, r0, r4
 800ce54:	19db      	adds	r3, r3, r7
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2220      	movs	r2, #32
 800ce5a:	5e9b      	ldrsh	r3, [r3, r2]
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	1d3b      	adds	r3, r7, #4
 800ce60:	795b      	ldrb	r3, [r3, #5]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	011b      	lsls	r3, r3, #4
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	18d3      	adds	r3, r2, r3
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	b21a      	sxth	r2, r3
 800ce6e:	0008      	movs	r0, r1
 800ce70:	190b      	adds	r3, r1, r4
 800ce72:	19db      	adds	r3, r3, r7
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	841a      	strh	r2, [r3, #32]

	Calib_data->dig_H6 = calib1[6];
 800ce78:	1d3b      	adds	r3, r7, #4
 800ce7a:	799b      	ldrb	r3, [r3, #6]
 800ce7c:	b259      	sxtb	r1, r3
 800ce7e:	1903      	adds	r3, r0, r4
 800ce80:	19db      	adds	r3, r3, r7
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2222      	movs	r2, #34	; 0x22
 800ce86:	5499      	strb	r1, [r3, r2]

	return status;
 800ce88:	232f      	movs	r3, #47	; 0x2f
 800ce8a:	18fb      	adds	r3, r7, r3
 800ce8c:	781b      	ldrb	r3, [r3, #0]
}
 800ce8e:	0018      	movs	r0, r3
 800ce90:	46bd      	mov	sp, r7
 800ce92:	b00d      	add	sp, #52	; 0x34
 800ce94:	bcf0      	pop	{r4, r5, r6, r7}
 800ce96:	bc08      	pop	{r3}
 800ce98:	b004      	add	sp, #16
 800ce9a:	4718      	bx	r3

0800ce9c <BME280_Get_All>:


HAL_StatusTypeDef BME280_Get_All(I2C_HandleTypeDef handle, uint16_t Timeout){
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	b5b0      	push	{r4, r5, r7, lr}
 800cea0:	b088      	sub	sp, #32
 800cea2:	af04      	add	r7, sp, #16
 800cea4:	2520      	movs	r5, #32
 800cea6:	197c      	adds	r4, r7, r5
 800cea8:	6020      	str	r0, [r4, #0]
 800ceaa:	6061      	str	r1, [r4, #4]
 800ceac:	60a2      	str	r2, [r4, #8]
 800ceae:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t measure[8];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_press, 1, measure, 8, Timeout);
 800ceb0:	234c      	movs	r3, #76	; 0x4c
 800ceb2:	002a      	movs	r2, r5
 800ceb4:	189b      	adds	r3, r3, r2
 800ceb6:	19db      	adds	r3, r3, r7
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	250f      	movs	r5, #15
 800cebc:	197c      	adds	r4, r7, r5
 800cebe:	18b8      	adds	r0, r7, r2
 800cec0:	9302      	str	r3, [sp, #8]
 800cec2:	2308      	movs	r3, #8
 800cec4:	9301      	str	r3, [sp, #4]
 800cec6:	1d3b      	adds	r3, r7, #4
 800cec8:	9300      	str	r3, [sp, #0]
 800ceca:	2301      	movs	r3, #1
 800cecc:	22f7      	movs	r2, #247	; 0xf7
 800cece:	21ec      	movs	r1, #236	; 0xec
 800ced0:	f7f8 f88e 	bl	8004ff0 <HAL_I2C_Mem_Read>
 800ced4:	0003      	movs	r3, r0
 800ced6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800ced8:	197b      	adds	r3, r7, r5
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <BME280_Get_All+0x4a>
		return status;
 800cee0:	197b      	adds	r3, r7, r5
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	e046      	b.n	800cf74 <BME280_Get_All+0xd8>

	Pressure_Data.press_msb = measure[0];
 800cee6:	1d3b      	adds	r3, r7, #4
 800cee8:	781a      	ldrb	r2, [r3, #0]
 800ceea:	4b26      	ldr	r3, [pc, #152]	; (800cf84 <BME280_Get_All+0xe8>)
 800ceec:	701a      	strb	r2, [r3, #0]
	Pressure_Data.press_lsb = measure[1];
 800ceee:	1d3b      	adds	r3, r7, #4
 800cef0:	785a      	ldrb	r2, [r3, #1]
 800cef2:	4b24      	ldr	r3, [pc, #144]	; (800cf84 <BME280_Get_All+0xe8>)
 800cef4:	705a      	strb	r2, [r3, #1]
	Pressure_Data.press_xlsb = measure[2];
 800cef6:	1d3b      	adds	r3, r7, #4
 800cef8:	789a      	ldrb	r2, [r3, #2]
 800cefa:	4b22      	ldr	r3, [pc, #136]	; (800cf84 <BME280_Get_All+0xe8>)
 800cefc:	709a      	strb	r2, [r3, #2]

	Temperature_Data.temp_msb = measure[3];
 800cefe:	1d3b      	adds	r3, r7, #4
 800cf00:	78da      	ldrb	r2, [r3, #3]
 800cf02:	4b21      	ldr	r3, [pc, #132]	; (800cf88 <BME280_Get_All+0xec>)
 800cf04:	701a      	strb	r2, [r3, #0]
	Temperature_Data.temp_lsb = measure[4];
 800cf06:	1d3b      	adds	r3, r7, #4
 800cf08:	791a      	ldrb	r2, [r3, #4]
 800cf0a:	4b1f      	ldr	r3, [pc, #124]	; (800cf88 <BME280_Get_All+0xec>)
 800cf0c:	705a      	strb	r2, [r3, #1]
	Temperature_Data.temp_xlsb = measure[5];
 800cf0e:	1d3b      	adds	r3, r7, #4
 800cf10:	795a      	ldrb	r2, [r3, #5]
 800cf12:	4b1d      	ldr	r3, [pc, #116]	; (800cf88 <BME280_Get_All+0xec>)
 800cf14:	709a      	strb	r2, [r3, #2]

	Humidity_Data.hum_msb = measure[6];
 800cf16:	1d3b      	adds	r3, r7, #4
 800cf18:	799a      	ldrb	r2, [r3, #6]
 800cf1a:	4b1c      	ldr	r3, [pc, #112]	; (800cf8c <BME280_Get_All+0xf0>)
 800cf1c:	701a      	strb	r2, [r3, #0]
	Humidity_Data.hum_lsb = measure[7];
 800cf1e:	1d3b      	adds	r3, r7, #4
 800cf20:	79da      	ldrb	r2, [r3, #7]
 800cf22:	4b1a      	ldr	r3, [pc, #104]	; (800cf8c <BME280_Get_All+0xf0>)
 800cf24:	705a      	strb	r2, [r3, #1]

	Temperature_Data.ADC_T = ((uint32_t)Temperature_Data.temp_msb << 12) | ((uint32_t)Temperature_Data.temp_lsb << 4) | ((uint32_t)Temperature_Data.temp_xlsb >> 4);
 800cf26:	4b18      	ldr	r3, [pc, #96]	; (800cf88 <BME280_Get_All+0xec>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	031a      	lsls	r2, r3, #12
 800cf2c:	4b16      	ldr	r3, [pc, #88]	; (800cf88 <BME280_Get_All+0xec>)
 800cf2e:	785b      	ldrb	r3, [r3, #1]
 800cf30:	011b      	lsls	r3, r3, #4
 800cf32:	4313      	orrs	r3, r2
 800cf34:	4a14      	ldr	r2, [pc, #80]	; (800cf88 <BME280_Get_All+0xec>)
 800cf36:	7892      	ldrb	r2, [r2, #2]
 800cf38:	0912      	lsrs	r2, r2, #4
 800cf3a:	b2d2      	uxtb	r2, r2
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	4b12      	ldr	r3, [pc, #72]	; (800cf88 <BME280_Get_All+0xec>)
 800cf40:	605a      	str	r2, [r3, #4]
	Pressure_Data.ADC_P = ((uint32_t)Pressure_Data.press_msb << 12) | ((uint32_t)Pressure_Data.press_lsb << 4) | ((uint32_t)Pressure_Data.press_xlsb >> 4);
 800cf42:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <BME280_Get_All+0xe8>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	031a      	lsls	r2, r3, #12
 800cf48:	4b0e      	ldr	r3, [pc, #56]	; (800cf84 <BME280_Get_All+0xe8>)
 800cf4a:	785b      	ldrb	r3, [r3, #1]
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	4a0c      	ldr	r2, [pc, #48]	; (800cf84 <BME280_Get_All+0xe8>)
 800cf52:	7892      	ldrb	r2, [r2, #2]
 800cf54:	0912      	lsrs	r2, r2, #4
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	431a      	orrs	r2, r3
 800cf5a:	4b0a      	ldr	r3, [pc, #40]	; (800cf84 <BME280_Get_All+0xe8>)
 800cf5c:	605a      	str	r2, [r3, #4]
	Humidity_Data.ADC_H = ((uint32_t)Humidity_Data.hum_msb << 8) | ((uint32_t)Humidity_Data.hum_lsb);
 800cf5e:	4b0b      	ldr	r3, [pc, #44]	; (800cf8c <BME280_Get_All+0xf0>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	021b      	lsls	r3, r3, #8
 800cf64:	4a09      	ldr	r2, [pc, #36]	; (800cf8c <BME280_Get_All+0xf0>)
 800cf66:	7852      	ldrb	r2, [r2, #1]
 800cf68:	431a      	orrs	r2, r3
 800cf6a:	4b08      	ldr	r3, [pc, #32]	; (800cf8c <BME280_Get_All+0xf0>)
 800cf6c:	605a      	str	r2, [r3, #4]
	return status;
 800cf6e:	230f      	movs	r3, #15
 800cf70:	18fb      	adds	r3, r7, r3
 800cf72:	781b      	ldrb	r3, [r3, #0]
}
 800cf74:	0018      	movs	r0, r3
 800cf76:	46bd      	mov	sp, r7
 800cf78:	b004      	add	sp, #16
 800cf7a:	bcb0      	pop	{r4, r5, r7}
 800cf7c:	bc08      	pop	{r3}
 800cf7e:	b004      	add	sp, #16
 800cf80:	4718      	bx	r3
 800cf82:	46c0      	nop			; (mov r8, r8)
 800cf84:	20002738 	.word	0x20002738
 800cf88:	20002740 	.word	0x20002740
 800cf8c:	20002748 	.word	0x20002748

0800cf90 <BME280_T_Double>:
	return status;
}


double BME280_T_Double (BME280_Calib_Data_struct *Calib_data)
{
 800cf90:	b5b0      	push	{r4, r5, r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
//	BME280_Temperature(handle);
	double var1, var2, t;

	var1 = (((double) Temperature_Data.ADC_T)/16384.0 - ((double) Calib_data->dig_T1)/1024.0) * ((double) Calib_data->dig_T2);
 800cf98:	4b57      	ldr	r3, [pc, #348]	; (800d0f8 <BME280_T_Double+0x168>)
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	0018      	movs	r0, r3
 800cf9e:	f7f5 ff0d 	bl	8002dbc <__aeabi_ui2d>
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	4b55      	ldr	r3, [pc, #340]	; (800d0fc <BME280_T_Double+0x16c>)
 800cfa6:	f7f4 fc85 	bl	80018b4 <__aeabi_ddiv>
 800cfaa:	0002      	movs	r2, r0
 800cfac:	000b      	movs	r3, r1
 800cfae:	0014      	movs	r4, r2
 800cfb0:	001d      	movs	r5, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	0018      	movs	r0, r3
 800cfb8:	f7f5 ff00 	bl	8002dbc <__aeabi_ui2d>
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4b50      	ldr	r3, [pc, #320]	; (800d100 <BME280_T_Double+0x170>)
 800cfc0:	f7f4 fc78 	bl	80018b4 <__aeabi_ddiv>
 800cfc4:	0002      	movs	r2, r0
 800cfc6:	000b      	movs	r3, r1
 800cfc8:	0020      	movs	r0, r4
 800cfca:	0029      	movs	r1, r5
 800cfcc:	f7f5 fae0 	bl	8002590 <__aeabi_dsub>
 800cfd0:	0002      	movs	r2, r0
 800cfd2:	000b      	movs	r3, r1
 800cfd4:	0014      	movs	r4, r2
 800cfd6:	001d      	movs	r5, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	5e9b      	ldrsh	r3, [r3, r2]
 800cfde:	0018      	movs	r0, r3
 800cfe0:	f7f5 febc 	bl	8002d5c <__aeabi_i2d>
 800cfe4:	0002      	movs	r2, r0
 800cfe6:	000b      	movs	r3, r1
 800cfe8:	0020      	movs	r0, r4
 800cfea:	0029      	movs	r1, r5
 800cfec:	f7f5 f864 	bl	80020b8 <__aeabi_dmul>
 800cff0:	0002      	movs	r2, r0
 800cff2:	000b      	movs	r3, r1
 800cff4:	623a      	str	r2, [r7, #32]
 800cff6:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = ((((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0) * (((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0)) * ((double) Calib_data->dig_T3);
 800cff8:	4b3f      	ldr	r3, [pc, #252]	; (800d0f8 <BME280_T_Double+0x168>)
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	0018      	movs	r0, r3
 800cffe:	f7f5 fedd 	bl	8002dbc <__aeabi_ui2d>
 800d002:	2200      	movs	r2, #0
 800d004:	2382      	movs	r3, #130	; 0x82
 800d006:	05db      	lsls	r3, r3, #23
 800d008:	f7f4 fc54 	bl	80018b4 <__aeabi_ddiv>
 800d00c:	0002      	movs	r2, r0
 800d00e:	000b      	movs	r3, r1
 800d010:	0014      	movs	r4, r2
 800d012:	001d      	movs	r5, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	0018      	movs	r0, r3
 800d01a:	f7f5 fecf 	bl	8002dbc <__aeabi_ui2d>
 800d01e:	2200      	movs	r2, #0
 800d020:	4b38      	ldr	r3, [pc, #224]	; (800d104 <BME280_T_Double+0x174>)
 800d022:	f7f4 fc47 	bl	80018b4 <__aeabi_ddiv>
 800d026:	0002      	movs	r2, r0
 800d028:	000b      	movs	r3, r1
 800d02a:	0020      	movs	r0, r4
 800d02c:	0029      	movs	r1, r5
 800d02e:	f7f5 faaf 	bl	8002590 <__aeabi_dsub>
 800d032:	0002      	movs	r2, r0
 800d034:	000b      	movs	r3, r1
 800d036:	0014      	movs	r4, r2
 800d038:	001d      	movs	r5, r3
 800d03a:	4b2f      	ldr	r3, [pc, #188]	; (800d0f8 <BME280_T_Double+0x168>)
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	0018      	movs	r0, r3
 800d040:	f7f5 febc 	bl	8002dbc <__aeabi_ui2d>
 800d044:	2200      	movs	r2, #0
 800d046:	2382      	movs	r3, #130	; 0x82
 800d048:	05db      	lsls	r3, r3, #23
 800d04a:	f7f4 fc33 	bl	80018b4 <__aeabi_ddiv>
 800d04e:	0002      	movs	r2, r0
 800d050:	000b      	movs	r3, r1
 800d052:	603a      	str	r2, [r7, #0]
 800d054:	607b      	str	r3, [r7, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	0018      	movs	r0, r3
 800d05c:	f7f5 feae 	bl	8002dbc <__aeabi_ui2d>
 800d060:	2200      	movs	r2, #0
 800d062:	4b28      	ldr	r3, [pc, #160]	; (800d104 <BME280_T_Double+0x174>)
 800d064:	f7f4 fc26 	bl	80018b4 <__aeabi_ddiv>
 800d068:	0002      	movs	r2, r0
 800d06a:	000b      	movs	r3, r1
 800d06c:	6838      	ldr	r0, [r7, #0]
 800d06e:	6879      	ldr	r1, [r7, #4]
 800d070:	f7f5 fa8e 	bl	8002590 <__aeabi_dsub>
 800d074:	0002      	movs	r2, r0
 800d076:	000b      	movs	r3, r1
 800d078:	0020      	movs	r0, r4
 800d07a:	0029      	movs	r1, r5
 800d07c:	f7f5 f81c 	bl	80020b8 <__aeabi_dmul>
 800d080:	0002      	movs	r2, r0
 800d082:	000b      	movs	r3, r1
 800d084:	0014      	movs	r4, r2
 800d086:	001d      	movs	r5, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2204      	movs	r2, #4
 800d08c:	5e9b      	ldrsh	r3, [r3, r2]
 800d08e:	0018      	movs	r0, r3
 800d090:	f7f5 fe64 	bl	8002d5c <__aeabi_i2d>
 800d094:	0002      	movs	r2, r0
 800d096:	000b      	movs	r3, r1
 800d098:	0020      	movs	r0, r4
 800d09a:	0029      	movs	r1, r5
 800d09c:	f7f5 f80c 	bl	80020b8 <__aeabi_dmul>
 800d0a0:	0002      	movs	r2, r0
 800d0a2:	000b      	movs	r3, r1
 800d0a4:	61ba      	str	r2, [r7, #24]
 800d0a6:	61fb      	str	r3, [r7, #28]

	t_fine =  (var1 + var2);
 800d0a8:	69ba      	ldr	r2, [r7, #24]
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	6a38      	ldr	r0, [r7, #32]
 800d0ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0b0:	f7f4 f8c4 	bl	800123c <__aeabi_dadd>
 800d0b4:	0002      	movs	r2, r0
 800d0b6:	000b      	movs	r3, r1
 800d0b8:	0010      	movs	r0, r2
 800d0ba:	0019      	movs	r1, r3
 800d0bc:	f7f5 fe18 	bl	8002cf0 <__aeabi_d2iz>
 800d0c0:	0002      	movs	r2, r0
 800d0c2:	4b11      	ldr	r3, [pc, #68]	; (800d108 <BME280_T_Double+0x178>)
 800d0c4:	601a      	str	r2, [r3, #0]
	t = (var1 + var2)/5120.0;
 800d0c6:	69ba      	ldr	r2, [r7, #24]
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	6a38      	ldr	r0, [r7, #32]
 800d0cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0ce:	f7f4 f8b5 	bl	800123c <__aeabi_dadd>
 800d0d2:	0002      	movs	r2, r0
 800d0d4:	000b      	movs	r3, r1
 800d0d6:	0010      	movs	r0, r2
 800d0d8:	0019      	movs	r1, r3
 800d0da:	2200      	movs	r2, #0
 800d0dc:	4b0b      	ldr	r3, [pc, #44]	; (800d10c <BME280_T_Double+0x17c>)
 800d0de:	f7f4 fbe9 	bl	80018b4 <__aeabi_ddiv>
 800d0e2:	0002      	movs	r2, r0
 800d0e4:	000b      	movs	r3, r1
 800d0e6:	613a      	str	r2, [r7, #16]
 800d0e8:	617b      	str	r3, [r7, #20]

	return t;
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	697b      	ldr	r3, [r7, #20]
}
 800d0ee:	0010      	movs	r0, r2
 800d0f0:	0019      	movs	r1, r3
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	b00a      	add	sp, #40	; 0x28
 800d0f6:	bdb0      	pop	{r4, r5, r7, pc}
 800d0f8:	20002740 	.word	0x20002740
 800d0fc:	40d00000 	.word	0x40d00000
 800d100:	40900000 	.word	0x40900000
 800d104:	40c00000 	.word	0x40c00000
 800d108:	20002734 	.word	0x20002734
 800d10c:	40b40000 	.word	0x40b40000

0800d110 <BME280_P_Double>:

double BME280_P_Double(BME280_Calib_Data_struct *Calib_data)
{
 800d110:	b5b0      	push	{r4, r5, r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
//	BME280_Pressure(handle);
	double var1, var2, p;

	var1 = ((double)t_fine/2.0) - 64000.0;
 800d118:	4bba      	ldr	r3, [pc, #744]	; (800d404 <BME280_P_Double+0x2f4>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	0018      	movs	r0, r3
 800d11e:	f7f5 fe1d 	bl	8002d5c <__aeabi_i2d>
 800d122:	2200      	movs	r2, #0
 800d124:	2380      	movs	r3, #128	; 0x80
 800d126:	05db      	lsls	r3, r3, #23
 800d128:	f7f4 fbc4 	bl	80018b4 <__aeabi_ddiv>
 800d12c:	0002      	movs	r2, r0
 800d12e:	000b      	movs	r3, r1
 800d130:	0010      	movs	r0, r2
 800d132:	0019      	movs	r1, r3
 800d134:	2200      	movs	r2, #0
 800d136:	4bb4      	ldr	r3, [pc, #720]	; (800d408 <BME280_P_Double+0x2f8>)
 800d138:	f7f5 fa2a 	bl	8002590 <__aeabi_dsub>
 800d13c:	0002      	movs	r2, r0
 800d13e:	000b      	movs	r3, r1
 800d140:	61ba      	str	r2, [r7, #24]
 800d142:	61fb      	str	r3, [r7, #28]
	var2 = var1 * var1 * ((double) Calib_data->dig_P6) / 32768.0;
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	69b8      	ldr	r0, [r7, #24]
 800d14a:	69f9      	ldr	r1, [r7, #28]
 800d14c:	f7f4 ffb4 	bl	80020b8 <__aeabi_dmul>
 800d150:	0002      	movs	r2, r0
 800d152:	000b      	movs	r3, r1
 800d154:	0014      	movs	r4, r2
 800d156:	001d      	movs	r5, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2210      	movs	r2, #16
 800d15c:	5e9b      	ldrsh	r3, [r3, r2]
 800d15e:	0018      	movs	r0, r3
 800d160:	f7f5 fdfc 	bl	8002d5c <__aeabi_i2d>
 800d164:	0002      	movs	r2, r0
 800d166:	000b      	movs	r3, r1
 800d168:	0020      	movs	r0, r4
 800d16a:	0029      	movs	r1, r5
 800d16c:	f7f4 ffa4 	bl	80020b8 <__aeabi_dmul>
 800d170:	0002      	movs	r2, r0
 800d172:	000b      	movs	r3, r1
 800d174:	0010      	movs	r0, r2
 800d176:	0019      	movs	r1, r3
 800d178:	2200      	movs	r2, #0
 800d17a:	4ba4      	ldr	r3, [pc, #656]	; (800d40c <BME280_P_Double+0x2fc>)
 800d17c:	f7f4 fb9a 	bl	80018b4 <__aeabi_ddiv>
 800d180:	0002      	movs	r2, r0
 800d182:	000b      	movs	r3, r1
 800d184:	613a      	str	r2, [r7, #16]
 800d186:	617b      	str	r3, [r7, #20]
	var2 = var2 + var1 + ((double) Calib_data->dig_P5) * 2.0;
 800d188:	69ba      	ldr	r2, [r7, #24]
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	6938      	ldr	r0, [r7, #16]
 800d18e:	6979      	ldr	r1, [r7, #20]
 800d190:	f7f4 f854 	bl	800123c <__aeabi_dadd>
 800d194:	0002      	movs	r2, r0
 800d196:	000b      	movs	r3, r1
 800d198:	0014      	movs	r4, r2
 800d19a:	001d      	movs	r5, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	220e      	movs	r2, #14
 800d1a0:	5e9b      	ldrsh	r3, [r3, r2]
 800d1a2:	0018      	movs	r0, r3
 800d1a4:	f7f5 fdda 	bl	8002d5c <__aeabi_i2d>
 800d1a8:	0002      	movs	r2, r0
 800d1aa:	000b      	movs	r3, r1
 800d1ac:	f7f4 f846 	bl	800123c <__aeabi_dadd>
 800d1b0:	0002      	movs	r2, r0
 800d1b2:	000b      	movs	r3, r1
 800d1b4:	0020      	movs	r0, r4
 800d1b6:	0029      	movs	r1, r5
 800d1b8:	f7f4 f840 	bl	800123c <__aeabi_dadd>
 800d1bc:	0002      	movs	r2, r0
 800d1be:	000b      	movs	r3, r1
 800d1c0:	613a      	str	r2, [r7, #16]
 800d1c2:	617b      	str	r3, [r7, #20]
	var2 = (var2/4.0) + (((double) Calib_data->dig_P4) * 65536.0);
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	4b92      	ldr	r3, [pc, #584]	; (800d410 <BME280_P_Double+0x300>)
 800d1c8:	6938      	ldr	r0, [r7, #16]
 800d1ca:	6979      	ldr	r1, [r7, #20]
 800d1cc:	f7f4 fb72 	bl	80018b4 <__aeabi_ddiv>
 800d1d0:	0002      	movs	r2, r0
 800d1d2:	000b      	movs	r3, r1
 800d1d4:	0014      	movs	r4, r2
 800d1d6:	001d      	movs	r5, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	220c      	movs	r2, #12
 800d1dc:	5e9b      	ldrsh	r3, [r3, r2]
 800d1de:	0018      	movs	r0, r3
 800d1e0:	f7f5 fdbc 	bl	8002d5c <__aeabi_i2d>
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	4b8b      	ldr	r3, [pc, #556]	; (800d414 <BME280_P_Double+0x304>)
 800d1e8:	f7f4 ff66 	bl	80020b8 <__aeabi_dmul>
 800d1ec:	0002      	movs	r2, r0
 800d1ee:	000b      	movs	r3, r1
 800d1f0:	0020      	movs	r0, r4
 800d1f2:	0029      	movs	r1, r5
 800d1f4:	f7f4 f822 	bl	800123c <__aeabi_dadd>
 800d1f8:	0002      	movs	r2, r0
 800d1fa:	000b      	movs	r3, r1
 800d1fc:	613a      	str	r2, [r7, #16]
 800d1fe:	617b      	str	r3, [r7, #20]
	var1 = (((double) Calib_data->dig_P3) * var1 * var1 / 524288.0 + ((double) Calib_data->dig_P2) * var1) / 524288.0;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	220a      	movs	r2, #10
 800d204:	5e9b      	ldrsh	r3, [r3, r2]
 800d206:	0018      	movs	r0, r3
 800d208:	f7f5 fda8 	bl	8002d5c <__aeabi_i2d>
 800d20c:	69ba      	ldr	r2, [r7, #24]
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	f7f4 ff52 	bl	80020b8 <__aeabi_dmul>
 800d214:	0002      	movs	r2, r0
 800d216:	000b      	movs	r3, r1
 800d218:	0010      	movs	r0, r2
 800d21a:	0019      	movs	r1, r3
 800d21c:	69ba      	ldr	r2, [r7, #24]
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	f7f4 ff4a 	bl	80020b8 <__aeabi_dmul>
 800d224:	0002      	movs	r2, r0
 800d226:	000b      	movs	r3, r1
 800d228:	0010      	movs	r0, r2
 800d22a:	0019      	movs	r1, r3
 800d22c:	2200      	movs	r2, #0
 800d22e:	4b7a      	ldr	r3, [pc, #488]	; (800d418 <BME280_P_Double+0x308>)
 800d230:	f7f4 fb40 	bl	80018b4 <__aeabi_ddiv>
 800d234:	0002      	movs	r2, r0
 800d236:	000b      	movs	r3, r1
 800d238:	0014      	movs	r4, r2
 800d23a:	001d      	movs	r5, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2208      	movs	r2, #8
 800d240:	5e9b      	ldrsh	r3, [r3, r2]
 800d242:	0018      	movs	r0, r3
 800d244:	f7f5 fd8a 	bl	8002d5c <__aeabi_i2d>
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	f7f4 ff34 	bl	80020b8 <__aeabi_dmul>
 800d250:	0002      	movs	r2, r0
 800d252:	000b      	movs	r3, r1
 800d254:	0020      	movs	r0, r4
 800d256:	0029      	movs	r1, r5
 800d258:	f7f3 fff0 	bl	800123c <__aeabi_dadd>
 800d25c:	0002      	movs	r2, r0
 800d25e:	000b      	movs	r3, r1
 800d260:	0010      	movs	r0, r2
 800d262:	0019      	movs	r1, r3
 800d264:	2200      	movs	r2, #0
 800d266:	4b6c      	ldr	r3, [pc, #432]	; (800d418 <BME280_P_Double+0x308>)
 800d268:	f7f4 fb24 	bl	80018b4 <__aeabi_ddiv>
 800d26c:	0002      	movs	r2, r0
 800d26e:	000b      	movs	r3, r1
 800d270:	61ba      	str	r2, [r7, #24]
 800d272:	61fb      	str	r3, [r7, #28]
	var1 = (1.0 + var1 / 32768.0)*((double) Calib_data->dig_P1);
 800d274:	2200      	movs	r2, #0
 800d276:	4b65      	ldr	r3, [pc, #404]	; (800d40c <BME280_P_Double+0x2fc>)
 800d278:	69b8      	ldr	r0, [r7, #24]
 800d27a:	69f9      	ldr	r1, [r7, #28]
 800d27c:	f7f4 fb1a 	bl	80018b4 <__aeabi_ddiv>
 800d280:	0002      	movs	r2, r0
 800d282:	000b      	movs	r3, r1
 800d284:	0010      	movs	r0, r2
 800d286:	0019      	movs	r1, r3
 800d288:	2200      	movs	r2, #0
 800d28a:	4b64      	ldr	r3, [pc, #400]	; (800d41c <BME280_P_Double+0x30c>)
 800d28c:	f7f3 ffd6 	bl	800123c <__aeabi_dadd>
 800d290:	0002      	movs	r2, r0
 800d292:	000b      	movs	r3, r1
 800d294:	0014      	movs	r4, r2
 800d296:	001d      	movs	r5, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	88db      	ldrh	r3, [r3, #6]
 800d29c:	0018      	movs	r0, r3
 800d29e:	f7f5 fd8d 	bl	8002dbc <__aeabi_ui2d>
 800d2a2:	0002      	movs	r2, r0
 800d2a4:	000b      	movs	r3, r1
 800d2a6:	0020      	movs	r0, r4
 800d2a8:	0029      	movs	r1, r5
 800d2aa:	f7f4 ff05 	bl	80020b8 <__aeabi_dmul>
 800d2ae:	0002      	movs	r2, r0
 800d2b0:	000b      	movs	r3, r1
 800d2b2:	61ba      	str	r2, [r7, #24]
 800d2b4:	61fb      	str	r3, [r7, #28]

	if (var1 == 0.0)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	69b8      	ldr	r0, [r7, #24]
 800d2bc:	69f9      	ldr	r1, [r7, #28]
 800d2be:	f7f3 f8cd 	bl	800045c <__aeabi_dcmpeq>
 800d2c2:	1e03      	subs	r3, r0, #0
 800d2c4:	d002      	beq.n	800d2cc <BME280_P_Double+0x1bc>
	{
		return 0; // avoid exception caused by division by zero
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	e096      	b.n	800d3fa <BME280_P_Double+0x2ea>
	}

	p = 1048576.0 - (double) Pressure_Data.ADC_P;
 800d2cc:	4b54      	ldr	r3, [pc, #336]	; (800d420 <BME280_P_Double+0x310>)
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	f7f5 fd73 	bl	8002dbc <__aeabi_ui2d>
 800d2d6:	0002      	movs	r2, r0
 800d2d8:	000b      	movs	r3, r1
 800d2da:	2000      	movs	r0, #0
 800d2dc:	4951      	ldr	r1, [pc, #324]	; (800d424 <BME280_P_Double+0x314>)
 800d2de:	f7f5 f957 	bl	8002590 <__aeabi_dsub>
 800d2e2:	0002      	movs	r2, r0
 800d2e4:	000b      	movs	r3, r1
 800d2e6:	60ba      	str	r2, [r7, #8]
 800d2e8:	60fb      	str	r3, [r7, #12]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	4b4e      	ldr	r3, [pc, #312]	; (800d428 <BME280_P_Double+0x318>)
 800d2ee:	6938      	ldr	r0, [r7, #16]
 800d2f0:	6979      	ldr	r1, [r7, #20]
 800d2f2:	f7f4 fadf 	bl	80018b4 <__aeabi_ddiv>
 800d2f6:	0002      	movs	r2, r0
 800d2f8:	000b      	movs	r3, r1
 800d2fa:	68b8      	ldr	r0, [r7, #8]
 800d2fc:	68f9      	ldr	r1, [r7, #12]
 800d2fe:	f7f5 f947 	bl	8002590 <__aeabi_dsub>
 800d302:	0002      	movs	r2, r0
 800d304:	000b      	movs	r3, r1
 800d306:	0010      	movs	r0, r2
 800d308:	0019      	movs	r1, r3
 800d30a:	2200      	movs	r2, #0
 800d30c:	4b47      	ldr	r3, [pc, #284]	; (800d42c <BME280_P_Double+0x31c>)
 800d30e:	f7f4 fed3 	bl	80020b8 <__aeabi_dmul>
 800d312:	0002      	movs	r2, r0
 800d314:	000b      	movs	r3, r1
 800d316:	0010      	movs	r0, r2
 800d318:	0019      	movs	r1, r3
 800d31a:	69ba      	ldr	r2, [r7, #24]
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	f7f4 fac9 	bl	80018b4 <__aeabi_ddiv>
 800d322:	0002      	movs	r2, r0
 800d324:	000b      	movs	r3, r1
 800d326:	60ba      	str	r2, [r7, #8]
 800d328:	60fb      	str	r3, [r7, #12]

	var1 = ((double) Calib_data->dig_P9) * p* p / 2147483648.0;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2216      	movs	r2, #22
 800d32e:	5e9b      	ldrsh	r3, [r3, r2]
 800d330:	0018      	movs	r0, r3
 800d332:	f7f5 fd13 	bl	8002d5c <__aeabi_i2d>
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f7f4 febd 	bl	80020b8 <__aeabi_dmul>
 800d33e:	0002      	movs	r2, r0
 800d340:	000b      	movs	r3, r1
 800d342:	0010      	movs	r0, r2
 800d344:	0019      	movs	r1, r3
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f7f4 feb5 	bl	80020b8 <__aeabi_dmul>
 800d34e:	0002      	movs	r2, r0
 800d350:	000b      	movs	r3, r1
 800d352:	0010      	movs	r0, r2
 800d354:	0019      	movs	r1, r3
 800d356:	2200      	movs	r2, #0
 800d358:	4b35      	ldr	r3, [pc, #212]	; (800d430 <BME280_P_Double+0x320>)
 800d35a:	f7f4 faab 	bl	80018b4 <__aeabi_ddiv>
 800d35e:	0002      	movs	r2, r0
 800d360:	000b      	movs	r3, r1
 800d362:	61ba      	str	r2, [r7, #24]
 800d364:	61fb      	str	r3, [r7, #28]
	var2 = p * ((double) Calib_data->dig_P8) / 32768.0;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2214      	movs	r2, #20
 800d36a:	5e9b      	ldrsh	r3, [r3, r2]
 800d36c:	0018      	movs	r0, r3
 800d36e:	f7f5 fcf5 	bl	8002d5c <__aeabi_i2d>
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f7f4 fe9f 	bl	80020b8 <__aeabi_dmul>
 800d37a:	0002      	movs	r2, r0
 800d37c:	000b      	movs	r3, r1
 800d37e:	0010      	movs	r0, r2
 800d380:	0019      	movs	r1, r3
 800d382:	2200      	movs	r2, #0
 800d384:	4b21      	ldr	r3, [pc, #132]	; (800d40c <BME280_P_Double+0x2fc>)
 800d386:	f7f4 fa95 	bl	80018b4 <__aeabi_ddiv>
 800d38a:	0002      	movs	r2, r0
 800d38c:	000b      	movs	r3, r1
 800d38e:	613a      	str	r2, [r7, #16]
 800d390:	617b      	str	r3, [r7, #20]

	p = p + (var1 + var2 + ((double) Calib_data->dig_P7)) / 16.0;
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	69b8      	ldr	r0, [r7, #24]
 800d398:	69f9      	ldr	r1, [r7, #28]
 800d39a:	f7f3 ff4f 	bl	800123c <__aeabi_dadd>
 800d39e:	0002      	movs	r2, r0
 800d3a0:	000b      	movs	r3, r1
 800d3a2:	0014      	movs	r4, r2
 800d3a4:	001d      	movs	r5, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2212      	movs	r2, #18
 800d3aa:	5e9b      	ldrsh	r3, [r3, r2]
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f7f5 fcd5 	bl	8002d5c <__aeabi_i2d>
 800d3b2:	0002      	movs	r2, r0
 800d3b4:	000b      	movs	r3, r1
 800d3b6:	0020      	movs	r0, r4
 800d3b8:	0029      	movs	r1, r5
 800d3ba:	f7f3 ff3f 	bl	800123c <__aeabi_dadd>
 800d3be:	0002      	movs	r2, r0
 800d3c0:	000b      	movs	r3, r1
 800d3c2:	0010      	movs	r0, r2
 800d3c4:	0019      	movs	r1, r3
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	4b1a      	ldr	r3, [pc, #104]	; (800d434 <BME280_P_Double+0x324>)
 800d3ca:	f7f4 fa73 	bl	80018b4 <__aeabi_ddiv>
 800d3ce:	0002      	movs	r2, r0
 800d3d0:	000b      	movs	r3, r1
 800d3d2:	68b8      	ldr	r0, [r7, #8]
 800d3d4:	68f9      	ldr	r1, [r7, #12]
 800d3d6:	f7f3 ff31 	bl	800123c <__aeabi_dadd>
 800d3da:	0002      	movs	r2, r0
 800d3dc:	000b      	movs	r3, r1
 800d3de:	60ba      	str	r2, [r7, #8]
 800d3e0:	60fb      	str	r3, [r7, #12]
	p = (p/1000);
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	4b14      	ldr	r3, [pc, #80]	; (800d438 <BME280_P_Double+0x328>)
 800d3e6:	68b8      	ldr	r0, [r7, #8]
 800d3e8:	68f9      	ldr	r1, [r7, #12]
 800d3ea:	f7f4 fa63 	bl	80018b4 <__aeabi_ddiv>
 800d3ee:	0002      	movs	r2, r0
 800d3f0:	000b      	movs	r3, r1
 800d3f2:	60ba      	str	r2, [r7, #8]
 800d3f4:	60fb      	str	r3, [r7, #12]

	return p;
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
}
 800d3fa:	0010      	movs	r0, r2
 800d3fc:	0019      	movs	r1, r3
 800d3fe:	46bd      	mov	sp, r7
 800d400:	b008      	add	sp, #32
 800d402:	bdb0      	pop	{r4, r5, r7, pc}
 800d404:	20002734 	.word	0x20002734
 800d408:	40ef4000 	.word	0x40ef4000
 800d40c:	40e00000 	.word	0x40e00000
 800d410:	40100000 	.word	0x40100000
 800d414:	40f00000 	.word	0x40f00000
 800d418:	41200000 	.word	0x41200000
 800d41c:	3ff00000 	.word	0x3ff00000
 800d420:	20002738 	.word	0x20002738
 800d424:	41300000 	.word	0x41300000
 800d428:	40b00000 	.word	0x40b00000
 800d42c:	40b86a00 	.word	0x40b86a00
 800d430:	41e00000 	.word	0x41e00000
 800d434:	40300000 	.word	0x40300000
 800d438:	408f4000 	.word	0x408f4000

0800d43c <BME280_H_Double>:

double BME280_H_Double(BME280_Calib_Data_struct *Calib_data)
{
 800d43c:	b5b0      	push	{r4, r5, r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	6178      	str	r0, [r7, #20]
//	BME280_Humidity(handle);
	long double var_H;

	var_H = (((double) t_fine) - 76800.0);
 800d444:	4b6f      	ldr	r3, [pc, #444]	; (800d604 <BME280_H_Double+0x1c8>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	0018      	movs	r0, r3
 800d44a:	f7f5 fc87 	bl	8002d5c <__aeabi_i2d>
 800d44e:	2200      	movs	r2, #0
 800d450:	4b6d      	ldr	r3, [pc, #436]	; (800d608 <BME280_H_Double+0x1cc>)
 800d452:	f7f5 f89d 	bl	8002590 <__aeabi_dsub>
 800d456:	0002      	movs	r2, r0
 800d458:	000b      	movs	r3, r1
 800d45a:	61ba      	str	r2, [r7, #24]
 800d45c:	61fb      	str	r3, [r7, #28]
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 800d45e:	4b6b      	ldr	r3, [pc, #428]	; (800d60c <BME280_H_Double+0x1d0>)
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	0018      	movs	r0, r3
 800d464:	f7f5 fcaa 	bl	8002dbc <__aeabi_ui2d>
 800d468:	0004      	movs	r4, r0
 800d46a:	000d      	movs	r5, r1
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	221e      	movs	r2, #30
 800d470:	5e9b      	ldrsh	r3, [r3, r2]
 800d472:	0018      	movs	r0, r3
 800d474:	f7f5 fc72 	bl	8002d5c <__aeabi_i2d>
 800d478:	2200      	movs	r2, #0
 800d47a:	4b65      	ldr	r3, [pc, #404]	; (800d610 <BME280_H_Double+0x1d4>)
 800d47c:	f7f4 fe1c 	bl	80020b8 <__aeabi_dmul>
 800d480:	0002      	movs	r2, r0
 800d482:	000b      	movs	r3, r1
 800d484:	60ba      	str	r2, [r7, #8]
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2120      	movs	r1, #32
 800d48c:	5e5b      	ldrsh	r3, [r3, r1]
 800d48e:	0018      	movs	r0, r3
 800d490:	f7f5 fc64 	bl	8002d5c <__aeabi_i2d>
 800d494:	2200      	movs	r2, #0
 800d496:	4b5f      	ldr	r3, [pc, #380]	; (800d614 <BME280_H_Double+0x1d8>)
 800d498:	f7f4 fa0c 	bl	80018b4 <__aeabi_ddiv>
 800d49c:	0002      	movs	r2, r0
 800d49e:	000b      	movs	r3, r1
 800d4a0:	0010      	movs	r0, r2
 800d4a2:	0019      	movs	r1, r3
 800d4a4:	69ba      	ldr	r2, [r7, #24]
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	f7f4 fe06 	bl	80020b8 <__aeabi_dmul>
 800d4ac:	0002      	movs	r2, r0
 800d4ae:	000b      	movs	r3, r1
 800d4b0:	68b8      	ldr	r0, [r7, #8]
 800d4b2:	68f9      	ldr	r1, [r7, #12]
 800d4b4:	f7f3 fec2 	bl	800123c <__aeabi_dadd>
 800d4b8:	0002      	movs	r2, r0
 800d4ba:	000b      	movs	r3, r1
 800d4bc:	0020      	movs	r0, r4
 800d4be:	0029      	movs	r1, r5
 800d4c0:	f7f5 f866 	bl	8002590 <__aeabi_dsub>
 800d4c4:	0002      	movs	r2, r0
 800d4c6:	000b      	movs	r3, r1
 800d4c8:	0014      	movs	r4, r2
 800d4ca:	001d      	movs	r5, r3
			(((double) Calib_data->dig_H2)/65536.0 * (1.0 + ((double) Calib_data->dig_H6) / 67108864.0*var_H * (1.0 + ((double) Calib_data->dig_H3)/67108864.0*var_H)));
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	221a      	movs	r2, #26
 800d4d0:	5e9b      	ldrsh	r3, [r3, r2]
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	f7f5 fc42 	bl	8002d5c <__aeabi_i2d>
 800d4d8:	2200      	movs	r2, #0
 800d4da:	4b4f      	ldr	r3, [pc, #316]	; (800d618 <BME280_H_Double+0x1dc>)
 800d4dc:	f7f4 f9ea 	bl	80018b4 <__aeabi_ddiv>
 800d4e0:	0002      	movs	r2, r0
 800d4e2:	000b      	movs	r3, r1
 800d4e4:	60ba      	str	r2, [r7, #8]
 800d4e6:	60fb      	str	r3, [r7, #12]
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	2222      	movs	r2, #34	; 0x22
 800d4ec:	569b      	ldrsb	r3, [r3, r2]
 800d4ee:	0018      	movs	r0, r3
 800d4f0:	f7f5 fc34 	bl	8002d5c <__aeabi_i2d>
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	4b49      	ldr	r3, [pc, #292]	; (800d61c <BME280_H_Double+0x1e0>)
 800d4f8:	f7f4 f9dc 	bl	80018b4 <__aeabi_ddiv>
 800d4fc:	0002      	movs	r2, r0
 800d4fe:	000b      	movs	r3, r1
 800d500:	0010      	movs	r0, r2
 800d502:	0019      	movs	r1, r3
 800d504:	69ba      	ldr	r2, [r7, #24]
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	f7f4 fdd6 	bl	80020b8 <__aeabi_dmul>
 800d50c:	0002      	movs	r2, r0
 800d50e:	000b      	movs	r3, r1
 800d510:	603a      	str	r2, [r7, #0]
 800d512:	607b      	str	r3, [r7, #4]
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	7f1b      	ldrb	r3, [r3, #28]
 800d518:	0018      	movs	r0, r3
 800d51a:	f7f5 fc4f 	bl	8002dbc <__aeabi_ui2d>
 800d51e:	2200      	movs	r2, #0
 800d520:	4b3e      	ldr	r3, [pc, #248]	; (800d61c <BME280_H_Double+0x1e0>)
 800d522:	f7f4 f9c7 	bl	80018b4 <__aeabi_ddiv>
 800d526:	0002      	movs	r2, r0
 800d528:	000b      	movs	r3, r1
 800d52a:	0010      	movs	r0, r2
 800d52c:	0019      	movs	r1, r3
 800d52e:	69ba      	ldr	r2, [r7, #24]
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	f7f4 fdc1 	bl	80020b8 <__aeabi_dmul>
 800d536:	0002      	movs	r2, r0
 800d538:	000b      	movs	r3, r1
 800d53a:	0010      	movs	r0, r2
 800d53c:	0019      	movs	r1, r3
 800d53e:	2200      	movs	r2, #0
 800d540:	4b37      	ldr	r3, [pc, #220]	; (800d620 <BME280_H_Double+0x1e4>)
 800d542:	f7f3 fe7b 	bl	800123c <__aeabi_dadd>
 800d546:	0002      	movs	r2, r0
 800d548:	000b      	movs	r3, r1
 800d54a:	6838      	ldr	r0, [r7, #0]
 800d54c:	6879      	ldr	r1, [r7, #4]
 800d54e:	f7f4 fdb3 	bl	80020b8 <__aeabi_dmul>
 800d552:	0002      	movs	r2, r0
 800d554:	000b      	movs	r3, r1
 800d556:	0010      	movs	r0, r2
 800d558:	0019      	movs	r1, r3
 800d55a:	2200      	movs	r2, #0
 800d55c:	4b30      	ldr	r3, [pc, #192]	; (800d620 <BME280_H_Double+0x1e4>)
 800d55e:	f7f3 fe6d 	bl	800123c <__aeabi_dadd>
 800d562:	0002      	movs	r2, r0
 800d564:	000b      	movs	r3, r1
 800d566:	68b8      	ldr	r0, [r7, #8]
 800d568:	68f9      	ldr	r1, [r7, #12]
 800d56a:	f7f4 fda5 	bl	80020b8 <__aeabi_dmul>
 800d56e:	0002      	movs	r2, r0
 800d570:	000b      	movs	r3, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 800d572:	0020      	movs	r0, r4
 800d574:	0029      	movs	r1, r5
 800d576:	f7f4 fd9f 	bl	80020b8 <__aeabi_dmul>
 800d57a:	0002      	movs	r2, r0
 800d57c:	000b      	movs	r3, r1
 800d57e:	61ba      	str	r2, [r7, #24]
 800d580:	61fb      	str	r3, [r7, #28]
	var_H *= (1.0 - ((double)Calib_data->dig_H1)*var_H/524288.0);
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	7e1b      	ldrb	r3, [r3, #24]
 800d586:	0018      	movs	r0, r3
 800d588:	f7f5 fc18 	bl	8002dbc <__aeabi_ui2d>
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	f7f4 fd92 	bl	80020b8 <__aeabi_dmul>
 800d594:	0002      	movs	r2, r0
 800d596:	000b      	movs	r3, r1
 800d598:	0010      	movs	r0, r2
 800d59a:	0019      	movs	r1, r3
 800d59c:	2200      	movs	r2, #0
 800d59e:	4b21      	ldr	r3, [pc, #132]	; (800d624 <BME280_H_Double+0x1e8>)
 800d5a0:	f7f4 f988 	bl	80018b4 <__aeabi_ddiv>
 800d5a4:	0002      	movs	r2, r0
 800d5a6:	000b      	movs	r3, r1
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	491d      	ldr	r1, [pc, #116]	; (800d620 <BME280_H_Double+0x1e4>)
 800d5ac:	f7f4 fff0 	bl	8002590 <__aeabi_dsub>
 800d5b0:	0002      	movs	r2, r0
 800d5b2:	000b      	movs	r3, r1
 800d5b4:	69b8      	ldr	r0, [r7, #24]
 800d5b6:	69f9      	ldr	r1, [r7, #28]
 800d5b8:	f7f4 fd7e 	bl	80020b8 <__aeabi_dmul>
 800d5bc:	0002      	movs	r2, r0
 800d5be:	000b      	movs	r3, r1
 800d5c0:	61ba      	str	r2, [r7, #24]
 800d5c2:	61fb      	str	r3, [r7, #28]

	if (var_H > 100.0){
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	4b18      	ldr	r3, [pc, #96]	; (800d628 <BME280_H_Double+0x1ec>)
 800d5c8:	69b8      	ldr	r0, [r7, #24]
 800d5ca:	69f9      	ldr	r1, [r7, #28]
 800d5cc:	f7f2 ff60 	bl	8000490 <__aeabi_dcmpgt>
 800d5d0:	1e03      	subs	r3, r0, #0
 800d5d2:	d004      	beq.n	800d5de <BME280_H_Double+0x1a2>
		var_H = 100.0;
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	4b14      	ldr	r3, [pc, #80]	; (800d628 <BME280_H_Double+0x1ec>)
 800d5d8:	61ba      	str	r2, [r7, #24]
 800d5da:	61fb      	str	r3, [r7, #28]
 800d5dc:	e00b      	b.n	800d5f6 <BME280_H_Double+0x1ba>
	}
	else if (var_H < 0.0){
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	69b8      	ldr	r0, [r7, #24]
 800d5e4:	69f9      	ldr	r1, [r7, #28]
 800d5e6:	f7f2 ff3f 	bl	8000468 <__aeabi_dcmplt>
 800d5ea:	1e03      	subs	r3, r0, #0
 800d5ec:	d003      	beq.n	800d5f6 <BME280_H_Double+0x1ba>
		var_H = 0.0;
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	61ba      	str	r2, [r7, #24]
 800d5f4:	61fb      	str	r3, [r7, #28]
	}

	return var_H;
 800d5f6:	69ba      	ldr	r2, [r7, #24]
 800d5f8:	69fb      	ldr	r3, [r7, #28]
}
 800d5fa:	0010      	movs	r0, r2
 800d5fc:	0019      	movs	r1, r3
 800d5fe:	46bd      	mov	sp, r7
 800d600:	b008      	add	sp, #32
 800d602:	bdb0      	pop	{r4, r5, r7, pc}
 800d604:	20002734 	.word	0x20002734
 800d608:	40f2c000 	.word	0x40f2c000
 800d60c:	20002748 	.word	0x20002748
 800d610:	40500000 	.word	0x40500000
 800d614:	40d00000 	.word	0x40d00000
 800d618:	40f00000 	.word	0x40f00000
 800d61c:	41900000 	.word	0x41900000
 800d620:	3ff00000 	.word	0x3ff00000
 800d624:	41200000 	.word	0x41200000
 800d628:	40590000 	.word	0x40590000

0800d62c <BME280_Altitude_Double>:


double BME280_Altitude_Double(double Pressure, double Pressure_ref)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60b8      	str	r0, [r7, #8]
 800d634:	60f9      	str	r1, [r7, #12]
 800d636:	603a      	str	r2, [r7, #0]
 800d638:	607b      	str	r3, [r7, #4]
	long double var1;
	var1 = pow(Pressure/Pressure_ref, 1/5.255);
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	68b8      	ldr	r0, [r7, #8]
 800d640:	68f9      	ldr	r1, [r7, #12]
 800d642:	f7f4 f937 	bl	80018b4 <__aeabi_ddiv>
 800d646:	0002      	movs	r2, r0
 800d648:	000b      	movs	r3, r1
 800d64a:	0010      	movs	r0, r2
 800d64c:	0019      	movs	r1, r3
 800d64e:	4a0e      	ldr	r2, [pc, #56]	; (800d688 <BME280_Altitude_Double+0x5c>)
 800d650:	4b0e      	ldr	r3, [pc, #56]	; (800d68c <BME280_Altitude_Double+0x60>)
 800d652:	f004 f877 	bl	8011744 <pow>
 800d656:	0002      	movs	r2, r0
 800d658:	000b      	movs	r3, r1
 800d65a:	613a      	str	r2, [r7, #16]
 800d65c:	617b      	str	r3, [r7, #20]
	return 44330*(1-var1);
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2000      	movs	r0, #0
 800d664:	490a      	ldr	r1, [pc, #40]	; (800d690 <BME280_Altitude_Double+0x64>)
 800d666:	f7f4 ff93 	bl	8002590 <__aeabi_dsub>
 800d66a:	0002      	movs	r2, r0
 800d66c:	000b      	movs	r3, r1
 800d66e:	0010      	movs	r0, r2
 800d670:	0019      	movs	r1, r3
 800d672:	2200      	movs	r2, #0
 800d674:	4b07      	ldr	r3, [pc, #28]	; (800d694 <BME280_Altitude_Double+0x68>)
 800d676:	f7f4 fd1f 	bl	80020b8 <__aeabi_dmul>
 800d67a:	0002      	movs	r2, r0
 800d67c:	000b      	movs	r3, r1
}
 800d67e:	0010      	movs	r0, r2
 800d680:	0019      	movs	r1, r3
 800d682:	46bd      	mov	sp, r7
 800d684:	b006      	add	sp, #24
 800d686:	bd80      	pop	{r7, pc}
 800d688:	ccd9456c 	.word	0xccd9456c
 800d68c:	3fc85b95 	.word	0x3fc85b95
 800d690:	3ff00000 	.word	0x3ff00000
 800d694:	40e5a540 	.word	0x40e5a540

0800d698 <MPU6050_Init>:
int16_t Temperature_raw;



HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800d698:	b084      	sub	sp, #16
 800d69a:	b5b0      	push	{r4, r5, r7, lr}
 800d69c:	b086      	sub	sp, #24
 800d69e:	af04      	add	r7, sp, #16
 800d6a0:	2518      	movs	r5, #24
 800d6a2:	197c      	adds	r4, r7, r5
 800d6a4:	6020      	str	r0, [r4, #0]
 800d6a6:	6061      	str	r1, [r4, #4]
 800d6a8:	60a2      	str	r2, [r4, #8]
 800d6aa:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t data;

	// Config register complete reset (everything to 0, except sleep enable and ID)
	data = 0x80;
 800d6ac:	1dbb      	adds	r3, r7, #6
 800d6ae:	2280      	movs	r2, #128	; 0x80
 800d6b0:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 800d6b2:	234c      	movs	r3, #76	; 0x4c
 800d6b4:	195b      	adds	r3, r3, r5
 800d6b6:	19db      	adds	r3, r3, r7
 800d6b8:	881b      	ldrh	r3, [r3, #0]
 800d6ba:	1dfc      	adds	r4, r7, #7
 800d6bc:	1978      	adds	r0, r7, r5
 800d6be:	9302      	str	r3, [sp, #8]
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	1dbb      	adds	r3, r7, #6
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	226b      	movs	r2, #107	; 0x6b
 800d6cc:	21d0      	movs	r1, #208	; 0xd0
 800d6ce:	f7f7 fb61 	bl	8004d94 <HAL_I2C_Mem_Write>
 800d6d2:	0003      	movs	r3, r0
 800d6d4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d6d6:	1dfb      	adds	r3, r7, #7
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d002      	beq.n	800d6e4 <MPU6050_Init+0x4c>
		return status;
 800d6de:	1dfb      	adds	r3, r7, #7
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	e091      	b.n	800d808 <MPU6050_Init+0x170>
	HAL_Delay(100);
 800d6e4:	2064      	movs	r0, #100	; 0x64
 800d6e6:	f7f6 ff7b 	bl	80045e0 <HAL_Delay>

	// Signal path and sensor reg reset
	data = 0x01;
 800d6ea:	1dbb      	adds	r3, r7, #6
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_USER_CTRL, 1, &data, 1, Timeout);
 800d6f0:	234c      	movs	r3, #76	; 0x4c
 800d6f2:	2218      	movs	r2, #24
 800d6f4:	189b      	adds	r3, r3, r2
 800d6f6:	19db      	adds	r3, r3, r7
 800d6f8:	881b      	ldrh	r3, [r3, #0]
 800d6fa:	1dfc      	adds	r4, r7, #7
 800d6fc:	18b8      	adds	r0, r7, r2
 800d6fe:	9302      	str	r3, [sp, #8]
 800d700:	2301      	movs	r3, #1
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	1dbb      	adds	r3, r7, #6
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	2301      	movs	r3, #1
 800d70a:	226a      	movs	r2, #106	; 0x6a
 800d70c:	21d0      	movs	r1, #208	; 0xd0
 800d70e:	f7f7 fb41 	bl	8004d94 <HAL_I2C_Mem_Write>
 800d712:	0003      	movs	r3, r0
 800d714:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d716:	1dfb      	adds	r3, r7, #7
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <MPU6050_Init+0x8c>
		return status;
 800d71e:	1dfb      	adds	r3, r7, #7
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	e071      	b.n	800d808 <MPU6050_Init+0x170>
	HAL_Delay(100);
 800d724:	2064      	movs	r0, #100	; 0x64
 800d726:	f7f6 ff5b 	bl	80045e0 <HAL_Delay>

	// Wake-up and change clock source to gyro_X reference
	data = 0x01;
 800d72a:	1dbb      	adds	r3, r7, #6
 800d72c:	2201      	movs	r2, #1
 800d72e:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 800d730:	234c      	movs	r3, #76	; 0x4c
 800d732:	2218      	movs	r2, #24
 800d734:	189b      	adds	r3, r3, r2
 800d736:	19db      	adds	r3, r3, r7
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	1dfc      	adds	r4, r7, #7
 800d73c:	18b8      	adds	r0, r7, r2
 800d73e:	9302      	str	r3, [sp, #8]
 800d740:	2301      	movs	r3, #1
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	1dbb      	adds	r3, r7, #6
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	2301      	movs	r3, #1
 800d74a:	226b      	movs	r2, #107	; 0x6b
 800d74c:	21d0      	movs	r1, #208	; 0xd0
 800d74e:	f7f7 fb21 	bl	8004d94 <HAL_I2C_Mem_Write>
 800d752:	0003      	movs	r3, r0
 800d754:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d756:	1dfb      	adds	r3, r7, #7
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d002      	beq.n	800d764 <MPU6050_Init+0xcc>
		return status;
 800d75e:	1dfb      	adds	r3, r7, #7
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	e051      	b.n	800d808 <MPU6050_Init+0x170>

	// Set accelerometer range to ± 4g
	data = 0x08;
 800d764:	1dbb      	adds	r3, r7, #6
 800d766:	2208      	movs	r2, #8
 800d768:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_ACCEL_CONFIG, 1, &data, 1, Timeout);
 800d76a:	234c      	movs	r3, #76	; 0x4c
 800d76c:	2218      	movs	r2, #24
 800d76e:	189b      	adds	r3, r3, r2
 800d770:	19db      	adds	r3, r3, r7
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	1dfc      	adds	r4, r7, #7
 800d776:	18b8      	adds	r0, r7, r2
 800d778:	9302      	str	r3, [sp, #8]
 800d77a:	2301      	movs	r3, #1
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	1dbb      	adds	r3, r7, #6
 800d780:	9300      	str	r3, [sp, #0]
 800d782:	2301      	movs	r3, #1
 800d784:	221c      	movs	r2, #28
 800d786:	21d0      	movs	r1, #208	; 0xd0
 800d788:	f7f7 fb04 	bl	8004d94 <HAL_I2C_Mem_Write>
 800d78c:	0003      	movs	r3, r0
 800d78e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d790:	1dfb      	adds	r3, r7, #7
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <MPU6050_Init+0x106>
		return status;
 800d798:	1dfb      	adds	r3, r7, #7
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	e034      	b.n	800d808 <MPU6050_Init+0x170>

	// Set gyroscope range to ± 500°/s
	data = 0x08;
 800d79e:	1dbb      	adds	r3, r7, #6
 800d7a0:	2208      	movs	r2, #8
 800d7a2:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_GYRO_CONFIG, 1, &data, 1, Timeout);
 800d7a4:	234c      	movs	r3, #76	; 0x4c
 800d7a6:	2218      	movs	r2, #24
 800d7a8:	189b      	adds	r3, r3, r2
 800d7aa:	19db      	adds	r3, r3, r7
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	1dfc      	adds	r4, r7, #7
 800d7b0:	18b8      	adds	r0, r7, r2
 800d7b2:	9302      	str	r3, [sp, #8]
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	9301      	str	r3, [sp, #4]
 800d7b8:	1dbb      	adds	r3, r7, #6
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	2301      	movs	r3, #1
 800d7be:	221b      	movs	r2, #27
 800d7c0:	21d0      	movs	r1, #208	; 0xd0
 800d7c2:	f7f7 fae7 	bl	8004d94 <HAL_I2C_Mem_Write>
 800d7c6:	0003      	movs	r3, r0
 800d7c8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d7ca:	1dfb      	adds	r3, r7, #7
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <MPU6050_Init+0x140>
		return status;
 800d7d2:	1dfb      	adds	r3, r7, #7
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	e017      	b.n	800d808 <MPU6050_Init+0x170>

	// Set sample rate to 8kHz/(1+19)=400Hz
	data = 0x13;
 800d7d8:	1dbb      	adds	r3, r7, #6
 800d7da:	2213      	movs	r2, #19
 800d7dc:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
 800d7de:	234c      	movs	r3, #76	; 0x4c
 800d7e0:	2218      	movs	r2, #24
 800d7e2:	189b      	adds	r3, r3, r2
 800d7e4:	19db      	adds	r3, r3, r7
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	1dfc      	adds	r4, r7, #7
 800d7ea:	18b8      	adds	r0, r7, r2
 800d7ec:	9302      	str	r3, [sp, #8]
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	1dbb      	adds	r3, r7, #6
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	2219      	movs	r2, #25
 800d7fa:	21d0      	movs	r1, #208	; 0xd0
 800d7fc:	f7f7 faca 	bl	8004d94 <HAL_I2C_Mem_Write>
 800d800:	0003      	movs	r3, r0
 800d802:	7023      	strb	r3, [r4, #0]
	return status;
 800d804:	1dfb      	adds	r3, r7, #7
 800d806:	781b      	ldrb	r3, [r3, #0]
}
 800d808:	0018      	movs	r0, r3
 800d80a:	46bd      	mov	sp, r7
 800d80c:	b002      	add	sp, #8
 800d80e:	bcb0      	pop	{r4, r5, r7}
 800d810:	bc08      	pop	{r3}
 800d812:	b004      	add	sp, #16
 800d814:	4718      	bx	r3

0800d816 <MPU6050_read_ID>:



HAL_StatusTypeDef MPU6050_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 800d816:	b084      	sub	sp, #16
 800d818:	b5b0      	push	{r4, r5, r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af04      	add	r7, sp, #16
 800d81e:	2510      	movs	r5, #16
 800d820:	197c      	adds	r4, r7, r5
 800d822:	6020      	str	r0, [r4, #0]
 800d824:	6061      	str	r1, [r4, #4]
 800d826:	60a2      	str	r2, [r4, #8]
 800d828:	60e3      	str	r3, [r4, #12]
	return HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_WHO_AM_I, 1, ptr_ID, 1, Timeout);
 800d82a:	2350      	movs	r3, #80	; 0x50
 800d82c:	002a      	movs	r2, r5
 800d82e:	189b      	adds	r3, r3, r2
 800d830:	19db      	adds	r3, r3, r7
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	18b8      	adds	r0, r7, r2
 800d836:	9302      	str	r3, [sp, #8]
 800d838:	2301      	movs	r3, #1
 800d83a:	9301      	str	r3, [sp, #4]
 800d83c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	2301      	movs	r3, #1
 800d842:	2275      	movs	r2, #117	; 0x75
 800d844:	21d0      	movs	r1, #208	; 0xd0
 800d846:	f7f7 fbd3 	bl	8004ff0 <HAL_I2C_Mem_Read>
 800d84a:	0003      	movs	r3, r0
}
 800d84c:	0018      	movs	r0, r3
 800d84e:	46bd      	mov	sp, r7
 800d850:	bcb0      	pop	{r4, r5, r7}
 800d852:	bc08      	pop	{r3}
 800d854:	b004      	add	sp, #16
 800d856:	4718      	bx	r3

0800d858 <MPU6050_read_All>:



HAL_StatusTypeDef MPU6050_read_All(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800d858:	b084      	sub	sp, #16
 800d85a:	b5b0      	push	{r4, r5, r7, lr}
 800d85c:	b088      	sub	sp, #32
 800d85e:	af04      	add	r7, sp, #16
 800d860:	2520      	movs	r5, #32
 800d862:	197c      	adds	r4, r7, r5
 800d864:	6020      	str	r0, [r4, #0]
 800d866:	6061      	str	r1, [r4, #4]
 800d868:	60a2      	str	r2, [r4, #8]
 800d86a:	60e3      	str	r3, [r4, #12]
	HAL_StatusTypeDef status;
	uint8_t data[14];

	status = HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_ACCEL_XOUT_H, 1, data, 14, Timeout);
 800d86c:	234c      	movs	r3, #76	; 0x4c
 800d86e:	002a      	movs	r2, r5
 800d870:	189b      	adds	r3, r3, r2
 800d872:	19db      	adds	r3, r3, r7
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	250f      	movs	r5, #15
 800d878:	197c      	adds	r4, r7, r5
 800d87a:	18b8      	adds	r0, r7, r2
 800d87c:	9302      	str	r3, [sp, #8]
 800d87e:	230e      	movs	r3, #14
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	003b      	movs	r3, r7
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	2301      	movs	r3, #1
 800d888:	223b      	movs	r2, #59	; 0x3b
 800d88a:	21d0      	movs	r1, #208	; 0xd0
 800d88c:	f7f7 fbb0 	bl	8004ff0 <HAL_I2C_Mem_Read>
 800d890:	0003      	movs	r3, r0
 800d892:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 800d894:	197b      	adds	r3, r7, r5
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <MPU6050_read_All+0x4a>
		return status;
 800d89c:	197b      	adds	r3, r7, r5
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	e04f      	b.n	800d942 <MPU6050_read_All+0xea>

	MPU6050_Accel_raw.xdata = data[0] << 8 | data[1];
 800d8a2:	003b      	movs	r3, r7
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	021b      	lsls	r3, r3, #8
 800d8a8:	b21a      	sxth	r2, r3
 800d8aa:	003b      	movs	r3, r7
 800d8ac:	785b      	ldrb	r3, [r3, #1]
 800d8ae:	b21b      	sxth	r3, r3
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	b21a      	sxth	r2, r3
 800d8b4:	4b26      	ldr	r3, [pc, #152]	; (800d950 <MPU6050_read_All+0xf8>)
 800d8b6:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_raw.ydata = data[2] << 8 | data[3];
 800d8b8:	003b      	movs	r3, r7
 800d8ba:	789b      	ldrb	r3, [r3, #2]
 800d8bc:	021b      	lsls	r3, r3, #8
 800d8be:	b21a      	sxth	r2, r3
 800d8c0:	003b      	movs	r3, r7
 800d8c2:	78db      	ldrb	r3, [r3, #3]
 800d8c4:	b21b      	sxth	r3, r3
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	b21a      	sxth	r2, r3
 800d8ca:	4b21      	ldr	r3, [pc, #132]	; (800d950 <MPU6050_read_All+0xf8>)
 800d8cc:	805a      	strh	r2, [r3, #2]
	MPU6050_Accel_raw.zdata = data[4] << 8 | data[5];
 800d8ce:	003b      	movs	r3, r7
 800d8d0:	791b      	ldrb	r3, [r3, #4]
 800d8d2:	021b      	lsls	r3, r3, #8
 800d8d4:	b21a      	sxth	r2, r3
 800d8d6:	003b      	movs	r3, r7
 800d8d8:	795b      	ldrb	r3, [r3, #5]
 800d8da:	b21b      	sxth	r3, r3
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	b21a      	sxth	r2, r3
 800d8e0:	4b1b      	ldr	r3, [pc, #108]	; (800d950 <MPU6050_read_All+0xf8>)
 800d8e2:	809a      	strh	r2, [r3, #4]

	Temperature_raw = data[6] << 8 | data[7];
 800d8e4:	003b      	movs	r3, r7
 800d8e6:	799b      	ldrb	r3, [r3, #6]
 800d8e8:	021b      	lsls	r3, r3, #8
 800d8ea:	b21a      	sxth	r2, r3
 800d8ec:	003b      	movs	r3, r7
 800d8ee:	79db      	ldrb	r3, [r3, #7]
 800d8f0:	b21b      	sxth	r3, r3
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	b21a      	sxth	r2, r3
 800d8f6:	4b17      	ldr	r3, [pc, #92]	; (800d954 <MPU6050_read_All+0xfc>)
 800d8f8:	801a      	strh	r2, [r3, #0]

	MPU6050_Gyro_raw.xdata = data[8] << 8 | data[9];
 800d8fa:	003b      	movs	r3, r7
 800d8fc:	7a1b      	ldrb	r3, [r3, #8]
 800d8fe:	021b      	lsls	r3, r3, #8
 800d900:	b21a      	sxth	r2, r3
 800d902:	003b      	movs	r3, r7
 800d904:	7a5b      	ldrb	r3, [r3, #9]
 800d906:	b21b      	sxth	r3, r3
 800d908:	4313      	orrs	r3, r2
 800d90a:	b21a      	sxth	r2, r3
 800d90c:	4b12      	ldr	r3, [pc, #72]	; (800d958 <MPU6050_read_All+0x100>)
 800d90e:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_raw.ydata = data[10] << 8 | data[11];
 800d910:	003b      	movs	r3, r7
 800d912:	7a9b      	ldrb	r3, [r3, #10]
 800d914:	021b      	lsls	r3, r3, #8
 800d916:	b21a      	sxth	r2, r3
 800d918:	003b      	movs	r3, r7
 800d91a:	7adb      	ldrb	r3, [r3, #11]
 800d91c:	b21b      	sxth	r3, r3
 800d91e:	4313      	orrs	r3, r2
 800d920:	b21a      	sxth	r2, r3
 800d922:	4b0d      	ldr	r3, [pc, #52]	; (800d958 <MPU6050_read_All+0x100>)
 800d924:	805a      	strh	r2, [r3, #2]
	MPU6050_Gyro_raw.zdata = data[12] << 8 | data[13];
 800d926:	003b      	movs	r3, r7
 800d928:	7b1b      	ldrb	r3, [r3, #12]
 800d92a:	021b      	lsls	r3, r3, #8
 800d92c:	b21a      	sxth	r2, r3
 800d92e:	003b      	movs	r3, r7
 800d930:	7b5b      	ldrb	r3, [r3, #13]
 800d932:	b21b      	sxth	r3, r3
 800d934:	4313      	orrs	r3, r2
 800d936:	b21a      	sxth	r2, r3
 800d938:	4b07      	ldr	r3, [pc, #28]	; (800d958 <MPU6050_read_All+0x100>)
 800d93a:	809a      	strh	r2, [r3, #4]

	return status;
 800d93c:	230f      	movs	r3, #15
 800d93e:	18fb      	adds	r3, r7, r3
 800d940:	781b      	ldrb	r3, [r3, #0]
}
 800d942:	0018      	movs	r0, r3
 800d944:	46bd      	mov	sp, r7
 800d946:	b004      	add	sp, #16
 800d948:	bcb0      	pop	{r4, r5, r7}
 800d94a:	bc08      	pop	{r3}
 800d94c:	b004      	add	sp, #16
 800d94e:	4718      	bx	r3
 800d950:	20002750 	.word	0x20002750
 800d954:	2000275e 	.word	0x2000275e
 800d958:	20002758 	.word	0x20002758

0800d95c <MPU6050_Accel_double>:
}



void MPU6050_Accel_double(MPU6050_struct *pMPU6050)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
	pMPU6050->Accel_X = (double)MPU6050_Accel_raw.xdata / 8192.0;
 800d964:	4b18      	ldr	r3, [pc, #96]	; (800d9c8 <MPU6050_Accel_double+0x6c>)
 800d966:	2200      	movs	r2, #0
 800d968:	5e9b      	ldrsh	r3, [r3, r2]
 800d96a:	0018      	movs	r0, r3
 800d96c:	f7f5 f9f6 	bl	8002d5c <__aeabi_i2d>
 800d970:	2200      	movs	r2, #0
 800d972:	4b16      	ldr	r3, [pc, #88]	; (800d9cc <MPU6050_Accel_double+0x70>)
 800d974:	f7f3 ff9e 	bl	80018b4 <__aeabi_ddiv>
 800d978:	0002      	movs	r2, r0
 800d97a:	000b      	movs	r3, r1
 800d97c:	6879      	ldr	r1, [r7, #4]
 800d97e:	608a      	str	r2, [r1, #8]
 800d980:	60cb      	str	r3, [r1, #12]
	pMPU6050->Accel_Y = (double)MPU6050_Accel_raw.ydata / 8192.0;
 800d982:	4b11      	ldr	r3, [pc, #68]	; (800d9c8 <MPU6050_Accel_double+0x6c>)
 800d984:	2202      	movs	r2, #2
 800d986:	5e9b      	ldrsh	r3, [r3, r2]
 800d988:	0018      	movs	r0, r3
 800d98a:	f7f5 f9e7 	bl	8002d5c <__aeabi_i2d>
 800d98e:	2200      	movs	r2, #0
 800d990:	4b0e      	ldr	r3, [pc, #56]	; (800d9cc <MPU6050_Accel_double+0x70>)
 800d992:	f7f3 ff8f 	bl	80018b4 <__aeabi_ddiv>
 800d996:	0002      	movs	r2, r0
 800d998:	000b      	movs	r3, r1
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	610a      	str	r2, [r1, #16]
 800d99e:	614b      	str	r3, [r1, #20]
	pMPU6050->Accel_Z = (double)MPU6050_Accel_raw.zdata / 8192.0;
 800d9a0:	4b09      	ldr	r3, [pc, #36]	; (800d9c8 <MPU6050_Accel_double+0x6c>)
 800d9a2:	2204      	movs	r2, #4
 800d9a4:	5e9b      	ldrsh	r3, [r3, r2]
 800d9a6:	0018      	movs	r0, r3
 800d9a8:	f7f5 f9d8 	bl	8002d5c <__aeabi_i2d>
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4b07      	ldr	r3, [pc, #28]	; (800d9cc <MPU6050_Accel_double+0x70>)
 800d9b0:	f7f3 ff80 	bl	80018b4 <__aeabi_ddiv>
 800d9b4:	0002      	movs	r2, r0
 800d9b6:	000b      	movs	r3, r1
 800d9b8:	6879      	ldr	r1, [r7, #4]
 800d9ba:	618a      	str	r2, [r1, #24]
 800d9bc:	61cb      	str	r3, [r1, #28]
}
 800d9be:	46c0      	nop			; (mov r8, r8)
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	b002      	add	sp, #8
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	46c0      	nop			; (mov r8, r8)
 800d9c8:	20002750 	.word	0x20002750
 800d9cc:	40c00000 	.word	0x40c00000

0800d9d0 <MPU6050_Temp_double>:

void MPU6050_Temp_double(MPU6050_struct *pMPU6050)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
	pMPU6050->Temperature = (double)Temperature_raw / 340 + 36.53;
 800d9d8:	4b0d      	ldr	r3, [pc, #52]	; (800da10 <MPU6050_Temp_double+0x40>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	5e9b      	ldrsh	r3, [r3, r2]
 800d9de:	0018      	movs	r0, r3
 800d9e0:	f7f5 f9bc 	bl	8002d5c <__aeabi_i2d>
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	4b0b      	ldr	r3, [pc, #44]	; (800da14 <MPU6050_Temp_double+0x44>)
 800d9e8:	f7f3 ff64 	bl	80018b4 <__aeabi_ddiv>
 800d9ec:	0002      	movs	r2, r0
 800d9ee:	000b      	movs	r3, r1
 800d9f0:	0010      	movs	r0, r2
 800d9f2:	0019      	movs	r1, r3
 800d9f4:	4a08      	ldr	r2, [pc, #32]	; (800da18 <MPU6050_Temp_double+0x48>)
 800d9f6:	4b09      	ldr	r3, [pc, #36]	; (800da1c <MPU6050_Temp_double+0x4c>)
 800d9f8:	f7f3 fc20 	bl	800123c <__aeabi_dadd>
 800d9fc:	0002      	movs	r2, r0
 800d9fe:	000b      	movs	r3, r1
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	638a      	str	r2, [r1, #56]	; 0x38
 800da04:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800da06:	46c0      	nop			; (mov r8, r8)
 800da08:	46bd      	mov	sp, r7
 800da0a:	b002      	add	sp, #8
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	46c0      	nop			; (mov r8, r8)
 800da10:	2000275e 	.word	0x2000275e
 800da14:	40754000 	.word	0x40754000
 800da18:	0a3d70a4 	.word	0x0a3d70a4
 800da1c:	404243d7 	.word	0x404243d7

0800da20 <MPU6050_Gyro_double>:

void MPU6050_Gyro_double(MPU6050_struct *pMPU6050)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
	pMPU6050->Gyro_X = (double)MPU6050_Gyro_raw.xdata / 65.5;
 800da28:	4b18      	ldr	r3, [pc, #96]	; (800da8c <MPU6050_Gyro_double+0x6c>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	5e9b      	ldrsh	r3, [r3, r2]
 800da2e:	0018      	movs	r0, r3
 800da30:	f7f5 f994 	bl	8002d5c <__aeabi_i2d>
 800da34:	2200      	movs	r2, #0
 800da36:	4b16      	ldr	r3, [pc, #88]	; (800da90 <MPU6050_Gyro_double+0x70>)
 800da38:	f7f3 ff3c 	bl	80018b4 <__aeabi_ddiv>
 800da3c:	0002      	movs	r2, r0
 800da3e:	000b      	movs	r3, r1
 800da40:	6879      	ldr	r1, [r7, #4]
 800da42:	620a      	str	r2, [r1, #32]
 800da44:	624b      	str	r3, [r1, #36]	; 0x24
	pMPU6050->Gyro_Y = (double)MPU6050_Gyro_raw.ydata / 65.5;
 800da46:	4b11      	ldr	r3, [pc, #68]	; (800da8c <MPU6050_Gyro_double+0x6c>)
 800da48:	2202      	movs	r2, #2
 800da4a:	5e9b      	ldrsh	r3, [r3, r2]
 800da4c:	0018      	movs	r0, r3
 800da4e:	f7f5 f985 	bl	8002d5c <__aeabi_i2d>
 800da52:	2200      	movs	r2, #0
 800da54:	4b0e      	ldr	r3, [pc, #56]	; (800da90 <MPU6050_Gyro_double+0x70>)
 800da56:	f7f3 ff2d 	bl	80018b4 <__aeabi_ddiv>
 800da5a:	0002      	movs	r2, r0
 800da5c:	000b      	movs	r3, r1
 800da5e:	6879      	ldr	r1, [r7, #4]
 800da60:	628a      	str	r2, [r1, #40]	; 0x28
 800da62:	62cb      	str	r3, [r1, #44]	; 0x2c
	pMPU6050->Gyro_Z = (double)MPU6050_Gyro_raw.zdata / 65.5;
 800da64:	4b09      	ldr	r3, [pc, #36]	; (800da8c <MPU6050_Gyro_double+0x6c>)
 800da66:	2204      	movs	r2, #4
 800da68:	5e9b      	ldrsh	r3, [r3, r2]
 800da6a:	0018      	movs	r0, r3
 800da6c:	f7f5 f976 	bl	8002d5c <__aeabi_i2d>
 800da70:	2200      	movs	r2, #0
 800da72:	4b07      	ldr	r3, [pc, #28]	; (800da90 <MPU6050_Gyro_double+0x70>)
 800da74:	f7f3 ff1e 	bl	80018b4 <__aeabi_ddiv>
 800da78:	0002      	movs	r2, r0
 800da7a:	000b      	movs	r3, r1
 800da7c:	6879      	ldr	r1, [r7, #4]
 800da7e:	630a      	str	r2, [r1, #48]	; 0x30
 800da80:	634b      	str	r3, [r1, #52]	; 0x34
}
 800da82:	46c0      	nop			; (mov r8, r8)
 800da84:	46bd      	mov	sp, r7
 800da86:	b002      	add	sp, #8
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	46c0      	nop			; (mov r8, r8)
 800da8c:	20002758 	.word	0x20002758
 800da90:	40506000 	.word	0x40506000

0800da94 <QMC_init>:
#include"QMC5883_lib.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08a      	sub	sp, #40	; 0x28
 800da98:	af04      	add	r7, sp, #16
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	1dfb      	adds	r3, r7, #7
 800daa0:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	qmc->i2c=i2c;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2211      	movs	r2, #17
 800daac:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800daae:	2114      	movs	r1, #20
 800dab0:	187b      	adds	r3, r7, r1
 800dab2:	2201      	movs	r2, #1
 800dab4:	701a      	strb	r2, [r3, #0]
	array[1]=qmc->Control_Register;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	791a      	ldrb	r2, [r3, #4]
 800daba:	187b      	adds	r3, r7, r1
 800dabc:	705a      	strb	r2, [r3, #1]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 800dabe:	1dfb      	adds	r3, r7, #7
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2bc8      	cmp	r3, #200	; 0xc8
 800dac4:	d107      	bne.n	800dad6 <QMC_init+0x42>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	791b      	ldrb	r3, [r3, #4]
 800daca:	220c      	movs	r2, #12
 800dacc:	4313      	orrs	r3, r2
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	711a      	strb	r2, [r3, #4]
 800dad4:	e027      	b.n	800db26 <QMC_init+0x92>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800dad6:	1dfb      	adds	r3, r7, #7
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b64      	cmp	r3, #100	; 0x64
 800dadc:	d107      	bne.n	800daee <QMC_init+0x5a>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	791b      	ldrb	r3, [r3, #4]
 800dae2:	2208      	movs	r2, #8
 800dae4:	4313      	orrs	r3, r2
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	711a      	strb	r2, [r3, #4]
 800daec:	e01b      	b.n	800db26 <QMC_init+0x92>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 800daee:	1dfb      	adds	r3, r7, #7
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	2b32      	cmp	r3, #50	; 0x32
 800daf4:	d107      	bne.n	800db06 <QMC_init+0x72>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	791b      	ldrb	r3, [r3, #4]
 800dafa:	2204      	movs	r2, #4
 800dafc:	4313      	orrs	r3, r2
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	711a      	strb	r2, [r3, #4]
 800db04:	e00f      	b.n	800db26 <QMC_init+0x92>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 800db06:	1dfb      	adds	r3, r7, #7
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b0a      	cmp	r3, #10
 800db0c:	d104      	bne.n	800db18 <QMC_init+0x84>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	791a      	ldrb	r2, [r3, #4]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	711a      	strb	r2, [r3, #4]
 800db16:	e006      	b.n	800db26 <QMC_init+0x92>
	else qmc->Control_Register|=0b00001100;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	791b      	ldrb	r3, [r3, #4]
 800db1c:	220c      	movs	r2, #12
 800db1e:	4313      	orrs	r3, r2
 800db20:	b2da      	uxtb	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6818      	ldr	r0, [r3, #0]
 800db2a:	2364      	movs	r3, #100	; 0x64
 800db2c:	9302      	str	r3, [sp, #8]
 800db2e:	2301      	movs	r3, #1
 800db30:	9301      	str	r3, [sp, #4]
 800db32:	2314      	movs	r3, #20
 800db34:	18fb      	adds	r3, r7, r3
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	2301      	movs	r3, #1
 800db3a:	220b      	movs	r2, #11
 800db3c:	211a      	movs	r1, #26
 800db3e:	f7f7 f929 	bl	8004d94 <HAL_I2C_Mem_Write>
 800db42:	1e03      	subs	r3, r0, #0
 800db44:	d001      	beq.n	800db4a <QMC_init+0xb6>
 800db46:	2301      	movs	r3, #1
 800db48:	e013      	b.n	800db72 <QMC_init+0xde>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6818      	ldr	r0, [r3, #0]
 800db4e:	2364      	movs	r3, #100	; 0x64
 800db50:	9302      	str	r3, [sp, #8]
 800db52:	2301      	movs	r3, #1
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	2314      	movs	r3, #20
 800db58:	18fb      	adds	r3, r7, r3
 800db5a:	3301      	adds	r3, #1
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	2301      	movs	r3, #1
 800db60:	2209      	movs	r2, #9
 800db62:	211a      	movs	r1, #26
 800db64:	f7f7 f916 	bl	8004d94 <HAL_I2C_Mem_Write>
 800db68:	1e03      	subs	r3, r0, #0
 800db6a:	d001      	beq.n	800db70 <QMC_init+0xdc>
 800db6c:	2301      	movs	r3, #1
 800db6e:	e000      	b.n	800db72 <QMC_init+0xde>

	return 0;
 800db70:	2300      	movs	r3, #0
}
 800db72:	0018      	movs	r0, r3
 800db74:	46bd      	mov	sp, r7
 800db76:	b006      	add	sp, #24
 800db78:	bd80      	pop	{r7, pc}
	...

0800db7c <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 800db7c:	b590      	push	{r4, r7, lr}
 800db7e:	b087      	sub	sp, #28
 800db80:	af04      	add	r7, sp, #16
 800db82:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x06, 1, qmc->datas, 1, 100);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6818      	ldr	r0, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	3305      	adds	r3, #5
 800db92:	2264      	movs	r2, #100	; 0x64
 800db94:	9202      	str	r2, [sp, #8]
 800db96:	2201      	movs	r2, #1
 800db98:	9201      	str	r2, [sp, #4]
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	2301      	movs	r3, #1
 800db9e:	2206      	movs	r2, #6
 800dba0:	211a      	movs	r1, #26
 800dba2:	f7f7 fa25 	bl	8004ff0 <HAL_I2C_Mem_Read>

	  if((qmc->datas[0]&0x01)==1)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	795b      	ldrb	r3, [r3, #5]
 800dbaa:	001a      	movs	r2, r3
 800dbac:	2301      	movs	r3, #1
 800dbae:	4013      	ands	r3, r2
 800dbb0:	d071      	beq.n	800dc96 <QMC_read+0x11a>
	  {
		  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x00, 1, qmc->datas, 6, 100);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6818      	ldr	r0, [r3, #0]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3305      	adds	r3, #5
 800dbba:	2264      	movs	r2, #100	; 0x64
 800dbbc:	9202      	str	r2, [sp, #8]
 800dbbe:	2206      	movs	r2, #6
 800dbc0:	9201      	str	r2, [sp, #4]
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	211a      	movs	r1, #26
 800dbca:	f7f7 fa11 	bl	8004ff0 <HAL_I2C_Mem_Read>
		  qmc->Xaxis= (qmc->datas[1]<<8) | qmc->datas[0];
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	799b      	ldrb	r3, [r3, #6]
 800dbd2:	021b      	lsls	r3, r3, #8
 800dbd4:	b21a      	sxth	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	795b      	ldrb	r3, [r3, #5]
 800dbda:	b21b      	sxth	r3, r3
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	b21a      	sxth	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	819a      	strh	r2, [r3, #12]
		  qmc->Yaxis= (qmc->datas[3]<<8) | qmc->datas[2];
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	7a1b      	ldrb	r3, [r3, #8]
 800dbe8:	021b      	lsls	r3, r3, #8
 800dbea:	b21a      	sxth	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	79db      	ldrb	r3, [r3, #7]
 800dbf0:	b21b      	sxth	r3, r3
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	b21a      	sxth	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	81da      	strh	r2, [r3, #14]
		  qmc->Zaxis= (qmc->datas[5]<<8) | qmc->datas[4];
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	7a9b      	ldrb	r3, [r3, #10]
 800dbfe:	021b      	lsls	r3, r3, #8
 800dc00:	b21a      	sxth	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	7a5b      	ldrb	r3, [r3, #9]
 800dc06:	b21b      	sxth	r3, r3
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	b21a      	sxth	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	821a      	strh	r2, [r3, #16]

		  qmc->compas=atan2f(qmc->Yaxis,qmc->Xaxis)*180.00/M_PI;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	220e      	movs	r2, #14
 800dc14:	5e9b      	ldrsh	r3, [r3, r2]
 800dc16:	0018      	movs	r0, r3
 800dc18:	f7f3 fac2 	bl	80011a0 <__aeabi_i2f>
 800dc1c:	1c04      	adds	r4, r0, #0
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	220c      	movs	r2, #12
 800dc22:	5e9b      	ldrsh	r3, [r3, r2]
 800dc24:	0018      	movs	r0, r3
 800dc26:	f7f3 fabb 	bl	80011a0 <__aeabi_i2f>
 800dc2a:	1c03      	adds	r3, r0, #0
 800dc2c:	1c19      	adds	r1, r3, #0
 800dc2e:	1c20      	adds	r0, r4, #0
 800dc30:	f003 fdf6 	bl	8011820 <atan2f>
 800dc34:	1c03      	adds	r3, r0, #0
 800dc36:	1c18      	adds	r0, r3, #0
 800dc38:	f7f5 f8e6 	bl	8002e08 <__aeabi_f2d>
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	4b19      	ldr	r3, [pc, #100]	; (800dca4 <QMC_read+0x128>)
 800dc40:	f7f4 fa3a 	bl	80020b8 <__aeabi_dmul>
 800dc44:	0002      	movs	r2, r0
 800dc46:	000b      	movs	r3, r1
 800dc48:	0010      	movs	r0, r2
 800dc4a:	0019      	movs	r1, r3
 800dc4c:	4a16      	ldr	r2, [pc, #88]	; (800dca8 <QMC_read+0x12c>)
 800dc4e:	4b17      	ldr	r3, [pc, #92]	; (800dcac <QMC_read+0x130>)
 800dc50:	f7f3 fe30 	bl	80018b4 <__aeabi_ddiv>
 800dc54:	0002      	movs	r2, r0
 800dc56:	000b      	movs	r3, r1
 800dc58:	0010      	movs	r0, r2
 800dc5a:	0019      	movs	r1, r3
 800dc5c:	f7f5 f91c 	bl	8002e98 <__aeabi_d2f>
 800dc60:	1c02      	adds	r2, r0, #0
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	619a      	str	r2, [r3, #24]

		  if(qmc->compas>0)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	699b      	ldr	r3, [r3, #24]
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	1c18      	adds	r0, r3, #0
 800dc6e:	f7f2 fc49 	bl	8000504 <__aeabi_fcmpgt>
 800dc72:	1e03      	subs	r3, r0, #0
 800dc74:	d004      	beq.n	800dc80 <QMC_read+0x104>
		  {
			  qmc->heading= qmc->compas;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	699a      	ldr	r2, [r3, #24]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	615a      	str	r2, [r3, #20]
 800dc7e:	e00c      	b.n	800dc9a <QMC_read+0x11e>
		  }
		  else
		  {
			  qmc->heading=360+qmc->compas;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	490a      	ldr	r1, [pc, #40]	; (800dcb0 <QMC_read+0x134>)
 800dc86:	1c18      	adds	r0, r3, #0
 800dc88:	f7f2 fc50 	bl	800052c <__aeabi_fadd>
 800dc8c:	1c03      	adds	r3, r0, #0
 800dc8e:	1c1a      	adds	r2, r3, #0
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	615a      	str	r2, [r3, #20]
 800dc94:	e001      	b.n	800dc9a <QMC_read+0x11e>
		  }
	  }
	  else
	  {
		  return 1;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <QMC_read+0x120>
	  }
return 0;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	0018      	movs	r0, r3
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	b003      	add	sp, #12
 800dca2:	bd90      	pop	{r4, r7, pc}
 800dca4:	40668000 	.word	0x40668000
 800dca8:	54442d18 	.word	0x54442d18
 800dcac:	400921fb 	.word	0x400921fb
 800dcb0:	43b40000 	.word	0x43b40000

0800dcb4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800dcb8:	2390      	movs	r3, #144	; 0x90
 800dcba:	05db      	lsls	r3, r3, #23
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2110      	movs	r1, #16
 800dcc0:	0018      	movs	r0, r3
 800dcc2:	f7f6 ff7d 	bl	8004bc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	f7f6 fc8a 	bl	80045e0 <HAL_Delay>
}
 800dccc:	46c0      	nop			; (mov r8, r8)
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800dcd6:	2390      	movs	r3, #144	; 0x90
 800dcd8:	05db      	lsls	r3, r3, #23
 800dcda:	2201      	movs	r2, #1
 800dcdc:	2110      	movs	r1, #16
 800dcde:	0018      	movs	r0, r3
 800dce0:	f7f6 ff6e 	bl	8004bc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800dce4:	2001      	movs	r0, #1
 800dce6:	f7f6 fc7b 	bl	80045e0 <HAL_Delay>
}
 800dcea:	46c0      	nop			; (mov r8, r8)
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	0002      	movs	r2, r0
 800dcf8:	1dfb      	adds	r3, r7, #7
 800dcfa:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800dcfc:	46c0      	nop			; (mov r8, r8)
 800dcfe:	4b08      	ldr	r3, [pc, #32]	; (800dd20 <SPI_TxByte+0x30>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	2202      	movs	r2, #2
 800dd06:	4013      	ands	r3, r2
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d1f8      	bne.n	800dcfe <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800dd0c:	1df9      	adds	r1, r7, #7
 800dd0e:	4804      	ldr	r0, [pc, #16]	; (800dd20 <SPI_TxByte+0x30>)
 800dd10:	2364      	movs	r3, #100	; 0x64
 800dd12:	2201      	movs	r2, #1
 800dd14:	f7f8 feb8 	bl	8006a88 <HAL_SPI_Transmit>
}
 800dd18:	46c0      	nop			; (mov r8, r8)
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	b002      	add	sp, #8
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	200002cc 	.word	0x200002cc

0800dd24 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	000a      	movs	r2, r1
 800dd2e:	1cbb      	adds	r3, r7, #2
 800dd30:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800dd32:	46c0      	nop			; (mov r8, r8)
 800dd34:	4b08      	ldr	r3, [pc, #32]	; (800dd58 <SPI_TxBuffer+0x34>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	689b      	ldr	r3, [r3, #8]
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d1f8      	bne.n	800dd34 <SPI_TxBuffer+0x10>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800dd42:	1cbb      	adds	r3, r7, #2
 800dd44:	881a      	ldrh	r2, [r3, #0]
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	4803      	ldr	r0, [pc, #12]	; (800dd58 <SPI_TxBuffer+0x34>)
 800dd4a:	2364      	movs	r3, #100	; 0x64
 800dd4c:	f7f8 fe9c 	bl	8006a88 <HAL_SPI_Transmit>
}
 800dd50:	46c0      	nop			; (mov r8, r8)
 800dd52:	46bd      	mov	sp, r7
 800dd54:	b002      	add	sp, #8
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	200002cc 	.word	0x200002cc

0800dd5c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800dd62:	1dfb      	adds	r3, r7, #7
 800dd64:	22ff      	movs	r2, #255	; 0xff
 800dd66:	701a      	strb	r2, [r3, #0]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800dd68:	46c0      	nop			; (mov r8, r8)
 800dd6a:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <SPI_RxByte+0x38>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	2202      	movs	r2, #2
 800dd72:	4013      	ands	r3, r2
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d1f8      	bne.n	800dd6a <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800dd78:	1dba      	adds	r2, r7, #6
 800dd7a:	1df9      	adds	r1, r7, #7
 800dd7c:	4805      	ldr	r0, [pc, #20]	; (800dd94 <SPI_RxByte+0x38>)
 800dd7e:	2364      	movs	r3, #100	; 0x64
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	2301      	movs	r3, #1
 800dd84:	f7f8 ffd8 	bl	8006d38 <HAL_SPI_TransmitReceive>

	return data;
 800dd88:	1dbb      	adds	r3, r7, #6
 800dd8a:	781b      	ldrb	r3, [r3, #0]
}
 800dd8c:	0018      	movs	r0, r3
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	b002      	add	sp, #8
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	200002cc 	.word	0x200002cc

0800dd98 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800dda0:	f7ff ffdc 	bl	800dd5c <SPI_RxByte>
 800dda4:	0003      	movs	r3, r0
 800dda6:	001a      	movs	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	701a      	strb	r2, [r3, #0]
}
 800ddac:	46c0      	nop			; (mov r8, r8)
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	b002      	add	sp, #8
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800ddb4:	b590      	push	{r4, r7, lr}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
	uint8_t res;
	uint32_t tickstart;

	tickstart = HAL_GetTick();
 800ddba:	f7f6 fc07 	bl	80045cc <HAL_GetTick>
 800ddbe:	0003      	movs	r3, r0
 800ddc0:	607b      	str	r3, [r7, #4]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800ddc2:	1cfc      	adds	r4, r7, #3
 800ddc4:	f7ff ffca 	bl	800dd5c <SPI_RxByte>
 800ddc8:	0003      	movs	r3, r0
 800ddca:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && ((HAL_GetTick() - tickstart) < SD_ReadyWait_TIMEOUT));
 800ddcc:	1cfb      	adds	r3, r7, #3
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2bff      	cmp	r3, #255	; 0xff
 800ddd2:	d008      	beq.n	800dde6 <SD_ReadyWait+0x32>
 800ddd4:	f7f6 fbfa 	bl	80045cc <HAL_GetTick>
 800ddd8:	0002      	movs	r2, r0
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	1ad2      	subs	r2, r2, r3
 800ddde:	23fa      	movs	r3, #250	; 0xfa
 800dde0:	005b      	lsls	r3, r3, #1
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d3ed      	bcc.n	800ddc2 <SD_ReadyWait+0xe>

	return res;
 800dde6:	1cfb      	adds	r3, r7, #3
 800dde8:	781b      	ldrb	r3, [r3, #0]
}
 800ddea:	0018      	movs	r0, r3
 800ddec:	46bd      	mov	sp, r7
 800ddee:	b003      	add	sp, #12
 800ddf0:	bd90      	pop	{r4, r7, pc}
	...

0800ddf4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800ddfa:	4b20      	ldr	r3, [pc, #128]	; (800de7c <SD_PowerOn+0x88>)
 800ddfc:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800ddfe:	f7ff ff68 	bl	800dcd2 <DESELECT>
	for(int i = 0; i < 10; i++)
 800de02:	2300      	movs	r3, #0
 800de04:	60bb      	str	r3, [r7, #8]
 800de06:	e005      	b.n	800de14 <SD_PowerOn+0x20>
	{
		SPI_TxByte(0xFF);
 800de08:	20ff      	movs	r0, #255	; 0xff
 800de0a:	f7ff ff71 	bl	800dcf0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	3301      	adds	r3, #1
 800de12:	60bb      	str	r3, [r7, #8]
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b09      	cmp	r3, #9
 800de18:	ddf6      	ble.n	800de08 <SD_PowerOn+0x14>
	}

	/* slave select */
	SELECT();
 800de1a:	f7ff ff4b 	bl	800dcb4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800de1e:	003b      	movs	r3, r7
 800de20:	2240      	movs	r2, #64	; 0x40
 800de22:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 800de24:	003b      	movs	r3, r7
 800de26:	2200      	movs	r2, #0
 800de28:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 800de2a:	003b      	movs	r3, r7
 800de2c:	2200      	movs	r2, #0
 800de2e:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 800de30:	003b      	movs	r3, r7
 800de32:	2200      	movs	r2, #0
 800de34:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 800de36:	003b      	movs	r3, r7
 800de38:	2200      	movs	r2, #0
 800de3a:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 800de3c:	003b      	movs	r3, r7
 800de3e:	2295      	movs	r2, #149	; 0x95
 800de40:	715a      	strb	r2, [r3, #5]

	SPI_TxBuffer(args, sizeof(args));
 800de42:	003b      	movs	r3, r7
 800de44:	2106      	movs	r1, #6
 800de46:	0018      	movs	r0, r3
 800de48:	f7ff ff6c 	bl	800dd24 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800de4c:	e002      	b.n	800de54 <SD_PowerOn+0x60>
	{
		cnt--;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3b01      	subs	r3, #1
 800de52:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800de54:	f7ff ff82 	bl	800dd5c <SPI_RxByte>
 800de58:	0003      	movs	r3, r0
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d002      	beq.n	800de64 <SD_PowerOn+0x70>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1f4      	bne.n	800de4e <SD_PowerOn+0x5a>
	}

	DESELECT();
 800de64:	f7ff ff35 	bl	800dcd2 <DESELECT>
	SPI_TxByte(0XFF);
 800de68:	20ff      	movs	r0, #255	; 0xff
 800de6a:	f7ff ff41 	bl	800dcf0 <SPI_TxByte>

	PowerFlag = 1;
 800de6e:	4b04      	ldr	r3, [pc, #16]	; (800de80 <SD_PowerOn+0x8c>)
 800de70:	2201      	movs	r2, #1
 800de72:	701a      	strb	r2, [r3, #0]
}
 800de74:	46c0      	nop			; (mov r8, r8)
 800de76:	46bd      	mov	sp, r7
 800de78:	b004      	add	sp, #16
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	00001fff 	.word	0x00001fff
 800de80:	20002761 	.word	0x20002761

0800de84 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800de84:	b580      	push	{r7, lr}
 800de86:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800de88:	4b02      	ldr	r3, [pc, #8]	; (800de94 <SD_PowerOff+0x10>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	701a      	strb	r2, [r3, #0]
}
 800de8e:	46c0      	nop			; (mov r8, r8)
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20002761 	.word	0x20002761

0800de98 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800de9c:	4b02      	ldr	r3, [pc, #8]	; (800dea8 <SD_CheckPower+0x10>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
}
 800dea0:	0018      	movs	r0, r3
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	46c0      	nop			; (mov r8, r8)
 800dea8:	20002761 	.word	0x20002761

0800deac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800deac:	b5b0      	push	{r4, r5, r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
	uint8_t token;
	uint32_t tickstart;

	tickstart = HAL_GetTick();
 800deb6:	f7f6 fb89 	bl	80045cc <HAL_GetTick>
 800deba:	0003      	movs	r3, r0
 800debc:	60fb      	str	r3, [r7, #12]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800debe:	250b      	movs	r5, #11
 800dec0:	197c      	adds	r4, r7, r5
 800dec2:	f7ff ff4b 	bl	800dd5c <SPI_RxByte>
 800dec6:	0003      	movs	r3, r0
 800dec8:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && ((HAL_GetTick() - tickstart) < SD_RxDataBlock_TIMEOUT));
 800deca:	197b      	adds	r3, r7, r5
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	2bff      	cmp	r3, #255	; 0xff
 800ded0:	d106      	bne.n	800dee0 <SD_RxDataBlock+0x34>
 800ded2:	f7f6 fb7b 	bl	80045cc <HAL_GetTick>
 800ded6:	0002      	movs	r2, r0
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	2bc7      	cmp	r3, #199	; 0xc7
 800dede:	d9ee      	bls.n	800debe <SD_RxDataBlock+0x12>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800dee0:	230b      	movs	r3, #11
 800dee2:	18fb      	adds	r3, r7, r3
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2bfe      	cmp	r3, #254	; 0xfe
 800dee8:	d001      	beq.n	800deee <SD_RxDataBlock+0x42>
 800deea:	2300      	movs	r3, #0
 800deec:	e00f      	b.n	800df0e <SD_RxDataBlock+0x62>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	1c5a      	adds	r2, r3, #1
 800def2:	607a      	str	r2, [r7, #4]
 800def4:	0018      	movs	r0, r3
 800def6:	f7ff ff4f 	bl	800dd98 <SPI_RxBytePtr>
	} while(len--);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	1e5a      	subs	r2, r3, #1
 800defe:	603a      	str	r2, [r7, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1f4      	bne.n	800deee <SD_RxDataBlock+0x42>

	/* discard CRC */
	SPI_RxByte();
 800df04:	f7ff ff2a 	bl	800dd5c <SPI_RxByte>
	SPI_RxByte();
 800df08:	f7ff ff28 	bl	800dd5c <SPI_RxByte>

	return TRUE;
 800df0c:	2301      	movs	r3, #1
}
 800df0e:	0018      	movs	r0, r3
 800df10:	46bd      	mov	sp, r7
 800df12:	b004      	add	sp, #16
 800df14:	bdb0      	pop	{r4, r5, r7, pc}

0800df16 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800df16:	b5b0      	push	{r4, r5, r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	000a      	movs	r2, r1
 800df20:	1cfb      	adds	r3, r7, #3
 800df22:	701a      	strb	r2, [r3, #0]
	uint8_t resp = 0;
 800df24:	230f      	movs	r3, #15
 800df26:	18fb      	adds	r3, r7, r3
 800df28:	2200      	movs	r2, #0
 800df2a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800df2c:	230e      	movs	r3, #14
 800df2e:	18fb      	adds	r3, r7, r3
 800df30:	2200      	movs	r2, #0
 800df32:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800df34:	f7ff ff3e 	bl	800ddb4 <SD_ReadyWait>
 800df38:	0003      	movs	r3, r0
 800df3a:	2bff      	cmp	r3, #255	; 0xff
 800df3c:	d001      	beq.n	800df42 <SD_TxDataBlock+0x2c>
 800df3e:	2300      	movs	r3, #0
 800df40:	e03c      	b.n	800dfbc <SD_TxDataBlock+0xa6>

	/* transmit token */
	SPI_TxByte(token);
 800df42:	1cfb      	adds	r3, r7, #3
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	0018      	movs	r0, r3
 800df48:	f7ff fed2 	bl	800dcf0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800df4c:	1cfb      	adds	r3, r7, #3
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2bfd      	cmp	r3, #253	; 0xfd
 800df52:	d029      	beq.n	800dfa8 <SD_TxDataBlock+0x92>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800df54:	2380      	movs	r3, #128	; 0x80
 800df56:	009a      	lsls	r2, r3, #2
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	0011      	movs	r1, r2
 800df5c:	0018      	movs	r0, r3
 800df5e:	f7ff fee1 	bl	800dd24 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800df62:	f7ff fefb 	bl	800dd5c <SPI_RxByte>
		SPI_RxByte();
 800df66:	f7ff fef9 	bl	800dd5c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800df6a:	e011      	b.n	800df90 <SD_TxDataBlock+0x7a>
		{
			resp = SPI_RxByte();
 800df6c:	250f      	movs	r5, #15
 800df6e:	197c      	adds	r4, r7, r5
 800df70:	f7ff fef4 	bl	800dd5c <SPI_RxByte>
 800df74:	0003      	movs	r3, r0
 800df76:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800df78:	197b      	adds	r3, r7, r5
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	221f      	movs	r2, #31
 800df7e:	4013      	ands	r3, r2
 800df80:	2b05      	cmp	r3, #5
 800df82:	d00b      	beq.n	800df9c <SD_TxDataBlock+0x86>
			i++;
 800df84:	210e      	movs	r1, #14
 800df86:	187b      	adds	r3, r7, r1
 800df88:	781a      	ldrb	r2, [r3, #0]
 800df8a:	187b      	adds	r3, r7, r1
 800df8c:	3201      	adds	r2, #1
 800df8e:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 800df90:	230e      	movs	r3, #14
 800df92:	18fb      	adds	r3, r7, r3
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b40      	cmp	r3, #64	; 0x40
 800df98:	d9e8      	bls.n	800df6c <SD_TxDataBlock+0x56>
 800df9a:	e000      	b.n	800df9e <SD_TxDataBlock+0x88>
			if ((resp & 0x1F) == 0x05) break;
 800df9c:	46c0      	nop			; (mov r8, r8)
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800df9e:	46c0      	nop			; (mov r8, r8)
 800dfa0:	f7ff fedc 	bl	800dd5c <SPI_RxByte>
 800dfa4:	1e03      	subs	r3, r0, #0
 800dfa6:	d0fb      	beq.n	800dfa0 <SD_TxDataBlock+0x8a>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800dfa8:	230f      	movs	r3, #15
 800dfaa:	18fb      	adds	r3, r7, r3
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	221f      	movs	r2, #31
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	2b05      	cmp	r3, #5
 800dfb4:	d101      	bne.n	800dfba <SD_TxDataBlock+0xa4>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e000      	b.n	800dfbc <SD_TxDataBlock+0xa6>

	return FALSE;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	0018      	movs	r0, r3
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	b004      	add	sp, #16
 800dfc2:	bdb0      	pop	{r4, r5, r7, pc}

0800dfc4 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800dfc4:	b5b0      	push	{r4, r5, r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	0002      	movs	r2, r0
 800dfcc:	6039      	str	r1, [r7, #0]
 800dfce:	1dfb      	adds	r3, r7, #7
 800dfd0:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800dfd2:	f7ff feef 	bl	800ddb4 <SD_ReadyWait>
 800dfd6:	0003      	movs	r3, r0
 800dfd8:	2bff      	cmp	r3, #255	; 0xff
 800dfda:	d001      	beq.n	800dfe0 <SD_SendCmd+0x1c>
 800dfdc:	23ff      	movs	r3, #255	; 0xff
 800dfde:	e059      	b.n	800e094 <SD_SendCmd+0xd0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800dfe0:	1dfb      	adds	r3, r7, #7
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	0018      	movs	r0, r3
 800dfe6:	f7ff fe83 	bl	800dcf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	0e1b      	lsrs	r3, r3, #24
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	0018      	movs	r0, r3
 800dff2:	f7ff fe7d 	bl	800dcf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	0c1b      	lsrs	r3, r3, #16
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	0018      	movs	r0, r3
 800dffe:	f7ff fe77 	bl	800dcf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	0a1b      	lsrs	r3, r3, #8
 800e006:	b2db      	uxtb	r3, r3
 800e008:	0018      	movs	r0, r3
 800e00a:	f7ff fe71 	bl	800dcf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	b2db      	uxtb	r3, r3
 800e012:	0018      	movs	r0, r3
 800e014:	f7ff fe6c 	bl	800dcf0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800e018:	1dfb      	adds	r3, r7, #7
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	2b40      	cmp	r3, #64	; 0x40
 800e01e:	d104      	bne.n	800e02a <SD_SendCmd+0x66>
 800e020:	230f      	movs	r3, #15
 800e022:	18fb      	adds	r3, r7, r3
 800e024:	2295      	movs	r2, #149	; 0x95
 800e026:	701a      	strb	r2, [r3, #0]
 800e028:	e00c      	b.n	800e044 <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800e02a:	1dfb      	adds	r3, r7, #7
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	2b48      	cmp	r3, #72	; 0x48
 800e030:	d104      	bne.n	800e03c <SD_SendCmd+0x78>
 800e032:	230f      	movs	r3, #15
 800e034:	18fb      	adds	r3, r7, r3
 800e036:	2287      	movs	r2, #135	; 0x87
 800e038:	701a      	strb	r2, [r3, #0]
 800e03a:	e003      	b.n	800e044 <SD_SendCmd+0x80>
	else crc = 1;
 800e03c:	230f      	movs	r3, #15
 800e03e:	18fb      	adds	r3, r7, r3
 800e040:	2201      	movs	r2, #1
 800e042:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SPI_TxByte(crc);
 800e044:	230f      	movs	r3, #15
 800e046:	18fb      	adds	r3, r7, r3
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	0018      	movs	r0, r3
 800e04c:	f7ff fe50 	bl	800dcf0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800e050:	1dfb      	adds	r3, r7, #7
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b4c      	cmp	r3, #76	; 0x4c
 800e056:	d101      	bne.n	800e05c <SD_SendCmd+0x98>
 800e058:	f7ff fe80 	bl	800dd5c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800e05c:	230e      	movs	r3, #14
 800e05e:	18fb      	adds	r3, r7, r3
 800e060:	220a      	movs	r2, #10
 800e062:	701a      	strb	r2, [r3, #0]
	do {
		res = SPI_RxByte();
 800e064:	250d      	movs	r5, #13
 800e066:	197c      	adds	r4, r7, r5
 800e068:	f7ff fe78 	bl	800dd5c <SPI_RxByte>
 800e06c:	0003      	movs	r3, r0
 800e06e:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 800e070:	197b      	adds	r3, r7, r5
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	b25b      	sxtb	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	da09      	bge.n	800e08e <SD_SendCmd+0xca>
 800e07a:	210e      	movs	r1, #14
 800e07c:	187b      	adds	r3, r7, r1
 800e07e:	187a      	adds	r2, r7, r1
 800e080:	7812      	ldrb	r2, [r2, #0]
 800e082:	3a01      	subs	r2, #1
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	187b      	adds	r3, r7, r1
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1ea      	bne.n	800e064 <SD_SendCmd+0xa0>

	return res;
 800e08e:	230d      	movs	r3, #13
 800e090:	18fb      	adds	r3, r7, r3
 800e092:	781b      	ldrb	r3, [r3, #0]
}
 800e094:	0018      	movs	r0, r3
 800e096:	46bd      	mov	sp, r7
 800e098:	b004      	add	sp, #16
 800e09a:	bdb0      	pop	{r4, r5, r7, pc}

0800e09c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800e09c:	b5b0      	push	{r4, r5, r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	0002      	movs	r2, r0
 800e0a4:	1dfb      	adds	r3, r7, #7
 800e0a6:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];
	uint32_t tickstart;


	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800e0a8:	1dfb      	adds	r3, r7, #7
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <SD_disk_initialize+0x18>
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e106      	b.n	800e2c2 <SD_disk_initialize+0x226>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800e0b4:	4b85      	ldr	r3, [pc, #532]	; (800e2cc <SD_disk_initialize+0x230>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	001a      	movs	r2, r3
 800e0bc:	2302      	movs	r3, #2
 800e0be:	4013      	ands	r3, r2
 800e0c0:	d003      	beq.n	800e0ca <SD_disk_initialize+0x2e>
 800e0c2:	4b82      	ldr	r3, [pc, #520]	; (800e2cc <SD_disk_initialize+0x230>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	e0fb      	b.n	800e2c2 <SD_disk_initialize+0x226>

	/* power on */
	SD_PowerOn();
 800e0ca:	f7ff fe93 	bl	800ddf4 <SD_PowerOn>

	/* slave select */
	SELECT();
 800e0ce:	f7ff fdf1 	bl	800dcb4 <SELECT>

	/* check disk type */
	type = 0;
 800e0d2:	2316      	movs	r3, #22
 800e0d4:	18fb      	adds	r3, r7, r3
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800e0da:	2100      	movs	r1, #0
 800e0dc:	2040      	movs	r0, #64	; 0x40
 800e0de:	f7ff ff71 	bl	800dfc4 <SD_SendCmd>
 800e0e2:	0003      	movs	r3, r0
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d000      	beq.n	800e0ea <SD_disk_initialize+0x4e>
 800e0e8:	e0d0      	b.n	800e28c <SD_disk_initialize+0x1f0>
	{
		tickstart = HAL_GetTick();
 800e0ea:	f7f6 fa6f 	bl	80045cc <HAL_GetTick>
 800e0ee:	0003      	movs	r3, r0
 800e0f0:	613b      	str	r3, [r7, #16]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800e0f2:	23d5      	movs	r3, #213	; 0xd5
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	0019      	movs	r1, r3
 800e0f8:	2048      	movs	r0, #72	; 0x48
 800e0fa:	f7ff ff63 	bl	800dfc4 <SD_SendCmd>
 800e0fe:	0003      	movs	r3, r0
 800e100:	2b01      	cmp	r3, #1
 800e102:	d000      	beq.n	800e106 <SD_disk_initialize+0x6a>
 800e104:	e075      	b.n	800e1f2 <SD_disk_initialize+0x156>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800e106:	2317      	movs	r3, #23
 800e108:	18fb      	adds	r3, r7, r3
 800e10a:	2200      	movs	r2, #0
 800e10c:	701a      	strb	r2, [r3, #0]
 800e10e:	e00e      	b.n	800e12e <SD_disk_initialize+0x92>
			{
				ocr[n] = SPI_RxByte();
 800e110:	2517      	movs	r5, #23
 800e112:	197b      	adds	r3, r7, r5
 800e114:	781c      	ldrb	r4, [r3, #0]
 800e116:	f7ff fe21 	bl	800dd5c <SPI_RxByte>
 800e11a:	0003      	movs	r3, r0
 800e11c:	001a      	movs	r2, r3
 800e11e:	230c      	movs	r3, #12
 800e120:	18fb      	adds	r3, r7, r3
 800e122:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 800e124:	197b      	adds	r3, r7, r5
 800e126:	781a      	ldrb	r2, [r3, #0]
 800e128:	197b      	adds	r3, r7, r5
 800e12a:	3201      	adds	r2, #1
 800e12c:	701a      	strb	r2, [r3, #0]
 800e12e:	2317      	movs	r3, #23
 800e130:	18fb      	adds	r3, r7, r3
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	2b03      	cmp	r3, #3
 800e136:	d9eb      	bls.n	800e110 <SD_disk_initialize+0x74>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800e138:	220c      	movs	r2, #12
 800e13a:	18bb      	adds	r3, r7, r2
 800e13c:	789b      	ldrb	r3, [r3, #2]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d000      	beq.n	800e144 <SD_disk_initialize+0xa8>
 800e142:	e0a3      	b.n	800e28c <SD_disk_initialize+0x1f0>
 800e144:	18bb      	adds	r3, r7, r2
 800e146:	78db      	ldrb	r3, [r3, #3]
 800e148:	2baa      	cmp	r3, #170	; 0xaa
 800e14a:	d000      	beq.n	800e14e <SD_disk_initialize+0xb2>
 800e14c:	e09e      	b.n	800e28c <SD_disk_initialize+0x1f0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e14e:	2100      	movs	r1, #0
 800e150:	2077      	movs	r0, #119	; 0x77
 800e152:	f7ff ff37 	bl	800dfc4 <SD_SendCmd>
 800e156:	0003      	movs	r3, r0
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d807      	bhi.n	800e16c <SD_disk_initialize+0xd0>
 800e15c:	2380      	movs	r3, #128	; 0x80
 800e15e:	05db      	lsls	r3, r3, #23
 800e160:	0019      	movs	r1, r3
 800e162:	2069      	movs	r0, #105	; 0x69
 800e164:	f7ff ff2e 	bl	800dfc4 <SD_SendCmd>
 800e168:	1e03      	subs	r3, r0, #0
 800e16a:	d009      	beq.n	800e180 <SD_disk_initialize+0xe4>
				} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 800e16c:	f7f6 fa2e 	bl	80045cc <HAL_GetTick>
 800e170:	0002      	movs	r2, r0
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	1ad2      	subs	r2, r2, r3
 800e176:	23fa      	movs	r3, #250	; 0xfa
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d3e7      	bcc.n	800e14e <SD_disk_initialize+0xb2>
 800e17e:	e000      	b.n	800e182 <SD_disk_initialize+0xe6>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e180:	46c0      	nop			; (mov r8, r8)

				/* READ_OCR */
				if (((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT) && SD_SendCmd(CMD58, 0) == 0)
 800e182:	f7f6 fa23 	bl	80045cc <HAL_GetTick>
 800e186:	0002      	movs	r2, r0
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	1ad2      	subs	r2, r2, r3
 800e18c:	23fa      	movs	r3, #250	; 0xfa
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	429a      	cmp	r2, r3
 800e192:	d300      	bcc.n	800e196 <SD_disk_initialize+0xfa>
 800e194:	e07a      	b.n	800e28c <SD_disk_initialize+0x1f0>
 800e196:	2100      	movs	r1, #0
 800e198:	207a      	movs	r0, #122	; 0x7a
 800e19a:	f7ff ff13 	bl	800dfc4 <SD_SendCmd>
 800e19e:	1e03      	subs	r3, r0, #0
 800e1a0:	d000      	beq.n	800e1a4 <SD_disk_initialize+0x108>
 800e1a2:	e073      	b.n	800e28c <SD_disk_initialize+0x1f0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800e1a4:	2317      	movs	r3, #23
 800e1a6:	18fb      	adds	r3, r7, r3
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	e00e      	b.n	800e1cc <SD_disk_initialize+0x130>
					{
						ocr[n] = SPI_RxByte();
 800e1ae:	2517      	movs	r5, #23
 800e1b0:	197b      	adds	r3, r7, r5
 800e1b2:	781c      	ldrb	r4, [r3, #0]
 800e1b4:	f7ff fdd2 	bl	800dd5c <SPI_RxByte>
 800e1b8:	0003      	movs	r3, r0
 800e1ba:	001a      	movs	r2, r3
 800e1bc:	230c      	movs	r3, #12
 800e1be:	18fb      	adds	r3, r7, r3
 800e1c0:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 800e1c2:	197b      	adds	r3, r7, r5
 800e1c4:	781a      	ldrb	r2, [r3, #0]
 800e1c6:	197b      	adds	r3, r7, r5
 800e1c8:	3201      	adds	r2, #1
 800e1ca:	701a      	strb	r2, [r3, #0]
 800e1cc:	2317      	movs	r3, #23
 800e1ce:	18fb      	adds	r3, r7, r3
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d9eb      	bls.n	800e1ae <SD_disk_initialize+0x112>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800e1d6:	230c      	movs	r3, #12
 800e1d8:	18fb      	adds	r3, r7, r3
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	001a      	movs	r2, r3
 800e1de:	2340      	movs	r3, #64	; 0x40
 800e1e0:	4013      	ands	r3, r2
 800e1e2:	d001      	beq.n	800e1e8 <SD_disk_initialize+0x14c>
 800e1e4:	220c      	movs	r2, #12
 800e1e6:	e000      	b.n	800e1ea <SD_disk_initialize+0x14e>
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	2316      	movs	r3, #22
 800e1ec:	18fb      	adds	r3, r7, r3
 800e1ee:	701a      	strb	r2, [r3, #0]
 800e1f0:	e04c      	b.n	800e28c <SD_disk_initialize+0x1f0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	2077      	movs	r0, #119	; 0x77
 800e1f6:	f7ff fee5 	bl	800dfc4 <SD_SendCmd>
 800e1fa:	0003      	movs	r3, r0
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d808      	bhi.n	800e212 <SD_disk_initialize+0x176>
 800e200:	2100      	movs	r1, #0
 800e202:	2069      	movs	r0, #105	; 0x69
 800e204:	f7ff fede 	bl	800dfc4 <SD_SendCmd>
 800e208:	0003      	movs	r3, r0
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d801      	bhi.n	800e212 <SD_disk_initialize+0x176>
 800e20e:	2202      	movs	r2, #2
 800e210:	e000      	b.n	800e214 <SD_disk_initialize+0x178>
 800e212:	2201      	movs	r2, #1
 800e214:	2316      	movs	r3, #22
 800e216:	18fb      	adds	r3, r7, r3
 800e218:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 800e21a:	2316      	movs	r3, #22
 800e21c:	18fb      	adds	r3, r7, r3
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d10d      	bne.n	800e240 <SD_disk_initialize+0x1a4>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800e224:	2100      	movs	r1, #0
 800e226:	2077      	movs	r0, #119	; 0x77
 800e228:	f7ff fecc 	bl	800dfc4 <SD_SendCmd>
 800e22c:	0003      	movs	r3, r0
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d80c      	bhi.n	800e24c <SD_disk_initialize+0x1b0>
 800e232:	2100      	movs	r1, #0
 800e234:	2069      	movs	r0, #105	; 0x69
 800e236:	f7ff fec5 	bl	800dfc4 <SD_SendCmd>
 800e23a:	1e03      	subs	r3, r0, #0
 800e23c:	d106      	bne.n	800e24c <SD_disk_initialize+0x1b0>
 800e23e:	e010      	b.n	800e262 <SD_disk_initialize+0x1c6>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e240:	2100      	movs	r1, #0
 800e242:	2041      	movs	r0, #65	; 0x41
 800e244:	f7ff febe 	bl	800dfc4 <SD_SendCmd>
 800e248:	1e03      	subs	r3, r0, #0
 800e24a:	d009      	beq.n	800e260 <SD_disk_initialize+0x1c4>
				}

			} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 800e24c:	f7f6 f9be 	bl	80045cc <HAL_GetTick>
 800e250:	0002      	movs	r2, r0
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	1ad2      	subs	r2, r2, r3
 800e256:	23fa      	movs	r3, #250	; 0xfa
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d3dd      	bcc.n	800e21a <SD_disk_initialize+0x17e>
 800e25e:	e000      	b.n	800e262 <SD_disk_initialize+0x1c6>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e260:	46c0      	nop			; (mov r8, r8)

			/* SET_BLOCKLEN */
			if (((HAL_GetTick() - tickstart) >= SD_disk_init_TIMEOUT) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800e262:	f7f6 f9b3 	bl	80045cc <HAL_GetTick>
 800e266:	0002      	movs	r2, r0
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	1ad2      	subs	r2, r2, r3
 800e26c:	23fa      	movs	r3, #250	; 0xfa
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	429a      	cmp	r2, r3
 800e272:	d207      	bcs.n	800e284 <SD_disk_initialize+0x1e8>
 800e274:	2380      	movs	r3, #128	; 0x80
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	0019      	movs	r1, r3
 800e27a:	2050      	movs	r0, #80	; 0x50
 800e27c:	f7ff fea2 	bl	800dfc4 <SD_SendCmd>
 800e280:	1e03      	subs	r3, r0, #0
 800e282:	d003      	beq.n	800e28c <SD_disk_initialize+0x1f0>
 800e284:	2316      	movs	r3, #22
 800e286:	18fb      	adds	r3, r7, r3
 800e288:	2200      	movs	r2, #0
 800e28a:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 800e28c:	4b10      	ldr	r3, [pc, #64]	; (800e2d0 <SD_disk_initialize+0x234>)
 800e28e:	2416      	movs	r4, #22
 800e290:	193a      	adds	r2, r7, r4
 800e292:	7812      	ldrb	r2, [r2, #0]
 800e294:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 800e296:	f7ff fd1c 	bl	800dcd2 <DESELECT>
	SPI_RxByte();
 800e29a:	f7ff fd5f 	bl	800dd5c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800e29e:	193b      	adds	r3, r7, r4
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d008      	beq.n	800e2b8 <SD_disk_initialize+0x21c>
	{
		Stat &= ~STA_NOINIT;
 800e2a6:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <SD_disk_initialize+0x230>)
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	4393      	bics	r3, r2
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <SD_disk_initialize+0x230>)
 800e2b4:	701a      	strb	r2, [r3, #0]
 800e2b6:	e001      	b.n	800e2bc <SD_disk_initialize+0x220>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800e2b8:	f7ff fde4 	bl	800de84 <SD_PowerOff>
	}

	return Stat;
 800e2bc:	4b03      	ldr	r3, [pc, #12]	; (800e2cc <SD_disk_initialize+0x230>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	b2db      	uxtb	r3, r3
}
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	b006      	add	sp, #24
 800e2c8:	bdb0      	pop	{r4, r5, r7, pc}
 800e2ca:	46c0      	nop			; (mov r8, r8)
 800e2cc:	20000020 	.word	0x20000020
 800e2d0:	20002760 	.word	0x20002760

0800e2d4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	0002      	movs	r2, r0
 800e2dc:	1dfb      	adds	r3, r7, #7
 800e2de:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 800e2e0:	1dfb      	adds	r3, r7, #7
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <SD_disk_status+0x18>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e002      	b.n	800e2f2 <SD_disk_status+0x1e>
	return Stat;
 800e2ec:	4b03      	ldr	r3, [pc, #12]	; (800e2fc <SD_disk_status+0x28>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	b2db      	uxtb	r3, r3
}
 800e2f2:	0018      	movs	r0, r3
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	b002      	add	sp, #8
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	46c0      	nop			; (mov r8, r8)
 800e2fc:	20000020 	.word	0x20000020

0800e300 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	60b9      	str	r1, [r7, #8]
 800e308:	607a      	str	r2, [r7, #4]
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	210f      	movs	r1, #15
 800e30e:	187b      	adds	r3, r7, r1
 800e310:	1c02      	adds	r2, r0, #0
 800e312:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800e314:	187b      	adds	r3, r7, r1
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d102      	bne.n	800e322 <SD_disk_read+0x22>
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d101      	bne.n	800e326 <SD_disk_read+0x26>
 800e322:	2304      	movs	r3, #4
 800e324:	e053      	b.n	800e3ce <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e326:	4b2c      	ldr	r3, [pc, #176]	; (800e3d8 <SD_disk_read+0xd8>)
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	001a      	movs	r2, r3
 800e32e:	2301      	movs	r3, #1
 800e330:	4013      	ands	r3, r2
 800e332:	d001      	beq.n	800e338 <SD_disk_read+0x38>
 800e334:	2303      	movs	r3, #3
 800e336:	e04a      	b.n	800e3ce <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800e338:	4b28      	ldr	r3, [pc, #160]	; (800e3dc <SD_disk_read+0xdc>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	001a      	movs	r2, r3
 800e33e:	2304      	movs	r3, #4
 800e340:	4013      	ands	r3, r2
 800e342:	d102      	bne.n	800e34a <SD_disk_read+0x4a>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	025b      	lsls	r3, r3, #9
 800e348:	607b      	str	r3, [r7, #4]

	SELECT();
 800e34a:	f7ff fcb3 	bl	800dcb4 <SELECT>

	if (count == 1)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d112      	bne.n	800e37a <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	0019      	movs	r1, r3
 800e358:	2051      	movs	r0, #81	; 0x51
 800e35a:	f7ff fe33 	bl	800dfc4 <SD_SendCmd>
 800e35e:	1e03      	subs	r3, r0, #0
 800e360:	d12d      	bne.n	800e3be <SD_disk_read+0xbe>
 800e362:	2380      	movs	r3, #128	; 0x80
 800e364:	009a      	lsls	r2, r3, #2
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	0011      	movs	r1, r2
 800e36a:	0018      	movs	r0, r3
 800e36c:	f7ff fd9e 	bl	800deac <SD_RxDataBlock>
 800e370:	1e03      	subs	r3, r0, #0
 800e372:	d024      	beq.n	800e3be <SD_disk_read+0xbe>
 800e374:	2300      	movs	r3, #0
 800e376:	603b      	str	r3, [r7, #0]
 800e378:	e021      	b.n	800e3be <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	0019      	movs	r1, r3
 800e37e:	2052      	movs	r0, #82	; 0x52
 800e380:	f7ff fe20 	bl	800dfc4 <SD_SendCmd>
 800e384:	1e03      	subs	r3, r0, #0
 800e386:	d11a      	bne.n	800e3be <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800e388:	2380      	movs	r3, #128	; 0x80
 800e38a:	009a      	lsls	r2, r3, #2
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	0011      	movs	r1, r2
 800e390:	0018      	movs	r0, r3
 800e392:	f7ff fd8b 	bl	800deac <SD_RxDataBlock>
 800e396:	1e03      	subs	r3, r0, #0
 800e398:	d00c      	beq.n	800e3b4 <SD_disk_read+0xb4>
				buff += 512;
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	2280      	movs	r2, #128	; 0x80
 800e39e:	0092      	lsls	r2, r2, #2
 800e3a0:	4694      	mov	ip, r2
 800e3a2:	4463      	add	r3, ip
 800e3a4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d1ea      	bne.n	800e388 <SD_disk_read+0x88>
 800e3b2:	e000      	b.n	800e3b6 <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 800e3b4:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	204c      	movs	r0, #76	; 0x4c
 800e3ba:	f7ff fe03 	bl	800dfc4 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800e3be:	f7ff fc88 	bl	800dcd2 <DESELECT>
	SPI_RxByte();
 800e3c2:	f7ff fccb 	bl	800dd5c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	1e5a      	subs	r2, r3, #1
 800e3ca:	4193      	sbcs	r3, r2
 800e3cc:	b2db      	uxtb	r3, r3
}
 800e3ce:	0018      	movs	r0, r3
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	b004      	add	sp, #16
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	46c0      	nop			; (mov r8, r8)
 800e3d8:	20000020 	.word	0x20000020
 800e3dc:	20002760 	.word	0x20002760

0800e3e0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60b9      	str	r1, [r7, #8]
 800e3e8:	607a      	str	r2, [r7, #4]
 800e3ea:	603b      	str	r3, [r7, #0]
 800e3ec:	210f      	movs	r1, #15
 800e3ee:	187b      	adds	r3, r7, r1
 800e3f0:	1c02      	adds	r2, r0, #0
 800e3f2:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800e3f4:	187b      	adds	r3, r7, r1
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d102      	bne.n	800e402 <SD_disk_write+0x22>
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <SD_disk_write+0x26>
 800e402:	2304      	movs	r3, #4
 800e404:	e06b      	b.n	800e4de <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e406:	4b38      	ldr	r3, [pc, #224]	; (800e4e8 <SD_disk_write+0x108>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	001a      	movs	r2, r3
 800e40e:	2301      	movs	r3, #1
 800e410:	4013      	ands	r3, r2
 800e412:	d001      	beq.n	800e418 <SD_disk_write+0x38>
 800e414:	2303      	movs	r3, #3
 800e416:	e062      	b.n	800e4de <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800e418:	4b33      	ldr	r3, [pc, #204]	; (800e4e8 <SD_disk_write+0x108>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	001a      	movs	r2, r3
 800e420:	2304      	movs	r3, #4
 800e422:	4013      	ands	r3, r2
 800e424:	d001      	beq.n	800e42a <SD_disk_write+0x4a>
 800e426:	2302      	movs	r3, #2
 800e428:	e059      	b.n	800e4de <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800e42a:	4b30      	ldr	r3, [pc, #192]	; (800e4ec <SD_disk_write+0x10c>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	001a      	movs	r2, r3
 800e430:	2304      	movs	r3, #4
 800e432:	4013      	ands	r3, r2
 800e434:	d102      	bne.n	800e43c <SD_disk_write+0x5c>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	025b      	lsls	r3, r3, #9
 800e43a:	607b      	str	r3, [r7, #4]

	SELECT();
 800e43c:	f7ff fc3a 	bl	800dcb4 <SELECT>

	if (count == 1)
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d110      	bne.n	800e468 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	0019      	movs	r1, r3
 800e44a:	2058      	movs	r0, #88	; 0x58
 800e44c:	f7ff fdba 	bl	800dfc4 <SD_SendCmd>
 800e450:	1e03      	subs	r3, r0, #0
 800e452:	d13c      	bne.n	800e4ce <SD_disk_write+0xee>
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	21fe      	movs	r1, #254	; 0xfe
 800e458:	0018      	movs	r0, r3
 800e45a:	f7ff fd5c 	bl	800df16 <SD_TxDataBlock>
 800e45e:	1e03      	subs	r3, r0, #0
 800e460:	d035      	beq.n	800e4ce <SD_disk_write+0xee>
			count = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	603b      	str	r3, [r7, #0]
 800e466:	e032      	b.n	800e4ce <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800e468:	4b20      	ldr	r3, [pc, #128]	; (800e4ec <SD_disk_write+0x10c>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	001a      	movs	r2, r3
 800e46e:	2302      	movs	r3, #2
 800e470:	4013      	ands	r3, r2
 800e472:	d008      	beq.n	800e486 <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 800e474:	2100      	movs	r1, #0
 800e476:	2077      	movs	r0, #119	; 0x77
 800e478:	f7ff fda4 	bl	800dfc4 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	0019      	movs	r1, r3
 800e480:	2057      	movs	r0, #87	; 0x57
 800e482:	f7ff fd9f 	bl	800dfc4 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	0019      	movs	r1, r3
 800e48a:	2059      	movs	r0, #89	; 0x59
 800e48c:	f7ff fd9a 	bl	800dfc4 <SD_SendCmd>
 800e490:	1e03      	subs	r3, r0, #0
 800e492:	d11c      	bne.n	800e4ce <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	21fc      	movs	r1, #252	; 0xfc
 800e498:	0018      	movs	r0, r3
 800e49a:	f7ff fd3c 	bl	800df16 <SD_TxDataBlock>
 800e49e:	1e03      	subs	r3, r0, #0
 800e4a0:	d00c      	beq.n	800e4bc <SD_disk_write+0xdc>
				buff += 512;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2280      	movs	r2, #128	; 0x80
 800e4a6:	0092      	lsls	r2, r2, #2
 800e4a8:	4694      	mov	ip, r2
 800e4aa:	4463      	add	r3, ip
 800e4ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	603b      	str	r3, [r7, #0]
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1ec      	bne.n	800e494 <SD_disk_write+0xb4>
 800e4ba:	e000      	b.n	800e4be <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e4bc:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800e4be:	21fd      	movs	r1, #253	; 0xfd
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	f7ff fd28 	bl	800df16 <SD_TxDataBlock>
 800e4c6:	1e03      	subs	r3, r0, #0
 800e4c8:	d101      	bne.n	800e4ce <SD_disk_write+0xee>
			{
				count = 1;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800e4ce:	f7ff fc00 	bl	800dcd2 <DESELECT>
	SPI_RxByte();
 800e4d2:	f7ff fc43 	bl	800dd5c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	1e5a      	subs	r2, r3, #1
 800e4da:	4193      	sbcs	r3, r2
 800e4dc:	b2db      	uxtb	r3, r3
}
 800e4de:	0018      	movs	r0, r3
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	b004      	add	sp, #16
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	46c0      	nop			; (mov r8, r8)
 800e4e8:	20000020 	.word	0x20000020
 800e4ec:	20002760 	.word	0x20002760

0800e4f0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800e4f0:	b590      	push	{r4, r7, lr}
 800e4f2:	b08b      	sub	sp, #44	; 0x2c
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	603a      	str	r2, [r7, #0]
 800e4f8:	1dfb      	adds	r3, r7, #7
 800e4fa:	1c02      	adds	r2, r0, #0
 800e4fc:	701a      	strb	r2, [r3, #0]
 800e4fe:	1dbb      	adds	r3, r7, #6
 800e500:	1c0a      	adds	r2, r1, #0
 800e502:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800e508:	1dfb      	adds	r3, r7, #7
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <SD_disk_ioctl+0x24>
 800e510:	2304      	movs	r3, #4
 800e512:	e11b      	b.n	800e74c <SD_disk_ioctl+0x25c>
	res = RES_ERROR;
 800e514:	2327      	movs	r3, #39	; 0x27
 800e516:	18fb      	adds	r3, r7, r3
 800e518:	2201      	movs	r2, #1
 800e51a:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 800e51c:	1dbb      	adds	r3, r7, #6
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b05      	cmp	r3, #5
 800e522:	d127      	bne.n	800e574 <SD_disk_ioctl+0x84>
	{
		switch (*ptr)
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d013      	beq.n	800e554 <SD_disk_ioctl+0x64>
 800e52c:	dc1d      	bgt.n	800e56a <SD_disk_ioctl+0x7a>
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d002      	beq.n	800e538 <SD_disk_ioctl+0x48>
 800e532:	2b01      	cmp	r3, #1
 800e534:	d007      	beq.n	800e546 <SD_disk_ioctl+0x56>
 800e536:	e018      	b.n	800e56a <SD_disk_ioctl+0x7a>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800e538:	f7ff fca4 	bl	800de84 <SD_PowerOff>
			res = RES_OK;
 800e53c:	2327      	movs	r3, #39	; 0x27
 800e53e:	18fb      	adds	r3, r7, r3
 800e540:	2200      	movs	r2, #0
 800e542:	701a      	strb	r2, [r3, #0]
			break;
 800e544:	e0ff      	b.n	800e746 <SD_disk_ioctl+0x256>
		case 1:
			SD_PowerOn();		/* Power On */
 800e546:	f7ff fc55 	bl	800ddf4 <SD_PowerOn>
			res = RES_OK;
 800e54a:	2327      	movs	r3, #39	; 0x27
 800e54c:	18fb      	adds	r3, r7, r3
 800e54e:	2200      	movs	r2, #0
 800e550:	701a      	strb	r2, [r3, #0]
			break;
 800e552:	e0f8      	b.n	800e746 <SD_disk_ioctl+0x256>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	1c5c      	adds	r4, r3, #1
 800e558:	f7ff fc9e 	bl	800de98 <SD_CheckPower>
 800e55c:	0003      	movs	r3, r0
 800e55e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800e560:	2327      	movs	r3, #39	; 0x27
 800e562:	18fb      	adds	r3, r7, r3
 800e564:	2200      	movs	r2, #0
 800e566:	701a      	strb	r2, [r3, #0]
			break;
 800e568:	e0ed      	b.n	800e746 <SD_disk_ioctl+0x256>
		default:
			res = RES_PARERR;
 800e56a:	2327      	movs	r3, #39	; 0x27
 800e56c:	18fb      	adds	r3, r7, r3
 800e56e:	2204      	movs	r2, #4
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	e0e8      	b.n	800e746 <SD_disk_ioctl+0x256>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e574:	4b77      	ldr	r3, [pc, #476]	; (800e754 <SD_disk_ioctl+0x264>)
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	001a      	movs	r2, r3
 800e57c:	2301      	movs	r3, #1
 800e57e:	4013      	ands	r3, r2
 800e580:	d001      	beq.n	800e586 <SD_disk_ioctl+0x96>
 800e582:	2303      	movs	r3, #3
 800e584:	e0e2      	b.n	800e74c <SD_disk_ioctl+0x25c>

		SELECT();
 800e586:	f7ff fb95 	bl	800dcb4 <SELECT>

		switch (ctrl)
 800e58a:	1dbb      	adds	r3, r7, #6
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	2b0d      	cmp	r3, #13
 800e590:	d900      	bls.n	800e594 <SD_disk_ioctl+0xa4>
 800e592:	e0c8      	b.n	800e726 <SD_disk_ioctl+0x236>
 800e594:	009a      	lsls	r2, r3, #2
 800e596:	4b70      	ldr	r3, [pc, #448]	; (800e758 <SD_disk_ioctl+0x268>)
 800e598:	18d3      	adds	r3, r2, r3
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800e59e:	2100      	movs	r1, #0
 800e5a0:	2049      	movs	r0, #73	; 0x49
 800e5a2:	f7ff fd0f 	bl	800dfc4 <SD_SendCmd>
 800e5a6:	1e03      	subs	r3, r0, #0
 800e5a8:	d000      	beq.n	800e5ac <SD_disk_ioctl+0xbc>
 800e5aa:	e0c1      	b.n	800e730 <SD_disk_ioctl+0x240>
 800e5ac:	240c      	movs	r4, #12
 800e5ae:	193b      	adds	r3, r7, r4
 800e5b0:	2110      	movs	r1, #16
 800e5b2:	0018      	movs	r0, r3
 800e5b4:	f7ff fc7a 	bl	800deac <SD_RxDataBlock>
 800e5b8:	1e03      	subs	r3, r0, #0
 800e5ba:	d100      	bne.n	800e5be <SD_disk_ioctl+0xce>
 800e5bc:	e0b8      	b.n	800e730 <SD_disk_ioctl+0x240>
			{
				if ((csd[0] >> 6) == 1)
 800e5be:	0022      	movs	r2, r4
 800e5c0:	18bb      	adds	r3, r7, r2
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	099b      	lsrs	r3, r3, #6
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d114      	bne.n	800e5f6 <SD_disk_ioctl+0x106>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800e5cc:	0011      	movs	r1, r2
 800e5ce:	18bb      	adds	r3, r7, r2
 800e5d0:	7a5b      	ldrb	r3, [r3, #9]
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	187b      	adds	r3, r7, r1
 800e5d6:	7a1b      	ldrb	r3, [r3, #8]
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	021b      	lsls	r3, r3, #8
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	18d3      	adds	r3, r2, r3
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	211e      	movs	r1, #30
 800e5e4:	187b      	adds	r3, r7, r1
 800e5e6:	3201      	adds	r2, #1
 800e5e8:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 800e5ea:	187b      	adds	r3, r7, r1
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	029a      	lsls	r2, r3, #10
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	601a      	str	r2, [r3, #0]
 800e5f4:	e03a      	b.n	800e66c <SD_disk_ioctl+0x17c>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e5f6:	200c      	movs	r0, #12
 800e5f8:	183b      	adds	r3, r7, r0
 800e5fa:	795b      	ldrb	r3, [r3, #5]
 800e5fc:	220f      	movs	r2, #15
 800e5fe:	4013      	ands	r3, r2
 800e600:	b2da      	uxtb	r2, r3
 800e602:	183b      	adds	r3, r7, r0
 800e604:	7a9b      	ldrb	r3, [r3, #10]
 800e606:	09db      	lsrs	r3, r3, #7
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	18d3      	adds	r3, r2, r3
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	183b      	adds	r3, r7, r0
 800e610:	7a5b      	ldrb	r3, [r3, #9]
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2106      	movs	r1, #6
 800e618:	400b      	ands	r3, r1
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	18d3      	adds	r3, r2, r3
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	2426      	movs	r4, #38	; 0x26
 800e622:	193b      	adds	r3, r7, r4
 800e624:	3202      	adds	r2, #2
 800e626:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800e628:	183b      	adds	r3, r7, r0
 800e62a:	7a1b      	ldrb	r3, [r3, #8]
 800e62c:	099b      	lsrs	r3, r3, #6
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	b29a      	uxth	r2, r3
 800e632:	183b      	adds	r3, r7, r0
 800e634:	79db      	ldrb	r3, [r3, #7]
 800e636:	b29b      	uxth	r3, r3
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	18d3      	adds	r3, r2, r3
 800e63e:	b29a      	uxth	r2, r3
 800e640:	183b      	adds	r3, r7, r0
 800e642:	799b      	ldrb	r3, [r3, #6]
 800e644:	029b      	lsls	r3, r3, #10
 800e646:	b299      	uxth	r1, r3
 800e648:	23c0      	movs	r3, #192	; 0xc0
 800e64a:	011b      	lsls	r3, r3, #4
 800e64c:	400b      	ands	r3, r1
 800e64e:	b29b      	uxth	r3, r3
 800e650:	18d3      	adds	r3, r2, r3
 800e652:	b29a      	uxth	r2, r3
 800e654:	211e      	movs	r1, #30
 800e656:	187b      	adds	r3, r7, r1
 800e658:	3201      	adds	r2, #1
 800e65a:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800e65c:	187b      	adds	r3, r7, r1
 800e65e:	881a      	ldrh	r2, [r3, #0]
 800e660:	193b      	adds	r3, r7, r4
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	3b09      	subs	r3, #9
 800e666:	409a      	lsls	r2, r3
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800e66c:	2327      	movs	r3, #39	; 0x27
 800e66e:	18fb      	adds	r3, r7, r3
 800e670:	2200      	movs	r2, #0
 800e672:	701a      	strb	r2, [r3, #0]
			}
			break;
 800e674:	e05c      	b.n	800e730 <SD_disk_ioctl+0x240>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2280      	movs	r2, #128	; 0x80
 800e67a:	0092      	lsls	r2, r2, #2
 800e67c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800e67e:	2327      	movs	r3, #39	; 0x27
 800e680:	18fb      	adds	r3, r7, r3
 800e682:	2200      	movs	r2, #0
 800e684:	701a      	strb	r2, [r3, #0]
			break;
 800e686:	e05a      	b.n	800e73e <SD_disk_ioctl+0x24e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800e688:	f7ff fb94 	bl	800ddb4 <SD_ReadyWait>
 800e68c:	0003      	movs	r3, r0
 800e68e:	2bff      	cmp	r3, #255	; 0xff
 800e690:	d150      	bne.n	800e734 <SD_disk_ioctl+0x244>
 800e692:	2327      	movs	r3, #39	; 0x27
 800e694:	18fb      	adds	r3, r7, r3
 800e696:	2200      	movs	r2, #0
 800e698:	701a      	strb	r2, [r3, #0]
			break;
 800e69a:	e04b      	b.n	800e734 <SD_disk_ioctl+0x244>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e69c:	2100      	movs	r1, #0
 800e69e:	2049      	movs	r0, #73	; 0x49
 800e6a0:	f7ff fc90 	bl	800dfc4 <SD_SendCmd>
 800e6a4:	1e03      	subs	r3, r0, #0
 800e6a6:	d147      	bne.n	800e738 <SD_disk_ioctl+0x248>
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	2110      	movs	r1, #16
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	f7ff fbfd 	bl	800deac <SD_RxDataBlock>
 800e6b2:	1e03      	subs	r3, r0, #0
 800e6b4:	d040      	beq.n	800e738 <SD_disk_ioctl+0x248>
 800e6b6:	2327      	movs	r3, #39	; 0x27
 800e6b8:	18fb      	adds	r3, r7, r3
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	701a      	strb	r2, [r3, #0]
			break;
 800e6be:	e03b      	b.n	800e738 <SD_disk_ioctl+0x248>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	204a      	movs	r0, #74	; 0x4a
 800e6c4:	f7ff fc7e 	bl	800dfc4 <SD_SendCmd>
 800e6c8:	1e03      	subs	r3, r0, #0
 800e6ca:	d137      	bne.n	800e73c <SD_disk_ioctl+0x24c>
 800e6cc:	6a3b      	ldr	r3, [r7, #32]
 800e6ce:	2110      	movs	r1, #16
 800e6d0:	0018      	movs	r0, r3
 800e6d2:	f7ff fbeb 	bl	800deac <SD_RxDataBlock>
 800e6d6:	1e03      	subs	r3, r0, #0
 800e6d8:	d030      	beq.n	800e73c <SD_disk_ioctl+0x24c>
 800e6da:	2327      	movs	r3, #39	; 0x27
 800e6dc:	18fb      	adds	r3, r7, r3
 800e6de:	2200      	movs	r2, #0
 800e6e0:	701a      	strb	r2, [r3, #0]
			break;
 800e6e2:	e02b      	b.n	800e73c <SD_disk_ioctl+0x24c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800e6e4:	2100      	movs	r1, #0
 800e6e6:	207a      	movs	r0, #122	; 0x7a
 800e6e8:	f7ff fc6c 	bl	800dfc4 <SD_SendCmd>
 800e6ec:	1e03      	subs	r3, r0, #0
 800e6ee:	d11a      	bne.n	800e726 <SD_disk_ioctl+0x236>
			{
				for (n = 0; n < 4; n++)
 800e6f0:	2326      	movs	r3, #38	; 0x26
 800e6f2:	18fb      	adds	r3, r7, r3
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	701a      	strb	r2, [r3, #0]
 800e6f8:	e00c      	b.n	800e714 <SD_disk_ioctl+0x224>
				{
					*ptr++ = SPI_RxByte();
 800e6fa:	6a3c      	ldr	r4, [r7, #32]
 800e6fc:	1c63      	adds	r3, r4, #1
 800e6fe:	623b      	str	r3, [r7, #32]
 800e700:	f7ff fb2c 	bl	800dd5c <SPI_RxByte>
 800e704:	0003      	movs	r3, r0
 800e706:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800e708:	2126      	movs	r1, #38	; 0x26
 800e70a:	187b      	adds	r3, r7, r1
 800e70c:	781a      	ldrb	r2, [r3, #0]
 800e70e:	187b      	adds	r3, r7, r1
 800e710:	3201      	adds	r2, #1
 800e712:	701a      	strb	r2, [r3, #0]
 800e714:	2326      	movs	r3, #38	; 0x26
 800e716:	18fb      	adds	r3, r7, r3
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	2b03      	cmp	r3, #3
 800e71c:	d9ed      	bls.n	800e6fa <SD_disk_ioctl+0x20a>
				}
				res = RES_OK;
 800e71e:	2327      	movs	r3, #39	; 0x27
 800e720:	18fb      	adds	r3, r7, r3
 800e722:	2200      	movs	r2, #0
 800e724:	701a      	strb	r2, [r3, #0]
			}
		default:
			res = RES_PARERR;
 800e726:	2327      	movs	r3, #39	; 0x27
 800e728:	18fb      	adds	r3, r7, r3
 800e72a:	2204      	movs	r2, #4
 800e72c:	701a      	strb	r2, [r3, #0]
 800e72e:	e006      	b.n	800e73e <SD_disk_ioctl+0x24e>
			break;
 800e730:	46c0      	nop			; (mov r8, r8)
 800e732:	e004      	b.n	800e73e <SD_disk_ioctl+0x24e>
			break;
 800e734:	46c0      	nop			; (mov r8, r8)
 800e736:	e002      	b.n	800e73e <SD_disk_ioctl+0x24e>
			break;
 800e738:	46c0      	nop			; (mov r8, r8)
 800e73a:	e000      	b.n	800e73e <SD_disk_ioctl+0x24e>
			break;
 800e73c:	46c0      	nop			; (mov r8, r8)
		}

		DESELECT();
 800e73e:	f7ff fac8 	bl	800dcd2 <DESELECT>
		SPI_RxByte();
 800e742:	f7ff fb0b 	bl	800dd5c <SPI_RxByte>
	}

	return res;
 800e746:	2327      	movs	r3, #39	; 0x27
 800e748:	18fb      	adds	r3, r7, r3
 800e74a:	781b      	ldrb	r3, [r3, #0]
}
 800e74c:	0018      	movs	r0, r3
 800e74e:	46bd      	mov	sp, r7
 800e750:	b00b      	add	sp, #44	; 0x2c
 800e752:	bd90      	pop	{r4, r7, pc}
 800e754:	20000020 	.word	0x20000020
 800e758:	08012c64 	.word	0x08012c64

0800e75c <__errno>:
 800e75c:	4b01      	ldr	r3, [pc, #4]	; (800e764 <__errno+0x8>)
 800e75e:	6818      	ldr	r0, [r3, #0]
 800e760:	4770      	bx	lr
 800e762:	46c0      	nop			; (mov r8, r8)
 800e764:	20000024 	.word	0x20000024

0800e768 <__libc_init_array>:
 800e768:	b570      	push	{r4, r5, r6, lr}
 800e76a:	2600      	movs	r6, #0
 800e76c:	4d0c      	ldr	r5, [pc, #48]	; (800e7a0 <__libc_init_array+0x38>)
 800e76e:	4c0d      	ldr	r4, [pc, #52]	; (800e7a4 <__libc_init_array+0x3c>)
 800e770:	1b64      	subs	r4, r4, r5
 800e772:	10a4      	asrs	r4, r4, #2
 800e774:	42a6      	cmp	r6, r4
 800e776:	d109      	bne.n	800e78c <__libc_init_array+0x24>
 800e778:	2600      	movs	r6, #0
 800e77a:	f004 f855 	bl	8012828 <_init>
 800e77e:	4d0a      	ldr	r5, [pc, #40]	; (800e7a8 <__libc_init_array+0x40>)
 800e780:	4c0a      	ldr	r4, [pc, #40]	; (800e7ac <__libc_init_array+0x44>)
 800e782:	1b64      	subs	r4, r4, r5
 800e784:	10a4      	asrs	r4, r4, #2
 800e786:	42a6      	cmp	r6, r4
 800e788:	d105      	bne.n	800e796 <__libc_init_array+0x2e>
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	00b3      	lsls	r3, r6, #2
 800e78e:	58eb      	ldr	r3, [r5, r3]
 800e790:	4798      	blx	r3
 800e792:	3601      	adds	r6, #1
 800e794:	e7ee      	b.n	800e774 <__libc_init_array+0xc>
 800e796:	00b3      	lsls	r3, r6, #2
 800e798:	58eb      	ldr	r3, [r5, r3]
 800e79a:	4798      	blx	r3
 800e79c:	3601      	adds	r6, #1
 800e79e:	e7f2      	b.n	800e786 <__libc_init_array+0x1e>
 800e7a0:	080130e0 	.word	0x080130e0
 800e7a4:	080130e0 	.word	0x080130e0
 800e7a8:	080130e0 	.word	0x080130e0
 800e7ac:	080130e4 	.word	0x080130e4

0800e7b0 <memcpy>:
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	b510      	push	{r4, lr}
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d100      	bne.n	800e7ba <memcpy+0xa>
 800e7b8:	bd10      	pop	{r4, pc}
 800e7ba:	5ccc      	ldrb	r4, [r1, r3]
 800e7bc:	54c4      	strb	r4, [r0, r3]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	e7f8      	b.n	800e7b4 <memcpy+0x4>

0800e7c2 <memset>:
 800e7c2:	0003      	movs	r3, r0
 800e7c4:	1882      	adds	r2, r0, r2
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d100      	bne.n	800e7cc <memset+0xa>
 800e7ca:	4770      	bx	lr
 800e7cc:	7019      	strb	r1, [r3, #0]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	e7f9      	b.n	800e7c6 <memset+0x4>

0800e7d2 <__cvt>:
 800e7d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7d4:	001e      	movs	r6, r3
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	0014      	movs	r4, r2
 800e7da:	b08b      	sub	sp, #44	; 0x2c
 800e7dc:	429e      	cmp	r6, r3
 800e7de:	da04      	bge.n	800e7ea <__cvt+0x18>
 800e7e0:	2180      	movs	r1, #128	; 0x80
 800e7e2:	0609      	lsls	r1, r1, #24
 800e7e4:	1873      	adds	r3, r6, r1
 800e7e6:	001e      	movs	r6, r3
 800e7e8:	232d      	movs	r3, #45	; 0x2d
 800e7ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7ec:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e7ee:	7013      	strb	r3, [r2, #0]
 800e7f0:	2320      	movs	r3, #32
 800e7f2:	2203      	movs	r2, #3
 800e7f4:	439f      	bics	r7, r3
 800e7f6:	2f46      	cmp	r7, #70	; 0x46
 800e7f8:	d007      	beq.n	800e80a <__cvt+0x38>
 800e7fa:	003b      	movs	r3, r7
 800e7fc:	3b45      	subs	r3, #69	; 0x45
 800e7fe:	4259      	negs	r1, r3
 800e800:	414b      	adcs	r3, r1
 800e802:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e804:	3a01      	subs	r2, #1
 800e806:	18cb      	adds	r3, r1, r3
 800e808:	9310      	str	r3, [sp, #64]	; 0x40
 800e80a:	ab09      	add	r3, sp, #36	; 0x24
 800e80c:	9304      	str	r3, [sp, #16]
 800e80e:	ab08      	add	r3, sp, #32
 800e810:	9303      	str	r3, [sp, #12]
 800e812:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e814:	9200      	str	r2, [sp, #0]
 800e816:	9302      	str	r3, [sp, #8]
 800e818:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e81a:	0022      	movs	r2, r4
 800e81c:	9301      	str	r3, [sp, #4]
 800e81e:	0033      	movs	r3, r6
 800e820:	f000 fd18 	bl	800f254 <_dtoa_r>
 800e824:	0005      	movs	r5, r0
 800e826:	2f47      	cmp	r7, #71	; 0x47
 800e828:	d102      	bne.n	800e830 <__cvt+0x5e>
 800e82a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e82c:	07db      	lsls	r3, r3, #31
 800e82e:	d528      	bpl.n	800e882 <__cvt+0xb0>
 800e830:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e832:	18eb      	adds	r3, r5, r3
 800e834:	9307      	str	r3, [sp, #28]
 800e836:	2f46      	cmp	r7, #70	; 0x46
 800e838:	d114      	bne.n	800e864 <__cvt+0x92>
 800e83a:	782b      	ldrb	r3, [r5, #0]
 800e83c:	2b30      	cmp	r3, #48	; 0x30
 800e83e:	d10c      	bne.n	800e85a <__cvt+0x88>
 800e840:	2200      	movs	r2, #0
 800e842:	2300      	movs	r3, #0
 800e844:	0020      	movs	r0, r4
 800e846:	0031      	movs	r1, r6
 800e848:	f7f1 fe08 	bl	800045c <__aeabi_dcmpeq>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d104      	bne.n	800e85a <__cvt+0x88>
 800e850:	2301      	movs	r3, #1
 800e852:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e854:	1a9b      	subs	r3, r3, r2
 800e856:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e858:	6013      	str	r3, [r2, #0]
 800e85a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e85c:	9a07      	ldr	r2, [sp, #28]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	18d3      	adds	r3, r2, r3
 800e862:	9307      	str	r3, [sp, #28]
 800e864:	2200      	movs	r2, #0
 800e866:	2300      	movs	r3, #0
 800e868:	0020      	movs	r0, r4
 800e86a:	0031      	movs	r1, r6
 800e86c:	f7f1 fdf6 	bl	800045c <__aeabi_dcmpeq>
 800e870:	2800      	cmp	r0, #0
 800e872:	d001      	beq.n	800e878 <__cvt+0xa6>
 800e874:	9b07      	ldr	r3, [sp, #28]
 800e876:	9309      	str	r3, [sp, #36]	; 0x24
 800e878:	2230      	movs	r2, #48	; 0x30
 800e87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e87c:	9907      	ldr	r1, [sp, #28]
 800e87e:	428b      	cmp	r3, r1
 800e880:	d306      	bcc.n	800e890 <__cvt+0xbe>
 800e882:	0028      	movs	r0, r5
 800e884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e886:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e888:	1b5b      	subs	r3, r3, r5
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	b00b      	add	sp, #44	; 0x2c
 800e88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e890:	1c59      	adds	r1, r3, #1
 800e892:	9109      	str	r1, [sp, #36]	; 0x24
 800e894:	701a      	strb	r2, [r3, #0]
 800e896:	e7f0      	b.n	800e87a <__cvt+0xa8>

0800e898 <__exponent>:
 800e898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e89a:	1c83      	adds	r3, r0, #2
 800e89c:	b087      	sub	sp, #28
 800e89e:	9303      	str	r3, [sp, #12]
 800e8a0:	0005      	movs	r5, r0
 800e8a2:	000c      	movs	r4, r1
 800e8a4:	232b      	movs	r3, #43	; 0x2b
 800e8a6:	7002      	strb	r2, [r0, #0]
 800e8a8:	2900      	cmp	r1, #0
 800e8aa:	da01      	bge.n	800e8b0 <__exponent+0x18>
 800e8ac:	424c      	negs	r4, r1
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	706b      	strb	r3, [r5, #1]
 800e8b2:	2c09      	cmp	r4, #9
 800e8b4:	dd31      	ble.n	800e91a <__exponent+0x82>
 800e8b6:	270a      	movs	r7, #10
 800e8b8:	ab04      	add	r3, sp, #16
 800e8ba:	1dde      	adds	r6, r3, #7
 800e8bc:	0020      	movs	r0, r4
 800e8be:	0039      	movs	r1, r7
 800e8c0:	9601      	str	r6, [sp, #4]
 800e8c2:	f7f1 fdb5 	bl	8000430 <__aeabi_idivmod>
 800e8c6:	3e01      	subs	r6, #1
 800e8c8:	3130      	adds	r1, #48	; 0x30
 800e8ca:	0020      	movs	r0, r4
 800e8cc:	7031      	strb	r1, [r6, #0]
 800e8ce:	0039      	movs	r1, r7
 800e8d0:	9402      	str	r4, [sp, #8]
 800e8d2:	f7f1 fcc7 	bl	8000264 <__divsi3>
 800e8d6:	9b02      	ldr	r3, [sp, #8]
 800e8d8:	0004      	movs	r4, r0
 800e8da:	2b63      	cmp	r3, #99	; 0x63
 800e8dc:	dcee      	bgt.n	800e8bc <__exponent+0x24>
 800e8de:	9b01      	ldr	r3, [sp, #4]
 800e8e0:	3430      	adds	r4, #48	; 0x30
 800e8e2:	1e9a      	subs	r2, r3, #2
 800e8e4:	0013      	movs	r3, r2
 800e8e6:	9903      	ldr	r1, [sp, #12]
 800e8e8:	7014      	strb	r4, [r2, #0]
 800e8ea:	a804      	add	r0, sp, #16
 800e8ec:	3007      	adds	r0, #7
 800e8ee:	4298      	cmp	r0, r3
 800e8f0:	d80e      	bhi.n	800e910 <__exponent+0x78>
 800e8f2:	ab04      	add	r3, sp, #16
 800e8f4:	3307      	adds	r3, #7
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d804      	bhi.n	800e906 <__exponent+0x6e>
 800e8fc:	ab04      	add	r3, sp, #16
 800e8fe:	3009      	adds	r0, #9
 800e900:	18c0      	adds	r0, r0, r3
 800e902:	9b01      	ldr	r3, [sp, #4]
 800e904:	1ac0      	subs	r0, r0, r3
 800e906:	9b03      	ldr	r3, [sp, #12]
 800e908:	1818      	adds	r0, r3, r0
 800e90a:	1b40      	subs	r0, r0, r5
 800e90c:	b007      	add	sp, #28
 800e90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e910:	7818      	ldrb	r0, [r3, #0]
 800e912:	3301      	adds	r3, #1
 800e914:	7008      	strb	r0, [r1, #0]
 800e916:	3101      	adds	r1, #1
 800e918:	e7e7      	b.n	800e8ea <__exponent+0x52>
 800e91a:	2330      	movs	r3, #48	; 0x30
 800e91c:	18e4      	adds	r4, r4, r3
 800e91e:	70ab      	strb	r3, [r5, #2]
 800e920:	1d28      	adds	r0, r5, #4
 800e922:	70ec      	strb	r4, [r5, #3]
 800e924:	e7f1      	b.n	800e90a <__exponent+0x72>
	...

0800e928 <_printf_float>:
 800e928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e92a:	b095      	sub	sp, #84	; 0x54
 800e92c:	000c      	movs	r4, r1
 800e92e:	9209      	str	r2, [sp, #36]	; 0x24
 800e930:	001e      	movs	r6, r3
 800e932:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e934:	0007      	movs	r7, r0
 800e936:	f001 fba9 	bl	801008c <_localeconv_r>
 800e93a:	6803      	ldr	r3, [r0, #0]
 800e93c:	0018      	movs	r0, r3
 800e93e:	930c      	str	r3, [sp, #48]	; 0x30
 800e940:	f7f1 fbea 	bl	8000118 <strlen>
 800e944:	2300      	movs	r3, #0
 800e946:	9312      	str	r3, [sp, #72]	; 0x48
 800e948:	7e23      	ldrb	r3, [r4, #24]
 800e94a:	2207      	movs	r2, #7
 800e94c:	930a      	str	r3, [sp, #40]	; 0x28
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	900e      	str	r0, [sp, #56]	; 0x38
 800e952:	930d      	str	r3, [sp, #52]	; 0x34
 800e954:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	05c9      	lsls	r1, r1, #23
 800e95a:	d547      	bpl.n	800e9ec <_printf_float+0xc4>
 800e95c:	189b      	adds	r3, r3, r2
 800e95e:	4393      	bics	r3, r2
 800e960:	001a      	movs	r2, r3
 800e962:	3208      	adds	r2, #8
 800e964:	602a      	str	r2, [r5, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	64a2      	str	r2, [r4, #72]	; 0x48
 800e96c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e96e:	2201      	movs	r2, #1
 800e970:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e972:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800e974:	930b      	str	r3, [sp, #44]	; 0x2c
 800e976:	006b      	lsls	r3, r5, #1
 800e978:	085b      	lsrs	r3, r3, #1
 800e97a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e97c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e97e:	4ba7      	ldr	r3, [pc, #668]	; (800ec1c <_printf_float+0x2f4>)
 800e980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e982:	4252      	negs	r2, r2
 800e984:	f7f4 f996 	bl	8002cb4 <__aeabi_dcmpun>
 800e988:	2800      	cmp	r0, #0
 800e98a:	d131      	bne.n	800e9f0 <_printf_float+0xc8>
 800e98c:	2201      	movs	r2, #1
 800e98e:	4ba3      	ldr	r3, [pc, #652]	; (800ec1c <_printf_float+0x2f4>)
 800e990:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e992:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e994:	4252      	negs	r2, r2
 800e996:	f7f1 fd71 	bl	800047c <__aeabi_dcmple>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d128      	bne.n	800e9f0 <_printf_float+0xc8>
 800e99e:	2200      	movs	r2, #0
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	0029      	movs	r1, r5
 800e9a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e9a6:	f7f1 fd5f 	bl	8000468 <__aeabi_dcmplt>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d003      	beq.n	800e9b6 <_printf_float+0x8e>
 800e9ae:	0023      	movs	r3, r4
 800e9b0:	222d      	movs	r2, #45	; 0x2d
 800e9b2:	3343      	adds	r3, #67	; 0x43
 800e9b4:	701a      	strb	r2, [r3, #0]
 800e9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9b8:	4d99      	ldr	r5, [pc, #612]	; (800ec20 <_printf_float+0x2f8>)
 800e9ba:	2b47      	cmp	r3, #71	; 0x47
 800e9bc:	d900      	bls.n	800e9c0 <_printf_float+0x98>
 800e9be:	4d99      	ldr	r5, [pc, #612]	; (800ec24 <_printf_float+0x2fc>)
 800e9c0:	2303      	movs	r3, #3
 800e9c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9c4:	6123      	str	r3, [r4, #16]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	439a      	bics	r2, r3
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	6022      	str	r2, [r4, #0]
 800e9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d2:	0021      	movs	r1, r4
 800e9d4:	0038      	movs	r0, r7
 800e9d6:	9600      	str	r6, [sp, #0]
 800e9d8:	aa13      	add	r2, sp, #76	; 0x4c
 800e9da:	f000 f9e7 	bl	800edac <_printf_common>
 800e9de:	1c43      	adds	r3, r0, #1
 800e9e0:	d000      	beq.n	800e9e4 <_printf_float+0xbc>
 800e9e2:	e0a2      	b.n	800eb2a <_printf_float+0x202>
 800e9e4:	2001      	movs	r0, #1
 800e9e6:	4240      	negs	r0, r0
 800e9e8:	b015      	add	sp, #84	; 0x54
 800e9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ec:	3307      	adds	r3, #7
 800e9ee:	e7b6      	b.n	800e95e <_printf_float+0x36>
 800e9f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9f2:	002b      	movs	r3, r5
 800e9f4:	0010      	movs	r0, r2
 800e9f6:	0029      	movs	r1, r5
 800e9f8:	f7f4 f95c 	bl	8002cb4 <__aeabi_dcmpun>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d00b      	beq.n	800ea18 <_printf_float+0xf0>
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	da03      	bge.n	800ea0c <_printf_float+0xe4>
 800ea04:	0023      	movs	r3, r4
 800ea06:	222d      	movs	r2, #45	; 0x2d
 800ea08:	3343      	adds	r3, #67	; 0x43
 800ea0a:	701a      	strb	r2, [r3, #0]
 800ea0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea0e:	4d86      	ldr	r5, [pc, #536]	; (800ec28 <_printf_float+0x300>)
 800ea10:	2b47      	cmp	r3, #71	; 0x47
 800ea12:	d9d5      	bls.n	800e9c0 <_printf_float+0x98>
 800ea14:	4d85      	ldr	r5, [pc, #532]	; (800ec2c <_printf_float+0x304>)
 800ea16:	e7d3      	b.n	800e9c0 <_printf_float+0x98>
 800ea18:	2220      	movs	r2, #32
 800ea1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ea1c:	6863      	ldr	r3, [r4, #4]
 800ea1e:	4391      	bics	r1, r2
 800ea20:	910f      	str	r1, [sp, #60]	; 0x3c
 800ea22:	1c5a      	adds	r2, r3, #1
 800ea24:	d149      	bne.n	800eaba <_printf_float+0x192>
 800ea26:	3307      	adds	r3, #7
 800ea28:	6063      	str	r3, [r4, #4]
 800ea2a:	2380      	movs	r3, #128	; 0x80
 800ea2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea2e:	00db      	lsls	r3, r3, #3
 800ea30:	4313      	orrs	r3, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	9206      	str	r2, [sp, #24]
 800ea36:	aa12      	add	r2, sp, #72	; 0x48
 800ea38:	9205      	str	r2, [sp, #20]
 800ea3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea3c:	a908      	add	r1, sp, #32
 800ea3e:	9204      	str	r2, [sp, #16]
 800ea40:	aa11      	add	r2, sp, #68	; 0x44
 800ea42:	9203      	str	r2, [sp, #12]
 800ea44:	2223      	movs	r2, #35	; 0x23
 800ea46:	6023      	str	r3, [r4, #0]
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	6863      	ldr	r3, [r4, #4]
 800ea4c:	1852      	adds	r2, r2, r1
 800ea4e:	9202      	str	r2, [sp, #8]
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	0038      	movs	r0, r7
 800ea54:	002b      	movs	r3, r5
 800ea56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea58:	f7ff febb 	bl	800e7d2 <__cvt>
 800ea5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea5e:	0005      	movs	r5, r0
 800ea60:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ea62:	2b47      	cmp	r3, #71	; 0x47
 800ea64:	d108      	bne.n	800ea78 <_printf_float+0x150>
 800ea66:	1ccb      	adds	r3, r1, #3
 800ea68:	db02      	blt.n	800ea70 <_printf_float+0x148>
 800ea6a:	6863      	ldr	r3, [r4, #4]
 800ea6c:	4299      	cmp	r1, r3
 800ea6e:	dd48      	ble.n	800eb02 <_printf_float+0x1da>
 800ea70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea72:	3b02      	subs	r3, #2
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	930a      	str	r3, [sp, #40]	; 0x28
 800ea78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea7a:	2b65      	cmp	r3, #101	; 0x65
 800ea7c:	d824      	bhi.n	800eac8 <_printf_float+0x1a0>
 800ea7e:	0020      	movs	r0, r4
 800ea80:	001a      	movs	r2, r3
 800ea82:	3901      	subs	r1, #1
 800ea84:	3050      	adds	r0, #80	; 0x50
 800ea86:	9111      	str	r1, [sp, #68]	; 0x44
 800ea88:	f7ff ff06 	bl	800e898 <__exponent>
 800ea8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea8e:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea90:	1813      	adds	r3, r2, r0
 800ea92:	6123      	str	r3, [r4, #16]
 800ea94:	2a01      	cmp	r2, #1
 800ea96:	dc02      	bgt.n	800ea9e <_printf_float+0x176>
 800ea98:	6822      	ldr	r2, [r4, #0]
 800ea9a:	07d2      	lsls	r2, r2, #31
 800ea9c:	d501      	bpl.n	800eaa2 <_printf_float+0x17a>
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	6123      	str	r3, [r4, #16]
 800eaa2:	2323      	movs	r3, #35	; 0x23
 800eaa4:	aa08      	add	r2, sp, #32
 800eaa6:	189b      	adds	r3, r3, r2
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d100      	bne.n	800eab0 <_printf_float+0x188>
 800eaae:	e78f      	b.n	800e9d0 <_printf_float+0xa8>
 800eab0:	0023      	movs	r3, r4
 800eab2:	222d      	movs	r2, #45	; 0x2d
 800eab4:	3343      	adds	r3, #67	; 0x43
 800eab6:	701a      	strb	r2, [r3, #0]
 800eab8:	e78a      	b.n	800e9d0 <_printf_float+0xa8>
 800eaba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eabc:	2a47      	cmp	r2, #71	; 0x47
 800eabe:	d1b4      	bne.n	800ea2a <_printf_float+0x102>
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1b2      	bne.n	800ea2a <_printf_float+0x102>
 800eac4:	3301      	adds	r3, #1
 800eac6:	e7af      	b.n	800ea28 <_printf_float+0x100>
 800eac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaca:	2b66      	cmp	r3, #102	; 0x66
 800eacc:	d11b      	bne.n	800eb06 <_printf_float+0x1de>
 800eace:	6863      	ldr	r3, [r4, #4]
 800ead0:	2900      	cmp	r1, #0
 800ead2:	dd0d      	ble.n	800eaf0 <_printf_float+0x1c8>
 800ead4:	6121      	str	r1, [r4, #16]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d102      	bne.n	800eae0 <_printf_float+0x1b8>
 800eada:	6822      	ldr	r2, [r4, #0]
 800eadc:	07d2      	lsls	r2, r2, #31
 800eade:	d502      	bpl.n	800eae6 <_printf_float+0x1be>
 800eae0:	3301      	adds	r3, #1
 800eae2:	1859      	adds	r1, r3, r1
 800eae4:	6121      	str	r1, [r4, #16]
 800eae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eae8:	65a3      	str	r3, [r4, #88]	; 0x58
 800eaea:	2300      	movs	r3, #0
 800eaec:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaee:	e7d8      	b.n	800eaa2 <_printf_float+0x17a>
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d103      	bne.n	800eafc <_printf_float+0x1d4>
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	6821      	ldr	r1, [r4, #0]
 800eaf8:	4211      	tst	r1, r2
 800eafa:	d000      	beq.n	800eafe <_printf_float+0x1d6>
 800eafc:	1c9a      	adds	r2, r3, #2
 800eafe:	6122      	str	r2, [r4, #16]
 800eb00:	e7f1      	b.n	800eae6 <_printf_float+0x1be>
 800eb02:	2367      	movs	r3, #103	; 0x67
 800eb04:	930a      	str	r3, [sp, #40]	; 0x28
 800eb06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	db06      	blt.n	800eb1c <_printf_float+0x1f4>
 800eb0e:	6822      	ldr	r2, [r4, #0]
 800eb10:	6123      	str	r3, [r4, #16]
 800eb12:	07d2      	lsls	r2, r2, #31
 800eb14:	d5e7      	bpl.n	800eae6 <_printf_float+0x1be>
 800eb16:	3301      	adds	r3, #1
 800eb18:	6123      	str	r3, [r4, #16]
 800eb1a:	e7e4      	b.n	800eae6 <_printf_float+0x1be>
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	dc01      	bgt.n	800eb26 <_printf_float+0x1fe>
 800eb22:	1849      	adds	r1, r1, r1
 800eb24:	1ac9      	subs	r1, r1, r3
 800eb26:	1852      	adds	r2, r2, r1
 800eb28:	e7e9      	b.n	800eafe <_printf_float+0x1d6>
 800eb2a:	6822      	ldr	r2, [r4, #0]
 800eb2c:	0553      	lsls	r3, r2, #21
 800eb2e:	d407      	bmi.n	800eb40 <_printf_float+0x218>
 800eb30:	6923      	ldr	r3, [r4, #16]
 800eb32:	002a      	movs	r2, r5
 800eb34:	0038      	movs	r0, r7
 800eb36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb38:	47b0      	blx	r6
 800eb3a:	1c43      	adds	r3, r0, #1
 800eb3c:	d128      	bne.n	800eb90 <_printf_float+0x268>
 800eb3e:	e751      	b.n	800e9e4 <_printf_float+0xbc>
 800eb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb42:	2b65      	cmp	r3, #101	; 0x65
 800eb44:	d800      	bhi.n	800eb48 <_printf_float+0x220>
 800eb46:	e0e1      	b.n	800ed0c <_printf_float+0x3e4>
 800eb48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800eb4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	2300      	movs	r3, #0
 800eb50:	f7f1 fc84 	bl	800045c <__aeabi_dcmpeq>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d031      	beq.n	800ebbc <_printf_float+0x294>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	0038      	movs	r0, r7
 800eb5c:	4a34      	ldr	r2, [pc, #208]	; (800ec30 <_printf_float+0x308>)
 800eb5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb60:	47b0      	blx	r6
 800eb62:	1c43      	adds	r3, r0, #1
 800eb64:	d100      	bne.n	800eb68 <_printf_float+0x240>
 800eb66:	e73d      	b.n	800e9e4 <_printf_float+0xbc>
 800eb68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	db02      	blt.n	800eb76 <_printf_float+0x24e>
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	07db      	lsls	r3, r3, #31
 800eb74:	d50c      	bpl.n	800eb90 <_printf_float+0x268>
 800eb76:	0038      	movs	r0, r7
 800eb78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb7e:	47b0      	blx	r6
 800eb80:	2500      	movs	r5, #0
 800eb82:	1c43      	adds	r3, r0, #1
 800eb84:	d100      	bne.n	800eb88 <_printf_float+0x260>
 800eb86:	e72d      	b.n	800e9e4 <_printf_float+0xbc>
 800eb88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	42ab      	cmp	r3, r5
 800eb8e:	dc0a      	bgt.n	800eba6 <_printf_float+0x27e>
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	079b      	lsls	r3, r3, #30
 800eb94:	d500      	bpl.n	800eb98 <_printf_float+0x270>
 800eb96:	e106      	b.n	800eda6 <_printf_float+0x47e>
 800eb98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb9a:	68e0      	ldr	r0, [r4, #12]
 800eb9c:	4298      	cmp	r0, r3
 800eb9e:	db00      	blt.n	800eba2 <_printf_float+0x27a>
 800eba0:	e722      	b.n	800e9e8 <_printf_float+0xc0>
 800eba2:	0018      	movs	r0, r3
 800eba4:	e720      	b.n	800e9e8 <_printf_float+0xc0>
 800eba6:	0022      	movs	r2, r4
 800eba8:	2301      	movs	r3, #1
 800ebaa:	0038      	movs	r0, r7
 800ebac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebae:	321a      	adds	r2, #26
 800ebb0:	47b0      	blx	r6
 800ebb2:	1c43      	adds	r3, r0, #1
 800ebb4:	d100      	bne.n	800ebb8 <_printf_float+0x290>
 800ebb6:	e715      	b.n	800e9e4 <_printf_float+0xbc>
 800ebb8:	3501      	adds	r5, #1
 800ebba:	e7e5      	b.n	800eb88 <_printf_float+0x260>
 800ebbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	dc38      	bgt.n	800ec34 <_printf_float+0x30c>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	0038      	movs	r0, r7
 800ebc6:	4a1a      	ldr	r2, [pc, #104]	; (800ec30 <_printf_float+0x308>)
 800ebc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebca:	47b0      	blx	r6
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	d100      	bne.n	800ebd2 <_printf_float+0x2aa>
 800ebd0:	e708      	b.n	800e9e4 <_printf_float+0xbc>
 800ebd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	d102      	bne.n	800ebe0 <_printf_float+0x2b8>
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	07db      	lsls	r3, r3, #31
 800ebde:	d5d7      	bpl.n	800eb90 <_printf_float+0x268>
 800ebe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebe2:	0038      	movs	r0, r7
 800ebe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebe8:	47b0      	blx	r6
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	d100      	bne.n	800ebf0 <_printf_float+0x2c8>
 800ebee:	e6f9      	b.n	800e9e4 <_printf_float+0xbc>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	930a      	str	r3, [sp, #40]	; 0x28
 800ebf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebf8:	425b      	negs	r3, r3
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	dc01      	bgt.n	800ec02 <_printf_float+0x2da>
 800ebfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec00:	e797      	b.n	800eb32 <_printf_float+0x20a>
 800ec02:	0022      	movs	r2, r4
 800ec04:	2301      	movs	r3, #1
 800ec06:	0038      	movs	r0, r7
 800ec08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec0a:	321a      	adds	r2, #26
 800ec0c:	47b0      	blx	r6
 800ec0e:	1c43      	adds	r3, r0, #1
 800ec10:	d100      	bne.n	800ec14 <_printf_float+0x2ec>
 800ec12:	e6e7      	b.n	800e9e4 <_printf_float+0xbc>
 800ec14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec16:	3301      	adds	r3, #1
 800ec18:	e7eb      	b.n	800ebf2 <_printf_float+0x2ca>
 800ec1a:	46c0      	nop			; (mov r8, r8)
 800ec1c:	7fefffff 	.word	0x7fefffff
 800ec20:	08012ca0 	.word	0x08012ca0
 800ec24:	08012ca4 	.word	0x08012ca4
 800ec28:	08012ca8 	.word	0x08012ca8
 800ec2c:	08012cac 	.word	0x08012cac
 800ec30:	08012cb0 	.word	0x08012cb0
 800ec34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec38:	920a      	str	r2, [sp, #40]	; 0x28
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	dd00      	ble.n	800ec40 <_printf_float+0x318>
 800ec3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	dc3c      	bgt.n	800ecc0 <_printf_float+0x398>
 800ec46:	2300      	movs	r3, #0
 800ec48:	930d      	str	r3, [sp, #52]	; 0x34
 800ec4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec4c:	43db      	mvns	r3, r3
 800ec4e:	17db      	asrs	r3, r3, #31
 800ec50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5a:	4013      	ands	r3, r2
 800ec5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec62:	4293      	cmp	r3, r2
 800ec64:	dc34      	bgt.n	800ecd0 <_printf_float+0x3a8>
 800ec66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	db3d      	blt.n	800ecea <_printf_float+0x3c2>
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	07db      	lsls	r3, r3, #31
 800ec72:	d43a      	bmi.n	800ecea <_printf_float+0x3c2>
 800ec74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec78:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	1a52      	subs	r2, r2, r1
 800ec7e:	920a      	str	r2, [sp, #40]	; 0x28
 800ec80:	429a      	cmp	r2, r3
 800ec82:	dd00      	ble.n	800ec86 <_printf_float+0x35e>
 800ec84:	930a      	str	r3, [sp, #40]	; 0x28
 800ec86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc36      	bgt.n	800ecfa <_printf_float+0x3d2>
 800ec8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec8e:	2500      	movs	r5, #0
 800ec90:	43db      	mvns	r3, r3
 800ec92:	17db      	asrs	r3, r3, #31
 800ec94:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec9c:	1a9b      	subs	r3, r3, r2
 800ec9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eca0:	400a      	ands	r2, r1
 800eca2:	1a9b      	subs	r3, r3, r2
 800eca4:	42ab      	cmp	r3, r5
 800eca6:	dc00      	bgt.n	800ecaa <_printf_float+0x382>
 800eca8:	e772      	b.n	800eb90 <_printf_float+0x268>
 800ecaa:	0022      	movs	r2, r4
 800ecac:	2301      	movs	r3, #1
 800ecae:	0038      	movs	r0, r7
 800ecb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecb2:	321a      	adds	r2, #26
 800ecb4:	47b0      	blx	r6
 800ecb6:	1c43      	adds	r3, r0, #1
 800ecb8:	d100      	bne.n	800ecbc <_printf_float+0x394>
 800ecba:	e693      	b.n	800e9e4 <_printf_float+0xbc>
 800ecbc:	3501      	adds	r5, #1
 800ecbe:	e7ea      	b.n	800ec96 <_printf_float+0x36e>
 800ecc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecc2:	002a      	movs	r2, r5
 800ecc4:	0038      	movs	r0, r7
 800ecc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecc8:	47b0      	blx	r6
 800ecca:	1c43      	adds	r3, r0, #1
 800eccc:	d1bb      	bne.n	800ec46 <_printf_float+0x31e>
 800ecce:	e689      	b.n	800e9e4 <_printf_float+0xbc>
 800ecd0:	0022      	movs	r2, r4
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	0038      	movs	r0, r7
 800ecd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecd8:	321a      	adds	r2, #26
 800ecda:	47b0      	blx	r6
 800ecdc:	1c43      	adds	r3, r0, #1
 800ecde:	d100      	bne.n	800ece2 <_printf_float+0x3ba>
 800ece0:	e680      	b.n	800e9e4 <_printf_float+0xbc>
 800ece2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ece4:	3301      	adds	r3, #1
 800ece6:	930d      	str	r3, [sp, #52]	; 0x34
 800ece8:	e7b3      	b.n	800ec52 <_printf_float+0x32a>
 800ecea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecec:	0038      	movs	r0, r7
 800ecee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ecf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecf2:	47b0      	blx	r6
 800ecf4:	1c43      	adds	r3, r0, #1
 800ecf6:	d1bd      	bne.n	800ec74 <_printf_float+0x34c>
 800ecf8:	e674      	b.n	800e9e4 <_printf_float+0xbc>
 800ecfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecfc:	0038      	movs	r0, r7
 800ecfe:	18ea      	adds	r2, r5, r3
 800ed00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed04:	47b0      	blx	r6
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	d1c0      	bne.n	800ec8c <_printf_float+0x364>
 800ed0a:	e66b      	b.n	800e9e4 <_printf_float+0xbc>
 800ed0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	dc02      	bgt.n	800ed18 <_printf_float+0x3f0>
 800ed12:	2301      	movs	r3, #1
 800ed14:	421a      	tst	r2, r3
 800ed16:	d034      	beq.n	800ed82 <_printf_float+0x45a>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	002a      	movs	r2, r5
 800ed1c:	0038      	movs	r0, r7
 800ed1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed20:	47b0      	blx	r6
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	d100      	bne.n	800ed28 <_printf_float+0x400>
 800ed26:	e65d      	b.n	800e9e4 <_printf_float+0xbc>
 800ed28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed2a:	0038      	movs	r0, r7
 800ed2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed30:	47b0      	blx	r6
 800ed32:	1c43      	adds	r3, r0, #1
 800ed34:	d100      	bne.n	800ed38 <_printf_float+0x410>
 800ed36:	e655      	b.n	800e9e4 <_printf_float+0xbc>
 800ed38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ed3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f7f1 fb8c 	bl	800045c <__aeabi_dcmpeq>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d11a      	bne.n	800ed7e <_printf_float+0x456>
 800ed48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed4a:	1c6a      	adds	r2, r5, #1
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	0038      	movs	r0, r7
 800ed50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed52:	47b0      	blx	r6
 800ed54:	1c43      	adds	r3, r0, #1
 800ed56:	d10e      	bne.n	800ed76 <_printf_float+0x44e>
 800ed58:	e644      	b.n	800e9e4 <_printf_float+0xbc>
 800ed5a:	0022      	movs	r2, r4
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	0038      	movs	r0, r7
 800ed60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed62:	321a      	adds	r2, #26
 800ed64:	47b0      	blx	r6
 800ed66:	1c43      	adds	r3, r0, #1
 800ed68:	d100      	bne.n	800ed6c <_printf_float+0x444>
 800ed6a:	e63b      	b.n	800e9e4 <_printf_float+0xbc>
 800ed6c:	3501      	adds	r5, #1
 800ed6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed70:	3b01      	subs	r3, #1
 800ed72:	42ab      	cmp	r3, r5
 800ed74:	dcf1      	bgt.n	800ed5a <_printf_float+0x432>
 800ed76:	0022      	movs	r2, r4
 800ed78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed7a:	3250      	adds	r2, #80	; 0x50
 800ed7c:	e6da      	b.n	800eb34 <_printf_float+0x20c>
 800ed7e:	2500      	movs	r5, #0
 800ed80:	e7f5      	b.n	800ed6e <_printf_float+0x446>
 800ed82:	002a      	movs	r2, r5
 800ed84:	e7e3      	b.n	800ed4e <_printf_float+0x426>
 800ed86:	0022      	movs	r2, r4
 800ed88:	2301      	movs	r3, #1
 800ed8a:	0038      	movs	r0, r7
 800ed8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed8e:	3219      	adds	r2, #25
 800ed90:	47b0      	blx	r6
 800ed92:	1c43      	adds	r3, r0, #1
 800ed94:	d100      	bne.n	800ed98 <_printf_float+0x470>
 800ed96:	e625      	b.n	800e9e4 <_printf_float+0xbc>
 800ed98:	3501      	adds	r5, #1
 800ed9a:	68e3      	ldr	r3, [r4, #12]
 800ed9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ed9e:	1a9b      	subs	r3, r3, r2
 800eda0:	42ab      	cmp	r3, r5
 800eda2:	dcf0      	bgt.n	800ed86 <_printf_float+0x45e>
 800eda4:	e6f8      	b.n	800eb98 <_printf_float+0x270>
 800eda6:	2500      	movs	r5, #0
 800eda8:	e7f7      	b.n	800ed9a <_printf_float+0x472>
 800edaa:	46c0      	nop			; (mov r8, r8)

0800edac <_printf_common>:
 800edac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edae:	0015      	movs	r5, r2
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	688a      	ldr	r2, [r1, #8]
 800edb4:	690b      	ldr	r3, [r1, #16]
 800edb6:	000c      	movs	r4, r1
 800edb8:	9000      	str	r0, [sp, #0]
 800edba:	4293      	cmp	r3, r2
 800edbc:	da00      	bge.n	800edc0 <_printf_common+0x14>
 800edbe:	0013      	movs	r3, r2
 800edc0:	0022      	movs	r2, r4
 800edc2:	602b      	str	r3, [r5, #0]
 800edc4:	3243      	adds	r2, #67	; 0x43
 800edc6:	7812      	ldrb	r2, [r2, #0]
 800edc8:	2a00      	cmp	r2, #0
 800edca:	d001      	beq.n	800edd0 <_printf_common+0x24>
 800edcc:	3301      	adds	r3, #1
 800edce:	602b      	str	r3, [r5, #0]
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	069b      	lsls	r3, r3, #26
 800edd4:	d502      	bpl.n	800eddc <_printf_common+0x30>
 800edd6:	682b      	ldr	r3, [r5, #0]
 800edd8:	3302      	adds	r3, #2
 800edda:	602b      	str	r3, [r5, #0]
 800eddc:	6822      	ldr	r2, [r4, #0]
 800edde:	2306      	movs	r3, #6
 800ede0:	0017      	movs	r7, r2
 800ede2:	401f      	ands	r7, r3
 800ede4:	421a      	tst	r2, r3
 800ede6:	d027      	beq.n	800ee38 <_printf_common+0x8c>
 800ede8:	0023      	movs	r3, r4
 800edea:	3343      	adds	r3, #67	; 0x43
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	1e5a      	subs	r2, r3, #1
 800edf0:	4193      	sbcs	r3, r2
 800edf2:	6822      	ldr	r2, [r4, #0]
 800edf4:	0692      	lsls	r2, r2, #26
 800edf6:	d430      	bmi.n	800ee5a <_printf_common+0xae>
 800edf8:	0022      	movs	r2, r4
 800edfa:	9901      	ldr	r1, [sp, #4]
 800edfc:	9800      	ldr	r0, [sp, #0]
 800edfe:	9e08      	ldr	r6, [sp, #32]
 800ee00:	3243      	adds	r2, #67	; 0x43
 800ee02:	47b0      	blx	r6
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d025      	beq.n	800ee54 <_printf_common+0xa8>
 800ee08:	2306      	movs	r3, #6
 800ee0a:	6820      	ldr	r0, [r4, #0]
 800ee0c:	682a      	ldr	r2, [r5, #0]
 800ee0e:	68e1      	ldr	r1, [r4, #12]
 800ee10:	2500      	movs	r5, #0
 800ee12:	4003      	ands	r3, r0
 800ee14:	2b04      	cmp	r3, #4
 800ee16:	d103      	bne.n	800ee20 <_printf_common+0x74>
 800ee18:	1a8d      	subs	r5, r1, r2
 800ee1a:	43eb      	mvns	r3, r5
 800ee1c:	17db      	asrs	r3, r3, #31
 800ee1e:	401d      	ands	r5, r3
 800ee20:	68a3      	ldr	r3, [r4, #8]
 800ee22:	6922      	ldr	r2, [r4, #16]
 800ee24:	4293      	cmp	r3, r2
 800ee26:	dd01      	ble.n	800ee2c <_printf_common+0x80>
 800ee28:	1a9b      	subs	r3, r3, r2
 800ee2a:	18ed      	adds	r5, r5, r3
 800ee2c:	2700      	movs	r7, #0
 800ee2e:	42bd      	cmp	r5, r7
 800ee30:	d120      	bne.n	800ee74 <_printf_common+0xc8>
 800ee32:	2000      	movs	r0, #0
 800ee34:	e010      	b.n	800ee58 <_printf_common+0xac>
 800ee36:	3701      	adds	r7, #1
 800ee38:	68e3      	ldr	r3, [r4, #12]
 800ee3a:	682a      	ldr	r2, [r5, #0]
 800ee3c:	1a9b      	subs	r3, r3, r2
 800ee3e:	42bb      	cmp	r3, r7
 800ee40:	ddd2      	ble.n	800ede8 <_printf_common+0x3c>
 800ee42:	0022      	movs	r2, r4
 800ee44:	2301      	movs	r3, #1
 800ee46:	9901      	ldr	r1, [sp, #4]
 800ee48:	9800      	ldr	r0, [sp, #0]
 800ee4a:	9e08      	ldr	r6, [sp, #32]
 800ee4c:	3219      	adds	r2, #25
 800ee4e:	47b0      	blx	r6
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	d1f0      	bne.n	800ee36 <_printf_common+0x8a>
 800ee54:	2001      	movs	r0, #1
 800ee56:	4240      	negs	r0, r0
 800ee58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee5a:	2030      	movs	r0, #48	; 0x30
 800ee5c:	18e1      	adds	r1, r4, r3
 800ee5e:	3143      	adds	r1, #67	; 0x43
 800ee60:	7008      	strb	r0, [r1, #0]
 800ee62:	0021      	movs	r1, r4
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	3145      	adds	r1, #69	; 0x45
 800ee68:	7809      	ldrb	r1, [r1, #0]
 800ee6a:	18a2      	adds	r2, r4, r2
 800ee6c:	3243      	adds	r2, #67	; 0x43
 800ee6e:	3302      	adds	r3, #2
 800ee70:	7011      	strb	r1, [r2, #0]
 800ee72:	e7c1      	b.n	800edf8 <_printf_common+0x4c>
 800ee74:	0022      	movs	r2, r4
 800ee76:	2301      	movs	r3, #1
 800ee78:	9901      	ldr	r1, [sp, #4]
 800ee7a:	9800      	ldr	r0, [sp, #0]
 800ee7c:	9e08      	ldr	r6, [sp, #32]
 800ee7e:	321a      	adds	r2, #26
 800ee80:	47b0      	blx	r6
 800ee82:	1c43      	adds	r3, r0, #1
 800ee84:	d0e6      	beq.n	800ee54 <_printf_common+0xa8>
 800ee86:	3701      	adds	r7, #1
 800ee88:	e7d1      	b.n	800ee2e <_printf_common+0x82>
	...

0800ee8c <_printf_i>:
 800ee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee8e:	b08b      	sub	sp, #44	; 0x2c
 800ee90:	9206      	str	r2, [sp, #24]
 800ee92:	000a      	movs	r2, r1
 800ee94:	3243      	adds	r2, #67	; 0x43
 800ee96:	9307      	str	r3, [sp, #28]
 800ee98:	9005      	str	r0, [sp, #20]
 800ee9a:	9204      	str	r2, [sp, #16]
 800ee9c:	7e0a      	ldrb	r2, [r1, #24]
 800ee9e:	000c      	movs	r4, r1
 800eea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eea2:	2a78      	cmp	r2, #120	; 0x78
 800eea4:	d807      	bhi.n	800eeb6 <_printf_i+0x2a>
 800eea6:	2a62      	cmp	r2, #98	; 0x62
 800eea8:	d809      	bhi.n	800eebe <_printf_i+0x32>
 800eeaa:	2a00      	cmp	r2, #0
 800eeac:	d100      	bne.n	800eeb0 <_printf_i+0x24>
 800eeae:	e0c1      	b.n	800f034 <_printf_i+0x1a8>
 800eeb0:	2a58      	cmp	r2, #88	; 0x58
 800eeb2:	d100      	bne.n	800eeb6 <_printf_i+0x2a>
 800eeb4:	e08c      	b.n	800efd0 <_printf_i+0x144>
 800eeb6:	0026      	movs	r6, r4
 800eeb8:	3642      	adds	r6, #66	; 0x42
 800eeba:	7032      	strb	r2, [r6, #0]
 800eebc:	e022      	b.n	800ef04 <_printf_i+0x78>
 800eebe:	0010      	movs	r0, r2
 800eec0:	3863      	subs	r0, #99	; 0x63
 800eec2:	2815      	cmp	r0, #21
 800eec4:	d8f7      	bhi.n	800eeb6 <_printf_i+0x2a>
 800eec6:	f7f1 f939 	bl	800013c <__gnu_thumb1_case_shi>
 800eeca:	0016      	.short	0x0016
 800eecc:	fff6001f 	.word	0xfff6001f
 800eed0:	fff6fff6 	.word	0xfff6fff6
 800eed4:	001ffff6 	.word	0x001ffff6
 800eed8:	fff6fff6 	.word	0xfff6fff6
 800eedc:	fff6fff6 	.word	0xfff6fff6
 800eee0:	003600a8 	.word	0x003600a8
 800eee4:	fff6009a 	.word	0xfff6009a
 800eee8:	00b9fff6 	.word	0x00b9fff6
 800eeec:	0036fff6 	.word	0x0036fff6
 800eef0:	fff6fff6 	.word	0xfff6fff6
 800eef4:	009e      	.short	0x009e
 800eef6:	0026      	movs	r6, r4
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	3642      	adds	r6, #66	; 0x42
 800eefc:	1d11      	adds	r1, r2, #4
 800eefe:	6019      	str	r1, [r3, #0]
 800ef00:	6813      	ldr	r3, [r2, #0]
 800ef02:	7033      	strb	r3, [r6, #0]
 800ef04:	2301      	movs	r3, #1
 800ef06:	e0a7      	b.n	800f058 <_printf_i+0x1cc>
 800ef08:	6808      	ldr	r0, [r1, #0]
 800ef0a:	6819      	ldr	r1, [r3, #0]
 800ef0c:	1d0a      	adds	r2, r1, #4
 800ef0e:	0605      	lsls	r5, r0, #24
 800ef10:	d50b      	bpl.n	800ef2a <_printf_i+0x9e>
 800ef12:	680d      	ldr	r5, [r1, #0]
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	2d00      	cmp	r5, #0
 800ef18:	da03      	bge.n	800ef22 <_printf_i+0x96>
 800ef1a:	232d      	movs	r3, #45	; 0x2d
 800ef1c:	9a04      	ldr	r2, [sp, #16]
 800ef1e:	426d      	negs	r5, r5
 800ef20:	7013      	strb	r3, [r2, #0]
 800ef22:	4b61      	ldr	r3, [pc, #388]	; (800f0a8 <_printf_i+0x21c>)
 800ef24:	270a      	movs	r7, #10
 800ef26:	9303      	str	r3, [sp, #12]
 800ef28:	e01b      	b.n	800ef62 <_printf_i+0xd6>
 800ef2a:	680d      	ldr	r5, [r1, #0]
 800ef2c:	601a      	str	r2, [r3, #0]
 800ef2e:	0641      	lsls	r1, r0, #25
 800ef30:	d5f1      	bpl.n	800ef16 <_printf_i+0x8a>
 800ef32:	b22d      	sxth	r5, r5
 800ef34:	e7ef      	b.n	800ef16 <_printf_i+0x8a>
 800ef36:	680d      	ldr	r5, [r1, #0]
 800ef38:	6819      	ldr	r1, [r3, #0]
 800ef3a:	1d08      	adds	r0, r1, #4
 800ef3c:	6018      	str	r0, [r3, #0]
 800ef3e:	062e      	lsls	r6, r5, #24
 800ef40:	d501      	bpl.n	800ef46 <_printf_i+0xba>
 800ef42:	680d      	ldr	r5, [r1, #0]
 800ef44:	e003      	b.n	800ef4e <_printf_i+0xc2>
 800ef46:	066d      	lsls	r5, r5, #25
 800ef48:	d5fb      	bpl.n	800ef42 <_printf_i+0xb6>
 800ef4a:	680d      	ldr	r5, [r1, #0]
 800ef4c:	b2ad      	uxth	r5, r5
 800ef4e:	4b56      	ldr	r3, [pc, #344]	; (800f0a8 <_printf_i+0x21c>)
 800ef50:	2708      	movs	r7, #8
 800ef52:	9303      	str	r3, [sp, #12]
 800ef54:	2a6f      	cmp	r2, #111	; 0x6f
 800ef56:	d000      	beq.n	800ef5a <_printf_i+0xce>
 800ef58:	3702      	adds	r7, #2
 800ef5a:	0023      	movs	r3, r4
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	3343      	adds	r3, #67	; 0x43
 800ef60:	701a      	strb	r2, [r3, #0]
 800ef62:	6863      	ldr	r3, [r4, #4]
 800ef64:	60a3      	str	r3, [r4, #8]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	db03      	blt.n	800ef72 <_printf_i+0xe6>
 800ef6a:	2204      	movs	r2, #4
 800ef6c:	6821      	ldr	r1, [r4, #0]
 800ef6e:	4391      	bics	r1, r2
 800ef70:	6021      	str	r1, [r4, #0]
 800ef72:	2d00      	cmp	r5, #0
 800ef74:	d102      	bne.n	800ef7c <_printf_i+0xf0>
 800ef76:	9e04      	ldr	r6, [sp, #16]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d00c      	beq.n	800ef96 <_printf_i+0x10a>
 800ef7c:	9e04      	ldr	r6, [sp, #16]
 800ef7e:	0028      	movs	r0, r5
 800ef80:	0039      	movs	r1, r7
 800ef82:	f7f1 f96b 	bl	800025c <__aeabi_uidivmod>
 800ef86:	9b03      	ldr	r3, [sp, #12]
 800ef88:	3e01      	subs	r6, #1
 800ef8a:	5c5b      	ldrb	r3, [r3, r1]
 800ef8c:	7033      	strb	r3, [r6, #0]
 800ef8e:	002b      	movs	r3, r5
 800ef90:	0005      	movs	r5, r0
 800ef92:	429f      	cmp	r7, r3
 800ef94:	d9f3      	bls.n	800ef7e <_printf_i+0xf2>
 800ef96:	2f08      	cmp	r7, #8
 800ef98:	d109      	bne.n	800efae <_printf_i+0x122>
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	07db      	lsls	r3, r3, #31
 800ef9e:	d506      	bpl.n	800efae <_printf_i+0x122>
 800efa0:	6863      	ldr	r3, [r4, #4]
 800efa2:	6922      	ldr	r2, [r4, #16]
 800efa4:	4293      	cmp	r3, r2
 800efa6:	dc02      	bgt.n	800efae <_printf_i+0x122>
 800efa8:	2330      	movs	r3, #48	; 0x30
 800efaa:	3e01      	subs	r6, #1
 800efac:	7033      	strb	r3, [r6, #0]
 800efae:	9b04      	ldr	r3, [sp, #16]
 800efb0:	1b9b      	subs	r3, r3, r6
 800efb2:	6123      	str	r3, [r4, #16]
 800efb4:	9b07      	ldr	r3, [sp, #28]
 800efb6:	0021      	movs	r1, r4
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	9805      	ldr	r0, [sp, #20]
 800efbc:	9b06      	ldr	r3, [sp, #24]
 800efbe:	aa09      	add	r2, sp, #36	; 0x24
 800efc0:	f7ff fef4 	bl	800edac <_printf_common>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d14c      	bne.n	800f062 <_printf_i+0x1d6>
 800efc8:	2001      	movs	r0, #1
 800efca:	4240      	negs	r0, r0
 800efcc:	b00b      	add	sp, #44	; 0x2c
 800efce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd0:	3145      	adds	r1, #69	; 0x45
 800efd2:	700a      	strb	r2, [r1, #0]
 800efd4:	4a34      	ldr	r2, [pc, #208]	; (800f0a8 <_printf_i+0x21c>)
 800efd6:	9203      	str	r2, [sp, #12]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	6821      	ldr	r1, [r4, #0]
 800efdc:	ca20      	ldmia	r2!, {r5}
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	0608      	lsls	r0, r1, #24
 800efe2:	d516      	bpl.n	800f012 <_printf_i+0x186>
 800efe4:	07cb      	lsls	r3, r1, #31
 800efe6:	d502      	bpl.n	800efee <_printf_i+0x162>
 800efe8:	2320      	movs	r3, #32
 800efea:	4319      	orrs	r1, r3
 800efec:	6021      	str	r1, [r4, #0]
 800efee:	2710      	movs	r7, #16
 800eff0:	2d00      	cmp	r5, #0
 800eff2:	d1b2      	bne.n	800ef5a <_printf_i+0xce>
 800eff4:	2320      	movs	r3, #32
 800eff6:	6822      	ldr	r2, [r4, #0]
 800eff8:	439a      	bics	r2, r3
 800effa:	6022      	str	r2, [r4, #0]
 800effc:	e7ad      	b.n	800ef5a <_printf_i+0xce>
 800effe:	2220      	movs	r2, #32
 800f000:	6809      	ldr	r1, [r1, #0]
 800f002:	430a      	orrs	r2, r1
 800f004:	6022      	str	r2, [r4, #0]
 800f006:	0022      	movs	r2, r4
 800f008:	2178      	movs	r1, #120	; 0x78
 800f00a:	3245      	adds	r2, #69	; 0x45
 800f00c:	7011      	strb	r1, [r2, #0]
 800f00e:	4a27      	ldr	r2, [pc, #156]	; (800f0ac <_printf_i+0x220>)
 800f010:	e7e1      	b.n	800efd6 <_printf_i+0x14a>
 800f012:	0648      	lsls	r0, r1, #25
 800f014:	d5e6      	bpl.n	800efe4 <_printf_i+0x158>
 800f016:	b2ad      	uxth	r5, r5
 800f018:	e7e4      	b.n	800efe4 <_printf_i+0x158>
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	680d      	ldr	r5, [r1, #0]
 800f01e:	1d10      	adds	r0, r2, #4
 800f020:	6949      	ldr	r1, [r1, #20]
 800f022:	6018      	str	r0, [r3, #0]
 800f024:	6813      	ldr	r3, [r2, #0]
 800f026:	062e      	lsls	r6, r5, #24
 800f028:	d501      	bpl.n	800f02e <_printf_i+0x1a2>
 800f02a:	6019      	str	r1, [r3, #0]
 800f02c:	e002      	b.n	800f034 <_printf_i+0x1a8>
 800f02e:	066d      	lsls	r5, r5, #25
 800f030:	d5fb      	bpl.n	800f02a <_printf_i+0x19e>
 800f032:	8019      	strh	r1, [r3, #0]
 800f034:	2300      	movs	r3, #0
 800f036:	9e04      	ldr	r6, [sp, #16]
 800f038:	6123      	str	r3, [r4, #16]
 800f03a:	e7bb      	b.n	800efb4 <_printf_i+0x128>
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	1d11      	adds	r1, r2, #4
 800f040:	6019      	str	r1, [r3, #0]
 800f042:	6816      	ldr	r6, [r2, #0]
 800f044:	2100      	movs	r1, #0
 800f046:	0030      	movs	r0, r6
 800f048:	6862      	ldr	r2, [r4, #4]
 800f04a:	f001 f831 	bl	80100b0 <memchr>
 800f04e:	2800      	cmp	r0, #0
 800f050:	d001      	beq.n	800f056 <_printf_i+0x1ca>
 800f052:	1b80      	subs	r0, r0, r6
 800f054:	6060      	str	r0, [r4, #4]
 800f056:	6863      	ldr	r3, [r4, #4]
 800f058:	6123      	str	r3, [r4, #16]
 800f05a:	2300      	movs	r3, #0
 800f05c:	9a04      	ldr	r2, [sp, #16]
 800f05e:	7013      	strb	r3, [r2, #0]
 800f060:	e7a8      	b.n	800efb4 <_printf_i+0x128>
 800f062:	6923      	ldr	r3, [r4, #16]
 800f064:	0032      	movs	r2, r6
 800f066:	9906      	ldr	r1, [sp, #24]
 800f068:	9805      	ldr	r0, [sp, #20]
 800f06a:	9d07      	ldr	r5, [sp, #28]
 800f06c:	47a8      	blx	r5
 800f06e:	1c43      	adds	r3, r0, #1
 800f070:	d0aa      	beq.n	800efc8 <_printf_i+0x13c>
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	079b      	lsls	r3, r3, #30
 800f076:	d415      	bmi.n	800f0a4 <_printf_i+0x218>
 800f078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f07a:	68e0      	ldr	r0, [r4, #12]
 800f07c:	4298      	cmp	r0, r3
 800f07e:	daa5      	bge.n	800efcc <_printf_i+0x140>
 800f080:	0018      	movs	r0, r3
 800f082:	e7a3      	b.n	800efcc <_printf_i+0x140>
 800f084:	0022      	movs	r2, r4
 800f086:	2301      	movs	r3, #1
 800f088:	9906      	ldr	r1, [sp, #24]
 800f08a:	9805      	ldr	r0, [sp, #20]
 800f08c:	9e07      	ldr	r6, [sp, #28]
 800f08e:	3219      	adds	r2, #25
 800f090:	47b0      	blx	r6
 800f092:	1c43      	adds	r3, r0, #1
 800f094:	d098      	beq.n	800efc8 <_printf_i+0x13c>
 800f096:	3501      	adds	r5, #1
 800f098:	68e3      	ldr	r3, [r4, #12]
 800f09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f09c:	1a9b      	subs	r3, r3, r2
 800f09e:	42ab      	cmp	r3, r5
 800f0a0:	dcf0      	bgt.n	800f084 <_printf_i+0x1f8>
 800f0a2:	e7e9      	b.n	800f078 <_printf_i+0x1ec>
 800f0a4:	2500      	movs	r5, #0
 800f0a6:	e7f7      	b.n	800f098 <_printf_i+0x20c>
 800f0a8:	08012cb2 	.word	0x08012cb2
 800f0ac:	08012cc3 	.word	0x08012cc3

0800f0b0 <iprintf>:
 800f0b0:	b40f      	push	{r0, r1, r2, r3}
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <iprintf+0x30>)
 800f0b4:	b513      	push	{r0, r1, r4, lr}
 800f0b6:	681c      	ldr	r4, [r3, #0]
 800f0b8:	2c00      	cmp	r4, #0
 800f0ba:	d005      	beq.n	800f0c8 <iprintf+0x18>
 800f0bc:	69a3      	ldr	r3, [r4, #24]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d102      	bne.n	800f0c8 <iprintf+0x18>
 800f0c2:	0020      	movs	r0, r4
 800f0c4:	f000 ff42 	bl	800ff4c <__sinit>
 800f0c8:	ab05      	add	r3, sp, #20
 800f0ca:	0020      	movs	r0, r4
 800f0cc:	9a04      	ldr	r2, [sp, #16]
 800f0ce:	68a1      	ldr	r1, [r4, #8]
 800f0d0:	9301      	str	r3, [sp, #4]
 800f0d2:	f001 fe2d 	bl	8010d30 <_vfiprintf_r>
 800f0d6:	bc16      	pop	{r1, r2, r4}
 800f0d8:	bc08      	pop	{r3}
 800f0da:	b004      	add	sp, #16
 800f0dc:	4718      	bx	r3
 800f0de:	46c0      	nop			; (mov r8, r8)
 800f0e0:	20000024 	.word	0x20000024

0800f0e4 <siprintf>:
 800f0e4:	b40e      	push	{r1, r2, r3}
 800f0e6:	b500      	push	{lr}
 800f0e8:	490b      	ldr	r1, [pc, #44]	; (800f118 <siprintf+0x34>)
 800f0ea:	b09c      	sub	sp, #112	; 0x70
 800f0ec:	ab1d      	add	r3, sp, #116	; 0x74
 800f0ee:	9002      	str	r0, [sp, #8]
 800f0f0:	9006      	str	r0, [sp, #24]
 800f0f2:	9107      	str	r1, [sp, #28]
 800f0f4:	9104      	str	r1, [sp, #16]
 800f0f6:	4809      	ldr	r0, [pc, #36]	; (800f11c <siprintf+0x38>)
 800f0f8:	4909      	ldr	r1, [pc, #36]	; (800f120 <siprintf+0x3c>)
 800f0fa:	cb04      	ldmia	r3!, {r2}
 800f0fc:	9105      	str	r1, [sp, #20]
 800f0fe:	6800      	ldr	r0, [r0, #0]
 800f100:	a902      	add	r1, sp, #8
 800f102:	9301      	str	r3, [sp, #4]
 800f104:	f001 fcec 	bl	8010ae0 <_svfiprintf_r>
 800f108:	2300      	movs	r3, #0
 800f10a:	9a02      	ldr	r2, [sp, #8]
 800f10c:	7013      	strb	r3, [r2, #0]
 800f10e:	b01c      	add	sp, #112	; 0x70
 800f110:	bc08      	pop	{r3}
 800f112:	b003      	add	sp, #12
 800f114:	4718      	bx	r3
 800f116:	46c0      	nop			; (mov r8, r8)
 800f118:	7fffffff 	.word	0x7fffffff
 800f11c:	20000024 	.word	0x20000024
 800f120:	ffff0208 	.word	0xffff0208

0800f124 <strcat>:
 800f124:	0002      	movs	r2, r0
 800f126:	b510      	push	{r4, lr}
 800f128:	7813      	ldrb	r3, [r2, #0]
 800f12a:	0014      	movs	r4, r2
 800f12c:	3201      	adds	r2, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1fa      	bne.n	800f128 <strcat+0x4>
 800f132:	5cca      	ldrb	r2, [r1, r3]
 800f134:	54e2      	strb	r2, [r4, r3]
 800f136:	3301      	adds	r3, #1
 800f138:	2a00      	cmp	r2, #0
 800f13a:	d1fa      	bne.n	800f132 <strcat+0xe>
 800f13c:	bd10      	pop	{r4, pc}

0800f13e <quorem>:
 800f13e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f140:	0006      	movs	r6, r0
 800f142:	690b      	ldr	r3, [r1, #16]
 800f144:	6932      	ldr	r2, [r6, #16]
 800f146:	b087      	sub	sp, #28
 800f148:	2000      	movs	r0, #0
 800f14a:	9103      	str	r1, [sp, #12]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	db65      	blt.n	800f21c <quorem+0xde>
 800f150:	3b01      	subs	r3, #1
 800f152:	009c      	lsls	r4, r3, #2
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	000b      	movs	r3, r1
 800f158:	3314      	adds	r3, #20
 800f15a:	9305      	str	r3, [sp, #20]
 800f15c:	191b      	adds	r3, r3, r4
 800f15e:	9304      	str	r3, [sp, #16]
 800f160:	0033      	movs	r3, r6
 800f162:	3314      	adds	r3, #20
 800f164:	9302      	str	r3, [sp, #8]
 800f166:	191c      	adds	r4, r3, r4
 800f168:	9b04      	ldr	r3, [sp, #16]
 800f16a:	6827      	ldr	r7, [r4, #0]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	0038      	movs	r0, r7
 800f170:	1c5d      	adds	r5, r3, #1
 800f172:	0029      	movs	r1, r5
 800f174:	9301      	str	r3, [sp, #4]
 800f176:	f7f0 ffeb 	bl	8000150 <__udivsi3>
 800f17a:	9001      	str	r0, [sp, #4]
 800f17c:	42af      	cmp	r7, r5
 800f17e:	d324      	bcc.n	800f1ca <quorem+0x8c>
 800f180:	2500      	movs	r5, #0
 800f182:	46ac      	mov	ip, r5
 800f184:	9802      	ldr	r0, [sp, #8]
 800f186:	9f05      	ldr	r7, [sp, #20]
 800f188:	cf08      	ldmia	r7!, {r3}
 800f18a:	9a01      	ldr	r2, [sp, #4]
 800f18c:	b299      	uxth	r1, r3
 800f18e:	4351      	muls	r1, r2
 800f190:	0c1b      	lsrs	r3, r3, #16
 800f192:	4353      	muls	r3, r2
 800f194:	1949      	adds	r1, r1, r5
 800f196:	0c0a      	lsrs	r2, r1, #16
 800f198:	189b      	adds	r3, r3, r2
 800f19a:	6802      	ldr	r2, [r0, #0]
 800f19c:	b289      	uxth	r1, r1
 800f19e:	b292      	uxth	r2, r2
 800f1a0:	4462      	add	r2, ip
 800f1a2:	1a52      	subs	r2, r2, r1
 800f1a4:	6801      	ldr	r1, [r0, #0]
 800f1a6:	0c1d      	lsrs	r5, r3, #16
 800f1a8:	0c09      	lsrs	r1, r1, #16
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	1acb      	subs	r3, r1, r3
 800f1ae:	1411      	asrs	r1, r2, #16
 800f1b0:	185b      	adds	r3, r3, r1
 800f1b2:	1419      	asrs	r1, r3, #16
 800f1b4:	b292      	uxth	r2, r2
 800f1b6:	041b      	lsls	r3, r3, #16
 800f1b8:	431a      	orrs	r2, r3
 800f1ba:	9b04      	ldr	r3, [sp, #16]
 800f1bc:	468c      	mov	ip, r1
 800f1be:	c004      	stmia	r0!, {r2}
 800f1c0:	42bb      	cmp	r3, r7
 800f1c2:	d2e1      	bcs.n	800f188 <quorem+0x4a>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d030      	beq.n	800f22c <quorem+0xee>
 800f1ca:	0030      	movs	r0, r6
 800f1cc:	9903      	ldr	r1, [sp, #12]
 800f1ce:	f001 f9ff 	bl	80105d0 <__mcmp>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	db21      	blt.n	800f21a <quorem+0xdc>
 800f1d6:	0030      	movs	r0, r6
 800f1d8:	2400      	movs	r4, #0
 800f1da:	9b01      	ldr	r3, [sp, #4]
 800f1dc:	9903      	ldr	r1, [sp, #12]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	9301      	str	r3, [sp, #4]
 800f1e2:	3014      	adds	r0, #20
 800f1e4:	3114      	adds	r1, #20
 800f1e6:	6803      	ldr	r3, [r0, #0]
 800f1e8:	c920      	ldmia	r1!, {r5}
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	1914      	adds	r4, r2, r4
 800f1ee:	b2aa      	uxth	r2, r5
 800f1f0:	1aa2      	subs	r2, r4, r2
 800f1f2:	0c1b      	lsrs	r3, r3, #16
 800f1f4:	0c2d      	lsrs	r5, r5, #16
 800f1f6:	1414      	asrs	r4, r2, #16
 800f1f8:	1b5b      	subs	r3, r3, r5
 800f1fa:	191b      	adds	r3, r3, r4
 800f1fc:	141c      	asrs	r4, r3, #16
 800f1fe:	b292      	uxth	r2, r2
 800f200:	041b      	lsls	r3, r3, #16
 800f202:	4313      	orrs	r3, r2
 800f204:	c008      	stmia	r0!, {r3}
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	428b      	cmp	r3, r1
 800f20a:	d2ec      	bcs.n	800f1e6 <quorem+0xa8>
 800f20c:	9b00      	ldr	r3, [sp, #0]
 800f20e:	9a02      	ldr	r2, [sp, #8]
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	18d3      	adds	r3, r2, r3
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	2a00      	cmp	r2, #0
 800f218:	d015      	beq.n	800f246 <quorem+0x108>
 800f21a:	9801      	ldr	r0, [sp, #4]
 800f21c:	b007      	add	sp, #28
 800f21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f220:	6823      	ldr	r3, [r4, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <quorem+0xf6>
 800f226:	9b00      	ldr	r3, [sp, #0]
 800f228:	3b01      	subs	r3, #1
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	9b02      	ldr	r3, [sp, #8]
 800f22e:	3c04      	subs	r4, #4
 800f230:	42a3      	cmp	r3, r4
 800f232:	d3f5      	bcc.n	800f220 <quorem+0xe2>
 800f234:	9b00      	ldr	r3, [sp, #0]
 800f236:	6133      	str	r3, [r6, #16]
 800f238:	e7c7      	b.n	800f1ca <quorem+0x8c>
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	2a00      	cmp	r2, #0
 800f23e:	d106      	bne.n	800f24e <quorem+0x110>
 800f240:	9a00      	ldr	r2, [sp, #0]
 800f242:	3a01      	subs	r2, #1
 800f244:	9200      	str	r2, [sp, #0]
 800f246:	9a02      	ldr	r2, [sp, #8]
 800f248:	3b04      	subs	r3, #4
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d3f5      	bcc.n	800f23a <quorem+0xfc>
 800f24e:	9b00      	ldr	r3, [sp, #0]
 800f250:	6133      	str	r3, [r6, #16]
 800f252:	e7e2      	b.n	800f21a <quorem+0xdc>

0800f254 <_dtoa_r>:
 800f254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f256:	b09d      	sub	sp, #116	; 0x74
 800f258:	9202      	str	r2, [sp, #8]
 800f25a:	9303      	str	r3, [sp, #12]
 800f25c:	9b02      	ldr	r3, [sp, #8]
 800f25e:	9c03      	ldr	r4, [sp, #12]
 800f260:	9308      	str	r3, [sp, #32]
 800f262:	9409      	str	r4, [sp, #36]	; 0x24
 800f264:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f266:	0007      	movs	r7, r0
 800f268:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800f26a:	2c00      	cmp	r4, #0
 800f26c:	d10e      	bne.n	800f28c <_dtoa_r+0x38>
 800f26e:	2010      	movs	r0, #16
 800f270:	f000 ff14 	bl	801009c <malloc>
 800f274:	1e02      	subs	r2, r0, #0
 800f276:	6278      	str	r0, [r7, #36]	; 0x24
 800f278:	d104      	bne.n	800f284 <_dtoa_r+0x30>
 800f27a:	21ea      	movs	r1, #234	; 0xea
 800f27c:	4bc7      	ldr	r3, [pc, #796]	; (800f59c <_dtoa_r+0x348>)
 800f27e:	48c8      	ldr	r0, [pc, #800]	; (800f5a0 <_dtoa_r+0x34c>)
 800f280:	f001 ffd0 	bl	8011224 <__assert_func>
 800f284:	6044      	str	r4, [r0, #4]
 800f286:	6084      	str	r4, [r0, #8]
 800f288:	6004      	str	r4, [r0, #0]
 800f28a:	60c4      	str	r4, [r0, #12]
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	6819      	ldr	r1, [r3, #0]
 800f290:	2900      	cmp	r1, #0
 800f292:	d00a      	beq.n	800f2aa <_dtoa_r+0x56>
 800f294:	685a      	ldr	r2, [r3, #4]
 800f296:	2301      	movs	r3, #1
 800f298:	4093      	lsls	r3, r2
 800f29a:	604a      	str	r2, [r1, #4]
 800f29c:	608b      	str	r3, [r1, #8]
 800f29e:	0038      	movs	r0, r7
 800f2a0:	f000 ff56 	bl	8010150 <_Bfree>
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	601a      	str	r2, [r3, #0]
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	da20      	bge.n	800f2f2 <_dtoa_r+0x9e>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	602b      	str	r3, [r5, #0]
 800f2b4:	9b03      	ldr	r3, [sp, #12]
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	085b      	lsrs	r3, r3, #1
 800f2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f2bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f2be:	4bb9      	ldr	r3, [pc, #740]	; (800f5a4 <_dtoa_r+0x350>)
 800f2c0:	4ab8      	ldr	r2, [pc, #736]	; (800f5a4 <_dtoa_r+0x350>)
 800f2c2:	402b      	ands	r3, r5
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d117      	bne.n	800f2f8 <_dtoa_r+0xa4>
 800f2c8:	4bb7      	ldr	r3, [pc, #732]	; (800f5a8 <_dtoa_r+0x354>)
 800f2ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f2cc:	0328      	lsls	r0, r5, #12
 800f2ce:	6013      	str	r3, [r2, #0]
 800f2d0:	9b02      	ldr	r3, [sp, #8]
 800f2d2:	0b00      	lsrs	r0, r0, #12
 800f2d4:	4318      	orrs	r0, r3
 800f2d6:	d101      	bne.n	800f2dc <_dtoa_r+0x88>
 800f2d8:	f000 fdbf 	bl	800fe5a <_dtoa_r+0xc06>
 800f2dc:	48b3      	ldr	r0, [pc, #716]	; (800f5ac <_dtoa_r+0x358>)
 800f2de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f2e0:	9006      	str	r0, [sp, #24]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d002      	beq.n	800f2ec <_dtoa_r+0x98>
 800f2e6:	4bb2      	ldr	r3, [pc, #712]	; (800f5b0 <_dtoa_r+0x35c>)
 800f2e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f2ea:	6013      	str	r3, [r2, #0]
 800f2ec:	9806      	ldr	r0, [sp, #24]
 800f2ee:	b01d      	add	sp, #116	; 0x74
 800f2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	602b      	str	r3, [r5, #0]
 800f2f6:	e7e1      	b.n	800f2bc <_dtoa_r+0x68>
 800f2f8:	9b08      	ldr	r3, [sp, #32]
 800f2fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f2fc:	9312      	str	r3, [sp, #72]	; 0x48
 800f2fe:	9413      	str	r4, [sp, #76]	; 0x4c
 800f300:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f302:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f304:	2200      	movs	r2, #0
 800f306:	2300      	movs	r3, #0
 800f308:	f7f1 f8a8 	bl	800045c <__aeabi_dcmpeq>
 800f30c:	1e04      	subs	r4, r0, #0
 800f30e:	d009      	beq.n	800f324 <_dtoa_r+0xd0>
 800f310:	2301      	movs	r3, #1
 800f312:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f314:	6013      	str	r3, [r2, #0]
 800f316:	4ba7      	ldr	r3, [pc, #668]	; (800f5b4 <_dtoa_r+0x360>)
 800f318:	9306      	str	r3, [sp, #24]
 800f31a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d0e5      	beq.n	800f2ec <_dtoa_r+0x98>
 800f320:	4ba5      	ldr	r3, [pc, #660]	; (800f5b8 <_dtoa_r+0x364>)
 800f322:	e7e1      	b.n	800f2e8 <_dtoa_r+0x94>
 800f324:	ab1a      	add	r3, sp, #104	; 0x68
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	ab1b      	add	r3, sp, #108	; 0x6c
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	0038      	movs	r0, r7
 800f32e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f332:	f001 fa01 	bl	8010738 <__d2b>
 800f336:	006e      	lsls	r6, r5, #1
 800f338:	9005      	str	r0, [sp, #20]
 800f33a:	0d76      	lsrs	r6, r6, #21
 800f33c:	d100      	bne.n	800f340 <_dtoa_r+0xec>
 800f33e:	e07c      	b.n	800f43a <_dtoa_r+0x1e6>
 800f340:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f342:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f346:	4a9d      	ldr	r2, [pc, #628]	; (800f5bc <_dtoa_r+0x368>)
 800f348:	031b      	lsls	r3, r3, #12
 800f34a:	0b1b      	lsrs	r3, r3, #12
 800f34c:	431a      	orrs	r2, r3
 800f34e:	0011      	movs	r1, r2
 800f350:	4b9b      	ldr	r3, [pc, #620]	; (800f5c0 <_dtoa_r+0x36c>)
 800f352:	9418      	str	r4, [sp, #96]	; 0x60
 800f354:	18f6      	adds	r6, r6, r3
 800f356:	2200      	movs	r2, #0
 800f358:	4b9a      	ldr	r3, [pc, #616]	; (800f5c4 <_dtoa_r+0x370>)
 800f35a:	f7f3 f919 	bl	8002590 <__aeabi_dsub>
 800f35e:	4a9a      	ldr	r2, [pc, #616]	; (800f5c8 <_dtoa_r+0x374>)
 800f360:	4b9a      	ldr	r3, [pc, #616]	; (800f5cc <_dtoa_r+0x378>)
 800f362:	f7f2 fea9 	bl	80020b8 <__aeabi_dmul>
 800f366:	4a9a      	ldr	r2, [pc, #616]	; (800f5d0 <_dtoa_r+0x37c>)
 800f368:	4b9a      	ldr	r3, [pc, #616]	; (800f5d4 <_dtoa_r+0x380>)
 800f36a:	f7f1 ff67 	bl	800123c <__aeabi_dadd>
 800f36e:	0004      	movs	r4, r0
 800f370:	0030      	movs	r0, r6
 800f372:	000d      	movs	r5, r1
 800f374:	f7f3 fcf2 	bl	8002d5c <__aeabi_i2d>
 800f378:	4a97      	ldr	r2, [pc, #604]	; (800f5d8 <_dtoa_r+0x384>)
 800f37a:	4b98      	ldr	r3, [pc, #608]	; (800f5dc <_dtoa_r+0x388>)
 800f37c:	f7f2 fe9c 	bl	80020b8 <__aeabi_dmul>
 800f380:	0002      	movs	r2, r0
 800f382:	000b      	movs	r3, r1
 800f384:	0020      	movs	r0, r4
 800f386:	0029      	movs	r1, r5
 800f388:	f7f1 ff58 	bl	800123c <__aeabi_dadd>
 800f38c:	0004      	movs	r4, r0
 800f38e:	000d      	movs	r5, r1
 800f390:	f7f3 fcae 	bl	8002cf0 <__aeabi_d2iz>
 800f394:	2200      	movs	r2, #0
 800f396:	9002      	str	r0, [sp, #8]
 800f398:	2300      	movs	r3, #0
 800f39a:	0020      	movs	r0, r4
 800f39c:	0029      	movs	r1, r5
 800f39e:	f7f1 f863 	bl	8000468 <__aeabi_dcmplt>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d00b      	beq.n	800f3be <_dtoa_r+0x16a>
 800f3a6:	9802      	ldr	r0, [sp, #8]
 800f3a8:	f7f3 fcd8 	bl	8002d5c <__aeabi_i2d>
 800f3ac:	002b      	movs	r3, r5
 800f3ae:	0022      	movs	r2, r4
 800f3b0:	f7f1 f854 	bl	800045c <__aeabi_dcmpeq>
 800f3b4:	4243      	negs	r3, r0
 800f3b6:	4158      	adcs	r0, r3
 800f3b8:	9b02      	ldr	r3, [sp, #8]
 800f3ba:	1a1b      	subs	r3, r3, r0
 800f3bc:	9302      	str	r3, [sp, #8]
 800f3be:	2301      	movs	r3, #1
 800f3c0:	9316      	str	r3, [sp, #88]	; 0x58
 800f3c2:	9b02      	ldr	r3, [sp, #8]
 800f3c4:	2b16      	cmp	r3, #22
 800f3c6:	d80f      	bhi.n	800f3e8 <_dtoa_r+0x194>
 800f3c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f3ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f3cc:	00da      	lsls	r2, r3, #3
 800f3ce:	4b84      	ldr	r3, [pc, #528]	; (800f5e0 <_dtoa_r+0x38c>)
 800f3d0:	189b      	adds	r3, r3, r2
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	f7f1 f847 	bl	8000468 <__aeabi_dcmplt>
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d049      	beq.n	800f472 <_dtoa_r+0x21e>
 800f3de:	9b02      	ldr	r3, [sp, #8]
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	9302      	str	r3, [sp, #8]
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	9316      	str	r3, [sp, #88]	; 0x58
 800f3e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f3ea:	1b9e      	subs	r6, r3, r6
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f3f0:	0033      	movs	r3, r6
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	930d      	str	r3, [sp, #52]	; 0x34
 800f3f6:	d504      	bpl.n	800f402 <_dtoa_r+0x1ae>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	1b9b      	subs	r3, r3, r6
 800f3fc:	930a      	str	r3, [sp, #40]	; 0x28
 800f3fe:	2300      	movs	r3, #0
 800f400:	930d      	str	r3, [sp, #52]	; 0x34
 800f402:	9b02      	ldr	r3, [sp, #8]
 800f404:	2b00      	cmp	r3, #0
 800f406:	db36      	blt.n	800f476 <_dtoa_r+0x222>
 800f408:	9a02      	ldr	r2, [sp, #8]
 800f40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f40c:	4694      	mov	ip, r2
 800f40e:	4463      	add	r3, ip
 800f410:	930d      	str	r3, [sp, #52]	; 0x34
 800f412:	2300      	movs	r3, #0
 800f414:	9215      	str	r2, [sp, #84]	; 0x54
 800f416:	930e      	str	r3, [sp, #56]	; 0x38
 800f418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f41a:	2401      	movs	r4, #1
 800f41c:	2b09      	cmp	r3, #9
 800f41e:	d864      	bhi.n	800f4ea <_dtoa_r+0x296>
 800f420:	2b05      	cmp	r3, #5
 800f422:	dd02      	ble.n	800f42a <_dtoa_r+0x1d6>
 800f424:	2400      	movs	r4, #0
 800f426:	3b04      	subs	r3, #4
 800f428:	9322      	str	r3, [sp, #136]	; 0x88
 800f42a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f42c:	1e98      	subs	r0, r3, #2
 800f42e:	2803      	cmp	r0, #3
 800f430:	d864      	bhi.n	800f4fc <_dtoa_r+0x2a8>
 800f432:	f7f0 fe79 	bl	8000128 <__gnu_thumb1_case_uqi>
 800f436:	3829      	.short	0x3829
 800f438:	5836      	.short	0x5836
 800f43a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f43c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f43e:	189e      	adds	r6, r3, r2
 800f440:	4b68      	ldr	r3, [pc, #416]	; (800f5e4 <_dtoa_r+0x390>)
 800f442:	18f2      	adds	r2, r6, r3
 800f444:	2a20      	cmp	r2, #32
 800f446:	dd0f      	ble.n	800f468 <_dtoa_r+0x214>
 800f448:	2340      	movs	r3, #64	; 0x40
 800f44a:	1a9b      	subs	r3, r3, r2
 800f44c:	409d      	lsls	r5, r3
 800f44e:	4b66      	ldr	r3, [pc, #408]	; (800f5e8 <_dtoa_r+0x394>)
 800f450:	9802      	ldr	r0, [sp, #8]
 800f452:	18f3      	adds	r3, r6, r3
 800f454:	40d8      	lsrs	r0, r3
 800f456:	4328      	orrs	r0, r5
 800f458:	f7f3 fcb0 	bl	8002dbc <__aeabi_ui2d>
 800f45c:	2301      	movs	r3, #1
 800f45e:	4c63      	ldr	r4, [pc, #396]	; (800f5ec <_dtoa_r+0x398>)
 800f460:	3e01      	subs	r6, #1
 800f462:	1909      	adds	r1, r1, r4
 800f464:	9318      	str	r3, [sp, #96]	; 0x60
 800f466:	e776      	b.n	800f356 <_dtoa_r+0x102>
 800f468:	2320      	movs	r3, #32
 800f46a:	9802      	ldr	r0, [sp, #8]
 800f46c:	1a9b      	subs	r3, r3, r2
 800f46e:	4098      	lsls	r0, r3
 800f470:	e7f2      	b.n	800f458 <_dtoa_r+0x204>
 800f472:	9016      	str	r0, [sp, #88]	; 0x58
 800f474:	e7b8      	b.n	800f3e8 <_dtoa_r+0x194>
 800f476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f478:	9a02      	ldr	r2, [sp, #8]
 800f47a:	1a9b      	subs	r3, r3, r2
 800f47c:	930a      	str	r3, [sp, #40]	; 0x28
 800f47e:	4253      	negs	r3, r2
 800f480:	930e      	str	r3, [sp, #56]	; 0x38
 800f482:	2300      	movs	r3, #0
 800f484:	9315      	str	r3, [sp, #84]	; 0x54
 800f486:	e7c7      	b.n	800f418 <_dtoa_r+0x1c4>
 800f488:	2300      	movs	r3, #0
 800f48a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f48c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f48e:	930c      	str	r3, [sp, #48]	; 0x30
 800f490:	9307      	str	r3, [sp, #28]
 800f492:	2b00      	cmp	r3, #0
 800f494:	dc13      	bgt.n	800f4be <_dtoa_r+0x26a>
 800f496:	2301      	movs	r3, #1
 800f498:	001a      	movs	r2, r3
 800f49a:	930c      	str	r3, [sp, #48]	; 0x30
 800f49c:	9307      	str	r3, [sp, #28]
 800f49e:	9223      	str	r2, [sp, #140]	; 0x8c
 800f4a0:	e00d      	b.n	800f4be <_dtoa_r+0x26a>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e7f1      	b.n	800f48a <_dtoa_r+0x236>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f4aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4ac:	4694      	mov	ip, r2
 800f4ae:	9b02      	ldr	r3, [sp, #8]
 800f4b0:	4463      	add	r3, ip
 800f4b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	9307      	str	r3, [sp, #28]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	dc00      	bgt.n	800f4be <_dtoa_r+0x26a>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	2200      	movs	r2, #0
 800f4c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4c2:	6042      	str	r2, [r0, #4]
 800f4c4:	3204      	adds	r2, #4
 800f4c6:	0015      	movs	r5, r2
 800f4c8:	3514      	adds	r5, #20
 800f4ca:	6841      	ldr	r1, [r0, #4]
 800f4cc:	429d      	cmp	r5, r3
 800f4ce:	d919      	bls.n	800f504 <_dtoa_r+0x2b0>
 800f4d0:	0038      	movs	r0, r7
 800f4d2:	f000 fdf9 	bl	80100c8 <_Balloc>
 800f4d6:	9006      	str	r0, [sp, #24]
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d117      	bne.n	800f50c <_dtoa_r+0x2b8>
 800f4dc:	21d5      	movs	r1, #213	; 0xd5
 800f4de:	0002      	movs	r2, r0
 800f4e0:	4b43      	ldr	r3, [pc, #268]	; (800f5f0 <_dtoa_r+0x39c>)
 800f4e2:	0049      	lsls	r1, r1, #1
 800f4e4:	e6cb      	b.n	800f27e <_dtoa_r+0x2a>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e7de      	b.n	800f4a8 <_dtoa_r+0x254>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	940f      	str	r4, [sp, #60]	; 0x3c
 800f4ee:	9322      	str	r3, [sp, #136]	; 0x88
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	930c      	str	r3, [sp, #48]	; 0x30
 800f4f4:	9307      	str	r3, [sp, #28]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	3313      	adds	r3, #19
 800f4fa:	e7d0      	b.n	800f49e <_dtoa_r+0x24a>
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800f500:	3b02      	subs	r3, #2
 800f502:	e7f6      	b.n	800f4f2 <_dtoa_r+0x29e>
 800f504:	3101      	adds	r1, #1
 800f506:	6041      	str	r1, [r0, #4]
 800f508:	0052      	lsls	r2, r2, #1
 800f50a:	e7dc      	b.n	800f4c6 <_dtoa_r+0x272>
 800f50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50e:	9a06      	ldr	r2, [sp, #24]
 800f510:	601a      	str	r2, [r3, #0]
 800f512:	9b07      	ldr	r3, [sp, #28]
 800f514:	2b0e      	cmp	r3, #14
 800f516:	d900      	bls.n	800f51a <_dtoa_r+0x2c6>
 800f518:	e0eb      	b.n	800f6f2 <_dtoa_r+0x49e>
 800f51a:	2c00      	cmp	r4, #0
 800f51c:	d100      	bne.n	800f520 <_dtoa_r+0x2cc>
 800f51e:	e0e8      	b.n	800f6f2 <_dtoa_r+0x49e>
 800f520:	9b02      	ldr	r3, [sp, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	dd68      	ble.n	800f5f8 <_dtoa_r+0x3a4>
 800f526:	001a      	movs	r2, r3
 800f528:	210f      	movs	r1, #15
 800f52a:	4b2d      	ldr	r3, [pc, #180]	; (800f5e0 <_dtoa_r+0x38c>)
 800f52c:	400a      	ands	r2, r1
 800f52e:	00d2      	lsls	r2, r2, #3
 800f530:	189b      	adds	r3, r3, r2
 800f532:	681d      	ldr	r5, [r3, #0]
 800f534:	685e      	ldr	r6, [r3, #4]
 800f536:	9b02      	ldr	r3, [sp, #8]
 800f538:	111c      	asrs	r4, r3, #4
 800f53a:	2302      	movs	r3, #2
 800f53c:	9310      	str	r3, [sp, #64]	; 0x40
 800f53e:	9b02      	ldr	r3, [sp, #8]
 800f540:	05db      	lsls	r3, r3, #23
 800f542:	d50b      	bpl.n	800f55c <_dtoa_r+0x308>
 800f544:	4b2b      	ldr	r3, [pc, #172]	; (800f5f4 <_dtoa_r+0x3a0>)
 800f546:	400c      	ands	r4, r1
 800f548:	6a1a      	ldr	r2, [r3, #32]
 800f54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f54e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f550:	f7f2 f9b0 	bl	80018b4 <__aeabi_ddiv>
 800f554:	2303      	movs	r3, #3
 800f556:	9008      	str	r0, [sp, #32]
 800f558:	9109      	str	r1, [sp, #36]	; 0x24
 800f55a:	9310      	str	r3, [sp, #64]	; 0x40
 800f55c:	4b25      	ldr	r3, [pc, #148]	; (800f5f4 <_dtoa_r+0x3a0>)
 800f55e:	9314      	str	r3, [sp, #80]	; 0x50
 800f560:	2c00      	cmp	r4, #0
 800f562:	d108      	bne.n	800f576 <_dtoa_r+0x322>
 800f564:	9808      	ldr	r0, [sp, #32]
 800f566:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f568:	002a      	movs	r2, r5
 800f56a:	0033      	movs	r3, r6
 800f56c:	f7f2 f9a2 	bl	80018b4 <__aeabi_ddiv>
 800f570:	9008      	str	r0, [sp, #32]
 800f572:	9109      	str	r1, [sp, #36]	; 0x24
 800f574:	e05c      	b.n	800f630 <_dtoa_r+0x3dc>
 800f576:	2301      	movs	r3, #1
 800f578:	421c      	tst	r4, r3
 800f57a:	d00b      	beq.n	800f594 <_dtoa_r+0x340>
 800f57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f57e:	0028      	movs	r0, r5
 800f580:	3301      	adds	r3, #1
 800f582:	9310      	str	r3, [sp, #64]	; 0x40
 800f584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f586:	0031      	movs	r1, r6
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	f7f2 fd94 	bl	80020b8 <__aeabi_dmul>
 800f590:	0005      	movs	r5, r0
 800f592:	000e      	movs	r6, r1
 800f594:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f596:	1064      	asrs	r4, r4, #1
 800f598:	3308      	adds	r3, #8
 800f59a:	e7e0      	b.n	800f55e <_dtoa_r+0x30a>
 800f59c:	08012ce1 	.word	0x08012ce1
 800f5a0:	08012cf8 	.word	0x08012cf8
 800f5a4:	7ff00000 	.word	0x7ff00000
 800f5a8:	0000270f 	.word	0x0000270f
 800f5ac:	08012cdd 	.word	0x08012cdd
 800f5b0:	08012ce0 	.word	0x08012ce0
 800f5b4:	08012cb0 	.word	0x08012cb0
 800f5b8:	08012cb1 	.word	0x08012cb1
 800f5bc:	3ff00000 	.word	0x3ff00000
 800f5c0:	fffffc01 	.word	0xfffffc01
 800f5c4:	3ff80000 	.word	0x3ff80000
 800f5c8:	636f4361 	.word	0x636f4361
 800f5cc:	3fd287a7 	.word	0x3fd287a7
 800f5d0:	8b60c8b3 	.word	0x8b60c8b3
 800f5d4:	3fc68a28 	.word	0x3fc68a28
 800f5d8:	509f79fb 	.word	0x509f79fb
 800f5dc:	3fd34413 	.word	0x3fd34413
 800f5e0:	08012e48 	.word	0x08012e48
 800f5e4:	00000432 	.word	0x00000432
 800f5e8:	00000412 	.word	0x00000412
 800f5ec:	fe100000 	.word	0xfe100000
 800f5f0:	08012d53 	.word	0x08012d53
 800f5f4:	08012e20 	.word	0x08012e20
 800f5f8:	2302      	movs	r3, #2
 800f5fa:	9310      	str	r3, [sp, #64]	; 0x40
 800f5fc:	9b02      	ldr	r3, [sp, #8]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d016      	beq.n	800f630 <_dtoa_r+0x3dc>
 800f602:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f604:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f606:	425c      	negs	r4, r3
 800f608:	230f      	movs	r3, #15
 800f60a:	4ab6      	ldr	r2, [pc, #728]	; (800f8e4 <_dtoa_r+0x690>)
 800f60c:	4023      	ands	r3, r4
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	18d3      	adds	r3, r2, r3
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	f7f2 fd4f 	bl	80020b8 <__aeabi_dmul>
 800f61a:	2601      	movs	r6, #1
 800f61c:	2300      	movs	r3, #0
 800f61e:	9008      	str	r0, [sp, #32]
 800f620:	9109      	str	r1, [sp, #36]	; 0x24
 800f622:	4db1      	ldr	r5, [pc, #708]	; (800f8e8 <_dtoa_r+0x694>)
 800f624:	1124      	asrs	r4, r4, #4
 800f626:	2c00      	cmp	r4, #0
 800f628:	d000      	beq.n	800f62c <_dtoa_r+0x3d8>
 800f62a:	e094      	b.n	800f756 <_dtoa_r+0x502>
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d19f      	bne.n	800f570 <_dtoa_r+0x31c>
 800f630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f632:	2b00      	cmp	r3, #0
 800f634:	d100      	bne.n	800f638 <_dtoa_r+0x3e4>
 800f636:	e09b      	b.n	800f770 <_dtoa_r+0x51c>
 800f638:	9c08      	ldr	r4, [sp, #32]
 800f63a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f63c:	2200      	movs	r2, #0
 800f63e:	0020      	movs	r0, r4
 800f640:	0029      	movs	r1, r5
 800f642:	4baa      	ldr	r3, [pc, #680]	; (800f8ec <_dtoa_r+0x698>)
 800f644:	f7f0 ff10 	bl	8000468 <__aeabi_dcmplt>
 800f648:	2800      	cmp	r0, #0
 800f64a:	d100      	bne.n	800f64e <_dtoa_r+0x3fa>
 800f64c:	e090      	b.n	800f770 <_dtoa_r+0x51c>
 800f64e:	9b07      	ldr	r3, [sp, #28]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d100      	bne.n	800f656 <_dtoa_r+0x402>
 800f654:	e08c      	b.n	800f770 <_dtoa_r+0x51c>
 800f656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f658:	2b00      	cmp	r3, #0
 800f65a:	dd46      	ble.n	800f6ea <_dtoa_r+0x496>
 800f65c:	9b02      	ldr	r3, [sp, #8]
 800f65e:	2200      	movs	r2, #0
 800f660:	0020      	movs	r0, r4
 800f662:	0029      	movs	r1, r5
 800f664:	1e5e      	subs	r6, r3, #1
 800f666:	4ba2      	ldr	r3, [pc, #648]	; (800f8f0 <_dtoa_r+0x69c>)
 800f668:	f7f2 fd26 	bl	80020b8 <__aeabi_dmul>
 800f66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f66e:	9008      	str	r0, [sp, #32]
 800f670:	9109      	str	r1, [sp, #36]	; 0x24
 800f672:	3301      	adds	r3, #1
 800f674:	9310      	str	r3, [sp, #64]	; 0x40
 800f676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f678:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f67a:	9c08      	ldr	r4, [sp, #32]
 800f67c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f67e:	9314      	str	r3, [sp, #80]	; 0x50
 800f680:	f7f3 fb6c 	bl	8002d5c <__aeabi_i2d>
 800f684:	0022      	movs	r2, r4
 800f686:	002b      	movs	r3, r5
 800f688:	f7f2 fd16 	bl	80020b8 <__aeabi_dmul>
 800f68c:	2200      	movs	r2, #0
 800f68e:	4b99      	ldr	r3, [pc, #612]	; (800f8f4 <_dtoa_r+0x6a0>)
 800f690:	f7f1 fdd4 	bl	800123c <__aeabi_dadd>
 800f694:	9010      	str	r0, [sp, #64]	; 0x40
 800f696:	9111      	str	r1, [sp, #68]	; 0x44
 800f698:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f69a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f69c:	9208      	str	r2, [sp, #32]
 800f69e:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a0:	4a95      	ldr	r2, [pc, #596]	; (800f8f8 <_dtoa_r+0x6a4>)
 800f6a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f6a4:	4694      	mov	ip, r2
 800f6a6:	4463      	add	r3, ip
 800f6a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f6aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f6ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d161      	bne.n	800f776 <_dtoa_r+0x522>
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	0020      	movs	r0, r4
 800f6b6:	0029      	movs	r1, r5
 800f6b8:	4b90      	ldr	r3, [pc, #576]	; (800f8fc <_dtoa_r+0x6a8>)
 800f6ba:	f7f2 ff69 	bl	8002590 <__aeabi_dsub>
 800f6be:	9a08      	ldr	r2, [sp, #32]
 800f6c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6c2:	0004      	movs	r4, r0
 800f6c4:	000d      	movs	r5, r1
 800f6c6:	f7f0 fee3 	bl	8000490 <__aeabi_dcmpgt>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d000      	beq.n	800f6d0 <_dtoa_r+0x47c>
 800f6ce:	e2af      	b.n	800fc30 <_dtoa_r+0x9dc>
 800f6d0:	488b      	ldr	r0, [pc, #556]	; (800f900 <_dtoa_r+0x6ac>)
 800f6d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f6d4:	4684      	mov	ip, r0
 800f6d6:	4461      	add	r1, ip
 800f6d8:	000b      	movs	r3, r1
 800f6da:	0020      	movs	r0, r4
 800f6dc:	0029      	movs	r1, r5
 800f6de:	9a08      	ldr	r2, [sp, #32]
 800f6e0:	f7f0 fec2 	bl	8000468 <__aeabi_dcmplt>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d000      	beq.n	800f6ea <_dtoa_r+0x496>
 800f6e8:	e29f      	b.n	800fc2a <_dtoa_r+0x9d6>
 800f6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f6ee:	9308      	str	r3, [sp, #32]
 800f6f0:	9409      	str	r4, [sp, #36]	; 0x24
 800f6f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	da00      	bge.n	800f6fa <_dtoa_r+0x4a6>
 800f6f8:	e172      	b.n	800f9e0 <_dtoa_r+0x78c>
 800f6fa:	9a02      	ldr	r2, [sp, #8]
 800f6fc:	2a0e      	cmp	r2, #14
 800f6fe:	dd00      	ble.n	800f702 <_dtoa_r+0x4ae>
 800f700:	e16e      	b.n	800f9e0 <_dtoa_r+0x78c>
 800f702:	4b78      	ldr	r3, [pc, #480]	; (800f8e4 <_dtoa_r+0x690>)
 800f704:	00d2      	lsls	r2, r2, #3
 800f706:	189b      	adds	r3, r3, r2
 800f708:	685c      	ldr	r4, [r3, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	930a      	str	r3, [sp, #40]	; 0x28
 800f70e:	940b      	str	r4, [sp, #44]	; 0x2c
 800f710:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f712:	2b00      	cmp	r3, #0
 800f714:	db00      	blt.n	800f718 <_dtoa_r+0x4c4>
 800f716:	e0f7      	b.n	800f908 <_dtoa_r+0x6b4>
 800f718:	9b07      	ldr	r3, [sp, #28]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	dd00      	ble.n	800f720 <_dtoa_r+0x4cc>
 800f71e:	e0f3      	b.n	800f908 <_dtoa_r+0x6b4>
 800f720:	d000      	beq.n	800f724 <_dtoa_r+0x4d0>
 800f722:	e282      	b.n	800fc2a <_dtoa_r+0x9d6>
 800f724:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f728:	2200      	movs	r2, #0
 800f72a:	4b74      	ldr	r3, [pc, #464]	; (800f8fc <_dtoa_r+0x6a8>)
 800f72c:	f7f2 fcc4 	bl	80020b8 <__aeabi_dmul>
 800f730:	9a08      	ldr	r2, [sp, #32]
 800f732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f734:	f7f0 feb6 	bl	80004a4 <__aeabi_dcmpge>
 800f738:	9e07      	ldr	r6, [sp, #28]
 800f73a:	0035      	movs	r5, r6
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d000      	beq.n	800f742 <_dtoa_r+0x4ee>
 800f740:	e259      	b.n	800fbf6 <_dtoa_r+0x9a2>
 800f742:	9b06      	ldr	r3, [sp, #24]
 800f744:	9a06      	ldr	r2, [sp, #24]
 800f746:	3301      	adds	r3, #1
 800f748:	9308      	str	r3, [sp, #32]
 800f74a:	2331      	movs	r3, #49	; 0x31
 800f74c:	7013      	strb	r3, [r2, #0]
 800f74e:	9b02      	ldr	r3, [sp, #8]
 800f750:	3301      	adds	r3, #1
 800f752:	9302      	str	r3, [sp, #8]
 800f754:	e254      	b.n	800fc00 <_dtoa_r+0x9ac>
 800f756:	4234      	tst	r4, r6
 800f758:	d007      	beq.n	800f76a <_dtoa_r+0x516>
 800f75a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f75c:	3301      	adds	r3, #1
 800f75e:	9310      	str	r3, [sp, #64]	; 0x40
 800f760:	682a      	ldr	r2, [r5, #0]
 800f762:	686b      	ldr	r3, [r5, #4]
 800f764:	f7f2 fca8 	bl	80020b8 <__aeabi_dmul>
 800f768:	0033      	movs	r3, r6
 800f76a:	1064      	asrs	r4, r4, #1
 800f76c:	3508      	adds	r5, #8
 800f76e:	e75a      	b.n	800f626 <_dtoa_r+0x3d2>
 800f770:	9e02      	ldr	r6, [sp, #8]
 800f772:	9b07      	ldr	r3, [sp, #28]
 800f774:	e780      	b.n	800f678 <_dtoa_r+0x424>
 800f776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f778:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f77a:	1e5a      	subs	r2, r3, #1
 800f77c:	4b59      	ldr	r3, [pc, #356]	; (800f8e4 <_dtoa_r+0x690>)
 800f77e:	00d2      	lsls	r2, r2, #3
 800f780:	189b      	adds	r3, r3, r2
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	2900      	cmp	r1, #0
 800f788:	d051      	beq.n	800f82e <_dtoa_r+0x5da>
 800f78a:	2000      	movs	r0, #0
 800f78c:	495d      	ldr	r1, [pc, #372]	; (800f904 <_dtoa_r+0x6b0>)
 800f78e:	f7f2 f891 	bl	80018b4 <__aeabi_ddiv>
 800f792:	9a08      	ldr	r2, [sp, #32]
 800f794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f796:	f7f2 fefb 	bl	8002590 <__aeabi_dsub>
 800f79a:	9a06      	ldr	r2, [sp, #24]
 800f79c:	9b06      	ldr	r3, [sp, #24]
 800f79e:	4694      	mov	ip, r2
 800f7a0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f7a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7a4:	9010      	str	r0, [sp, #64]	; 0x40
 800f7a6:	9111      	str	r1, [sp, #68]	; 0x44
 800f7a8:	4463      	add	r3, ip
 800f7aa:	9319      	str	r3, [sp, #100]	; 0x64
 800f7ac:	0029      	movs	r1, r5
 800f7ae:	0020      	movs	r0, r4
 800f7b0:	f7f3 fa9e 	bl	8002cf0 <__aeabi_d2iz>
 800f7b4:	9014      	str	r0, [sp, #80]	; 0x50
 800f7b6:	f7f3 fad1 	bl	8002d5c <__aeabi_i2d>
 800f7ba:	0002      	movs	r2, r0
 800f7bc:	000b      	movs	r3, r1
 800f7be:	0020      	movs	r0, r4
 800f7c0:	0029      	movs	r1, r5
 800f7c2:	f7f2 fee5 	bl	8002590 <__aeabi_dsub>
 800f7c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	9308      	str	r3, [sp, #32]
 800f7ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7d0:	0004      	movs	r4, r0
 800f7d2:	3330      	adds	r3, #48	; 0x30
 800f7d4:	7013      	strb	r3, [r2, #0]
 800f7d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7da:	000d      	movs	r5, r1
 800f7dc:	f7f0 fe44 	bl	8000468 <__aeabi_dcmplt>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d175      	bne.n	800f8d0 <_dtoa_r+0x67c>
 800f7e4:	0022      	movs	r2, r4
 800f7e6:	002b      	movs	r3, r5
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	4940      	ldr	r1, [pc, #256]	; (800f8ec <_dtoa_r+0x698>)
 800f7ec:	f7f2 fed0 	bl	8002590 <__aeabi_dsub>
 800f7f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7f4:	f7f0 fe38 	bl	8000468 <__aeabi_dcmplt>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d000      	beq.n	800f7fe <_dtoa_r+0x5aa>
 800f7fc:	e0d2      	b.n	800f9a4 <_dtoa_r+0x750>
 800f7fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f800:	9a08      	ldr	r2, [sp, #32]
 800f802:	4293      	cmp	r3, r2
 800f804:	d100      	bne.n	800f808 <_dtoa_r+0x5b4>
 800f806:	e770      	b.n	800f6ea <_dtoa_r+0x496>
 800f808:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f80a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f80c:	2200      	movs	r2, #0
 800f80e:	4b38      	ldr	r3, [pc, #224]	; (800f8f0 <_dtoa_r+0x69c>)
 800f810:	f7f2 fc52 	bl	80020b8 <__aeabi_dmul>
 800f814:	4b36      	ldr	r3, [pc, #216]	; (800f8f0 <_dtoa_r+0x69c>)
 800f816:	9010      	str	r0, [sp, #64]	; 0x40
 800f818:	9111      	str	r1, [sp, #68]	; 0x44
 800f81a:	2200      	movs	r2, #0
 800f81c:	0020      	movs	r0, r4
 800f81e:	0029      	movs	r1, r5
 800f820:	f7f2 fc4a 	bl	80020b8 <__aeabi_dmul>
 800f824:	9b08      	ldr	r3, [sp, #32]
 800f826:	0004      	movs	r4, r0
 800f828:	000d      	movs	r5, r1
 800f82a:	9317      	str	r3, [sp, #92]	; 0x5c
 800f82c:	e7be      	b.n	800f7ac <_dtoa_r+0x558>
 800f82e:	9808      	ldr	r0, [sp, #32]
 800f830:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f832:	f7f2 fc41 	bl	80020b8 <__aeabi_dmul>
 800f836:	9a06      	ldr	r2, [sp, #24]
 800f838:	9b06      	ldr	r3, [sp, #24]
 800f83a:	4694      	mov	ip, r2
 800f83c:	9308      	str	r3, [sp, #32]
 800f83e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f840:	9010      	str	r0, [sp, #64]	; 0x40
 800f842:	9111      	str	r1, [sp, #68]	; 0x44
 800f844:	4463      	add	r3, ip
 800f846:	9319      	str	r3, [sp, #100]	; 0x64
 800f848:	0029      	movs	r1, r5
 800f84a:	0020      	movs	r0, r4
 800f84c:	f7f3 fa50 	bl	8002cf0 <__aeabi_d2iz>
 800f850:	9017      	str	r0, [sp, #92]	; 0x5c
 800f852:	f7f3 fa83 	bl	8002d5c <__aeabi_i2d>
 800f856:	0002      	movs	r2, r0
 800f858:	000b      	movs	r3, r1
 800f85a:	0020      	movs	r0, r4
 800f85c:	0029      	movs	r1, r5
 800f85e:	f7f2 fe97 	bl	8002590 <__aeabi_dsub>
 800f862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f864:	9a08      	ldr	r2, [sp, #32]
 800f866:	3330      	adds	r3, #48	; 0x30
 800f868:	7013      	strb	r3, [r2, #0]
 800f86a:	0013      	movs	r3, r2
 800f86c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f86e:	3301      	adds	r3, #1
 800f870:	0004      	movs	r4, r0
 800f872:	000d      	movs	r5, r1
 800f874:	9308      	str	r3, [sp, #32]
 800f876:	4293      	cmp	r3, r2
 800f878:	d12c      	bne.n	800f8d4 <_dtoa_r+0x680>
 800f87a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f87c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f87e:	9a06      	ldr	r2, [sp, #24]
 800f880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f882:	4694      	mov	ip, r2
 800f884:	4463      	add	r3, ip
 800f886:	2200      	movs	r2, #0
 800f888:	9308      	str	r3, [sp, #32]
 800f88a:	4b1e      	ldr	r3, [pc, #120]	; (800f904 <_dtoa_r+0x6b0>)
 800f88c:	f7f1 fcd6 	bl	800123c <__aeabi_dadd>
 800f890:	0002      	movs	r2, r0
 800f892:	000b      	movs	r3, r1
 800f894:	0020      	movs	r0, r4
 800f896:	0029      	movs	r1, r5
 800f898:	f7f0 fdfa 	bl	8000490 <__aeabi_dcmpgt>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d000      	beq.n	800f8a2 <_dtoa_r+0x64e>
 800f8a0:	e080      	b.n	800f9a4 <_dtoa_r+0x750>
 800f8a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f8a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8a6:	2000      	movs	r0, #0
 800f8a8:	4916      	ldr	r1, [pc, #88]	; (800f904 <_dtoa_r+0x6b0>)
 800f8aa:	f7f2 fe71 	bl	8002590 <__aeabi_dsub>
 800f8ae:	0002      	movs	r2, r0
 800f8b0:	000b      	movs	r3, r1
 800f8b2:	0020      	movs	r0, r4
 800f8b4:	0029      	movs	r1, r5
 800f8b6:	f7f0 fdd7 	bl	8000468 <__aeabi_dcmplt>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d100      	bne.n	800f8c0 <_dtoa_r+0x66c>
 800f8be:	e714      	b.n	800f6ea <_dtoa_r+0x496>
 800f8c0:	9b08      	ldr	r3, [sp, #32]
 800f8c2:	001a      	movs	r2, r3
 800f8c4:	3a01      	subs	r2, #1
 800f8c6:	9208      	str	r2, [sp, #32]
 800f8c8:	7812      	ldrb	r2, [r2, #0]
 800f8ca:	2a30      	cmp	r2, #48	; 0x30
 800f8cc:	d0f8      	beq.n	800f8c0 <_dtoa_r+0x66c>
 800f8ce:	9308      	str	r3, [sp, #32]
 800f8d0:	9602      	str	r6, [sp, #8]
 800f8d2:	e055      	b.n	800f980 <_dtoa_r+0x72c>
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <_dtoa_r+0x69c>)
 800f8d8:	f7f2 fbee 	bl	80020b8 <__aeabi_dmul>
 800f8dc:	0004      	movs	r4, r0
 800f8de:	000d      	movs	r5, r1
 800f8e0:	e7b2      	b.n	800f848 <_dtoa_r+0x5f4>
 800f8e2:	46c0      	nop			; (mov r8, r8)
 800f8e4:	08012e48 	.word	0x08012e48
 800f8e8:	08012e20 	.word	0x08012e20
 800f8ec:	3ff00000 	.word	0x3ff00000
 800f8f0:	40240000 	.word	0x40240000
 800f8f4:	401c0000 	.word	0x401c0000
 800f8f8:	fcc00000 	.word	0xfcc00000
 800f8fc:	40140000 	.word	0x40140000
 800f900:	7cc00000 	.word	0x7cc00000
 800f904:	3fe00000 	.word	0x3fe00000
 800f908:	9b07      	ldr	r3, [sp, #28]
 800f90a:	9e06      	ldr	r6, [sp, #24]
 800f90c:	3b01      	subs	r3, #1
 800f90e:	199b      	adds	r3, r3, r6
 800f910:	930c      	str	r3, [sp, #48]	; 0x30
 800f912:	9c08      	ldr	r4, [sp, #32]
 800f914:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f91a:	0020      	movs	r0, r4
 800f91c:	0029      	movs	r1, r5
 800f91e:	f7f1 ffc9 	bl	80018b4 <__aeabi_ddiv>
 800f922:	f7f3 f9e5 	bl	8002cf0 <__aeabi_d2iz>
 800f926:	9007      	str	r0, [sp, #28]
 800f928:	f7f3 fa18 	bl	8002d5c <__aeabi_i2d>
 800f92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f930:	f7f2 fbc2 	bl	80020b8 <__aeabi_dmul>
 800f934:	0002      	movs	r2, r0
 800f936:	000b      	movs	r3, r1
 800f938:	0020      	movs	r0, r4
 800f93a:	0029      	movs	r1, r5
 800f93c:	f7f2 fe28 	bl	8002590 <__aeabi_dsub>
 800f940:	0033      	movs	r3, r6
 800f942:	9a07      	ldr	r2, [sp, #28]
 800f944:	3601      	adds	r6, #1
 800f946:	3230      	adds	r2, #48	; 0x30
 800f948:	701a      	strb	r2, [r3, #0]
 800f94a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f94c:	9608      	str	r6, [sp, #32]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d139      	bne.n	800f9c6 <_dtoa_r+0x772>
 800f952:	0002      	movs	r2, r0
 800f954:	000b      	movs	r3, r1
 800f956:	f7f1 fc71 	bl	800123c <__aeabi_dadd>
 800f95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f95e:	0004      	movs	r4, r0
 800f960:	000d      	movs	r5, r1
 800f962:	f7f0 fd95 	bl	8000490 <__aeabi_dcmpgt>
 800f966:	2800      	cmp	r0, #0
 800f968:	d11b      	bne.n	800f9a2 <_dtoa_r+0x74e>
 800f96a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f96e:	0020      	movs	r0, r4
 800f970:	0029      	movs	r1, r5
 800f972:	f7f0 fd73 	bl	800045c <__aeabi_dcmpeq>
 800f976:	2800      	cmp	r0, #0
 800f978:	d002      	beq.n	800f980 <_dtoa_r+0x72c>
 800f97a:	9b07      	ldr	r3, [sp, #28]
 800f97c:	07db      	lsls	r3, r3, #31
 800f97e:	d410      	bmi.n	800f9a2 <_dtoa_r+0x74e>
 800f980:	0038      	movs	r0, r7
 800f982:	9905      	ldr	r1, [sp, #20]
 800f984:	f000 fbe4 	bl	8010150 <_Bfree>
 800f988:	2300      	movs	r3, #0
 800f98a:	9a08      	ldr	r2, [sp, #32]
 800f98c:	9802      	ldr	r0, [sp, #8]
 800f98e:	7013      	strb	r3, [r2, #0]
 800f990:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f992:	3001      	adds	r0, #1
 800f994:	6018      	str	r0, [r3, #0]
 800f996:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d100      	bne.n	800f99e <_dtoa_r+0x74a>
 800f99c:	e4a6      	b.n	800f2ec <_dtoa_r+0x98>
 800f99e:	601a      	str	r2, [r3, #0]
 800f9a0:	e4a4      	b.n	800f2ec <_dtoa_r+0x98>
 800f9a2:	9e02      	ldr	r6, [sp, #8]
 800f9a4:	9b08      	ldr	r3, [sp, #32]
 800f9a6:	9308      	str	r3, [sp, #32]
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	781a      	ldrb	r2, [r3, #0]
 800f9ac:	2a39      	cmp	r2, #57	; 0x39
 800f9ae:	d106      	bne.n	800f9be <_dtoa_r+0x76a>
 800f9b0:	9a06      	ldr	r2, [sp, #24]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d1f7      	bne.n	800f9a6 <_dtoa_r+0x752>
 800f9b6:	2230      	movs	r2, #48	; 0x30
 800f9b8:	9906      	ldr	r1, [sp, #24]
 800f9ba:	3601      	adds	r6, #1
 800f9bc:	700a      	strb	r2, [r1, #0]
 800f9be:	781a      	ldrb	r2, [r3, #0]
 800f9c0:	3201      	adds	r2, #1
 800f9c2:	701a      	strb	r2, [r3, #0]
 800f9c4:	e784      	b.n	800f8d0 <_dtoa_r+0x67c>
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	4baa      	ldr	r3, [pc, #680]	; (800fc74 <_dtoa_r+0xa20>)
 800f9ca:	f7f2 fb75 	bl	80020b8 <__aeabi_dmul>
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	0004      	movs	r4, r0
 800f9d4:	000d      	movs	r5, r1
 800f9d6:	f7f0 fd41 	bl	800045c <__aeabi_dcmpeq>
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d09b      	beq.n	800f916 <_dtoa_r+0x6c2>
 800f9de:	e7cf      	b.n	800f980 <_dtoa_r+0x72c>
 800f9e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f9e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f9e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f9e6:	2d00      	cmp	r5, #0
 800f9e8:	d012      	beq.n	800fa10 <_dtoa_r+0x7bc>
 800f9ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f9ec:	2a01      	cmp	r2, #1
 800f9ee:	dc66      	bgt.n	800fabe <_dtoa_r+0x86a>
 800f9f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f9f2:	2a00      	cmp	r2, #0
 800f9f4:	d05d      	beq.n	800fab2 <_dtoa_r+0x85e>
 800f9f6:	4aa0      	ldr	r2, [pc, #640]	; (800fc78 <_dtoa_r+0xa24>)
 800f9f8:	189b      	adds	r3, r3, r2
 800f9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9fc:	2101      	movs	r1, #1
 800f9fe:	18d2      	adds	r2, r2, r3
 800fa00:	920a      	str	r2, [sp, #40]	; 0x28
 800fa02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa04:	0038      	movs	r0, r7
 800fa06:	18d3      	adds	r3, r2, r3
 800fa08:	930d      	str	r3, [sp, #52]	; 0x34
 800fa0a:	f000 fc51 	bl	80102b0 <__i2b>
 800fa0e:	0005      	movs	r5, r0
 800fa10:	2c00      	cmp	r4, #0
 800fa12:	dd0e      	ble.n	800fa32 <_dtoa_r+0x7de>
 800fa14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	dd0b      	ble.n	800fa32 <_dtoa_r+0x7de>
 800fa1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa1c:	0023      	movs	r3, r4
 800fa1e:	4294      	cmp	r4, r2
 800fa20:	dd00      	ble.n	800fa24 <_dtoa_r+0x7d0>
 800fa22:	0013      	movs	r3, r2
 800fa24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa26:	1ae4      	subs	r4, r4, r3
 800fa28:	1ad2      	subs	r2, r2, r3
 800fa2a:	920a      	str	r2, [sp, #40]	; 0x28
 800fa2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa2e:	1ad3      	subs	r3, r2, r3
 800fa30:	930d      	str	r3, [sp, #52]	; 0x34
 800fa32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d01f      	beq.n	800fa78 <_dtoa_r+0x824>
 800fa38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d054      	beq.n	800fae8 <_dtoa_r+0x894>
 800fa3e:	2e00      	cmp	r6, #0
 800fa40:	dd11      	ble.n	800fa66 <_dtoa_r+0x812>
 800fa42:	0029      	movs	r1, r5
 800fa44:	0032      	movs	r2, r6
 800fa46:	0038      	movs	r0, r7
 800fa48:	f000 fcf8 	bl	801043c <__pow5mult>
 800fa4c:	9a05      	ldr	r2, [sp, #20]
 800fa4e:	0001      	movs	r1, r0
 800fa50:	0005      	movs	r5, r0
 800fa52:	0038      	movs	r0, r7
 800fa54:	f000 fc42 	bl	80102dc <__multiply>
 800fa58:	9905      	ldr	r1, [sp, #20]
 800fa5a:	9014      	str	r0, [sp, #80]	; 0x50
 800fa5c:	0038      	movs	r0, r7
 800fa5e:	f000 fb77 	bl	8010150 <_Bfree>
 800fa62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa64:	9305      	str	r3, [sp, #20]
 800fa66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa68:	1b9a      	subs	r2, r3, r6
 800fa6a:	42b3      	cmp	r3, r6
 800fa6c:	d004      	beq.n	800fa78 <_dtoa_r+0x824>
 800fa6e:	0038      	movs	r0, r7
 800fa70:	9905      	ldr	r1, [sp, #20]
 800fa72:	f000 fce3 	bl	801043c <__pow5mult>
 800fa76:	9005      	str	r0, [sp, #20]
 800fa78:	2101      	movs	r1, #1
 800fa7a:	0038      	movs	r0, r7
 800fa7c:	f000 fc18 	bl	80102b0 <__i2b>
 800fa80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa82:	0006      	movs	r6, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	dd31      	ble.n	800faec <_dtoa_r+0x898>
 800fa88:	001a      	movs	r2, r3
 800fa8a:	0001      	movs	r1, r0
 800fa8c:	0038      	movs	r0, r7
 800fa8e:	f000 fcd5 	bl	801043c <__pow5mult>
 800fa92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa94:	0006      	movs	r6, r0
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	dd2d      	ble.n	800faf6 <_dtoa_r+0x8a2>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	930e      	str	r3, [sp, #56]	; 0x38
 800fa9e:	6933      	ldr	r3, [r6, #16]
 800faa0:	3303      	adds	r3, #3
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	18f3      	adds	r3, r6, r3
 800faa6:	6858      	ldr	r0, [r3, #4]
 800faa8:	f000 fbba 	bl	8010220 <__hi0bits>
 800faac:	2320      	movs	r3, #32
 800faae:	1a18      	subs	r0, r3, r0
 800fab0:	e039      	b.n	800fb26 <_dtoa_r+0x8d2>
 800fab2:	2336      	movs	r3, #54	; 0x36
 800fab4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fab6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fab8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800faba:	1a9b      	subs	r3, r3, r2
 800fabc:	e79d      	b.n	800f9fa <_dtoa_r+0x7a6>
 800fabe:	9b07      	ldr	r3, [sp, #28]
 800fac0:	1e5e      	subs	r6, r3, #1
 800fac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fac4:	42b3      	cmp	r3, r6
 800fac6:	db07      	blt.n	800fad8 <_dtoa_r+0x884>
 800fac8:	1b9e      	subs	r6, r3, r6
 800faca:	9b07      	ldr	r3, [sp, #28]
 800facc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800face:	2b00      	cmp	r3, #0
 800fad0:	da93      	bge.n	800f9fa <_dtoa_r+0x7a6>
 800fad2:	1ae4      	subs	r4, r4, r3
 800fad4:	2300      	movs	r3, #0
 800fad6:	e790      	b.n	800f9fa <_dtoa_r+0x7a6>
 800fad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fadc:	1af3      	subs	r3, r6, r3
 800fade:	18d3      	adds	r3, r2, r3
 800fae0:	960e      	str	r6, [sp, #56]	; 0x38
 800fae2:	9315      	str	r3, [sp, #84]	; 0x54
 800fae4:	2600      	movs	r6, #0
 800fae6:	e7f0      	b.n	800faca <_dtoa_r+0x876>
 800fae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800faea:	e7c0      	b.n	800fa6e <_dtoa_r+0x81a>
 800faec:	2300      	movs	r3, #0
 800faee:	930e      	str	r3, [sp, #56]	; 0x38
 800faf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	dc13      	bgt.n	800fb1e <_dtoa_r+0x8ca>
 800faf6:	2300      	movs	r3, #0
 800faf8:	930e      	str	r3, [sp, #56]	; 0x38
 800fafa:	9b08      	ldr	r3, [sp, #32]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10e      	bne.n	800fb1e <_dtoa_r+0x8ca>
 800fb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb02:	031b      	lsls	r3, r3, #12
 800fb04:	d10b      	bne.n	800fb1e <_dtoa_r+0x8ca>
 800fb06:	4b5d      	ldr	r3, [pc, #372]	; (800fc7c <_dtoa_r+0xa28>)
 800fb08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb0a:	4213      	tst	r3, r2
 800fb0c:	d007      	beq.n	800fb1e <_dtoa_r+0x8ca>
 800fb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb10:	3301      	adds	r3, #1
 800fb12:	930a      	str	r3, [sp, #40]	; 0x28
 800fb14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb16:	3301      	adds	r3, #1
 800fb18:	930d      	str	r3, [sp, #52]	; 0x34
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	930e      	str	r3, [sp, #56]	; 0x38
 800fb1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb20:	2001      	movs	r0, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1bb      	bne.n	800fa9e <_dtoa_r+0x84a>
 800fb26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb28:	221f      	movs	r2, #31
 800fb2a:	1818      	adds	r0, r3, r0
 800fb2c:	0003      	movs	r3, r0
 800fb2e:	4013      	ands	r3, r2
 800fb30:	4210      	tst	r0, r2
 800fb32:	d046      	beq.n	800fbc2 <_dtoa_r+0x96e>
 800fb34:	3201      	adds	r2, #1
 800fb36:	1ad2      	subs	r2, r2, r3
 800fb38:	2a04      	cmp	r2, #4
 800fb3a:	dd3f      	ble.n	800fbbc <_dtoa_r+0x968>
 800fb3c:	221c      	movs	r2, #28
 800fb3e:	1ad3      	subs	r3, r2, r3
 800fb40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb42:	18e4      	adds	r4, r4, r3
 800fb44:	18d2      	adds	r2, r2, r3
 800fb46:	920a      	str	r2, [sp, #40]	; 0x28
 800fb48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb4a:	18d3      	adds	r3, r2, r3
 800fb4c:	930d      	str	r3, [sp, #52]	; 0x34
 800fb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	dd05      	ble.n	800fb60 <_dtoa_r+0x90c>
 800fb54:	001a      	movs	r2, r3
 800fb56:	0038      	movs	r0, r7
 800fb58:	9905      	ldr	r1, [sp, #20]
 800fb5a:	f000 fccb 	bl	80104f4 <__lshift>
 800fb5e:	9005      	str	r0, [sp, #20]
 800fb60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	dd05      	ble.n	800fb72 <_dtoa_r+0x91e>
 800fb66:	0031      	movs	r1, r6
 800fb68:	001a      	movs	r2, r3
 800fb6a:	0038      	movs	r0, r7
 800fb6c:	f000 fcc2 	bl	80104f4 <__lshift>
 800fb70:	0006      	movs	r6, r0
 800fb72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d026      	beq.n	800fbc6 <_dtoa_r+0x972>
 800fb78:	0031      	movs	r1, r6
 800fb7a:	9805      	ldr	r0, [sp, #20]
 800fb7c:	f000 fd28 	bl	80105d0 <__mcmp>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	da20      	bge.n	800fbc6 <_dtoa_r+0x972>
 800fb84:	9b02      	ldr	r3, [sp, #8]
 800fb86:	220a      	movs	r2, #10
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	9302      	str	r3, [sp, #8]
 800fb8c:	0038      	movs	r0, r7
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9905      	ldr	r1, [sp, #20]
 800fb92:	f000 fb01 	bl	8010198 <__multadd>
 800fb96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb98:	9005      	str	r0, [sp, #20]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d100      	bne.n	800fba0 <_dtoa_r+0x94c>
 800fb9e:	e166      	b.n	800fe6e <_dtoa_r+0xc1a>
 800fba0:	2300      	movs	r3, #0
 800fba2:	0029      	movs	r1, r5
 800fba4:	220a      	movs	r2, #10
 800fba6:	0038      	movs	r0, r7
 800fba8:	f000 faf6 	bl	8010198 <__multadd>
 800fbac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbae:	0005      	movs	r5, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	dc47      	bgt.n	800fc44 <_dtoa_r+0x9f0>
 800fbb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	dc0d      	bgt.n	800fbd6 <_dtoa_r+0x982>
 800fbba:	e043      	b.n	800fc44 <_dtoa_r+0x9f0>
 800fbbc:	2a04      	cmp	r2, #4
 800fbbe:	d0c6      	beq.n	800fb4e <_dtoa_r+0x8fa>
 800fbc0:	0013      	movs	r3, r2
 800fbc2:	331c      	adds	r3, #28
 800fbc4:	e7bc      	b.n	800fb40 <_dtoa_r+0x8ec>
 800fbc6:	9b07      	ldr	r3, [sp, #28]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	dc35      	bgt.n	800fc38 <_dtoa_r+0x9e4>
 800fbcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	dd32      	ble.n	800fc38 <_dtoa_r+0x9e4>
 800fbd2:	9b07      	ldr	r3, [sp, #28]
 800fbd4:	930c      	str	r3, [sp, #48]	; 0x30
 800fbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d10c      	bne.n	800fbf6 <_dtoa_r+0x9a2>
 800fbdc:	0031      	movs	r1, r6
 800fbde:	2205      	movs	r2, #5
 800fbe0:	0038      	movs	r0, r7
 800fbe2:	f000 fad9 	bl	8010198 <__multadd>
 800fbe6:	0006      	movs	r6, r0
 800fbe8:	0001      	movs	r1, r0
 800fbea:	9805      	ldr	r0, [sp, #20]
 800fbec:	f000 fcf0 	bl	80105d0 <__mcmp>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	dd00      	ble.n	800fbf6 <_dtoa_r+0x9a2>
 800fbf4:	e5a5      	b.n	800f742 <_dtoa_r+0x4ee>
 800fbf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fbf8:	43db      	mvns	r3, r3
 800fbfa:	9302      	str	r3, [sp, #8]
 800fbfc:	9b06      	ldr	r3, [sp, #24]
 800fbfe:	9308      	str	r3, [sp, #32]
 800fc00:	2400      	movs	r4, #0
 800fc02:	0031      	movs	r1, r6
 800fc04:	0038      	movs	r0, r7
 800fc06:	f000 faa3 	bl	8010150 <_Bfree>
 800fc0a:	2d00      	cmp	r5, #0
 800fc0c:	d100      	bne.n	800fc10 <_dtoa_r+0x9bc>
 800fc0e:	e6b7      	b.n	800f980 <_dtoa_r+0x72c>
 800fc10:	2c00      	cmp	r4, #0
 800fc12:	d005      	beq.n	800fc20 <_dtoa_r+0x9cc>
 800fc14:	42ac      	cmp	r4, r5
 800fc16:	d003      	beq.n	800fc20 <_dtoa_r+0x9cc>
 800fc18:	0021      	movs	r1, r4
 800fc1a:	0038      	movs	r0, r7
 800fc1c:	f000 fa98 	bl	8010150 <_Bfree>
 800fc20:	0029      	movs	r1, r5
 800fc22:	0038      	movs	r0, r7
 800fc24:	f000 fa94 	bl	8010150 <_Bfree>
 800fc28:	e6aa      	b.n	800f980 <_dtoa_r+0x72c>
 800fc2a:	2600      	movs	r6, #0
 800fc2c:	0035      	movs	r5, r6
 800fc2e:	e7e2      	b.n	800fbf6 <_dtoa_r+0x9a2>
 800fc30:	9602      	str	r6, [sp, #8]
 800fc32:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800fc34:	0035      	movs	r5, r6
 800fc36:	e584      	b.n	800f742 <_dtoa_r+0x4ee>
 800fc38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d100      	bne.n	800fc40 <_dtoa_r+0x9ec>
 800fc3e:	e0ce      	b.n	800fdde <_dtoa_r+0xb8a>
 800fc40:	9b07      	ldr	r3, [sp, #28]
 800fc42:	930c      	str	r3, [sp, #48]	; 0x30
 800fc44:	2c00      	cmp	r4, #0
 800fc46:	dd05      	ble.n	800fc54 <_dtoa_r+0xa00>
 800fc48:	0029      	movs	r1, r5
 800fc4a:	0022      	movs	r2, r4
 800fc4c:	0038      	movs	r0, r7
 800fc4e:	f000 fc51 	bl	80104f4 <__lshift>
 800fc52:	0005      	movs	r5, r0
 800fc54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc56:	0028      	movs	r0, r5
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d022      	beq.n	800fca2 <_dtoa_r+0xa4e>
 800fc5c:	0038      	movs	r0, r7
 800fc5e:	6869      	ldr	r1, [r5, #4]
 800fc60:	f000 fa32 	bl	80100c8 <_Balloc>
 800fc64:	1e04      	subs	r4, r0, #0
 800fc66:	d10f      	bne.n	800fc88 <_dtoa_r+0xa34>
 800fc68:	0002      	movs	r2, r0
 800fc6a:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <_dtoa_r+0xa2c>)
 800fc6c:	4905      	ldr	r1, [pc, #20]	; (800fc84 <_dtoa_r+0xa30>)
 800fc6e:	f7ff fb06 	bl	800f27e <_dtoa_r+0x2a>
 800fc72:	46c0      	nop			; (mov r8, r8)
 800fc74:	40240000 	.word	0x40240000
 800fc78:	00000433 	.word	0x00000433
 800fc7c:	7ff00000 	.word	0x7ff00000
 800fc80:	08012d53 	.word	0x08012d53
 800fc84:	000002ea 	.word	0x000002ea
 800fc88:	0029      	movs	r1, r5
 800fc8a:	692b      	ldr	r3, [r5, #16]
 800fc8c:	310c      	adds	r1, #12
 800fc8e:	1c9a      	adds	r2, r3, #2
 800fc90:	0092      	lsls	r2, r2, #2
 800fc92:	300c      	adds	r0, #12
 800fc94:	f7fe fd8c 	bl	800e7b0 <memcpy>
 800fc98:	2201      	movs	r2, #1
 800fc9a:	0021      	movs	r1, r4
 800fc9c:	0038      	movs	r0, r7
 800fc9e:	f000 fc29 	bl	80104f4 <__lshift>
 800fca2:	9b06      	ldr	r3, [sp, #24]
 800fca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fca6:	930a      	str	r3, [sp, #40]	; 0x28
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	189b      	adds	r3, r3, r2
 800fcac:	2201      	movs	r2, #1
 800fcae:	002c      	movs	r4, r5
 800fcb0:	0005      	movs	r5, r0
 800fcb2:	9314      	str	r3, [sp, #80]	; 0x50
 800fcb4:	9b08      	ldr	r3, [sp, #32]
 800fcb6:	4013      	ands	r3, r2
 800fcb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcba:	0031      	movs	r1, r6
 800fcbc:	9805      	ldr	r0, [sp, #20]
 800fcbe:	f7ff fa3e 	bl	800f13e <quorem>
 800fcc2:	0003      	movs	r3, r0
 800fcc4:	0021      	movs	r1, r4
 800fcc6:	3330      	adds	r3, #48	; 0x30
 800fcc8:	900d      	str	r0, [sp, #52]	; 0x34
 800fcca:	9805      	ldr	r0, [sp, #20]
 800fccc:	9307      	str	r3, [sp, #28]
 800fcce:	f000 fc7f 	bl	80105d0 <__mcmp>
 800fcd2:	002a      	movs	r2, r5
 800fcd4:	900e      	str	r0, [sp, #56]	; 0x38
 800fcd6:	0031      	movs	r1, r6
 800fcd8:	0038      	movs	r0, r7
 800fcda:	f000 fc95 	bl	8010608 <__mdiff>
 800fcde:	68c3      	ldr	r3, [r0, #12]
 800fce0:	9008      	str	r0, [sp, #32]
 800fce2:	9310      	str	r3, [sp, #64]	; 0x40
 800fce4:	2301      	movs	r3, #1
 800fce6:	930c      	str	r3, [sp, #48]	; 0x30
 800fce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d104      	bne.n	800fcf8 <_dtoa_r+0xaa4>
 800fcee:	0001      	movs	r1, r0
 800fcf0:	9805      	ldr	r0, [sp, #20]
 800fcf2:	f000 fc6d 	bl	80105d0 <__mcmp>
 800fcf6:	900c      	str	r0, [sp, #48]	; 0x30
 800fcf8:	0038      	movs	r0, r7
 800fcfa:	9908      	ldr	r1, [sp, #32]
 800fcfc:	f000 fa28 	bl	8010150 <_Bfree>
 800fd00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd04:	3301      	adds	r3, #1
 800fd06:	9308      	str	r3, [sp, #32]
 800fd08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	d10c      	bne.n	800fd2c <_dtoa_r+0xad8>
 800fd12:	9b07      	ldr	r3, [sp, #28]
 800fd14:	2b39      	cmp	r3, #57	; 0x39
 800fd16:	d026      	beq.n	800fd66 <_dtoa_r+0xb12>
 800fd18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	dd02      	ble.n	800fd24 <_dtoa_r+0xad0>
 800fd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd20:	3331      	adds	r3, #49	; 0x31
 800fd22:	9307      	str	r3, [sp, #28]
 800fd24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd26:	9a07      	ldr	r2, [sp, #28]
 800fd28:	701a      	strb	r2, [r3, #0]
 800fd2a:	e76a      	b.n	800fc02 <_dtoa_r+0x9ae>
 800fd2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	db04      	blt.n	800fd3c <_dtoa_r+0xae8>
 800fd32:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fd34:	4313      	orrs	r3, r2
 800fd36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	d11f      	bne.n	800fd7c <_dtoa_r+0xb28>
 800fd3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	ddf0      	ble.n	800fd24 <_dtoa_r+0xad0>
 800fd42:	9905      	ldr	r1, [sp, #20]
 800fd44:	2201      	movs	r2, #1
 800fd46:	0038      	movs	r0, r7
 800fd48:	f000 fbd4 	bl	80104f4 <__lshift>
 800fd4c:	0031      	movs	r1, r6
 800fd4e:	9005      	str	r0, [sp, #20]
 800fd50:	f000 fc3e 	bl	80105d0 <__mcmp>
 800fd54:	2800      	cmp	r0, #0
 800fd56:	dc03      	bgt.n	800fd60 <_dtoa_r+0xb0c>
 800fd58:	d1e4      	bne.n	800fd24 <_dtoa_r+0xad0>
 800fd5a:	9b07      	ldr	r3, [sp, #28]
 800fd5c:	07db      	lsls	r3, r3, #31
 800fd5e:	d5e1      	bpl.n	800fd24 <_dtoa_r+0xad0>
 800fd60:	9b07      	ldr	r3, [sp, #28]
 800fd62:	2b39      	cmp	r3, #57	; 0x39
 800fd64:	d1db      	bne.n	800fd1e <_dtoa_r+0xaca>
 800fd66:	2339      	movs	r3, #57	; 0x39
 800fd68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd6a:	7013      	strb	r3, [r2, #0]
 800fd6c:	9b08      	ldr	r3, [sp, #32]
 800fd6e:	9308      	str	r3, [sp, #32]
 800fd70:	3b01      	subs	r3, #1
 800fd72:	781a      	ldrb	r2, [r3, #0]
 800fd74:	2a39      	cmp	r2, #57	; 0x39
 800fd76:	d068      	beq.n	800fe4a <_dtoa_r+0xbf6>
 800fd78:	3201      	adds	r2, #1
 800fd7a:	e7d5      	b.n	800fd28 <_dtoa_r+0xad4>
 800fd7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	dd07      	ble.n	800fd92 <_dtoa_r+0xb3e>
 800fd82:	9b07      	ldr	r3, [sp, #28]
 800fd84:	2b39      	cmp	r3, #57	; 0x39
 800fd86:	d0ee      	beq.n	800fd66 <_dtoa_r+0xb12>
 800fd88:	9b07      	ldr	r3, [sp, #28]
 800fd8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	7013      	strb	r3, [r2, #0]
 800fd90:	e737      	b.n	800fc02 <_dtoa_r+0x9ae>
 800fd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd94:	9a07      	ldr	r2, [sp, #28]
 800fd96:	701a      	strb	r2, [r3, #0]
 800fd98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d03e      	beq.n	800fe1e <_dtoa_r+0xbca>
 800fda0:	2300      	movs	r3, #0
 800fda2:	220a      	movs	r2, #10
 800fda4:	9905      	ldr	r1, [sp, #20]
 800fda6:	0038      	movs	r0, r7
 800fda8:	f000 f9f6 	bl	8010198 <__multadd>
 800fdac:	2300      	movs	r3, #0
 800fdae:	9005      	str	r0, [sp, #20]
 800fdb0:	220a      	movs	r2, #10
 800fdb2:	0021      	movs	r1, r4
 800fdb4:	0038      	movs	r0, r7
 800fdb6:	42ac      	cmp	r4, r5
 800fdb8:	d106      	bne.n	800fdc8 <_dtoa_r+0xb74>
 800fdba:	f000 f9ed 	bl	8010198 <__multadd>
 800fdbe:	0004      	movs	r4, r0
 800fdc0:	0005      	movs	r5, r0
 800fdc2:	9b08      	ldr	r3, [sp, #32]
 800fdc4:	930a      	str	r3, [sp, #40]	; 0x28
 800fdc6:	e778      	b.n	800fcba <_dtoa_r+0xa66>
 800fdc8:	f000 f9e6 	bl	8010198 <__multadd>
 800fdcc:	0029      	movs	r1, r5
 800fdce:	0004      	movs	r4, r0
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	220a      	movs	r2, #10
 800fdd4:	0038      	movs	r0, r7
 800fdd6:	f000 f9df 	bl	8010198 <__multadd>
 800fdda:	0005      	movs	r5, r0
 800fddc:	e7f1      	b.n	800fdc2 <_dtoa_r+0xb6e>
 800fdde:	9b07      	ldr	r3, [sp, #28]
 800fde0:	930c      	str	r3, [sp, #48]	; 0x30
 800fde2:	2400      	movs	r4, #0
 800fde4:	0031      	movs	r1, r6
 800fde6:	9805      	ldr	r0, [sp, #20]
 800fde8:	f7ff f9a9 	bl	800f13e <quorem>
 800fdec:	9b06      	ldr	r3, [sp, #24]
 800fdee:	3030      	adds	r0, #48	; 0x30
 800fdf0:	5518      	strb	r0, [r3, r4]
 800fdf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdf4:	3401      	adds	r4, #1
 800fdf6:	9007      	str	r0, [sp, #28]
 800fdf8:	42a3      	cmp	r3, r4
 800fdfa:	dd07      	ble.n	800fe0c <_dtoa_r+0xbb8>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	220a      	movs	r2, #10
 800fe00:	0038      	movs	r0, r7
 800fe02:	9905      	ldr	r1, [sp, #20]
 800fe04:	f000 f9c8 	bl	8010198 <__multadd>
 800fe08:	9005      	str	r0, [sp, #20]
 800fe0a:	e7eb      	b.n	800fde4 <_dtoa_r+0xb90>
 800fe0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe0e:	2001      	movs	r0, #1
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	dd00      	ble.n	800fe16 <_dtoa_r+0xbc2>
 800fe14:	0018      	movs	r0, r3
 800fe16:	2400      	movs	r4, #0
 800fe18:	9b06      	ldr	r3, [sp, #24]
 800fe1a:	181b      	adds	r3, r3, r0
 800fe1c:	9308      	str	r3, [sp, #32]
 800fe1e:	9905      	ldr	r1, [sp, #20]
 800fe20:	2201      	movs	r2, #1
 800fe22:	0038      	movs	r0, r7
 800fe24:	f000 fb66 	bl	80104f4 <__lshift>
 800fe28:	0031      	movs	r1, r6
 800fe2a:	9005      	str	r0, [sp, #20]
 800fe2c:	f000 fbd0 	bl	80105d0 <__mcmp>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	dc9b      	bgt.n	800fd6c <_dtoa_r+0xb18>
 800fe34:	d102      	bne.n	800fe3c <_dtoa_r+0xbe8>
 800fe36:	9b07      	ldr	r3, [sp, #28]
 800fe38:	07db      	lsls	r3, r3, #31
 800fe3a:	d497      	bmi.n	800fd6c <_dtoa_r+0xb18>
 800fe3c:	9b08      	ldr	r3, [sp, #32]
 800fe3e:	9308      	str	r3, [sp, #32]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	781a      	ldrb	r2, [r3, #0]
 800fe44:	2a30      	cmp	r2, #48	; 0x30
 800fe46:	d0fa      	beq.n	800fe3e <_dtoa_r+0xbea>
 800fe48:	e6db      	b.n	800fc02 <_dtoa_r+0x9ae>
 800fe4a:	9a06      	ldr	r2, [sp, #24]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d18e      	bne.n	800fd6e <_dtoa_r+0xb1a>
 800fe50:	9b02      	ldr	r3, [sp, #8]
 800fe52:	3301      	adds	r3, #1
 800fe54:	9302      	str	r3, [sp, #8]
 800fe56:	2331      	movs	r3, #49	; 0x31
 800fe58:	e799      	b.n	800fd8e <_dtoa_r+0xb3a>
 800fe5a:	4b09      	ldr	r3, [pc, #36]	; (800fe80 <_dtoa_r+0xc2c>)
 800fe5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fe5e:	9306      	str	r3, [sp, #24]
 800fe60:	4b08      	ldr	r3, [pc, #32]	; (800fe84 <_dtoa_r+0xc30>)
 800fe62:	2a00      	cmp	r2, #0
 800fe64:	d001      	beq.n	800fe6a <_dtoa_r+0xc16>
 800fe66:	f7ff fa3f 	bl	800f2e8 <_dtoa_r+0x94>
 800fe6a:	f7ff fa3f 	bl	800f2ec <_dtoa_r+0x98>
 800fe6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	dcb6      	bgt.n	800fde2 <_dtoa_r+0xb8e>
 800fe74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	dd00      	ble.n	800fe7c <_dtoa_r+0xc28>
 800fe7a:	e6ac      	b.n	800fbd6 <_dtoa_r+0x982>
 800fe7c:	e7b1      	b.n	800fde2 <_dtoa_r+0xb8e>
 800fe7e:	46c0      	nop			; (mov r8, r8)
 800fe80:	08012cd4 	.word	0x08012cd4
 800fe84:	08012cdc 	.word	0x08012cdc

0800fe88 <std>:
 800fe88:	2300      	movs	r3, #0
 800fe8a:	b510      	push	{r4, lr}
 800fe8c:	0004      	movs	r4, r0
 800fe8e:	6003      	str	r3, [r0, #0]
 800fe90:	6043      	str	r3, [r0, #4]
 800fe92:	6083      	str	r3, [r0, #8]
 800fe94:	8181      	strh	r1, [r0, #12]
 800fe96:	6643      	str	r3, [r0, #100]	; 0x64
 800fe98:	0019      	movs	r1, r3
 800fe9a:	81c2      	strh	r2, [r0, #14]
 800fe9c:	6103      	str	r3, [r0, #16]
 800fe9e:	6143      	str	r3, [r0, #20]
 800fea0:	6183      	str	r3, [r0, #24]
 800fea2:	2208      	movs	r2, #8
 800fea4:	305c      	adds	r0, #92	; 0x5c
 800fea6:	f7fe fc8c 	bl	800e7c2 <memset>
 800feaa:	4b05      	ldr	r3, [pc, #20]	; (800fec0 <std+0x38>)
 800feac:	6224      	str	r4, [r4, #32]
 800feae:	6263      	str	r3, [r4, #36]	; 0x24
 800feb0:	4b04      	ldr	r3, [pc, #16]	; (800fec4 <std+0x3c>)
 800feb2:	62a3      	str	r3, [r4, #40]	; 0x28
 800feb4:	4b04      	ldr	r3, [pc, #16]	; (800fec8 <std+0x40>)
 800feb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800feb8:	4b04      	ldr	r3, [pc, #16]	; (800fecc <std+0x44>)
 800feba:	6323      	str	r3, [r4, #48]	; 0x30
 800febc:	bd10      	pop	{r4, pc}
 800febe:	46c0      	nop			; (mov r8, r8)
 800fec0:	08010fc9 	.word	0x08010fc9
 800fec4:	08010ff1 	.word	0x08010ff1
 800fec8:	08011029 	.word	0x08011029
 800fecc:	08011055 	.word	0x08011055

0800fed0 <_cleanup_r>:
 800fed0:	b510      	push	{r4, lr}
 800fed2:	4902      	ldr	r1, [pc, #8]	; (800fedc <_cleanup_r+0xc>)
 800fed4:	f000 f8ba 	bl	801004c <_fwalk_reent>
 800fed8:	bd10      	pop	{r4, pc}
 800feda:	46c0      	nop			; (mov r8, r8)
 800fedc:	0801139d 	.word	0x0801139d

0800fee0 <__sfmoreglue>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	2568      	movs	r5, #104	; 0x68
 800fee4:	1e4a      	subs	r2, r1, #1
 800fee6:	4355      	muls	r5, r2
 800fee8:	000e      	movs	r6, r1
 800feea:	0029      	movs	r1, r5
 800feec:	3174      	adds	r1, #116	; 0x74
 800feee:	f000 fd1f 	bl	8010930 <_malloc_r>
 800fef2:	1e04      	subs	r4, r0, #0
 800fef4:	d008      	beq.n	800ff08 <__sfmoreglue+0x28>
 800fef6:	2100      	movs	r1, #0
 800fef8:	002a      	movs	r2, r5
 800fefa:	6001      	str	r1, [r0, #0]
 800fefc:	6046      	str	r6, [r0, #4]
 800fefe:	300c      	adds	r0, #12
 800ff00:	60a0      	str	r0, [r4, #8]
 800ff02:	3268      	adds	r2, #104	; 0x68
 800ff04:	f7fe fc5d 	bl	800e7c2 <memset>
 800ff08:	0020      	movs	r0, r4
 800ff0a:	bd70      	pop	{r4, r5, r6, pc}

0800ff0c <__sfp_lock_acquire>:
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	4802      	ldr	r0, [pc, #8]	; (800ff18 <__sfp_lock_acquire+0xc>)
 800ff10:	f000 f8c1 	bl	8010096 <__retarget_lock_acquire_recursive>
 800ff14:	bd10      	pop	{r4, pc}
 800ff16:	46c0      	nop			; (mov r8, r8)
 800ff18:	20002763 	.word	0x20002763

0800ff1c <__sfp_lock_release>:
 800ff1c:	b510      	push	{r4, lr}
 800ff1e:	4802      	ldr	r0, [pc, #8]	; (800ff28 <__sfp_lock_release+0xc>)
 800ff20:	f000 f8ba 	bl	8010098 <__retarget_lock_release_recursive>
 800ff24:	bd10      	pop	{r4, pc}
 800ff26:	46c0      	nop			; (mov r8, r8)
 800ff28:	20002763 	.word	0x20002763

0800ff2c <__sinit_lock_acquire>:
 800ff2c:	b510      	push	{r4, lr}
 800ff2e:	4802      	ldr	r0, [pc, #8]	; (800ff38 <__sinit_lock_acquire+0xc>)
 800ff30:	f000 f8b1 	bl	8010096 <__retarget_lock_acquire_recursive>
 800ff34:	bd10      	pop	{r4, pc}
 800ff36:	46c0      	nop			; (mov r8, r8)
 800ff38:	20002764 	.word	0x20002764

0800ff3c <__sinit_lock_release>:
 800ff3c:	b510      	push	{r4, lr}
 800ff3e:	4802      	ldr	r0, [pc, #8]	; (800ff48 <__sinit_lock_release+0xc>)
 800ff40:	f000 f8aa 	bl	8010098 <__retarget_lock_release_recursive>
 800ff44:	bd10      	pop	{r4, pc}
 800ff46:	46c0      	nop			; (mov r8, r8)
 800ff48:	20002764 	.word	0x20002764

0800ff4c <__sinit>:
 800ff4c:	b513      	push	{r0, r1, r4, lr}
 800ff4e:	0004      	movs	r4, r0
 800ff50:	f7ff ffec 	bl	800ff2c <__sinit_lock_acquire>
 800ff54:	69a3      	ldr	r3, [r4, #24]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d002      	beq.n	800ff60 <__sinit+0x14>
 800ff5a:	f7ff ffef 	bl	800ff3c <__sinit_lock_release>
 800ff5e:	bd13      	pop	{r0, r1, r4, pc}
 800ff60:	64a3      	str	r3, [r4, #72]	; 0x48
 800ff62:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ff64:	6523      	str	r3, [r4, #80]	; 0x50
 800ff66:	4b13      	ldr	r3, [pc, #76]	; (800ffb4 <__sinit+0x68>)
 800ff68:	4a13      	ldr	r2, [pc, #76]	; (800ffb8 <__sinit+0x6c>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff6e:	9301      	str	r3, [sp, #4]
 800ff70:	42a3      	cmp	r3, r4
 800ff72:	d101      	bne.n	800ff78 <__sinit+0x2c>
 800ff74:	2301      	movs	r3, #1
 800ff76:	61a3      	str	r3, [r4, #24]
 800ff78:	0020      	movs	r0, r4
 800ff7a:	f000 f81f 	bl	800ffbc <__sfp>
 800ff7e:	6060      	str	r0, [r4, #4]
 800ff80:	0020      	movs	r0, r4
 800ff82:	f000 f81b 	bl	800ffbc <__sfp>
 800ff86:	60a0      	str	r0, [r4, #8]
 800ff88:	0020      	movs	r0, r4
 800ff8a:	f000 f817 	bl	800ffbc <__sfp>
 800ff8e:	2200      	movs	r2, #0
 800ff90:	2104      	movs	r1, #4
 800ff92:	60e0      	str	r0, [r4, #12]
 800ff94:	6860      	ldr	r0, [r4, #4]
 800ff96:	f7ff ff77 	bl	800fe88 <std>
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	2109      	movs	r1, #9
 800ff9e:	68a0      	ldr	r0, [r4, #8]
 800ffa0:	f7ff ff72 	bl	800fe88 <std>
 800ffa4:	2202      	movs	r2, #2
 800ffa6:	2112      	movs	r1, #18
 800ffa8:	68e0      	ldr	r0, [r4, #12]
 800ffaa:	f7ff ff6d 	bl	800fe88 <std>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	61a3      	str	r3, [r4, #24]
 800ffb2:	e7d2      	b.n	800ff5a <__sinit+0xe>
 800ffb4:	08012c9c 	.word	0x08012c9c
 800ffb8:	0800fed1 	.word	0x0800fed1

0800ffbc <__sfp>:
 800ffbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffbe:	0007      	movs	r7, r0
 800ffc0:	f7ff ffa4 	bl	800ff0c <__sfp_lock_acquire>
 800ffc4:	4b1f      	ldr	r3, [pc, #124]	; (8010044 <__sfp+0x88>)
 800ffc6:	681e      	ldr	r6, [r3, #0]
 800ffc8:	69b3      	ldr	r3, [r6, #24]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d102      	bne.n	800ffd4 <__sfp+0x18>
 800ffce:	0030      	movs	r0, r6
 800ffd0:	f7ff ffbc 	bl	800ff4c <__sinit>
 800ffd4:	3648      	adds	r6, #72	; 0x48
 800ffd6:	68b4      	ldr	r4, [r6, #8]
 800ffd8:	6873      	ldr	r3, [r6, #4]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	d504      	bpl.n	800ffe8 <__sfp+0x2c>
 800ffde:	6833      	ldr	r3, [r6, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d022      	beq.n	801002a <__sfp+0x6e>
 800ffe4:	6836      	ldr	r6, [r6, #0]
 800ffe6:	e7f6      	b.n	800ffd6 <__sfp+0x1a>
 800ffe8:	220c      	movs	r2, #12
 800ffea:	5ea5      	ldrsh	r5, [r4, r2]
 800ffec:	2d00      	cmp	r5, #0
 800ffee:	d11a      	bne.n	8010026 <__sfp+0x6a>
 800fff0:	0020      	movs	r0, r4
 800fff2:	4b15      	ldr	r3, [pc, #84]	; (8010048 <__sfp+0x8c>)
 800fff4:	3058      	adds	r0, #88	; 0x58
 800fff6:	60e3      	str	r3, [r4, #12]
 800fff8:	6665      	str	r5, [r4, #100]	; 0x64
 800fffa:	f000 f84b 	bl	8010094 <__retarget_lock_init_recursive>
 800fffe:	f7ff ff8d 	bl	800ff1c <__sfp_lock_release>
 8010002:	0020      	movs	r0, r4
 8010004:	2208      	movs	r2, #8
 8010006:	0029      	movs	r1, r5
 8010008:	6025      	str	r5, [r4, #0]
 801000a:	60a5      	str	r5, [r4, #8]
 801000c:	6065      	str	r5, [r4, #4]
 801000e:	6125      	str	r5, [r4, #16]
 8010010:	6165      	str	r5, [r4, #20]
 8010012:	61a5      	str	r5, [r4, #24]
 8010014:	305c      	adds	r0, #92	; 0x5c
 8010016:	f7fe fbd4 	bl	800e7c2 <memset>
 801001a:	6365      	str	r5, [r4, #52]	; 0x34
 801001c:	63a5      	str	r5, [r4, #56]	; 0x38
 801001e:	64a5      	str	r5, [r4, #72]	; 0x48
 8010020:	64e5      	str	r5, [r4, #76]	; 0x4c
 8010022:	0020      	movs	r0, r4
 8010024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010026:	3468      	adds	r4, #104	; 0x68
 8010028:	e7d7      	b.n	800ffda <__sfp+0x1e>
 801002a:	2104      	movs	r1, #4
 801002c:	0038      	movs	r0, r7
 801002e:	f7ff ff57 	bl	800fee0 <__sfmoreglue>
 8010032:	1e04      	subs	r4, r0, #0
 8010034:	6030      	str	r0, [r6, #0]
 8010036:	d1d5      	bne.n	800ffe4 <__sfp+0x28>
 8010038:	f7ff ff70 	bl	800ff1c <__sfp_lock_release>
 801003c:	230c      	movs	r3, #12
 801003e:	603b      	str	r3, [r7, #0]
 8010040:	e7ef      	b.n	8010022 <__sfp+0x66>
 8010042:	46c0      	nop			; (mov r8, r8)
 8010044:	08012c9c 	.word	0x08012c9c
 8010048:	ffff0001 	.word	0xffff0001

0801004c <_fwalk_reent>:
 801004c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801004e:	0004      	movs	r4, r0
 8010050:	0006      	movs	r6, r0
 8010052:	2700      	movs	r7, #0
 8010054:	9101      	str	r1, [sp, #4]
 8010056:	3448      	adds	r4, #72	; 0x48
 8010058:	6863      	ldr	r3, [r4, #4]
 801005a:	68a5      	ldr	r5, [r4, #8]
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	9b00      	ldr	r3, [sp, #0]
 8010060:	3b01      	subs	r3, #1
 8010062:	9300      	str	r3, [sp, #0]
 8010064:	d504      	bpl.n	8010070 <_fwalk_reent+0x24>
 8010066:	6824      	ldr	r4, [r4, #0]
 8010068:	2c00      	cmp	r4, #0
 801006a:	d1f5      	bne.n	8010058 <_fwalk_reent+0xc>
 801006c:	0038      	movs	r0, r7
 801006e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010070:	89ab      	ldrh	r3, [r5, #12]
 8010072:	2b01      	cmp	r3, #1
 8010074:	d908      	bls.n	8010088 <_fwalk_reent+0x3c>
 8010076:	220e      	movs	r2, #14
 8010078:	5eab      	ldrsh	r3, [r5, r2]
 801007a:	3301      	adds	r3, #1
 801007c:	d004      	beq.n	8010088 <_fwalk_reent+0x3c>
 801007e:	0029      	movs	r1, r5
 8010080:	0030      	movs	r0, r6
 8010082:	9b01      	ldr	r3, [sp, #4]
 8010084:	4798      	blx	r3
 8010086:	4307      	orrs	r7, r0
 8010088:	3568      	adds	r5, #104	; 0x68
 801008a:	e7e8      	b.n	801005e <_fwalk_reent+0x12>

0801008c <_localeconv_r>:
 801008c:	4800      	ldr	r0, [pc, #0]	; (8010090 <_localeconv_r+0x4>)
 801008e:	4770      	bx	lr
 8010090:	20000178 	.word	0x20000178

08010094 <__retarget_lock_init_recursive>:
 8010094:	4770      	bx	lr

08010096 <__retarget_lock_acquire_recursive>:
 8010096:	4770      	bx	lr

08010098 <__retarget_lock_release_recursive>:
 8010098:	4770      	bx	lr
	...

0801009c <malloc>:
 801009c:	b510      	push	{r4, lr}
 801009e:	4b03      	ldr	r3, [pc, #12]	; (80100ac <malloc+0x10>)
 80100a0:	0001      	movs	r1, r0
 80100a2:	6818      	ldr	r0, [r3, #0]
 80100a4:	f000 fc44 	bl	8010930 <_malloc_r>
 80100a8:	bd10      	pop	{r4, pc}
 80100aa:	46c0      	nop			; (mov r8, r8)
 80100ac:	20000024 	.word	0x20000024

080100b0 <memchr>:
 80100b0:	b2c9      	uxtb	r1, r1
 80100b2:	1882      	adds	r2, r0, r2
 80100b4:	4290      	cmp	r0, r2
 80100b6:	d101      	bne.n	80100bc <memchr+0xc>
 80100b8:	2000      	movs	r0, #0
 80100ba:	4770      	bx	lr
 80100bc:	7803      	ldrb	r3, [r0, #0]
 80100be:	428b      	cmp	r3, r1
 80100c0:	d0fb      	beq.n	80100ba <memchr+0xa>
 80100c2:	3001      	adds	r0, #1
 80100c4:	e7f6      	b.n	80100b4 <memchr+0x4>
	...

080100c8 <_Balloc>:
 80100c8:	b570      	push	{r4, r5, r6, lr}
 80100ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80100cc:	0006      	movs	r6, r0
 80100ce:	000c      	movs	r4, r1
 80100d0:	2d00      	cmp	r5, #0
 80100d2:	d10e      	bne.n	80100f2 <_Balloc+0x2a>
 80100d4:	2010      	movs	r0, #16
 80100d6:	f7ff ffe1 	bl	801009c <malloc>
 80100da:	1e02      	subs	r2, r0, #0
 80100dc:	6270      	str	r0, [r6, #36]	; 0x24
 80100de:	d104      	bne.n	80100ea <_Balloc+0x22>
 80100e0:	2166      	movs	r1, #102	; 0x66
 80100e2:	4b19      	ldr	r3, [pc, #100]	; (8010148 <_Balloc+0x80>)
 80100e4:	4819      	ldr	r0, [pc, #100]	; (801014c <_Balloc+0x84>)
 80100e6:	f001 f89d 	bl	8011224 <__assert_func>
 80100ea:	6045      	str	r5, [r0, #4]
 80100ec:	6085      	str	r5, [r0, #8]
 80100ee:	6005      	str	r5, [r0, #0]
 80100f0:	60c5      	str	r5, [r0, #12]
 80100f2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80100f4:	68eb      	ldr	r3, [r5, #12]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d013      	beq.n	8010122 <_Balloc+0x5a>
 80100fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80100fc:	00a2      	lsls	r2, r4, #2
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	189b      	adds	r3, r3, r2
 8010102:	6818      	ldr	r0, [r3, #0]
 8010104:	2800      	cmp	r0, #0
 8010106:	d118      	bne.n	801013a <_Balloc+0x72>
 8010108:	2101      	movs	r1, #1
 801010a:	000d      	movs	r5, r1
 801010c:	40a5      	lsls	r5, r4
 801010e:	1d6a      	adds	r2, r5, #5
 8010110:	0030      	movs	r0, r6
 8010112:	0092      	lsls	r2, r2, #2
 8010114:	f000 fb74 	bl	8010800 <_calloc_r>
 8010118:	2800      	cmp	r0, #0
 801011a:	d00c      	beq.n	8010136 <_Balloc+0x6e>
 801011c:	6044      	str	r4, [r0, #4]
 801011e:	6085      	str	r5, [r0, #8]
 8010120:	e00d      	b.n	801013e <_Balloc+0x76>
 8010122:	2221      	movs	r2, #33	; 0x21
 8010124:	2104      	movs	r1, #4
 8010126:	0030      	movs	r0, r6
 8010128:	f000 fb6a 	bl	8010800 <_calloc_r>
 801012c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801012e:	60e8      	str	r0, [r5, #12]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1e1      	bne.n	80100fa <_Balloc+0x32>
 8010136:	2000      	movs	r0, #0
 8010138:	bd70      	pop	{r4, r5, r6, pc}
 801013a:	6802      	ldr	r2, [r0, #0]
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	2300      	movs	r3, #0
 8010140:	6103      	str	r3, [r0, #16]
 8010142:	60c3      	str	r3, [r0, #12]
 8010144:	e7f8      	b.n	8010138 <_Balloc+0x70>
 8010146:	46c0      	nop			; (mov r8, r8)
 8010148:	08012ce1 	.word	0x08012ce1
 801014c:	08012dc4 	.word	0x08012dc4

08010150 <_Bfree>:
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010154:	0005      	movs	r5, r0
 8010156:	000c      	movs	r4, r1
 8010158:	2e00      	cmp	r6, #0
 801015a:	d10e      	bne.n	801017a <_Bfree+0x2a>
 801015c:	2010      	movs	r0, #16
 801015e:	f7ff ff9d 	bl	801009c <malloc>
 8010162:	1e02      	subs	r2, r0, #0
 8010164:	6268      	str	r0, [r5, #36]	; 0x24
 8010166:	d104      	bne.n	8010172 <_Bfree+0x22>
 8010168:	218a      	movs	r1, #138	; 0x8a
 801016a:	4b09      	ldr	r3, [pc, #36]	; (8010190 <_Bfree+0x40>)
 801016c:	4809      	ldr	r0, [pc, #36]	; (8010194 <_Bfree+0x44>)
 801016e:	f001 f859 	bl	8011224 <__assert_func>
 8010172:	6046      	str	r6, [r0, #4]
 8010174:	6086      	str	r6, [r0, #8]
 8010176:	6006      	str	r6, [r0, #0]
 8010178:	60c6      	str	r6, [r0, #12]
 801017a:	2c00      	cmp	r4, #0
 801017c:	d007      	beq.n	801018e <_Bfree+0x3e>
 801017e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010180:	6862      	ldr	r2, [r4, #4]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	0092      	lsls	r2, r2, #2
 8010186:	189b      	adds	r3, r3, r2
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	6022      	str	r2, [r4, #0]
 801018c:	601c      	str	r4, [r3, #0]
 801018e:	bd70      	pop	{r4, r5, r6, pc}
 8010190:	08012ce1 	.word	0x08012ce1
 8010194:	08012dc4 	.word	0x08012dc4

08010198 <__multadd>:
 8010198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801019a:	000e      	movs	r6, r1
 801019c:	9001      	str	r0, [sp, #4]
 801019e:	000c      	movs	r4, r1
 80101a0:	001d      	movs	r5, r3
 80101a2:	2000      	movs	r0, #0
 80101a4:	690f      	ldr	r7, [r1, #16]
 80101a6:	3614      	adds	r6, #20
 80101a8:	6833      	ldr	r3, [r6, #0]
 80101aa:	3001      	adds	r0, #1
 80101ac:	b299      	uxth	r1, r3
 80101ae:	4351      	muls	r1, r2
 80101b0:	0c1b      	lsrs	r3, r3, #16
 80101b2:	4353      	muls	r3, r2
 80101b4:	1949      	adds	r1, r1, r5
 80101b6:	0c0d      	lsrs	r5, r1, #16
 80101b8:	195b      	adds	r3, r3, r5
 80101ba:	0c1d      	lsrs	r5, r3, #16
 80101bc:	b289      	uxth	r1, r1
 80101be:	041b      	lsls	r3, r3, #16
 80101c0:	185b      	adds	r3, r3, r1
 80101c2:	c608      	stmia	r6!, {r3}
 80101c4:	4287      	cmp	r7, r0
 80101c6:	dcef      	bgt.n	80101a8 <__multadd+0x10>
 80101c8:	2d00      	cmp	r5, #0
 80101ca:	d022      	beq.n	8010212 <__multadd+0x7a>
 80101cc:	68a3      	ldr	r3, [r4, #8]
 80101ce:	42bb      	cmp	r3, r7
 80101d0:	dc19      	bgt.n	8010206 <__multadd+0x6e>
 80101d2:	6863      	ldr	r3, [r4, #4]
 80101d4:	9801      	ldr	r0, [sp, #4]
 80101d6:	1c59      	adds	r1, r3, #1
 80101d8:	f7ff ff76 	bl	80100c8 <_Balloc>
 80101dc:	1e06      	subs	r6, r0, #0
 80101de:	d105      	bne.n	80101ec <__multadd+0x54>
 80101e0:	0002      	movs	r2, r0
 80101e2:	21b5      	movs	r1, #181	; 0xb5
 80101e4:	4b0c      	ldr	r3, [pc, #48]	; (8010218 <__multadd+0x80>)
 80101e6:	480d      	ldr	r0, [pc, #52]	; (801021c <__multadd+0x84>)
 80101e8:	f001 f81c 	bl	8011224 <__assert_func>
 80101ec:	0021      	movs	r1, r4
 80101ee:	6923      	ldr	r3, [r4, #16]
 80101f0:	310c      	adds	r1, #12
 80101f2:	1c9a      	adds	r2, r3, #2
 80101f4:	0092      	lsls	r2, r2, #2
 80101f6:	300c      	adds	r0, #12
 80101f8:	f7fe fada 	bl	800e7b0 <memcpy>
 80101fc:	0021      	movs	r1, r4
 80101fe:	9801      	ldr	r0, [sp, #4]
 8010200:	f7ff ffa6 	bl	8010150 <_Bfree>
 8010204:	0034      	movs	r4, r6
 8010206:	1d3b      	adds	r3, r7, #4
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	18e3      	adds	r3, r4, r3
 801020c:	605d      	str	r5, [r3, #4]
 801020e:	1c7b      	adds	r3, r7, #1
 8010210:	6123      	str	r3, [r4, #16]
 8010212:	0020      	movs	r0, r4
 8010214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010216:	46c0      	nop			; (mov r8, r8)
 8010218:	08012d53 	.word	0x08012d53
 801021c:	08012dc4 	.word	0x08012dc4

08010220 <__hi0bits>:
 8010220:	0003      	movs	r3, r0
 8010222:	0c02      	lsrs	r2, r0, #16
 8010224:	2000      	movs	r0, #0
 8010226:	4282      	cmp	r2, r0
 8010228:	d101      	bne.n	801022e <__hi0bits+0xe>
 801022a:	041b      	lsls	r3, r3, #16
 801022c:	3010      	adds	r0, #16
 801022e:	0e1a      	lsrs	r2, r3, #24
 8010230:	d101      	bne.n	8010236 <__hi0bits+0x16>
 8010232:	3008      	adds	r0, #8
 8010234:	021b      	lsls	r3, r3, #8
 8010236:	0f1a      	lsrs	r2, r3, #28
 8010238:	d101      	bne.n	801023e <__hi0bits+0x1e>
 801023a:	3004      	adds	r0, #4
 801023c:	011b      	lsls	r3, r3, #4
 801023e:	0f9a      	lsrs	r2, r3, #30
 8010240:	d101      	bne.n	8010246 <__hi0bits+0x26>
 8010242:	3002      	adds	r0, #2
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	2b00      	cmp	r3, #0
 8010248:	db03      	blt.n	8010252 <__hi0bits+0x32>
 801024a:	3001      	adds	r0, #1
 801024c:	005b      	lsls	r3, r3, #1
 801024e:	d400      	bmi.n	8010252 <__hi0bits+0x32>
 8010250:	2020      	movs	r0, #32
 8010252:	4770      	bx	lr

08010254 <__lo0bits>:
 8010254:	6803      	ldr	r3, [r0, #0]
 8010256:	0002      	movs	r2, r0
 8010258:	2107      	movs	r1, #7
 801025a:	0018      	movs	r0, r3
 801025c:	4008      	ands	r0, r1
 801025e:	420b      	tst	r3, r1
 8010260:	d00d      	beq.n	801027e <__lo0bits+0x2a>
 8010262:	3906      	subs	r1, #6
 8010264:	2000      	movs	r0, #0
 8010266:	420b      	tst	r3, r1
 8010268:	d105      	bne.n	8010276 <__lo0bits+0x22>
 801026a:	3002      	adds	r0, #2
 801026c:	4203      	tst	r3, r0
 801026e:	d003      	beq.n	8010278 <__lo0bits+0x24>
 8010270:	40cb      	lsrs	r3, r1
 8010272:	0008      	movs	r0, r1
 8010274:	6013      	str	r3, [r2, #0]
 8010276:	4770      	bx	lr
 8010278:	089b      	lsrs	r3, r3, #2
 801027a:	6013      	str	r3, [r2, #0]
 801027c:	e7fb      	b.n	8010276 <__lo0bits+0x22>
 801027e:	b299      	uxth	r1, r3
 8010280:	2900      	cmp	r1, #0
 8010282:	d101      	bne.n	8010288 <__lo0bits+0x34>
 8010284:	2010      	movs	r0, #16
 8010286:	0c1b      	lsrs	r3, r3, #16
 8010288:	b2d9      	uxtb	r1, r3
 801028a:	2900      	cmp	r1, #0
 801028c:	d101      	bne.n	8010292 <__lo0bits+0x3e>
 801028e:	3008      	adds	r0, #8
 8010290:	0a1b      	lsrs	r3, r3, #8
 8010292:	0719      	lsls	r1, r3, #28
 8010294:	d101      	bne.n	801029a <__lo0bits+0x46>
 8010296:	3004      	adds	r0, #4
 8010298:	091b      	lsrs	r3, r3, #4
 801029a:	0799      	lsls	r1, r3, #30
 801029c:	d101      	bne.n	80102a2 <__lo0bits+0x4e>
 801029e:	3002      	adds	r0, #2
 80102a0:	089b      	lsrs	r3, r3, #2
 80102a2:	07d9      	lsls	r1, r3, #31
 80102a4:	d4e9      	bmi.n	801027a <__lo0bits+0x26>
 80102a6:	3001      	adds	r0, #1
 80102a8:	085b      	lsrs	r3, r3, #1
 80102aa:	d1e6      	bne.n	801027a <__lo0bits+0x26>
 80102ac:	2020      	movs	r0, #32
 80102ae:	e7e2      	b.n	8010276 <__lo0bits+0x22>

080102b0 <__i2b>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	000c      	movs	r4, r1
 80102b4:	2101      	movs	r1, #1
 80102b6:	f7ff ff07 	bl	80100c8 <_Balloc>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d106      	bne.n	80102cc <__i2b+0x1c>
 80102be:	21a0      	movs	r1, #160	; 0xa0
 80102c0:	0002      	movs	r2, r0
 80102c2:	4b04      	ldr	r3, [pc, #16]	; (80102d4 <__i2b+0x24>)
 80102c4:	4804      	ldr	r0, [pc, #16]	; (80102d8 <__i2b+0x28>)
 80102c6:	0049      	lsls	r1, r1, #1
 80102c8:	f000 ffac 	bl	8011224 <__assert_func>
 80102cc:	2301      	movs	r3, #1
 80102ce:	6144      	str	r4, [r0, #20]
 80102d0:	6103      	str	r3, [r0, #16]
 80102d2:	bd10      	pop	{r4, pc}
 80102d4:	08012d53 	.word	0x08012d53
 80102d8:	08012dc4 	.word	0x08012dc4

080102dc <__multiply>:
 80102dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102de:	690b      	ldr	r3, [r1, #16]
 80102e0:	0014      	movs	r4, r2
 80102e2:	6912      	ldr	r2, [r2, #16]
 80102e4:	000d      	movs	r5, r1
 80102e6:	b089      	sub	sp, #36	; 0x24
 80102e8:	4293      	cmp	r3, r2
 80102ea:	da01      	bge.n	80102f0 <__multiply+0x14>
 80102ec:	0025      	movs	r5, r4
 80102ee:	000c      	movs	r4, r1
 80102f0:	692f      	ldr	r7, [r5, #16]
 80102f2:	6926      	ldr	r6, [r4, #16]
 80102f4:	6869      	ldr	r1, [r5, #4]
 80102f6:	19bb      	adds	r3, r7, r6
 80102f8:	9302      	str	r3, [sp, #8]
 80102fa:	68ab      	ldr	r3, [r5, #8]
 80102fc:	19ba      	adds	r2, r7, r6
 80102fe:	4293      	cmp	r3, r2
 8010300:	da00      	bge.n	8010304 <__multiply+0x28>
 8010302:	3101      	adds	r1, #1
 8010304:	f7ff fee0 	bl	80100c8 <_Balloc>
 8010308:	9001      	str	r0, [sp, #4]
 801030a:	2800      	cmp	r0, #0
 801030c:	d106      	bne.n	801031c <__multiply+0x40>
 801030e:	215e      	movs	r1, #94	; 0x5e
 8010310:	0002      	movs	r2, r0
 8010312:	4b48      	ldr	r3, [pc, #288]	; (8010434 <__multiply+0x158>)
 8010314:	4848      	ldr	r0, [pc, #288]	; (8010438 <__multiply+0x15c>)
 8010316:	31ff      	adds	r1, #255	; 0xff
 8010318:	f000 ff84 	bl	8011224 <__assert_func>
 801031c:	9b01      	ldr	r3, [sp, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	3314      	adds	r3, #20
 8010322:	469c      	mov	ip, r3
 8010324:	19bb      	adds	r3, r7, r6
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	4463      	add	r3, ip
 801032a:	9303      	str	r3, [sp, #12]
 801032c:	4663      	mov	r3, ip
 801032e:	9903      	ldr	r1, [sp, #12]
 8010330:	428b      	cmp	r3, r1
 8010332:	d32c      	bcc.n	801038e <__multiply+0xb2>
 8010334:	002b      	movs	r3, r5
 8010336:	0022      	movs	r2, r4
 8010338:	3314      	adds	r3, #20
 801033a:	00bf      	lsls	r7, r7, #2
 801033c:	3214      	adds	r2, #20
 801033e:	9306      	str	r3, [sp, #24]
 8010340:	00b6      	lsls	r6, r6, #2
 8010342:	19db      	adds	r3, r3, r7
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	1993      	adds	r3, r2, r6
 8010348:	9307      	str	r3, [sp, #28]
 801034a:	2304      	movs	r3, #4
 801034c:	9305      	str	r3, [sp, #20]
 801034e:	002b      	movs	r3, r5
 8010350:	9904      	ldr	r1, [sp, #16]
 8010352:	3315      	adds	r3, #21
 8010354:	9200      	str	r2, [sp, #0]
 8010356:	4299      	cmp	r1, r3
 8010358:	d305      	bcc.n	8010366 <__multiply+0x8a>
 801035a:	1b4b      	subs	r3, r1, r5
 801035c:	3b15      	subs	r3, #21
 801035e:	089b      	lsrs	r3, r3, #2
 8010360:	3301      	adds	r3, #1
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	9305      	str	r3, [sp, #20]
 8010366:	9b07      	ldr	r3, [sp, #28]
 8010368:	9a00      	ldr	r2, [sp, #0]
 801036a:	429a      	cmp	r2, r3
 801036c:	d311      	bcc.n	8010392 <__multiply+0xb6>
 801036e:	9b02      	ldr	r3, [sp, #8]
 8010370:	2b00      	cmp	r3, #0
 8010372:	dd06      	ble.n	8010382 <__multiply+0xa6>
 8010374:	9b03      	ldr	r3, [sp, #12]
 8010376:	3b04      	subs	r3, #4
 8010378:	9303      	str	r3, [sp, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d053      	beq.n	801042a <__multiply+0x14e>
 8010382:	9b01      	ldr	r3, [sp, #4]
 8010384:	9a02      	ldr	r2, [sp, #8]
 8010386:	0018      	movs	r0, r3
 8010388:	611a      	str	r2, [r3, #16]
 801038a:	b009      	add	sp, #36	; 0x24
 801038c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801038e:	c304      	stmia	r3!, {r2}
 8010390:	e7cd      	b.n	801032e <__multiply+0x52>
 8010392:	9b00      	ldr	r3, [sp, #0]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	b298      	uxth	r0, r3
 8010398:	2800      	cmp	r0, #0
 801039a:	d01b      	beq.n	80103d4 <__multiply+0xf8>
 801039c:	4667      	mov	r7, ip
 801039e:	2400      	movs	r4, #0
 80103a0:	9e06      	ldr	r6, [sp, #24]
 80103a2:	ce02      	ldmia	r6!, {r1}
 80103a4:	683a      	ldr	r2, [r7, #0]
 80103a6:	b28b      	uxth	r3, r1
 80103a8:	4343      	muls	r3, r0
 80103aa:	b292      	uxth	r2, r2
 80103ac:	189b      	adds	r3, r3, r2
 80103ae:	191b      	adds	r3, r3, r4
 80103b0:	0c0c      	lsrs	r4, r1, #16
 80103b2:	4344      	muls	r4, r0
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	0c11      	lsrs	r1, r2, #16
 80103b8:	1861      	adds	r1, r4, r1
 80103ba:	0c1c      	lsrs	r4, r3, #16
 80103bc:	1909      	adds	r1, r1, r4
 80103be:	0c0c      	lsrs	r4, r1, #16
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	0409      	lsls	r1, r1, #16
 80103c4:	430b      	orrs	r3, r1
 80103c6:	c708      	stmia	r7!, {r3}
 80103c8:	9b04      	ldr	r3, [sp, #16]
 80103ca:	42b3      	cmp	r3, r6
 80103cc:	d8e9      	bhi.n	80103a2 <__multiply+0xc6>
 80103ce:	4663      	mov	r3, ip
 80103d0:	9a05      	ldr	r2, [sp, #20]
 80103d2:	509c      	str	r4, [r3, r2]
 80103d4:	9b00      	ldr	r3, [sp, #0]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	0c1e      	lsrs	r6, r3, #16
 80103da:	d020      	beq.n	801041e <__multiply+0x142>
 80103dc:	4663      	mov	r3, ip
 80103de:	002c      	movs	r4, r5
 80103e0:	4660      	mov	r0, ip
 80103e2:	2700      	movs	r7, #0
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3414      	adds	r4, #20
 80103e8:	6822      	ldr	r2, [r4, #0]
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	b291      	uxth	r1, r2
 80103ee:	4371      	muls	r1, r6
 80103f0:	6802      	ldr	r2, [r0, #0]
 80103f2:	0c12      	lsrs	r2, r2, #16
 80103f4:	1889      	adds	r1, r1, r2
 80103f6:	19cf      	adds	r7, r1, r7
 80103f8:	0439      	lsls	r1, r7, #16
 80103fa:	430b      	orrs	r3, r1
 80103fc:	6003      	str	r3, [r0, #0]
 80103fe:	cc02      	ldmia	r4!, {r1}
 8010400:	6843      	ldr	r3, [r0, #4]
 8010402:	0c09      	lsrs	r1, r1, #16
 8010404:	4371      	muls	r1, r6
 8010406:	b29b      	uxth	r3, r3
 8010408:	0c3f      	lsrs	r7, r7, #16
 801040a:	18cb      	adds	r3, r1, r3
 801040c:	9a04      	ldr	r2, [sp, #16]
 801040e:	19db      	adds	r3, r3, r7
 8010410:	0c1f      	lsrs	r7, r3, #16
 8010412:	3004      	adds	r0, #4
 8010414:	42a2      	cmp	r2, r4
 8010416:	d8e7      	bhi.n	80103e8 <__multiply+0x10c>
 8010418:	4662      	mov	r2, ip
 801041a:	9905      	ldr	r1, [sp, #20]
 801041c:	5053      	str	r3, [r2, r1]
 801041e:	9b00      	ldr	r3, [sp, #0]
 8010420:	3304      	adds	r3, #4
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	2304      	movs	r3, #4
 8010426:	449c      	add	ip, r3
 8010428:	e79d      	b.n	8010366 <__multiply+0x8a>
 801042a:	9b02      	ldr	r3, [sp, #8]
 801042c:	3b01      	subs	r3, #1
 801042e:	9302      	str	r3, [sp, #8]
 8010430:	e79d      	b.n	801036e <__multiply+0x92>
 8010432:	46c0      	nop			; (mov r8, r8)
 8010434:	08012d53 	.word	0x08012d53
 8010438:	08012dc4 	.word	0x08012dc4

0801043c <__pow5mult>:
 801043c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801043e:	2303      	movs	r3, #3
 8010440:	0015      	movs	r5, r2
 8010442:	0007      	movs	r7, r0
 8010444:	000e      	movs	r6, r1
 8010446:	401a      	ands	r2, r3
 8010448:	421d      	tst	r5, r3
 801044a:	d008      	beq.n	801045e <__pow5mult+0x22>
 801044c:	4925      	ldr	r1, [pc, #148]	; (80104e4 <__pow5mult+0xa8>)
 801044e:	3a01      	subs	r2, #1
 8010450:	0092      	lsls	r2, r2, #2
 8010452:	5852      	ldr	r2, [r2, r1]
 8010454:	2300      	movs	r3, #0
 8010456:	0031      	movs	r1, r6
 8010458:	f7ff fe9e 	bl	8010198 <__multadd>
 801045c:	0006      	movs	r6, r0
 801045e:	10ad      	asrs	r5, r5, #2
 8010460:	d03d      	beq.n	80104de <__pow5mult+0xa2>
 8010462:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010464:	2c00      	cmp	r4, #0
 8010466:	d10f      	bne.n	8010488 <__pow5mult+0x4c>
 8010468:	2010      	movs	r0, #16
 801046a:	f7ff fe17 	bl	801009c <malloc>
 801046e:	1e02      	subs	r2, r0, #0
 8010470:	6278      	str	r0, [r7, #36]	; 0x24
 8010472:	d105      	bne.n	8010480 <__pow5mult+0x44>
 8010474:	21d7      	movs	r1, #215	; 0xd7
 8010476:	4b1c      	ldr	r3, [pc, #112]	; (80104e8 <__pow5mult+0xac>)
 8010478:	481c      	ldr	r0, [pc, #112]	; (80104ec <__pow5mult+0xb0>)
 801047a:	0049      	lsls	r1, r1, #1
 801047c:	f000 fed2 	bl	8011224 <__assert_func>
 8010480:	6044      	str	r4, [r0, #4]
 8010482:	6084      	str	r4, [r0, #8]
 8010484:	6004      	str	r4, [r0, #0]
 8010486:	60c4      	str	r4, [r0, #12]
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	689c      	ldr	r4, [r3, #8]
 801048c:	9301      	str	r3, [sp, #4]
 801048e:	2c00      	cmp	r4, #0
 8010490:	d108      	bne.n	80104a4 <__pow5mult+0x68>
 8010492:	0038      	movs	r0, r7
 8010494:	4916      	ldr	r1, [pc, #88]	; (80104f0 <__pow5mult+0xb4>)
 8010496:	f7ff ff0b 	bl	80102b0 <__i2b>
 801049a:	9b01      	ldr	r3, [sp, #4]
 801049c:	0004      	movs	r4, r0
 801049e:	6098      	str	r0, [r3, #8]
 80104a0:	2300      	movs	r3, #0
 80104a2:	6003      	str	r3, [r0, #0]
 80104a4:	2301      	movs	r3, #1
 80104a6:	421d      	tst	r5, r3
 80104a8:	d00a      	beq.n	80104c0 <__pow5mult+0x84>
 80104aa:	0031      	movs	r1, r6
 80104ac:	0022      	movs	r2, r4
 80104ae:	0038      	movs	r0, r7
 80104b0:	f7ff ff14 	bl	80102dc <__multiply>
 80104b4:	0031      	movs	r1, r6
 80104b6:	9001      	str	r0, [sp, #4]
 80104b8:	0038      	movs	r0, r7
 80104ba:	f7ff fe49 	bl	8010150 <_Bfree>
 80104be:	9e01      	ldr	r6, [sp, #4]
 80104c0:	106d      	asrs	r5, r5, #1
 80104c2:	d00c      	beq.n	80104de <__pow5mult+0xa2>
 80104c4:	6820      	ldr	r0, [r4, #0]
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d107      	bne.n	80104da <__pow5mult+0x9e>
 80104ca:	0022      	movs	r2, r4
 80104cc:	0021      	movs	r1, r4
 80104ce:	0038      	movs	r0, r7
 80104d0:	f7ff ff04 	bl	80102dc <__multiply>
 80104d4:	2300      	movs	r3, #0
 80104d6:	6020      	str	r0, [r4, #0]
 80104d8:	6003      	str	r3, [r0, #0]
 80104da:	0004      	movs	r4, r0
 80104dc:	e7e2      	b.n	80104a4 <__pow5mult+0x68>
 80104de:	0030      	movs	r0, r6
 80104e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80104e2:	46c0      	nop			; (mov r8, r8)
 80104e4:	08012f10 	.word	0x08012f10
 80104e8:	08012ce1 	.word	0x08012ce1
 80104ec:	08012dc4 	.word	0x08012dc4
 80104f0:	00000271 	.word	0x00000271

080104f4 <__lshift>:
 80104f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104f6:	000c      	movs	r4, r1
 80104f8:	0017      	movs	r7, r2
 80104fa:	6923      	ldr	r3, [r4, #16]
 80104fc:	1155      	asrs	r5, r2, #5
 80104fe:	b087      	sub	sp, #28
 8010500:	18eb      	adds	r3, r5, r3
 8010502:	9302      	str	r3, [sp, #8]
 8010504:	3301      	adds	r3, #1
 8010506:	9301      	str	r3, [sp, #4]
 8010508:	6849      	ldr	r1, [r1, #4]
 801050a:	68a3      	ldr	r3, [r4, #8]
 801050c:	9004      	str	r0, [sp, #16]
 801050e:	9a01      	ldr	r2, [sp, #4]
 8010510:	4293      	cmp	r3, r2
 8010512:	db10      	blt.n	8010536 <__lshift+0x42>
 8010514:	9804      	ldr	r0, [sp, #16]
 8010516:	f7ff fdd7 	bl	80100c8 <_Balloc>
 801051a:	2300      	movs	r3, #0
 801051c:	0002      	movs	r2, r0
 801051e:	0006      	movs	r6, r0
 8010520:	0019      	movs	r1, r3
 8010522:	3214      	adds	r2, #20
 8010524:	4298      	cmp	r0, r3
 8010526:	d10c      	bne.n	8010542 <__lshift+0x4e>
 8010528:	21da      	movs	r1, #218	; 0xda
 801052a:	0002      	movs	r2, r0
 801052c:	4b26      	ldr	r3, [pc, #152]	; (80105c8 <__lshift+0xd4>)
 801052e:	4827      	ldr	r0, [pc, #156]	; (80105cc <__lshift+0xd8>)
 8010530:	31ff      	adds	r1, #255	; 0xff
 8010532:	f000 fe77 	bl	8011224 <__assert_func>
 8010536:	3101      	adds	r1, #1
 8010538:	005b      	lsls	r3, r3, #1
 801053a:	e7e8      	b.n	801050e <__lshift+0x1a>
 801053c:	0098      	lsls	r0, r3, #2
 801053e:	5011      	str	r1, [r2, r0]
 8010540:	3301      	adds	r3, #1
 8010542:	42ab      	cmp	r3, r5
 8010544:	dbfa      	blt.n	801053c <__lshift+0x48>
 8010546:	43eb      	mvns	r3, r5
 8010548:	17db      	asrs	r3, r3, #31
 801054a:	401d      	ands	r5, r3
 801054c:	211f      	movs	r1, #31
 801054e:	0023      	movs	r3, r4
 8010550:	0038      	movs	r0, r7
 8010552:	00ad      	lsls	r5, r5, #2
 8010554:	1955      	adds	r5, r2, r5
 8010556:	6922      	ldr	r2, [r4, #16]
 8010558:	3314      	adds	r3, #20
 801055a:	0092      	lsls	r2, r2, #2
 801055c:	4008      	ands	r0, r1
 801055e:	4684      	mov	ip, r0
 8010560:	189a      	adds	r2, r3, r2
 8010562:	420f      	tst	r7, r1
 8010564:	d02a      	beq.n	80105bc <__lshift+0xc8>
 8010566:	3101      	adds	r1, #1
 8010568:	1a09      	subs	r1, r1, r0
 801056a:	9105      	str	r1, [sp, #20]
 801056c:	2100      	movs	r1, #0
 801056e:	9503      	str	r5, [sp, #12]
 8010570:	4667      	mov	r7, ip
 8010572:	6818      	ldr	r0, [r3, #0]
 8010574:	40b8      	lsls	r0, r7
 8010576:	4301      	orrs	r1, r0
 8010578:	9803      	ldr	r0, [sp, #12]
 801057a:	c002      	stmia	r0!, {r1}
 801057c:	cb02      	ldmia	r3!, {r1}
 801057e:	9003      	str	r0, [sp, #12]
 8010580:	9805      	ldr	r0, [sp, #20]
 8010582:	40c1      	lsrs	r1, r0
 8010584:	429a      	cmp	r2, r3
 8010586:	d8f3      	bhi.n	8010570 <__lshift+0x7c>
 8010588:	0020      	movs	r0, r4
 801058a:	3015      	adds	r0, #21
 801058c:	2304      	movs	r3, #4
 801058e:	4282      	cmp	r2, r0
 8010590:	d304      	bcc.n	801059c <__lshift+0xa8>
 8010592:	1b13      	subs	r3, r2, r4
 8010594:	3b15      	subs	r3, #21
 8010596:	089b      	lsrs	r3, r3, #2
 8010598:	3301      	adds	r3, #1
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	50e9      	str	r1, [r5, r3]
 801059e:	2900      	cmp	r1, #0
 80105a0:	d002      	beq.n	80105a8 <__lshift+0xb4>
 80105a2:	9b02      	ldr	r3, [sp, #8]
 80105a4:	3302      	adds	r3, #2
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	9b01      	ldr	r3, [sp, #4]
 80105aa:	9804      	ldr	r0, [sp, #16]
 80105ac:	3b01      	subs	r3, #1
 80105ae:	0021      	movs	r1, r4
 80105b0:	6133      	str	r3, [r6, #16]
 80105b2:	f7ff fdcd 	bl	8010150 <_Bfree>
 80105b6:	0030      	movs	r0, r6
 80105b8:	b007      	add	sp, #28
 80105ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105bc:	cb02      	ldmia	r3!, {r1}
 80105be:	c502      	stmia	r5!, {r1}
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d8fb      	bhi.n	80105bc <__lshift+0xc8>
 80105c4:	e7f0      	b.n	80105a8 <__lshift+0xb4>
 80105c6:	46c0      	nop			; (mov r8, r8)
 80105c8:	08012d53 	.word	0x08012d53
 80105cc:	08012dc4 	.word	0x08012dc4

080105d0 <__mcmp>:
 80105d0:	6902      	ldr	r2, [r0, #16]
 80105d2:	690b      	ldr	r3, [r1, #16]
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	0004      	movs	r4, r0
 80105d8:	1ad0      	subs	r0, r2, r3
 80105da:	429a      	cmp	r2, r3
 80105dc:	d10d      	bne.n	80105fa <__mcmp+0x2a>
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	3414      	adds	r4, #20
 80105e2:	3114      	adds	r1, #20
 80105e4:	18e2      	adds	r2, r4, r3
 80105e6:	18c9      	adds	r1, r1, r3
 80105e8:	3a04      	subs	r2, #4
 80105ea:	3904      	subs	r1, #4
 80105ec:	6815      	ldr	r5, [r2, #0]
 80105ee:	680b      	ldr	r3, [r1, #0]
 80105f0:	429d      	cmp	r5, r3
 80105f2:	d003      	beq.n	80105fc <__mcmp+0x2c>
 80105f4:	2001      	movs	r0, #1
 80105f6:	429d      	cmp	r5, r3
 80105f8:	d303      	bcc.n	8010602 <__mcmp+0x32>
 80105fa:	bd30      	pop	{r4, r5, pc}
 80105fc:	4294      	cmp	r4, r2
 80105fe:	d3f3      	bcc.n	80105e8 <__mcmp+0x18>
 8010600:	e7fb      	b.n	80105fa <__mcmp+0x2a>
 8010602:	4240      	negs	r0, r0
 8010604:	e7f9      	b.n	80105fa <__mcmp+0x2a>
	...

08010608 <__mdiff>:
 8010608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801060a:	000e      	movs	r6, r1
 801060c:	0007      	movs	r7, r0
 801060e:	0011      	movs	r1, r2
 8010610:	0030      	movs	r0, r6
 8010612:	b087      	sub	sp, #28
 8010614:	0014      	movs	r4, r2
 8010616:	f7ff ffdb 	bl	80105d0 <__mcmp>
 801061a:	1e05      	subs	r5, r0, #0
 801061c:	d110      	bne.n	8010640 <__mdiff+0x38>
 801061e:	0001      	movs	r1, r0
 8010620:	0038      	movs	r0, r7
 8010622:	f7ff fd51 	bl	80100c8 <_Balloc>
 8010626:	1e02      	subs	r2, r0, #0
 8010628:	d104      	bne.n	8010634 <__mdiff+0x2c>
 801062a:	4b40      	ldr	r3, [pc, #256]	; (801072c <__mdiff+0x124>)
 801062c:	4940      	ldr	r1, [pc, #256]	; (8010730 <__mdiff+0x128>)
 801062e:	4841      	ldr	r0, [pc, #260]	; (8010734 <__mdiff+0x12c>)
 8010630:	f000 fdf8 	bl	8011224 <__assert_func>
 8010634:	2301      	movs	r3, #1
 8010636:	6145      	str	r5, [r0, #20]
 8010638:	6103      	str	r3, [r0, #16]
 801063a:	0010      	movs	r0, r2
 801063c:	b007      	add	sp, #28
 801063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010640:	2301      	movs	r3, #1
 8010642:	9301      	str	r3, [sp, #4]
 8010644:	2800      	cmp	r0, #0
 8010646:	db04      	blt.n	8010652 <__mdiff+0x4a>
 8010648:	0023      	movs	r3, r4
 801064a:	0034      	movs	r4, r6
 801064c:	001e      	movs	r6, r3
 801064e:	2300      	movs	r3, #0
 8010650:	9301      	str	r3, [sp, #4]
 8010652:	0038      	movs	r0, r7
 8010654:	6861      	ldr	r1, [r4, #4]
 8010656:	f7ff fd37 	bl	80100c8 <_Balloc>
 801065a:	1e02      	subs	r2, r0, #0
 801065c:	d103      	bne.n	8010666 <__mdiff+0x5e>
 801065e:	2190      	movs	r1, #144	; 0x90
 8010660:	4b32      	ldr	r3, [pc, #200]	; (801072c <__mdiff+0x124>)
 8010662:	0089      	lsls	r1, r1, #2
 8010664:	e7e3      	b.n	801062e <__mdiff+0x26>
 8010666:	9b01      	ldr	r3, [sp, #4]
 8010668:	2700      	movs	r7, #0
 801066a:	60c3      	str	r3, [r0, #12]
 801066c:	6920      	ldr	r0, [r4, #16]
 801066e:	3414      	adds	r4, #20
 8010670:	9401      	str	r4, [sp, #4]
 8010672:	9b01      	ldr	r3, [sp, #4]
 8010674:	0084      	lsls	r4, r0, #2
 8010676:	191b      	adds	r3, r3, r4
 8010678:	0034      	movs	r4, r6
 801067a:	9302      	str	r3, [sp, #8]
 801067c:	6933      	ldr	r3, [r6, #16]
 801067e:	3414      	adds	r4, #20
 8010680:	0099      	lsls	r1, r3, #2
 8010682:	1863      	adds	r3, r4, r1
 8010684:	9303      	str	r3, [sp, #12]
 8010686:	0013      	movs	r3, r2
 8010688:	3314      	adds	r3, #20
 801068a:	469c      	mov	ip, r3
 801068c:	9305      	str	r3, [sp, #20]
 801068e:	9b01      	ldr	r3, [sp, #4]
 8010690:	9304      	str	r3, [sp, #16]
 8010692:	9b04      	ldr	r3, [sp, #16]
 8010694:	cc02      	ldmia	r4!, {r1}
 8010696:	cb20      	ldmia	r3!, {r5}
 8010698:	9304      	str	r3, [sp, #16]
 801069a:	b2ab      	uxth	r3, r5
 801069c:	19df      	adds	r7, r3, r7
 801069e:	b28b      	uxth	r3, r1
 80106a0:	1afb      	subs	r3, r7, r3
 80106a2:	0c09      	lsrs	r1, r1, #16
 80106a4:	0c2d      	lsrs	r5, r5, #16
 80106a6:	1a6d      	subs	r5, r5, r1
 80106a8:	1419      	asrs	r1, r3, #16
 80106aa:	186d      	adds	r5, r5, r1
 80106ac:	4661      	mov	r1, ip
 80106ae:	142f      	asrs	r7, r5, #16
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	042d      	lsls	r5, r5, #16
 80106b4:	432b      	orrs	r3, r5
 80106b6:	c108      	stmia	r1!, {r3}
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	468c      	mov	ip, r1
 80106bc:	42a3      	cmp	r3, r4
 80106be:	d8e8      	bhi.n	8010692 <__mdiff+0x8a>
 80106c0:	0031      	movs	r1, r6
 80106c2:	9c03      	ldr	r4, [sp, #12]
 80106c4:	3115      	adds	r1, #21
 80106c6:	2304      	movs	r3, #4
 80106c8:	428c      	cmp	r4, r1
 80106ca:	d304      	bcc.n	80106d6 <__mdiff+0xce>
 80106cc:	1ba3      	subs	r3, r4, r6
 80106ce:	3b15      	subs	r3, #21
 80106d0:	089b      	lsrs	r3, r3, #2
 80106d2:	3301      	adds	r3, #1
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	9901      	ldr	r1, [sp, #4]
 80106d8:	18cc      	adds	r4, r1, r3
 80106da:	9905      	ldr	r1, [sp, #20]
 80106dc:	0026      	movs	r6, r4
 80106de:	18cb      	adds	r3, r1, r3
 80106e0:	469c      	mov	ip, r3
 80106e2:	9902      	ldr	r1, [sp, #8]
 80106e4:	428e      	cmp	r6, r1
 80106e6:	d310      	bcc.n	801070a <__mdiff+0x102>
 80106e8:	9e02      	ldr	r6, [sp, #8]
 80106ea:	1ee1      	subs	r1, r4, #3
 80106ec:	2500      	movs	r5, #0
 80106ee:	428e      	cmp	r6, r1
 80106f0:	d304      	bcc.n	80106fc <__mdiff+0xf4>
 80106f2:	0031      	movs	r1, r6
 80106f4:	3103      	adds	r1, #3
 80106f6:	1b0c      	subs	r4, r1, r4
 80106f8:	08a4      	lsrs	r4, r4, #2
 80106fa:	00a5      	lsls	r5, r4, #2
 80106fc:	195b      	adds	r3, r3, r5
 80106fe:	3b04      	subs	r3, #4
 8010700:	6819      	ldr	r1, [r3, #0]
 8010702:	2900      	cmp	r1, #0
 8010704:	d00f      	beq.n	8010726 <__mdiff+0x11e>
 8010706:	6110      	str	r0, [r2, #16]
 8010708:	e797      	b.n	801063a <__mdiff+0x32>
 801070a:	ce02      	ldmia	r6!, {r1}
 801070c:	b28d      	uxth	r5, r1
 801070e:	19ed      	adds	r5, r5, r7
 8010710:	0c0f      	lsrs	r7, r1, #16
 8010712:	1429      	asrs	r1, r5, #16
 8010714:	1879      	adds	r1, r7, r1
 8010716:	140f      	asrs	r7, r1, #16
 8010718:	b2ad      	uxth	r5, r5
 801071a:	0409      	lsls	r1, r1, #16
 801071c:	430d      	orrs	r5, r1
 801071e:	4661      	mov	r1, ip
 8010720:	c120      	stmia	r1!, {r5}
 8010722:	468c      	mov	ip, r1
 8010724:	e7dd      	b.n	80106e2 <__mdiff+0xda>
 8010726:	3801      	subs	r0, #1
 8010728:	e7e9      	b.n	80106fe <__mdiff+0xf6>
 801072a:	46c0      	nop			; (mov r8, r8)
 801072c:	08012d53 	.word	0x08012d53
 8010730:	00000232 	.word	0x00000232
 8010734:	08012dc4 	.word	0x08012dc4

08010738 <__d2b>:
 8010738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801073a:	2101      	movs	r1, #1
 801073c:	0014      	movs	r4, r2
 801073e:	001e      	movs	r6, r3
 8010740:	9f08      	ldr	r7, [sp, #32]
 8010742:	f7ff fcc1 	bl	80100c8 <_Balloc>
 8010746:	1e05      	subs	r5, r0, #0
 8010748:	d105      	bne.n	8010756 <__d2b+0x1e>
 801074a:	0002      	movs	r2, r0
 801074c:	4b26      	ldr	r3, [pc, #152]	; (80107e8 <__d2b+0xb0>)
 801074e:	4927      	ldr	r1, [pc, #156]	; (80107ec <__d2b+0xb4>)
 8010750:	4827      	ldr	r0, [pc, #156]	; (80107f0 <__d2b+0xb8>)
 8010752:	f000 fd67 	bl	8011224 <__assert_func>
 8010756:	0333      	lsls	r3, r6, #12
 8010758:	0076      	lsls	r6, r6, #1
 801075a:	0b1b      	lsrs	r3, r3, #12
 801075c:	0d76      	lsrs	r6, r6, #21
 801075e:	d124      	bne.n	80107aa <__d2b+0x72>
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	2c00      	cmp	r4, #0
 8010764:	d027      	beq.n	80107b6 <__d2b+0x7e>
 8010766:	4668      	mov	r0, sp
 8010768:	9400      	str	r4, [sp, #0]
 801076a:	f7ff fd73 	bl	8010254 <__lo0bits>
 801076e:	9c00      	ldr	r4, [sp, #0]
 8010770:	2800      	cmp	r0, #0
 8010772:	d01e      	beq.n	80107b2 <__d2b+0x7a>
 8010774:	9b01      	ldr	r3, [sp, #4]
 8010776:	2120      	movs	r1, #32
 8010778:	001a      	movs	r2, r3
 801077a:	1a09      	subs	r1, r1, r0
 801077c:	408a      	lsls	r2, r1
 801077e:	40c3      	lsrs	r3, r0
 8010780:	4322      	orrs	r2, r4
 8010782:	616a      	str	r2, [r5, #20]
 8010784:	9301      	str	r3, [sp, #4]
 8010786:	9c01      	ldr	r4, [sp, #4]
 8010788:	61ac      	str	r4, [r5, #24]
 801078a:	1e63      	subs	r3, r4, #1
 801078c:	419c      	sbcs	r4, r3
 801078e:	3401      	adds	r4, #1
 8010790:	612c      	str	r4, [r5, #16]
 8010792:	2e00      	cmp	r6, #0
 8010794:	d018      	beq.n	80107c8 <__d2b+0x90>
 8010796:	4b17      	ldr	r3, [pc, #92]	; (80107f4 <__d2b+0xbc>)
 8010798:	18f6      	adds	r6, r6, r3
 801079a:	2335      	movs	r3, #53	; 0x35
 801079c:	1836      	adds	r6, r6, r0
 801079e:	1a18      	subs	r0, r3, r0
 80107a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a2:	603e      	str	r6, [r7, #0]
 80107a4:	6018      	str	r0, [r3, #0]
 80107a6:	0028      	movs	r0, r5
 80107a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107aa:	2280      	movs	r2, #128	; 0x80
 80107ac:	0352      	lsls	r2, r2, #13
 80107ae:	4313      	orrs	r3, r2
 80107b0:	e7d6      	b.n	8010760 <__d2b+0x28>
 80107b2:	616c      	str	r4, [r5, #20]
 80107b4:	e7e7      	b.n	8010786 <__d2b+0x4e>
 80107b6:	a801      	add	r0, sp, #4
 80107b8:	f7ff fd4c 	bl	8010254 <__lo0bits>
 80107bc:	2401      	movs	r4, #1
 80107be:	9b01      	ldr	r3, [sp, #4]
 80107c0:	612c      	str	r4, [r5, #16]
 80107c2:	616b      	str	r3, [r5, #20]
 80107c4:	3020      	adds	r0, #32
 80107c6:	e7e4      	b.n	8010792 <__d2b+0x5a>
 80107c8:	4b0b      	ldr	r3, [pc, #44]	; (80107f8 <__d2b+0xc0>)
 80107ca:	18c0      	adds	r0, r0, r3
 80107cc:	4b0b      	ldr	r3, [pc, #44]	; (80107fc <__d2b+0xc4>)
 80107ce:	6038      	str	r0, [r7, #0]
 80107d0:	18e3      	adds	r3, r4, r3
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	18eb      	adds	r3, r5, r3
 80107d6:	6958      	ldr	r0, [r3, #20]
 80107d8:	f7ff fd22 	bl	8010220 <__hi0bits>
 80107dc:	0164      	lsls	r4, r4, #5
 80107de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e0:	1a24      	subs	r4, r4, r0
 80107e2:	601c      	str	r4, [r3, #0]
 80107e4:	e7df      	b.n	80107a6 <__d2b+0x6e>
 80107e6:	46c0      	nop			; (mov r8, r8)
 80107e8:	08012d53 	.word	0x08012d53
 80107ec:	0000030a 	.word	0x0000030a
 80107f0:	08012dc4 	.word	0x08012dc4
 80107f4:	fffffbcd 	.word	0xfffffbcd
 80107f8:	fffffbce 	.word	0xfffffbce
 80107fc:	3fffffff 	.word	0x3fffffff

08010800 <_calloc_r>:
 8010800:	b570      	push	{r4, r5, r6, lr}
 8010802:	0c13      	lsrs	r3, r2, #16
 8010804:	0c0d      	lsrs	r5, r1, #16
 8010806:	d11e      	bne.n	8010846 <_calloc_r+0x46>
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10c      	bne.n	8010826 <_calloc_r+0x26>
 801080c:	b289      	uxth	r1, r1
 801080e:	b294      	uxth	r4, r2
 8010810:	434c      	muls	r4, r1
 8010812:	0021      	movs	r1, r4
 8010814:	f000 f88c 	bl	8010930 <_malloc_r>
 8010818:	1e05      	subs	r5, r0, #0
 801081a:	d01b      	beq.n	8010854 <_calloc_r+0x54>
 801081c:	0022      	movs	r2, r4
 801081e:	2100      	movs	r1, #0
 8010820:	f7fd ffcf 	bl	800e7c2 <memset>
 8010824:	e016      	b.n	8010854 <_calloc_r+0x54>
 8010826:	1c1d      	adds	r5, r3, #0
 8010828:	1c0b      	adds	r3, r1, #0
 801082a:	b292      	uxth	r2, r2
 801082c:	b289      	uxth	r1, r1
 801082e:	b29c      	uxth	r4, r3
 8010830:	4351      	muls	r1, r2
 8010832:	b2ab      	uxth	r3, r5
 8010834:	4363      	muls	r3, r4
 8010836:	0c0c      	lsrs	r4, r1, #16
 8010838:	191c      	adds	r4, r3, r4
 801083a:	0c22      	lsrs	r2, r4, #16
 801083c:	d107      	bne.n	801084e <_calloc_r+0x4e>
 801083e:	0424      	lsls	r4, r4, #16
 8010840:	b289      	uxth	r1, r1
 8010842:	430c      	orrs	r4, r1
 8010844:	e7e5      	b.n	8010812 <_calloc_r+0x12>
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <_calloc_r+0x4e>
 801084a:	1c13      	adds	r3, r2, #0
 801084c:	e7ed      	b.n	801082a <_calloc_r+0x2a>
 801084e:	230c      	movs	r3, #12
 8010850:	2500      	movs	r5, #0
 8010852:	6003      	str	r3, [r0, #0]
 8010854:	0028      	movs	r0, r5
 8010856:	bd70      	pop	{r4, r5, r6, pc}

08010858 <_free_r>:
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	0005      	movs	r5, r0
 801085c:	2900      	cmp	r1, #0
 801085e:	d010      	beq.n	8010882 <_free_r+0x2a>
 8010860:	1f0c      	subs	r4, r1, #4
 8010862:	6823      	ldr	r3, [r4, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	da00      	bge.n	801086a <_free_r+0x12>
 8010868:	18e4      	adds	r4, r4, r3
 801086a:	0028      	movs	r0, r5
 801086c:	f000 fe8c 	bl	8011588 <__malloc_lock>
 8010870:	4a1d      	ldr	r2, [pc, #116]	; (80108e8 <_free_r+0x90>)
 8010872:	6813      	ldr	r3, [r2, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d105      	bne.n	8010884 <_free_r+0x2c>
 8010878:	6063      	str	r3, [r4, #4]
 801087a:	6014      	str	r4, [r2, #0]
 801087c:	0028      	movs	r0, r5
 801087e:	f000 fe8b 	bl	8011598 <__malloc_unlock>
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	42a3      	cmp	r3, r4
 8010886:	d908      	bls.n	801089a <_free_r+0x42>
 8010888:	6821      	ldr	r1, [r4, #0]
 801088a:	1860      	adds	r0, r4, r1
 801088c:	4283      	cmp	r3, r0
 801088e:	d1f3      	bne.n	8010878 <_free_r+0x20>
 8010890:	6818      	ldr	r0, [r3, #0]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	1841      	adds	r1, r0, r1
 8010896:	6021      	str	r1, [r4, #0]
 8010898:	e7ee      	b.n	8010878 <_free_r+0x20>
 801089a:	001a      	movs	r2, r3
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d001      	beq.n	80108a6 <_free_r+0x4e>
 80108a2:	42a3      	cmp	r3, r4
 80108a4:	d9f9      	bls.n	801089a <_free_r+0x42>
 80108a6:	6811      	ldr	r1, [r2, #0]
 80108a8:	1850      	adds	r0, r2, r1
 80108aa:	42a0      	cmp	r0, r4
 80108ac:	d10b      	bne.n	80108c6 <_free_r+0x6e>
 80108ae:	6820      	ldr	r0, [r4, #0]
 80108b0:	1809      	adds	r1, r1, r0
 80108b2:	1850      	adds	r0, r2, r1
 80108b4:	6011      	str	r1, [r2, #0]
 80108b6:	4283      	cmp	r3, r0
 80108b8:	d1e0      	bne.n	801087c <_free_r+0x24>
 80108ba:	6818      	ldr	r0, [r3, #0]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	1841      	adds	r1, r0, r1
 80108c0:	6011      	str	r1, [r2, #0]
 80108c2:	6053      	str	r3, [r2, #4]
 80108c4:	e7da      	b.n	801087c <_free_r+0x24>
 80108c6:	42a0      	cmp	r0, r4
 80108c8:	d902      	bls.n	80108d0 <_free_r+0x78>
 80108ca:	230c      	movs	r3, #12
 80108cc:	602b      	str	r3, [r5, #0]
 80108ce:	e7d5      	b.n	801087c <_free_r+0x24>
 80108d0:	6821      	ldr	r1, [r4, #0]
 80108d2:	1860      	adds	r0, r4, r1
 80108d4:	4283      	cmp	r3, r0
 80108d6:	d103      	bne.n	80108e0 <_free_r+0x88>
 80108d8:	6818      	ldr	r0, [r3, #0]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	1841      	adds	r1, r0, r1
 80108de:	6021      	str	r1, [r4, #0]
 80108e0:	6063      	str	r3, [r4, #4]
 80108e2:	6054      	str	r4, [r2, #4]
 80108e4:	e7ca      	b.n	801087c <_free_r+0x24>
 80108e6:	46c0      	nop			; (mov r8, r8)
 80108e8:	20002768 	.word	0x20002768

080108ec <sbrk_aligned>:
 80108ec:	b570      	push	{r4, r5, r6, lr}
 80108ee:	4e0f      	ldr	r6, [pc, #60]	; (801092c <sbrk_aligned+0x40>)
 80108f0:	000d      	movs	r5, r1
 80108f2:	6831      	ldr	r1, [r6, #0]
 80108f4:	0004      	movs	r4, r0
 80108f6:	2900      	cmp	r1, #0
 80108f8:	d102      	bne.n	8010900 <sbrk_aligned+0x14>
 80108fa:	f000 fb53 	bl	8010fa4 <_sbrk_r>
 80108fe:	6030      	str	r0, [r6, #0]
 8010900:	0029      	movs	r1, r5
 8010902:	0020      	movs	r0, r4
 8010904:	f000 fb4e 	bl	8010fa4 <_sbrk_r>
 8010908:	1c43      	adds	r3, r0, #1
 801090a:	d00a      	beq.n	8010922 <sbrk_aligned+0x36>
 801090c:	2303      	movs	r3, #3
 801090e:	1cc5      	adds	r5, r0, #3
 8010910:	439d      	bics	r5, r3
 8010912:	42a8      	cmp	r0, r5
 8010914:	d007      	beq.n	8010926 <sbrk_aligned+0x3a>
 8010916:	1a29      	subs	r1, r5, r0
 8010918:	0020      	movs	r0, r4
 801091a:	f000 fb43 	bl	8010fa4 <_sbrk_r>
 801091e:	1c43      	adds	r3, r0, #1
 8010920:	d101      	bne.n	8010926 <sbrk_aligned+0x3a>
 8010922:	2501      	movs	r5, #1
 8010924:	426d      	negs	r5, r5
 8010926:	0028      	movs	r0, r5
 8010928:	bd70      	pop	{r4, r5, r6, pc}
 801092a:	46c0      	nop			; (mov r8, r8)
 801092c:	2000276c 	.word	0x2000276c

08010930 <_malloc_r>:
 8010930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010932:	2203      	movs	r2, #3
 8010934:	1ccb      	adds	r3, r1, #3
 8010936:	4393      	bics	r3, r2
 8010938:	3308      	adds	r3, #8
 801093a:	0006      	movs	r6, r0
 801093c:	001f      	movs	r7, r3
 801093e:	2b0c      	cmp	r3, #12
 8010940:	d232      	bcs.n	80109a8 <_malloc_r+0x78>
 8010942:	270c      	movs	r7, #12
 8010944:	42b9      	cmp	r1, r7
 8010946:	d831      	bhi.n	80109ac <_malloc_r+0x7c>
 8010948:	0030      	movs	r0, r6
 801094a:	f000 fe1d 	bl	8011588 <__malloc_lock>
 801094e:	4d32      	ldr	r5, [pc, #200]	; (8010a18 <_malloc_r+0xe8>)
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	001c      	movs	r4, r3
 8010954:	2c00      	cmp	r4, #0
 8010956:	d12e      	bne.n	80109b6 <_malloc_r+0x86>
 8010958:	0039      	movs	r1, r7
 801095a:	0030      	movs	r0, r6
 801095c:	f7ff ffc6 	bl	80108ec <sbrk_aligned>
 8010960:	0004      	movs	r4, r0
 8010962:	1c43      	adds	r3, r0, #1
 8010964:	d11e      	bne.n	80109a4 <_malloc_r+0x74>
 8010966:	682c      	ldr	r4, [r5, #0]
 8010968:	0025      	movs	r5, r4
 801096a:	2d00      	cmp	r5, #0
 801096c:	d14a      	bne.n	8010a04 <_malloc_r+0xd4>
 801096e:	6823      	ldr	r3, [r4, #0]
 8010970:	0029      	movs	r1, r5
 8010972:	18e3      	adds	r3, r4, r3
 8010974:	0030      	movs	r0, r6
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	f000 fb14 	bl	8010fa4 <_sbrk_r>
 801097c:	9b01      	ldr	r3, [sp, #4]
 801097e:	4283      	cmp	r3, r0
 8010980:	d143      	bne.n	8010a0a <_malloc_r+0xda>
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	3703      	adds	r7, #3
 8010986:	1aff      	subs	r7, r7, r3
 8010988:	2303      	movs	r3, #3
 801098a:	439f      	bics	r7, r3
 801098c:	3708      	adds	r7, #8
 801098e:	2f0c      	cmp	r7, #12
 8010990:	d200      	bcs.n	8010994 <_malloc_r+0x64>
 8010992:	270c      	movs	r7, #12
 8010994:	0039      	movs	r1, r7
 8010996:	0030      	movs	r0, r6
 8010998:	f7ff ffa8 	bl	80108ec <sbrk_aligned>
 801099c:	1c43      	adds	r3, r0, #1
 801099e:	d034      	beq.n	8010a0a <_malloc_r+0xda>
 80109a0:	6823      	ldr	r3, [r4, #0]
 80109a2:	19df      	adds	r7, r3, r7
 80109a4:	6027      	str	r7, [r4, #0]
 80109a6:	e013      	b.n	80109d0 <_malloc_r+0xa0>
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	dacb      	bge.n	8010944 <_malloc_r+0x14>
 80109ac:	230c      	movs	r3, #12
 80109ae:	2500      	movs	r5, #0
 80109b0:	6033      	str	r3, [r6, #0]
 80109b2:	0028      	movs	r0, r5
 80109b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80109b6:	6822      	ldr	r2, [r4, #0]
 80109b8:	1bd1      	subs	r1, r2, r7
 80109ba:	d420      	bmi.n	80109fe <_malloc_r+0xce>
 80109bc:	290b      	cmp	r1, #11
 80109be:	d917      	bls.n	80109f0 <_malloc_r+0xc0>
 80109c0:	19e2      	adds	r2, r4, r7
 80109c2:	6027      	str	r7, [r4, #0]
 80109c4:	42a3      	cmp	r3, r4
 80109c6:	d111      	bne.n	80109ec <_malloc_r+0xbc>
 80109c8:	602a      	str	r2, [r5, #0]
 80109ca:	6863      	ldr	r3, [r4, #4]
 80109cc:	6011      	str	r1, [r2, #0]
 80109ce:	6053      	str	r3, [r2, #4]
 80109d0:	0030      	movs	r0, r6
 80109d2:	0025      	movs	r5, r4
 80109d4:	f000 fde0 	bl	8011598 <__malloc_unlock>
 80109d8:	2207      	movs	r2, #7
 80109da:	350b      	adds	r5, #11
 80109dc:	1d23      	adds	r3, r4, #4
 80109de:	4395      	bics	r5, r2
 80109e0:	1aea      	subs	r2, r5, r3
 80109e2:	429d      	cmp	r5, r3
 80109e4:	d0e5      	beq.n	80109b2 <_malloc_r+0x82>
 80109e6:	1b5b      	subs	r3, r3, r5
 80109e8:	50a3      	str	r3, [r4, r2]
 80109ea:	e7e2      	b.n	80109b2 <_malloc_r+0x82>
 80109ec:	605a      	str	r2, [r3, #4]
 80109ee:	e7ec      	b.n	80109ca <_malloc_r+0x9a>
 80109f0:	6862      	ldr	r2, [r4, #4]
 80109f2:	42a3      	cmp	r3, r4
 80109f4:	d101      	bne.n	80109fa <_malloc_r+0xca>
 80109f6:	602a      	str	r2, [r5, #0]
 80109f8:	e7ea      	b.n	80109d0 <_malloc_r+0xa0>
 80109fa:	605a      	str	r2, [r3, #4]
 80109fc:	e7e8      	b.n	80109d0 <_malloc_r+0xa0>
 80109fe:	0023      	movs	r3, r4
 8010a00:	6864      	ldr	r4, [r4, #4]
 8010a02:	e7a7      	b.n	8010954 <_malloc_r+0x24>
 8010a04:	002c      	movs	r4, r5
 8010a06:	686d      	ldr	r5, [r5, #4]
 8010a08:	e7af      	b.n	801096a <_malloc_r+0x3a>
 8010a0a:	230c      	movs	r3, #12
 8010a0c:	0030      	movs	r0, r6
 8010a0e:	6033      	str	r3, [r6, #0]
 8010a10:	f000 fdc2 	bl	8011598 <__malloc_unlock>
 8010a14:	e7cd      	b.n	80109b2 <_malloc_r+0x82>
 8010a16:	46c0      	nop			; (mov r8, r8)
 8010a18:	20002768 	.word	0x20002768

08010a1c <__ssputs_r>:
 8010a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a1e:	688e      	ldr	r6, [r1, #8]
 8010a20:	b085      	sub	sp, #20
 8010a22:	0007      	movs	r7, r0
 8010a24:	000c      	movs	r4, r1
 8010a26:	9203      	str	r2, [sp, #12]
 8010a28:	9301      	str	r3, [sp, #4]
 8010a2a:	429e      	cmp	r6, r3
 8010a2c:	d83c      	bhi.n	8010aa8 <__ssputs_r+0x8c>
 8010a2e:	2390      	movs	r3, #144	; 0x90
 8010a30:	898a      	ldrh	r2, [r1, #12]
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	421a      	tst	r2, r3
 8010a36:	d034      	beq.n	8010aa2 <__ssputs_r+0x86>
 8010a38:	6909      	ldr	r1, [r1, #16]
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	6960      	ldr	r0, [r4, #20]
 8010a3e:	1a5b      	subs	r3, r3, r1
 8010a40:	9302      	str	r3, [sp, #8]
 8010a42:	2303      	movs	r3, #3
 8010a44:	4343      	muls	r3, r0
 8010a46:	0fdd      	lsrs	r5, r3, #31
 8010a48:	18ed      	adds	r5, r5, r3
 8010a4a:	9b01      	ldr	r3, [sp, #4]
 8010a4c:	9802      	ldr	r0, [sp, #8]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	181b      	adds	r3, r3, r0
 8010a52:	106d      	asrs	r5, r5, #1
 8010a54:	42ab      	cmp	r3, r5
 8010a56:	d900      	bls.n	8010a5a <__ssputs_r+0x3e>
 8010a58:	001d      	movs	r5, r3
 8010a5a:	0553      	lsls	r3, r2, #21
 8010a5c:	d532      	bpl.n	8010ac4 <__ssputs_r+0xa8>
 8010a5e:	0029      	movs	r1, r5
 8010a60:	0038      	movs	r0, r7
 8010a62:	f7ff ff65 	bl	8010930 <_malloc_r>
 8010a66:	1e06      	subs	r6, r0, #0
 8010a68:	d109      	bne.n	8010a7e <__ssputs_r+0x62>
 8010a6a:	230c      	movs	r3, #12
 8010a6c:	603b      	str	r3, [r7, #0]
 8010a6e:	2340      	movs	r3, #64	; 0x40
 8010a70:	2001      	movs	r0, #1
 8010a72:	89a2      	ldrh	r2, [r4, #12]
 8010a74:	4240      	negs	r0, r0
 8010a76:	4313      	orrs	r3, r2
 8010a78:	81a3      	strh	r3, [r4, #12]
 8010a7a:	b005      	add	sp, #20
 8010a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a7e:	9a02      	ldr	r2, [sp, #8]
 8010a80:	6921      	ldr	r1, [r4, #16]
 8010a82:	f7fd fe95 	bl	800e7b0 <memcpy>
 8010a86:	89a3      	ldrh	r3, [r4, #12]
 8010a88:	4a14      	ldr	r2, [pc, #80]	; (8010adc <__ssputs_r+0xc0>)
 8010a8a:	401a      	ands	r2, r3
 8010a8c:	2380      	movs	r3, #128	; 0x80
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	81a3      	strh	r3, [r4, #12]
 8010a92:	9b02      	ldr	r3, [sp, #8]
 8010a94:	6126      	str	r6, [r4, #16]
 8010a96:	18f6      	adds	r6, r6, r3
 8010a98:	6026      	str	r6, [r4, #0]
 8010a9a:	6165      	str	r5, [r4, #20]
 8010a9c:	9e01      	ldr	r6, [sp, #4]
 8010a9e:	1aed      	subs	r5, r5, r3
 8010aa0:	60a5      	str	r5, [r4, #8]
 8010aa2:	9b01      	ldr	r3, [sp, #4]
 8010aa4:	429e      	cmp	r6, r3
 8010aa6:	d900      	bls.n	8010aaa <__ssputs_r+0x8e>
 8010aa8:	9e01      	ldr	r6, [sp, #4]
 8010aaa:	0032      	movs	r2, r6
 8010aac:	9903      	ldr	r1, [sp, #12]
 8010aae:	6820      	ldr	r0, [r4, #0]
 8010ab0:	f000 fd56 	bl	8011560 <memmove>
 8010ab4:	68a3      	ldr	r3, [r4, #8]
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	1b9b      	subs	r3, r3, r6
 8010aba:	60a3      	str	r3, [r4, #8]
 8010abc:	6823      	ldr	r3, [r4, #0]
 8010abe:	199e      	adds	r6, r3, r6
 8010ac0:	6026      	str	r6, [r4, #0]
 8010ac2:	e7da      	b.n	8010a7a <__ssputs_r+0x5e>
 8010ac4:	002a      	movs	r2, r5
 8010ac6:	0038      	movs	r0, r7
 8010ac8:	f000 fd6e 	bl	80115a8 <_realloc_r>
 8010acc:	1e06      	subs	r6, r0, #0
 8010ace:	d1e0      	bne.n	8010a92 <__ssputs_r+0x76>
 8010ad0:	0038      	movs	r0, r7
 8010ad2:	6921      	ldr	r1, [r4, #16]
 8010ad4:	f7ff fec0 	bl	8010858 <_free_r>
 8010ad8:	e7c7      	b.n	8010a6a <__ssputs_r+0x4e>
 8010ada:	46c0      	nop			; (mov r8, r8)
 8010adc:	fffffb7f 	.word	0xfffffb7f

08010ae0 <_svfiprintf_r>:
 8010ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ae2:	b0a1      	sub	sp, #132	; 0x84
 8010ae4:	9003      	str	r0, [sp, #12]
 8010ae6:	001d      	movs	r5, r3
 8010ae8:	898b      	ldrh	r3, [r1, #12]
 8010aea:	000f      	movs	r7, r1
 8010aec:	0016      	movs	r6, r2
 8010aee:	061b      	lsls	r3, r3, #24
 8010af0:	d511      	bpl.n	8010b16 <_svfiprintf_r+0x36>
 8010af2:	690b      	ldr	r3, [r1, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d10e      	bne.n	8010b16 <_svfiprintf_r+0x36>
 8010af8:	2140      	movs	r1, #64	; 0x40
 8010afa:	f7ff ff19 	bl	8010930 <_malloc_r>
 8010afe:	6038      	str	r0, [r7, #0]
 8010b00:	6138      	str	r0, [r7, #16]
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d105      	bne.n	8010b12 <_svfiprintf_r+0x32>
 8010b06:	230c      	movs	r3, #12
 8010b08:	9a03      	ldr	r2, [sp, #12]
 8010b0a:	3801      	subs	r0, #1
 8010b0c:	6013      	str	r3, [r2, #0]
 8010b0e:	b021      	add	sp, #132	; 0x84
 8010b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b12:	2340      	movs	r3, #64	; 0x40
 8010b14:	617b      	str	r3, [r7, #20]
 8010b16:	2300      	movs	r3, #0
 8010b18:	ac08      	add	r4, sp, #32
 8010b1a:	6163      	str	r3, [r4, #20]
 8010b1c:	3320      	adds	r3, #32
 8010b1e:	7663      	strb	r3, [r4, #25]
 8010b20:	3310      	adds	r3, #16
 8010b22:	76a3      	strb	r3, [r4, #26]
 8010b24:	9507      	str	r5, [sp, #28]
 8010b26:	0035      	movs	r5, r6
 8010b28:	782b      	ldrb	r3, [r5, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d001      	beq.n	8010b32 <_svfiprintf_r+0x52>
 8010b2e:	2b25      	cmp	r3, #37	; 0x25
 8010b30:	d147      	bne.n	8010bc2 <_svfiprintf_r+0xe2>
 8010b32:	1bab      	subs	r3, r5, r6
 8010b34:	9305      	str	r3, [sp, #20]
 8010b36:	42b5      	cmp	r5, r6
 8010b38:	d00c      	beq.n	8010b54 <_svfiprintf_r+0x74>
 8010b3a:	0032      	movs	r2, r6
 8010b3c:	0039      	movs	r1, r7
 8010b3e:	9803      	ldr	r0, [sp, #12]
 8010b40:	f7ff ff6c 	bl	8010a1c <__ssputs_r>
 8010b44:	1c43      	adds	r3, r0, #1
 8010b46:	d100      	bne.n	8010b4a <_svfiprintf_r+0x6a>
 8010b48:	e0ae      	b.n	8010ca8 <_svfiprintf_r+0x1c8>
 8010b4a:	6962      	ldr	r2, [r4, #20]
 8010b4c:	9b05      	ldr	r3, [sp, #20]
 8010b4e:	4694      	mov	ip, r2
 8010b50:	4463      	add	r3, ip
 8010b52:	6163      	str	r3, [r4, #20]
 8010b54:	782b      	ldrb	r3, [r5, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d100      	bne.n	8010b5c <_svfiprintf_r+0x7c>
 8010b5a:	e0a5      	b.n	8010ca8 <_svfiprintf_r+0x1c8>
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	2300      	movs	r3, #0
 8010b60:	4252      	negs	r2, r2
 8010b62:	6062      	str	r2, [r4, #4]
 8010b64:	a904      	add	r1, sp, #16
 8010b66:	3254      	adds	r2, #84	; 0x54
 8010b68:	1852      	adds	r2, r2, r1
 8010b6a:	1c6e      	adds	r6, r5, #1
 8010b6c:	6023      	str	r3, [r4, #0]
 8010b6e:	60e3      	str	r3, [r4, #12]
 8010b70:	60a3      	str	r3, [r4, #8]
 8010b72:	7013      	strb	r3, [r2, #0]
 8010b74:	65a3      	str	r3, [r4, #88]	; 0x58
 8010b76:	2205      	movs	r2, #5
 8010b78:	7831      	ldrb	r1, [r6, #0]
 8010b7a:	4854      	ldr	r0, [pc, #336]	; (8010ccc <_svfiprintf_r+0x1ec>)
 8010b7c:	f7ff fa98 	bl	80100b0 <memchr>
 8010b80:	1c75      	adds	r5, r6, #1
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d11f      	bne.n	8010bc6 <_svfiprintf_r+0xe6>
 8010b86:	6822      	ldr	r2, [r4, #0]
 8010b88:	06d3      	lsls	r3, r2, #27
 8010b8a:	d504      	bpl.n	8010b96 <_svfiprintf_r+0xb6>
 8010b8c:	2353      	movs	r3, #83	; 0x53
 8010b8e:	a904      	add	r1, sp, #16
 8010b90:	185b      	adds	r3, r3, r1
 8010b92:	2120      	movs	r1, #32
 8010b94:	7019      	strb	r1, [r3, #0]
 8010b96:	0713      	lsls	r3, r2, #28
 8010b98:	d504      	bpl.n	8010ba4 <_svfiprintf_r+0xc4>
 8010b9a:	2353      	movs	r3, #83	; 0x53
 8010b9c:	a904      	add	r1, sp, #16
 8010b9e:	185b      	adds	r3, r3, r1
 8010ba0:	212b      	movs	r1, #43	; 0x2b
 8010ba2:	7019      	strb	r1, [r3, #0]
 8010ba4:	7833      	ldrb	r3, [r6, #0]
 8010ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ba8:	d016      	beq.n	8010bd8 <_svfiprintf_r+0xf8>
 8010baa:	0035      	movs	r5, r6
 8010bac:	2100      	movs	r1, #0
 8010bae:	200a      	movs	r0, #10
 8010bb0:	68e3      	ldr	r3, [r4, #12]
 8010bb2:	782a      	ldrb	r2, [r5, #0]
 8010bb4:	1c6e      	adds	r6, r5, #1
 8010bb6:	3a30      	subs	r2, #48	; 0x30
 8010bb8:	2a09      	cmp	r2, #9
 8010bba:	d94e      	bls.n	8010c5a <_svfiprintf_r+0x17a>
 8010bbc:	2900      	cmp	r1, #0
 8010bbe:	d111      	bne.n	8010be4 <_svfiprintf_r+0x104>
 8010bc0:	e017      	b.n	8010bf2 <_svfiprintf_r+0x112>
 8010bc2:	3501      	adds	r5, #1
 8010bc4:	e7b0      	b.n	8010b28 <_svfiprintf_r+0x48>
 8010bc6:	4b41      	ldr	r3, [pc, #260]	; (8010ccc <_svfiprintf_r+0x1ec>)
 8010bc8:	6822      	ldr	r2, [r4, #0]
 8010bca:	1ac0      	subs	r0, r0, r3
 8010bcc:	2301      	movs	r3, #1
 8010bce:	4083      	lsls	r3, r0
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	002e      	movs	r6, r5
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	e7ce      	b.n	8010b76 <_svfiprintf_r+0x96>
 8010bd8:	9b07      	ldr	r3, [sp, #28]
 8010bda:	1d19      	adds	r1, r3, #4
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	9107      	str	r1, [sp, #28]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	db01      	blt.n	8010be8 <_svfiprintf_r+0x108>
 8010be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010be6:	e004      	b.n	8010bf2 <_svfiprintf_r+0x112>
 8010be8:	425b      	negs	r3, r3
 8010bea:	60e3      	str	r3, [r4, #12]
 8010bec:	2302      	movs	r3, #2
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	782b      	ldrb	r3, [r5, #0]
 8010bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8010bf6:	d10a      	bne.n	8010c0e <_svfiprintf_r+0x12e>
 8010bf8:	786b      	ldrb	r3, [r5, #1]
 8010bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8010bfc:	d135      	bne.n	8010c6a <_svfiprintf_r+0x18a>
 8010bfe:	9b07      	ldr	r3, [sp, #28]
 8010c00:	3502      	adds	r5, #2
 8010c02:	1d1a      	adds	r2, r3, #4
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	9207      	str	r2, [sp, #28]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	db2b      	blt.n	8010c64 <_svfiprintf_r+0x184>
 8010c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c0e:	4e30      	ldr	r6, [pc, #192]	; (8010cd0 <_svfiprintf_r+0x1f0>)
 8010c10:	2203      	movs	r2, #3
 8010c12:	0030      	movs	r0, r6
 8010c14:	7829      	ldrb	r1, [r5, #0]
 8010c16:	f7ff fa4b 	bl	80100b0 <memchr>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d006      	beq.n	8010c2c <_svfiprintf_r+0x14c>
 8010c1e:	2340      	movs	r3, #64	; 0x40
 8010c20:	1b80      	subs	r0, r0, r6
 8010c22:	4083      	lsls	r3, r0
 8010c24:	6822      	ldr	r2, [r4, #0]
 8010c26:	3501      	adds	r5, #1
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	6023      	str	r3, [r4, #0]
 8010c2c:	7829      	ldrb	r1, [r5, #0]
 8010c2e:	2206      	movs	r2, #6
 8010c30:	4828      	ldr	r0, [pc, #160]	; (8010cd4 <_svfiprintf_r+0x1f4>)
 8010c32:	1c6e      	adds	r6, r5, #1
 8010c34:	7621      	strb	r1, [r4, #24]
 8010c36:	f7ff fa3b 	bl	80100b0 <memchr>
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d03c      	beq.n	8010cb8 <_svfiprintf_r+0x1d8>
 8010c3e:	4b26      	ldr	r3, [pc, #152]	; (8010cd8 <_svfiprintf_r+0x1f8>)
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d125      	bne.n	8010c90 <_svfiprintf_r+0x1b0>
 8010c44:	2207      	movs	r2, #7
 8010c46:	9b07      	ldr	r3, [sp, #28]
 8010c48:	3307      	adds	r3, #7
 8010c4a:	4393      	bics	r3, r2
 8010c4c:	3308      	adds	r3, #8
 8010c4e:	9307      	str	r3, [sp, #28]
 8010c50:	6963      	ldr	r3, [r4, #20]
 8010c52:	9a04      	ldr	r2, [sp, #16]
 8010c54:	189b      	adds	r3, r3, r2
 8010c56:	6163      	str	r3, [r4, #20]
 8010c58:	e765      	b.n	8010b26 <_svfiprintf_r+0x46>
 8010c5a:	4343      	muls	r3, r0
 8010c5c:	0035      	movs	r5, r6
 8010c5e:	2101      	movs	r1, #1
 8010c60:	189b      	adds	r3, r3, r2
 8010c62:	e7a6      	b.n	8010bb2 <_svfiprintf_r+0xd2>
 8010c64:	2301      	movs	r3, #1
 8010c66:	425b      	negs	r3, r3
 8010c68:	e7d0      	b.n	8010c0c <_svfiprintf_r+0x12c>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	200a      	movs	r0, #10
 8010c6e:	001a      	movs	r2, r3
 8010c70:	3501      	adds	r5, #1
 8010c72:	6063      	str	r3, [r4, #4]
 8010c74:	7829      	ldrb	r1, [r5, #0]
 8010c76:	1c6e      	adds	r6, r5, #1
 8010c78:	3930      	subs	r1, #48	; 0x30
 8010c7a:	2909      	cmp	r1, #9
 8010c7c:	d903      	bls.n	8010c86 <_svfiprintf_r+0x1a6>
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d0c5      	beq.n	8010c0e <_svfiprintf_r+0x12e>
 8010c82:	9209      	str	r2, [sp, #36]	; 0x24
 8010c84:	e7c3      	b.n	8010c0e <_svfiprintf_r+0x12e>
 8010c86:	4342      	muls	r2, r0
 8010c88:	0035      	movs	r5, r6
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	1852      	adds	r2, r2, r1
 8010c8e:	e7f1      	b.n	8010c74 <_svfiprintf_r+0x194>
 8010c90:	ab07      	add	r3, sp, #28
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	003a      	movs	r2, r7
 8010c96:	0021      	movs	r1, r4
 8010c98:	4b10      	ldr	r3, [pc, #64]	; (8010cdc <_svfiprintf_r+0x1fc>)
 8010c9a:	9803      	ldr	r0, [sp, #12]
 8010c9c:	f7fd fe44 	bl	800e928 <_printf_float>
 8010ca0:	9004      	str	r0, [sp, #16]
 8010ca2:	9b04      	ldr	r3, [sp, #16]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	d1d3      	bne.n	8010c50 <_svfiprintf_r+0x170>
 8010ca8:	89bb      	ldrh	r3, [r7, #12]
 8010caa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010cac:	065b      	lsls	r3, r3, #25
 8010cae:	d400      	bmi.n	8010cb2 <_svfiprintf_r+0x1d2>
 8010cb0:	e72d      	b.n	8010b0e <_svfiprintf_r+0x2e>
 8010cb2:	2001      	movs	r0, #1
 8010cb4:	4240      	negs	r0, r0
 8010cb6:	e72a      	b.n	8010b0e <_svfiprintf_r+0x2e>
 8010cb8:	ab07      	add	r3, sp, #28
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	003a      	movs	r2, r7
 8010cbe:	0021      	movs	r1, r4
 8010cc0:	4b06      	ldr	r3, [pc, #24]	; (8010cdc <_svfiprintf_r+0x1fc>)
 8010cc2:	9803      	ldr	r0, [sp, #12]
 8010cc4:	f7fe f8e2 	bl	800ee8c <_printf_i>
 8010cc8:	e7ea      	b.n	8010ca0 <_svfiprintf_r+0x1c0>
 8010cca:	46c0      	nop			; (mov r8, r8)
 8010ccc:	08012f1c 	.word	0x08012f1c
 8010cd0:	08012f22 	.word	0x08012f22
 8010cd4:	08012f26 	.word	0x08012f26
 8010cd8:	0800e929 	.word	0x0800e929
 8010cdc:	08010a1d 	.word	0x08010a1d

08010ce0 <__sfputc_r>:
 8010ce0:	6893      	ldr	r3, [r2, #8]
 8010ce2:	b510      	push	{r4, lr}
 8010ce4:	3b01      	subs	r3, #1
 8010ce6:	6093      	str	r3, [r2, #8]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	da04      	bge.n	8010cf6 <__sfputc_r+0x16>
 8010cec:	6994      	ldr	r4, [r2, #24]
 8010cee:	42a3      	cmp	r3, r4
 8010cf0:	db07      	blt.n	8010d02 <__sfputc_r+0x22>
 8010cf2:	290a      	cmp	r1, #10
 8010cf4:	d005      	beq.n	8010d02 <__sfputc_r+0x22>
 8010cf6:	6813      	ldr	r3, [r2, #0]
 8010cf8:	1c58      	adds	r0, r3, #1
 8010cfa:	6010      	str	r0, [r2, #0]
 8010cfc:	7019      	strb	r1, [r3, #0]
 8010cfe:	0008      	movs	r0, r1
 8010d00:	bd10      	pop	{r4, pc}
 8010d02:	f000 f9ad 	bl	8011060 <__swbuf_r>
 8010d06:	0001      	movs	r1, r0
 8010d08:	e7f9      	b.n	8010cfe <__sfputc_r+0x1e>

08010d0a <__sfputs_r>:
 8010d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d0c:	0006      	movs	r6, r0
 8010d0e:	000f      	movs	r7, r1
 8010d10:	0014      	movs	r4, r2
 8010d12:	18d5      	adds	r5, r2, r3
 8010d14:	42ac      	cmp	r4, r5
 8010d16:	d101      	bne.n	8010d1c <__sfputs_r+0x12>
 8010d18:	2000      	movs	r0, #0
 8010d1a:	e007      	b.n	8010d2c <__sfputs_r+0x22>
 8010d1c:	7821      	ldrb	r1, [r4, #0]
 8010d1e:	003a      	movs	r2, r7
 8010d20:	0030      	movs	r0, r6
 8010d22:	f7ff ffdd 	bl	8010ce0 <__sfputc_r>
 8010d26:	3401      	adds	r4, #1
 8010d28:	1c43      	adds	r3, r0, #1
 8010d2a:	d1f3      	bne.n	8010d14 <__sfputs_r+0xa>
 8010d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d30 <_vfiprintf_r>:
 8010d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d32:	b0a1      	sub	sp, #132	; 0x84
 8010d34:	0006      	movs	r6, r0
 8010d36:	000c      	movs	r4, r1
 8010d38:	001f      	movs	r7, r3
 8010d3a:	9203      	str	r2, [sp, #12]
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d004      	beq.n	8010d4a <_vfiprintf_r+0x1a>
 8010d40:	6983      	ldr	r3, [r0, #24]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <_vfiprintf_r+0x1a>
 8010d46:	f7ff f901 	bl	800ff4c <__sinit>
 8010d4a:	4b8e      	ldr	r3, [pc, #568]	; (8010f84 <_vfiprintf_r+0x254>)
 8010d4c:	429c      	cmp	r4, r3
 8010d4e:	d11c      	bne.n	8010d8a <_vfiprintf_r+0x5a>
 8010d50:	6874      	ldr	r4, [r6, #4]
 8010d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d54:	07db      	lsls	r3, r3, #31
 8010d56:	d405      	bmi.n	8010d64 <_vfiprintf_r+0x34>
 8010d58:	89a3      	ldrh	r3, [r4, #12]
 8010d5a:	059b      	lsls	r3, r3, #22
 8010d5c:	d402      	bmi.n	8010d64 <_vfiprintf_r+0x34>
 8010d5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d60:	f7ff f999 	bl	8010096 <__retarget_lock_acquire_recursive>
 8010d64:	89a3      	ldrh	r3, [r4, #12]
 8010d66:	071b      	lsls	r3, r3, #28
 8010d68:	d502      	bpl.n	8010d70 <_vfiprintf_r+0x40>
 8010d6a:	6923      	ldr	r3, [r4, #16]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d11d      	bne.n	8010dac <_vfiprintf_r+0x7c>
 8010d70:	0021      	movs	r1, r4
 8010d72:	0030      	movs	r0, r6
 8010d74:	f000 f9de 	bl	8011134 <__swsetup_r>
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d017      	beq.n	8010dac <_vfiprintf_r+0x7c>
 8010d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d7e:	07db      	lsls	r3, r3, #31
 8010d80:	d50d      	bpl.n	8010d9e <_vfiprintf_r+0x6e>
 8010d82:	2001      	movs	r0, #1
 8010d84:	4240      	negs	r0, r0
 8010d86:	b021      	add	sp, #132	; 0x84
 8010d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d8a:	4b7f      	ldr	r3, [pc, #508]	; (8010f88 <_vfiprintf_r+0x258>)
 8010d8c:	429c      	cmp	r4, r3
 8010d8e:	d101      	bne.n	8010d94 <_vfiprintf_r+0x64>
 8010d90:	68b4      	ldr	r4, [r6, #8]
 8010d92:	e7de      	b.n	8010d52 <_vfiprintf_r+0x22>
 8010d94:	4b7d      	ldr	r3, [pc, #500]	; (8010f8c <_vfiprintf_r+0x25c>)
 8010d96:	429c      	cmp	r4, r3
 8010d98:	d1db      	bne.n	8010d52 <_vfiprintf_r+0x22>
 8010d9a:	68f4      	ldr	r4, [r6, #12]
 8010d9c:	e7d9      	b.n	8010d52 <_vfiprintf_r+0x22>
 8010d9e:	89a3      	ldrh	r3, [r4, #12]
 8010da0:	059b      	lsls	r3, r3, #22
 8010da2:	d4ee      	bmi.n	8010d82 <_vfiprintf_r+0x52>
 8010da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010da6:	f7ff f977 	bl	8010098 <__retarget_lock_release_recursive>
 8010daa:	e7ea      	b.n	8010d82 <_vfiprintf_r+0x52>
 8010dac:	2300      	movs	r3, #0
 8010dae:	ad08      	add	r5, sp, #32
 8010db0:	616b      	str	r3, [r5, #20]
 8010db2:	3320      	adds	r3, #32
 8010db4:	766b      	strb	r3, [r5, #25]
 8010db6:	3310      	adds	r3, #16
 8010db8:	76ab      	strb	r3, [r5, #26]
 8010dba:	9707      	str	r7, [sp, #28]
 8010dbc:	9f03      	ldr	r7, [sp, #12]
 8010dbe:	783b      	ldrb	r3, [r7, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <_vfiprintf_r+0x98>
 8010dc4:	2b25      	cmp	r3, #37	; 0x25
 8010dc6:	d14e      	bne.n	8010e66 <_vfiprintf_r+0x136>
 8010dc8:	9b03      	ldr	r3, [sp, #12]
 8010dca:	1afb      	subs	r3, r7, r3
 8010dcc:	9305      	str	r3, [sp, #20]
 8010dce:	9b03      	ldr	r3, [sp, #12]
 8010dd0:	429f      	cmp	r7, r3
 8010dd2:	d00d      	beq.n	8010df0 <_vfiprintf_r+0xc0>
 8010dd4:	9b05      	ldr	r3, [sp, #20]
 8010dd6:	0021      	movs	r1, r4
 8010dd8:	0030      	movs	r0, r6
 8010dda:	9a03      	ldr	r2, [sp, #12]
 8010ddc:	f7ff ff95 	bl	8010d0a <__sfputs_r>
 8010de0:	1c43      	adds	r3, r0, #1
 8010de2:	d100      	bne.n	8010de6 <_vfiprintf_r+0xb6>
 8010de4:	e0b5      	b.n	8010f52 <_vfiprintf_r+0x222>
 8010de6:	696a      	ldr	r2, [r5, #20]
 8010de8:	9b05      	ldr	r3, [sp, #20]
 8010dea:	4694      	mov	ip, r2
 8010dec:	4463      	add	r3, ip
 8010dee:	616b      	str	r3, [r5, #20]
 8010df0:	783b      	ldrb	r3, [r7, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d100      	bne.n	8010df8 <_vfiprintf_r+0xc8>
 8010df6:	e0ac      	b.n	8010f52 <_vfiprintf_r+0x222>
 8010df8:	2201      	movs	r2, #1
 8010dfa:	1c7b      	adds	r3, r7, #1
 8010dfc:	9303      	str	r3, [sp, #12]
 8010dfe:	2300      	movs	r3, #0
 8010e00:	4252      	negs	r2, r2
 8010e02:	606a      	str	r2, [r5, #4]
 8010e04:	a904      	add	r1, sp, #16
 8010e06:	3254      	adds	r2, #84	; 0x54
 8010e08:	1852      	adds	r2, r2, r1
 8010e0a:	602b      	str	r3, [r5, #0]
 8010e0c:	60eb      	str	r3, [r5, #12]
 8010e0e:	60ab      	str	r3, [r5, #8]
 8010e10:	7013      	strb	r3, [r2, #0]
 8010e12:	65ab      	str	r3, [r5, #88]	; 0x58
 8010e14:	9b03      	ldr	r3, [sp, #12]
 8010e16:	2205      	movs	r2, #5
 8010e18:	7819      	ldrb	r1, [r3, #0]
 8010e1a:	485d      	ldr	r0, [pc, #372]	; (8010f90 <_vfiprintf_r+0x260>)
 8010e1c:	f7ff f948 	bl	80100b0 <memchr>
 8010e20:	9b03      	ldr	r3, [sp, #12]
 8010e22:	1c5f      	adds	r7, r3, #1
 8010e24:	2800      	cmp	r0, #0
 8010e26:	d120      	bne.n	8010e6a <_vfiprintf_r+0x13a>
 8010e28:	682a      	ldr	r2, [r5, #0]
 8010e2a:	06d3      	lsls	r3, r2, #27
 8010e2c:	d504      	bpl.n	8010e38 <_vfiprintf_r+0x108>
 8010e2e:	2353      	movs	r3, #83	; 0x53
 8010e30:	a904      	add	r1, sp, #16
 8010e32:	185b      	adds	r3, r3, r1
 8010e34:	2120      	movs	r1, #32
 8010e36:	7019      	strb	r1, [r3, #0]
 8010e38:	0713      	lsls	r3, r2, #28
 8010e3a:	d504      	bpl.n	8010e46 <_vfiprintf_r+0x116>
 8010e3c:	2353      	movs	r3, #83	; 0x53
 8010e3e:	a904      	add	r1, sp, #16
 8010e40:	185b      	adds	r3, r3, r1
 8010e42:	212b      	movs	r1, #43	; 0x2b
 8010e44:	7019      	strb	r1, [r3, #0]
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e4c:	d016      	beq.n	8010e7c <_vfiprintf_r+0x14c>
 8010e4e:	2100      	movs	r1, #0
 8010e50:	68eb      	ldr	r3, [r5, #12]
 8010e52:	9f03      	ldr	r7, [sp, #12]
 8010e54:	783a      	ldrb	r2, [r7, #0]
 8010e56:	1c78      	adds	r0, r7, #1
 8010e58:	3a30      	subs	r2, #48	; 0x30
 8010e5a:	4684      	mov	ip, r0
 8010e5c:	2a09      	cmp	r2, #9
 8010e5e:	d94f      	bls.n	8010f00 <_vfiprintf_r+0x1d0>
 8010e60:	2900      	cmp	r1, #0
 8010e62:	d111      	bne.n	8010e88 <_vfiprintf_r+0x158>
 8010e64:	e017      	b.n	8010e96 <_vfiprintf_r+0x166>
 8010e66:	3701      	adds	r7, #1
 8010e68:	e7a9      	b.n	8010dbe <_vfiprintf_r+0x8e>
 8010e6a:	4b49      	ldr	r3, [pc, #292]	; (8010f90 <_vfiprintf_r+0x260>)
 8010e6c:	682a      	ldr	r2, [r5, #0]
 8010e6e:	1ac0      	subs	r0, r0, r3
 8010e70:	2301      	movs	r3, #1
 8010e72:	4083      	lsls	r3, r0
 8010e74:	4313      	orrs	r3, r2
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	9703      	str	r7, [sp, #12]
 8010e7a:	e7cb      	b.n	8010e14 <_vfiprintf_r+0xe4>
 8010e7c:	9b07      	ldr	r3, [sp, #28]
 8010e7e:	1d19      	adds	r1, r3, #4
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	9107      	str	r1, [sp, #28]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	db01      	blt.n	8010e8c <_vfiprintf_r+0x15c>
 8010e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e8a:	e004      	b.n	8010e96 <_vfiprintf_r+0x166>
 8010e8c:	425b      	negs	r3, r3
 8010e8e:	60eb      	str	r3, [r5, #12]
 8010e90:	2302      	movs	r3, #2
 8010e92:	4313      	orrs	r3, r2
 8010e94:	602b      	str	r3, [r5, #0]
 8010e96:	783b      	ldrb	r3, [r7, #0]
 8010e98:	2b2e      	cmp	r3, #46	; 0x2e
 8010e9a:	d10a      	bne.n	8010eb2 <_vfiprintf_r+0x182>
 8010e9c:	787b      	ldrb	r3, [r7, #1]
 8010e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8010ea0:	d137      	bne.n	8010f12 <_vfiprintf_r+0x1e2>
 8010ea2:	9b07      	ldr	r3, [sp, #28]
 8010ea4:	3702      	adds	r7, #2
 8010ea6:	1d1a      	adds	r2, r3, #4
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	9207      	str	r2, [sp, #28]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	db2d      	blt.n	8010f0c <_vfiprintf_r+0x1dc>
 8010eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb2:	2203      	movs	r2, #3
 8010eb4:	7839      	ldrb	r1, [r7, #0]
 8010eb6:	4837      	ldr	r0, [pc, #220]	; (8010f94 <_vfiprintf_r+0x264>)
 8010eb8:	f7ff f8fa 	bl	80100b0 <memchr>
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d007      	beq.n	8010ed0 <_vfiprintf_r+0x1a0>
 8010ec0:	4b34      	ldr	r3, [pc, #208]	; (8010f94 <_vfiprintf_r+0x264>)
 8010ec2:	682a      	ldr	r2, [r5, #0]
 8010ec4:	1ac0      	subs	r0, r0, r3
 8010ec6:	2340      	movs	r3, #64	; 0x40
 8010ec8:	4083      	lsls	r3, r0
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	3701      	adds	r7, #1
 8010ece:	602b      	str	r3, [r5, #0]
 8010ed0:	7839      	ldrb	r1, [r7, #0]
 8010ed2:	1c7b      	adds	r3, r7, #1
 8010ed4:	2206      	movs	r2, #6
 8010ed6:	4830      	ldr	r0, [pc, #192]	; (8010f98 <_vfiprintf_r+0x268>)
 8010ed8:	9303      	str	r3, [sp, #12]
 8010eda:	7629      	strb	r1, [r5, #24]
 8010edc:	f7ff f8e8 	bl	80100b0 <memchr>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d045      	beq.n	8010f70 <_vfiprintf_r+0x240>
 8010ee4:	4b2d      	ldr	r3, [pc, #180]	; (8010f9c <_vfiprintf_r+0x26c>)
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d127      	bne.n	8010f3a <_vfiprintf_r+0x20a>
 8010eea:	2207      	movs	r2, #7
 8010eec:	9b07      	ldr	r3, [sp, #28]
 8010eee:	3307      	adds	r3, #7
 8010ef0:	4393      	bics	r3, r2
 8010ef2:	3308      	adds	r3, #8
 8010ef4:	9307      	str	r3, [sp, #28]
 8010ef6:	696b      	ldr	r3, [r5, #20]
 8010ef8:	9a04      	ldr	r2, [sp, #16]
 8010efa:	189b      	adds	r3, r3, r2
 8010efc:	616b      	str	r3, [r5, #20]
 8010efe:	e75d      	b.n	8010dbc <_vfiprintf_r+0x8c>
 8010f00:	210a      	movs	r1, #10
 8010f02:	434b      	muls	r3, r1
 8010f04:	4667      	mov	r7, ip
 8010f06:	189b      	adds	r3, r3, r2
 8010f08:	3909      	subs	r1, #9
 8010f0a:	e7a3      	b.n	8010e54 <_vfiprintf_r+0x124>
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	425b      	negs	r3, r3
 8010f10:	e7ce      	b.n	8010eb0 <_vfiprintf_r+0x180>
 8010f12:	2300      	movs	r3, #0
 8010f14:	001a      	movs	r2, r3
 8010f16:	3701      	adds	r7, #1
 8010f18:	606b      	str	r3, [r5, #4]
 8010f1a:	7839      	ldrb	r1, [r7, #0]
 8010f1c:	1c78      	adds	r0, r7, #1
 8010f1e:	3930      	subs	r1, #48	; 0x30
 8010f20:	4684      	mov	ip, r0
 8010f22:	2909      	cmp	r1, #9
 8010f24:	d903      	bls.n	8010f2e <_vfiprintf_r+0x1fe>
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d0c3      	beq.n	8010eb2 <_vfiprintf_r+0x182>
 8010f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8010f2c:	e7c1      	b.n	8010eb2 <_vfiprintf_r+0x182>
 8010f2e:	230a      	movs	r3, #10
 8010f30:	435a      	muls	r2, r3
 8010f32:	4667      	mov	r7, ip
 8010f34:	1852      	adds	r2, r2, r1
 8010f36:	3b09      	subs	r3, #9
 8010f38:	e7ef      	b.n	8010f1a <_vfiprintf_r+0x1ea>
 8010f3a:	ab07      	add	r3, sp, #28
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	0022      	movs	r2, r4
 8010f40:	0029      	movs	r1, r5
 8010f42:	0030      	movs	r0, r6
 8010f44:	4b16      	ldr	r3, [pc, #88]	; (8010fa0 <_vfiprintf_r+0x270>)
 8010f46:	f7fd fcef 	bl	800e928 <_printf_float>
 8010f4a:	9004      	str	r0, [sp, #16]
 8010f4c:	9b04      	ldr	r3, [sp, #16]
 8010f4e:	3301      	adds	r3, #1
 8010f50:	d1d1      	bne.n	8010ef6 <_vfiprintf_r+0x1c6>
 8010f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f54:	07db      	lsls	r3, r3, #31
 8010f56:	d405      	bmi.n	8010f64 <_vfiprintf_r+0x234>
 8010f58:	89a3      	ldrh	r3, [r4, #12]
 8010f5a:	059b      	lsls	r3, r3, #22
 8010f5c:	d402      	bmi.n	8010f64 <_vfiprintf_r+0x234>
 8010f5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f60:	f7ff f89a 	bl	8010098 <__retarget_lock_release_recursive>
 8010f64:	89a3      	ldrh	r3, [r4, #12]
 8010f66:	065b      	lsls	r3, r3, #25
 8010f68:	d500      	bpl.n	8010f6c <_vfiprintf_r+0x23c>
 8010f6a:	e70a      	b.n	8010d82 <_vfiprintf_r+0x52>
 8010f6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010f6e:	e70a      	b.n	8010d86 <_vfiprintf_r+0x56>
 8010f70:	ab07      	add	r3, sp, #28
 8010f72:	9300      	str	r3, [sp, #0]
 8010f74:	0022      	movs	r2, r4
 8010f76:	0029      	movs	r1, r5
 8010f78:	0030      	movs	r0, r6
 8010f7a:	4b09      	ldr	r3, [pc, #36]	; (8010fa0 <_vfiprintf_r+0x270>)
 8010f7c:	f7fd ff86 	bl	800ee8c <_printf_i>
 8010f80:	e7e3      	b.n	8010f4a <_vfiprintf_r+0x21a>
 8010f82:	46c0      	nop			; (mov r8, r8)
 8010f84:	08012d84 	.word	0x08012d84
 8010f88:	08012da4 	.word	0x08012da4
 8010f8c:	08012d64 	.word	0x08012d64
 8010f90:	08012f1c 	.word	0x08012f1c
 8010f94:	08012f22 	.word	0x08012f22
 8010f98:	08012f26 	.word	0x08012f26
 8010f9c:	0800e929 	.word	0x0800e929
 8010fa0:	08010d0b 	.word	0x08010d0b

08010fa4 <_sbrk_r>:
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	b570      	push	{r4, r5, r6, lr}
 8010fa8:	4d06      	ldr	r5, [pc, #24]	; (8010fc4 <_sbrk_r+0x20>)
 8010faa:	0004      	movs	r4, r0
 8010fac:	0008      	movs	r0, r1
 8010fae:	602b      	str	r3, [r5, #0]
 8010fb0:	f7f3 fa4c 	bl	800444c <_sbrk>
 8010fb4:	1c43      	adds	r3, r0, #1
 8010fb6:	d103      	bne.n	8010fc0 <_sbrk_r+0x1c>
 8010fb8:	682b      	ldr	r3, [r5, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d000      	beq.n	8010fc0 <_sbrk_r+0x1c>
 8010fbe:	6023      	str	r3, [r4, #0]
 8010fc0:	bd70      	pop	{r4, r5, r6, pc}
 8010fc2:	46c0      	nop			; (mov r8, r8)
 8010fc4:	20002770 	.word	0x20002770

08010fc8 <__sread>:
 8010fc8:	b570      	push	{r4, r5, r6, lr}
 8010fca:	000c      	movs	r4, r1
 8010fcc:	250e      	movs	r5, #14
 8010fce:	5f49      	ldrsh	r1, [r1, r5]
 8010fd0:	f000 fb1a 	bl	8011608 <_read_r>
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	db03      	blt.n	8010fe0 <__sread+0x18>
 8010fd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010fda:	181b      	adds	r3, r3, r0
 8010fdc:	6563      	str	r3, [r4, #84]	; 0x54
 8010fde:	bd70      	pop	{r4, r5, r6, pc}
 8010fe0:	89a3      	ldrh	r3, [r4, #12]
 8010fe2:	4a02      	ldr	r2, [pc, #8]	; (8010fec <__sread+0x24>)
 8010fe4:	4013      	ands	r3, r2
 8010fe6:	81a3      	strh	r3, [r4, #12]
 8010fe8:	e7f9      	b.n	8010fde <__sread+0x16>
 8010fea:	46c0      	nop			; (mov r8, r8)
 8010fec:	ffffefff 	.word	0xffffefff

08010ff0 <__swrite>:
 8010ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff2:	001f      	movs	r7, r3
 8010ff4:	898b      	ldrh	r3, [r1, #12]
 8010ff6:	0005      	movs	r5, r0
 8010ff8:	000c      	movs	r4, r1
 8010ffa:	0016      	movs	r6, r2
 8010ffc:	05db      	lsls	r3, r3, #23
 8010ffe:	d505      	bpl.n	801100c <__swrite+0x1c>
 8011000:	230e      	movs	r3, #14
 8011002:	5ec9      	ldrsh	r1, [r1, r3]
 8011004:	2200      	movs	r2, #0
 8011006:	2302      	movs	r3, #2
 8011008:	f000 fa18 	bl	801143c <_lseek_r>
 801100c:	89a3      	ldrh	r3, [r4, #12]
 801100e:	4a05      	ldr	r2, [pc, #20]	; (8011024 <__swrite+0x34>)
 8011010:	0028      	movs	r0, r5
 8011012:	4013      	ands	r3, r2
 8011014:	81a3      	strh	r3, [r4, #12]
 8011016:	0032      	movs	r2, r6
 8011018:	230e      	movs	r3, #14
 801101a:	5ee1      	ldrsh	r1, [r4, r3]
 801101c:	003b      	movs	r3, r7
 801101e:	f000 f875 	bl	801110c <_write_r>
 8011022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011024:	ffffefff 	.word	0xffffefff

08011028 <__sseek>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	000c      	movs	r4, r1
 801102c:	250e      	movs	r5, #14
 801102e:	5f49      	ldrsh	r1, [r1, r5]
 8011030:	f000 fa04 	bl	801143c <_lseek_r>
 8011034:	89a3      	ldrh	r3, [r4, #12]
 8011036:	1c42      	adds	r2, r0, #1
 8011038:	d103      	bne.n	8011042 <__sseek+0x1a>
 801103a:	4a05      	ldr	r2, [pc, #20]	; (8011050 <__sseek+0x28>)
 801103c:	4013      	ands	r3, r2
 801103e:	81a3      	strh	r3, [r4, #12]
 8011040:	bd70      	pop	{r4, r5, r6, pc}
 8011042:	2280      	movs	r2, #128	; 0x80
 8011044:	0152      	lsls	r2, r2, #5
 8011046:	4313      	orrs	r3, r2
 8011048:	81a3      	strh	r3, [r4, #12]
 801104a:	6560      	str	r0, [r4, #84]	; 0x54
 801104c:	e7f8      	b.n	8011040 <__sseek+0x18>
 801104e:	46c0      	nop			; (mov r8, r8)
 8011050:	ffffefff 	.word	0xffffefff

08011054 <__sclose>:
 8011054:	b510      	push	{r4, lr}
 8011056:	230e      	movs	r3, #14
 8011058:	5ec9      	ldrsh	r1, [r1, r3]
 801105a:	f000 f901 	bl	8011260 <_close_r>
 801105e:	bd10      	pop	{r4, pc}

08011060 <__swbuf_r>:
 8011060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011062:	0005      	movs	r5, r0
 8011064:	000e      	movs	r6, r1
 8011066:	0014      	movs	r4, r2
 8011068:	2800      	cmp	r0, #0
 801106a:	d004      	beq.n	8011076 <__swbuf_r+0x16>
 801106c:	6983      	ldr	r3, [r0, #24]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d101      	bne.n	8011076 <__swbuf_r+0x16>
 8011072:	f7fe ff6b 	bl	800ff4c <__sinit>
 8011076:	4b22      	ldr	r3, [pc, #136]	; (8011100 <__swbuf_r+0xa0>)
 8011078:	429c      	cmp	r4, r3
 801107a:	d12e      	bne.n	80110da <__swbuf_r+0x7a>
 801107c:	686c      	ldr	r4, [r5, #4]
 801107e:	69a3      	ldr	r3, [r4, #24]
 8011080:	60a3      	str	r3, [r4, #8]
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	071b      	lsls	r3, r3, #28
 8011086:	d532      	bpl.n	80110ee <__swbuf_r+0x8e>
 8011088:	6923      	ldr	r3, [r4, #16]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d02f      	beq.n	80110ee <__swbuf_r+0x8e>
 801108e:	6823      	ldr	r3, [r4, #0]
 8011090:	6922      	ldr	r2, [r4, #16]
 8011092:	b2f7      	uxtb	r7, r6
 8011094:	1a98      	subs	r0, r3, r2
 8011096:	6963      	ldr	r3, [r4, #20]
 8011098:	b2f6      	uxtb	r6, r6
 801109a:	4283      	cmp	r3, r0
 801109c:	dc05      	bgt.n	80110aa <__swbuf_r+0x4a>
 801109e:	0021      	movs	r1, r4
 80110a0:	0028      	movs	r0, r5
 80110a2:	f000 f97b 	bl	801139c <_fflush_r>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d127      	bne.n	80110fa <__swbuf_r+0x9a>
 80110aa:	68a3      	ldr	r3, [r4, #8]
 80110ac:	3001      	adds	r0, #1
 80110ae:	3b01      	subs	r3, #1
 80110b0:	60a3      	str	r3, [r4, #8]
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	1c5a      	adds	r2, r3, #1
 80110b6:	6022      	str	r2, [r4, #0]
 80110b8:	701f      	strb	r7, [r3, #0]
 80110ba:	6963      	ldr	r3, [r4, #20]
 80110bc:	4283      	cmp	r3, r0
 80110be:	d004      	beq.n	80110ca <__swbuf_r+0x6a>
 80110c0:	89a3      	ldrh	r3, [r4, #12]
 80110c2:	07db      	lsls	r3, r3, #31
 80110c4:	d507      	bpl.n	80110d6 <__swbuf_r+0x76>
 80110c6:	2e0a      	cmp	r6, #10
 80110c8:	d105      	bne.n	80110d6 <__swbuf_r+0x76>
 80110ca:	0021      	movs	r1, r4
 80110cc:	0028      	movs	r0, r5
 80110ce:	f000 f965 	bl	801139c <_fflush_r>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	d111      	bne.n	80110fa <__swbuf_r+0x9a>
 80110d6:	0030      	movs	r0, r6
 80110d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110da:	4b0a      	ldr	r3, [pc, #40]	; (8011104 <__swbuf_r+0xa4>)
 80110dc:	429c      	cmp	r4, r3
 80110de:	d101      	bne.n	80110e4 <__swbuf_r+0x84>
 80110e0:	68ac      	ldr	r4, [r5, #8]
 80110e2:	e7cc      	b.n	801107e <__swbuf_r+0x1e>
 80110e4:	4b08      	ldr	r3, [pc, #32]	; (8011108 <__swbuf_r+0xa8>)
 80110e6:	429c      	cmp	r4, r3
 80110e8:	d1c9      	bne.n	801107e <__swbuf_r+0x1e>
 80110ea:	68ec      	ldr	r4, [r5, #12]
 80110ec:	e7c7      	b.n	801107e <__swbuf_r+0x1e>
 80110ee:	0021      	movs	r1, r4
 80110f0:	0028      	movs	r0, r5
 80110f2:	f000 f81f 	bl	8011134 <__swsetup_r>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d0c9      	beq.n	801108e <__swbuf_r+0x2e>
 80110fa:	2601      	movs	r6, #1
 80110fc:	4276      	negs	r6, r6
 80110fe:	e7ea      	b.n	80110d6 <__swbuf_r+0x76>
 8011100:	08012d84 	.word	0x08012d84
 8011104:	08012da4 	.word	0x08012da4
 8011108:	08012d64 	.word	0x08012d64

0801110c <_write_r>:
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	0004      	movs	r4, r0
 8011110:	0008      	movs	r0, r1
 8011112:	0011      	movs	r1, r2
 8011114:	001a      	movs	r2, r3
 8011116:	2300      	movs	r3, #0
 8011118:	4d05      	ldr	r5, [pc, #20]	; (8011130 <_write_r+0x24>)
 801111a:	602b      	str	r3, [r5, #0]
 801111c:	f7f3 f94d 	bl	80043ba <_write>
 8011120:	1c43      	adds	r3, r0, #1
 8011122:	d103      	bne.n	801112c <_write_r+0x20>
 8011124:	682b      	ldr	r3, [r5, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d000      	beq.n	801112c <_write_r+0x20>
 801112a:	6023      	str	r3, [r4, #0]
 801112c:	bd70      	pop	{r4, r5, r6, pc}
 801112e:	46c0      	nop			; (mov r8, r8)
 8011130:	20002770 	.word	0x20002770

08011134 <__swsetup_r>:
 8011134:	4b37      	ldr	r3, [pc, #220]	; (8011214 <__swsetup_r+0xe0>)
 8011136:	b570      	push	{r4, r5, r6, lr}
 8011138:	681d      	ldr	r5, [r3, #0]
 801113a:	0006      	movs	r6, r0
 801113c:	000c      	movs	r4, r1
 801113e:	2d00      	cmp	r5, #0
 8011140:	d005      	beq.n	801114e <__swsetup_r+0x1a>
 8011142:	69ab      	ldr	r3, [r5, #24]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d102      	bne.n	801114e <__swsetup_r+0x1a>
 8011148:	0028      	movs	r0, r5
 801114a:	f7fe feff 	bl	800ff4c <__sinit>
 801114e:	4b32      	ldr	r3, [pc, #200]	; (8011218 <__swsetup_r+0xe4>)
 8011150:	429c      	cmp	r4, r3
 8011152:	d10f      	bne.n	8011174 <__swsetup_r+0x40>
 8011154:	686c      	ldr	r4, [r5, #4]
 8011156:	230c      	movs	r3, #12
 8011158:	5ee2      	ldrsh	r2, [r4, r3]
 801115a:	b293      	uxth	r3, r2
 801115c:	0711      	lsls	r1, r2, #28
 801115e:	d42d      	bmi.n	80111bc <__swsetup_r+0x88>
 8011160:	06d9      	lsls	r1, r3, #27
 8011162:	d411      	bmi.n	8011188 <__swsetup_r+0x54>
 8011164:	2309      	movs	r3, #9
 8011166:	2001      	movs	r0, #1
 8011168:	6033      	str	r3, [r6, #0]
 801116a:	3337      	adds	r3, #55	; 0x37
 801116c:	4313      	orrs	r3, r2
 801116e:	81a3      	strh	r3, [r4, #12]
 8011170:	4240      	negs	r0, r0
 8011172:	bd70      	pop	{r4, r5, r6, pc}
 8011174:	4b29      	ldr	r3, [pc, #164]	; (801121c <__swsetup_r+0xe8>)
 8011176:	429c      	cmp	r4, r3
 8011178:	d101      	bne.n	801117e <__swsetup_r+0x4a>
 801117a:	68ac      	ldr	r4, [r5, #8]
 801117c:	e7eb      	b.n	8011156 <__swsetup_r+0x22>
 801117e:	4b28      	ldr	r3, [pc, #160]	; (8011220 <__swsetup_r+0xec>)
 8011180:	429c      	cmp	r4, r3
 8011182:	d1e8      	bne.n	8011156 <__swsetup_r+0x22>
 8011184:	68ec      	ldr	r4, [r5, #12]
 8011186:	e7e6      	b.n	8011156 <__swsetup_r+0x22>
 8011188:	075b      	lsls	r3, r3, #29
 801118a:	d513      	bpl.n	80111b4 <__swsetup_r+0x80>
 801118c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801118e:	2900      	cmp	r1, #0
 8011190:	d008      	beq.n	80111a4 <__swsetup_r+0x70>
 8011192:	0023      	movs	r3, r4
 8011194:	3344      	adds	r3, #68	; 0x44
 8011196:	4299      	cmp	r1, r3
 8011198:	d002      	beq.n	80111a0 <__swsetup_r+0x6c>
 801119a:	0030      	movs	r0, r6
 801119c:	f7ff fb5c 	bl	8010858 <_free_r>
 80111a0:	2300      	movs	r3, #0
 80111a2:	6363      	str	r3, [r4, #52]	; 0x34
 80111a4:	2224      	movs	r2, #36	; 0x24
 80111a6:	89a3      	ldrh	r3, [r4, #12]
 80111a8:	4393      	bics	r3, r2
 80111aa:	81a3      	strh	r3, [r4, #12]
 80111ac:	2300      	movs	r3, #0
 80111ae:	6063      	str	r3, [r4, #4]
 80111b0:	6923      	ldr	r3, [r4, #16]
 80111b2:	6023      	str	r3, [r4, #0]
 80111b4:	2308      	movs	r3, #8
 80111b6:	89a2      	ldrh	r2, [r4, #12]
 80111b8:	4313      	orrs	r3, r2
 80111ba:	81a3      	strh	r3, [r4, #12]
 80111bc:	6923      	ldr	r3, [r4, #16]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d10b      	bne.n	80111da <__swsetup_r+0xa6>
 80111c2:	21a0      	movs	r1, #160	; 0xa0
 80111c4:	2280      	movs	r2, #128	; 0x80
 80111c6:	89a3      	ldrh	r3, [r4, #12]
 80111c8:	0089      	lsls	r1, r1, #2
 80111ca:	0092      	lsls	r2, r2, #2
 80111cc:	400b      	ands	r3, r1
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d003      	beq.n	80111da <__swsetup_r+0xa6>
 80111d2:	0021      	movs	r1, r4
 80111d4:	0030      	movs	r0, r6
 80111d6:	f000 f96d 	bl	80114b4 <__smakebuf_r>
 80111da:	220c      	movs	r2, #12
 80111dc:	5ea3      	ldrsh	r3, [r4, r2]
 80111de:	2001      	movs	r0, #1
 80111e0:	001a      	movs	r2, r3
 80111e2:	b299      	uxth	r1, r3
 80111e4:	4002      	ands	r2, r0
 80111e6:	4203      	tst	r3, r0
 80111e8:	d00f      	beq.n	801120a <__swsetup_r+0xd6>
 80111ea:	2200      	movs	r2, #0
 80111ec:	60a2      	str	r2, [r4, #8]
 80111ee:	6962      	ldr	r2, [r4, #20]
 80111f0:	4252      	negs	r2, r2
 80111f2:	61a2      	str	r2, [r4, #24]
 80111f4:	2000      	movs	r0, #0
 80111f6:	6922      	ldr	r2, [r4, #16]
 80111f8:	4282      	cmp	r2, r0
 80111fa:	d1ba      	bne.n	8011172 <__swsetup_r+0x3e>
 80111fc:	060a      	lsls	r2, r1, #24
 80111fe:	d5b8      	bpl.n	8011172 <__swsetup_r+0x3e>
 8011200:	2240      	movs	r2, #64	; 0x40
 8011202:	4313      	orrs	r3, r2
 8011204:	81a3      	strh	r3, [r4, #12]
 8011206:	3801      	subs	r0, #1
 8011208:	e7b3      	b.n	8011172 <__swsetup_r+0x3e>
 801120a:	0788      	lsls	r0, r1, #30
 801120c:	d400      	bmi.n	8011210 <__swsetup_r+0xdc>
 801120e:	6962      	ldr	r2, [r4, #20]
 8011210:	60a2      	str	r2, [r4, #8]
 8011212:	e7ef      	b.n	80111f4 <__swsetup_r+0xc0>
 8011214:	20000024 	.word	0x20000024
 8011218:	08012d84 	.word	0x08012d84
 801121c:	08012da4 	.word	0x08012da4
 8011220:	08012d64 	.word	0x08012d64

08011224 <__assert_func>:
 8011224:	b530      	push	{r4, r5, lr}
 8011226:	0014      	movs	r4, r2
 8011228:	001a      	movs	r2, r3
 801122a:	4b09      	ldr	r3, [pc, #36]	; (8011250 <__assert_func+0x2c>)
 801122c:	0005      	movs	r5, r0
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	b085      	sub	sp, #20
 8011232:	68d8      	ldr	r0, [r3, #12]
 8011234:	4b07      	ldr	r3, [pc, #28]	; (8011254 <__assert_func+0x30>)
 8011236:	2c00      	cmp	r4, #0
 8011238:	d101      	bne.n	801123e <__assert_func+0x1a>
 801123a:	4b07      	ldr	r3, [pc, #28]	; (8011258 <__assert_func+0x34>)
 801123c:	001c      	movs	r4, r3
 801123e:	9301      	str	r3, [sp, #4]
 8011240:	9100      	str	r1, [sp, #0]
 8011242:	002b      	movs	r3, r5
 8011244:	4905      	ldr	r1, [pc, #20]	; (801125c <__assert_func+0x38>)
 8011246:	9402      	str	r4, [sp, #8]
 8011248:	f000 f8e8 	bl	801141c <fiprintf>
 801124c:	f000 f9fd 	bl	801164a <abort>
 8011250:	20000024 	.word	0x20000024
 8011254:	08012f2d 	.word	0x08012f2d
 8011258:	08012f68 	.word	0x08012f68
 801125c:	08012f3a 	.word	0x08012f3a

08011260 <_close_r>:
 8011260:	2300      	movs	r3, #0
 8011262:	b570      	push	{r4, r5, r6, lr}
 8011264:	4d06      	ldr	r5, [pc, #24]	; (8011280 <_close_r+0x20>)
 8011266:	0004      	movs	r4, r0
 8011268:	0008      	movs	r0, r1
 801126a:	602b      	str	r3, [r5, #0]
 801126c:	f7f3 f8c1 	bl	80043f2 <_close>
 8011270:	1c43      	adds	r3, r0, #1
 8011272:	d103      	bne.n	801127c <_close_r+0x1c>
 8011274:	682b      	ldr	r3, [r5, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d000      	beq.n	801127c <_close_r+0x1c>
 801127a:	6023      	str	r3, [r4, #0]
 801127c:	bd70      	pop	{r4, r5, r6, pc}
 801127e:	46c0      	nop			; (mov r8, r8)
 8011280:	20002770 	.word	0x20002770

08011284 <__sflush_r>:
 8011284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011286:	898b      	ldrh	r3, [r1, #12]
 8011288:	0005      	movs	r5, r0
 801128a:	000c      	movs	r4, r1
 801128c:	071a      	lsls	r2, r3, #28
 801128e:	d45f      	bmi.n	8011350 <__sflush_r+0xcc>
 8011290:	684a      	ldr	r2, [r1, #4]
 8011292:	2a00      	cmp	r2, #0
 8011294:	dc04      	bgt.n	80112a0 <__sflush_r+0x1c>
 8011296:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8011298:	2a00      	cmp	r2, #0
 801129a:	dc01      	bgt.n	80112a0 <__sflush_r+0x1c>
 801129c:	2000      	movs	r0, #0
 801129e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80112a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80112a2:	2f00      	cmp	r7, #0
 80112a4:	d0fa      	beq.n	801129c <__sflush_r+0x18>
 80112a6:	2200      	movs	r2, #0
 80112a8:	2180      	movs	r1, #128	; 0x80
 80112aa:	682e      	ldr	r6, [r5, #0]
 80112ac:	602a      	str	r2, [r5, #0]
 80112ae:	001a      	movs	r2, r3
 80112b0:	0149      	lsls	r1, r1, #5
 80112b2:	400a      	ands	r2, r1
 80112b4:	420b      	tst	r3, r1
 80112b6:	d034      	beq.n	8011322 <__sflush_r+0x9e>
 80112b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112ba:	89a3      	ldrh	r3, [r4, #12]
 80112bc:	075b      	lsls	r3, r3, #29
 80112be:	d506      	bpl.n	80112ce <__sflush_r+0x4a>
 80112c0:	6863      	ldr	r3, [r4, #4]
 80112c2:	1ac0      	subs	r0, r0, r3
 80112c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d001      	beq.n	80112ce <__sflush_r+0x4a>
 80112ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112cc:	1ac0      	subs	r0, r0, r3
 80112ce:	0002      	movs	r2, r0
 80112d0:	6a21      	ldr	r1, [r4, #32]
 80112d2:	2300      	movs	r3, #0
 80112d4:	0028      	movs	r0, r5
 80112d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80112d8:	47b8      	blx	r7
 80112da:	89a1      	ldrh	r1, [r4, #12]
 80112dc:	1c43      	adds	r3, r0, #1
 80112de:	d106      	bne.n	80112ee <__sflush_r+0x6a>
 80112e0:	682b      	ldr	r3, [r5, #0]
 80112e2:	2b1d      	cmp	r3, #29
 80112e4:	d831      	bhi.n	801134a <__sflush_r+0xc6>
 80112e6:	4a2c      	ldr	r2, [pc, #176]	; (8011398 <__sflush_r+0x114>)
 80112e8:	40da      	lsrs	r2, r3
 80112ea:	07d3      	lsls	r3, r2, #31
 80112ec:	d52d      	bpl.n	801134a <__sflush_r+0xc6>
 80112ee:	2300      	movs	r3, #0
 80112f0:	6063      	str	r3, [r4, #4]
 80112f2:	6923      	ldr	r3, [r4, #16]
 80112f4:	6023      	str	r3, [r4, #0]
 80112f6:	04cb      	lsls	r3, r1, #19
 80112f8:	d505      	bpl.n	8011306 <__sflush_r+0x82>
 80112fa:	1c43      	adds	r3, r0, #1
 80112fc:	d102      	bne.n	8011304 <__sflush_r+0x80>
 80112fe:	682b      	ldr	r3, [r5, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d100      	bne.n	8011306 <__sflush_r+0x82>
 8011304:	6560      	str	r0, [r4, #84]	; 0x54
 8011306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011308:	602e      	str	r6, [r5, #0]
 801130a:	2900      	cmp	r1, #0
 801130c:	d0c6      	beq.n	801129c <__sflush_r+0x18>
 801130e:	0023      	movs	r3, r4
 8011310:	3344      	adds	r3, #68	; 0x44
 8011312:	4299      	cmp	r1, r3
 8011314:	d002      	beq.n	801131c <__sflush_r+0x98>
 8011316:	0028      	movs	r0, r5
 8011318:	f7ff fa9e 	bl	8010858 <_free_r>
 801131c:	2000      	movs	r0, #0
 801131e:	6360      	str	r0, [r4, #52]	; 0x34
 8011320:	e7bd      	b.n	801129e <__sflush_r+0x1a>
 8011322:	2301      	movs	r3, #1
 8011324:	0028      	movs	r0, r5
 8011326:	6a21      	ldr	r1, [r4, #32]
 8011328:	47b8      	blx	r7
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	d1c5      	bne.n	80112ba <__sflush_r+0x36>
 801132e:	682b      	ldr	r3, [r5, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d0c2      	beq.n	80112ba <__sflush_r+0x36>
 8011334:	2b1d      	cmp	r3, #29
 8011336:	d001      	beq.n	801133c <__sflush_r+0xb8>
 8011338:	2b16      	cmp	r3, #22
 801133a:	d101      	bne.n	8011340 <__sflush_r+0xbc>
 801133c:	602e      	str	r6, [r5, #0]
 801133e:	e7ad      	b.n	801129c <__sflush_r+0x18>
 8011340:	2340      	movs	r3, #64	; 0x40
 8011342:	89a2      	ldrh	r2, [r4, #12]
 8011344:	4313      	orrs	r3, r2
 8011346:	81a3      	strh	r3, [r4, #12]
 8011348:	e7a9      	b.n	801129e <__sflush_r+0x1a>
 801134a:	2340      	movs	r3, #64	; 0x40
 801134c:	430b      	orrs	r3, r1
 801134e:	e7fa      	b.n	8011346 <__sflush_r+0xc2>
 8011350:	690f      	ldr	r7, [r1, #16]
 8011352:	2f00      	cmp	r7, #0
 8011354:	d0a2      	beq.n	801129c <__sflush_r+0x18>
 8011356:	680a      	ldr	r2, [r1, #0]
 8011358:	600f      	str	r7, [r1, #0]
 801135a:	1bd2      	subs	r2, r2, r7
 801135c:	9201      	str	r2, [sp, #4]
 801135e:	2200      	movs	r2, #0
 8011360:	079b      	lsls	r3, r3, #30
 8011362:	d100      	bne.n	8011366 <__sflush_r+0xe2>
 8011364:	694a      	ldr	r2, [r1, #20]
 8011366:	60a2      	str	r2, [r4, #8]
 8011368:	9b01      	ldr	r3, [sp, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	dc00      	bgt.n	8011370 <__sflush_r+0xec>
 801136e:	e795      	b.n	801129c <__sflush_r+0x18>
 8011370:	003a      	movs	r2, r7
 8011372:	0028      	movs	r0, r5
 8011374:	9b01      	ldr	r3, [sp, #4]
 8011376:	6a21      	ldr	r1, [r4, #32]
 8011378:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801137a:	47b0      	blx	r6
 801137c:	2800      	cmp	r0, #0
 801137e:	dc06      	bgt.n	801138e <__sflush_r+0x10a>
 8011380:	2340      	movs	r3, #64	; 0x40
 8011382:	2001      	movs	r0, #1
 8011384:	89a2      	ldrh	r2, [r4, #12]
 8011386:	4240      	negs	r0, r0
 8011388:	4313      	orrs	r3, r2
 801138a:	81a3      	strh	r3, [r4, #12]
 801138c:	e787      	b.n	801129e <__sflush_r+0x1a>
 801138e:	9b01      	ldr	r3, [sp, #4]
 8011390:	183f      	adds	r7, r7, r0
 8011392:	1a1b      	subs	r3, r3, r0
 8011394:	9301      	str	r3, [sp, #4]
 8011396:	e7e7      	b.n	8011368 <__sflush_r+0xe4>
 8011398:	20400001 	.word	0x20400001

0801139c <_fflush_r>:
 801139c:	690b      	ldr	r3, [r1, #16]
 801139e:	b570      	push	{r4, r5, r6, lr}
 80113a0:	0005      	movs	r5, r0
 80113a2:	000c      	movs	r4, r1
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d102      	bne.n	80113ae <_fflush_r+0x12>
 80113a8:	2500      	movs	r5, #0
 80113aa:	0028      	movs	r0, r5
 80113ac:	bd70      	pop	{r4, r5, r6, pc}
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d004      	beq.n	80113bc <_fflush_r+0x20>
 80113b2:	6983      	ldr	r3, [r0, #24]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d101      	bne.n	80113bc <_fflush_r+0x20>
 80113b8:	f7fe fdc8 	bl	800ff4c <__sinit>
 80113bc:	4b14      	ldr	r3, [pc, #80]	; (8011410 <_fflush_r+0x74>)
 80113be:	429c      	cmp	r4, r3
 80113c0:	d11b      	bne.n	80113fa <_fflush_r+0x5e>
 80113c2:	686c      	ldr	r4, [r5, #4]
 80113c4:	220c      	movs	r2, #12
 80113c6:	5ea3      	ldrsh	r3, [r4, r2]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d0ed      	beq.n	80113a8 <_fflush_r+0xc>
 80113cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113ce:	07d2      	lsls	r2, r2, #31
 80113d0:	d404      	bmi.n	80113dc <_fflush_r+0x40>
 80113d2:	059b      	lsls	r3, r3, #22
 80113d4:	d402      	bmi.n	80113dc <_fflush_r+0x40>
 80113d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113d8:	f7fe fe5d 	bl	8010096 <__retarget_lock_acquire_recursive>
 80113dc:	0028      	movs	r0, r5
 80113de:	0021      	movs	r1, r4
 80113e0:	f7ff ff50 	bl	8011284 <__sflush_r>
 80113e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113e6:	0005      	movs	r5, r0
 80113e8:	07db      	lsls	r3, r3, #31
 80113ea:	d4de      	bmi.n	80113aa <_fflush_r+0xe>
 80113ec:	89a3      	ldrh	r3, [r4, #12]
 80113ee:	059b      	lsls	r3, r3, #22
 80113f0:	d4db      	bmi.n	80113aa <_fflush_r+0xe>
 80113f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113f4:	f7fe fe50 	bl	8010098 <__retarget_lock_release_recursive>
 80113f8:	e7d7      	b.n	80113aa <_fflush_r+0xe>
 80113fa:	4b06      	ldr	r3, [pc, #24]	; (8011414 <_fflush_r+0x78>)
 80113fc:	429c      	cmp	r4, r3
 80113fe:	d101      	bne.n	8011404 <_fflush_r+0x68>
 8011400:	68ac      	ldr	r4, [r5, #8]
 8011402:	e7df      	b.n	80113c4 <_fflush_r+0x28>
 8011404:	4b04      	ldr	r3, [pc, #16]	; (8011418 <_fflush_r+0x7c>)
 8011406:	429c      	cmp	r4, r3
 8011408:	d1dc      	bne.n	80113c4 <_fflush_r+0x28>
 801140a:	68ec      	ldr	r4, [r5, #12]
 801140c:	e7da      	b.n	80113c4 <_fflush_r+0x28>
 801140e:	46c0      	nop			; (mov r8, r8)
 8011410:	08012d84 	.word	0x08012d84
 8011414:	08012da4 	.word	0x08012da4
 8011418:	08012d64 	.word	0x08012d64

0801141c <fiprintf>:
 801141c:	b40e      	push	{r1, r2, r3}
 801141e:	b503      	push	{r0, r1, lr}
 8011420:	0001      	movs	r1, r0
 8011422:	ab03      	add	r3, sp, #12
 8011424:	4804      	ldr	r0, [pc, #16]	; (8011438 <fiprintf+0x1c>)
 8011426:	cb04      	ldmia	r3!, {r2}
 8011428:	6800      	ldr	r0, [r0, #0]
 801142a:	9301      	str	r3, [sp, #4]
 801142c:	f7ff fc80 	bl	8010d30 <_vfiprintf_r>
 8011430:	b002      	add	sp, #8
 8011432:	bc08      	pop	{r3}
 8011434:	b003      	add	sp, #12
 8011436:	4718      	bx	r3
 8011438:	20000024 	.word	0x20000024

0801143c <_lseek_r>:
 801143c:	b570      	push	{r4, r5, r6, lr}
 801143e:	0004      	movs	r4, r0
 8011440:	0008      	movs	r0, r1
 8011442:	0011      	movs	r1, r2
 8011444:	001a      	movs	r2, r3
 8011446:	2300      	movs	r3, #0
 8011448:	4d05      	ldr	r5, [pc, #20]	; (8011460 <_lseek_r+0x24>)
 801144a:	602b      	str	r3, [r5, #0]
 801144c:	f7f2 fff2 	bl	8004434 <_lseek>
 8011450:	1c43      	adds	r3, r0, #1
 8011452:	d103      	bne.n	801145c <_lseek_r+0x20>
 8011454:	682b      	ldr	r3, [r5, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d000      	beq.n	801145c <_lseek_r+0x20>
 801145a:	6023      	str	r3, [r4, #0]
 801145c:	bd70      	pop	{r4, r5, r6, pc}
 801145e:	46c0      	nop			; (mov r8, r8)
 8011460:	20002770 	.word	0x20002770

08011464 <__swhatbuf_r>:
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	000e      	movs	r6, r1
 8011468:	001d      	movs	r5, r3
 801146a:	230e      	movs	r3, #14
 801146c:	5ec9      	ldrsh	r1, [r1, r3]
 801146e:	0014      	movs	r4, r2
 8011470:	b096      	sub	sp, #88	; 0x58
 8011472:	2900      	cmp	r1, #0
 8011474:	da08      	bge.n	8011488 <__swhatbuf_r+0x24>
 8011476:	220c      	movs	r2, #12
 8011478:	5eb3      	ldrsh	r3, [r6, r2]
 801147a:	2200      	movs	r2, #0
 801147c:	602a      	str	r2, [r5, #0]
 801147e:	061b      	lsls	r3, r3, #24
 8011480:	d411      	bmi.n	80114a6 <__swhatbuf_r+0x42>
 8011482:	2380      	movs	r3, #128	; 0x80
 8011484:	00db      	lsls	r3, r3, #3
 8011486:	e00f      	b.n	80114a8 <__swhatbuf_r+0x44>
 8011488:	466a      	mov	r2, sp
 801148a:	f000 f8e5 	bl	8011658 <_fstat_r>
 801148e:	2800      	cmp	r0, #0
 8011490:	dbf1      	blt.n	8011476 <__swhatbuf_r+0x12>
 8011492:	23f0      	movs	r3, #240	; 0xf0
 8011494:	9901      	ldr	r1, [sp, #4]
 8011496:	021b      	lsls	r3, r3, #8
 8011498:	4019      	ands	r1, r3
 801149a:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <__swhatbuf_r+0x4c>)
 801149c:	18c9      	adds	r1, r1, r3
 801149e:	424b      	negs	r3, r1
 80114a0:	4159      	adcs	r1, r3
 80114a2:	6029      	str	r1, [r5, #0]
 80114a4:	e7ed      	b.n	8011482 <__swhatbuf_r+0x1e>
 80114a6:	2340      	movs	r3, #64	; 0x40
 80114a8:	2000      	movs	r0, #0
 80114aa:	6023      	str	r3, [r4, #0]
 80114ac:	b016      	add	sp, #88	; 0x58
 80114ae:	bd70      	pop	{r4, r5, r6, pc}
 80114b0:	ffffe000 	.word	0xffffe000

080114b4 <__smakebuf_r>:
 80114b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114b6:	2602      	movs	r6, #2
 80114b8:	898b      	ldrh	r3, [r1, #12]
 80114ba:	0005      	movs	r5, r0
 80114bc:	000c      	movs	r4, r1
 80114be:	4233      	tst	r3, r6
 80114c0:	d006      	beq.n	80114d0 <__smakebuf_r+0x1c>
 80114c2:	0023      	movs	r3, r4
 80114c4:	3347      	adds	r3, #71	; 0x47
 80114c6:	6023      	str	r3, [r4, #0]
 80114c8:	6123      	str	r3, [r4, #16]
 80114ca:	2301      	movs	r3, #1
 80114cc:	6163      	str	r3, [r4, #20]
 80114ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80114d0:	466a      	mov	r2, sp
 80114d2:	ab01      	add	r3, sp, #4
 80114d4:	f7ff ffc6 	bl	8011464 <__swhatbuf_r>
 80114d8:	9900      	ldr	r1, [sp, #0]
 80114da:	0007      	movs	r7, r0
 80114dc:	0028      	movs	r0, r5
 80114de:	f7ff fa27 	bl	8010930 <_malloc_r>
 80114e2:	2800      	cmp	r0, #0
 80114e4:	d108      	bne.n	80114f8 <__smakebuf_r+0x44>
 80114e6:	220c      	movs	r2, #12
 80114e8:	5ea3      	ldrsh	r3, [r4, r2]
 80114ea:	059a      	lsls	r2, r3, #22
 80114ec:	d4ef      	bmi.n	80114ce <__smakebuf_r+0x1a>
 80114ee:	2203      	movs	r2, #3
 80114f0:	4393      	bics	r3, r2
 80114f2:	431e      	orrs	r6, r3
 80114f4:	81a6      	strh	r6, [r4, #12]
 80114f6:	e7e4      	b.n	80114c2 <__smakebuf_r+0xe>
 80114f8:	4b0f      	ldr	r3, [pc, #60]	; (8011538 <__smakebuf_r+0x84>)
 80114fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80114fc:	2380      	movs	r3, #128	; 0x80
 80114fe:	89a2      	ldrh	r2, [r4, #12]
 8011500:	6020      	str	r0, [r4, #0]
 8011502:	4313      	orrs	r3, r2
 8011504:	81a3      	strh	r3, [r4, #12]
 8011506:	9b00      	ldr	r3, [sp, #0]
 8011508:	6120      	str	r0, [r4, #16]
 801150a:	6163      	str	r3, [r4, #20]
 801150c:	9b01      	ldr	r3, [sp, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00d      	beq.n	801152e <__smakebuf_r+0x7a>
 8011512:	0028      	movs	r0, r5
 8011514:	230e      	movs	r3, #14
 8011516:	5ee1      	ldrsh	r1, [r4, r3]
 8011518:	f000 f8b0 	bl	801167c <_isatty_r>
 801151c:	2800      	cmp	r0, #0
 801151e:	d006      	beq.n	801152e <__smakebuf_r+0x7a>
 8011520:	2203      	movs	r2, #3
 8011522:	89a3      	ldrh	r3, [r4, #12]
 8011524:	4393      	bics	r3, r2
 8011526:	001a      	movs	r2, r3
 8011528:	2301      	movs	r3, #1
 801152a:	4313      	orrs	r3, r2
 801152c:	81a3      	strh	r3, [r4, #12]
 801152e:	89a0      	ldrh	r0, [r4, #12]
 8011530:	4307      	orrs	r7, r0
 8011532:	81a7      	strh	r7, [r4, #12]
 8011534:	e7cb      	b.n	80114ce <__smakebuf_r+0x1a>
 8011536:	46c0      	nop			; (mov r8, r8)
 8011538:	0800fed1 	.word	0x0800fed1

0801153c <__ascii_mbtowc>:
 801153c:	b082      	sub	sp, #8
 801153e:	2900      	cmp	r1, #0
 8011540:	d100      	bne.n	8011544 <__ascii_mbtowc+0x8>
 8011542:	a901      	add	r1, sp, #4
 8011544:	1e10      	subs	r0, r2, #0
 8011546:	d006      	beq.n	8011556 <__ascii_mbtowc+0x1a>
 8011548:	2b00      	cmp	r3, #0
 801154a:	d006      	beq.n	801155a <__ascii_mbtowc+0x1e>
 801154c:	7813      	ldrb	r3, [r2, #0]
 801154e:	600b      	str	r3, [r1, #0]
 8011550:	7810      	ldrb	r0, [r2, #0]
 8011552:	1e43      	subs	r3, r0, #1
 8011554:	4198      	sbcs	r0, r3
 8011556:	b002      	add	sp, #8
 8011558:	4770      	bx	lr
 801155a:	2002      	movs	r0, #2
 801155c:	4240      	negs	r0, r0
 801155e:	e7fa      	b.n	8011556 <__ascii_mbtowc+0x1a>

08011560 <memmove>:
 8011560:	b510      	push	{r4, lr}
 8011562:	4288      	cmp	r0, r1
 8011564:	d902      	bls.n	801156c <memmove+0xc>
 8011566:	188b      	adds	r3, r1, r2
 8011568:	4298      	cmp	r0, r3
 801156a:	d303      	bcc.n	8011574 <memmove+0x14>
 801156c:	2300      	movs	r3, #0
 801156e:	e007      	b.n	8011580 <memmove+0x20>
 8011570:	5c8b      	ldrb	r3, [r1, r2]
 8011572:	5483      	strb	r3, [r0, r2]
 8011574:	3a01      	subs	r2, #1
 8011576:	d2fb      	bcs.n	8011570 <memmove+0x10>
 8011578:	bd10      	pop	{r4, pc}
 801157a:	5ccc      	ldrb	r4, [r1, r3]
 801157c:	54c4      	strb	r4, [r0, r3]
 801157e:	3301      	adds	r3, #1
 8011580:	429a      	cmp	r2, r3
 8011582:	d1fa      	bne.n	801157a <memmove+0x1a>
 8011584:	e7f8      	b.n	8011578 <memmove+0x18>
	...

08011588 <__malloc_lock>:
 8011588:	b510      	push	{r4, lr}
 801158a:	4802      	ldr	r0, [pc, #8]	; (8011594 <__malloc_lock+0xc>)
 801158c:	f7fe fd83 	bl	8010096 <__retarget_lock_acquire_recursive>
 8011590:	bd10      	pop	{r4, pc}
 8011592:	46c0      	nop			; (mov r8, r8)
 8011594:	20002762 	.word	0x20002762

08011598 <__malloc_unlock>:
 8011598:	b510      	push	{r4, lr}
 801159a:	4802      	ldr	r0, [pc, #8]	; (80115a4 <__malloc_unlock+0xc>)
 801159c:	f7fe fd7c 	bl	8010098 <__retarget_lock_release_recursive>
 80115a0:	bd10      	pop	{r4, pc}
 80115a2:	46c0      	nop			; (mov r8, r8)
 80115a4:	20002762 	.word	0x20002762

080115a8 <_realloc_r>:
 80115a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115aa:	0007      	movs	r7, r0
 80115ac:	000e      	movs	r6, r1
 80115ae:	0014      	movs	r4, r2
 80115b0:	2900      	cmp	r1, #0
 80115b2:	d105      	bne.n	80115c0 <_realloc_r+0x18>
 80115b4:	0011      	movs	r1, r2
 80115b6:	f7ff f9bb 	bl	8010930 <_malloc_r>
 80115ba:	0005      	movs	r5, r0
 80115bc:	0028      	movs	r0, r5
 80115be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80115c0:	2a00      	cmp	r2, #0
 80115c2:	d103      	bne.n	80115cc <_realloc_r+0x24>
 80115c4:	f7ff f948 	bl	8010858 <_free_r>
 80115c8:	0025      	movs	r5, r4
 80115ca:	e7f7      	b.n	80115bc <_realloc_r+0x14>
 80115cc:	f000 f868 	bl	80116a0 <_malloc_usable_size_r>
 80115d0:	9001      	str	r0, [sp, #4]
 80115d2:	4284      	cmp	r4, r0
 80115d4:	d803      	bhi.n	80115de <_realloc_r+0x36>
 80115d6:	0035      	movs	r5, r6
 80115d8:	0843      	lsrs	r3, r0, #1
 80115da:	42a3      	cmp	r3, r4
 80115dc:	d3ee      	bcc.n	80115bc <_realloc_r+0x14>
 80115de:	0021      	movs	r1, r4
 80115e0:	0038      	movs	r0, r7
 80115e2:	f7ff f9a5 	bl	8010930 <_malloc_r>
 80115e6:	1e05      	subs	r5, r0, #0
 80115e8:	d0e8      	beq.n	80115bc <_realloc_r+0x14>
 80115ea:	9b01      	ldr	r3, [sp, #4]
 80115ec:	0022      	movs	r2, r4
 80115ee:	429c      	cmp	r4, r3
 80115f0:	d900      	bls.n	80115f4 <_realloc_r+0x4c>
 80115f2:	001a      	movs	r2, r3
 80115f4:	0031      	movs	r1, r6
 80115f6:	0028      	movs	r0, r5
 80115f8:	f7fd f8da 	bl	800e7b0 <memcpy>
 80115fc:	0031      	movs	r1, r6
 80115fe:	0038      	movs	r0, r7
 8011600:	f7ff f92a 	bl	8010858 <_free_r>
 8011604:	e7da      	b.n	80115bc <_realloc_r+0x14>
	...

08011608 <_read_r>:
 8011608:	b570      	push	{r4, r5, r6, lr}
 801160a:	0004      	movs	r4, r0
 801160c:	0008      	movs	r0, r1
 801160e:	0011      	movs	r1, r2
 8011610:	001a      	movs	r2, r3
 8011612:	2300      	movs	r3, #0
 8011614:	4d05      	ldr	r5, [pc, #20]	; (801162c <_read_r+0x24>)
 8011616:	602b      	str	r3, [r5, #0]
 8011618:	f7f2 feb2 	bl	8004380 <_read>
 801161c:	1c43      	adds	r3, r0, #1
 801161e:	d103      	bne.n	8011628 <_read_r+0x20>
 8011620:	682b      	ldr	r3, [r5, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d000      	beq.n	8011628 <_read_r+0x20>
 8011626:	6023      	str	r3, [r4, #0]
 8011628:	bd70      	pop	{r4, r5, r6, pc}
 801162a:	46c0      	nop			; (mov r8, r8)
 801162c:	20002770 	.word	0x20002770

08011630 <__ascii_wctomb>:
 8011630:	0003      	movs	r3, r0
 8011632:	1e08      	subs	r0, r1, #0
 8011634:	d005      	beq.n	8011642 <__ascii_wctomb+0x12>
 8011636:	2aff      	cmp	r2, #255	; 0xff
 8011638:	d904      	bls.n	8011644 <__ascii_wctomb+0x14>
 801163a:	228a      	movs	r2, #138	; 0x8a
 801163c:	2001      	movs	r0, #1
 801163e:	601a      	str	r2, [r3, #0]
 8011640:	4240      	negs	r0, r0
 8011642:	4770      	bx	lr
 8011644:	2001      	movs	r0, #1
 8011646:	700a      	strb	r2, [r1, #0]
 8011648:	e7fb      	b.n	8011642 <__ascii_wctomb+0x12>

0801164a <abort>:
 801164a:	2006      	movs	r0, #6
 801164c:	b510      	push	{r4, lr}
 801164e:	f000 f859 	bl	8011704 <raise>
 8011652:	2001      	movs	r0, #1
 8011654:	f7f2 fe88 	bl	8004368 <_exit>

08011658 <_fstat_r>:
 8011658:	2300      	movs	r3, #0
 801165a:	b570      	push	{r4, r5, r6, lr}
 801165c:	4d06      	ldr	r5, [pc, #24]	; (8011678 <_fstat_r+0x20>)
 801165e:	0004      	movs	r4, r0
 8011660:	0008      	movs	r0, r1
 8011662:	0011      	movs	r1, r2
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	f7f2 fece 	bl	8004406 <_fstat>
 801166a:	1c43      	adds	r3, r0, #1
 801166c:	d103      	bne.n	8011676 <_fstat_r+0x1e>
 801166e:	682b      	ldr	r3, [r5, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d000      	beq.n	8011676 <_fstat_r+0x1e>
 8011674:	6023      	str	r3, [r4, #0]
 8011676:	bd70      	pop	{r4, r5, r6, pc}
 8011678:	20002770 	.word	0x20002770

0801167c <_isatty_r>:
 801167c:	2300      	movs	r3, #0
 801167e:	b570      	push	{r4, r5, r6, lr}
 8011680:	4d06      	ldr	r5, [pc, #24]	; (801169c <_isatty_r+0x20>)
 8011682:	0004      	movs	r4, r0
 8011684:	0008      	movs	r0, r1
 8011686:	602b      	str	r3, [r5, #0]
 8011688:	f7f2 fecb 	bl	8004422 <_isatty>
 801168c:	1c43      	adds	r3, r0, #1
 801168e:	d103      	bne.n	8011698 <_isatty_r+0x1c>
 8011690:	682b      	ldr	r3, [r5, #0]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d000      	beq.n	8011698 <_isatty_r+0x1c>
 8011696:	6023      	str	r3, [r4, #0]
 8011698:	bd70      	pop	{r4, r5, r6, pc}
 801169a:	46c0      	nop			; (mov r8, r8)
 801169c:	20002770 	.word	0x20002770

080116a0 <_malloc_usable_size_r>:
 80116a0:	1f0b      	subs	r3, r1, #4
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	1f18      	subs	r0, r3, #4
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	da01      	bge.n	80116ae <_malloc_usable_size_r+0xe>
 80116aa:	580b      	ldr	r3, [r1, r0]
 80116ac:	18c0      	adds	r0, r0, r3
 80116ae:	4770      	bx	lr

080116b0 <_raise_r>:
 80116b0:	b570      	push	{r4, r5, r6, lr}
 80116b2:	0004      	movs	r4, r0
 80116b4:	000d      	movs	r5, r1
 80116b6:	291f      	cmp	r1, #31
 80116b8:	d904      	bls.n	80116c4 <_raise_r+0x14>
 80116ba:	2316      	movs	r3, #22
 80116bc:	6003      	str	r3, [r0, #0]
 80116be:	2001      	movs	r0, #1
 80116c0:	4240      	negs	r0, r0
 80116c2:	bd70      	pop	{r4, r5, r6, pc}
 80116c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d004      	beq.n	80116d4 <_raise_r+0x24>
 80116ca:	008a      	lsls	r2, r1, #2
 80116cc:	189b      	adds	r3, r3, r2
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	2a00      	cmp	r2, #0
 80116d2:	d108      	bne.n	80116e6 <_raise_r+0x36>
 80116d4:	0020      	movs	r0, r4
 80116d6:	f000 f831 	bl	801173c <_getpid_r>
 80116da:	002a      	movs	r2, r5
 80116dc:	0001      	movs	r1, r0
 80116de:	0020      	movs	r0, r4
 80116e0:	f000 f81a 	bl	8011718 <_kill_r>
 80116e4:	e7ed      	b.n	80116c2 <_raise_r+0x12>
 80116e6:	2000      	movs	r0, #0
 80116e8:	2a01      	cmp	r2, #1
 80116ea:	d0ea      	beq.n	80116c2 <_raise_r+0x12>
 80116ec:	1c51      	adds	r1, r2, #1
 80116ee:	d103      	bne.n	80116f8 <_raise_r+0x48>
 80116f0:	2316      	movs	r3, #22
 80116f2:	3001      	adds	r0, #1
 80116f4:	6023      	str	r3, [r4, #0]
 80116f6:	e7e4      	b.n	80116c2 <_raise_r+0x12>
 80116f8:	2400      	movs	r4, #0
 80116fa:	0028      	movs	r0, r5
 80116fc:	601c      	str	r4, [r3, #0]
 80116fe:	4790      	blx	r2
 8011700:	0020      	movs	r0, r4
 8011702:	e7de      	b.n	80116c2 <_raise_r+0x12>

08011704 <raise>:
 8011704:	b510      	push	{r4, lr}
 8011706:	4b03      	ldr	r3, [pc, #12]	; (8011714 <raise+0x10>)
 8011708:	0001      	movs	r1, r0
 801170a:	6818      	ldr	r0, [r3, #0]
 801170c:	f7ff ffd0 	bl	80116b0 <_raise_r>
 8011710:	bd10      	pop	{r4, pc}
 8011712:	46c0      	nop			; (mov r8, r8)
 8011714:	20000024 	.word	0x20000024

08011718 <_kill_r>:
 8011718:	2300      	movs	r3, #0
 801171a:	b570      	push	{r4, r5, r6, lr}
 801171c:	4d06      	ldr	r5, [pc, #24]	; (8011738 <_kill_r+0x20>)
 801171e:	0004      	movs	r4, r0
 8011720:	0008      	movs	r0, r1
 8011722:	0011      	movs	r1, r2
 8011724:	602b      	str	r3, [r5, #0]
 8011726:	f7f2 fe0f 	bl	8004348 <_kill>
 801172a:	1c43      	adds	r3, r0, #1
 801172c:	d103      	bne.n	8011736 <_kill_r+0x1e>
 801172e:	682b      	ldr	r3, [r5, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d000      	beq.n	8011736 <_kill_r+0x1e>
 8011734:	6023      	str	r3, [r4, #0]
 8011736:	bd70      	pop	{r4, r5, r6, pc}
 8011738:	20002770 	.word	0x20002770

0801173c <_getpid_r>:
 801173c:	b510      	push	{r4, lr}
 801173e:	f7f2 fdfd 	bl	800433c <_getpid>
 8011742:	bd10      	pop	{r4, pc}

08011744 <pow>:
 8011744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011746:	0014      	movs	r4, r2
 8011748:	001d      	movs	r5, r3
 801174a:	9000      	str	r0, [sp, #0]
 801174c:	9101      	str	r1, [sp, #4]
 801174e:	f000 f86b 	bl	8011828 <__ieee754_pow>
 8011752:	0022      	movs	r2, r4
 8011754:	0006      	movs	r6, r0
 8011756:	000f      	movs	r7, r1
 8011758:	002b      	movs	r3, r5
 801175a:	0020      	movs	r0, r4
 801175c:	0029      	movs	r1, r5
 801175e:	f7f1 faa9 	bl	8002cb4 <__aeabi_dcmpun>
 8011762:	2800      	cmp	r0, #0
 8011764:	d13f      	bne.n	80117e6 <pow+0xa2>
 8011766:	9800      	ldr	r0, [sp, #0]
 8011768:	9901      	ldr	r1, [sp, #4]
 801176a:	2200      	movs	r2, #0
 801176c:	2300      	movs	r3, #0
 801176e:	f7ee fe75 	bl	800045c <__aeabi_dcmpeq>
 8011772:	2800      	cmp	r0, #0
 8011774:	d019      	beq.n	80117aa <pow+0x66>
 8011776:	2200      	movs	r2, #0
 8011778:	2300      	movs	r3, #0
 801177a:	0020      	movs	r0, r4
 801177c:	0029      	movs	r1, r5
 801177e:	f7ee fe6d 	bl	800045c <__aeabi_dcmpeq>
 8011782:	2800      	cmp	r0, #0
 8011784:	d146      	bne.n	8011814 <pow+0xd0>
 8011786:	0020      	movs	r0, r4
 8011788:	0029      	movs	r1, r5
 801178a:	f000 febd 	bl	8012508 <finite>
 801178e:	2800      	cmp	r0, #0
 8011790:	d029      	beq.n	80117e6 <pow+0xa2>
 8011792:	2200      	movs	r2, #0
 8011794:	2300      	movs	r3, #0
 8011796:	0020      	movs	r0, r4
 8011798:	0029      	movs	r1, r5
 801179a:	f7ee fe65 	bl	8000468 <__aeabi_dcmplt>
 801179e:	2800      	cmp	r0, #0
 80117a0:	d021      	beq.n	80117e6 <pow+0xa2>
 80117a2:	f7fc ffdb 	bl	800e75c <__errno>
 80117a6:	2322      	movs	r3, #34	; 0x22
 80117a8:	e01c      	b.n	80117e4 <pow+0xa0>
 80117aa:	0030      	movs	r0, r6
 80117ac:	0039      	movs	r1, r7
 80117ae:	f000 feab 	bl	8012508 <finite>
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d11b      	bne.n	80117ee <pow+0xaa>
 80117b6:	9800      	ldr	r0, [sp, #0]
 80117b8:	9901      	ldr	r1, [sp, #4]
 80117ba:	f000 fea5 	bl	8012508 <finite>
 80117be:	2800      	cmp	r0, #0
 80117c0:	d015      	beq.n	80117ee <pow+0xaa>
 80117c2:	0020      	movs	r0, r4
 80117c4:	0029      	movs	r1, r5
 80117c6:	f000 fe9f 	bl	8012508 <finite>
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d00f      	beq.n	80117ee <pow+0xaa>
 80117ce:	0032      	movs	r2, r6
 80117d0:	003b      	movs	r3, r7
 80117d2:	0030      	movs	r0, r6
 80117d4:	0039      	movs	r1, r7
 80117d6:	f7f1 fa6d 	bl	8002cb4 <__aeabi_dcmpun>
 80117da:	2800      	cmp	r0, #0
 80117dc:	d0e1      	beq.n	80117a2 <pow+0x5e>
 80117de:	f7fc ffbd 	bl	800e75c <__errno>
 80117e2:	2321      	movs	r3, #33	; 0x21
 80117e4:	6003      	str	r3, [r0, #0]
 80117e6:	0030      	movs	r0, r6
 80117e8:	0039      	movs	r1, r7
 80117ea:	b003      	add	sp, #12
 80117ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ee:	2200      	movs	r2, #0
 80117f0:	2300      	movs	r3, #0
 80117f2:	0030      	movs	r0, r6
 80117f4:	0039      	movs	r1, r7
 80117f6:	f7ee fe31 	bl	800045c <__aeabi_dcmpeq>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d0f3      	beq.n	80117e6 <pow+0xa2>
 80117fe:	9800      	ldr	r0, [sp, #0]
 8011800:	9901      	ldr	r1, [sp, #4]
 8011802:	f000 fe81 	bl	8012508 <finite>
 8011806:	2800      	cmp	r0, #0
 8011808:	d0ed      	beq.n	80117e6 <pow+0xa2>
 801180a:	0020      	movs	r0, r4
 801180c:	0029      	movs	r1, r5
 801180e:	f000 fe7b 	bl	8012508 <finite>
 8011812:	e7c4      	b.n	801179e <pow+0x5a>
 8011814:	2600      	movs	r6, #0
 8011816:	4f01      	ldr	r7, [pc, #4]	; (801181c <pow+0xd8>)
 8011818:	e7e5      	b.n	80117e6 <pow+0xa2>
 801181a:	46c0      	nop			; (mov r8, r8)
 801181c:	3ff00000 	.word	0x3ff00000

08011820 <atan2f>:
 8011820:	b510      	push	{r4, lr}
 8011822:	f000 fdc1 	bl	80123a8 <__ieee754_atan2f>
 8011826:	bd10      	pop	{r4, pc}

08011828 <__ieee754_pow>:
 8011828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801182a:	b095      	sub	sp, #84	; 0x54
 801182c:	9202      	str	r2, [sp, #8]
 801182e:	9303      	str	r3, [sp, #12]
 8011830:	9b03      	ldr	r3, [sp, #12]
 8011832:	9a03      	ldr	r2, [sp, #12]
 8011834:	9304      	str	r3, [sp, #16]
 8011836:	9b02      	ldr	r3, [sp, #8]
 8011838:	0056      	lsls	r6, r2, #1
 801183a:	001a      	movs	r2, r3
 801183c:	0876      	lsrs	r6, r6, #1
 801183e:	0007      	movs	r7, r0
 8011840:	000d      	movs	r5, r1
 8011842:	4332      	orrs	r2, r6
 8011844:	d119      	bne.n	801187a <__ieee754_pow+0x52>
 8011846:	2180      	movs	r1, #128	; 0x80
 8011848:	0309      	lsls	r1, r1, #12
 801184a:	4069      	eors	r1, r5
 801184c:	0002      	movs	r2, r0
 801184e:	000b      	movs	r3, r1
 8011850:	1892      	adds	r2, r2, r2
 8011852:	415b      	adcs	r3, r3
 8011854:	4989      	ldr	r1, [pc, #548]	; (8011a7c <__ieee754_pow+0x254>)
 8011856:	428b      	cmp	r3, r1
 8011858:	d806      	bhi.n	8011868 <__ieee754_pow+0x40>
 801185a:	d001      	beq.n	8011860 <__ieee754_pow+0x38>
 801185c:	f000 fcb6 	bl	80121cc <__ieee754_pow+0x9a4>
 8011860:	2a00      	cmp	r2, #0
 8011862:	d101      	bne.n	8011868 <__ieee754_pow+0x40>
 8011864:	f000 fcb2 	bl	80121cc <__ieee754_pow+0x9a4>
 8011868:	9a02      	ldr	r2, [sp, #8]
 801186a:	9b03      	ldr	r3, [sp, #12]
 801186c:	0038      	movs	r0, r7
 801186e:	0029      	movs	r1, r5
 8011870:	f7ef fce4 	bl	800123c <__aeabi_dadd>
 8011874:	9000      	str	r0, [sp, #0]
 8011876:	9101      	str	r1, [sp, #4]
 8011878:	e0ad      	b.n	80119d6 <__ieee754_pow+0x1ae>
 801187a:	4a81      	ldr	r2, [pc, #516]	; (8011a80 <__ieee754_pow+0x258>)
 801187c:	004c      	lsls	r4, r1, #1
 801187e:	9108      	str	r1, [sp, #32]
 8011880:	9000      	str	r0, [sp, #0]
 8011882:	0864      	lsrs	r4, r4, #1
 8011884:	4294      	cmp	r4, r2
 8011886:	dc08      	bgt.n	801189a <__ieee754_pow+0x72>
 8011888:	d101      	bne.n	801188e <__ieee754_pow+0x66>
 801188a:	2800      	cmp	r0, #0
 801188c:	d1ec      	bne.n	8011868 <__ieee754_pow+0x40>
 801188e:	4a7c      	ldr	r2, [pc, #496]	; (8011a80 <__ieee754_pow+0x258>)
 8011890:	4296      	cmp	r6, r2
 8011892:	dc02      	bgt.n	801189a <__ieee754_pow+0x72>
 8011894:	d10c      	bne.n	80118b0 <__ieee754_pow+0x88>
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00a      	beq.n	80118b0 <__ieee754_pow+0x88>
 801189a:	4b7a      	ldr	r3, [pc, #488]	; (8011a84 <__ieee754_pow+0x25c>)
 801189c:	18eb      	adds	r3, r5, r3
 801189e:	433b      	orrs	r3, r7
 80118a0:	d1e2      	bne.n	8011868 <__ieee754_pow+0x40>
 80118a2:	2180      	movs	r1, #128	; 0x80
 80118a4:	9803      	ldr	r0, [sp, #12]
 80118a6:	0309      	lsls	r1, r1, #12
 80118a8:	4048      	eors	r0, r1
 80118aa:	0003      	movs	r3, r0
 80118ac:	9a02      	ldr	r2, [sp, #8]
 80118ae:	e7cf      	b.n	8011850 <__ieee754_pow+0x28>
 80118b0:	2200      	movs	r2, #0
 80118b2:	9206      	str	r2, [sp, #24]
 80118b4:	2d00      	cmp	r5, #0
 80118b6:	da69      	bge.n	801198c <__ieee754_pow+0x164>
 80118b8:	4a73      	ldr	r2, [pc, #460]	; (8011a88 <__ieee754_pow+0x260>)
 80118ba:	4296      	cmp	r6, r2
 80118bc:	dc64      	bgt.n	8011988 <__ieee754_pow+0x160>
 80118be:	4a73      	ldr	r2, [pc, #460]	; (8011a8c <__ieee754_pow+0x264>)
 80118c0:	4296      	cmp	r6, r2
 80118c2:	dd11      	ble.n	80118e8 <__ieee754_pow+0xc0>
 80118c4:	4972      	ldr	r1, [pc, #456]	; (8011a90 <__ieee754_pow+0x268>)
 80118c6:	1532      	asrs	r2, r6, #20
 80118c8:	1852      	adds	r2, r2, r1
 80118ca:	2a14      	cmp	r2, #20
 80118cc:	dd3c      	ble.n	8011948 <__ieee754_pow+0x120>
 80118ce:	2134      	movs	r1, #52	; 0x34
 80118d0:	1a8a      	subs	r2, r1, r2
 80118d2:	9902      	ldr	r1, [sp, #8]
 80118d4:	40d1      	lsrs	r1, r2
 80118d6:	0008      	movs	r0, r1
 80118d8:	4090      	lsls	r0, r2
 80118da:	4298      	cmp	r0, r3
 80118dc:	d104      	bne.n	80118e8 <__ieee754_pow+0xc0>
 80118de:	2201      	movs	r2, #1
 80118e0:	4011      	ands	r1, r2
 80118e2:	1892      	adds	r2, r2, r2
 80118e4:	1a52      	subs	r2, r2, r1
 80118e6:	9206      	str	r2, [sp, #24]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d03c      	beq.n	8011966 <__ieee754_pow+0x13e>
 80118ec:	0038      	movs	r0, r7
 80118ee:	0029      	movs	r1, r5
 80118f0:	f000 fe07 	bl	8012502 <fabs>
 80118f4:	9000      	str	r0, [sp, #0]
 80118f6:	9101      	str	r1, [sp, #4]
 80118f8:	2f00      	cmp	r7, #0
 80118fa:	d000      	beq.n	80118fe <__ieee754_pow+0xd6>
 80118fc:	e094      	b.n	8011a28 <__ieee754_pow+0x200>
 80118fe:	2c00      	cmp	r4, #0
 8011900:	d005      	beq.n	801190e <__ieee754_pow+0xe6>
 8011902:	4a64      	ldr	r2, [pc, #400]	; (8011a94 <__ieee754_pow+0x26c>)
 8011904:	00ab      	lsls	r3, r5, #2
 8011906:	089b      	lsrs	r3, r3, #2
 8011908:	4293      	cmp	r3, r2
 801190a:	d000      	beq.n	801190e <__ieee754_pow+0xe6>
 801190c:	e08c      	b.n	8011a28 <__ieee754_pow+0x200>
 801190e:	9b04      	ldr	r3, [sp, #16]
 8011910:	2b00      	cmp	r3, #0
 8011912:	da07      	bge.n	8011924 <__ieee754_pow+0xfc>
 8011914:	9a00      	ldr	r2, [sp, #0]
 8011916:	9b01      	ldr	r3, [sp, #4]
 8011918:	2000      	movs	r0, #0
 801191a:	495e      	ldr	r1, [pc, #376]	; (8011a94 <__ieee754_pow+0x26c>)
 801191c:	f7ef ffca 	bl	80018b4 <__aeabi_ddiv>
 8011920:	9000      	str	r0, [sp, #0]
 8011922:	9101      	str	r1, [sp, #4]
 8011924:	9b08      	ldr	r3, [sp, #32]
 8011926:	2b00      	cmp	r3, #0
 8011928:	da55      	bge.n	80119d6 <__ieee754_pow+0x1ae>
 801192a:	4b56      	ldr	r3, [pc, #344]	; (8011a84 <__ieee754_pow+0x25c>)
 801192c:	18e4      	adds	r4, r4, r3
 801192e:	9b06      	ldr	r3, [sp, #24]
 8011930:	431c      	orrs	r4, r3
 8011932:	d000      	beq.n	8011936 <__ieee754_pow+0x10e>
 8011934:	e06c      	b.n	8011a10 <__ieee754_pow+0x1e8>
 8011936:	9a00      	ldr	r2, [sp, #0]
 8011938:	9b01      	ldr	r3, [sp, #4]
 801193a:	0010      	movs	r0, r2
 801193c:	0019      	movs	r1, r3
 801193e:	f7f0 fe27 	bl	8002590 <__aeabi_dsub>
 8011942:	0002      	movs	r2, r0
 8011944:	000b      	movs	r3, r1
 8011946:	e01c      	b.n	8011982 <__ieee754_pow+0x15a>
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1cf      	bne.n	80118ec <__ieee754_pow+0xc4>
 801194c:	3314      	adds	r3, #20
 801194e:	1a9a      	subs	r2, r3, r2
 8011950:	0033      	movs	r3, r6
 8011952:	4113      	asrs	r3, r2
 8011954:	0019      	movs	r1, r3
 8011956:	4091      	lsls	r1, r2
 8011958:	42b1      	cmp	r1, r6
 801195a:	d104      	bne.n	8011966 <__ieee754_pow+0x13e>
 801195c:	2201      	movs	r2, #1
 801195e:	4013      	ands	r3, r2
 8011960:	1892      	adds	r2, r2, r2
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	9306      	str	r3, [sp, #24]
 8011966:	4b4b      	ldr	r3, [pc, #300]	; (8011a94 <__ieee754_pow+0x26c>)
 8011968:	429e      	cmp	r6, r3
 801196a:	d138      	bne.n	80119de <__ieee754_pow+0x1b6>
 801196c:	0038      	movs	r0, r7
 801196e:	0029      	movs	r1, r5
 8011970:	9b04      	ldr	r3, [sp, #16]
 8011972:	9000      	str	r0, [sp, #0]
 8011974:	9101      	str	r1, [sp, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	da2d      	bge.n	80119d6 <__ieee754_pow+0x1ae>
 801197a:	003a      	movs	r2, r7
 801197c:	002b      	movs	r3, r5
 801197e:	2000      	movs	r0, #0
 8011980:	4944      	ldr	r1, [pc, #272]	; (8011a94 <__ieee754_pow+0x26c>)
 8011982:	f7ef ff97 	bl	80018b4 <__aeabi_ddiv>
 8011986:	e775      	b.n	8011874 <__ieee754_pow+0x4c>
 8011988:	2202      	movs	r2, #2
 801198a:	9206      	str	r2, [sp, #24]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1ad      	bne.n	80118ec <__ieee754_pow+0xc4>
 8011990:	4b3b      	ldr	r3, [pc, #236]	; (8011a80 <__ieee754_pow+0x258>)
 8011992:	429e      	cmp	r6, r3
 8011994:	d1e7      	bne.n	8011966 <__ieee754_pow+0x13e>
 8011996:	4b3b      	ldr	r3, [pc, #236]	; (8011a84 <__ieee754_pow+0x25c>)
 8011998:	18e3      	adds	r3, r4, r3
 801199a:	431f      	orrs	r7, r3
 801199c:	d101      	bne.n	80119a2 <__ieee754_pow+0x17a>
 801199e:	f000 fc15 	bl	80121cc <__ieee754_pow+0x9a4>
 80119a2:	4b3a      	ldr	r3, [pc, #232]	; (8011a8c <__ieee754_pow+0x264>)
 80119a4:	429c      	cmp	r4, r3
 80119a6:	dd09      	ble.n	80119bc <__ieee754_pow+0x194>
 80119a8:	9b04      	ldr	r3, [sp, #16]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	da01      	bge.n	80119b2 <__ieee754_pow+0x18a>
 80119ae:	f000 fc11 	bl	80121d4 <__ieee754_pow+0x9ac>
 80119b2:	9b02      	ldr	r3, [sp, #8]
 80119b4:	9c03      	ldr	r4, [sp, #12]
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	9401      	str	r4, [sp, #4]
 80119ba:	e00c      	b.n	80119d6 <__ieee754_pow+0x1ae>
 80119bc:	9b04      	ldr	r3, [sp, #16]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	db01      	blt.n	80119c6 <__ieee754_pow+0x19e>
 80119c2:	f000 fc07 	bl	80121d4 <__ieee754_pow+0x9ac>
 80119c6:	2280      	movs	r2, #128	; 0x80
 80119c8:	0612      	lsls	r2, r2, #24
 80119ca:	4694      	mov	ip, r2
 80119cc:	9b02      	ldr	r3, [sp, #8]
 80119ce:	9300      	str	r3, [sp, #0]
 80119d0:	9b03      	ldr	r3, [sp, #12]
 80119d2:	4463      	add	r3, ip
 80119d4:	9301      	str	r3, [sp, #4]
 80119d6:	9800      	ldr	r0, [sp, #0]
 80119d8:	9901      	ldr	r1, [sp, #4]
 80119da:	b015      	add	sp, #84	; 0x54
 80119dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119de:	2380      	movs	r3, #128	; 0x80
 80119e0:	9a04      	ldr	r2, [sp, #16]
 80119e2:	05db      	lsls	r3, r3, #23
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d106      	bne.n	80119f6 <__ieee754_pow+0x1ce>
 80119e8:	003a      	movs	r2, r7
 80119ea:	002b      	movs	r3, r5
 80119ec:	0038      	movs	r0, r7
 80119ee:	0029      	movs	r1, r5
 80119f0:	f7f0 fb62 	bl	80020b8 <__aeabi_dmul>
 80119f4:	e73e      	b.n	8011874 <__ieee754_pow+0x4c>
 80119f6:	4b28      	ldr	r3, [pc, #160]	; (8011a98 <__ieee754_pow+0x270>)
 80119f8:	9a04      	ldr	r2, [sp, #16]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d000      	beq.n	8011a00 <__ieee754_pow+0x1d8>
 80119fe:	e775      	b.n	80118ec <__ieee754_pow+0xc4>
 8011a00:	2d00      	cmp	r5, #0
 8011a02:	da00      	bge.n	8011a06 <__ieee754_pow+0x1de>
 8011a04:	e772      	b.n	80118ec <__ieee754_pow+0xc4>
 8011a06:	0038      	movs	r0, r7
 8011a08:	0029      	movs	r1, r5
 8011a0a:	f000 fc17 	bl	801223c <__ieee754_sqrt>
 8011a0e:	e731      	b.n	8011874 <__ieee754_pow+0x4c>
 8011a10:	9b06      	ldr	r3, [sp, #24]
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d1df      	bne.n	80119d6 <__ieee754_pow+0x1ae>
 8011a16:	9800      	ldr	r0, [sp, #0]
 8011a18:	2180      	movs	r1, #128	; 0x80
 8011a1a:	0002      	movs	r2, r0
 8011a1c:	9801      	ldr	r0, [sp, #4]
 8011a1e:	0609      	lsls	r1, r1, #24
 8011a20:	1843      	adds	r3, r0, r1
 8011a22:	9200      	str	r2, [sp, #0]
 8011a24:	9301      	str	r3, [sp, #4]
 8011a26:	e7d6      	b.n	80119d6 <__ieee754_pow+0x1ae>
 8011a28:	0feb      	lsrs	r3, r5, #31
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8011a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a30:	9b06      	ldr	r3, [sp, #24]
 8011a32:	4313      	orrs	r3, r2
 8011a34:	d104      	bne.n	8011a40 <__ieee754_pow+0x218>
 8011a36:	003a      	movs	r2, r7
 8011a38:	002b      	movs	r3, r5
 8011a3a:	0038      	movs	r0, r7
 8011a3c:	0029      	movs	r1, r5
 8011a3e:	e77e      	b.n	801193e <__ieee754_pow+0x116>
 8011a40:	4b16      	ldr	r3, [pc, #88]	; (8011a9c <__ieee754_pow+0x274>)
 8011a42:	429e      	cmp	r6, r3
 8011a44:	dc00      	bgt.n	8011a48 <__ieee754_pow+0x220>
 8011a46:	e0ef      	b.n	8011c28 <__ieee754_pow+0x400>
 8011a48:	4b15      	ldr	r3, [pc, #84]	; (8011aa0 <__ieee754_pow+0x278>)
 8011a4a:	429e      	cmp	r6, r3
 8011a4c:	dd09      	ble.n	8011a62 <__ieee754_pow+0x23a>
 8011a4e:	4b0f      	ldr	r3, [pc, #60]	; (8011a8c <__ieee754_pow+0x264>)
 8011a50:	429c      	cmp	r4, r3
 8011a52:	dc0c      	bgt.n	8011a6e <__ieee754_pow+0x246>
 8011a54:	9b04      	ldr	r3, [sp, #16]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	da0c      	bge.n	8011a74 <__ieee754_pow+0x24c>
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	f000 fd4a 	bl	80124f4 <__math_oflow>
 8011a60:	e708      	b.n	8011874 <__ieee754_pow+0x4c>
 8011a62:	4b10      	ldr	r3, [pc, #64]	; (8011aa4 <__ieee754_pow+0x27c>)
 8011a64:	429c      	cmp	r4, r3
 8011a66:	ddf5      	ble.n	8011a54 <__ieee754_pow+0x22c>
 8011a68:	4b0a      	ldr	r3, [pc, #40]	; (8011a94 <__ieee754_pow+0x26c>)
 8011a6a:	429c      	cmp	r4, r3
 8011a6c:	dd1c      	ble.n	8011aa8 <__ieee754_pow+0x280>
 8011a6e:	9b04      	ldr	r3, [sp, #16]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	dcf2      	bgt.n	8011a5a <__ieee754_pow+0x232>
 8011a74:	2000      	movs	r0, #0
 8011a76:	f000 fd36 	bl	80124e6 <__math_uflow>
 8011a7a:	e6fb      	b.n	8011874 <__ieee754_pow+0x4c>
 8011a7c:	fff00000 	.word	0xfff00000
 8011a80:	7ff00000 	.word	0x7ff00000
 8011a84:	c0100000 	.word	0xc0100000
 8011a88:	433fffff 	.word	0x433fffff
 8011a8c:	3fefffff 	.word	0x3fefffff
 8011a90:	fffffc01 	.word	0xfffffc01
 8011a94:	3ff00000 	.word	0x3ff00000
 8011a98:	3fe00000 	.word	0x3fe00000
 8011a9c:	41e00000 	.word	0x41e00000
 8011aa0:	43f00000 	.word	0x43f00000
 8011aa4:	3feffffe 	.word	0x3feffffe
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	9800      	ldr	r0, [sp, #0]
 8011aac:	9901      	ldr	r1, [sp, #4]
 8011aae:	4b52      	ldr	r3, [pc, #328]	; (8011bf8 <__ieee754_pow+0x3d0>)
 8011ab0:	f7f0 fd6e 	bl	8002590 <__aeabi_dsub>
 8011ab4:	22c0      	movs	r2, #192	; 0xc0
 8011ab6:	4b51      	ldr	r3, [pc, #324]	; (8011bfc <__ieee754_pow+0x3d4>)
 8011ab8:	05d2      	lsls	r2, r2, #23
 8011aba:	0004      	movs	r4, r0
 8011abc:	000d      	movs	r5, r1
 8011abe:	f7f0 fafb 	bl	80020b8 <__aeabi_dmul>
 8011ac2:	4a4f      	ldr	r2, [pc, #316]	; (8011c00 <__ieee754_pow+0x3d8>)
 8011ac4:	9000      	str	r0, [sp, #0]
 8011ac6:	9101      	str	r1, [sp, #4]
 8011ac8:	4b4e      	ldr	r3, [pc, #312]	; (8011c04 <__ieee754_pow+0x3dc>)
 8011aca:	0020      	movs	r0, r4
 8011acc:	0029      	movs	r1, r5
 8011ace:	f7f0 faf3 	bl	80020b8 <__aeabi_dmul>
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	9004      	str	r0, [sp, #16]
 8011ad6:	9105      	str	r1, [sp, #20]
 8011ad8:	4b4b      	ldr	r3, [pc, #300]	; (8011c08 <__ieee754_pow+0x3e0>)
 8011ada:	0020      	movs	r0, r4
 8011adc:	0029      	movs	r1, r5
 8011ade:	f7f0 faeb 	bl	80020b8 <__aeabi_dmul>
 8011ae2:	0002      	movs	r2, r0
 8011ae4:	000b      	movs	r3, r1
 8011ae6:	4849      	ldr	r0, [pc, #292]	; (8011c0c <__ieee754_pow+0x3e4>)
 8011ae8:	4949      	ldr	r1, [pc, #292]	; (8011c10 <__ieee754_pow+0x3e8>)
 8011aea:	f7f0 fd51 	bl	8002590 <__aeabi_dsub>
 8011aee:	0022      	movs	r2, r4
 8011af0:	002b      	movs	r3, r5
 8011af2:	f7f0 fae1 	bl	80020b8 <__aeabi_dmul>
 8011af6:	0002      	movs	r2, r0
 8011af8:	000b      	movs	r3, r1
 8011afa:	2000      	movs	r0, #0
 8011afc:	4945      	ldr	r1, [pc, #276]	; (8011c14 <__ieee754_pow+0x3ec>)
 8011afe:	f7f0 fd47 	bl	8002590 <__aeabi_dsub>
 8011b02:	0022      	movs	r2, r4
 8011b04:	0006      	movs	r6, r0
 8011b06:	000f      	movs	r7, r1
 8011b08:	002b      	movs	r3, r5
 8011b0a:	0020      	movs	r0, r4
 8011b0c:	0029      	movs	r1, r5
 8011b0e:	f7f0 fad3 	bl	80020b8 <__aeabi_dmul>
 8011b12:	0002      	movs	r2, r0
 8011b14:	000b      	movs	r3, r1
 8011b16:	0030      	movs	r0, r6
 8011b18:	0039      	movs	r1, r7
 8011b1a:	f7f0 facd 	bl	80020b8 <__aeabi_dmul>
 8011b1e:	4a3e      	ldr	r2, [pc, #248]	; (8011c18 <__ieee754_pow+0x3f0>)
 8011b20:	4b36      	ldr	r3, [pc, #216]	; (8011bfc <__ieee754_pow+0x3d4>)
 8011b22:	f7f0 fac9 	bl	80020b8 <__aeabi_dmul>
 8011b26:	0002      	movs	r2, r0
 8011b28:	000b      	movs	r3, r1
 8011b2a:	9804      	ldr	r0, [sp, #16]
 8011b2c:	9905      	ldr	r1, [sp, #20]
 8011b2e:	f7f0 fd2f 	bl	8002590 <__aeabi_dsub>
 8011b32:	0002      	movs	r2, r0
 8011b34:	000b      	movs	r3, r1
 8011b36:	0004      	movs	r4, r0
 8011b38:	000d      	movs	r5, r1
 8011b3a:	9800      	ldr	r0, [sp, #0]
 8011b3c:	9901      	ldr	r1, [sp, #4]
 8011b3e:	f7ef fb7d 	bl	800123c <__aeabi_dadd>
 8011b42:	9a00      	ldr	r2, [sp, #0]
 8011b44:	9b01      	ldr	r3, [sp, #4]
 8011b46:	2000      	movs	r0, #0
 8011b48:	000f      	movs	r7, r1
 8011b4a:	0006      	movs	r6, r0
 8011b4c:	f7f0 fd20 	bl	8002590 <__aeabi_dsub>
 8011b50:	0002      	movs	r2, r0
 8011b52:	000b      	movs	r3, r1
 8011b54:	0020      	movs	r0, r4
 8011b56:	0029      	movs	r1, r5
 8011b58:	f7f0 fd1a 	bl	8002590 <__aeabi_dsub>
 8011b5c:	9b06      	ldr	r3, [sp, #24]
 8011b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b60:	3b01      	subs	r3, #1
 8011b62:	9004      	str	r0, [sp, #16]
 8011b64:	9105      	str	r1, [sp, #20]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	d000      	beq.n	8011b6c <__ieee754_pow+0x344>
 8011b6a:	e1db      	b.n	8011f24 <__ieee754_pow+0x6fc>
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	4c2b      	ldr	r4, [pc, #172]	; (8011c1c <__ieee754_pow+0x3f4>)
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	9401      	str	r4, [sp, #4]
 8011b74:	9c02      	ldr	r4, [sp, #8]
 8011b76:	9d03      	ldr	r5, [sp, #12]
 8011b78:	9802      	ldr	r0, [sp, #8]
 8011b7a:	9903      	ldr	r1, [sp, #12]
 8011b7c:	2400      	movs	r4, #0
 8011b7e:	002b      	movs	r3, r5
 8011b80:	0022      	movs	r2, r4
 8011b82:	f7f0 fd05 	bl	8002590 <__aeabi_dsub>
 8011b86:	0032      	movs	r2, r6
 8011b88:	003b      	movs	r3, r7
 8011b8a:	f7f0 fa95 	bl	80020b8 <__aeabi_dmul>
 8011b8e:	9a02      	ldr	r2, [sp, #8]
 8011b90:	9b03      	ldr	r3, [sp, #12]
 8011b92:	9006      	str	r0, [sp, #24]
 8011b94:	9107      	str	r1, [sp, #28]
 8011b96:	9804      	ldr	r0, [sp, #16]
 8011b98:	9905      	ldr	r1, [sp, #20]
 8011b9a:	f7f0 fa8d 	bl	80020b8 <__aeabi_dmul>
 8011b9e:	0002      	movs	r2, r0
 8011ba0:	000b      	movs	r3, r1
 8011ba2:	9806      	ldr	r0, [sp, #24]
 8011ba4:	9907      	ldr	r1, [sp, #28]
 8011ba6:	f7ef fb49 	bl	800123c <__aeabi_dadd>
 8011baa:	0022      	movs	r2, r4
 8011bac:	002b      	movs	r3, r5
 8011bae:	9004      	str	r0, [sp, #16]
 8011bb0:	9105      	str	r1, [sp, #20]
 8011bb2:	0030      	movs	r0, r6
 8011bb4:	0039      	movs	r1, r7
 8011bb6:	f7f0 fa7f 	bl	80020b8 <__aeabi_dmul>
 8011bba:	0006      	movs	r6, r0
 8011bbc:	000f      	movs	r7, r1
 8011bbe:	000b      	movs	r3, r1
 8011bc0:	0002      	movs	r2, r0
 8011bc2:	9804      	ldr	r0, [sp, #16]
 8011bc4:	9905      	ldr	r1, [sp, #20]
 8011bc6:	9606      	str	r6, [sp, #24]
 8011bc8:	9707      	str	r7, [sp, #28]
 8011bca:	f7ef fb37 	bl	800123c <__aeabi_dadd>
 8011bce:	4b14      	ldr	r3, [pc, #80]	; (8011c20 <__ieee754_pow+0x3f8>)
 8011bd0:	0005      	movs	r5, r0
 8011bd2:	000c      	movs	r4, r1
 8011bd4:	9108      	str	r1, [sp, #32]
 8011bd6:	4299      	cmp	r1, r3
 8011bd8:	dc00      	bgt.n	8011bdc <__ieee754_pow+0x3b4>
 8011bda:	e2d6      	b.n	801218a <__ieee754_pow+0x962>
 8011bdc:	4b11      	ldr	r3, [pc, #68]	; (8011c24 <__ieee754_pow+0x3fc>)
 8011bde:	18cb      	adds	r3, r1, r3
 8011be0:	4303      	orrs	r3, r0
 8011be2:	d100      	bne.n	8011be6 <__ieee754_pow+0x3be>
 8011be4:	e1d8      	b.n	8011f98 <__ieee754_pow+0x770>
 8011be6:	9800      	ldr	r0, [sp, #0]
 8011be8:	9901      	ldr	r1, [sp, #4]
 8011bea:	2300      	movs	r3, #0
 8011bec:	2200      	movs	r2, #0
 8011bee:	f7ee fc3b 	bl	8000468 <__aeabi_dcmplt>
 8011bf2:	1e43      	subs	r3, r0, #1
 8011bf4:	4198      	sbcs	r0, r3
 8011bf6:	e731      	b.n	8011a5c <__ieee754_pow+0x234>
 8011bf8:	3ff00000 	.word	0x3ff00000
 8011bfc:	3ff71547 	.word	0x3ff71547
 8011c00:	f85ddf44 	.word	0xf85ddf44
 8011c04:	3e54ae0b 	.word	0x3e54ae0b
 8011c08:	3fd00000 	.word	0x3fd00000
 8011c0c:	55555555 	.word	0x55555555
 8011c10:	3fd55555 	.word	0x3fd55555
 8011c14:	3fe00000 	.word	0x3fe00000
 8011c18:	652b82fe 	.word	0x652b82fe
 8011c1c:	bff00000 	.word	0xbff00000
 8011c20:	408fffff 	.word	0x408fffff
 8011c24:	bf700000 	.word	0xbf700000
 8011c28:	4bc0      	ldr	r3, [pc, #768]	; (8011f2c <__ieee754_pow+0x704>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	422b      	tst	r3, r5
 8011c2e:	d10a      	bne.n	8011c46 <__ieee754_pow+0x41e>
 8011c30:	9800      	ldr	r0, [sp, #0]
 8011c32:	9901      	ldr	r1, [sp, #4]
 8011c34:	2200      	movs	r2, #0
 8011c36:	4bbe      	ldr	r3, [pc, #760]	; (8011f30 <__ieee754_pow+0x708>)
 8011c38:	f7f0 fa3e 	bl	80020b8 <__aeabi_dmul>
 8011c3c:	2235      	movs	r2, #53	; 0x35
 8011c3e:	9000      	str	r0, [sp, #0]
 8011c40:	9101      	str	r1, [sp, #4]
 8011c42:	9c01      	ldr	r4, [sp, #4]
 8011c44:	4252      	negs	r2, r2
 8011c46:	49bb      	ldr	r1, [pc, #748]	; (8011f34 <__ieee754_pow+0x70c>)
 8011c48:	1523      	asrs	r3, r4, #20
 8011c4a:	185b      	adds	r3, r3, r1
 8011c4c:	189b      	adds	r3, r3, r2
 8011c4e:	0324      	lsls	r4, r4, #12
 8011c50:	4db9      	ldr	r5, [pc, #740]	; (8011f38 <__ieee754_pow+0x710>)
 8011c52:	930d      	str	r3, [sp, #52]	; 0x34
 8011c54:	4bb9      	ldr	r3, [pc, #740]	; (8011f3c <__ieee754_pow+0x714>)
 8011c56:	0b22      	lsrs	r2, r4, #12
 8011c58:	4315      	orrs	r5, r2
 8011c5a:	2400      	movs	r4, #0
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	dd09      	ble.n	8011c74 <__ieee754_pow+0x44c>
 8011c60:	4bb7      	ldr	r3, [pc, #732]	; (8011f40 <__ieee754_pow+0x718>)
 8011c62:	3401      	adds	r4, #1
 8011c64:	429a      	cmp	r2, r3
 8011c66:	dd05      	ble.n	8011c74 <__ieee754_pow+0x44c>
 8011c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c6a:	191b      	adds	r3, r3, r4
 8011c6c:	2400      	movs	r4, #0
 8011c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c70:	4bb4      	ldr	r3, [pc, #720]	; (8011f44 <__ieee754_pow+0x71c>)
 8011c72:	18ed      	adds	r5, r5, r3
 8011c74:	00e3      	lsls	r3, r4, #3
 8011c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c78:	4bb3      	ldr	r3, [pc, #716]	; (8011f48 <__ieee754_pow+0x720>)
 8011c7a:	00e2      	lsls	r2, r4, #3
 8011c7c:	189b      	adds	r3, r3, r2
 8011c7e:	9800      	ldr	r0, [sp, #0]
 8011c80:	9901      	ldr	r1, [sp, #4]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	0029      	movs	r1, r5
 8011c88:	0006      	movs	r6, r0
 8011c8a:	920a      	str	r2, [sp, #40]	; 0x28
 8011c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c8e:	f7f0 fc7f 	bl	8002590 <__aeabi_dsub>
 8011c92:	0032      	movs	r2, r6
 8011c94:	002b      	movs	r3, r5
 8011c96:	9010      	str	r0, [sp, #64]	; 0x40
 8011c98:	9111      	str	r1, [sp, #68]	; 0x44
 8011c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c9e:	f7ef facd 	bl	800123c <__aeabi_dadd>
 8011ca2:	0002      	movs	r2, r0
 8011ca4:	000b      	movs	r3, r1
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	49a3      	ldr	r1, [pc, #652]	; (8011f38 <__ieee754_pow+0x710>)
 8011caa:	f7ef fe03 	bl	80018b4 <__aeabi_ddiv>
 8011cae:	0002      	movs	r2, r0
 8011cb0:	000b      	movs	r3, r1
 8011cb2:	9012      	str	r0, [sp, #72]	; 0x48
 8011cb4:	9113      	str	r1, [sp, #76]	; 0x4c
 8011cb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011cb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011cba:	f7f0 f9fd 	bl	80020b8 <__aeabi_dmul>
 8011cbe:	9008      	str	r0, [sp, #32]
 8011cc0:	9109      	str	r1, [sp, #36]	; 0x24
 8011cc2:	9a08      	ldr	r2, [sp, #32]
 8011cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cc6:	2180      	movs	r1, #128	; 0x80
 8011cc8:	9204      	str	r2, [sp, #16]
 8011cca:	9305      	str	r3, [sp, #20]
 8011ccc:	2300      	movs	r3, #0
 8011cce:	002f      	movs	r7, r5
 8011cd0:	0589      	lsls	r1, r1, #22
 8011cd2:	106d      	asrs	r5, r5, #1
 8011cd4:	430d      	orrs	r5, r1
 8011cd6:	2180      	movs	r1, #128	; 0x80
 8011cd8:	9304      	str	r3, [sp, #16]
 8011cda:	9a04      	ldr	r2, [sp, #16]
 8011cdc:	9b05      	ldr	r3, [sp, #20]
 8011cde:	9200      	str	r2, [sp, #0]
 8011ce0:	9301      	str	r3, [sp, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	0309      	lsls	r1, r1, #12
 8011ce6:	186d      	adds	r5, r5, r1
 8011ce8:	04a1      	lsls	r1, r4, #18
 8011cea:	186b      	adds	r3, r5, r1
 8011cec:	9800      	ldr	r0, [sp, #0]
 8011cee:	9901      	ldr	r1, [sp, #4]
 8011cf0:	0014      	movs	r4, r2
 8011cf2:	001d      	movs	r5, r3
 8011cf4:	f7f0 f9e0 	bl	80020b8 <__aeabi_dmul>
 8011cf8:	0002      	movs	r2, r0
 8011cfa:	000b      	movs	r3, r1
 8011cfc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011cfe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d00:	f7f0 fc46 	bl	8002590 <__aeabi_dsub>
 8011d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d08:	9010      	str	r0, [sp, #64]	; 0x40
 8011d0a:	9111      	str	r1, [sp, #68]	; 0x44
 8011d0c:	0020      	movs	r0, r4
 8011d0e:	0029      	movs	r1, r5
 8011d10:	f7f0 fc3e 	bl	8002590 <__aeabi_dsub>
 8011d14:	0002      	movs	r2, r0
 8011d16:	000b      	movs	r3, r1
 8011d18:	0030      	movs	r0, r6
 8011d1a:	0039      	movs	r1, r7
 8011d1c:	f7f0 fc38 	bl	8002590 <__aeabi_dsub>
 8011d20:	9a00      	ldr	r2, [sp, #0]
 8011d22:	9b01      	ldr	r3, [sp, #4]
 8011d24:	f7f0 f9c8 	bl	80020b8 <__aeabi_dmul>
 8011d28:	0002      	movs	r2, r0
 8011d2a:	000b      	movs	r3, r1
 8011d2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011d2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d30:	f7f0 fc2e 	bl	8002590 <__aeabi_dsub>
 8011d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d38:	f7f0 f9be 	bl	80020b8 <__aeabi_dmul>
 8011d3c:	9a08      	ldr	r2, [sp, #32]
 8011d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d40:	900a      	str	r0, [sp, #40]	; 0x28
 8011d42:	910b      	str	r1, [sp, #44]	; 0x2c
 8011d44:	0010      	movs	r0, r2
 8011d46:	0019      	movs	r1, r3
 8011d48:	f7f0 f9b6 	bl	80020b8 <__aeabi_dmul>
 8011d4c:	0006      	movs	r6, r0
 8011d4e:	000f      	movs	r7, r1
 8011d50:	4a7e      	ldr	r2, [pc, #504]	; (8011f4c <__ieee754_pow+0x724>)
 8011d52:	4b7f      	ldr	r3, [pc, #508]	; (8011f50 <__ieee754_pow+0x728>)
 8011d54:	f7f0 f9b0 	bl	80020b8 <__aeabi_dmul>
 8011d58:	4a7e      	ldr	r2, [pc, #504]	; (8011f54 <__ieee754_pow+0x72c>)
 8011d5a:	4b7f      	ldr	r3, [pc, #508]	; (8011f58 <__ieee754_pow+0x730>)
 8011d5c:	f7ef fa6e 	bl	800123c <__aeabi_dadd>
 8011d60:	0032      	movs	r2, r6
 8011d62:	003b      	movs	r3, r7
 8011d64:	f7f0 f9a8 	bl	80020b8 <__aeabi_dmul>
 8011d68:	4a7c      	ldr	r2, [pc, #496]	; (8011f5c <__ieee754_pow+0x734>)
 8011d6a:	4b7d      	ldr	r3, [pc, #500]	; (8011f60 <__ieee754_pow+0x738>)
 8011d6c:	f7ef fa66 	bl	800123c <__aeabi_dadd>
 8011d70:	0032      	movs	r2, r6
 8011d72:	003b      	movs	r3, r7
 8011d74:	f7f0 f9a0 	bl	80020b8 <__aeabi_dmul>
 8011d78:	4a7a      	ldr	r2, [pc, #488]	; (8011f64 <__ieee754_pow+0x73c>)
 8011d7a:	4b7b      	ldr	r3, [pc, #492]	; (8011f68 <__ieee754_pow+0x740>)
 8011d7c:	f7ef fa5e 	bl	800123c <__aeabi_dadd>
 8011d80:	0032      	movs	r2, r6
 8011d82:	003b      	movs	r3, r7
 8011d84:	f7f0 f998 	bl	80020b8 <__aeabi_dmul>
 8011d88:	4a78      	ldr	r2, [pc, #480]	; (8011f6c <__ieee754_pow+0x744>)
 8011d8a:	4b79      	ldr	r3, [pc, #484]	; (8011f70 <__ieee754_pow+0x748>)
 8011d8c:	f7ef fa56 	bl	800123c <__aeabi_dadd>
 8011d90:	0032      	movs	r2, r6
 8011d92:	003b      	movs	r3, r7
 8011d94:	f7f0 f990 	bl	80020b8 <__aeabi_dmul>
 8011d98:	4a76      	ldr	r2, [pc, #472]	; (8011f74 <__ieee754_pow+0x74c>)
 8011d9a:	4b77      	ldr	r3, [pc, #476]	; (8011f78 <__ieee754_pow+0x750>)
 8011d9c:	f7ef fa4e 	bl	800123c <__aeabi_dadd>
 8011da0:	0032      	movs	r2, r6
 8011da2:	0004      	movs	r4, r0
 8011da4:	000d      	movs	r5, r1
 8011da6:	003b      	movs	r3, r7
 8011da8:	0030      	movs	r0, r6
 8011daa:	0039      	movs	r1, r7
 8011dac:	f7f0 f984 	bl	80020b8 <__aeabi_dmul>
 8011db0:	0002      	movs	r2, r0
 8011db2:	000b      	movs	r3, r1
 8011db4:	0020      	movs	r0, r4
 8011db6:	0029      	movs	r1, r5
 8011db8:	f7f0 f97e 	bl	80020b8 <__aeabi_dmul>
 8011dbc:	9a00      	ldr	r2, [sp, #0]
 8011dbe:	9b01      	ldr	r3, [sp, #4]
 8011dc0:	0004      	movs	r4, r0
 8011dc2:	000d      	movs	r5, r1
 8011dc4:	9808      	ldr	r0, [sp, #32]
 8011dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011dc8:	f7ef fa38 	bl	800123c <__aeabi_dadd>
 8011dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dd0:	f7f0 f972 	bl	80020b8 <__aeabi_dmul>
 8011dd4:	0022      	movs	r2, r4
 8011dd6:	002b      	movs	r3, r5
 8011dd8:	f7ef fa30 	bl	800123c <__aeabi_dadd>
 8011ddc:	9a00      	ldr	r2, [sp, #0]
 8011dde:	9b01      	ldr	r3, [sp, #4]
 8011de0:	9010      	str	r0, [sp, #64]	; 0x40
 8011de2:	9111      	str	r1, [sp, #68]	; 0x44
 8011de4:	0010      	movs	r0, r2
 8011de6:	0019      	movs	r1, r3
 8011de8:	f7f0 f966 	bl	80020b8 <__aeabi_dmul>
 8011dec:	2200      	movs	r2, #0
 8011dee:	4b63      	ldr	r3, [pc, #396]	; (8011f7c <__ieee754_pow+0x754>)
 8011df0:	0004      	movs	r4, r0
 8011df2:	000d      	movs	r5, r1
 8011df4:	f7ef fa22 	bl	800123c <__aeabi_dadd>
 8011df8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011dfc:	f7ef fa1e 	bl	800123c <__aeabi_dadd>
 8011e00:	2600      	movs	r6, #0
 8011e02:	000f      	movs	r7, r1
 8011e04:	0032      	movs	r2, r6
 8011e06:	000b      	movs	r3, r1
 8011e08:	9800      	ldr	r0, [sp, #0]
 8011e0a:	9901      	ldr	r1, [sp, #4]
 8011e0c:	f7f0 f954 	bl	80020b8 <__aeabi_dmul>
 8011e10:	2200      	movs	r2, #0
 8011e12:	9000      	str	r0, [sp, #0]
 8011e14:	9101      	str	r1, [sp, #4]
 8011e16:	4b59      	ldr	r3, [pc, #356]	; (8011f7c <__ieee754_pow+0x754>)
 8011e18:	0030      	movs	r0, r6
 8011e1a:	0039      	movs	r1, r7
 8011e1c:	f7f0 fbb8 	bl	8002590 <__aeabi_dsub>
 8011e20:	0022      	movs	r2, r4
 8011e22:	002b      	movs	r3, r5
 8011e24:	f7f0 fbb4 	bl	8002590 <__aeabi_dsub>
 8011e28:	0002      	movs	r2, r0
 8011e2a:	000b      	movs	r3, r1
 8011e2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011e2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011e30:	f7f0 fbae 	bl	8002590 <__aeabi_dsub>
 8011e34:	9a08      	ldr	r2, [sp, #32]
 8011e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e38:	f7f0 f93e 	bl	80020b8 <__aeabi_dmul>
 8011e3c:	0032      	movs	r2, r6
 8011e3e:	0004      	movs	r4, r0
 8011e40:	000d      	movs	r5, r1
 8011e42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e46:	003b      	movs	r3, r7
 8011e48:	f7f0 f936 	bl	80020b8 <__aeabi_dmul>
 8011e4c:	0002      	movs	r2, r0
 8011e4e:	000b      	movs	r3, r1
 8011e50:	0020      	movs	r0, r4
 8011e52:	0029      	movs	r1, r5
 8011e54:	f7ef f9f2 	bl	800123c <__aeabi_dadd>
 8011e58:	0004      	movs	r4, r0
 8011e5a:	000d      	movs	r5, r1
 8011e5c:	0002      	movs	r2, r0
 8011e5e:	000b      	movs	r3, r1
 8011e60:	9800      	ldr	r0, [sp, #0]
 8011e62:	9901      	ldr	r1, [sp, #4]
 8011e64:	f7ef f9ea 	bl	800123c <__aeabi_dadd>
 8011e68:	2600      	movs	r6, #0
 8011e6a:	22e0      	movs	r2, #224	; 0xe0
 8011e6c:	4b44      	ldr	r3, [pc, #272]	; (8011f80 <__ieee754_pow+0x758>)
 8011e6e:	0612      	lsls	r2, r2, #24
 8011e70:	0030      	movs	r0, r6
 8011e72:	000f      	movs	r7, r1
 8011e74:	f7f0 f920 	bl	80020b8 <__aeabi_dmul>
 8011e78:	9008      	str	r0, [sp, #32]
 8011e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8011e7c:	9a00      	ldr	r2, [sp, #0]
 8011e7e:	9b01      	ldr	r3, [sp, #4]
 8011e80:	0039      	movs	r1, r7
 8011e82:	0030      	movs	r0, r6
 8011e84:	f7f0 fb84 	bl	8002590 <__aeabi_dsub>
 8011e88:	0002      	movs	r2, r0
 8011e8a:	000b      	movs	r3, r1
 8011e8c:	0020      	movs	r0, r4
 8011e8e:	0029      	movs	r1, r5
 8011e90:	f7f0 fb7e 	bl	8002590 <__aeabi_dsub>
 8011e94:	4a3b      	ldr	r2, [pc, #236]	; (8011f84 <__ieee754_pow+0x75c>)
 8011e96:	4b3a      	ldr	r3, [pc, #232]	; (8011f80 <__ieee754_pow+0x758>)
 8011e98:	f7f0 f90e 	bl	80020b8 <__aeabi_dmul>
 8011e9c:	4a3a      	ldr	r2, [pc, #232]	; (8011f88 <__ieee754_pow+0x760>)
 8011e9e:	0004      	movs	r4, r0
 8011ea0:	000d      	movs	r5, r1
 8011ea2:	4b3a      	ldr	r3, [pc, #232]	; (8011f8c <__ieee754_pow+0x764>)
 8011ea4:	0039      	movs	r1, r7
 8011ea6:	0030      	movs	r0, r6
 8011ea8:	f7f0 f906 	bl	80020b8 <__aeabi_dmul>
 8011eac:	0002      	movs	r2, r0
 8011eae:	000b      	movs	r3, r1
 8011eb0:	0020      	movs	r0, r4
 8011eb2:	0029      	movs	r1, r5
 8011eb4:	f7ef f9c2 	bl	800123c <__aeabi_dadd>
 8011eb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011eba:	4b35      	ldr	r3, [pc, #212]	; (8011f90 <__ieee754_pow+0x768>)
 8011ebc:	189b      	adds	r3, r3, r2
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	f7ef f9bb 	bl	800123c <__aeabi_dadd>
 8011ec6:	900a      	str	r0, [sp, #40]	; 0x28
 8011ec8:	910b      	str	r1, [sp, #44]	; 0x2c
 8011eca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011ecc:	f7f0 ff46 	bl	8002d5c <__aeabi_i2d>
 8011ed0:	0004      	movs	r4, r0
 8011ed2:	000d      	movs	r5, r1
 8011ed4:	9808      	ldr	r0, [sp, #32]
 8011ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011eda:	4b2e      	ldr	r3, [pc, #184]	; (8011f94 <__ieee754_pow+0x76c>)
 8011edc:	189b      	adds	r3, r3, r2
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	9200      	str	r2, [sp, #0]
 8011ee4:	9301      	str	r3, [sp, #4]
 8011ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011eea:	f7ef f9a7 	bl	800123c <__aeabi_dadd>
 8011eee:	9a00      	ldr	r2, [sp, #0]
 8011ef0:	9b01      	ldr	r3, [sp, #4]
 8011ef2:	f7ef f9a3 	bl	800123c <__aeabi_dadd>
 8011ef6:	0022      	movs	r2, r4
 8011ef8:	002b      	movs	r3, r5
 8011efa:	f7ef f99f 	bl	800123c <__aeabi_dadd>
 8011efe:	0022      	movs	r2, r4
 8011f00:	002b      	movs	r3, r5
 8011f02:	0030      	movs	r0, r6
 8011f04:	000f      	movs	r7, r1
 8011f06:	f7f0 fb43 	bl	8002590 <__aeabi_dsub>
 8011f0a:	9a00      	ldr	r2, [sp, #0]
 8011f0c:	9b01      	ldr	r3, [sp, #4]
 8011f0e:	f7f0 fb3f 	bl	8002590 <__aeabi_dsub>
 8011f12:	9a08      	ldr	r2, [sp, #32]
 8011f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f16:	f7f0 fb3b 	bl	8002590 <__aeabi_dsub>
 8011f1a:	0002      	movs	r2, r0
 8011f1c:	000b      	movs	r3, r1
 8011f1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f22:	e619      	b.n	8011b58 <__ieee754_pow+0x330>
 8011f24:	2300      	movs	r3, #0
 8011f26:	4c04      	ldr	r4, [pc, #16]	; (8011f38 <__ieee754_pow+0x710>)
 8011f28:	e622      	b.n	8011b70 <__ieee754_pow+0x348>
 8011f2a:	46c0      	nop			; (mov r8, r8)
 8011f2c:	7ff00000 	.word	0x7ff00000
 8011f30:	43400000 	.word	0x43400000
 8011f34:	fffffc01 	.word	0xfffffc01
 8011f38:	3ff00000 	.word	0x3ff00000
 8011f3c:	0003988e 	.word	0x0003988e
 8011f40:	000bb679 	.word	0x000bb679
 8011f44:	fff00000 	.word	0xfff00000
 8011f48:	08013078 	.word	0x08013078
 8011f4c:	4a454eef 	.word	0x4a454eef
 8011f50:	3fca7e28 	.word	0x3fca7e28
 8011f54:	93c9db65 	.word	0x93c9db65
 8011f58:	3fcd864a 	.word	0x3fcd864a
 8011f5c:	a91d4101 	.word	0xa91d4101
 8011f60:	3fd17460 	.word	0x3fd17460
 8011f64:	518f264d 	.word	0x518f264d
 8011f68:	3fd55555 	.word	0x3fd55555
 8011f6c:	db6fabff 	.word	0xdb6fabff
 8011f70:	3fdb6db6 	.word	0x3fdb6db6
 8011f74:	33333303 	.word	0x33333303
 8011f78:	3fe33333 	.word	0x3fe33333
 8011f7c:	40080000 	.word	0x40080000
 8011f80:	3feec709 	.word	0x3feec709
 8011f84:	dc3a03fd 	.word	0xdc3a03fd
 8011f88:	145b01f5 	.word	0x145b01f5
 8011f8c:	be3e2fe0 	.word	0xbe3e2fe0
 8011f90:	08013098 	.word	0x08013098
 8011f94:	08013088 	.word	0x08013088
 8011f98:	4a90      	ldr	r2, [pc, #576]	; (80121dc <__ieee754_pow+0x9b4>)
 8011f9a:	4b91      	ldr	r3, [pc, #580]	; (80121e0 <__ieee754_pow+0x9b8>)
 8011f9c:	9804      	ldr	r0, [sp, #16]
 8011f9e:	9905      	ldr	r1, [sp, #20]
 8011fa0:	f7ef f94c 	bl	800123c <__aeabi_dadd>
 8011fa4:	0032      	movs	r2, r6
 8011fa6:	9002      	str	r0, [sp, #8]
 8011fa8:	9103      	str	r1, [sp, #12]
 8011faa:	003b      	movs	r3, r7
 8011fac:	0028      	movs	r0, r5
 8011fae:	0021      	movs	r1, r4
 8011fb0:	f7f0 faee 	bl	8002590 <__aeabi_dsub>
 8011fb4:	0002      	movs	r2, r0
 8011fb6:	000b      	movs	r3, r1
 8011fb8:	9802      	ldr	r0, [sp, #8]
 8011fba:	9903      	ldr	r1, [sp, #12]
 8011fbc:	f7ee fa68 	bl	8000490 <__aeabi_dcmpgt>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d000      	beq.n	8011fc6 <__ieee754_pow+0x79e>
 8011fc4:	e60f      	b.n	8011be6 <__ieee754_pow+0x3be>
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	4a86      	ldr	r2, [pc, #536]	; (80121e4 <__ieee754_pow+0x9bc>)
 8011fca:	0063      	lsls	r3, r4, #1
 8011fcc:	085b      	lsrs	r3, r3, #1
 8011fce:	9102      	str	r1, [sp, #8]
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	dd25      	ble.n	8012020 <__ieee754_pow+0x7f8>
 8011fd4:	4a84      	ldr	r2, [pc, #528]	; (80121e8 <__ieee754_pow+0x9c0>)
 8011fd6:	151b      	asrs	r3, r3, #20
 8011fd8:	189b      	adds	r3, r3, r2
 8011fda:	2280      	movs	r2, #128	; 0x80
 8011fdc:	0352      	lsls	r2, r2, #13
 8011fde:	4694      	mov	ip, r2
 8011fe0:	411a      	asrs	r2, r3
 8011fe2:	1914      	adds	r4, r2, r4
 8011fe4:	4b81      	ldr	r3, [pc, #516]	; (80121ec <__ieee754_pow+0x9c4>)
 8011fe6:	0060      	lsls	r0, r4, #1
 8011fe8:	4d81      	ldr	r5, [pc, #516]	; (80121f0 <__ieee754_pow+0x9c8>)
 8011fea:	0d40      	lsrs	r0, r0, #21
 8011fec:	18c0      	adds	r0, r0, r3
 8011fee:	4105      	asrs	r5, r0
 8011ff0:	0021      	movs	r1, r4
 8011ff2:	43a9      	bics	r1, r5
 8011ff4:	000b      	movs	r3, r1
 8011ff6:	4661      	mov	r1, ip
 8011ff8:	0324      	lsls	r4, r4, #12
 8011ffa:	0b24      	lsrs	r4, r4, #12
 8011ffc:	4321      	orrs	r1, r4
 8011ffe:	2414      	movs	r4, #20
 8012000:	1a20      	subs	r0, r4, r0
 8012002:	4101      	asrs	r1, r0
 8012004:	9102      	str	r1, [sp, #8]
 8012006:	9908      	ldr	r1, [sp, #32]
 8012008:	2200      	movs	r2, #0
 801200a:	2900      	cmp	r1, #0
 801200c:	da02      	bge.n	8012014 <__ieee754_pow+0x7ec>
 801200e:	9902      	ldr	r1, [sp, #8]
 8012010:	4249      	negs	r1, r1
 8012012:	9102      	str	r1, [sp, #8]
 8012014:	0030      	movs	r0, r6
 8012016:	0039      	movs	r1, r7
 8012018:	f7f0 faba 	bl	8002590 <__aeabi_dsub>
 801201c:	9006      	str	r0, [sp, #24]
 801201e:	9107      	str	r1, [sp, #28]
 8012020:	9a04      	ldr	r2, [sp, #16]
 8012022:	9b05      	ldr	r3, [sp, #20]
 8012024:	9806      	ldr	r0, [sp, #24]
 8012026:	9907      	ldr	r1, [sp, #28]
 8012028:	2600      	movs	r6, #0
 801202a:	f7ef f907 	bl	800123c <__aeabi_dadd>
 801202e:	2200      	movs	r2, #0
 8012030:	0030      	movs	r0, r6
 8012032:	4b70      	ldr	r3, [pc, #448]	; (80121f4 <__ieee754_pow+0x9cc>)
 8012034:	000f      	movs	r7, r1
 8012036:	f7f0 f83f 	bl	80020b8 <__aeabi_dmul>
 801203a:	9a06      	ldr	r2, [sp, #24]
 801203c:	9b07      	ldr	r3, [sp, #28]
 801203e:	9008      	str	r0, [sp, #32]
 8012040:	9109      	str	r1, [sp, #36]	; 0x24
 8012042:	0030      	movs	r0, r6
 8012044:	0039      	movs	r1, r7
 8012046:	f7f0 faa3 	bl	8002590 <__aeabi_dsub>
 801204a:	0002      	movs	r2, r0
 801204c:	000b      	movs	r3, r1
 801204e:	9804      	ldr	r0, [sp, #16]
 8012050:	9905      	ldr	r1, [sp, #20]
 8012052:	f7f0 fa9d 	bl	8002590 <__aeabi_dsub>
 8012056:	4a68      	ldr	r2, [pc, #416]	; (80121f8 <__ieee754_pow+0x9d0>)
 8012058:	4b68      	ldr	r3, [pc, #416]	; (80121fc <__ieee754_pow+0x9d4>)
 801205a:	f7f0 f82d 	bl	80020b8 <__aeabi_dmul>
 801205e:	4a68      	ldr	r2, [pc, #416]	; (8012200 <__ieee754_pow+0x9d8>)
 8012060:	0004      	movs	r4, r0
 8012062:	000d      	movs	r5, r1
 8012064:	0030      	movs	r0, r6
 8012066:	0039      	movs	r1, r7
 8012068:	4b66      	ldr	r3, [pc, #408]	; (8012204 <__ieee754_pow+0x9dc>)
 801206a:	f7f0 f825 	bl	80020b8 <__aeabi_dmul>
 801206e:	0002      	movs	r2, r0
 8012070:	000b      	movs	r3, r1
 8012072:	0020      	movs	r0, r4
 8012074:	0029      	movs	r1, r5
 8012076:	f7ef f8e1 	bl	800123c <__aeabi_dadd>
 801207a:	0004      	movs	r4, r0
 801207c:	000d      	movs	r5, r1
 801207e:	0002      	movs	r2, r0
 8012080:	000b      	movs	r3, r1
 8012082:	9808      	ldr	r0, [sp, #32]
 8012084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012086:	f7ef f8d9 	bl	800123c <__aeabi_dadd>
 801208a:	9a08      	ldr	r2, [sp, #32]
 801208c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801208e:	0006      	movs	r6, r0
 8012090:	000f      	movs	r7, r1
 8012092:	f7f0 fa7d 	bl	8002590 <__aeabi_dsub>
 8012096:	0002      	movs	r2, r0
 8012098:	000b      	movs	r3, r1
 801209a:	0020      	movs	r0, r4
 801209c:	0029      	movs	r1, r5
 801209e:	f7f0 fa77 	bl	8002590 <__aeabi_dsub>
 80120a2:	0032      	movs	r2, r6
 80120a4:	9004      	str	r0, [sp, #16]
 80120a6:	9105      	str	r1, [sp, #20]
 80120a8:	003b      	movs	r3, r7
 80120aa:	0030      	movs	r0, r6
 80120ac:	0039      	movs	r1, r7
 80120ae:	f7f0 f803 	bl	80020b8 <__aeabi_dmul>
 80120b2:	0004      	movs	r4, r0
 80120b4:	000d      	movs	r5, r1
 80120b6:	4a54      	ldr	r2, [pc, #336]	; (8012208 <__ieee754_pow+0x9e0>)
 80120b8:	4b54      	ldr	r3, [pc, #336]	; (801220c <__ieee754_pow+0x9e4>)
 80120ba:	f7ef fffd 	bl	80020b8 <__aeabi_dmul>
 80120be:	4a54      	ldr	r2, [pc, #336]	; (8012210 <__ieee754_pow+0x9e8>)
 80120c0:	4b54      	ldr	r3, [pc, #336]	; (8012214 <__ieee754_pow+0x9ec>)
 80120c2:	f7f0 fa65 	bl	8002590 <__aeabi_dsub>
 80120c6:	0022      	movs	r2, r4
 80120c8:	002b      	movs	r3, r5
 80120ca:	f7ef fff5 	bl	80020b8 <__aeabi_dmul>
 80120ce:	4a52      	ldr	r2, [pc, #328]	; (8012218 <__ieee754_pow+0x9f0>)
 80120d0:	4b52      	ldr	r3, [pc, #328]	; (801221c <__ieee754_pow+0x9f4>)
 80120d2:	f7ef f8b3 	bl	800123c <__aeabi_dadd>
 80120d6:	0022      	movs	r2, r4
 80120d8:	002b      	movs	r3, r5
 80120da:	f7ef ffed 	bl	80020b8 <__aeabi_dmul>
 80120de:	4a50      	ldr	r2, [pc, #320]	; (8012220 <__ieee754_pow+0x9f8>)
 80120e0:	4b50      	ldr	r3, [pc, #320]	; (8012224 <__ieee754_pow+0x9fc>)
 80120e2:	f7f0 fa55 	bl	8002590 <__aeabi_dsub>
 80120e6:	0022      	movs	r2, r4
 80120e8:	002b      	movs	r3, r5
 80120ea:	f7ef ffe5 	bl	80020b8 <__aeabi_dmul>
 80120ee:	4a4e      	ldr	r2, [pc, #312]	; (8012228 <__ieee754_pow+0xa00>)
 80120f0:	4b4e      	ldr	r3, [pc, #312]	; (801222c <__ieee754_pow+0xa04>)
 80120f2:	f7ef f8a3 	bl	800123c <__aeabi_dadd>
 80120f6:	0022      	movs	r2, r4
 80120f8:	002b      	movs	r3, r5
 80120fa:	f7ef ffdd 	bl	80020b8 <__aeabi_dmul>
 80120fe:	0002      	movs	r2, r0
 8012100:	000b      	movs	r3, r1
 8012102:	0030      	movs	r0, r6
 8012104:	0039      	movs	r1, r7
 8012106:	f7f0 fa43 	bl	8002590 <__aeabi_dsub>
 801210a:	0004      	movs	r4, r0
 801210c:	000d      	movs	r5, r1
 801210e:	0002      	movs	r2, r0
 8012110:	000b      	movs	r3, r1
 8012112:	0030      	movs	r0, r6
 8012114:	0039      	movs	r1, r7
 8012116:	f7ef ffcf 	bl	80020b8 <__aeabi_dmul>
 801211a:	2380      	movs	r3, #128	; 0x80
 801211c:	9006      	str	r0, [sp, #24]
 801211e:	9107      	str	r1, [sp, #28]
 8012120:	2200      	movs	r2, #0
 8012122:	0020      	movs	r0, r4
 8012124:	0029      	movs	r1, r5
 8012126:	05db      	lsls	r3, r3, #23
 8012128:	f7f0 fa32 	bl	8002590 <__aeabi_dsub>
 801212c:	0002      	movs	r2, r0
 801212e:	000b      	movs	r3, r1
 8012130:	9806      	ldr	r0, [sp, #24]
 8012132:	9907      	ldr	r1, [sp, #28]
 8012134:	f7ef fbbe 	bl	80018b4 <__aeabi_ddiv>
 8012138:	9a04      	ldr	r2, [sp, #16]
 801213a:	9b05      	ldr	r3, [sp, #20]
 801213c:	0004      	movs	r4, r0
 801213e:	000d      	movs	r5, r1
 8012140:	0030      	movs	r0, r6
 8012142:	0039      	movs	r1, r7
 8012144:	f7ef ffb8 	bl	80020b8 <__aeabi_dmul>
 8012148:	9a04      	ldr	r2, [sp, #16]
 801214a:	9b05      	ldr	r3, [sp, #20]
 801214c:	f7ef f876 	bl	800123c <__aeabi_dadd>
 8012150:	0002      	movs	r2, r0
 8012152:	000b      	movs	r3, r1
 8012154:	0020      	movs	r0, r4
 8012156:	0029      	movs	r1, r5
 8012158:	f7f0 fa1a 	bl	8002590 <__aeabi_dsub>
 801215c:	0032      	movs	r2, r6
 801215e:	003b      	movs	r3, r7
 8012160:	f7f0 fa16 	bl	8002590 <__aeabi_dsub>
 8012164:	0002      	movs	r2, r0
 8012166:	000b      	movs	r3, r1
 8012168:	2000      	movs	r0, #0
 801216a:	4931      	ldr	r1, [pc, #196]	; (8012230 <__ieee754_pow+0xa08>)
 801216c:	f7f0 fa10 	bl	8002590 <__aeabi_dsub>
 8012170:	9b02      	ldr	r3, [sp, #8]
 8012172:	051b      	lsls	r3, r3, #20
 8012174:	185b      	adds	r3, r3, r1
 8012176:	151a      	asrs	r2, r3, #20
 8012178:	2a00      	cmp	r2, #0
 801217a:	dc25      	bgt.n	80121c8 <__ieee754_pow+0x9a0>
 801217c:	9a02      	ldr	r2, [sp, #8]
 801217e:	f000 f9cb 	bl	8012518 <scalbn>
 8012182:	9a00      	ldr	r2, [sp, #0]
 8012184:	9b01      	ldr	r3, [sp, #4]
 8012186:	f7ff fc33 	bl	80119f0 <__ieee754_pow+0x1c8>
 801218a:	4a2a      	ldr	r2, [pc, #168]	; (8012234 <__ieee754_pow+0xa0c>)
 801218c:	004b      	lsls	r3, r1, #1
 801218e:	085b      	lsrs	r3, r3, #1
 8012190:	4293      	cmp	r3, r2
 8012192:	dc00      	bgt.n	8012196 <__ieee754_pow+0x96e>
 8012194:	e717      	b.n	8011fc6 <__ieee754_pow+0x79e>
 8012196:	4b28      	ldr	r3, [pc, #160]	; (8012238 <__ieee754_pow+0xa10>)
 8012198:	18cb      	adds	r3, r1, r3
 801219a:	4303      	orrs	r3, r0
 801219c:	d008      	beq.n	80121b0 <__ieee754_pow+0x988>
 801219e:	9800      	ldr	r0, [sp, #0]
 80121a0:	9901      	ldr	r1, [sp, #4]
 80121a2:	2300      	movs	r3, #0
 80121a4:	2200      	movs	r2, #0
 80121a6:	f7ee f95f 	bl	8000468 <__aeabi_dcmplt>
 80121aa:	1e43      	subs	r3, r0, #1
 80121ac:	4198      	sbcs	r0, r3
 80121ae:	e462      	b.n	8011a76 <__ieee754_pow+0x24e>
 80121b0:	0032      	movs	r2, r6
 80121b2:	003b      	movs	r3, r7
 80121b4:	f7f0 f9ec 	bl	8002590 <__aeabi_dsub>
 80121b8:	9a04      	ldr	r2, [sp, #16]
 80121ba:	9b05      	ldr	r3, [sp, #20]
 80121bc:	f7ee f972 	bl	80004a4 <__aeabi_dcmpge>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	d100      	bne.n	80121c6 <__ieee754_pow+0x99e>
 80121c4:	e6ff      	b.n	8011fc6 <__ieee754_pow+0x79e>
 80121c6:	e7ea      	b.n	801219e <__ieee754_pow+0x976>
 80121c8:	0019      	movs	r1, r3
 80121ca:	e7da      	b.n	8012182 <__ieee754_pow+0x95a>
 80121cc:	2300      	movs	r3, #0
 80121ce:	4c18      	ldr	r4, [pc, #96]	; (8012230 <__ieee754_pow+0xa08>)
 80121d0:	f7ff fbf1 	bl	80119b6 <__ieee754_pow+0x18e>
 80121d4:	2300      	movs	r3, #0
 80121d6:	2400      	movs	r4, #0
 80121d8:	f7ff fbed 	bl	80119b6 <__ieee754_pow+0x18e>
 80121dc:	652b82fe 	.word	0x652b82fe
 80121e0:	3c971547 	.word	0x3c971547
 80121e4:	3fe00000 	.word	0x3fe00000
 80121e8:	fffffc02 	.word	0xfffffc02
 80121ec:	fffffc01 	.word	0xfffffc01
 80121f0:	000fffff 	.word	0x000fffff
 80121f4:	3fe62e43 	.word	0x3fe62e43
 80121f8:	fefa39ef 	.word	0xfefa39ef
 80121fc:	3fe62e42 	.word	0x3fe62e42
 8012200:	0ca86c39 	.word	0x0ca86c39
 8012204:	be205c61 	.word	0xbe205c61
 8012208:	72bea4d0 	.word	0x72bea4d0
 801220c:	3e663769 	.word	0x3e663769
 8012210:	c5d26bf1 	.word	0xc5d26bf1
 8012214:	3ebbbd41 	.word	0x3ebbbd41
 8012218:	af25de2c 	.word	0xaf25de2c
 801221c:	3f11566a 	.word	0x3f11566a
 8012220:	16bebd93 	.word	0x16bebd93
 8012224:	3f66c16c 	.word	0x3f66c16c
 8012228:	5555553e 	.word	0x5555553e
 801222c:	3fc55555 	.word	0x3fc55555
 8012230:	3ff00000 	.word	0x3ff00000
 8012234:	4090cbff 	.word	0x4090cbff
 8012238:	3f6f3400 	.word	0x3f6f3400

0801223c <__ieee754_sqrt>:
 801223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801223e:	000b      	movs	r3, r1
 8012240:	000c      	movs	r4, r1
 8012242:	4956      	ldr	r1, [pc, #344]	; (801239c <__ieee754_sqrt+0x160>)
 8012244:	0005      	movs	r5, r0
 8012246:	0002      	movs	r2, r0
 8012248:	0008      	movs	r0, r1
 801224a:	b085      	sub	sp, #20
 801224c:	4020      	ands	r0, r4
 801224e:	4288      	cmp	r0, r1
 8012250:	d10f      	bne.n	8012272 <__ieee754_sqrt+0x36>
 8012252:	0028      	movs	r0, r5
 8012254:	0021      	movs	r1, r4
 8012256:	f7ef ff2f 	bl	80020b8 <__aeabi_dmul>
 801225a:	0002      	movs	r2, r0
 801225c:	000b      	movs	r3, r1
 801225e:	0028      	movs	r0, r5
 8012260:	0021      	movs	r1, r4
 8012262:	f7ee ffeb 	bl	800123c <__aeabi_dadd>
 8012266:	0005      	movs	r5, r0
 8012268:	000c      	movs	r4, r1
 801226a:	0028      	movs	r0, r5
 801226c:	0021      	movs	r1, r4
 801226e:	b005      	add	sp, #20
 8012270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012272:	2c00      	cmp	r4, #0
 8012274:	dc10      	bgt.n	8012298 <__ieee754_sqrt+0x5c>
 8012276:	0061      	lsls	r1, r4, #1
 8012278:	0849      	lsrs	r1, r1, #1
 801227a:	4329      	orrs	r1, r5
 801227c:	d0f5      	beq.n	801226a <__ieee754_sqrt+0x2e>
 801227e:	2100      	movs	r1, #0
 8012280:	428c      	cmp	r4, r1
 8012282:	d100      	bne.n	8012286 <__ieee754_sqrt+0x4a>
 8012284:	e080      	b.n	8012388 <__ieee754_sqrt+0x14c>
 8012286:	0028      	movs	r0, r5
 8012288:	0021      	movs	r1, r4
 801228a:	f7f0 f981 	bl	8002590 <__aeabi_dsub>
 801228e:	0002      	movs	r2, r0
 8012290:	000b      	movs	r3, r1
 8012292:	f7ef fb0f 	bl	80018b4 <__aeabi_ddiv>
 8012296:	e7e6      	b.n	8012266 <__ieee754_sqrt+0x2a>
 8012298:	1521      	asrs	r1, r4, #20
 801229a:	d075      	beq.n	8012388 <__ieee754_sqrt+0x14c>
 801229c:	4840      	ldr	r0, [pc, #256]	; (80123a0 <__ieee754_sqrt+0x164>)
 801229e:	031b      	lsls	r3, r3, #12
 80122a0:	180c      	adds	r4, r1, r0
 80122a2:	2080      	movs	r0, #128	; 0x80
 80122a4:	0b1b      	lsrs	r3, r3, #12
 80122a6:	0340      	lsls	r0, r0, #13
 80122a8:	4303      	orrs	r3, r0
 80122aa:	07c9      	lsls	r1, r1, #31
 80122ac:	d403      	bmi.n	80122b6 <__ieee754_sqrt+0x7a>
 80122ae:	0fd1      	lsrs	r1, r2, #31
 80122b0:	005b      	lsls	r3, r3, #1
 80122b2:	185b      	adds	r3, r3, r1
 80122b4:	0052      	lsls	r2, r2, #1
 80122b6:	1061      	asrs	r1, r4, #1
 80122b8:	2400      	movs	r4, #0
 80122ba:	9103      	str	r1, [sp, #12]
 80122bc:	005b      	lsls	r3, r3, #1
 80122be:	0fd1      	lsrs	r1, r2, #31
 80122c0:	185b      	adds	r3, r3, r1
 80122c2:	2180      	movs	r1, #128	; 0x80
 80122c4:	2516      	movs	r5, #22
 80122c6:	0020      	movs	r0, r4
 80122c8:	0052      	lsls	r2, r2, #1
 80122ca:	0389      	lsls	r1, r1, #14
 80122cc:	1846      	adds	r6, r0, r1
 80122ce:	429e      	cmp	r6, r3
 80122d0:	dc02      	bgt.n	80122d8 <__ieee754_sqrt+0x9c>
 80122d2:	1870      	adds	r0, r6, r1
 80122d4:	1b9b      	subs	r3, r3, r6
 80122d6:	1864      	adds	r4, r4, r1
 80122d8:	0fd6      	lsrs	r6, r2, #31
 80122da:	005b      	lsls	r3, r3, #1
 80122dc:	3d01      	subs	r5, #1
 80122de:	18f3      	adds	r3, r6, r3
 80122e0:	0052      	lsls	r2, r2, #1
 80122e2:	0849      	lsrs	r1, r1, #1
 80122e4:	2d00      	cmp	r5, #0
 80122e6:	d1f1      	bne.n	80122cc <__ieee754_sqrt+0x90>
 80122e8:	2620      	movs	r6, #32
 80122ea:	2780      	movs	r7, #128	; 0x80
 80122ec:	0029      	movs	r1, r5
 80122ee:	9601      	str	r6, [sp, #4]
 80122f0:	063f      	lsls	r7, r7, #24
 80122f2:	197e      	adds	r6, r7, r5
 80122f4:	46b4      	mov	ip, r6
 80122f6:	4283      	cmp	r3, r0
 80122f8:	dc02      	bgt.n	8012300 <__ieee754_sqrt+0xc4>
 80122fa:	d114      	bne.n	8012326 <__ieee754_sqrt+0xea>
 80122fc:	4296      	cmp	r6, r2
 80122fe:	d812      	bhi.n	8012326 <__ieee754_sqrt+0xea>
 8012300:	4665      	mov	r5, ip
 8012302:	4666      	mov	r6, ip
 8012304:	19ed      	adds	r5, r5, r7
 8012306:	9002      	str	r0, [sp, #8]
 8012308:	2e00      	cmp	r6, #0
 801230a:	da03      	bge.n	8012314 <__ieee754_sqrt+0xd8>
 801230c:	43ee      	mvns	r6, r5
 801230e:	0ff6      	lsrs	r6, r6, #31
 8012310:	1986      	adds	r6, r0, r6
 8012312:	9602      	str	r6, [sp, #8]
 8012314:	1a1b      	subs	r3, r3, r0
 8012316:	4562      	cmp	r2, ip
 8012318:	4180      	sbcs	r0, r0
 801231a:	4240      	negs	r0, r0
 801231c:	1a1b      	subs	r3, r3, r0
 801231e:	4660      	mov	r0, ip
 8012320:	1a12      	subs	r2, r2, r0
 8012322:	9802      	ldr	r0, [sp, #8]
 8012324:	19c9      	adds	r1, r1, r7
 8012326:	0fd6      	lsrs	r6, r2, #31
 8012328:	005b      	lsls	r3, r3, #1
 801232a:	199b      	adds	r3, r3, r6
 801232c:	9e01      	ldr	r6, [sp, #4]
 801232e:	0052      	lsls	r2, r2, #1
 8012330:	3e01      	subs	r6, #1
 8012332:	087f      	lsrs	r7, r7, #1
 8012334:	9601      	str	r6, [sp, #4]
 8012336:	2e00      	cmp	r6, #0
 8012338:	d1db      	bne.n	80122f2 <__ieee754_sqrt+0xb6>
 801233a:	4313      	orrs	r3, r2
 801233c:	d003      	beq.n	8012346 <__ieee754_sqrt+0x10a>
 801233e:	1c4b      	adds	r3, r1, #1
 8012340:	d127      	bne.n	8012392 <__ieee754_sqrt+0x156>
 8012342:	0031      	movs	r1, r6
 8012344:	3401      	adds	r4, #1
 8012346:	4b17      	ldr	r3, [pc, #92]	; (80123a4 <__ieee754_sqrt+0x168>)
 8012348:	1060      	asrs	r0, r4, #1
 801234a:	18c0      	adds	r0, r0, r3
 801234c:	0849      	lsrs	r1, r1, #1
 801234e:	07e3      	lsls	r3, r4, #31
 8012350:	d502      	bpl.n	8012358 <__ieee754_sqrt+0x11c>
 8012352:	2380      	movs	r3, #128	; 0x80
 8012354:	061b      	lsls	r3, r3, #24
 8012356:	4319      	orrs	r1, r3
 8012358:	9b03      	ldr	r3, [sp, #12]
 801235a:	000d      	movs	r5, r1
 801235c:	051c      	lsls	r4, r3, #20
 801235e:	1823      	adds	r3, r4, r0
 8012360:	001c      	movs	r4, r3
 8012362:	e782      	b.n	801226a <__ieee754_sqrt+0x2e>
 8012364:	0ad3      	lsrs	r3, r2, #11
 8012366:	3815      	subs	r0, #21
 8012368:	0552      	lsls	r2, r2, #21
 801236a:	2b00      	cmp	r3, #0
 801236c:	d0fa      	beq.n	8012364 <__ieee754_sqrt+0x128>
 801236e:	2480      	movs	r4, #128	; 0x80
 8012370:	0364      	lsls	r4, r4, #13
 8012372:	4223      	tst	r3, r4
 8012374:	d00a      	beq.n	801238c <__ieee754_sqrt+0x150>
 8012376:	2420      	movs	r4, #32
 8012378:	0016      	movs	r6, r2
 801237a:	1a64      	subs	r4, r4, r1
 801237c:	40e6      	lsrs	r6, r4
 801237e:	1e4d      	subs	r5, r1, #1
 8012380:	408a      	lsls	r2, r1
 8012382:	4333      	orrs	r3, r6
 8012384:	1b41      	subs	r1, r0, r5
 8012386:	e789      	b.n	801229c <__ieee754_sqrt+0x60>
 8012388:	2000      	movs	r0, #0
 801238a:	e7ee      	b.n	801236a <__ieee754_sqrt+0x12e>
 801238c:	005b      	lsls	r3, r3, #1
 801238e:	3101      	adds	r1, #1
 8012390:	e7ef      	b.n	8012372 <__ieee754_sqrt+0x136>
 8012392:	2301      	movs	r3, #1
 8012394:	3101      	adds	r1, #1
 8012396:	4399      	bics	r1, r3
 8012398:	e7d5      	b.n	8012346 <__ieee754_sqrt+0x10a>
 801239a:	46c0      	nop			; (mov r8, r8)
 801239c:	7ff00000 	.word	0x7ff00000
 80123a0:	fffffc01 	.word	0xfffffc01
 80123a4:	3fe00000 	.word	0x3fe00000

080123a8 <__ieee754_atan2f>:
 80123a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123aa:	25ff      	movs	r5, #255	; 0xff
 80123ac:	004a      	lsls	r2, r1, #1
 80123ae:	9101      	str	r1, [sp, #4]
 80123b0:	0852      	lsrs	r2, r2, #1
 80123b2:	05ed      	lsls	r5, r5, #23
 80123b4:	42aa      	cmp	r2, r5
 80123b6:	dc04      	bgt.n	80123c2 <__ieee754_atan2f+0x1a>
 80123b8:	0043      	lsls	r3, r0, #1
 80123ba:	0007      	movs	r7, r0
 80123bc:	085b      	lsrs	r3, r3, #1
 80123be:	42ab      	cmp	r3, r5
 80123c0:	dd02      	ble.n	80123c8 <__ieee754_atan2f+0x20>
 80123c2:	f7ee f8b3 	bl	800052c <__aeabi_fadd>
 80123c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80123c8:	24fe      	movs	r4, #254	; 0xfe
 80123ca:	05a4      	lsls	r4, r4, #22
 80123cc:	42a1      	cmp	r1, r4
 80123ce:	d102      	bne.n	80123d6 <__ieee754_atan2f+0x2e>
 80123d0:	f000 f916 	bl	8012600 <atanf>
 80123d4:	e7f7      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 80123d6:	2602      	movs	r6, #2
 80123d8:	178c      	asrs	r4, r1, #30
 80123da:	4034      	ands	r4, r6
 80123dc:	0fc6      	lsrs	r6, r0, #31
 80123de:	4334      	orrs	r4, r6
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d105      	bne.n	80123f0 <__ieee754_atan2f+0x48>
 80123e4:	2c02      	cmp	r4, #2
 80123e6:	d045      	beq.n	8012474 <__ieee754_atan2f+0xcc>
 80123e8:	2c03      	cmp	r4, #3
 80123ea:	d1ec      	bne.n	80123c6 <__ieee754_atan2f+0x1e>
 80123ec:	4824      	ldr	r0, [pc, #144]	; (8012480 <__ieee754_atan2f+0xd8>)
 80123ee:	e7ea      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 80123f0:	2a00      	cmp	r2, #0
 80123f2:	d103      	bne.n	80123fc <__ieee754_atan2f+0x54>
 80123f4:	2f00      	cmp	r7, #0
 80123f6:	da41      	bge.n	801247c <__ieee754_atan2f+0xd4>
 80123f8:	4822      	ldr	r0, [pc, #136]	; (8012484 <__ieee754_atan2f+0xdc>)
 80123fa:	e7e4      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 80123fc:	42aa      	cmp	r2, r5
 80123fe:	d10e      	bne.n	801241e <__ieee754_atan2f+0x76>
 8012400:	3c01      	subs	r4, #1
 8012402:	4293      	cmp	r3, r2
 8012404:	d105      	bne.n	8012412 <__ieee754_atan2f+0x6a>
 8012406:	2c02      	cmp	r4, #2
 8012408:	d836      	bhi.n	8012478 <__ieee754_atan2f+0xd0>
 801240a:	4b1f      	ldr	r3, [pc, #124]	; (8012488 <__ieee754_atan2f+0xe0>)
 801240c:	00a4      	lsls	r4, r4, #2
 801240e:	58e0      	ldr	r0, [r4, r3]
 8012410:	e7d9      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 8012412:	2000      	movs	r0, #0
 8012414:	2c02      	cmp	r4, #2
 8012416:	d8d6      	bhi.n	80123c6 <__ieee754_atan2f+0x1e>
 8012418:	4b1c      	ldr	r3, [pc, #112]	; (801248c <__ieee754_atan2f+0xe4>)
 801241a:	00a4      	lsls	r4, r4, #2
 801241c:	e7f7      	b.n	801240e <__ieee754_atan2f+0x66>
 801241e:	42ab      	cmp	r3, r5
 8012420:	d0e8      	beq.n	80123f4 <__ieee754_atan2f+0x4c>
 8012422:	1a9b      	subs	r3, r3, r2
 8012424:	15db      	asrs	r3, r3, #23
 8012426:	2b3c      	cmp	r3, #60	; 0x3c
 8012428:	dc14      	bgt.n	8012454 <__ieee754_atan2f+0xac>
 801242a:	2900      	cmp	r1, #0
 801242c:	da01      	bge.n	8012432 <__ieee754_atan2f+0x8a>
 801242e:	333c      	adds	r3, #60	; 0x3c
 8012430:	db12      	blt.n	8012458 <__ieee754_atan2f+0xb0>
 8012432:	f7ee fa19 	bl	8000868 <__aeabi_fdiv>
 8012436:	f000 f9f3 	bl	8012820 <fabsf>
 801243a:	f000 f8e1 	bl	8012600 <atanf>
 801243e:	2c01      	cmp	r4, #1
 8012440:	d00c      	beq.n	801245c <__ieee754_atan2f+0xb4>
 8012442:	2c02      	cmp	r4, #2
 8012444:	d00e      	beq.n	8012464 <__ieee754_atan2f+0xbc>
 8012446:	2c00      	cmp	r4, #0
 8012448:	d0bd      	beq.n	80123c6 <__ieee754_atan2f+0x1e>
 801244a:	4911      	ldr	r1, [pc, #68]	; (8012490 <__ieee754_atan2f+0xe8>)
 801244c:	f7ee f86e 	bl	800052c <__aeabi_fadd>
 8012450:	4910      	ldr	r1, [pc, #64]	; (8012494 <__ieee754_atan2f+0xec>)
 8012452:	e00c      	b.n	801246e <__ieee754_atan2f+0xc6>
 8012454:	4810      	ldr	r0, [pc, #64]	; (8012498 <__ieee754_atan2f+0xf0>)
 8012456:	e7f2      	b.n	801243e <__ieee754_atan2f+0x96>
 8012458:	2000      	movs	r0, #0
 801245a:	e7f0      	b.n	801243e <__ieee754_atan2f+0x96>
 801245c:	2380      	movs	r3, #128	; 0x80
 801245e:	061b      	lsls	r3, r3, #24
 8012460:	18c0      	adds	r0, r0, r3
 8012462:	e7b0      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 8012464:	490a      	ldr	r1, [pc, #40]	; (8012490 <__ieee754_atan2f+0xe8>)
 8012466:	f7ee f861 	bl	800052c <__aeabi_fadd>
 801246a:	1c01      	adds	r1, r0, #0
 801246c:	4809      	ldr	r0, [pc, #36]	; (8012494 <__ieee754_atan2f+0xec>)
 801246e:	f7ee fce9 	bl	8000e44 <__aeabi_fsub>
 8012472:	e7a8      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 8012474:	4807      	ldr	r0, [pc, #28]	; (8012494 <__ieee754_atan2f+0xec>)
 8012476:	e7a6      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 8012478:	4808      	ldr	r0, [pc, #32]	; (801249c <__ieee754_atan2f+0xf4>)
 801247a:	e7a4      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 801247c:	4806      	ldr	r0, [pc, #24]	; (8012498 <__ieee754_atan2f+0xf0>)
 801247e:	e7a2      	b.n	80123c6 <__ieee754_atan2f+0x1e>
 8012480:	c0490fdb 	.word	0xc0490fdb
 8012484:	bfc90fdb 	.word	0xbfc90fdb
 8012488:	080130a8 	.word	0x080130a8
 801248c:	080130b4 	.word	0x080130b4
 8012490:	33bbbd2e 	.word	0x33bbbd2e
 8012494:	40490fdb 	.word	0x40490fdb
 8012498:	3fc90fdb 	.word	0x3fc90fdb
 801249c:	3f490fdb 	.word	0x3f490fdb

080124a0 <with_errno>:
 80124a0:	b570      	push	{r4, r5, r6, lr}
 80124a2:	000d      	movs	r5, r1
 80124a4:	0016      	movs	r6, r2
 80124a6:	0004      	movs	r4, r0
 80124a8:	f7fc f958 	bl	800e75c <__errno>
 80124ac:	0029      	movs	r1, r5
 80124ae:	6006      	str	r6, [r0, #0]
 80124b0:	0020      	movs	r0, r4
 80124b2:	bd70      	pop	{r4, r5, r6, pc}

080124b4 <xflow>:
 80124b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124b6:	0015      	movs	r5, r2
 80124b8:	001c      	movs	r4, r3
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d010      	beq.n	80124e0 <xflow+0x2c>
 80124be:	2380      	movs	r3, #128	; 0x80
 80124c0:	0010      	movs	r0, r2
 80124c2:	061b      	lsls	r3, r3, #24
 80124c4:	18e1      	adds	r1, r4, r3
 80124c6:	9000      	str	r0, [sp, #0]
 80124c8:	9101      	str	r1, [sp, #4]
 80124ca:	9a00      	ldr	r2, [sp, #0]
 80124cc:	9b01      	ldr	r3, [sp, #4]
 80124ce:	0028      	movs	r0, r5
 80124d0:	0021      	movs	r1, r4
 80124d2:	f7ef fdf1 	bl	80020b8 <__aeabi_dmul>
 80124d6:	2222      	movs	r2, #34	; 0x22
 80124d8:	f7ff ffe2 	bl	80124a0 <with_errno>
 80124dc:	b003      	add	sp, #12
 80124de:	bd30      	pop	{r4, r5, pc}
 80124e0:	0010      	movs	r0, r2
 80124e2:	0019      	movs	r1, r3
 80124e4:	e7ef      	b.n	80124c6 <xflow+0x12>

080124e6 <__math_uflow>:
 80124e6:	2380      	movs	r3, #128	; 0x80
 80124e8:	b510      	push	{r4, lr}
 80124ea:	2200      	movs	r2, #0
 80124ec:	055b      	lsls	r3, r3, #21
 80124ee:	f7ff ffe1 	bl	80124b4 <xflow>
 80124f2:	bd10      	pop	{r4, pc}

080124f4 <__math_oflow>:
 80124f4:	23e0      	movs	r3, #224	; 0xe0
 80124f6:	b510      	push	{r4, lr}
 80124f8:	2200      	movs	r2, #0
 80124fa:	05db      	lsls	r3, r3, #23
 80124fc:	f7ff ffda 	bl	80124b4 <xflow>
 8012500:	bd10      	pop	{r4, pc}

08012502 <fabs>:
 8012502:	004b      	lsls	r3, r1, #1
 8012504:	0859      	lsrs	r1, r3, #1
 8012506:	4770      	bx	lr

08012508 <finite>:
 8012508:	4b02      	ldr	r3, [pc, #8]	; (8012514 <finite+0xc>)
 801250a:	0048      	lsls	r0, r1, #1
 801250c:	0840      	lsrs	r0, r0, #1
 801250e:	18c0      	adds	r0, r0, r3
 8012510:	0fc0      	lsrs	r0, r0, #31
 8012512:	4770      	bx	lr
 8012514:	80100000 	.word	0x80100000

08012518 <scalbn>:
 8012518:	004b      	lsls	r3, r1, #1
 801251a:	b570      	push	{r4, r5, r6, lr}
 801251c:	0d5b      	lsrs	r3, r3, #21
 801251e:	0014      	movs	r4, r2
 8012520:	000a      	movs	r2, r1
 8012522:	2b00      	cmp	r3, #0
 8012524:	d10d      	bne.n	8012542 <scalbn+0x2a>
 8012526:	004b      	lsls	r3, r1, #1
 8012528:	085b      	lsrs	r3, r3, #1
 801252a:	4303      	orrs	r3, r0
 801252c:	d010      	beq.n	8012550 <scalbn+0x38>
 801252e:	4b27      	ldr	r3, [pc, #156]	; (80125cc <scalbn+0xb4>)
 8012530:	2200      	movs	r2, #0
 8012532:	f7ef fdc1 	bl	80020b8 <__aeabi_dmul>
 8012536:	4b26      	ldr	r3, [pc, #152]	; (80125d0 <scalbn+0xb8>)
 8012538:	429c      	cmp	r4, r3
 801253a:	da0a      	bge.n	8012552 <scalbn+0x3a>
 801253c:	4a25      	ldr	r2, [pc, #148]	; (80125d4 <scalbn+0xbc>)
 801253e:	4b26      	ldr	r3, [pc, #152]	; (80125d8 <scalbn+0xc0>)
 8012540:	e019      	b.n	8012576 <scalbn+0x5e>
 8012542:	4d26      	ldr	r5, [pc, #152]	; (80125dc <scalbn+0xc4>)
 8012544:	42ab      	cmp	r3, r5
 8012546:	d108      	bne.n	801255a <scalbn+0x42>
 8012548:	0002      	movs	r2, r0
 801254a:	000b      	movs	r3, r1
 801254c:	f7ee fe76 	bl	800123c <__aeabi_dadd>
 8012550:	bd70      	pop	{r4, r5, r6, pc}
 8012552:	000a      	movs	r2, r1
 8012554:	004b      	lsls	r3, r1, #1
 8012556:	0d5b      	lsrs	r3, r3, #21
 8012558:	3b36      	subs	r3, #54	; 0x36
 801255a:	4d21      	ldr	r5, [pc, #132]	; (80125e0 <scalbn+0xc8>)
 801255c:	18e3      	adds	r3, r4, r3
 801255e:	42ab      	cmp	r3, r5
 8012560:	dd0c      	ble.n	801257c <scalbn+0x64>
 8012562:	4c20      	ldr	r4, [pc, #128]	; (80125e4 <scalbn+0xcc>)
 8012564:	4d20      	ldr	r5, [pc, #128]	; (80125e8 <scalbn+0xd0>)
 8012566:	2900      	cmp	r1, #0
 8012568:	da01      	bge.n	801256e <scalbn+0x56>
 801256a:	4c1e      	ldr	r4, [pc, #120]	; (80125e4 <scalbn+0xcc>)
 801256c:	4d1f      	ldr	r5, [pc, #124]	; (80125ec <scalbn+0xd4>)
 801256e:	0020      	movs	r0, r4
 8012570:	0029      	movs	r1, r5
 8012572:	4a1c      	ldr	r2, [pc, #112]	; (80125e4 <scalbn+0xcc>)
 8012574:	4b1c      	ldr	r3, [pc, #112]	; (80125e8 <scalbn+0xd0>)
 8012576:	f7ef fd9f 	bl	80020b8 <__aeabi_dmul>
 801257a:	e7e9      	b.n	8012550 <scalbn+0x38>
 801257c:	2b00      	cmp	r3, #0
 801257e:	dd05      	ble.n	801258c <scalbn+0x74>
 8012580:	4c1b      	ldr	r4, [pc, #108]	; (80125f0 <scalbn+0xd8>)
 8012582:	051b      	lsls	r3, r3, #20
 8012584:	4022      	ands	r2, r4
 8012586:	431a      	orrs	r2, r3
 8012588:	0011      	movs	r1, r2
 801258a:	e7e1      	b.n	8012550 <scalbn+0x38>
 801258c:	001d      	movs	r5, r3
 801258e:	3535      	adds	r5, #53	; 0x35
 8012590:	da13      	bge.n	80125ba <scalbn+0xa2>
 8012592:	4a18      	ldr	r2, [pc, #96]	; (80125f4 <scalbn+0xdc>)
 8012594:	0fcb      	lsrs	r3, r1, #31
 8012596:	4294      	cmp	r4, r2
 8012598:	dd08      	ble.n	80125ac <scalbn+0x94>
 801259a:	4812      	ldr	r0, [pc, #72]	; (80125e4 <scalbn+0xcc>)
 801259c:	4912      	ldr	r1, [pc, #72]	; (80125e8 <scalbn+0xd0>)
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d001      	beq.n	80125a6 <scalbn+0x8e>
 80125a2:	4810      	ldr	r0, [pc, #64]	; (80125e4 <scalbn+0xcc>)
 80125a4:	4911      	ldr	r1, [pc, #68]	; (80125ec <scalbn+0xd4>)
 80125a6:	4a0f      	ldr	r2, [pc, #60]	; (80125e4 <scalbn+0xcc>)
 80125a8:	4b0f      	ldr	r3, [pc, #60]	; (80125e8 <scalbn+0xd0>)
 80125aa:	e7e4      	b.n	8012576 <scalbn+0x5e>
 80125ac:	4809      	ldr	r0, [pc, #36]	; (80125d4 <scalbn+0xbc>)
 80125ae:	490a      	ldr	r1, [pc, #40]	; (80125d8 <scalbn+0xc0>)
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d0c3      	beq.n	801253c <scalbn+0x24>
 80125b4:	4807      	ldr	r0, [pc, #28]	; (80125d4 <scalbn+0xbc>)
 80125b6:	4910      	ldr	r1, [pc, #64]	; (80125f8 <scalbn+0xe0>)
 80125b8:	e7c0      	b.n	801253c <scalbn+0x24>
 80125ba:	4c0d      	ldr	r4, [pc, #52]	; (80125f0 <scalbn+0xd8>)
 80125bc:	3336      	adds	r3, #54	; 0x36
 80125be:	4022      	ands	r2, r4
 80125c0:	051b      	lsls	r3, r3, #20
 80125c2:	4313      	orrs	r3, r2
 80125c4:	0019      	movs	r1, r3
 80125c6:	2200      	movs	r2, #0
 80125c8:	4b0c      	ldr	r3, [pc, #48]	; (80125fc <scalbn+0xe4>)
 80125ca:	e7d4      	b.n	8012576 <scalbn+0x5e>
 80125cc:	43500000 	.word	0x43500000
 80125d0:	ffff3cb0 	.word	0xffff3cb0
 80125d4:	c2f8f359 	.word	0xc2f8f359
 80125d8:	01a56e1f 	.word	0x01a56e1f
 80125dc:	000007ff 	.word	0x000007ff
 80125e0:	000007fe 	.word	0x000007fe
 80125e4:	8800759c 	.word	0x8800759c
 80125e8:	7e37e43c 	.word	0x7e37e43c
 80125ec:	fe37e43c 	.word	0xfe37e43c
 80125f0:	800fffff 	.word	0x800fffff
 80125f4:	0000c350 	.word	0x0000c350
 80125f8:	81a56e1f 	.word	0x81a56e1f
 80125fc:	3c900000 	.word	0x3c900000

08012600 <atanf>:
 8012600:	23a1      	movs	r3, #161	; 0xa1
 8012602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012604:	0045      	lsls	r5, r0, #1
 8012606:	1c04      	adds	r4, r0, #0
 8012608:	9001      	str	r0, [sp, #4]
 801260a:	086d      	lsrs	r5, r5, #1
 801260c:	05db      	lsls	r3, r3, #23
 801260e:	429d      	cmp	r5, r3
 8012610:	db0f      	blt.n	8012632 <atanf+0x32>
 8012612:	23ff      	movs	r3, #255	; 0xff
 8012614:	05db      	lsls	r3, r3, #23
 8012616:	429d      	cmp	r5, r3
 8012618:	dd04      	ble.n	8012624 <atanf+0x24>
 801261a:	1c01      	adds	r1, r0, #0
 801261c:	f7ed ff86 	bl	800052c <__aeabi_fadd>
 8012620:	1c04      	adds	r4, r0, #0
 8012622:	e004      	b.n	801262e <atanf+0x2e>
 8012624:	9b01      	ldr	r3, [sp, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	dd00      	ble.n	801262c <atanf+0x2c>
 801262a:	e0cc      	b.n	80127c6 <atanf+0x1c6>
 801262c:	4c67      	ldr	r4, [pc, #412]	; (80127cc <atanf+0x1cc>)
 801262e:	1c20      	adds	r0, r4, #0
 8012630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012632:	4b67      	ldr	r3, [pc, #412]	; (80127d0 <atanf+0x1d0>)
 8012634:	429d      	cmp	r5, r3
 8012636:	dc0f      	bgt.n	8012658 <atanf+0x58>
 8012638:	23c4      	movs	r3, #196	; 0xc4
 801263a:	059b      	lsls	r3, r3, #22
 801263c:	429d      	cmp	r5, r3
 801263e:	da08      	bge.n	8012652 <atanf+0x52>
 8012640:	4964      	ldr	r1, [pc, #400]	; (80127d4 <atanf+0x1d4>)
 8012642:	f7ed ff73 	bl	800052c <__aeabi_fadd>
 8012646:	21fe      	movs	r1, #254	; 0xfe
 8012648:	0589      	lsls	r1, r1, #22
 801264a:	f7ed ff5b 	bl	8000504 <__aeabi_fcmpgt>
 801264e:	2800      	cmp	r0, #0
 8012650:	d1ed      	bne.n	801262e <atanf+0x2e>
 8012652:	2601      	movs	r6, #1
 8012654:	4276      	negs	r6, r6
 8012656:	e01b      	b.n	8012690 <atanf+0x90>
 8012658:	f000 f8e2 	bl	8012820 <fabsf>
 801265c:	4b5e      	ldr	r3, [pc, #376]	; (80127d8 <atanf+0x1d8>)
 801265e:	1c04      	adds	r4, r0, #0
 8012660:	429d      	cmp	r5, r3
 8012662:	dc7b      	bgt.n	801275c <atanf+0x15c>
 8012664:	4b5d      	ldr	r3, [pc, #372]	; (80127dc <atanf+0x1dc>)
 8012666:	429d      	cmp	r5, r3
 8012668:	dc67      	bgt.n	801273a <atanf+0x13a>
 801266a:	1c01      	adds	r1, r0, #0
 801266c:	f7ed ff5e 	bl	800052c <__aeabi_fadd>
 8012670:	21fe      	movs	r1, #254	; 0xfe
 8012672:	0589      	lsls	r1, r1, #22
 8012674:	f7ee fbe6 	bl	8000e44 <__aeabi_fsub>
 8012678:	2180      	movs	r1, #128	; 0x80
 801267a:	1c05      	adds	r5, r0, #0
 801267c:	05c9      	lsls	r1, r1, #23
 801267e:	1c20      	adds	r0, r4, #0
 8012680:	f7ed ff54 	bl	800052c <__aeabi_fadd>
 8012684:	1c01      	adds	r1, r0, #0
 8012686:	1c28      	adds	r0, r5, #0
 8012688:	f7ee f8ee 	bl	8000868 <__aeabi_fdiv>
 801268c:	2600      	movs	r6, #0
 801268e:	1c04      	adds	r4, r0, #0
 8012690:	1c21      	adds	r1, r4, #0
 8012692:	1c20      	adds	r0, r4, #0
 8012694:	f7ee fab0 	bl	8000bf8 <__aeabi_fmul>
 8012698:	1c01      	adds	r1, r0, #0
 801269a:	1c07      	adds	r7, r0, #0
 801269c:	f7ee faac 	bl	8000bf8 <__aeabi_fmul>
 80126a0:	494f      	ldr	r1, [pc, #316]	; (80127e0 <atanf+0x1e0>)
 80126a2:	1c05      	adds	r5, r0, #0
 80126a4:	f7ee faa8 	bl	8000bf8 <__aeabi_fmul>
 80126a8:	494e      	ldr	r1, [pc, #312]	; (80127e4 <atanf+0x1e4>)
 80126aa:	f7ed ff3f 	bl	800052c <__aeabi_fadd>
 80126ae:	1c29      	adds	r1, r5, #0
 80126b0:	f7ee faa2 	bl	8000bf8 <__aeabi_fmul>
 80126b4:	494c      	ldr	r1, [pc, #304]	; (80127e8 <atanf+0x1e8>)
 80126b6:	f7ed ff39 	bl	800052c <__aeabi_fadd>
 80126ba:	1c29      	adds	r1, r5, #0
 80126bc:	f7ee fa9c 	bl	8000bf8 <__aeabi_fmul>
 80126c0:	494a      	ldr	r1, [pc, #296]	; (80127ec <atanf+0x1ec>)
 80126c2:	f7ed ff33 	bl	800052c <__aeabi_fadd>
 80126c6:	1c29      	adds	r1, r5, #0
 80126c8:	f7ee fa96 	bl	8000bf8 <__aeabi_fmul>
 80126cc:	4948      	ldr	r1, [pc, #288]	; (80127f0 <atanf+0x1f0>)
 80126ce:	f7ed ff2d 	bl	800052c <__aeabi_fadd>
 80126d2:	1c29      	adds	r1, r5, #0
 80126d4:	f7ee fa90 	bl	8000bf8 <__aeabi_fmul>
 80126d8:	4946      	ldr	r1, [pc, #280]	; (80127f4 <atanf+0x1f4>)
 80126da:	f7ed ff27 	bl	800052c <__aeabi_fadd>
 80126de:	1c39      	adds	r1, r7, #0
 80126e0:	f7ee fa8a 	bl	8000bf8 <__aeabi_fmul>
 80126e4:	4944      	ldr	r1, [pc, #272]	; (80127f8 <atanf+0x1f8>)
 80126e6:	1c07      	adds	r7, r0, #0
 80126e8:	1c28      	adds	r0, r5, #0
 80126ea:	f7ee fa85 	bl	8000bf8 <__aeabi_fmul>
 80126ee:	4943      	ldr	r1, [pc, #268]	; (80127fc <atanf+0x1fc>)
 80126f0:	f7ee fba8 	bl	8000e44 <__aeabi_fsub>
 80126f4:	1c29      	adds	r1, r5, #0
 80126f6:	f7ee fa7f 	bl	8000bf8 <__aeabi_fmul>
 80126fa:	4941      	ldr	r1, [pc, #260]	; (8012800 <atanf+0x200>)
 80126fc:	f7ee fba2 	bl	8000e44 <__aeabi_fsub>
 8012700:	1c29      	adds	r1, r5, #0
 8012702:	f7ee fa79 	bl	8000bf8 <__aeabi_fmul>
 8012706:	493f      	ldr	r1, [pc, #252]	; (8012804 <atanf+0x204>)
 8012708:	f7ee fb9c 	bl	8000e44 <__aeabi_fsub>
 801270c:	1c29      	adds	r1, r5, #0
 801270e:	f7ee fa73 	bl	8000bf8 <__aeabi_fmul>
 8012712:	493d      	ldr	r1, [pc, #244]	; (8012808 <atanf+0x208>)
 8012714:	f7ee fb96 	bl	8000e44 <__aeabi_fsub>
 8012718:	1c29      	adds	r1, r5, #0
 801271a:	f7ee fa6d 	bl	8000bf8 <__aeabi_fmul>
 801271e:	1c01      	adds	r1, r0, #0
 8012720:	1c38      	adds	r0, r7, #0
 8012722:	f7ed ff03 	bl	800052c <__aeabi_fadd>
 8012726:	1c21      	adds	r1, r4, #0
 8012728:	f7ee fa66 	bl	8000bf8 <__aeabi_fmul>
 801272c:	1c73      	adds	r3, r6, #1
 801272e:	d134      	bne.n	801279a <atanf+0x19a>
 8012730:	1c01      	adds	r1, r0, #0
 8012732:	1c20      	adds	r0, r4, #0
 8012734:	f7ee fb86 	bl	8000e44 <__aeabi_fsub>
 8012738:	e772      	b.n	8012620 <atanf+0x20>
 801273a:	21fe      	movs	r1, #254	; 0xfe
 801273c:	0589      	lsls	r1, r1, #22
 801273e:	f7ee fb81 	bl	8000e44 <__aeabi_fsub>
 8012742:	21fe      	movs	r1, #254	; 0xfe
 8012744:	1c05      	adds	r5, r0, #0
 8012746:	0589      	lsls	r1, r1, #22
 8012748:	1c20      	adds	r0, r4, #0
 801274a:	f7ed feef 	bl	800052c <__aeabi_fadd>
 801274e:	1c01      	adds	r1, r0, #0
 8012750:	1c28      	adds	r0, r5, #0
 8012752:	f7ee f889 	bl	8000868 <__aeabi_fdiv>
 8012756:	2601      	movs	r6, #1
 8012758:	1c04      	adds	r4, r0, #0
 801275a:	e799      	b.n	8012690 <atanf+0x90>
 801275c:	4b2b      	ldr	r3, [pc, #172]	; (801280c <atanf+0x20c>)
 801275e:	429d      	cmp	r5, r3
 8012760:	dc14      	bgt.n	801278c <atanf+0x18c>
 8012762:	21ff      	movs	r1, #255	; 0xff
 8012764:	0589      	lsls	r1, r1, #22
 8012766:	f7ee fb6d 	bl	8000e44 <__aeabi_fsub>
 801276a:	21ff      	movs	r1, #255	; 0xff
 801276c:	1c05      	adds	r5, r0, #0
 801276e:	0589      	lsls	r1, r1, #22
 8012770:	1c20      	adds	r0, r4, #0
 8012772:	f7ee fa41 	bl	8000bf8 <__aeabi_fmul>
 8012776:	21fe      	movs	r1, #254	; 0xfe
 8012778:	0589      	lsls	r1, r1, #22
 801277a:	f7ed fed7 	bl	800052c <__aeabi_fadd>
 801277e:	1c01      	adds	r1, r0, #0
 8012780:	1c28      	adds	r0, r5, #0
 8012782:	f7ee f871 	bl	8000868 <__aeabi_fdiv>
 8012786:	2602      	movs	r6, #2
 8012788:	1c04      	adds	r4, r0, #0
 801278a:	e781      	b.n	8012690 <atanf+0x90>
 801278c:	1c01      	adds	r1, r0, #0
 801278e:	4820      	ldr	r0, [pc, #128]	; (8012810 <atanf+0x210>)
 8012790:	f7ee f86a 	bl	8000868 <__aeabi_fdiv>
 8012794:	2603      	movs	r6, #3
 8012796:	1c04      	adds	r4, r0, #0
 8012798:	e77a      	b.n	8012690 <atanf+0x90>
 801279a:	4b1e      	ldr	r3, [pc, #120]	; (8012814 <atanf+0x214>)
 801279c:	00b6      	lsls	r6, r6, #2
 801279e:	58f1      	ldr	r1, [r6, r3]
 80127a0:	f7ee fb50 	bl	8000e44 <__aeabi_fsub>
 80127a4:	1c21      	adds	r1, r4, #0
 80127a6:	f7ee fb4d 	bl	8000e44 <__aeabi_fsub>
 80127aa:	4b1b      	ldr	r3, [pc, #108]	; (8012818 <atanf+0x218>)
 80127ac:	1c01      	adds	r1, r0, #0
 80127ae:	58f0      	ldr	r0, [r6, r3]
 80127b0:	f7ee fb48 	bl	8000e44 <__aeabi_fsub>
 80127b4:	9b01      	ldr	r3, [sp, #4]
 80127b6:	1c04      	adds	r4, r0, #0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	db00      	blt.n	80127be <atanf+0x1be>
 80127bc:	e737      	b.n	801262e <atanf+0x2e>
 80127be:	2380      	movs	r3, #128	; 0x80
 80127c0:	061b      	lsls	r3, r3, #24
 80127c2:	18c4      	adds	r4, r0, r3
 80127c4:	e733      	b.n	801262e <atanf+0x2e>
 80127c6:	4c15      	ldr	r4, [pc, #84]	; (801281c <atanf+0x21c>)
 80127c8:	e731      	b.n	801262e <atanf+0x2e>
 80127ca:	46c0      	nop			; (mov r8, r8)
 80127cc:	bfc90fdb 	.word	0xbfc90fdb
 80127d0:	3edfffff 	.word	0x3edfffff
 80127d4:	7149f2ca 	.word	0x7149f2ca
 80127d8:	3f97ffff 	.word	0x3f97ffff
 80127dc:	3f2fffff 	.word	0x3f2fffff
 80127e0:	3c8569d7 	.word	0x3c8569d7
 80127e4:	3d4bda59 	.word	0x3d4bda59
 80127e8:	3d886b35 	.word	0x3d886b35
 80127ec:	3dba2e6e 	.word	0x3dba2e6e
 80127f0:	3e124925 	.word	0x3e124925
 80127f4:	3eaaaaab 	.word	0x3eaaaaab
 80127f8:	bd15a221 	.word	0xbd15a221
 80127fc:	3d6ef16b 	.word	0x3d6ef16b
 8012800:	3d9d8795 	.word	0x3d9d8795
 8012804:	3de38e38 	.word	0x3de38e38
 8012808:	3e4ccccd 	.word	0x3e4ccccd
 801280c:	401bffff 	.word	0x401bffff
 8012810:	bf800000 	.word	0xbf800000
 8012814:	080130d0 	.word	0x080130d0
 8012818:	080130c0 	.word	0x080130c0
 801281c:	3fc90fdb 	.word	0x3fc90fdb

08012820 <fabsf>:
 8012820:	0040      	lsls	r0, r0, #1
 8012822:	0840      	lsrs	r0, r0, #1
 8012824:	4770      	bx	lr
	...

08012828 <_init>:
 8012828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801282a:	46c0      	nop			; (mov r8, r8)
 801282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801282e:	bc08      	pop	{r3}
 8012830:	469e      	mov	lr, r3
 8012832:	4770      	bx	lr

08012834 <_fini>:
 8012834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012836:	46c0      	nop			; (mov r8, r8)
 8012838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801283a:	bc08      	pop	{r3}
 801283c:	469e      	mov	lr, r3
 801283e:	4770      	bx	lr
